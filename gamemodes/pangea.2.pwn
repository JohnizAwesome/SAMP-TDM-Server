
/*
 * Pangea Multi-mode server, by Dr.Einstein 2010 - 2014
 * LICENSE: https://www.gnu.org/licenses/gpl-3.0.txt
*/

#include <a_samp>

#undef MAX_PLAYERS
#define MAX_PLAYERS 152

#define forLoop(%0,%1) for(new it_%0 = 0, %0=0, sen_%0 = %1; %0 < sen_%0 && it_%0 < sen_%0; %0++, it_%0++)
#define forLoopV(%0,%2,%1) for(new it_%0 = %2, %0=%2, sen_%0 = %1; %0 < sen_%0 && it_%0 < sen_%0; %0++, it_%0++)
#define forLoopR(%0,%2,%1) for(new it_%0 = %2, %0=%2, sen_%0 = %1; %0 > sen_%0 && it_%0 > sen_%0; %0--, it_%0--)

#define DRAW_DISTANCE 500.0

#define HOST "127.0.0.1"
#define USER "root"
#define PASSWORD ""
#define DATABASE "samp_mm"

#include <a_mysql>
#include <a_md5>
#include <ConnectFlood>
#include <a_http>
#include <dutils>
#include <worldids>
#include <anticheatstuff_PANGEA>
#include <sscanf2>
#include <attachments>
#include <filemanager>
#include <streamer>
#include <viewdistance>
#include <mapandreas>

#pragma dynamic 145000
#pragma tabsize 4
#define MAX_CHAR_NEXT_LINE 50

native gpci ( playerid, serial [ ], maxlen );

#define function:%1(%2) forward %1(%2); public %1(%2)

native SetGVarInt(const name[], value, id = 0);
native GetGVarInt(const name[], id = 0);
native SetGVarString(const name[], const value[], id = 0);
native GetGVarString(const name[], dest[], maxlength = sizeof dest, id = 0);
native SetGVarFloat(const name[], Float:value, id = 0);
native Float:GetGVarFloat(const name[], id = 0);
native DeleteGVar(const name[], id = 0);
native GetGVarsUpperIndex(id = 0);
native GetGVarNameAtIndex(index, dest[], maxlength = sizeof dest, id = 0);
native GetGVarType(const name[], id = 0);

#define GLOBAL_VARTYPE_NONE (0)
#define GLOBAL_VARTYPE_INT (1)
#define GLOBAL_VARTYPE_STRING (2)
#define GLOBAL_VARTYPE_FLOAT (3)

#define WEAPON_BODY_PART_CHEST 3
#define WEAPON_BODY_PART_CROTCH 4
#define WEAPON_BODY_PART_LEFT_ARM 5
#define WEAPON_BODY_PART_RIGHT_ARM 6
#define WEAPON_BODY_PART_LEFT_LEG 7
#define WEAPON_BODY_PART_RIGHT_LEG 8
#define WEAPON_BODY_PART_HEAD 9

//====================[ZCMD]==============================
#define MAX_FUNC_NAME (32)

#define COMMAND:%1(%2)          \
			forward cmd_%1(%2); \
			public cmd_%1(%2)

#define CMD:%1(%2) \
			COMMAND:%1(%2)

#define command(%1,%2,%3) \
			COMMAND:%1(%2, %3)

#define cmd(%1,%2,%3) \
			COMMAND:%1(%2, %3)

#if !defined isnull
	#define isnull(%1) \
				((!(%1[0])) || (((%1[0]) == '\1') && (!(%1[1]))))
#endif

forward OnPlayerCommandReceived(playerid, cmdtext[]);
forward OnPlayerCommandPerformed(playerid, cmdtext[], success);

static
	bool:zcmd_g_HasOPCS = false,
	bool:zcmd_g_HasOPCE = false;

//====================[MENUS&DIALOGS]==============================
#define LOGINMENU 0
#define REGISTERMENU 1
#define CHANGEPASSMENU 2
#define SELMENU 3
#define RADIO_MENU 4
#define PWEAPMENU 7
#define FIGHTMENU 8
#define CLASSMENU 9
#define REFILLMENU 10
#define ELECTIONMENU 11
#define EVENTMENU 12
#define INEVENTMENU 13
#define EJOINMENU 14
#define TELEMENU 15
#define EVENT_PLAYLIST_NEXT 16
#define TELE_PLAYLIST_NEXT 17
#define ATOMICMENU 18
#define SOUNDENABLE 19
#define DIALOG_ATTACH 					20
#define DIALOG_ATTACH_EDITREPLACE       21
#define DIALOG_ATTACH_MODEL_SELECTION   22
#define DIALOG_ATTACH_BONE_SELECTION    23
#define DIALOG_ATTACH_INDEX             24
#define DIALOG_ATTACH_SEARCH            25
#define DIALOG_ATTACH_INDEX_SELECTION   26
//#define DIALOG_ATTACH_SEARCH_OR_LIST    27
#define DIALOG_ATTACH_MODEL_SELECTION2  28
#define MODE_PASSWORD                29
#define BAN_KICK_DIALOG                 30
#define CMDS_NEXT 31
//#define TOP_LIST_NEXT 32
#define MAPSELECTIONMENU 33
#define DM_BUY_MENU 42
#define DM_BUY_MENU_GLASSES 43
#define DM_BUY_MENU_HATS 44
//#define DM_BUY_MENU_SKINS 45
#define DM_BUY_MENU_PLATE 46
#define DM_BUY_MENU_WHEELS 47
#define PJ_BUY_MENU 48
#define PJ_BUY_MENU_GLASSES 49
#define PJ_BUY_MENU_HATS 50
//#define PJ_BUY_MENU_SKINS 51
#define SP_MENU 52
#define SP_MENU_COLORS 53
#define TUNE_MENU_MAIN 54
#define TUNE_MENU_PJOB 55
#define TUNE_MENU_EXHAUST 56
#define TUNE_MENU_FBUMPER 57
#define TUNE_MENU_RBUMPER 58
#define TUNE_MENU_ROOF 59
#define TUNE_MENU_SPOILER 60
#define TUNE_MENU_SSKIRT 61
#define TUNE_MENU_BAR 62
#define TUNE_MENU_WHEEL 63
#define TUNE_MENU_STEREO 64
#define TUNE_MENU_OTHER 65
#define RP_CHANGE_F_NAME 66
#define RP_CHANGE_L_NAME 67
#define RP_READ_NOTE 68
#define SERVER_SETTINGS 69

//====================[Integrated]==============================
#define SELECT_TEXT_DRAW -1061109505
#define SELECT_TEXT_SKIN_CAR_DRAW 0xe0e0e0AA

#define MAX_MODES 14
#define LOBBY -1
#define TW 0
#define TRP 1
#define STUNT 2
#define FFA 3
#define TL 4
#define CO 5//
#define MOVIES 6
#define CTF 7//
#define DM 8
#define ZO 9//
#define PJ 10
#define PTP 11//
#define GK 12
#define VW 13

new PlayerModeNames[MAX_MODES][] =
{
    "World War Two - TDM",
	"Survival Roleplay",
	"Stunt & Minigames",
	"Free For All - Gangs",
	"WW2 Time Line",
	"Cops and Criminals",
	"Movie Record",
	"Capture the Flag",
	"Race - Duel - Derby",
	"Zombie Survival",
	"Base Jumping - PJ",
	"Protect the President",
	"Grab and Kill",
	"Vietnam War"
};

new PlayerModeNamesABV[MAX_MODES][] =
{
    "TW",
	"RP",
	"SF",
	"FFA",
	"TL",
	"CO",
	"MS",
	"CTF",
	"DM",
	"ZO",
	"PJ",
	"PTP",
	"GK",
	"VW"
};

#define SQUAD 0
#define GANG 1
#define THE_TW 2
#define MODE 3 // request if there is no players at player's mode to chane mode
#define TW_COUNTRY 4 //change country
#define THE_CO 5 //change team co
#define THE_TL 6 //change team tl
#define THE_CTF 7 //change team ctf
#define THE_PTP 8 //change team PTP
#define THE_CASH_RP 9 //give cash RP
#define THE_BAG_RP 10 //back pack rp
#define THE_G_BAG_RP 11 //back pack rp on ground
#define THE_V_BAG_RP 12 //back pack rp on venhi
#define THE_N_ITEMS_RP 13 //near items, so we  have a list
#define THE_N_BAGS_RP 14//near bags, so we  have a list
#define THE_STATS_SELECT_MENU 15
#define THE_STATS_MODE_MENU 16

#define MAX_WARNINGS 3
#define MAX_REPORTS 15
#define PING_MAX_EXCEEDS 4
#define PING_TIMELIMIT 60
#define MAX_FAIL_LOGINS 5

#define MAX_BOMBS 32
#define KEY_TO_DROP_BOMB KEY_HANDBRAKE

#define P_COLT 50
#define P_DEAGLE 100
#define P_SHOTGUN 150
#define P_SMG 200
#define P_UZI 200
#define P_TEC 200
#define P_AK 700
#define P_M4 700
#define P_SNIPER 900
#define VGrenade 3200
#define AGrenade 25
#define VTearGas 2600
#define ATearGas 50
#define VMolotovCocktail 6000
#define AMolotovCocktail 15
#define V9mm 5000
#define A9mm 900
#define VSilenced9mm 6000
#define ASilenced9mm 200
#define VDesertEagle 9000
#define ADesertEagle 300
#define VShotgun 5000
#define AShotgun 120
#define VSawn-offShotgun 10000
#define ASawn-offShotgun 120
#define VCombatShotgun 10000
#define ACombatShotgun 240
#define VSMG 7000
#define ASMG 500
#define VUZI 4000
#define AUZI 170
#define VTec-9 5000
#define ATec-9 200
#define VAK-47 6000
#define AAK-47 200
#define VM4 9000
#define AM4 510
#define VCountryRifle 3000
#define ACountryRifle 90
#define VSniperRifle 10000
#define ASniperRifle 600
#define VTheHealth 5000
#define VTheArmour 7000

#define eforeach(%1,%2) for (new %2 = 0; %2 < sizeof(%1); %2++ )

#define PRESSED(%0) \
    (((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))
#define RELEASED(%0) \
    (((newkeys & (%0)) != (%0)) && ((oldkeys & (%0)) == (%0)))

#define SP_MENU_STRING "Color\nUnits - (km/h or mph)\nSide (Left/Right)\nDisable/Enable Speedo"
#define TUNE_MENU_STR "Load saved parts\nSave Veh Parts\nPaint job + Hyds\nExhausts\nFront Bumper\nRear Bumper\nRoof\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo"

#define MAX_SHIPS 50
#define MAX_SHIP_VEHS 6
#define MAX_SHIP_OBJECTS 10
enum SHIPINFO
{
	Exists,
	Text3D:Ship3DT,
	Team,
	NameFull[50],
	NameShort[50],
	Mode,
	Float:sX,
	Float:sY,
	Float:sZ,
	gZone,
	Type,
	Vehicles[MAX_SHIP_VEHS],
	Object,
	Objects[MAX_SHIP_OBJECTS],
	sHP,
	CallForIt,
	RepairTime
};
new ShipInfo[MAX_SHIPS][SHIPINFO];

#define MAX_BOMB_TYPES 7
new gBombTypes[MAX_BOMB_TYPES][] =
{
	"No bomb",
	"Small bomb",
	"Big bomb",
	"Heavy bomb",
	"Atomic bomb",
	"Supplies",
	"Gas Bomb"
};
#define SELECT_MENU_OPTIONS 45 // RP backpacks :D, + 2 other options, pickup bag?, added 2 b/c array problem
enum PlayerData
{
	Registered,
	LoggedIn,
	ID,
	VIP,
	Level,
	Muted,
	BlockPM,
	ConnectedForMSG,
	NoReport,
	NoCMD,
	HideAdmin,
	Spycmds,
	Spypms,
	Messages,
	Commands,
	NoACCheck,
	SkinsCMD[5],
	EditingAttachments,
	DeathFlood,
	Jailed,
	Frozen,
	TimesOnServer,
	RegisterDate[50],
	pIP[25],
	Name[50],
	Password[50],
	SavedPos,
	PosX,
	PosY,
	PosZ,
	PosInt,
	PosWorld,
	SFSavedPos,
	SFPosX,
	SFPosY,
	SFPosZ,
	SFPosAng,
	SFPosInt,
	SFPosWorld,
	SFSP_SavedPos,
	SFSP_PosX,
	SFSP_PosY,
	SFSP_PosZ,
	SFSP_PosAng,
	SFSP_PosInt,
	SFSP_PosWorld,
	Warnings,
	Spawned,
	LastMsg,
	Online,
	ObjectsRemoved,
	JustSpectated,
	TagState,
	vComponents[14],
	God,
	GodCar,
	DoorsLocked,
	PingCount,
	PingTime,
	pPing[PING_MAX_EXCEEDS],
	SpecID,
	Attachments[3],//used attachments, 1=autoload, loadied unloaded
	FailLogin,
	SelectMenu,
	SelectMenuOption[SELECT_MENU_OPTIONS],//0=from/to id,1=item, AND THE REST IS FOR TW, 15 because of RP, dead items
	PlayerMode,
	ModeUnLock[MAX_MODES],
	ModeUnLockSel,
	MainMenu,
	StuffCreated,
	Credits,
	HeadShots,
	TimeOn,
	Vehicle,
	pHealth,
	pArmor,
	Spree,
	SpeedoObject,
	RacePlaceObject,
	SpeedoType,//0=km/h, 1= mph
	SpeedoSide,//0 left, 1 right
	SpeedoCol[10],
	SpeedoReset,//reattach the player veh
    DisbleSpeedo,
	sProtected,
	pTeam,
	InDodo,
	OnMiniGunCar,
	InNevada,
	InTank,
	InSubmarine,
	EnteredZone,
	DynamicArea,
	DisableSounds,
	DisableShowpInfo,
	DisableShowkSpree,
	PlayerText:BombTXT,
	PlayerText:InfoText,
	PlayerText:tSpawning,
	PlayerText:pSpec, //used for spectate...
	Text3D:EnemyFriend[MAX_PLAYERS],
	poFirstTime,
	TakeLandTimer,
	pListPage,
	pASlotID,
	Radio,
	DamageTextTimer,
	ZoneDead,
	SelectedSkin,
	AbuseFixVIP,
	AbuseHealVIP,
	lCountDown,
	HasSelectedVeh,
	cSelVeh,
	Text3D:TeamLabel,
	Text3D:ModeLabel,
	Float:cSelPos[4],//x,y,z,angle
	cVehModel,
	Option,
	PlayerOptionSelected,
	bombid[MAX_BOMBS],
	bombtime[MAX_BOMBS],
	bombarmed[MAX_BOMBS],
	Float:targetz[MAX_BOMBS],
	bfree[sizeof gBombTypes],
	bombsleft[sizeof gBombTypes],
	btype[MAX_BOMBS],
	bombcount,
	bptype,
	vmid,
	supplyid,
	gWeap[70],
	wCheck,
	Float:gHP,
	Float:gArmor
};
new PlayerInfo[MAX_PLAYERS][PlayerData];

#define MAX_SUPPLIES (3*MAX_PLAYERS)+10 //+10 so we cannot have an overload and the pics that don't have to be destroyed
enum SUPPLYWEAPS
{
	Exists,
	Ak,
	Sniper,
	Deagle,
	Grenade,
	Shotgun,
	gHP,
	gArmor,
	gMode
}
new Supplies[MAX_SUPPLIES][SUPPLYWEAPS];

enum sATTACHMENTS
{
	Exists,
	ModelID,
	BoneID,
	Float:pOffsetX,
	Float:pOffsetY,
	Float:pOffsetZ,
	Float:pRotX,
	Float:pRotY,
	Float:pRotZ,
	Float:pScaleX,
	Float:pScaleY,
	Float:pScaleZ
};
new sAttachments[MAX_PLAYERS][10][sATTACHMENTS];

enum pATTACHMENTS
{
	Exists,
    ModelID,
	BoneID,
	Float:pOffsetX,
	Float:pOffsetY,
	Float:pOffsetZ,
	Float:pRotX,
	Float:pRotY,
	Float:pRotZ,
	Float:pScaleX,
	Float:pScaleY,
	Float:pScaleZ
};
new pAttachments[MAX_PLAYERS][10][pATTACHMENTS];

new searchAttachments[20];

enum ServerData
{
	MaxPing,
	MaxOSTTick,
	DisableChat,
	AdvCheck,
	LobbyKick,
	SerialCheck,
	DisBombTeamKill,
	GlobalChat,
	AllowAntiAFK,
	ToChangeMode,
 	DebugMode,
	ChangeModePic,
	MySQL:DataBase,
	COBigPrison,
	sIP[50],
	Site[50],
	lPlate[20],
	LastMsg,
 	sTag[2],
	OffMode,
	InstSpawn,
	SouthMapTW,
	pInfoState,
	showAdmins,
	bigTXTDs,
	Text:pInfo_TD[MAX_MODES],
	pInfo_Timer[MAX_MODES],
	Text:TankAim,
	Text:RocketAim,
	Text:Kill_TD,
	Text:Bomber_TD,
	Text:Version_TD,
	Text:mIntro_TD,
	Text:MenuCMD_TD,
	Text:Right_TD,
	Text:Left_TD,
	Text:Spawn_TD
};
new ServerInfo[ServerData];

#define DAMAGE_TXT_MAX 4

#define DAMAGE_TXT_NORMAL 0
#define DAMAGE_TXT_LAUNCHER 1
#define DAMAGE_TXT_TANK 2
#define DAMAGE_TXT_SNIPER 3
enum DAMAGETXTINFO
{
	Text: dTxt[2],
	Float: dX[2],
	Float: dY[2],
	Float: sizX[2],
	Float: sizY[2]
};
new DamageTxTInfo[DAMAGE_TXT_MAX][DAMAGETXTINFO];

new Float:gBombSpeed = 35.0;        //Bomb-falling speed
new PingPos;
new ModeWeather[MAX_MODES],ModeTime[MAX_MODES];
new ModePass[MAX_MODES][20];
new Reports[MAX_REPORTS][229];

new Text:kSpree_Shadow;
new Text:kSpree_Line[MAX_MODES];
new kSpree_Spree[MAX_MODES];
new kSpree_Player[MAX_MODES];
//new kSpree_LastCalled[MAX_MODES];

new MonthNames[12][]=
{
	"January",
	"February",
	"March",
	"April",
	"May",
	"June",
	"July",
	"August",
	"September",
	"October",
	"November",
	"December"
};

#define MM_MAX_MODES 12

#define MM_TW 0
#define MM_PTP 1
#define MM_CO 2
#define MM_CTF 3
#define MM_VW 4
#define MM_SF 5
#define MM_FFA 6
#define MM_ZO 7
#define MM_DM 8
#define MM_PJ 9
#define MM_RP 10
#define MM_GK 11

new MM_Mode_Colors[MM_MAX_MODES]=
{
	543659978,563827914,-697028918,
	-635033398,58723018,328056522,
	-105696822,-414297910,-2042312758,
	563827914,543659978,563827914
};

new MM_Mode_Names[MM_MAX_MODES][]=
{
	"  World war Two - TW",
	"  Protect the pres",
	"  Cops and criminals",
	"  Capture the flag",
	"  Vietnam War",
	"  Stunt & Minigames",
	"  Free for All- Gangs",
	"  Zombie Survival",
	"  Race - Duel - Derby",
	"  Base Jumping - PJ",
	"  Survival Roleplay",
	"  Grab and Kill"
};

#define MM_MAX_TW_C 7
#define MM_TW_UK 0
#define MM_TW_GER 1
#define MM_TW_BAL 2
#define MM_TW_SOV 3
#define MM_TW_USA 4
#define MM_TW_JAP 5
#define MM_TW_ITA 6

new MM_TW_C_Names[MM_MAX_TW_C][]=
{
	"  United Kingdom",
	"  Nazi Germany",
	"  Balkan Nations",
	"  Soviet Union",
	"  United States",
	"  Empire of Japan",
	"  Fascist Italy"
};

#define MM_MAX_TW_CL 4
#define MM_TW_SOL 0
#define MM_TW_PIL 1
#define MM_TW_MED 2
#define MM_TW_ENG 3

new MM_TW_CL_Names[MM_MAX_TW_CL][]=
{
	"  Soldier",
	"  Pilot",
	"  Medic",
	"  Engineer"
};

#define MM_MAX_PTP_C 6
#define MM_PTP_PRE 0
#define MM_PTP_VIC 1
#define MM_PTP_SEC 2
#define MM_PTP_POL 3
#define MM_PTP_TER 4
#define MM_PTP_CIV 5

new MM_PTP_C_Names[MM_MAX_PTP_C][]=
{
	"  President",
	"  Vice President",
	"  Security",
	"  Police",
	"  Terrorist",
	"  Civilian"
};

#define MM_MAX_CTF_C 4
#define MM_CTF_RED 0
#define MM_CTF_BLUE 1
#define MM_CTF_PIC_RED 2
#define MM_CTF_PIC_BLUE 3

new MM_CTF_C_Names[MM_MAX_CTF_C][]=
{
	"  Red Team",
	"  Blue Team",
	"loadsuk:loadsc4",
	"loadsuk:loadsc5"
};

#define MM_MAX_CO_C 4
#define MM_CO_COP 0
#define MM_CO_CRI 1
#define MM_CO_PIC_COP 2
#define MM_CO_PIC_CRI 3

new MM_CO_C_Names[MM_MAX_CO_C][]=
{
	"  Police",
	"  Criminal",
	"loadsuk:loadsc3",
	"loadsuk:loadsc2"
};

enum MMTEXTS
{
	Text:BG,
	Text:Line,
	Text:Play,
	Text:Modes[MM_MAX_MODES],
	Text:Players[MM_MAX_MODES],
	Text:Selected[MM_MAX_MODES],
	Text:TW_C[MM_MAX_TW_C],
	Text:TW_CL[MM_MAX_TW_CL],
	Text:TW_CLSelect[MM_MAX_TW_CL],
	Text:PTP_C[MM_MAX_PTP_C],
	Text:CTF_C[MM_MAX_CTF_C],
	Text:CO_C[MM_MAX_CO_C],
	Text:ColSelect[MM_MAX_TW_C]
};
new MM_Texts[MMTEXTS];

new Float:gBombID[MAX_BOMB_TYPES][10] = {
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,0.0,0.0,0.0},/// {o,5} 5 = -5 health of ships... gbombid{num[56]
{2.0, 4.0, 8.5, 1636.0, 270.0, 0.0, 180.0,1.0,50.0,0.0},
{7.0, 4.5, 10.0, 3790.0, 0.0, 0.0, 750.0,5.0,15.0,270.0},
{-1.0, 5.0, 15.0, 3786.0, 0.0, 0.0, 10000.0,10.0,5.0,270.0},       //for more info check CreateSpecialExplosion
{-1.0, 5.0, 15.0, 354.0, 270.0, 0.0, 10000.0,100.0,0.0,0.0},
{-1.0, 0.0, 15.0, 18849.0, 0.0, 0.0, 700.0,0.0,2.0,0.0},//supplies
{-1.0, 0.0, 15.0, 3786.0, 0.0, 0.0, 10000.0,0.0,0.0,0.0}//gas bomb
};
new gVehicleBombs[4][8] = {
	{476, 1, 1, 1, 0, 0, 0, 0},      //Rustler
	{553, 1, 1, 1, 1, 1, 1, 1},       //Nevada
	{513, 1, 1, 0, 0, 0, 0, 0},        //stunt plane
	{512, 1, 1, 0, 0, 0, 0, 0}         //crop duster
};
new YesNo[][] =
{
	"No",
	"Yes"
};

new RandomMessageALL[][] =
{
"{67F6F6}INFO:{FFFFFF} Use /info to check the server's information.",
"{67F6F6}HINT:{FFFFFF} Use /players to see where there is more traffic.",
"{67F6F6}HINT:{FFFFFF} Use /pinfo to hide/show the pinfo box!",
"{67F6F6}HINT:{FFFFFF} Use /ks to hide/show the killing spree box!",
"{67F6F6}HELP:{FFFFFF} For more help type in /cmds.",
"{67F6F6}INFO:{FFFFFF} Find any bugs? Now you can report them at the forums(/info)!",
"{67F6F6}HINT:{FFFFFF} If you think you are bugged, use /sync.",
"{67F6F6}HINT:{FFFFFF} Use /anims for the list of anims!",
"{67F6F6}HINT:{FFFFFF} Use /sound to edit the sound options!",
"{67F6F6}HINT:{FFFFFF} Use /tut for a quick tutorial!",
"{67F6F6}HELP:{FFFFFF} Apply for admin on the forums(/info)",
"{33FF33}HELP:{FFFFFF} Help this community grow by adding this address to your favorites: 11.1.1.16:7777. Thank you!"
};
new RandomMessageForOnline[][] =
{
"INFO: Use /info to check the server's information.",
"HINT: Use /players to see where there is more traffic.",
"HINT: Use /pinfo to hide/show the pinfo box!",
"HINT: Use /ks to hide/show the killing spree box!",
"HELP: For more help type in /cmds.",
"INFO: Find any bugs? Now you can report them at the forums(/info)!",
"HINT: If you think you are bugged, use /sync.",
"HINT: Use /anims for the list of anims!",
"HINT: Use /sound to edit the sound options!",
"HINT: Use /tut for a quick tutorial!",
"HELP: Apply for admin on the forums(/info)",
"HELP: Help this community grow by adding this address to your favorites: 11.1.1.16:7777. Thank you!"
};

new Float:SpeedoOffSet[212][7] =
{
{38.0, 1.029995, -1.964999, 0.100000, 0.000000, 0.000000, -120.680038},//Landstalker
{38.0, 1.029995, -2.064999, 0.000000, 0.000000, 0.000000, -120.680038},//Bravura
{38.0, 1.029995, -2.064999, -0.100000, 0.000000, 0.000000, -120.680038},//Buffalo
{42.0, 1.429996, -1.564998, 1.400000, 0.000000, 0.000000, -120.680038},//Linerunner
{35.0, 1.029995, -1.664999, 0.200000, 0.000000, 0.000000, -120.680038},//Pereniel
{35.0, 1.129995, -1.764999, -0.399999, 0.000000, 0.000000, -120.680038},//Sentinel
{39.0, 2.229995, -4.664996, 1.500000, -0.100000, 0.099999, -120.680038},//Dumper
{45.0, 1.429995, -3.064997, 0.899999, -0.100000, 0.099999, -120.680038},//Firetruck
{34.0, 1.229995, -2.264998, 1.600000, -0.100000, 0.099999, -120.680038},//Trashmaster
{25.0, 0.529995, -3.464997, -0.000000, -0.100000, 0.099999, -120.680038},//Stretch
{26.0, 0.629995, -1.564998, -0.000000, -0.100000, 0.099999, -120.680038},//Manana
{26.0, 0.829995, -1.564998, -0.100000, -0.100000, 0.099999, -120.680038},//Infernus
{26.0, 0.829995, -1.564998, -0.100000, -0.100000, 0.099999, -120.680038},//Voodoo
{26.0, 0.829995, -1.564998, -0.100000, -0.100000, 0.099999, -120.680038},//Pony
{34.0, 0.929995, -3.364997, 2.000000, -0.100000, 0.099999, -120.680038},//Mule
{25.0, 0.629995, -1.764999, -0.000000, -0.100000, 0.099999, -120.680038},//Cheetah
{38.0, 1.029994, -3.264997, 1.399999, -0.100000, 0.099999, -120.680038},//Ambulance
{45.0, 0.829995, -8.264994, 2.000000, 0.000000, 0.000000, -120.680038},//Leviathan
{26.0, 0.529995, -1.764999, 0.600000, 0.000000, 0.000000, -120.680038},//Moonbeam
{26.0, 0.629995, -2.364998, -0.200000, 0.000000, 0.000000, -120.680038},//Esperanto
{26.0, 0.629995, -2.364998, -0.000000, 0.000000, 0.000000, -120.680038},//Taxi
{26.0, 0.529995, -2.364998, -0.100000, 0.000000, 0.000000, -120.680038},//Washington
{26.0, 0.529995, -2.364998, -0.100000, 0.000000, 0.000000, -120.680038},//Bobcat
{38.0, 0.829994, -1.564998, 1.099999, -0.100000, 0.099999, -120.680038},//Mr Whoopee
{26.0, 0.629995, -1.164998, 0.100000, 0.000000, 0.000000, -120.680038},//BF Injection
{38.0, 0.329994, -8.664995, 0.899999, -0.100000, 0.099999, -112.580162},//Hunter
{26.0, 0.629995, -2.164999, -0.100000, 0.000000, 0.000000, -120.680038},//Premier
{34.0, 0.929994, -3.664996, 1.299999, -0.100000, 0.099999, -120.680038},//Enforcer
{33.0, 1.029994, -2.464998, 1.199999, -0.100000, 0.099999, -120.680038},//Securicar
{26.0, 0.529995, -1.764999, 0.000000, 0.000000, 0.000000, -120.680038},//Banshee
{45.0, 1.929995, -3.964996, 0.899999, -0.100000, 0.699999, -123.579994},//Predator
{45.0, 1.429995, -5.464995, 1.799999, -0.200000, 0.699999, -123.579994},//Bus
{39.0, 1.729995, -3.864996, 0.799998, -0.200000, 0.699999, -123.579994},//Rhino
{39.0, 1.329995, -4.364996, 2.099999, -0.200000, 0.699999, -123.579994},//Barracks
{26.0, 0.329995, -1.364998, 0.000000, 0.000000, 0.000000, -120.680038},//Hotknife
{42.0, 1.329995, -3.764996, 1.599999, -0.100000, 0.099999, -120.680038},//Trailer
{26.0, 0.529995, -2.164999, 0.000000, 0.000000, 0.000000, -120.680038},//Previon
{38.0, 1.029994, -5.064995, 1.899999, -0.100000, 0.099999, -120.680038},//Coach
{26.0, 0.629995, -2.164999, 0.000000, 0.000000, 0.000000, -120.680038},//Cabbie
{26.0, 0.529995, -2.164999, 0.000000, 0.000000, 0.000000, -120.680038},//Stallion
{26.0, 0.429995, -2.164999, 0.800000, 0.000000, 0.000000, -120.680038},//Rumpo
{13.0, -0.470005, -0.264997, 0.000000, 0.000000, 0.000000, -120.680038},//RC Bandit
{26.0, 0.529995, -2.564998, 0.500000, 0.000000, 0.000000, -120.680038},//Romero
{47.0, 1.629995, -5.064995, 1.699999, -0.100000, 0.099999, -120.680038},//Packer
{38.0, 1.029994, -2.764997, 0.899999, -0.100000, 0.099999, -120.680038},//Monster
{26.0, 0.529995, -2.464998, 0.000000, 0.000000, 0.000000, -120.680038},//Admiral
{43.0, 1.729995, -3.664996, 0.899999, -0.100000, 0.099999, -120.680038},//Squalo
{43.0, 1.029994, -4.164996, 0.399998, -0.100000, 0.099999, -120.680038},//Seasparrow
{23.0, -0.170004, -0.764997, 0.100000, 0.000000, 0.000000, -120.680038},//Pizzaboy
{42.0, 1.329995, -2.864997, 0.999999, -0.100000, 0.099999, -120.680038},//Tram
{42.0, 1.329995, -3.764996, 1.599999, -0.100000, 0.099999, -120.680038},//Trailer
{26.0, 0.629995, -2.064999, 0.000000, 0.000000, 0.000000, -120.680038},//Turismo
{45.0, 1.329995, -3.564996, 0.899999, -0.100000, 0.099999, -120.680038},//Speeder
{45.0, 1.929995, -4.364996, 0.999999, -0.100000, 0.099999, -120.680038},//Reefer
{54.0, 2.829994, -5.464995, 1.099999, -0.100000, 0.099999, -120.680038},//Tropic
{38.0, 1.329995, -4.364996, 0.799998, -0.100000, 0.099999, -120.680038},//Flatbed
{38.0, 1.229995, -4.364996, 2.199999, -0.100000, 0.099999, -120.680038},//Yankee
{26.0, 0.429995, -0.764997, 0.200000, 0.000000, 0.000000, -120.680038},//Caddy
{26.0, 0.529995, -2.164999, 0.300000, 0.000000, 0.000000, -120.680038},//Solair
{26.0, 0.529995, -2.164999, 0.600000, 0.000000, 0.000000, -120.680038},//Berkley's RC Van
{46.0, 1.029994, -4.464996, 0.599998, -0.100000, 0.099999, -120.680038},//Skimmer
{26.0, -0.070005, -0.964997, 0.000000, 0.000000, 0.000000, -120.680038},//PCJ-600
{22.0, -0.070005, -0.964997, -0.200000, 0.000000, 0.000000, -120.680038},//Faggio
{22.0, -0.070005, -0.964997, -0.200000, 0.000000, 0.000000, -120.680038},//Freeway
{22.0, -0.070005, -0.364997, -0.100000, 0.000000, 0.000000, -120.680038},//RC Baron
{22.0, -0.070005, -0.364997, -0.100000, 0.000000, 0.000000, -120.680038},//RC Raider
{26.0, 0.829995, -2.164999, 0.000000, 0.000000, 0.000000, -120.680038},//Glendale
{26.0, 0.629995, -2.264998, 0.100000, 0.000000, 0.000000, -120.680038},//Oceanic
{22.0, -0.070005, -0.164997, -0.300000, 0.000000, 0.000000, -120.680038},//Sanchez
{38.0, 0.429994, -4.164996, 0.599998, -0.100000, 0.099999, -120.680038},//Sparrow
{26.0, 0.629995, -2.064999, 0.700000, 0.000000, 0.000000, -120.680038},//Patriot
{22.0, 0.129995, -0.764997, -0.100000, 0.000000, 0.000000, -120.680038},//Quad
{42.0, 1.329995, -3.864996, 0.899999, -0.100000, 0.099999, -120.680038},//Coastguard
{40.0, 1.129994, -1.364998, 0.399998, -0.100000, 0.099999, -120.680038},//Dinghy
{26.0, 0.729995, -2.164999, -0.100000, 0.000000, 0.000000, -120.680038},//Hermes
{26.0, 0.629995, -2.164999, -0.200000, 0.000000, 0.000000, -120.680038},//Sabre
{40.0, 1.229995, -3.864996, 0.899999, -0.100000, 0.099999, -120.680038},//Rustler
{26.0, 0.729995, -2.164999, -0.100000, 0.000000, 0.000000, -120.680038},//ZR3 50
{26.0, 0.629995, -2.164999, 0.300000, 0.000000, 0.000000, -120.680038},//Walton
{26.0, 0.429995, -2.164999, 0.600000, 0.000000, 0.000000, -120.680038},//Regina
{26.0, 0.629995, -1.364998, -0.200000, 0.000000, 0.000000, -120.680038},//Comet
{21.0, 0.029994, 0.335002, -0.400000, 0.000000, 0.000000, -120.680038},//BMX
{26.0, 0.429995, -1.964999, 0.500000, 0.000000, 0.000000, -120.680038},//Burrito
{26.0, 0.429995, -1.964999, 0.500000, 0.000000, 0.000000, -120.680038},//Camper
{45.0, 2.529994, -6.164994, 1.399999, -0.100000, 0.099999, -120.680038},//Marquis
{26.0, 0.529995, -0.564997, 0.200000, 0.000000, 0.000000, -120.680038},//Baggage
{42.0, 1.429996, -0.764998, 1.100000, 0.000000, 0.000000, -120.680038},//Dozer
{38.0, 1.129994, -5.164995, 1.399999, -0.100000, 0.099999, -120.680038},//Maverick
{40.0, 1.029994, -4.064996, 1.099999, -0.100000, 0.099999, -120.680038},//News Chopper
{26.0, 0.729995, -2.764998, 0.000000, 0.000000, 0.000000, -120.680038},//Rancher
{26.0, 1.129995, -2.164999, 0.200000, 0.000000, 0.000000, -120.680038},//FBI Rancher
{26.0, 0.829995, -2.164999, -0.199999, 0.000000, 0.000000, -120.680038},//Virgo
{26.0, 0.729995, -2.164999, 0.000000, 0.000000, 0.000000, -120.680038},//Greenwood
{42.0, 2.029995, -3.164997, 0.599998, -0.100000, 0.099999, -120.680038},//Jetmax
{26.0, 0.529995, -2.164999, 0.000000, 0.000000, 0.000000, -120.680038},//Hotring
{25.0, 0.929995, -1.664999, -0.399999, 0.000000, 0.000000, -120.680038},//Sandking
{25.0, 0.729995, -1.664999, -0.399999, 0.000000, 0.000000, -120.680038},//Blista Compact
{35.0, 1.029995, -5.164996, 1.300000, 0.000000, 0.000000, -120.680038},//Police Maverick
{38.0, 1.429995, -2.564997, 0.899999, -0.100000, 0.099999, -120.680038},//Boxville
{35.0, 1.329995, -2.564998, 0.200000, 0.000000, 0.000000, -120.680038},//Benson
{22.0, 0.429995, -0.564998, -0.300000, 0.000000, 0.000000, -120.680038},//Mesa
{21.0, -0.070004, 0.035001, -0.200000, 0.000000, 0.000000, -120.680038},//RC Goblin
{26.0, 0.529995, -2.764998, 0.000000, 0.000000, 0.000000, -120.680038},//Hotring Racer A
{26.0, 0.529995, -2.764998, 0.000000, 0.000000, 0.000000, -120.680038},//Hotring Racer B
{26.0, 0.729995, -2.764998, 0.000000, 0.000000, 0.000000, -120.680038},//Bloodring Banger
{26.0, 0.729995, -2.764998, 0.000000, 0.000000, 0.000000, -120.680038},//Rancher
{26.0, 0.529995, -2.764998, -0.200000, 0.000000, 0.000000, -120.680038},//Super GT
{26.0, 0.929995, -2.764998, -0.200000, 0.000000, 0.000000, -120.680038},//Elegant
{34.0, 1.329995, -2.764998, 1.000000, 0.000000, 0.000000, -120.680038},//Journey
{21.0, -0.070004, -0.164997, -0.100000, 0.000000, 0.000000, -120.680038},//Bike
{21.0, -0.070004, -0.164997, -0.100000, 0.000000, 0.000000, -120.680038},//Mountain Bike
{57.0, 3.329993, -11.465005, 0.799998, -0.100000, 0.099999, -120.680038},//Beagle
{39.0, 1.629995, -2.264998, 0.399998, -0.100000, 0.099999, -120.680038},//Cropdust
{39.0, 1.629995, -2.264998, -0.700001, -0.100000, 0.099999, -120.680038},//Stunt
{39.0, 1.629995, -2.264998, -0.100001, -0.100000, 0.099999, -120.680038},//Tanker
{39.0, 1.629995, -2.264998, -0.100001, -0.100000, 0.099999, -120.680038},//RoadTrain
{31.0, 0.829995, -2.464998, 0.200000, 0.000000, 0.000000, -120.680038},//Nebula
{31.0, 0.829995, -2.464998, 0.200000, 0.000000, 0.000000, -120.680038},//Majestic
{31.0, 0.829995, -2.464998, 0.200000, 0.000000, 0.000000, -120.680038},//Buccaneer
{53.0, 2.629994, -6.664994, 2.399998, -0.100000, 0.099999, -120.680038},//Shamal
{53.0, 1.829995, -6.064994, 0.699998, -0.100000, 0.099999, -120.680038},//Hydra
{26.0, 0.029994, -1.264997, 0.200000, 0.000000, 0.000000, -120.680038},//FCR-900
{26.0, 0.029994, -1.264997, 0.200000, 0.000000, 0.000000, -120.680038},//NRG-500
{26.0, 0.029994, -1.264997, 0.200000, 0.000000, 0.000000, -120.680038},//HPV1000
{38.0, 1.029994, -2.564997, 0.399998, -0.100000, 0.099999, -120.680038},//Cement Truck
{34.0, 1.229995, -2.564997, 0.399998, -0.100000, 0.099999, -120.680038},//Tow Truck
{33.0, 0.929995, -1.864999, -0.000000, 0.000000, 0.000000, -120.680038},//Fortune
{33.0, 0.929995, -1.864999, -0.000000, 0.000000, 0.000000, -120.680038},//Cadrona
{33.0, 1.029995, -1.864999, -0.000000, 0.000000, 0.000000, -120.680038},//FBI Truck
{33.0, 1.029995, -1.864999, -0.000000, 0.000000, 0.000000, -120.680038},//Willard
{26.0, 0.529995, -1.364998, 0.000000, 0.000000, 0.000000, -120.680038},//Forklift
{26.0, 0.529995, -1.364998, 0.000000, 0.000000, 0.000000, -120.680038},//Tractor
{34.0, 1.029995, -0.764998, 1.000000, 0.000000, 0.000000, -120.680038},//Combine
{26.0, 0.629995, -2.164999, 0.000000, 0.000000, 0.000000, -120.680038},//Feltzer
{26.0, 0.829995, -2.164999, -0.200000, 0.000000, 0.000000, -120.680038},//Remington
{26.0, 0.829995, -2.164999, 0.100000, 0.000000, 0.000000, -120.680038},//Slamvan
{26.0, 0.829995, -2.164999, -0.200000, 0.000000, 0.000000, -120.680038},//Blade
{53.0, 1.729995, -7.564993, 0.899999, -0.100000, 0.099999, -120.680038},//Freight
{53.0, 1.729995, -7.564993, 2.499998, -0.100000, 0.099999, -120.680038},//Streak
{26.0, 0.829995, -0.864997, 0.200000, 0.000000, 0.000000, -120.680038},//Vortex
{26.0, 0.629995, -3.064998, 0.000000, 0.000000, 0.000000, -120.680038},//Vincent
{26.0, 0.729995, -2.064999, 0.000000, 0.000000, 0.000000, -120.680038},//Bullet
{26.0, 0.729995, -2.064999, 0.000000, 0.000000, 0.000000, -120.680038},//Clover
{26.0, 0.829995, -2.164999, 0.000000, 0.000000, 0.000000, -120.680038},//Sadler
{45.0, 1.429995, -3.064997, 0.899999, -0.100000, 0.099999, -120.680038},//Firetruck
{34.0, 1.129995, -1.264998, 0.000000, 0.000000, 0.000000, -120.680038},//Hustler
{34.0, 1.129995, -1.264998, 0.000000, 0.000000, 0.000000, -120.680038},//Intruder
{34.0, 1.129995, -1.264998, 0.000000, 0.000000, 0.000000, -120.680038},//Primo
{55.0, 2.029995, -8.264993, 0.599998, -0.100000, 0.099999, -120.680038},//Cargobob
{26.0, 0.829995, -2.464998, 0.000000, 0.000000, 0.000000, -120.680038},//Tampa
{26.0, 0.829995, -2.464998, 0.000000, 0.000000, 0.000000, -120.680038},//Sunrise
{26.0, 0.829995, -2.464998, 0.000000, 0.000000, 0.000000, -120.680038},//Merit
{26.0, 1.129995, -2.464998, 0.700000, 0.000000, 0.000000, -120.680038},//Utility
{70.0, 5.029992, -8.964996, 1.499999, -0.100000, 0.099999, -120.680038},//Nevada
{26.0, 0.929995, -2.864998, 0.000000, 0.000000, 0.000000, -120.680038},//Yosemite
{26.0, 0.829995, -1.664999, -0.200000, 0.000000, 0.000000, -120.680038},//Windsor
{35.0, 1.129994, -2.564997, 0.899999, -0.100000, 0.099999, -120.680038},//Monster A
{35.0, 1.129994, -2.564997, 0.899999, -0.100000, 0.099999, -120.680038},//Monster B
{26.0, 0.729995, -2.064999, 0.200000, 0.000000, 0.000000, -120.680038},//Uranus
{26.0, 0.729995, -2.064999, 0.200000, 0.000000, 0.000000, -120.680038},//Jester
{26.0, 0.729995, -2.064999, 0.200000, 0.000000, 0.000000, -120.680038},//Sultan
{26.0, 0.729995, -2.064999, 0.200000, 0.000000, 0.000000, -120.680038},//Stratum
{26.0, 0.729995, -2.064999, 0.200000, 0.000000, 0.000000, -120.680038},//Elegy
{49.0, 1.729995, -8.064992, 0.199998, -0.100000, 0.099999, -120.680038},//Raindance
{22.0, 0.129994, 0.335002, -0.100000, 0.000000, 0.000000, -120.680038},//RC Tiger
{26.0, 0.829995, -2.064999, 0.000000, 0.000000, 0.000000, -120.680038},//Flash
{26.0, 0.829995, -2.064999, 0.000000, 0.000000, 0.000000, -120.680038},//Tahoma
{26.0, 0.829995, -2.064999, 0.000000, 0.000000, 0.000000, -120.680038},//Savanna
{26.0, 0.729995, -0.364998, 0.000000, 0.000000, 0.000000, -120.680038},//Bandito
{53.0, 1.729995, -7.564993, 0.899999, -0.100000, 0.099999, -120.680038},//Freight
{42.0, 1.329995, -3.764996, 1.599999, -0.100000, 0.099999, -120.680038},//Trailer
{23.0, 0.329995, 0.135002, -0.100000, 0.000000, 0.000000, -120.680038},//Kart
{23.0, 0.329995, 0.135002, -0.100000, 0.000000, 0.000000, -120.680038},//Mower
{38.0, 1.229995, -2.564997, 1.299999, -0.100000, 0.099999, -120.680038},//Duneride
{26.0, 0.529995, -0.664997, 0.200000, 0.000000, 0.000000, -120.680038},//Sweeper
{26.0, 0.529995, -0.664997, 0.200000, 0.000000, 0.000000, -120.680038},//Broadway
{34.0, 1.129995, -0.664997, 0.200000, 0.000000, 0.000000, -120.680038},//Tornado
{38.0, 0.929995, -2.564997, 0.899999, -0.100000, 0.099999, -120.680038},//AT-400
{38.0, 1.329995, -2.564997, 0.099998, -0.100000, 0.099999, -120.680038},//DFT-30
{38.0, 1.329995, -2.464998, 0.299998, -0.100000, 0.099999, -120.680038},//Huntley
{38.0, 1.329995, -2.464998, 0.299998, -0.100000, 0.099999, -120.680038},//Stafford
{26.0, 0.029994, -1.264997, 0.200000, 0.000000, 0.000000, -120.680038},//BF-400
{34.0, 1.029995, -2.664998, 0.500000, 0.000000, 0.000000, -120.680038},//Newsvan
{33.0, 0.829995, -0.864997, 0.200000, 0.000000, 0.000000, -120.680038},//Tug
{38.0, 0.929995, -2.564997, 0.899999, -0.100000, 0.099999, -120.680038},//Trailer A
{26.0, 0.929995, -2.164999, 0.300000, 0.000000, 0.000000, -120.680038},//Emperor
{23.0, 0.029994, -1.264997, 0.200000, 0.000000, 0.000000, -120.680038},//Wayfarer
{33.0, 1.229995, -2.164999, 0.000000, 0.000000, 0.000000, -120.680038},//Euros
{46.0, 1.429995, -3.364997, 1.499999, 1.800000, 0.099999, -120.680038},//Hotdog
{33.0, 0.929995, -1.864999, 0.100000, 0.000000, 0.000000, -120.680038},//Club
{33.0, 0.929995, -1.864999, 0.100000, 0.000000, 0.000000, -120.680038},//Trailer B
{33.0, 0.929995, -1.864999, 0.100000, 0.000000, 0.000000, -120.680038},//Trailer C
{33.0, 0.929995, -1.864999, 0.100000, 0.000000, 0.000000, -120.680038},//Andromada
{47.0, 1.829995, -5.864995, 0.499998, -0.100000, 0.099999, -120.680038},//Dodo
{21.0, -0.270005, -0.364997, 0.200000, 0.000000, 0.000000, -120.680038},//RC Cam
{44.0, 1.329995, -2.564997, 0.399998, -0.100000, 0.099999, -120.680038},//Launch
{26.0, 0.729995, -2.664998, 0.000000, 0.000000, 0.000000, -120.680038},//Police Car (LSPD)
{26.0, 0.729995, -2.664998, 0.000000, 0.000000, 0.000000, -120.680038},//Police Car (SFPD)
{26.0, 0.729995, -2.664998, 0.000000, 0.000000, 0.000000, -120.680038},//Police Car (LVPD)
{26.0, 0.729995, -2.664998, 0.300000, 0.000000, 0.000000, -120.680038},//Police Ranger
{26.0, 0.729995, -2.664998, -0.099999, 0.000000, 0.000000, -120.680038},//Picador
{26.0, 1.029995, -2.664998, 0.800000, 0.000000, 0.000000, -120.680038},//S.W.A.T. Van
{26.0, 0.829995, -2.164999, 0.000000, 0.000000, 0.000000, -120.680038},//Alpha
{26.0, 0.829995, -2.164999, 0.000000, 0.000000, 0.000000, -120.680038},//Phoenix
{26.0, 0.829995, -2.164999, 0.000000, 0.000000, 0.000000, -120.680038},//Glendale
{26.0, 0.829995, -2.164999, 0.000000, 0.000000, 0.000000, -120.680038},//Sadler
{26.0, 0.329995, -1.664999, 0.000000, 0.000000, 0.000000, -120.680038},//Luggage Trailer A
{26.0, 0.529995, -1.164998, -0.399999, 0.000000, 0.000000, -120.680038},//Luggage Trailer B
{26.0, 0.529995, -1.164998, -0.399999, 0.000000, 0.000000, -120.680038},//Stair Trailer
{38.0, 1.429995, -2.564997, 0.899999, -0.100000, 0.099999, -120.680038},//Boxville
{26.0, 1.029995, 0.435002, 0.200000, 0.000000, 0.000000, -120.680038},//Farm Plow
{26.0, 1.029995, 0.435002, 0.200000, 0.000000, 0.000000, -120.680038}//Utility Trailer
};


new Float:SkinOffSetGlasses[300][7] = {
{0.098771, 0.030772, -0.000335, 85.342658, 84.122947, 4.236968, 1.000000}, // - 0
{0.100766, 0.028630, -0.003521, 87.936676, 82.110870, 4.236968, 1.000000}, // - 1
{0.083712, 0.033132, -0.003521, 87.936676, 82.110870, 4.236968, 1.000000}, // - 2
{0.099500, 0.047703, 0.000558, 280.687683, 90.938697, 169.126358, 1.000000}, // - 3
{0.126660, 0.017465, -0.004450, 281.516479, 103.193008, 168.312896, 1.167009}, // - 4
{0.109650, 0.017465, -0.004712, 281.516479, 106.686439, 168.312896, 1.167009}, // - 5
{0.101269, 0.028933, 0.000001, 281.516479, 91.839576, 168.312896, 1.000000}, // - 6
{0.090066, 0.043458, -0.006523, 87.936676, 82.110870, 4.236968, 1.000000}, // - 7
{0.087873, 0.038192, -0.003603, 281.516479, 91.839576, 168.312896, 1.020467}, // - 8
{0.070977, 0.028663, 0.000147, 81.164970, 92.128402, 4.236968, 1.000000},  // - 9
{0.072317, 0.032179, -0.002934, 86.843269, 84.196006, 4.236968, 1.000000}, // - 10
{0.072317, 0.035465, -0.002201, 86.843269, 84.196006, 4.236968, 1.000000}, // - 11
{0.072317, 0.028100, -0.002201, 86.843269, 84.196006, 4.236968, 1.000000}, // - 12
{0.076569, 0.028100, -0.002201, 86.843269, 84.196006, 4.236968, 1.000000}, // - 13
{0.091310, 0.049169, -0.002201, 86.843269, 84.196006, 4.236968, 1.000000}, // - 14
{0.073734, 0.006292, -0.002755, 86.843269, 84.196006, 4.236968, 1.000000}, // - 15
{0.092845, 0.040331, 0.000183, 86.843269, 82.864280, 4.236968, 1.000000},  // - 16
{0.088241, 0.030184, -0.000157, 86.843269, 82.864280, 4.236968, 1.000000}, // - 17
{0.061677, 0.029596, -0.007398, 86.843269, 82.864280, 4.236968, 1.000000}, // - 18
{0.079911, 0.029596, -0.002934, 86.843269, 82.864280, 4.236968, 1.000000}, // - 19
{0.095079, 0.029596, -0.001718, 85.261871, 86.296562, 4.236968, 1.000000}, // - 20
{0.093728, 0.042083, -0.005781, 85.261871, 81.636192, 4.236968, 1.000000}, // - 21
{0.079585, 0.042083, -0.005781, 85.261871, 81.636192, 4.236968, 1.000000}, // - 22
{0.090786, 0.041737, -0.005263, 85.261871, 81.636192, 4.236968, 1.000000}, // - 23
{0.085247, 0.026941, -0.000317, 85.261871, 81.636192, 4.236968, 1.000000}, // - 24
{0.081646, 0.031448, -0.001113, 89.393653, 81.665985, 4.236968, 1.000000}, // - 25
{0.083700, 0.033814, -0.001960, 86.436462, 81.665985, 4.236968, 1.000000}, // - 26
{0.092498, 0.037321, -0.001960, 86.436462, 85.568023, 4.236968, 1.000000}, // - 27
{0.097068, 0.041360, -0.007881, 86.771400, 85.568023, 4.236968, 1.000000}, // - 28
{0.083456, 0.050595, 0.001011, 86.771400, 77.201461, 4.236968, 1.000000},  // - 29
{0.076983, 0.047168, -0.006161, 86.771400, 74.329719, 4.236968, 1.000000}, // - 30
{0.083798, 0.042184, -0.001869, 86.771400, 83.181861, 4.236968, 1.000000}, // - 31
{0.053021, -0.000587, -0.001869, 86.771400, 66.859710, 4.236968, 1.000000},// - 32
{0.034386, 0.013324, -0.001869, 86.771400, 80.314460, 4.236968, 1.000000}, // - 33
{0.104669, 0.037365, -0.001403, 86.771400, 87.178382, 4.236968, 1.000000}, // - 34
{0.102659, 0.037465, -0.000829, 86.771400, 93.020492, 4.236968, 1.000000}, // - 35
{0.107638, 0.037465, -0.000829, 86.771400, 93.020492, 4.236968, 1.000000}, // - 36
{0.107638, 0.035879, -0.000829, 86.771400, 93.020492, 4.236968, 1.000000}, // - 37
{0.107638, 0.041106, -0.000829, 86.771400, 93.020492, 4.236968, 1.000000}, // - 38
{0.080326, 0.035634, -0.000829, 86.771400, 93.020492, 4.236968, 1.000000}, // - 39
{0.080326, 0.027371, -0.000829, 86.771400, 93.020492, 4.236968, 1.000000}, // - 40
{0.084617, 0.039613, -0.001620, 86.771400, 93.020492, 4.236968, 1.000000}, // - 41
{0.087873, 0.037386, -0.003603, 281.516479, 91.839576, 168.312896, 1.093392}, // - 42
{0.040075, 0.025445, -0.000974, 86.771400, 92.964149, 4.236968, 1.000000}, // - 43
{0.077369, 0.028469, -0.000974, 86.771400, 78.435791, 4.236968, 1.000000}, // - 44
{0.064145, 0.028684, -0.000974, 86.771400, 84.762802, 4.236968, 1.000000}, // - 45
{0.091993, 0.056559, -0.000974, 86.771400, 84.762802, 4.236968, 1.000000}, // - 46
{0.084582, 0.051277, -0.005034, 86.771400, 84.762802, 4.236968, 1.000000}, // - 47
{0.092182, 0.042095, -0.003533, 86.771400, 84.762802, 4.236968, 1.000000}, // - 48
{0.086866, 0.032203, -0.001021, 86.771400, 84.762802, 4.236968, 1.000000}, // - 49
{0.099350, 0.009422, -0.005899, 86.771400, 84.762802, 4.236968, 1.000000}, // - 50
{0.099350, 0.030598, -0.005899, 86.771400, 84.762802, 4.236968, 1.000000}, // - 51
{0.099350, 0.030598, -0.003575, 86.771400, 84.762802, 4.236968, 1.000000}, // - 52
{0.099350, 0.030598, -0.003575, 86.771400, 84.762802, 4.236968, 1.000000}, // - 53
{0.079123, 0.030598, -0.003575, 86.771400, 84.762802, 4.236968, 1.000000}, // - 54
{0.063159, 0.029641, -0.003575, 86.771400, 84.762802, 4.236968, 1.000000}, // - 55
{0.070293, 0.029641, -0.000570, 86.771400, 84.762802, 4.236968, 1.000000}, // - 56
{0.111305, 0.045368, -0.000570, 86.771400, 84.458084, 4.236968, 1.000000}, // - 57
{0.084901, 0.020965, -0.000570, 86.771400, 79.542411, 4.236968, 1.000000}, // - 58
{0.099350, 0.030598, -0.003575, 86.771400, 84.762802, 4.236968, 1.000000}, // - 59
{0.090164, 0.044163, -0.004754, 86.771400, 79.542411, 4.236968, 1.000000}, // - 60
{0.087151, 0.041447, -0.000885, 90.928329, 89.598678, 0.000000, 1.000000}, // - 61
{0.094350, 0.041447, 0.005717, 90.928329, 89.598678, 0.000000, 1.000000},  // - 62
{0.075534, 0.041447, -0.001751, 90.928329, 89.598678, 0.000000, 1.000000}, // - 63
{0.075534, 0.041447, -0.001751, 90.928329, 89.598678, 0.000000, 1.000000}, // - 64
{0.087873, 0.032505, -0.003603, 281.516479, 91.839576, 168.312896, 0.965358}, // - 65
{0.104148, 0.034787, 0.001341, 90.928329, 89.598678, 0.000000, 1.000000},  // - 66
{0.104148, 0.034787, 0.001341, 90.928329, 89.598678, 0.000000, 1.000000},  // - 67
{0.087317, 0.039646, -0.004032, 90.928329, 89.598678, 0.000000, 1.000000}, // - 68
{0.074873, 0.039646, -0.003072, 90.928329, 89.598678, 0.000000, 1.000000}, // - 69
{0.090391, 0.042364, 0.005494, 90.928329, 89.598678, 0.000000, 1.000000},  // - 70
{0.090391, 0.022298, -0.001170, 90.928329, 89.598678, 0.000000, 1.000000}, // - 71
{0.090391, 0.039580, -0.001170, 90.928329, 89.598678, 0.000000, 1.000000}, // - 72
{0.090391, 0.038224, -0.001170, 90.928329, 89.598678, 0.000000, 1.000000}, // - 73
{0.099350, 0.030598, -0.003575, 86.771400, 84.762802, 4.236968, 1.000000}, // - 74
{0.083113, 0.038224, -0.001170, 90.928329, 89.598678, 0.000000, 1.000000}, // - 75
{0.072957, 0.028956, -0.001170, 90.928329, 89.598678, 0.000000, 1.000000}, // - 76
{0.069398, 0.039981, -0.001170, 90.928329, 89.598678, 0.000000, 1.000000}, // - 77
{0.105738, 0.010001, 0.004508, 90.928329, 79.030494, 0.000000, 1.000000},  // - 78
{0.078264, 0.019668, 0.004508, 90.928329, 79.030494, 0.000000, 1.000000},  // - 79
{0.087377, 0.022096, -0.001993, 90.928329, 79.030494, 0.000000, 1.000000}, // - 80
{0.087377, 0.022096, -0.001635, 90.928329, 79.030494, 0.000000, 1.000000}, // - 81
{0.100623, 0.043063, -0.001635, 90.928329, 87.672645, 0.000000, 1.000000}, // - 82
{0.092528, 0.027493, -0.001635, 90.928329, 87.672645, 0.000000, 1.000000}, // - 83
{0.102086, 0.027493, -0.001635, 90.928329, 87.672645, 0.000000, 1.000000}, // - 84
{0.081954, 0.041672, -0.001635, 90.928329, 87.672645, 0.000000, 1.000000}, // - 85
{0.025608, -0.003408, 281.516479, 106.686721, 167.551193, 0.965358}, // - 86
{0.077010, 0.046925, -0.003438, 90.928329, 91.590301, 0.000000, 1.000000}, // - 87
{0.069952, 0.042635, -0.003438, 90.928329, 86.722587, 0.000000, 1.000000}, // - 88
{0.093827, 0.019258, -0.003438, 90.928329, 86.722587, 0.000000, 1.000000}, // - 89
{0.066464, 0.035685, -0.000843, 90.928329, 86.722587, 0.000000, 1.000000}, // - 90
{0.066464, 0.035685, -0.000843, 90.928329, 86.722587, 0.000000, 1.000000}, // - 91
{0.066464, 0.038135, -0.000843, 90.928329, 86.722587, 0.000000, 1.000000}, // - 92
{0.066464, 0.038135, -0.001690, 90.928329, 86.722587, 0.000000, 1.000000}, // - 93
{0.048124, 0.010598, -0.001690, 90.928329, 86.722587, 0.000000, 1.000000}, // - 94
{0.084997, 0.006773, -0.001690, 90.928329, 86.722587, 0.000000, 1.000000}, // - 95
{0.100076, 0.026633, -0.001690, 90.928329, 80.020179, 0.000000, 1.000000}, // - 96
{0.061686, 0.027537, -0.001690, 90.928329, 80.020179, 0.000000, 1.000000}, // - 97
{0.098318, 0.053993, -0.001690, 90.928329, 89.237678, 0.000000, 1.000000}, // - 98
{0.098318, 0.033702, -0.001690, 90.928329, 89.237678, 0.000000, 1.000000}, // - 99
{0.086149, 0.042526, -0.001690, 90.928329, 77.587478, 0.000000, 1.000000}, // - 100
{0.081864, 0.030555, -0.001690, 90.928329, 78.145759, 0.000000, 1.000000}, // - 101
{0.081864, 0.047914, -0.005079, 90.928329, 78.145759, 0.000000, 1.000000}, // - 102
{0.089607, 0.036717, -0.005079, 90.928329, 78.145759, 0.000000, 1.000000}, // - 103
{0.079655, 0.042021, -0.005079, 90.928329, 78.145759, 0.000000, 1.000000}, // - 104
{0.091779, 0.037620, -0.005079, 90.928329, 78.145759, 0.000000, 1.000000}, // - 105
{0.084179, 0.035251, -0.005079, 90.928329, 78.145759, 0.000000, 1.000000}, // - 106
{0.089387, 0.040297, -0.006006, 90.928329, 78.145759, 0.000000, 1.000000}, // - 107
{0.081930, 0.030756, 0.001523, 90.928329, 78.145759, 0.000000, 1.000000},  // - 108
{0.092857, 0.043070, -0.006084, 90.928329, 85.326652, 0.000000, 1.000000}, // - 109
{0.092857, 0.043070, -0.006084, 90.928329, 85.326652, 0.000000, 1.000000}, // - 110
{0.106601, 0.028021, -0.003537, 90.928329, 90.217376, 0.000000, 1.000000}, // - 111
{0.096335, 0.015873, -0.003537, 90.928329, 90.217376, 0.000000, 1.000000}, // - 112
{0.105827, 0.046620, -0.001395, 90.928329, 90.217376, 0.000000, 1.000000}, // - 113
{0.097520, 0.044296, -0.007286, 90.928329, 90.217376, 0.000000, 1.000000}, // - 114
{0.097408, 0.043470, -0.007286, 90.928329, 90.217376, 0.000000, 1.000000}, // - 115
{0.092588, 0.049832, -0.007286, 90.928329, 90.217376, 0.000000, 1.000000}, // - 116
{0.081444, 0.037602, -0.003125, 90.928329, 90.217376, 0.000000, 1.000000}, // - 117
{0.078678, 0.037602, -0.001816, 90.928329, 90.217376, 0.000000, 1.000000}, // - 118
{0.093011, 0.037032, -0.001987, 281.516479, 94.968688, 167.551193, 1.051324}, // - 119
{0.089214, 0.029291, -0.000784, 90.928329, 84.624763, 0.000000, 1.000000}, // - 120
{0.086825, 0.033424, -0.000784, 90.928329, 77.233818, 0.000000, 1.000000}, // - 121
{0.082869, 0.030783, -0.000950, 90.928329, 77.233818, 0.000000, 1.000000}, // - 122
{0.096117, 0.048957, -0.006245, 90.928329, 87.579650, 0.000000, 1.000000}, // - 123
{0.103663, 0.040022, 0.000449, 90.928329, 87.579650, 0.000000, 1.000000},  // - 124
{0.099326, 0.031202, -0.001180, 90.928329, 87.579650, 0.000000, 1.000000}, // - 125
{0.099326, 0.031132, -0.001180, 90.928329, 87.579650, 0.000000, 1.000000}, // - 126
{0.099326, 0.039279, -0.001180, 90.928329, 87.579650, 0.000000, 1.000000}, // - 127
{0.099326, 0.047422, -0.001180, 90.928329, 87.579650, 0.000000, 1.000000}, // - 128
{0.088817, 0.021210, 0.000730, 90.928329, 87.579650, 0.000000, 1.000000},  // - 129
{0.025784, 0.028323, 0.000730, 90.928329, 59.394767, 0.000000, 1.000000},  // - 130
{0.068455, 0.031841, -0.004470, 90.928329, 79.979003, 0.000000, 1.000000}, // - 131
{0.012930, 0.008392, -0.004470, 90.928329, 72.129173, 0.000000, 1.000000}, // - 132
{0.102457, 0.032260, -0.003338, 90.928329, 84.534217, 0.000000, 1.000000}, // - 133
{0.085976, 0.014956, -0.003338, 90.928329, 80.308830, 0.000000, 1.000000}, // - 134
{0.071574, 0.028186, -0.001588, 90.928329, 80.308830, 0.000000, 1.000000}, // - 135
{0.085219, 0.016666, -0.000738, 90.928329, 80.308830, 0.000000, 1.000000}, // - 136
{0.065114, 0.009318, -0.000738, 90.928329, 80.308830, 0.000000, 1.000000}, // - 137
{0.066890, 0.040024, -0.000738, 90.928329, 87.341934, 0.000000, 1.000000}, // - 138
{0.072037, 0.036141, -0.000702, 90.928329, 87.341934, 0.000000, 1.000000}, // - 139
{0.069108, 0.042194, -0.000436, 90.928329, 87.341934, 0.000000, 1.000000}, // - 140
{0.058717, 0.043547, -0.000436, 90.928329, 87.209770, 0.000000, 1.000000}, // - 141
{0.104196, 0.039601, -0.005481, 90.928329, 87.209770, 0.000000, 1.000000}, // - 142
{0.090929, 0.045881, -0.012780, 90.928329, 87.209770, 0.000000, 1.000000}, // - 143
{0.098291, 0.042464, -0.006952, 90.928329, 83.081665, 0.000000, 1.000000}, // - 144
{0.080087, 0.030122, 0.000606, 90.928329, 83.081665, 0.000000, 1.000000},  // - 145
{0.093500, 0.030690, -0.001545, 90.928329, 83.081665, 0.000000, 1.000000}, // - 146
{0.079566, 0.020138, 0.004838, 90.928329, 73.715591, 0.000000, 1.000000},  // - 147
{0.073564, 0.028430, -0.000527, 90.928329, 88.295433, 0.000000, 1.000000}, // - 148
{0.099901, 0.011976, 0.001273, 281.516479, 97.607620, 167.551193, 1.190787}, // - 149
{0.073564, 0.028430, -0.000527, 90.928329, 88.295433, 0.000000, 1.000000}, // - 150
{0.083426, 0.032359, -0.005717, 90.928329, 88.295433, 0.000000, 1.000000}, // - 151
{0.072349, 0.019623, -0.000747, 90.928329, 82.624351, 0.000000, 1.000000}, // - 152
{0.075065, 0.015351, 0.006545, 90.928329, 71.041442, 0.000000, 1.000000},  // - 153
{0.062227, 0.029731, -0.004938, 90.928329, 84.602760, 0.000000, 1.000000}, // - 154
{0.099350, 0.030598, -0.003575, 86.771400, 84.762802, 4.236968, 1.000000}, // - 155
{0.079936, 0.049000, -0.000304, 90.928329, 82.926010, 0.000000, 1.000000}, // - 156
{0.067550, 0.035686, -0.000017, 90.928329, 82.926010, 0.000000, 1.000000}, // - 157
{0.090676, 0.039383, -0.001726, 90.928329, 88.667900, 0.000000, 1.000000}, // - 158
{0.090676, 0.039383, -0.003532, 90.928329, 88.667900, 0.000000, 1.000000}, // - 159
{0.098662, 0.017441, -0.001589, 90.928329, 88.667900, 0.000000, 1.000000}, // - 160
{0.105388, 0.038409, 0.003155, 90.928329, 88.667900, 0.000000, 1.000000},  // - 161
{0.097415, 0.036904, -0.000525, 90.928329, 88.667900, 0.000000, 1.000000}, // - 162
{0.088934, 0.023302, -0.004153, 90.928329, 80.393875, 0.000000, 1.000000}, // - 163
{0.088934, 0.023302, -0.004153, 90.928329, 80.393875, 0.000000, 1.000000}, // - 164
{0.087018, 0.051364, 0.000484, 90.928329, 94.584838, 0.000000, 1.000000},  // - 165
{0.087018, 0.051364, 0.000484, 90.928329, 94.584838, 0.000000, 1.000000},  // - 166
{0.095996, 0.038787, 0.000484, 90.928329, 84.315711, 0.000000, 1.000000},  // - 167
{0.089094, 0.034001, -0.006451, 90.928329, 84.315711, 0.000000, 1.000000}, // - 168
{0.075700, 0.028082, -0.006451, 90.928329, 84.315711, 0.000000, 1.000000}, // - 169
{0.093751, 0.041968, -0.005545, 90.928329, 84.315711, 0.000000, 1.000000}, // - 170
{0.090124, 0.031055, -0.000505, 90.928329, 84.315711, 0.000000, 1.000000}, // - 171
{0.066033, 0.032915, -0.002713, 90.928329, 84.315711, 0.000000, 1.000000}, // - 172
{0.088287, 0.045350, -0.005384, 90.928329, 84.315711, 0.000000, 1.000000}, // - 173
{0.087750, 0.042129, -0.005384, 90.928329, 84.315711, 0.000000, 1.000000}, // - 174
{0.092384, 0.039294, -0.005384, 90.928329, 84.315711, 0.000000, 1.000000}, // - 175
{0.097661, 0.039065, -0.006344, 90.928329, 80.736480, 0.000000, 1.000000}, // - 176
{0.097114, 0.039641, -0.006692, 90.928329, 80.736480, 0.000000, 1.000000}, // - 177
{0.069354, 0.039641, -0.000474, 90.928329, 80.736480, 0.000000, 1.000000}, // - 178
{0.091414, 0.039641, -0.005617, 90.928329, 80.736480, 0.000000, 1.000000}, // - 179
{0.094914, 0.039641, -0.005617, 90.928329, 80.736480, 0.000000, 1.000000}, // - 180
{0.117232, 0.033217, -0.001099, 90.928329, 82.396362, 0.000000, 1.000000}, // - 181
{0.082569, 0.032748, -0.003248, 90.928329, 87.394371, 0.000000, 1.000000}, // - 182
{0.095527, 0.027237, -0.001960, 90.928329, 86.443649, 0.000000, 1.000000}, // - 183
{0.095527, 0.040994, -0.006878, 90.928329, 86.443649, 0.000000, 1.000000}, // - 184
{0.085663, 0.030601, -0.002345, 90.928329, 81.496513, 0.000000, 1.000000}, // - 185
{0.085663, 0.030601, -0.001015, 90.928329, 81.496513, 0.000000, 1.000000}, // - 186
{0.076527, 0.027211, 0.008500, 90.928329, 74.401092, 0.000000, 1.000000},  // - 187
{0.096669, 0.032578, 0.001662, 90.928329, 83.502502, 0.000000, 1.000000},  // - 188
{0.098753, 0.032129, -0.001659, 90.928329, 90.153724, 0.000000, 1.000000}, // - 189
{0.092821, 0.035572, -0.001659, 90.928329, 90.153724, 0.000000, 1.000000}, // - 190
{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000, 1.000000}, // - 191
{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000, 1.000000}, // - 192
{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000, 1.000000}, // - 193
{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000, 1.000000}, // - 194
{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000, 1.000000}, // - 195
{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000, 1.000000}, // - 196
{0.100630, 0.020568, -0.001132, 90.928329, 90.153724, 0.000000, 1.000000}, // - 197
{0.077905, 0.028523, 0.000000, 89.675476, 89.270309, 0.000000, 1.000000},  // - 198
{0.099095, 0.022463, 0.000000, 89.675476, 89.270309, 0.000000, 1.000000},  // - 199
{0.103182, 0.031106, 0.000000, 89.675476, 89.270309, 0.000000, 1.000000},  // - 200
{0.078426, 0.038546, 0.000000, 89.675476, 89.270309, 0.000000, 1.000000},  // - 201
{0.101092, 0.035797, -0.002997, 89.675476, 82.081153, 0.000000, 1.000000}, // - 202
{0.092009, 0.042780, -0.005841, 89.675476, 84.463294, 0.000000, 1.000000}, // - 203
{0.092009, 0.042780, -0.005841, 89.675476, 84.463294, 0.000000, 1.000000}, // - 204
{0.092969, 0.027782, -0.002959, 89.675476, 84.463294, 0.000000, 1.000000}, // - 205
{0.105109, 0.036128, -0.000471, 89.675476, 84.463294, 0.000000, 1.000000}, // - 206
{0.066892, 0.024410, -0.002792, 89.675476, 84.463294, 0.000000, 1.000000}, // - 207
{0.088610, 0.043561, 0.001273, 281.516479, 89.674781, 167.551193, 1.000000}, // - 208
{0.084046, 0.013608, -0.002792, 89.675476, 81.667831, 0.000000, 1.000000}, // - 209
{0.084046, 0.013608, -0.001034, 89.675476, 81.667831, 0.000000, 1.000000}, // - 210
{0.067610, 0.033777, -0.001034, 89.675476, 85.214485, 0.000000, 1.000000}, // - 211
{0.094159, 0.020717, 0.000715, 89.675476, 85.214485, 0.000000, 1.000000},  // - 212
{0.098744, 0.036786, -0.001770, 89.675476, 85.214485, 0.000000, 1.000000}, // - 213
{0.068755, 0.036786, -0.001770, 89.675476, 85.214485, 0.000000, 1.000000}, // - 214
{0.068755, 0.026863, -0.001770, 89.675476, 85.214485, 0.000000, 1.000000}, // - 215
{0.068755, 0.026863, -0.001770, 89.675476, 85.214485, 0.000000, 1.000000}, // - 216
{0.095765, 0.030034, -0.001770, 89.675476, 85.214485, 0.000000, 1.000000}, // - 217
{0.085486, 0.039427, -0.003311, 89.675476, 85.214485, 0.000000, 1.000000}, // - 218
{0.068874, 0.027850, -0.001021, 89.675476, 85.214485, 0.000000, 1.000000}, // - 219
{0.052931, 0.050390, -0.002062, 89.675476, 88.113647, 0.000000, 1.000000}, // - 220
{0.094479, 0.034432, 0.000875, 89.675476, 83.572830, 0.000000, 1.000000},  // - 221
{0.094479, 0.034432, -0.000596, 89.675476, 83.572830, 0.000000, 1.000000}, // - 222
{0.094479, 0.062073, -0.003098, 89.675476, 83.572830, 0.000000, 1.000000}, // - 223
{0.064458, 0.029760, -0.001460, 89.675476, 83.572830, 0.000000, 1.000000}, // - 224
{0.064458, 0.029760, -0.001460, 89.675476, 83.572830, 0.000000, 1.000000}, // - 225
{0.072095, 0.029760, -0.001460, 89.675476, 83.572830, 0.000000, 1.000000}, // - 226
{0.110619, 0.043037, -0.001466, 89.675476, 86.927627, 0.000000, 1.000000}, // - 227
{0.099446, 0.050772, -0.001466, 89.675476, 85.103805, 0.000000, 1.000000}, // - 228
{0.078635, 0.023680, -0.000275, 89.675476, 73.445220, 0.000000, 1.000000}, // - 229
{0.043357, 0.028726, -0.000275, 89.675476, 73.445220, 0.000000, 1.000000}, // - 230
{0.092488, 0.049972, -0.000275, 89.675476, 88.981941, 0.000000, 1.000000}, // - 231
{0.092488, 0.016739, -0.000275, 89.675476, 88.981941, 0.000000, 1.000000}, // - 232
{0.071677, 0.037055, -0.002878, 89.675476, 88.981941, 0.000000, 1.000000}, // - 233
{0.082745, 0.004209, -0.002878, 89.675476, 88.981941, 0.000000, 1.000000}, // - 234
{0.057909, 0.021331, -0.002878, 89.675476, 88.981941, 0.000000, 1.000000}, // - 235
{0.079016, 0.021331, -0.000419, 89.675476, 77.678733, 0.000000, 1.000000}, // - 236
{0.074572, 0.021331, -0.000419, 89.675476, 84.527442, 0.000000, 1.000000}, // - 237
{0.074572, 0.038346, -0.001500, 89.675476, 84.527442, 0.000000, 1.000000}, // - 238
{0.111645, 0.011549, 0.006237, 89.675476, 84.527442, 0.000000, 1.000000},  // - 239
{0.090766, 0.044221, -0.000423, 89.675476, 89.461883, 0.000000, 1.000000}, // - 240
{0.069491, 0.049021, -0.000423, 89.675476, 89.461883, 0.000000, 1.000000}, // - 241
{0.059706, 0.031911, -0.000423, 89.675476, 89.461883, 0.000000, 1.000000}, // - 242
{0.065242, 0.031911, -0.000423, 89.675476, 89.461883, 0.000000, 1.000000}, // - 243
{0.065242, 0.051077, -0.001103, 89.675476, 89.461883, 0.000000, 1.000000}, // - 244
{0.082393, 0.038233, 0.000410, 89.675476, 89.461883, 0.000000, 1.000000},  // - 245
{0.079338, 0.044859, -0.002535, 89.675476, 89.461883, 0.000000, 1.000000}, // - 246
{0.101566, 0.037019, 0.000750, 89.675476, 83.514060, 0.000000, 1.000000},  // - 247
{0.091887, 0.047776, -0.000040, 89.675476, 83.514060, 0.000000, 1.000000}, // - 248
{0.089745, 0.044044, 0.004071, 89.675476, 83.514060, 0.000000, 1.000000},  // - 249
{0.094214, 0.044044, -0.007274, 89.675476, 83.514060, 0.000000, 1.000000}, // - 250
{0.072282, 0.044044, -0.001468, 89.675476, 90.444763, 0.000000, 1.000000}, // - 251
{0.095764, 0.034224, -0.000264, 89.675476, 82.959915, 0.000000, 1.000000}, // - 252
{0.087454, 0.026208, -0.000264, 89.675476, 82.959915, 0.000000, 1.000000}, // - 253
{0.099198, 0.037362, -0.000264, 89.675476, 82.959915, 0.000000, 1.000000}, // - 254
{0.070845, 0.019943, 0.003505, 89.675476, 73.529716, 0.000000, 1.000000},  // - 255
{0.065373, 0.033656, -0.001141, 89.675476, 83.002151, 0.000000, 1.000000}, // - 256
{0.070077, 0.033656, -0.001141, 89.675476, 83.002151, 0.000000, 1.000000}, // - 257
{0.089536, 0.041904, 0.000715, 89.675476, 83.002151, 0.000000, 1.000000},  // - 258
{0.084822, 0.041904, 0.000715, 89.675476, 83.002151, 0.000000, 1.000000},  // - 259
{0.093009, 0.031491, -0.001568, 89.675476, 83.002151, 0.000000, 1.000000}, // - 260
{0.093009, 0.015023, -0.001477, 89.675476, 83.002151, 0.000000, 1.000000}, // - 261
{0.076580, 0.039782, -0.001477, 89.675476, 88.620780, 0.000000, 1.000000}, // - 262
{0.076580, 0.028967, -0.001477, 89.675476, 88.620780, 0.000000, 1.000000}, // - 263
{0.075424, 0.043059, -0.001477, 89.675476, 88.620780, 0.000000, 1.000000}, // - 264
{0.089655, 0.021726, -0.001477, 89.675476, 88.620780, 0.000000, 1.000000}, // - 265
{0.096792, 0.014114, -0.003062, 89.675476, 85.166038, 0.000000, 1.000000}, // - 266
{0.094886, 0.024989, -0.003184, 89.675476, 85.166038, 0.000000, 1.000000}, // - 267
{0.094886, 0.024989, -0.003184, 89.675476, 85.166038, 0.000000, 1.000000}, // - 268
{0.102252, 0.024989, -0.003184, 89.675476, 85.166038, 0.000000, 1.000000}, // - 269
{0.102252, 0.024989, 0.000529, 89.675476, 85.166038, 0.000000, 1.000000},  // - 270
{0.096134, 0.025462, 0.000529, 89.675476, 79.225112, 0.000000, 1.000000},  // - 271
{0.099226, 0.032663, 0.000529, 89.675476, 79.225112, 0.000000, 1.000000},  // - 272
{0.080779, 0.028227, -0.001415, 281.516479, 91.776855, 167.551193, 1.061396}, // - 273
{0.089833, 0.022466, -0.001590, 89.675476, 88.636062, 0.000000, 1.000000}, // - 274
{0.089833, 0.022466, -0.001590, 89.675476, 88.636062, 0.000000, 1.000000}, // - 275
{0.089833, 0.022466, -0.001590, 89.675476, 88.636062, 0.000000, 1.000000}, // - 276
{0.082718, 0.062596, -0.000201, 89.675476, 88.636062, 0.000000, 1.000000}, // - 277
{0.082718, 0.062596, -0.000201, 89.675476, 88.636062, 0.000000, 1.000000}, // - 278
{0.087652, 0.059379, -0.000201, 89.675476, 88.636062, 0.000000, 1.000000}, // - 279
{0.087652, 0.023702, -0.003091, 89.675476, 88.636062, 0.000000, 1.000000}, // - 280
{0.087652, 0.023702, -0.003091, 89.675476, 88.636062, 0.000000, 1.000000}, // - 281
{0.090877, 0.026643, -0.003091, 89.675476, 88.636062, 0.000000, 1.000000}, // - 282
{0.090877, 0.026643, -0.003091, 89.675476, 88.636062, 0.000000, 1.000000}, // - 283
{0.090877, 0.053674, 0.009879, 89.675476, 88.636062, 0.000000, 1.000000},  // - 284
{0.104320, 0.041487, 0.008021, 89.675476, 88.636062, 0.000000, 1.000000},  // - 285
{0.087062, 0.021779, -0.003307, 89.675476, 88.636062, 0.000000, 1.000000}, // - 286
{0.073173, 0.048856, 0.005337, 89.675476, 92.561180, 0.000000, 1.000000},  // - 287
{0.090294, 0.027592, -0.003497, 89.675476, 92.561180, 0.000000, 1.000000}, // - 288
{0.081684, 0.015000, 0.001780, 281.516479, 108.106758, 169.790878, 1.042815}, // - 289
{0.086562, 0.042698, -0.000612, 89.675476, 92.561180, 0.000000, 1.000000}, // - 290
{0.096768, 0.039233, -0.000612, 89.675476, 83.550270, 0.000000, 1.000000}, // - 291
{0.079939, 0.020731, -0.005162, 89.675476, 83.550270, 0.000000, 1.000000}, // - 292
{0.097107, 0.027826, -0.005162, 89.675476, 88.505996, 0.000000, 1.000000}, // - 293
{0.097107, 0.037636, 0.000618, 89.675476, 88.505996, 0.000000, 1.000000},  // - 294
{0.079985, 0.035006, -0.000826, 89.675476, 87.533462, 0.000000, 1.000000}, // - 295
{0.088445, 0.024209, -0.002076, 89.675476, 73.285072, 0.000000, 1.000000}, // - 296
{0.094039, 0.035411, 0.000490, 89.675476, 84.277572, 0.000000, 1.000000},  // - 297
{0.099553, 0.024683, -0.002919, 89.675476, 84.277572, 0.000000, 1.000000}, // - 298
{0.099553, 0.044356, -0.000285, 89.675476, 84.277572, 0.000000, 1.000000}  // - 299
};
new legalmods[48][22] = {
    {400, 1024,1021,1020,1019,1018,1013,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
    {401, 1145,1144,1143,1142,1020,1019,1017,1013,1007,1006,1005,1004,1003,1001,0000,0000,0000,0000},
    {404, 1021,1020,1019,1017,1016,1013,1007,1002,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
    {405, 1023,1021,1020,1019,1018,1014,1001,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
    {410, 1024,1023,1021,1020,1019,1017,1013,1007,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000},
    {415, 1023,1019,1018,1017,1007,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
    {418, 1021,1020,1016,1006,1002,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
    {420, 1021,1019,1005,1004,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
    {421, 1023,1021,1020,1019,1018,1016,1014,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
    {422, 1021,1020,1019,1017,1013,1007,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
    {426, 1021,1019,1006,1005,1004,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
    {436, 1022,1021,1020,1019,1017,1013,1007,1006,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000},
    {439, 1145,1144,1143,1142,1023,1017,1013,1007,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000},
    {477, 1021,1020,1019,1018,1017,1007,1006,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
    {478, 1024,1022,1021,1020,1013,1012,1005,1004,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
    {489, 1024,1020,1019,1018,1016,1013,1006,1005,1004,1002,1000,0000,0000,0000,0000,0000,0000,0000},
    {491, 1145,1144,1143,1142,1023,1021,1020,1019,1018,1017,1014,1007,1003,0000,0000,0000,0000,0000},
    {492, 1016,1006,1005,1004,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
    {496, 1143,1142,1023,1020,1019,1017,1011,1007,1006,1003,1002,1001,0000,0000,0000,0000,0000,0000},
    {500, 1024,1021,1020,1019,1013,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
    {516, 1021,1020,1019,1018,1017,1016,1015,1007,1004,1002,1000,0000,0000,0000,0000,0000,0000,0000},
    {517, 1145,1144,1143,1142,1023,1020,1019,1018,1017,1016,1007,1003,1002,0000,0000,0000,0000,0000},
    {518, 1145,1144,1143,1142,1023,1020,1018,1017,1013,1007,1006,1005,1003,1001,0000,0000,0000,0000},
    {527, 1021,1020,1018,1017,1015,1014,1007,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
    {529, 1023,1020,1019,1018,1017,1012,1011,1007,1006,1003,1001,0000,0000,0000,0000,0000,0000,0000},
    {534, 1185,1180,1179,1178,1127,1126,1125,1124,1123,1122,1106,1101,1100,0000,0000,0000,0000,0000},
    {535, 1121,1120,1119,1118,1117,1116,1115,1114,1113,1110,1109,0000,0000,0000,0000,0000,0000,0000},
    {536, 1184,1183,1182,1181,1128,1108,1107,1105,1104,1103,0000,0000,0000,0000,0000,0000,0000,0000},
    {540, 1145,1144,1143,1142,1024,1023,1020,1019,1018,1017,1007,1006,1004,1001,0000,0000,0000,0000},
    {542, 1145,1144,1021,1020,1019,1018,1015,1014,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
    {546, 1145,1144,1143,1142,1024,1023,1019,1018,1017,1007,1006,1004,1002,1001,0000,0000,0000,0000},
    {547, 1143,1142,1021,1020,1019,1018,1016,1003,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
    {549, 1145,1144,1143,1142,1023,1020,1019,1018,1017,1012,1011,1007,1003,1001,0000,0000,0000,0000},
    {550, 1145,1144,1143,1142,1023,1020,1019,1018,1006,1005,1004,1003,1001,0000,0000,0000,0000,0000},
    {551, 1023,1021,1020,1019,1018,1016,1006,1005,1003,1002,0000,0000,0000,0000,0000,0000,0000,0000},
    {558, 1168,1167,1166,1165,1164,1163,1095,1094,1093,1092,1091,1090,1089,1088,0000,0000,0000,0000},
    {559, 1173,1162,1161,1160,1159,1158,1072,1071,1070,1069,1068,1067,1066,1065,0000,0000,0000,0000},
    {560, 1170,1169,1141,1140,1139,1138,1033,1032,1031,1030,1029,1028,1027,1026,0000,0000,0000,0000},
    {561, 1157,1156,1155,1154,1064,1063,1062,1061,1060,1059,1058,1057,1056,1055,1031,1030,1027,1026},
    {562, 1172,1171,1149,1148,1147,1146,1041,1040,1039,1038,1037,1036,1035,1034,0000,0000,0000,0000},
    {565, 1153,1152,1151,1150,1054,1053,1052,1051,1050,1049,1048,1047,1046,1045,0000,0000,0000,0000},
    {567, 1189,1188,1187,1186,1133,1132,1131,1130,1129,1102,0000,0000,0000,0000,0000,0000,0000,0000},
    {575, 1177,1176,1175,1174,1099,1044,1043,1042,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
    {576, 1193,1192,1191,1190,1137,1136,1135,1134,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
    {580, 1023,1020,1018,1017,1007,1006,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
    {589, 1145,1144,1024,1020,1018,1017,1016,1013,1007,1006,1005,1004,1000,0000,0000,0000,0000,0000},
    {600, 1022,1020,1018,1017,1013,1007,1006,1005,1004,0000,0000,0000,0000,0000,0000,0000,0000,0000},
    {603, 1145,1144,1143,1142,1024,1023,1020,1019,1018,1017,1007,1006,1001,0000,0000,0000,0000,0000}
};

//====================[WW2 Total War TW]==============================
#define MAX_TW_TOWERS 150
#define MAX_TW_ZONES 50
#define MAX_TW_PICKS 50
#define MAX_TW_VEHICLES 350
#define MAX_TW_OBJECTS 1633

enum TWZONEINFO
{
	Exists,
	zName[50],
	Text3D:Zone3DT,
	Team,
	AreaID,
	Conquer,
	cOriginalTeam,
	OriginalTeam,
	Needed,
	Float:zX,
	Float:zY,
	Float:zZ,
	gZone,
	BeingCaptured//someone in there
};
new TWZoneInfo[MAX_TW_ZONES][TWZONEINFO];

#define MAX_TW_SQUADS 200
enum TWSQUADINFO
{
	sName[50],
	Exists,
	ID,
	LeaderID,
	Members,
	Leader[50]
};
new SquadInfo[MAX_TW_SQUADS][TWSQUADINFO];

enum TWPLAYERINFO
{
	Country,
	Class,
	Kills,
	Score,
	Deaths,
	Money,
	LeaderColor,
	Blip,
	ABombsDropped,
	Healing,
	pHealing,
	SquadID,
	AtomSoundPlayed,
	GasBombMSG,
	GasMask,
	GasMaskOn,
	BombedShips,
	LeadersKilled,
	AsLeader,
	Survives,
	AirRank,
	ArmyRank,
	MedicRank,
	WeapRank,
	PeopleSaved,
	TookOver,
	GamesWon,
	GamesLost,
	GotInFrom,
	TWBombsLeft[MAX_BOMB_TYPES],
	pVotes,
	Nominated[7],
	pOnList[7],
	PlayerText:ClassTXT,
	PlayerText:RankTXT,
	EnteredTower,
	OnTower,
	AlreadyLeader,
	AtomicBought,
	kscTimer //key state change timer ... for medic heal, bombs and that shit...
};
new TWPlayerInfo[MAX_PLAYERS][TWPLAYERINFO];

#define MAX_ENGI_BOMBS 4
enum BOMBSTUFF
{
	bAmount,
	bPlanting,
	bDefusing,
	rRepairing,
	rShip,
	bSurfing,
	Float:bpX,
	Float:bpY,
	Float:bpZ,
	Float:bvX,
	Float:bvY,
	Float:bvZ,

	bObject[MAX_ENGI_BOMBS],
	Float:bX[MAX_ENGI_BOMBS],
	Float:bY[MAX_ENGI_BOMBS],
	Float:bZ[MAX_ENGI_BOMBS],
	WorldID[MAX_ENGI_BOMBS],

	bCar[MAX_ENGI_BOMBS],
	bcObject[MAX_ENGI_BOMBS],
	Float:bcX[MAX_ENGI_BOMBS],
	Float:bcY[MAX_ENGI_BOMBS],
	Float:bcZ[MAX_ENGI_BOMBS],
	cWorldID[MAX_ENGI_BOMBS],

	bShip[MAX_ENGI_BOMBS],
	sWorldID[MAX_ENGI_BOMBS],
	bsObject[MAX_ENGI_BOMBS],
	Float:bsX[MAX_ENGI_BOMBS],
	Float:bsY[MAX_ENGI_BOMBS],
	Float:bsZ[MAX_ENGI_BOMBS]
};
new TWPlayerBomb[MAX_PLAYERS][BOMBSTUFF];

new maxTWpicks=-1;
new maxTWvehs=-1;
enum TWINFO
{
	Map,
	pAtom,
	AtomPrice,
	Election,
	Pickups[MAX_TW_PICKS],
	Vehicles[MAX_TW_VEHICLES],
	Objects[MAX_TW_OBJECTS],
	WeapShop[3],
	pRefill[8],
	pGetIn[7],
	pGetOut,
	Text:ClassTXT,
	Text:RankTXT,
	Text:WarBGTXT,
	Text:AlliesTXT,
	Text:AxisTXT
};
new TWInfo[TWINFO];

new maxTWtowers = -1;
enum AATOWERINFO
{
	Exists,
	Team,
	AreaID
};
new TWAATower[MAX_TW_TOWERS][AATOWERINFO];

enum HydrogenBomb
{
	Float:ax,
	Float:ay,
	Float:az,
	Timer,
	area
};
new NuclearBomb[MAX_PLAYERS][HydrogenBomb];

enum GASBOMB
{
	area,
	Object,
	Float:ax,
	Float:ay,
	Float:az
};
new GasBomb[MAX_PLAYERS][GASBOMB];

new TWMapNames[][]=
{
	"Northern Europe",
	"Southern Europe"
};
new caCountryNames[7][] =
{
	"a British",
	"a German",
	"a Balkan",
	"a Soviet",
	"an American",
	"a Japanese",
	"an Italian"
};
new cCountryNames[7][] =
{
	"British",
	"German",
	"Balkan",
	"Soviet",
	"American",
	"Japanese",
	"Italian"
};
new CountryNames[7][] =
{
	"Britain",
	"Germany",
	"Balkan Nations",
	"Soviet Union",
	"USA",
	"Japan",
	"Italy"
};

new PowerNames[3][] =
{
	"No Power",
	"Allies",
	"Axis"
};
new TheMedicRanks[7][] =
{
    "       ",
	"Private",
	"Corporal",
	"Lieutenant",
	"Major",
	"Colonel",
	"General"
};
new TheAirRanks[7][] =
{
    "  ",
	"Airman",
	"Sergeant",
	"Lieutenant",
	"Major",
	"Colonel",
	"Captain of Air"
};
new TheArmyRanks[7][] =
{
	"  ",
	"Private",
	"Corporal",
	"Sergeant",
	"Lieutenant",
	"Major",
	"General"
};

new ClassNames[9][] =
{
	"No Class",
	"Leader",
	"Vice leader",
	"Bodyguard",
	"Soldier",
	"Pilot",
	"Medic",
	"Engineer",
	"Spy"
};
new CountryColors[] =
{
0xFFFFFF77,0x80008077,0x375FFF77,0xFFFF0077,
0x33FF3377,0xFF000077,0xFF990077
};
new CountryChatColor[][] =
{
"FFFFFF","800080","375FFF","FFFF00",
"33FF33","FF0000","FF9900"
};

new Float:CountrySpawnNorth[7][4] = {
{0.0, -758.1036,1622.2758,27.1172},
{0.0, 254.5382,2619.2239,16.7644},
{0.0,-354.9599,1564.3668,75.6751},
{0.0, -1650.1559,2551.1865,85.1655},
{0.0, -20.4775,1017.7431,19.7422},
{0.0, -250.6674,2786.9890,62.5861},
{0.0, 232.4541,1993.0442,18.0781}
};
new Float:CountryPilotSpawnNorth[7][5] = {
{0.0, -682.4705,1611.3931,25.0886,322.0},
{0.0, 263.8567,2541.3596,16.8125,102.12},
{0.0, -295.6078,1549.2573,75.3594,250.98},
{0.0, -1557.6255,2475.0916,58.210,237.79},
{0.0, -22.1385,851.8141,32.39,345.29},
{0.0, -34.4851,2758.7876,85.0629,132.51},
{0.0, 341.2788,1988.1056,17.6406,143.7}
};
new Float:CountrySpawnSouth[7][4] = {
{0.0, 2428.8926,118.1020,26.4689},
{0.0, 207.5833,86.5254,4.1253},
{0.0, 1340.2948,347.9365,19.5},
{0.0, 842.5332,-602.2176,18.4},
{0.0, -1140.3522,-973.4235,130.3},
{0.0, -2020.3177,-2409.9346,30.6250},
{0.0, -18.5650,102.1941,3.11}
};
new Float:CountryPilotSpawnSouth[7][5] = {
{0.0, 2445.7986,-157.0609,32.0342,123.4545},
{0.0, 94.2722,-131.7204,1.5798,11.9068},
{0.0, 1019.5413,212.4627,36.2517,337.4398},
{0.0, 811.0961,-407.4919,24.0252,42.3004},
{0.0, -1205.2183,-1234.0747,135.5768,5.2794},
{0.0, -2253.7749,-2442.7678,30.9792,73.9473},
{0.0, -178.5854,-138.1644,3.1172,25.0669}
};

#define BRITISH 0
#define GERMANY 1
#define BALKAN 2
#define RUSSIA 3
#define USA 4
#define JAPAN 5
#define ITALY 6

new CountryClassNames[7][9][]={
{BRITISH, "Prime minister","Vice Minister","Minister Guard","British Army Soldier","British R.A.F. Pilot","British Medic","British Engineer","British SIS Spy"},
{GERMANY, "Fuhrer","Nazi Heer General","Fuhrer Guard","Nazi Heer Soldier","Nazi Luftwaffe Pilot","Nazi Medic","Nazi Engineer","Nazi Gestapo Spy"},
{BALKAN, "Balkan President","Balkan Vice President","Balkan President Guard","Balkan Soldier","Balkan Pilot","Balkan Medic","Balkan Engineer","Balkan Spy"},
{RUSSIA, "Soviet Dictator","Soviet General","Soviet Dictator Guard","Soviet Soldier","Soviet Pilot","Soviet Medic","Soviet Engineer","Soviet Spy"},
{USA, "American President"," American Vice President"," USA President Guard","American Soldier","American Pilot","USA Medic","USA Engineer","American Spy"},
{JAPAN, "Emperor","Japanese General","Japanese Guard","Japanese Soldier","Japanese Pilot","Japanese Medic","Japanese Engineer","Japanese Spy"},
{ITALY, "Italian Dictator","Italian General","Italian Guard","Italian Soldier","Italian Pilot","Italian Medic","Italian Engineer","Italian Spy"}
};
new CountrySkins[7][9] = {
{BRITISH, 147,134,160,60,61,276,235,98},
{GERMANY, 113,32,30,287,164,135,50,240},
{BALKAN, 186,185,171,179,255,299,79,259},
{RUSSIA, 272,112,59,111,112,236,230,37},
{USA, 295,17,132,73,101,156,241,71},
{JAPAN, 227,124,43,121,123,117,229,122},
{ITALY, 70,46,95,124,126,127,162,125}
};


new RandomMessageTW[][] =
{
	"{33FF33}TW HINT:{FFFFFF} Press 'G' near a nevada/tank to enter!",
	"{33FF33}TW HINT:{FFFFFF} Are you tired of WW2?! Use /lobby to change mode!",
	"{33FF33}TW HINT:{FFFFFF} Press 'ENTER' near a submarine to enter!",
	"{33FF33}TW HINT:{FFFFFF} Use /enemy to see who your enemies are!",
	"{33FF33}TW HINT:{FFFFFF} Use /myduty to see what your job is!",
	"{33FF33}TW HINT:{FFFFFF} Use /aahelp to learn how to use the AA gun!",
	"{33FF33}TW HINT:{FFFFFF} Use /lands to see the territory status!",
	"{33FF33}TW HINT:{FFFFFF} Use /ships to see the ships' status!",
	"{33FF33}TW HINT:{FFFFFF} Atomic bomb can be dropped only from nevadas! Use /ahelp!",
	"{33FF33}TW HINT:{FFFFFF} Did you know that you could create your own squad?",
	"{33FF33}TW HINT:{FFFFFF} Want to to learn how to throw bombs from fighter planes? Use /bhelp!"
};
new RandomMessageTWOnline[][] =
{
	"HINT: Press 'G' near a nevada/tank to enter!",
	"HINT: Are you tired of WW2?! Use /lobby to change mode!",
	"HINT: Press 'ENTER' near a submarine to enter!",
	"HINT: Use /enemy to see who your enemies are!",
	"HINT: Use /myduty to see what your job is!",
	"HINT: Use /aahelp to learn how to use the AA gun!",
	"HINT: Use /lands to see the territory status!",
	"HINT: Use /ships to see the ships' status!",
	"HINT: Atomic bomb can be dropped only from nevadas! Use /ahelp!",
	"HINT: Did you know that you could create your own squad?",
	"HINT: Want to to learn how to throw bombs from fighter planes? Use /bhelp!"
};

#define NOCLASS 0
#define LEADER 1
#define VICE 2
#define BODYGUARD 3
#define SOLDIER 4
#define PILOT 5
#define MEDIC 6
#define ENGINEER 7
#define SPY 8

#define SHIP 0
#define SUB 1

#define NOPOWER 0
#define ALLIES 1
#define AXIS 2

#define NorthernSA 0
#define SouthernSA 1
#define COL_ITALY 0xFF990077 //italy
#define COL_JAPAN 0xFF000077 //japan
#define COL_BALKAN 0x375FFF77 // balkan
#define COL_USA 0x33FF3377 //usa
#define COL_GERMANY 0x80008077//#define COL_GERMANY 0x2C272788 //germany
#define COL_SOVIET 0xFFFF0077 //soviet
#define COL_BRITISH 0xFFFFFF77 // british
#define COL_ITALY_R1 0xFF990066
#define COL_JAPAN_R1 0xFF000066
#define COL_BALKAN_R1 0x375FFF66
#define COL_USA_R1 0x33FF3366
#define COL_GERMANY_R1 0x80008066
#define COL_SOVIET_R1 0xFFFF0066
#define COL_BRITISH_R1 0xFFFFFF66
#define COL_ITALY_R2 0xFF990055
#define COL_JAPAN_R2 0xFF000055
#define COL_BALKAN_R2 0x375FFF55
#define COL_USA_R2 0x33FF3355
#define COL_GERMANY_R2 0x80008055
#define COL_SOVIET_R2 0xFFFF0055
#define COL_BRITISH_R2 0xFFFFFF55
#define COL_ITALY_R3 0xFF990044
#define COL_JAPAN_R3 0xFF000044
#define COL_BALKAN_R3 0x375FFF44
#define COL_USA_R3 0x33FF3344
#define COL_GERMANY_R3 0x80008044
#define COL_SOVIET_R3 0xFFFF0044
#define COL_BRITISH_R3 0xFFFFFF44
#define COL_ITALY_R4 0xFF990033
#define COL_JAPAN_R4 0xFF000033
#define COL_BALKAN_R4 0x375FFF33
#define COL_USA_R4 0x33FF3333
#define COL_GERMANY_R4 0x80008033
#define COL_SOVIET_R4 0xFFFF0033
#define COL_BRITISH_R4 0xFFFFFF33
#define COL_ITALY_R5 0xFF990000
#define COL_JAPAN_R5 0xFF000000
#define COL_BALKAN_R5 0x375FFF00
#define COL_USA_R5 0x33FF3300
#define COL_GERMANY_R5 0x80008000
#define COL_SOVIET_R5 0xFFFF0000
#define COL_BRITISH_R5 0xFFFFFF00

//====================[FFA]==============================
enum FFAPLAYERINFO
{
	Kills,
	Deaths,
	Score,
	Money,
	Captures,
	Treasures,
	pTreasure[102],
	GangID,
	Properties,
	PropertySpawn,
	gRank[50],
	TreasureRank,
	CaptureRank,
	KillsRank,
	DisableTK,
	PlayerText:TXT_Treasures
};
new FFAPlayerInfo[MAX_PLAYERS][FFAPLAYERINFO];

#define MAX_FFA_PROPERTIES 500

#define FFA_OWNER_NOTHING 0
#define FFA_OWNER_PLAYER 1
#define FFA_OWNER_GANG 2
enum FFAPROPERTIES
{
	Exists,
	Price,
	Locked,
	ID,
	OwnerID,
	OwnerType,
	gName[50],
 	Owner[50],
	MapIcon,
	
	AllowedIn,
	gInX,
	gInY,
	gInZ,
	gInAng,
	InInterior,
	Text3D:gInLabel,
	InPickup,

	gOutX,
	gOutY,
	gOutZ,
	gOutAng,
	Text3D:gOutLabel,
	OutPickup
};
new FFAPropertyInfo[MAX_FFA_PROPERTIES][FFAPROPERTIES];

#define MAX_FFA_GANGS 50
#define MAX_FFA_GANGS_ALL (MAX_FFA_GANGS+3)
enum GANGINFO
{
	ID,
	gZone,
	Exists,
	Color,
	gColHex[20],
	OutPickup,
	InPickup,
	MapIcon,
	Text3D:gSpawnLabel,
	gName[50],
	gLeaderID,
	gViceID,
	gLeader[40],
	gVice[40],
	Members,
	Money,
	gSpawnX,
	gSpawnY,
	gSpawnZ,
	gOutInterior,
	gOutWorld,
	Locked,
	AllowedIn,
	gInX,
	gInY,
	gInZ,
	InInterior,
	InWorld,
	Text3D:gInLabel,
	AllowedOut,
	gOutX,
	gOutY,
	gOutZ,
	OutInterior,
	OutWorld,
	Text3D:gOutLabel,
	PicksAllowed,
	gPicksX,
	gPicksY,
	Rocket,
	M4,
	Ak,
	Sniper,
	Mp5,
	Rifle,
	Deagle,
	UZI,
	Tec,
	Grenade,
	Shotgun,
	Sawed,
	Spac,
	Molotov,
	gHP,
	gArmor,
	gJP,
	Teams
};
new GangInfo[MAX_FFA_GANGS_ALL][GANGINFO];

new maxFFAzones=0;
#define MAX_FFA_ZONES 400
enum GZONEINFO
{
	gZone,
	ID,
	AreaID,
	Name[50],
	Exists,
	Captured,
	Announce,
	Object,
	State,
	cTime,//capture time
	Text3D:pLabel,
	GX,
	GY,
	GZ,
	MapIcon,
	InZoneCount[MAX_FFA_GANGS_ALL] //so that we include 0 for neutrals
};
new FFAGangZones[MAX_FFA_ZONES][GZONEINFO];

#define FFA_CAPTURE_TIME 15

#define MAX_FFA_TREASURES 102
enum FFAINFO
{
	Treasures[MAX_FFA_TREASURES]
};
new FFAInfo[FFAINFO];

new FFARankNamesTreasure[6][] =
{
	"ARRRGG(1)",
	"Founder(2)",
	"That was fast(3)",
	"Professor(4)",
	"Z FFA Man(5)",
	"The FFA Pirate(6)"
};
new FFARankNamesCapture[6][] =
{
	"Noob(1)",
	"There and here(2)",
	"Going up(3)",
	"The Pro(4)",
	"The FFA Man(5)",
	"Don of FFA(6)"
};
new FFARankNamesKills[6][] =
{
	"Advanced(1)",
	"Soldier(2)",
	"Dirty Work(3)",
	"Hitman(4)",
	"The Pro(5)",
	"The unbeatable(6)"
};

new RandomMessageFFA[][] =
{
	"{33FF33}FFA HINT:{FFFFFF} Use /cars or /car to spawn the desired vehicle!",
	"{33FF33}FFA HINT:{FFFFFF} Use /skin or /skins to change your skin!",
	"{33FF33}FFA HINT:{FFFFFF} Use /tunecar to modify your vehicle!",
	"{33FF33}FFA HINT:{FFFFFF} Did you know that you can be part of any gang? Apply on the forums!",
	"{33FF33}FFA HINT:{FFFFFF} Did you know that you can create your own gang? Apply on the forums!",
	"{33FF33}FFA HINT:{FFFFFF} Use /ginfo to see the stats of a gang!",
	"{33FF33}FFA HINT:{FFFFFF} Treasures are hidden in places you wouldn't look!"
};
new RandomMessageFFAOnline[][] =
{
	"HINT: Use /cars or /car to spawn the desired vehicle!",
	"HINT: Use /skin or /skins to change your skin!",
	"HINT: Use /tunecar to modify your vehicle!",
	"HINT: Did you know that you can be part of any gang? Apply on the forums!",
	"HINT: Did you know that you can create your own gang? Apply on the forums!",
	"HINT: Use /ginfo to see the stats of a gang!",
	"HINT: Treasures are hidden in places you wouldn't look!"
};

//====================[SF]==============================
new maxSFevents=0;
new maxSFcmds=0;

#if !defined MAX_GRAPPLE_DISTANCE
	#define MAX_GRAPPLE_DISTANCE \
		(150.0)
#endif

#if !defined GRAPPLE_CROSS_INTERVAL
	#define GRAPPLE_CROSS_INTERVAL \
		(0.25)
#endif

#if !defined PLAYER_MOVE_SPEED
	#define PLAYER_MOVE_SPEED \
		(20.0)
#endif

#define KEY_AIMFIRE (132)

#define MAX_EVENT_OBJECTS 1000
#define MAX_EVENT_SPOTS 50
#define MAX_EVENTS 300
enum EVENTINFO
{
	Exists,
	ID,
	Started,
	Type,
	UserID,
	eName[50],
	State,
	Popularity,
	eCountDown,
	Vehicles[MAX_EVENT_SPOTS],
	Objects[MAX_EVENT_OBJECTS],
	PlaceTaken[MAX_EVENT_SPOTS],
	Float:eSpawnX[MAX_EVENT_SPOTS],
	Float:eSpawnY[MAX_EVENT_SPOTS],
	Float:eSpawnZ[MAX_EVENT_SPOTS],
	Float:eAngle[MAX_EVENT_SPOTS],
	Author[50],
	Date[20],
	OnFoot,
	NoExitVehs,
	eSkin,
	Health,
	Armor,
	Interior,
	World,
	SpeedBoost,
	FightStyle,
	WorldBounds,
	WB_MaxX,
	WB_MaxY,
	WB_MinX,
	WB_MinY,
	Money,
	Checkpoint,
	C_Type,
	C_X,
	C_Y,
	C_Z,
	C_Size,
	Weap1,
	Ammo1,
	Weap2,
	Ammo2,
	Weap3,
	Ammo3,
	Weap4,
	Ammo4,
	MaxPlayers
};
new EventInfo[MAX_EVENTS][EVENTINFO];

#define RACE 0
#define DUEL 1
#define MAX_SF_CMDS 200
enum CMDINFO
{
	Exists,
	cName[50],
	Description[50],
	cSpawnX,
	cSpawnY,
	cSpawnZ,
	cAngle,
	OnFoot,
	Weap1,
	Ammo1,
	Weap2,
	Ammo2,
	Weap3,
	Ammo3,
	Weap4,
	Ammo4,
	Interior,
	Money
};
new CmdInfo[MAX_SF_CMDS][CMDINFO];

enum SFPLAYERINFO
{
	Event,
	EventSpot,
	Money,
	EventsWon,
	EventRank,
	Superman,
	Spiderman,
	BlockTele,
	SpecID,
	SpecIDEvent,
	Boost,
	Bets,
	BetsWon,
	BetsLost,
	BetpID[MAX_EVENTS],
	BetAmount[MAX_EVENTS]
};
new SFPlayerInfo[MAX_PLAYERS][SFPLAYERINFO];

new EventRankNames[6][] =
{
	"Tucker(1)",
	"Zuukwee(2)",
	"Stunter(3)",
	"Cool dude(4)",
	"Professional(5)",
	"Master of SF(6)"
};
new EventType[][] =
{
	"Race",
	"Duel"
};
new RandomMessageSTUNT[][] =
{
	"{33FF33}SF HINT:{FFFFFF} Press 'Y' to enable/disable vehicle boost! Press 'N' to boost!",
	"{33FF33}SF HINT:{FFFFFF} Press 'N' to speed boost!",
	"{33FF33}SF HINT:{FFFFFF} Use /tunecar to modify your vehicle!",
	"{33FF33}SF HINT:{FFFFFF} Press the horn button to make the vehicle float!",
	"{33FF33}SF HINT:{FFFFFF} Use /cars or /car to spawn the desired vehicle!",
	"{33FF33}SF HINT:{FFFFFF} Use /skin or /skins to change your skin!"
};
new RandomMessageSTUNTOnline[][] =
{
	"HINT: Press 'Y' to enable/disable vehicle boost! Press 'N' to boost!",
	"HINT: Press 'N' to speed boost!",
	"HINT: Use /tunecar to modify your vehicle!",
	"HINT: Press the horn button to make the vehicle float!",
	"HINT: Use /cars or /car to spawn the desired vehicle!",
	"HINT: Use /skin or /skins to change your skin!"
};
//====================[WW2 Timeline TL]==============================
#define MAX_TL_VEHICLES 40
#define MAX_TL_OBJECTS 700
enum TLPLAYERINFO
{
	RoundsWon,
	RoundsLost,
	Kills,
	Deaths,
	Objective,
	Score,
	OnTower
};
new TLPlayerInfo[MAX_PLAYERS][TLPLAYERINFO];

new maxTLobjects;
enum TLINFO
{
	Map,
	TimeLeft,
	Timer,
	Text:TimeleftTD,
	Objects[MAX_TL_OBJECTS],
	Vehicles[MAX_TL_VEHICLES],
	AxisShips,
	AllyShips,
	AreaID,
	BeingBombed
};
new TLInfo[TLINFO];

#define MAX_DDAYBOATS 2
#define MAX_DDAYBOAT_OBJS 10
enum DDAYBOAT
{
	dObjects[MAX_DDAYBOAT_OBJS],
	dAngle,
	dLanded,
	Float:desX,
	Float:desY,
	Float:desZ
};
new DDayBoat[MAX_DDAYBOATS][DDAYBOAT];

new DDayPlayerObjects[MAX_PLAYERS];

new maxTLtowers = -1;
#define MAX_TL_TOWERS 20
enum TLAATOWERINFO
{
	Exists,
	Team,
	AreaID
};
new TLAATower[MAX_TL_TOWERS][TLAATOWERINFO];


new PlanePlaces[] =
{
	0,40,-40,80,-80,120,-120,160,-160
};

#define DDAY 0
#define MIDWAY 1
#define AIRBORNE 2
#define RAMELLE 3
#define PEARLHARBOR 4
#define OFBRITAIN 5
#define STALINGRAD 6
#define TANKBATTLE 7
new TLMapNames[][] =
{
	"D-Day, Omaha beach",
	"Midway",
	"Airborne",
	"Ramelle",
	"Pearl Harbor",
	"Britain",
	"Stalingrad",
	"Tank"
};
//====================[CO]==============================
#define MAX_CO_GATES 40
#define MAX_CO_VEHICLES 32
#define MAX_CO_CAGE_OBJ 11

#define NOTEAM 0
#define COP 1
#define CRIMINAL 2

#define LS 0
#define SF 1
#define LV 2
#define FOREST 3
#define DESERT 4
#define LV_AIR 5
#define LS_AIR 6
#define QUARRY 7
#define SF_AIR 8

enum COPLAYERINFO
{
	InJail,
	RoundsWon,
	RoundsLost,
	Kills,
	Score,
	Money,
	Arrests,
	Releases,
	Deaths,
	CriminalRank,
	PoliceRank,
	KillsRank,
	Arresting,
	aTimer,
	aTime
};
new COPlayerInfo[MAX_PLAYERS][COPLAYERINFO];

new maxCOvehicles=-1;
enum COINFO
{
	Map,
	Timer,
	PrisonLoaded,
	Cage[MAX_CO_CAGE_OBJ],
	TimeLeft,
	Vehicles[MAX_CO_VEHICLES],
	AllGateState,
	Gates[MAX_CO_GATES],
	GateState[MAX_CO_GATES],
	WeapShop,
	pGetIn,
	pGetOut,
	prisonHP,
	prisonAR,
	prisonWEAP,
	pHP,
	pArmor,
	pRefillCop,
	pRefillCriminal,
	pJailRelease,
	AreaID,
	aBottomRight,
	aBottomLeft,
	aUpperLeft,
	aUpperRight,
	BeingReleased,
	Text:td_TimeLeft,
	Text:td_JailLeft,
	Text:td_BGs[4],
	Text:td_Time,
	Text:td_Jail
};
new COInfo[COINFO];

new Float:MapBoundsCO[][] = {
{0.0, 2980.0908,92.3032,-897.7386,-2766.5320},//Float:x_max,Float:x_min,Float:y_max,Float:y_min
{0.0, -1309.0465, -3028.6091, 1790.3651, -859.5109},
{0.0, 3015.6057,864.8375,3007.8025,534.6819},
{0.0, 2977.9990, -1189.3513, 631.1843, -871.3196},
{0.0, 815.8903, -2991.0779, 3089.2834, 462.0018},
{0.0, 1627.2365,1336.065,1864.1294,1143.7596},//lv air
{0.0, 2141.9763,1361.6686,-2401.4763,-2625.8604},
{0.0, 730.8318,475.4524,969.4401,789.8013},
{0.0, -1277.4645,-1599.0093,110.4062,-268.2626}
};

new Float:COGetOut[][] = {
{1153.7303,-1770.1213,16.5938,357.09},//ls
{-2169.5386,252.0132,35.3322,267.1628},//sf
{2339.9514,1553.8303,10.8203,88.9259},//lv
{-49.4931,-270.0475,6.6332,180.822},//forest
{-551.5299,2593.6980,53.9348,269.7095},//desert
{1597.5176, 1448.3705, 9.8288,180.0}, //lv air
{1767.2885,-2433.5535,13.5547,173.4603},//ls air
{581.6347, 881.0120, -45.0543, 90.0},//quarry
{-1445.7561, -102.4417, 5.2366, 240.0}//sf air
};

new Float:COGetIn[][] = {
{-474.6523,-226.3435,1011.8563,81.3512}, //pickup!!
{-519.8208,-229.5134,1016.0203,267.566},
{-511.7263,-209.2920,1016.0203,264.9145},
{-510.2742,-234.2936,1011.8563,353.172}
};

new Float:COSpawnCop[][] = {
{0.0, 1554.0811,-1686.9836,6.2188},//ls
{0.0, -1591.8605,714.1285,-5.242},//sf
{0.0, 2269.1633,2448.0876,3.5313},//lv
{0.0, 627.9437,-572.0316,17.463},//forest
{0.0, -1390.0699,2636.0254,55.9844},//desert
{0.0, 1602.2103,1161.6167,10.812},//lv air
{0.0, 2098.5894,-2471.1904,13.5469},//ls air
{0.0, 535.4090,875.0815,-40.8543},//quarry
{0.0, -1457.7024,1.9610,6.000}//sf air
};
new Float:COSpawnCriminal[][] = {
{0.0, 756.3806,-1361.7209,13.5143},//ls
{0.0, -2720.8752,-317.3011,7.8438},//sf
{0.0, 1058.7222,1261.1864,10.8203},//lv
{0.0, 1523.3224,35.6856,24.5734},//forest
{0.0, -831.2579,1440.4431,13.9989},//desert
{0.0, 1340.9532,1808.3224,10.8203},//lv air
{0.0, 1381.4225,-2487.8938,13.554},//ls air
{0.0, 673.7935,884.9948,-40.0521},//quarry
{0.0, -1355.5331,-206.0304,6.00}//sf air
};

new Float:COCagePlace[][] = {
{0.0, 1591.9694,-1612.0613,13.3828, 1601.4825,-1614.6138,13.4815},//ls
{0.0, -1602.3540,653.4570,7.1875, -1593.2408,654.6920,7.1875},//sf
{0.0, 2274.0798,2467.0420,10.8203, 2285.4797,2464.3135,10.8203},//lv
{0.0, 653.2389,-541.6898,16.3281, 661.5816,-542.6161,16.3359},//forest
{0.0, -1414.9818,2614.8909,55.8359, -1418.7836,2624.5430,55.8359},//desert
{0.0, 1577.8843,1167.2740,10.8052, 1569.8087,1167.0586,10.8052},//lv air
{0.0, 2067.2278,-2462.5249,13.5469, 2068.9346,-2453.3489,13.5469},//ls air
{0.0, 529.2175,848.8605,-42.9609, 538.5699,849.8226,-42.1908},//quarry
{0.0, -1469.5453,32.9323,6.0000, -1469.6031,22.5955,6.0000}//sf air
};

new Float:CORefillsCopPlace[][] = {
{1577.3092,-1694.1876,6.218},//ls
{-1591.4703,721.7189,-4.9063},//sf
{2262.3372,2447.6621,3.531},//lv
{629.4379,-575.2507,16.8659},//forest
{-1390.3221,2630.9231,55.9844},//desert
{1598.5215,1178.6010,10.8125},//lv air
{2122.4648,-2483.0669,13.5469},//ls air
{547.8593,881.6895,-41.3554},//quarry
{-1456.8831,13.2382,6.0000}//sf iaar
};

new Float:CORefillsCriminalPlace[][] = {
{2751.7310,-1357.5046,13.500},//ls
{-2726.9761,-323.7944,7.1798},//sf
{1059.8534,1274.7498,10.8203},//lv
{1519.4736,33.6033,24.4513},//forest
{-831.6580,1444.9983,14.1526},//desert
{1346.8684,1763.4971,10.8203},//lv air
{1391.1099,-2501.6108,13.554},//ls air
{679.2433,875.8760,-40.497},//quarry
{-1355.4641,-198.6946,6.0000}//sf iaar
};

new Float:COHPPlace[][] = {
{2028.3788,-1405.2954,17.2376},//ls
{-2655.0959,638.8834,14.4531},//sf
{1606.8862,1819.5123,10.8280},//lv
{1246.9086,332.2635,19.5547},//forest
{-315.0480,1050.6522,20.3403},//desert
{1454.6633,1543.0293,10.8203},//lv air
{1786.0612,-2545.6748,13.5469},//ls air
{599.0915,867.3044,-42.960},//quarry
{-1361.5154,-119.8383,6.335}//sf air
};

new Float:COArmorPlace[][] = {
{1580.1012,-1635.0725,13.5611},//ls
{-1616.4257,684.9610,7.1875},//sf
{2238.6855,2449.3875,11.0372},//lv
{629.1611,-552.5400,16.5448},//forest
{-1392.5317,2618.5750,55.8959},//desert
{1591.8434,1177.8290,10.812},//lv air
{2127.8015,-2508.0632,13.5469},//ls air
{547.5109,878.2336,-41.7314},//quarry
{-1456.0961,-6.5554,6.000}//sf air
};

new Float:COPrisonSpawns[][] = {
{-474.6200,-233.0083,1011.8563},
{-479.7115,-233.6247,1011.8563},
{-483.2975,-233.5786,1011.8563},
{-486.4551,-233.8150,1011.8563},
{-489.3340,-233.2625,1011.8563},
{-492.9918,-232.9866,1011.8563},
{-496.4501,-233.1025,1011.8563},
{-499.3960,-233.0495,1011.8563},
{-502.8881,-233.2522,1011.8563},
{-506.4373,-233.3337,1011.8563},
{-474.6200,-233.0083,1016.8563},
{-479.7115,-233.6247,1016.8563},
{-483.2975,-233.5786,1016.8563},
{-486.4551,-233.8150,1016.8563},
{-489.3340,-233.2625,1016.8563},
{-492.9918,-232.9866,1016.8563},
{-496.4501,-233.1025,1016.8563},
{-499.3960,-233.0495,1016.8563},
{-502.8881,-233.2522,1016.8563},
{-506.4373,-233.3337,1016.8563},
{-474.6371,-208.8245,1011.8563},
{-477.8488,-209.7203,1011.8563},
{-481.8488,-209.7203,1011.8563},
{-484.2959,-209.8497,1011.856},
{-488.2959,-209.8497,1011.8563},
{-492.2959,-209.8497,1011.8563},
{-494.3612,-209.6212,1011.8563},
{-498.3612,-209.6212,1011.8563},
{-502.3612,-209.6212,1011.8563},
{-505.0192,-208.7719,1011.8563},
{-474.6371,-208.8245,1016.8563},
{-477.8488,-209.7203,1016.8563},
{-481.8488,-209.7203,1016.8563},
{-484.2959,-209.8497,1016.856},
{-488.2959,-209.8497,1016.8563},
{-492.2959,-209.8497,1016.8563},
{-494.3612,-209.6212,1016.8563},
{-498.3612,-209.6212,1016.8563},
{-502.3612,-209.6212,1016.8563},
{-505.0192,-208.7719,1016.8563}
};

new Float:COPrisonGates[][] = {
{-475.60, -230.40, 1013.50},
{-480.70, -230.40, 1013.50},
{-484.10, -230.40, 1013.50},
{-487.50, -230.40, 1013.50},
{-490.90, -230.40, 1013.50},
{-494.30, -230.40, 1013.50},
{-497.70, -230.40, 1013.50},
{-501.10, -230.40, 1013.50},
{-504.50, -230.40, 1013.50},
{-507.90, -230.40, 1013.50},
{-506.20, -212.30, 1013.51},
{-502.80, -212.30, 1013.51},
{-499.40, -212.30, 1013.51},
{-496.00, -212.30, 1013.51},
{-492.60, -212.30, 1013.51},
{-489.20, -212.30, 1013.51},
{-485.80, -212.30, 1013.51},
{-482.40, -212.30, 1013.51},
{-479.00, -212.30, 1013.51},
{-475.60, -212.30, 1013.51},
{-475.60, -211.56, 1017.60},
{-479.00, -211.56, 1017.60},
{-482.40, -211.56, 1017.60},
{-485.80, -211.56, 1017.60},
{-489.20, -211.56, 1017.60},
{-492.60, -211.56, 1017.60},
{-496.00, -211.56, 1017.60},
{-499.40, -211.56, 1017.60},
{-502.80, -211.56, 1017.60},
{-506.21, -211.56, 1017.60},
{-475.60, -231.58, 1017.60},
{-480.70, -231.58, 1017.60},
{-484.00, -231.58, 1017.60},
{-487.40, -231.58, 1017.60},
{-490.80, -231.58, 1017.60},
{-494.20, -231.58, 1017.60},
{-497.60, -231.58, 1017.60},
{-501.00, -231.58, 1017.60},
{-504.40, -231.58, 1017.60},
{-507.82, -231.58, 1017.60}
};

new CONamesCriminal[6][] =
{
	"Soldier(1)",
	"Advanced(2)",
	"Hitman(3)",
	"Cool dude(4)",
	"Professional(5)",
	"Master of CO(6)"
};
new CONamesCop[6][] =
{
	"Copper(1)",
	"Advanced(2)",
	"Captian(3)",
	"Professional(4)",
	"Veteran(5)",
	"Copper of the year(6)"
};
new CONamesKills[6][] =
{
	"Killee(1)",
	"Phsycopath(2)",
	"Hitman(3)",
	"The Man(4)",
	"Professional(5)",
	"The Master Killer(6)"
};
new COMapNames[][] =
{
	"Los Santos",
	"San Feirro",
	"Las Venturas",
	"Forest",
	"Desert",
	"LV AIR",
	"LS AIR",
	"Quarry",
	"SF AIR"
};

new TeamNamesCO[3][] =
{
	"No Team",
	"Police",
	"Criminal"
};

//====================[PTP]==============================
#define PTP_MAP_TIME 60*15
#define PTP_MAX_VEHICLES 220

#define NOTEAM 0
#define GOOD 1
#define BAD 2

#define NOCLASS 0
#define PRESIDENT 1
#define VICE 2
#define SECURITY 3
#define POLICE 4
#define TERRORIST 5
#define CIVILIAN 6

#define PTP_LS 0
#define PTP_SF 1
#define PTP_LV 2
#define PTP_DESERT 3

enum PTPPLAYERINFO
{
	Class,
	Kills,
	Deaths,
	Score,
	Money,
	Rank,
	Survives,
	RoundsWon,
	RoundsLost,
	LeadersKilled,
	TimesAsPres,
	AlreadyLeader,
};
new PTPPlayerInfo[MAX_PLAYERS][PTPPLAYERINFO];

new maxPTPvehicles=-1;
enum PTPINFO
{
	Map,
	Timer,
	TimeLeft,
	Vehicles[PTP_MAX_VEHICLES],
	WeapShop,
	pHP,
	pArmor,
	pRefill,
	td_Checked,
    Text:td_BGs[6],
    Text:td_Ts[4],
    Text:td_Pres,
    Text:td_HP,
    Text:td_AR,
    Text:td_Time
};
new PTPInfo[PTPINFO];

new Float:MapBoundsPTP[][] = {
{2980.0908,92.3032,-897.7386,-2766.5320},//Float:x_max,Float:x_min,Float:y_max,Float:y_min
{-1009.0465, -3028.6091, 1790.3651, -859.5109},
{3015.6057,864.8375,3007.8025,534.6819},
{1015.8903, -2991.0779, 3089.2834, 462.0018}
};

new Float:PTPRefillPlace[][] = {
{1231.1309,-1321.4026,14.1349},//ls
{-2102.7881,215.1662,35.2988},//sf
{1999.8982,1544.3666,13.8119},//lv
{-547.5964,2581.1311,53.5156}//desert
};

new Float:PTPHPPlace[][] = {
{1230.3281,-1333.6698,14.1459},//ls
{-2102.0334,210.2823,35.2817},//sf
{2000.4871,1538.6013,13.585},//lv
{-545.0420,2590.9187,53.5156}//desert
};

new Float:PTPArmorPlace[][] = {
{1230.5273,-1347.2106,14.1481},//ls
{-2101.2813,203.0166,35.3047},//sf
{2000.3843,1550.3364,13.603},//lv
{-545.0830,2597.8398,53.5156}//desert
};

new Float:PTPSpawn[][] = {
{
1130.7538,-2036.7667,69.0078,273.5658,//president
1106.9812,-2037.9022,74.4647,304.731,//vice
1131.5322,-2019.8596,69.0006,240.810,//sec
1566.9968,-1691.7092,5.8906,174.590,//police
755.4913,-1358.3733,13.5132,276.438,//terro
2165.5132,-2308.4126,13.5469,318.4400//civi
},
{
-2421.9653,328.8908,35.1719,248.612,//president
-2454.0386,278.2498,35.1719,257.072,//vice
-2410.4714,347.0593,35.1719,216.0258,//sec
-1590.1110,715.4453,-5.2422,254.9397,//police
-2623.8618,1411.2001,7.0938,179.481,//terro
-2733.8083,-326.6478,7.1795,51.287//civi
},
{
1459.4409,2773.6135,10.8203,271.980,//president
1427.7247,2771.2026,14.8203,92.7757,//vice
1459.8234,2795.6697,10.8203,241.27,//sec
2268.5100,2447.0547,3.5313,181.3635,//police
2838.5430,1290.5718,11.3906,73.0885,//terro
1490.3062,687.8079,10.9769,359.075//civi
},
{
-684.7706,930.0165,13.6293,180.0227,//president
-668.7478,962.2421,12.1328,183.6378,//vice
-680.0031,928.5034,12.1328,159.3425,//sec
-1390.7141,2633.5535,55.9844,181.8758,//police
242.8942,1420.8867,10.5852,265.5339,//terro
-269.0757,2676.4368,62.6648,262.8019//civi
}
};

new PTPMapNames[][] =
{
	"Los Santos",
	"San Feirro",
	"Las Venturas",
	"Desert"
};

new PTPClassColors[] =
{
	0xFFFFFFAA,0xFFFF00FF,0xFFFF0000,0x33FF3311,0x375FFF11,0xFF000011,0xFF990011
};

new TeamNamesPTP[][] =
{
	"No Team",
	"President",
	"Vice President",
	"Security",
	"Police",
	"Terrorist",
	"Civilian"
};

new ThePTPRanks[6][] =
{
	"Private",
	"Corporal",
	"Sergeant",
	"Lieutenant",
	"Major",
	"General"
};


new RandomMessagePTP[][] =
{
	"{33FF33}PTP HINT:{FFFFFF} Are you tired of PTP?! Use /lobby to change mode!",
	"{33FF33}PTP HINT:{FFFFFF} Use /myduty to see what your job is!",
	"{FF0000}PTP RULE:{FFFFFF} President and Vice President musn't be in the same vehicle!"
};
new RandomMessagePTPOnline[][] =
{
	"HINT: Are you tired of PTP?! Use /lobby to change mode!",
	"HINT: Use /myduty to see what your job is!",
	"RULE: President and Vice President musn't be in the same vehicle!"
};
//====================[CTF]==============================
#define MAX_CTF_VEHICLES 125

#define NOTEAM 0
#define BLUE 1
#define RED 2

#define LS 0
#define SF 1
#define LV 2
#define FOREST 3
#define DESERT 4
#define MEAT_FAC 5
#define RC_BF 6
#define KICK_STA 7
#define BLOOD 8
#define PLE_DOMES 9

enum CTFPLAYERINFO
{
	Capturing,
	RoundsWon,
	RoundsLost,
	Captures,
	Kills,
	Score,
	Deaths
};
new CTFPlayerInfo[MAX_PLAYERS][CTFPLAYERINFO];

new maxCTFvehicles=-1;
enum CTFINFO
{
	Map,
	Captures[3],
	Vehicles[MAX_CTF_VEHICLES],
	Text:CapturesTD,
	Text:td_BGs[3],
	Text:td_Fracs[2],
	Text:td_Red,
	Text:td_Blue,
	
	Text:td_RedInfo,
	Text:td_BlueInfo
};
new CTFInfo[CTFINFO];

enum FLAGINFO
{
	Object[2],
	State,//0 = at base, 1 = away from base on ground, 2 = being captured
	Area,
	Timer,//return the flag timer
	Text3D:pLabel
};
new CTFFlagInfo[3][FLAGINFO];

enum WEAPCTF
{
	Rocket,
	Golf,
	Knife,
	NiteStick,
	Bat,
	Shovel,
	Pool,
	Katana,
	Chainsaw,
	Dildo,
	Cane,
	Silenced,
	Colt,
	M4,
	Ak,
	Sniper,
	Mp5,
	Rifle,
	Deagle,
	UZI,
	Tec,
	Grenade,
	Shotgun,
	Sawed,
	Spac,
	Molotov,
	gHP,
	gArmor
}
new CTFWeaps[2][WEAPCTF];

//if interior isn't 0, weapons will change
new CTFSpawnInterior[]=
{
	0,0,0,0,0,1,10,14,15,3
};

new Float:MapBoundsCTF[][] = {
{2980.0908,92.3032,-897.7386,-2766.5320},//Float:x_max,Float:x_min,Float:y_max,Float:y_min
{-1309.0465, -3028.6091, 1790.3651, -1459.5109},
{3015.6057,864.8375,3007.8025,534.6819},
{2977.9990, -1189.3513, 631.1843, -871.3196},
{815.8903, -2991.0779, 3089.2834, 462.0018},
{20000.0000, -20000.0000, 20000.0000, -20000.0000},
{20000.0000, -20000.0000, 20000.0000, -20000.0000},
{20000.0000, -20000.0000, 20000.0000, -20000.0000},
{20000.0000, -20000.0000, 20000.0000, -20000.0000},
{20000.0000, -20000.0000, 20000.0000, -20000.0000}
};
new Float:CTFSpawnBlue[][] = {
{0.0, 2631.6309,-1460.8699,22.3118},//ls
{0.0, -2049.1106,-860.0145,32.1719},//sf
{0.0, 2533.9570,2850.6379,10.8203},//lv
{0.0, -184.2405,-193.0391,3.7434},//forest
{0.0, -2243.9919,2368.8445,4.9917},//desert
{0.0, 963.7170, 2176.8127, 1011.0209},//meat factory
{0.0, -975.1157, 1089.6271, 1345.9713}, //rc battlefield
{0.0, -1493.2140, 1629.5022, 1052.5330}, //kickstart
{0.0, -1285.5477, 985.0500, 1038.2426}, //bloodbowl
{0.0, -2663.9041, 1425.7628, 913.4048}//Pleasure Dome
};

new Float:CTFBlueFlagPlace[][] = {
{0.0, 2665.6628,-1438.8698,16.2500},//ls
{0.0, -1962.2142,-826.2441,35.8909},//sf
{0.0, 2581.5425,2827.8870,10.820},//lv
{0.0, -117.1397,-230.6470,1.4219},//forest
{0.0, -2186.0112,2416.3904,5.1777},//desert
{0.0, 939.0276, 2176.0447, 1011.0213},//meat factory
{0.0, -973.8832, 1077.3054, 1345.0012}, //rc battlefield
{0.0, -1493.3790, 1608.2513, 1052.5321}, //kickstart
{0.0, -1284.2618, 994.7136, 1037.2426}, //bloodbowl
{0.0, -2653.4402, 1430.0284, 912.4047}//Pleasure Dome
};

new Float:CTFSpawnRed[][] = {
{0.0, 164.5203,-1874.2493,2.7902},//ls
{0.0, -2684.9099,1380.1439,7.0987},//sf
{0.0, 1059.3007,1011.3964,11.0000},//lv
{0.0, 1885.2893,169.6516,35.9512},//forest
{0.0, 185.6693,1931.0103,17.7716},//desert
{0.0, 963.7701, 2105.7605, 1011.0181},//meat factory
{0.0, -1131.6250, 1029.6638, 1345.7228}, //rc battlefield
{0.0, -1352.0680, 1616.7534, 1052.5269}, //kickstart
{0.0, -1510.7255, 1015.9825, 1038.9821}, //bloodbowl
{0.0, -2656.7559, 1394.6954, 913.4037}//Pleasure Dome
};

new Float:CTFRedFlagPlace[][] = {
{0.0, 153.3623,-1940.7952,3.7734},//ls
{0.0, -2659.3501,1413.8159,27.9688},//sf
{0.0, 1088.4419,1072.1512,10.8359},//lv
{0.0, 1925.1226,159.8209,40.1172},//forest
{0.0, 214.6531,1855.3601,12.9677},//desert
{0.0, 936.4008, 2107.3416, 1011.0201},//meat factory
{0.0, -1131.6665, 1041.6820, 1345.7457}, //rc battlefield
{0.0, -1357.1152, 1609.9359, 1052.5281}, //kickstart
{0.0, -1513.1010, 999.9117, 1037.7213}, //bloodbowl
{0.0, -2675.2231, 1393.2605, 912.4029}//Pleasure Dome
};

new CTFMapNames[][] =
{
	"Los Santos",
	"San Feirro",
	"Las Venturas",
	"Forest",
	"Desert",
	"Meat Factory",
	"RC Battlefield",
	"Kickstart",
	"Bloodbowl",
	"Pleasure Dome"
};

new TeamNamesCTF[3][] =
{
	"No Team",
	"Blue",
	"Red"
};

//====================[VW]==============================
#define VW_MAX_TEAMS 2
#define VW_USA 0
#define VW_VIETNAM 1
#define VW_NEUTRAL 2

new TeamNamesVW[3][] =
{
	"United States",
	"Vietnam",
	"Neutral"
};
new VWZoneTxTCol[3][] =
{
	"~h~~b~",
	"~h~~r~",
	"~h~~g~"
};
new VWZoneLabelCol[3][] =
{
	"{375FFF}",
	"{FF0000}",
	"{33FF33}"
};
new VWTeamCol[3] =
{
	0x375FFFAA,
	0xFF0000AA,
	0x33FF33AA
};
#define VW_MAX_CLASSES 3
#define VW_MEDIC 0
#define VW_SNIPER 1
#define VW_ENGINEER 2

new VW_ClassNames[VW_MAX_CLASSES][] =
{
	"Medic",
	"Sniper",
	"Engineer"
};

#define VW_MAX_TABS 4
#define VW_TAB_DEPLOY 0
#define VW_TAB_CLASS 1
#define VW_TAB_TEAM 2
#define VW_TAB_WEAPS 3
new VW_TabNames[VW_MAX_TABS][] =
{
	" Deploy",
	" Class",
	" Team",
	" Weaps"
};

#define VW_MAX_WEAPS 4
#define VW_WEAPS_PRIMARY 0
#define VW_WEAPS_SECONDARY 1
#define VW_WEAPS_THROWN 2
#define VW_WEAPS_MELEE 3

#define VW_MAX_WEAPS_STATS 18
new VW_WeapTypeNames[VW_MAX_TABS][] =
{
	"Primary",
	"Secondary",
	"Thrown",
	"Meele"
};

#define VW_MAX_OBJECTIVES_TXT 4
enum VWPLAYERINFO
{
	DeployIn, //time in secs
	RoundsWon,
	RoundsLost,
	Kills,
	Score,
	Deaths,
	Deployed,
	Objective, //where is spawning
	Class,
	Tab,
	Rank,
	LastLoad,
	LastCreate,

	PlayerText: R_Name,//rank name
	PlayerText: R_Score,//score?

	PlayerText: P_Score,//givescore txt..
	
	PlayerText: L_Expl,//team, zone, class
	PlayerText: L_Spawn_In,
	PlayerText: L_Class_Pic[VW_MAX_CLASSES],
	PlayerText: L_Class_Guns[VW_MAX_CLASSES],
	
	PlayerText: L_Weaps_Name[VW_MAX_WEAPS],
	PlayerText: L_Weaps_Ammo[VW_MAX_WEAPS]
};
new VWPlayerInfo[MAX_PLAYERS][VWPLAYERINFO];

new VWWeaponInfo[MAX_PLAYERS][VW_MAX_CLASSES][VW_MAX_WEAPS];


#define VW_MAX_RANKS 6
new VWRankNames[VW_MAX_RANKS][] =
{
	"Private",
	"Corporal",
	"Sergeant",
	"Lieutenant",
	"Major",
	"General"
};
new VWRankScores[VW_MAX_RANKS] =
{
	0,
	300,
	3000,
	10000,
	50000,
	300000
};

#define MAX_VW_VEHICLES 100
enum VWINFO
{
	Map,
    changeScore, //allow reduction of scores
	Text: Rank_BG,

	Text: ObjTXT,
	Text: Score_BG,
	Text: Score[VW_MAX_TEAMS], //usa 500, viet 500
	tScore[VW_MAX_TEAMS], //usa 500, viet 500
	
	Text: L_BG,
	Text: L_Spawn,
	Text: L_Class_Names,
	Text: L_Tab[VW_MAX_TABS],
	Text: L_Tab_A[VW_MAX_TABS],
	Text: L_Team_BG[VW_MAX_TEAMS],
	Text: L_Team_Name[VW_MAX_TEAMS],
	Text: L_Class_BG[VW_MAX_CLASSES],
	Text: L_Class_BG_A[VW_MAX_CLASSES],
	
	Text: L_Weaps_Type[VW_MAX_WEAPS],
	Text: L_Weaps_Left[VW_MAX_WEAPS],
	Text: L_Weaps_Right[VW_MAX_WEAPS],
	Text: L_Weaps_Img[VW_MAX_WEAPS_STATS],

	Text: L_Deploy_BG[VW_MAX_OBJECTIVES_TXT],
	Text: L_Deploy_BG_A[VW_MAX_OBJECTIVES_TXT],
	Text: L_Deploy_Name[VW_MAX_OBJECTIVES_TXT],
	L_Deply_USA[VW_MAX_OBJECTIVES_TXT],
	L_Deply_VIETNAM[VW_MAX_OBJECTIVES_TXT]
};
new VWInfo[VWINFO];

enum VWVEHICLES
{
	Exists,
	ID,
	Team,
	posWorld
};
new VWVehicles[MAX_VW_VEHICLES][VWVEHICLES];

#define VW_MOUNT 0
new VWMapNames[][] =
{
	"Mountain Side"
};
new VW_ClassSkins[VW_MAX_TEAMS][VW_MAX_CLASSES] =
{
	{287, 247, 179},
	{122, 123, 121}
};

new Float:VWWeaponCoords[][] =
{
	{418.0, 253.0, 65.0, 85.0, 1.0, 321.0, 180.0, 1.5},
	{418.0, 253.0, 65.0, 85.0, 1.0, 321.0, 180.0, 3.2},
	{413.0, 253.0, 65.0, 85.0, 1.0, 1.0, 180.0, 2.5},
	{413.0, 245.0, 65.0, 85.0, 1.0, 1.0, 180.0, 2.5},
	
	{416.0, 174.0, 65.0, 85.0, 1.0, 1.0, 180.0, 1.0},
	{416.0, 174.0, 65.0, 85.0, 1.0, 1.0, 180.0, 1.0},
	{416.0, 174.0, 65.0, 85.0, 1.0, 1.0, 180.0, 1.0},
	
	{431.0, 225.0, 65.0, 65.0, 1.0, 1.0, 0.0, 1.0},
	{433.0, 223.0, 65.0, 55.0, 1.0, 1.0, 0.0, 1.0},
	{431.0, 225.0, 65.0, 65.0, 1.0, 1.0, 0.0, 1.0},
	
	{423.0, 131.0, 65.0, 85.0, 1.0, 1.0, 180.0, 2.4},
	{423.0, 131.0, 65.0, 85.0, 1.0, 1.0, 180.0, 2.4},
	{423.0, 131.0, 65.0, 85.0, 1.0, 1.0, 180.0, 2.2},
	{423.0, 131.0, 65.0, 85.0, 1.0, 1.0, 180.0, 2.2},
	{423.0, 133.0, 65.0, 85.0, 1.0, 1.0, 180.0, 2.2},
	{413.0, 137.0, 65.0, 85.0, 1.0, 1.0, 180.0, 2.2},
	{410.0, 131.0, 65.0, 85.0, 1.0, 1.0, 180.0, 2.5},
	{433.0, 131.0, 65.0, 85.0, 25.0, 1.0, 170.0, 2.5}
};

new VWWeaponStats[][] =
{
	{VW_WEAPS_MELEE, WEAPON_KNIFE, 335},
	{VW_WEAPS_MELEE, WEAPON_KATANA, 339},
	{VW_WEAPS_MELEE, WEAPON_CHAINSAW, 341},
	{VW_WEAPS_MELEE, WEAPON_FIREEXTINGUISHER, 366},

	{VW_WEAPS_SECONDARY, WEAPON_DEAGLE, 348},
	{VW_WEAPS_SECONDARY, WEAPON_SILENCED, 347},
	{VW_WEAPS_SECONDARY, WEAPON_COLT45, 346},

	{VW_WEAPS_THROWN, WEAPON_TEARGAS, 343},
	{VW_WEAPS_THROWN, WEAPON_MOLTOV, 344},
	{VW_WEAPS_THROWN, WEAPON_GRENADE, 342},

	{VW_WEAPS_PRIMARY, WEAPON_SNIPER, 358},
	{VW_WEAPS_PRIMARY, WEAPON_RIFLE, 357},
	{VW_WEAPS_PRIMARY, WEAPON_AK47, 355},
	{VW_WEAPS_PRIMARY, WEAPON_M4, 356},
	{VW_WEAPS_PRIMARY, WEAPON_SHOTGUN, 349},
	{VW_WEAPS_PRIMARY, WEAPON_SHOTGSPA, 351},
	{VW_WEAPS_PRIMARY, WEAPON_FLAMETHROWER, 361},
	{VW_WEAPS_PRIMARY, WEAPON_ROCKETLAUNCHER, 359}
};


new VW_MedicWeaps[VW_MAX_RANKS][VW_MAX_WEAPS][] =
{
	{
		{WEAPON_RIFLE, WEAPON_AK47, WEAPON_M4, WEAPON_SHOTGUN, WEAPON_SHOTGSPA},
		{WEAPON_DEAGLE, WEAPON_SILENCED, 0, 0, 0},
		{WEAPON_GRENADE, WEAPON_MOLTOV, WEAPON_TEARGAS, 0, 0},
		{WEAPON_KNIFE, WEAPON_KATANA, WEAPON_CHAINSAW, 0, 0}
	},
	{
		{WEAPON_RIFLE, WEAPON_AK47, WEAPON_M4, WEAPON_SHOTGUN, WEAPON_SHOTGSPA},
		{WEAPON_DEAGLE, WEAPON_SILENCED, 0, 0, 0},
		{WEAPON_GRENADE, WEAPON_MOLTOV, WEAPON_TEARGAS, 0, 0},
		{WEAPON_KNIFE, WEAPON_KATANA, WEAPON_CHAINSAW, 0, 0}
	},
	{
		{WEAPON_RIFLE, WEAPON_AK47, WEAPON_M4, WEAPON_SHOTGUN, WEAPON_SHOTGSPA},
		{WEAPON_DEAGLE, WEAPON_SILENCED, 0, 0, 0},
		{WEAPON_GRENADE, WEAPON_MOLTOV, WEAPON_TEARGAS, 0, 0},
		{WEAPON_KNIFE, WEAPON_KATANA, WEAPON_CHAINSAW, 0, 0}
	},
	{
		{WEAPON_RIFLE, WEAPON_AK47, WEAPON_M4, WEAPON_SHOTGUN, WEAPON_SHOTGSPA},
		{WEAPON_DEAGLE, WEAPON_SILENCED, 0, 0, 0},
		{WEAPON_GRENADE, WEAPON_MOLTOV, WEAPON_TEARGAS, 0, 0},
		{WEAPON_KNIFE, WEAPON_KATANA, WEAPON_CHAINSAW, 0, 0}
	},
	{
		{WEAPON_RIFLE, WEAPON_AK47, WEAPON_M4, WEAPON_SHOTGUN, WEAPON_SHOTGSPA},
		{WEAPON_DEAGLE, WEAPON_SILENCED, 0, 0, 0},
		{WEAPON_GRENADE, WEAPON_MOLTOV, WEAPON_TEARGAS, 0, 0},
		{WEAPON_KNIFE, WEAPON_KATANA, WEAPON_CHAINSAW, 0, 0}
	},
	{
		{WEAPON_RIFLE, WEAPON_AK47, WEAPON_M4, WEAPON_SHOTGUN, WEAPON_SHOTGSPA},
		{WEAPON_DEAGLE, WEAPON_SILENCED, 0, 0, 0},
		{WEAPON_GRENADE, WEAPON_MOLTOV, WEAPON_TEARGAS, 0, 0},
		{WEAPON_KNIFE, WEAPON_KATANA, WEAPON_CHAINSAW, 0, 0}
	}
};
new VW_SniperWeaps[VW_MAX_RANKS][VW_MAX_WEAPS][] =
{
	{
		{WEAPON_SNIPER, WEAPON_RIFLE, WEAPON_SHOTGUN, 0, 0},
		{WEAPON_DEAGLE, WEAPON_SILENCED, WEAPON_COLT45, 0, 0},
		{WEAPON_GRENADE, WEAPON_MOLTOV, WEAPON_TEARGAS, 0, 0},
		{WEAPON_KATANA, WEAPON_KNIFE, WEAPON_CHAINSAW, 0, 0}
	},
	{
		{WEAPON_SNIPER, WEAPON_RIFLE, WEAPON_SHOTGUN, 0, 0},
		{WEAPON_DEAGLE, WEAPON_SILENCED, WEAPON_COLT45, 0, 0},
		{WEAPON_GRENADE, WEAPON_MOLTOV, WEAPON_TEARGAS, 0, 0},
		{WEAPON_KATANA, WEAPON_KNIFE, WEAPON_CHAINSAW, 0, 0}
	},
	{
		{WEAPON_SNIPER, WEAPON_RIFLE, WEAPON_SHOTGUN, 0, 0},
		{WEAPON_DEAGLE, WEAPON_SILENCED, WEAPON_COLT45, 0, 0},
		{WEAPON_GRENADE, WEAPON_MOLTOV, WEAPON_TEARGAS, 0, 0},
		{WEAPON_KATANA, WEAPON_KNIFE, WEAPON_CHAINSAW, 0, 0}
	},
	{
		{WEAPON_SNIPER, WEAPON_RIFLE, WEAPON_SHOTGUN, 0, 0},
		{WEAPON_DEAGLE, WEAPON_SILENCED, WEAPON_COLT45, 0, 0},
		{WEAPON_GRENADE, WEAPON_MOLTOV, WEAPON_TEARGAS, 0, 0},
		{WEAPON_KATANA, WEAPON_KNIFE, WEAPON_CHAINSAW, 0, 0}
	},
	{
		{WEAPON_SNIPER, WEAPON_RIFLE, WEAPON_SHOTGUN, 0, 0},
		{WEAPON_DEAGLE, WEAPON_SILENCED, WEAPON_COLT45, 0, 0},
		{WEAPON_GRENADE, WEAPON_MOLTOV, WEAPON_TEARGAS, 0, 0},
		{WEAPON_KATANA, WEAPON_KNIFE, WEAPON_CHAINSAW, 0, 0}
	},
	{
		{WEAPON_SNIPER, WEAPON_RIFLE, WEAPON_SHOTGUN, 0, 0},
		{WEAPON_DEAGLE, WEAPON_SILENCED, WEAPON_COLT45, 0, 0},
		{WEAPON_GRENADE, WEAPON_MOLTOV, WEAPON_TEARGAS, 0, 0},
		{WEAPON_KATANA, WEAPON_KNIFE, WEAPON_CHAINSAW, 0, 0}
	}
};
new VW_EngineerWeaps[VW_MAX_RANKS][VW_MAX_WEAPS][] =
{
	{
		{WEAPON_ROCKETLAUNCHER, WEAPON_FLAMETHROWER, WEAPON_SHOTGSPA, WEAPON_M4, WEAPON_AK47},
		{WEAPON_DEAGLE, WEAPON_SILENCED, 0, 0, 0},
		{WEAPON_GRENADE, WEAPON_MOLTOV, WEAPON_TEARGAS, 0, 0},
		{WEAPON_FIREEXTINGUISHER, WEAPON_KNIFE, WEAPON_KATANA, WEAPON_CHAINSAW, 0}
	},
	{
		{WEAPON_ROCKETLAUNCHER, WEAPON_FLAMETHROWER, WEAPON_SHOTGSPA, WEAPON_M4, WEAPON_AK47},
		{WEAPON_DEAGLE, WEAPON_SILENCED, 0, 0, 0},
		{WEAPON_GRENADE, WEAPON_MOLTOV, WEAPON_TEARGAS, 0, 0},
		{WEAPON_FIREEXTINGUISHER, WEAPON_KNIFE, WEAPON_KATANA, WEAPON_CHAINSAW, 0}
	},
	{
		{WEAPON_ROCKETLAUNCHER, WEAPON_FLAMETHROWER, WEAPON_SHOTGSPA, WEAPON_M4, WEAPON_AK47},
		{WEAPON_DEAGLE, WEAPON_SILENCED, 0, 0, 0},
		{WEAPON_GRENADE, WEAPON_MOLTOV, WEAPON_TEARGAS, 0, 0},
		{WEAPON_FIREEXTINGUISHER, WEAPON_KNIFE, WEAPON_KATANA, WEAPON_CHAINSAW, 0}
	},
	{
		{WEAPON_ROCKETLAUNCHER, WEAPON_FLAMETHROWER, WEAPON_SHOTGSPA, WEAPON_M4, WEAPON_AK47},
		{WEAPON_DEAGLE, WEAPON_SILENCED, 0, 0, 0},
		{WEAPON_GRENADE, WEAPON_MOLTOV, WEAPON_TEARGAS, 0, 0},
		{WEAPON_FIREEXTINGUISHER, WEAPON_KNIFE, WEAPON_KATANA, WEAPON_CHAINSAW, 0}
	},
	{
		{WEAPON_ROCKETLAUNCHER, WEAPON_FLAMETHROWER, WEAPON_SHOTGSPA, WEAPON_M4, WEAPON_AK47},
		{WEAPON_DEAGLE, WEAPON_SILENCED, 0, 0, 0},
		{WEAPON_GRENADE, WEAPON_MOLTOV, WEAPON_TEARGAS, 0, 0},
		{WEAPON_FIREEXTINGUISHER, WEAPON_KNIFE, WEAPON_KATANA, WEAPON_CHAINSAW, 0}
	},
	{
		{WEAPON_ROCKETLAUNCHER, WEAPON_FLAMETHROWER, WEAPON_SHOTGSPA, WEAPON_M4, WEAPON_AK47},
		{WEAPON_DEAGLE, WEAPON_SILENCED, 0, 0, 0},
		{WEAPON_GRENADE, WEAPON_MOLTOV, WEAPON_TEARGAS, 0, 0},
		{WEAPON_FIREEXTINGUISHER, WEAPON_KNIFE, WEAPON_KATANA, WEAPON_CHAINSAW, 0}
	}
};

new VW_MedicAmmo[VW_MAX_RANKS][VW_MAX_WEAPS][] =
{
	{
		{90, 250, 250, 120, 150},
		{120, 90, 0, 0, 0},
		{7, 10, 15, 0, 0},
		{1, 1, 1, 1, 1}
	},
	{
		{90, 250, 250, 120, 150},
		{120, 90, 0, 0, 0},
		{7, 10, 15, 0, 0},
		{1, 1, 1, 1, 1}
	},
	{
		{90, 250, 250, 120, 150},
		{120, 90, 0, 0, 0},
		{7, 10, 15, 0, 0},
		{1, 1, 1, 1, 1}
	},
	{
		{90, 250, 250, 120, 150},
		{120, 90, 0, 0, 0},
		{7, 10, 15, 0, 0},
		{1, 1, 1, 1, 1}
	},
	{
		{90, 250, 250, 120, 150},
		{120, 90, 0, 0, 0},
		{7, 10, 15, 0, 0},
		{1, 1, 1, 1, 1}
	},
	{
		{90, 250, 250, 120, 150},
		{120, 90, 0, 0, 0},
		{7, 10, 15, 0, 0},
		{1, 1, 1, 1, 1}
	}
};
new VW_SniperAmmo[VW_MAX_RANKS][VW_MAX_WEAPS][] =
{
	{
		{150, 250, 60, 0, 0},
		{130, 100, 200, 0, 0},
		{2, 2, 8, 0, 0},
		{1, 1, 1, 1, 1}
	},
	{
		{150, 250, 60, 0, 0},
		{130, 100, 200, 0, 0},
		{2, 2, 8, 0, 0},
		{1, 1, 1, 1, 1}
	},
	{
		{150, 250, 60, 0, 0},
		{130, 100, 200, 0, 0},
		{2, 2, 8, 0, 0},
		{1, 1, 1, 1, 1}
	},
	{
		{150, 250, 60, 0, 0},
		{130, 100, 200, 0, 0},
		{2, 2, 8, 0, 0},
		{1, 1, 1, 1, 1}
	},
	{
		{150, 250, 60, 0, 0},
		{130, 100, 200, 0, 0},
		{2, 2, 8, 0, 0},
		{1, 1, 1, 1, 1}
	},
	{
		{150, 250, 60, 0, 0},
		{130, 100, 200, 0, 0},
		{2, 2, 8, 0, 0},
		{1, 1, 1, 1, 1}
	}
};
new VW_EngineerAmmo[VW_MAX_RANKS][VW_MAX_WEAPS][] =
{
	{
		{15, 5000, 210, 150, 150},
		{200, 70, 0, 0, 0},
		{5, 6, 15, 0, 0},
		{500, 1, 1, 1, 1}
	},
	{
		{15, 5000, 210, 150, 150},
		{200, 70, 0, 0, 0},
		{5, 6, 15, 0, 0},
		{500, 1, 1, 1, 1}
	},
	{
		{15, 5000, 210, 150, 150},
		{200, 70, 0, 0, 0},
		{5, 6, 15, 0, 0},
		{500, 1, 1, 1, 1}
	},
	{
		{15, 5000, 210, 150, 150},
		{200, 70, 0, 0, 0},
		{5, 6, 15, 0, 0},
		{500, 1, 1, 1, 1}
	},
	{
		{15, 5000, 210, 150, 150},
		{200, 70, 0, 0, 0},
		{5, 6, 15, 0, 0},
		{500, 1, 1, 1, 1}
	},
	{
		{15, 5000, 210, 150, 150},
		{200, 70, 0, 0, 0},
		{5, 6, 15, 0, 0},
		{500, 1, 1, 1, 1}
	}
};

#define VW_CAPTURE_TIME 15
#define VW_MAX_OBJECTIVES 7
#define VW_MAX_OBJ_RANDS 6
enum VWOBJECTIVES
{
	Exists,
	Name[5],
	Team,
	Type,// 0 = no label and it doesnt show
	State,//state 1 =
	sColor,//change color on txtd
	Object,
	Area,
	cTime,//capture time
	Text3D:pLabel,//capture area
	Float: posX,
	Float: posY,
	Float: posZ,
	posWorld,
	posInterior,
	Float: randE[VW_MAX_OBJ_RANDS],//exist
	Float: randX[VW_MAX_OBJ_RANDS],
	Float: randY[VW_MAX_OBJ_RANDS],
	Float: randZ[VW_MAX_OBJ_RANDS],
	Float: randA[VW_MAX_OBJ_RANDS],

	Float: camX,//cam pos
	Float: camY,
	Float: camZ,
	Float: campX,//cam pos playerpos
	Float: campY,
	Float: campZ
};
new VWObjectiveInfo[VW_MAX_OBJECTIVES][VWOBJECTIVES];

#define MAX_CLASS_ACTIONS MAX_PLAYERS
#define CLASS_ACTION_HEAL 0
#define CLASS_ACTION_AMMO 1

enum VWCLASSACTION
{
	Exists,
	Team,
	Player,
	Type,// 0 = no label and it doesnt show
	Area,
	Pickup,
	Text3D:pLabel
};
new VWClassAction[MAX_CLASS_ACTIONS][VWCLASSACTION];

//====================[GK]==============================
new maxGKvehs=-1;
#define MAX_GK_VEHICLES 40
#define GK_MIN_PLAYERS 1
#define GK_MAP_TIME (60*7)

enum GKPLAYERINFO
{
	Holding,
	CaseTime,
	RoundsWon,
	Kills,
	Score,
	Money,
	Deaths,
	PlayerText:pTime
};
new GKPlayerInfo[MAX_PLAYERS][GKPLAYERINFO];

enum GKINFO
{
	Timer,
	TimeLeft,
	MapState,
	CaseState,
	PickUp,
	Vehicles[MAX_GK_VEHICLES],
	Text:td_pW,
	Text:td_pWin,
	Text:td_pT,
	Text:td_pTime,
	Text:td_BG[2],

	Text:td_yT,
	Text:td_mT,
	Text:td_mTime,
	
	Float:cX,
	Float:cY,
	Float:cZ,
	
	Float:sX,
	Float:sY,
	Float:sZ,
	Float:sA,

	Float:gX,
	Float:gY
};
new GKInfo[GKINFO];

enum WEAPGK
{
	Rocket,
	Golf,
	Knife,
	NiteStick,
	Bat,
	Shovel,
	Pool,
	Katana,
	Chainsaw,
	Dildo,
	Cane,
	Silenced,
	Colt,
	M4,
	Ak,
	Sniper,
	Mp5,
	Rifle,
	Deagle,
	UZI,
	Tec,
	Grenade,
	Shotgun,
	Sawed,
	Spac,
	Molotov,
	gHP,
	gArmor
}
new GKWeaps[1][WEAPGK];
//====================[ZO]==============================
#define MAX_ZO_MAPS 150
#define MAX_ZO_OBJECTS 1000
enum ZOPLAYERINFO
{
	Chosen,
	RoundsWon,
	RoundsLost,
	Kills,
	Score,
	Money,
	Deaths
};
new ZOPlayerInfo[MAX_PLAYERS][ZOPLAYERINFO];

enum ZOINFO
{
	Map,
	Timer,
	NoZombieCheck,
	Interior,
	Floor,//0=original floor? or 1=created object
	Objects[MAX_ZO_OBJECTS],
	Float:hX,
	Float:hY,
	Float:hZ,
	Float:zX,
	Float:zY,
	Float:zZ,
	MapTime,
	TimeLeft,
    Text:td_BGs[3],
    Text:td_Ts[2],
    Text:td_H,
    Text:td_Time
};
new ZOInfo[ZOINFO];

new TeamNamesZO[3][] =
{
	"No Team",
	"Human",
	"Zombie"
};

#define NOTEAM 0
#define HUMAN 1
#define ZOMBIE 2

//====================[RP]==================================
#define RP_MAX_NAME_LEN 30
#define RP_MAX_INTERIORS 400
#define RP_MAX_VEHICLES 200
#define RP_MAX_ITEMS 15000
#define RP_MAX_DEADS 70
#define RP_MAX_BAGS 300
#define RP_MAX_FUELS 150
#define RP_MAX_NOTES 150

//plus 2 because we increased 2 at SELECT_MENU_OPTIONS
#define RP_MAX_BAG_ITEMS SELECT_MENU_OPTIONS-2

#define RP_BAG_SMALL 0
#define RP_BAG_BIG 1

#define RP_ATTACHMENT_INDEX 2

#define RP_BAG_SMALL_MAX 20
#define RP_BAG_BIG_MAX 40

#define RP_HEALTHY 0
#define RP_BROKEN_LEG 1

#define RP_TYPE_ITEM 0
#define RP_TYPE_BAGS 1
#define RP_TYPE_DEAD 2
#define RP_ITEM_BAG 3
#define RP_TYPE_NOTE 4

#define RP_ITEM_FROM_BAG 0
#define RP_ITEM_FROM_VEH 1
#define RP_ITEM_FROM_GROUND 2

enum RPPLAYERINFO
{
	FirstTime,
	rpfName[RP_MAX_NAME_LEN],
	rplName[RP_MAX_NAME_LEN],
	SkinID,
	BagType,
	BagItems[RP_MAX_BAG_ITEMS],
	BagItemsValue[RP_MAX_BAG_ITEMS],
	SelectedItem,
	Float:dPosX,
	Float:dPosY,
	Float:dPosZ,
	Float:dAngle,
	dPosInt,
	dPosWorld,
	Timer,
	isRepairing,
	isFueling,
	Money,
	AliveFor,
	HPState,
	TryRunning,
	Freq,
	Float:Thirst,
	Float:Hunger,
	Float:Health,
	Text3D:NameLabel,
	PlayerText:selItem,
	PlayerText:rptName,
	PlayerText:p_HP,
	PlayerText:p_TH,
	PlayerText:p_HU,
	PlayerText:p_CA,
	PlayerText:p_AL,
	selWeap[14],// = weapon id
	selWeapID[14]// = selected Iteam???
};
new RPPlayerInfo[MAX_PLAYERS][RPPLAYERINFO];

enum INTERIORS
{
	Exists,
	iE,//interior exists
	iPosX,
	iPosY,
    iPosZ,
    iAngle,
    iInt,
    iWorld,
    iObj,
    Text3D:iTXT,
	oE,//outside exits
    oPosX,
	oPosY,
    oPosZ,
    oAngle,
    oInt,
    oWorld,
    oObj,
    Text3D:oTXT
};
new RPInterior[RP_MAX_INTERIORS][INTERIORS];

enum RPVEHICLES
{
	Exists,
	ID,
	rID,//primery key id
	Plate[10],
	Model,
	Health,
	Fuel,
	Color[2],
	
	cPosX,
	cPosY,
	cPosZ,
	cAngle,

	Panels,
	Doors,
	Lights,
	Tires,
	BagItems[RP_MAX_BAG_ITEMS],
	BagItemsValue[RP_MAX_BAG_ITEMS]
};
new RPVehicles[RP_MAX_VEHICLES][RPVEHICLES];


new RP_bic []=  {481,509,510,571};
new RP_small []=  {441,448,457,461,462,463,464,465,468,485,501,521,522,523,530,531,539,
	 564,572,574,581,583,586,594,606,607,608,610,611};
new RP_med []=  {400,401,402,404,405,410,411,412,415,419,420,421,422,425,426,429,434,436,
	 438,439,440,442,445,446,447,451,458,460,466,467,469,473,474,475,477,478,
	 479,480,486,491,492,493,494,496,500,502,503,504,506,507,516,517,518,525,
	 526,527,529,533,534,535,536,540,541,542,543,545,546,547,549,550,551,552,
	 555,558,559,560,561,562,565,566,567,568,575,576,580,585,587,589,596,597,
	 598,600,602,603,604,605};
new RP_big []=  {409,413,417,418,430,437,444,452,459,470,472,476,482,483,484,487,488,
	 489,490,495,497,505,511,512,513,519,520,528,532,554,556,557,573,578,
	 579,582,584,588,593,595,599,601};
new RP_huge []=  {403,406,407,408,414,416,423,427,428,431,432,433,435,443,449,450,453,
	 454,455,456,498,499,508,514,515,524,537,538,544,548,553,563,570,577,
	 590,591,592,609};

enum RPBAGSINFO
{
	Exists,
	Order,
	Objects,
	Type,
	Text3D:Label,
	cPosX,
	cPosY,
	Float:cPosZ,
	cWorld,
	cInt,
	BagItems[RP_MAX_BAG_ITEMS],
	BagItemsValue[RP_MAX_BAG_ITEMS]
}
new RPBags[RP_MAX_BAGS][RPBAGSINFO];

enum RPFUELSINFO
{
	Exists,
	Vehicle,
	Text3D:Label,
	cPosX,
	cPosY,
	cPosZ,
	cWorld,
	cInt
}
new RPFuels[RP_MAX_FUELS][RPFUELSINFO];

enum RPDEADINFO
{
	Exists,
	Order,
	Money,
	Objects,
	Text3D:Label,
	cPosX,
	cPosY,
	Float:cPosZ,
	cWorld,
	cInt
}
new RPDeads[RP_MAX_DEADS][RPDEADINFO];

enum RPNOTESINFO
{
	Exists,
	Order,
	cPosX,
	cPosY,
	Float:cPosZ,
	cWorld,
	cInt,
	Note[70],
	Object,
	Text3D:Label
}
new RPNotes[RP_MAX_NOTES][RPNOTESINFO];

enum RPITEMSINFO
{
	Exists,
	ObjectID,//id of object...
	Model,
	Value,
	Text3D:Label,//example: press N to take 'M4', etc..

	cPosX,
	cPosY,
	Float:cPosZ,
	cWorld,
	cInt,
	cGround
}
new RPItems[RP_MAX_ITEMS][RPITEMSINFO];

//item types
#define FOOD 0
#define BOTTLE 1
#define WEAPON 2
#define BACKPACK 3
#define GAS_CAN 4
#define VEH_REPAIR 5
#define HEALTH_PACK 6
#define RP_MAP 7
#define RP_RADIO 8
#define AMMO 9

//ammo types
#define A_SHOTGUN 0
#define A_PISTOL 1
#define A_SNIPER 2
#define A_RIFLE 3
#define A_AK47 4
#define A_M4 5

//weapon types
#define MELEE 1
#define PISTOLS 2
#define RIFLE 3
#define EXPLOSIVE 8
#define CAMERA 9
#define PARACHUTE 10
#define GOGGLES 11

enum ITEMINFO
{
	Type,
	ID,
	Amount,
    Model,
    Name[20],
    Float:prX,
    Float:prY,
    Float:prZ,
    Float:offSet
}
new RPItemInfo[][ITEMINFO] =
{
{WEAPON, WEAPON_GOLFCLUB, 1, 333, "Golf Club",90.0000, 361.0, 0.0000, 0.0},
{WEAPON, WEAPON_NITESTICK, 1, 334, "Nite Stick",90.0000, 361.0, 0.0000, 0.0},
{WEAPON, WEAPON_KNIFE, 1, 335, "Knife",90.0000, 361.0, 0.0000, 0.0},
{WEAPON, WEAPON_BAT, 1, 336, "Bat",90.0000, 361.0, 0.0000, 0.0},
{WEAPON, WEAPON_SHOVEL, 1, 337, "Shovel",196.0000, 84.0000, 361.0, 0.0},
{WEAPON, WEAPON_KATANA, 1, 339, "Katana",90.0000, 361.0, 0.0000, 0.0},
{WEAPON, WEAPON_GRENADE, 1, 342, "Grenade",90.0000, 361.0, 0.0000, 0.0},
{WEAPON, WEAPON_MOLTOV, 1, 344, "Molotov",90.0000, 361.0, 0.0000, 0.0},
{WEAPON, WEAPON_DEAGLE, 7, 348, "Pistol",90.0000, 361.0, 0.0000, 0.0},
{WEAPON, WEAPON_SHOTGUN, 8, 349, "Shotgun",82.0000, -47.0000, 361.0},
{WEAPON, WEAPON_AK47, 30, 355, "AK-47",82.0000, -47.0000, 361.0, 0.0},
{WEAPON, WEAPON_M4, 30, 356, "M4",82.0000, -47.0000, 361.0, 0.1},
{WEAPON, WEAPON_RIFLE, 10, 357, "Rifle",82.0000, -47.0000, 361.0, 0.0},
{WEAPON, WEAPON_SNIPER, 15, 358, "Sniper",82.0000, -47.0000, 361.0, 0.1},
{WEAPON, WEAPON_CAMERA, 1000, 367, "Camera",0.0000,0.0000, 361.0, 0.02},
{WEAPON, 44, 1, 368, "Goggles",0.0000, 90.0000, 361.0, 0.12},
{FOOD, 0, 40, 1582, "Food",0.0000, 0.0000, 361.0, 0.0},
{FOOD, 0, 40, 2866, "Food",0.0000, 0.0000, 361.0, 0.02},
{FOOD, 0, 40, 2861, "Food",0.0000, 0.0000, 361.0, 0.0},
{FOOD, 0, 40, 2663, "Food",0.0000, 0.0000, 361.0, 0.2},
{FOOD, 0, 40, 2867, "Food",0.0000, 0.0000, 361.0, 0.02},
{BOTTLE, 0, 20, 1484, "Bottle",-111.0000, -19.0000, 361.0, 0.08},
{BOTTLE, 0, 20, 2958, "Bottle",90.0000, 361.0, 0.0000, 0.04},
{BACKPACK, 0, 0, 3026, "Backpack Medium", 273.0000, 361.0, 0.0000, -0.02},
{BACKPACK, 0, 0, 1550, "Backpack Big", 0.0000, 0.0000, 361.0, 0.38},
{GAS_CAN, 0, 40, 1650, "Gas Can", 0.0000, 0.0000, 361.0, 0.38},
{VEH_REPAIR, 0, 300, 18633, "Vehicle Repair", 0.0000, 90.0000, 361.0, 0.0},
{HEALTH_PACK, 0, 60, 1240, "Med Kit",90.0000, 361.0, 0.0000, 0.0},
{RP_RADIO, 0, 0, 330, "Radio",90.0000, 361.0, 0.0000, 0.03},
{RP_MAP, 0, 0, 19165, "Map", 0.0000, 0.0000, 361.0, 0.0},
{AMMO, A_AK47, 40, 2041, "AK 47 Ammo", 0.0000, 0.0000, 361.0, 0.2025},
{AMMO, A_M4, 40, 2040, "M4 Ammo", 0.0000, 0.0000, 361.0, 0.2025},
{AMMO, A_RIFLE, 15, 2039, "Rifle Ammo", 0.0000, 0.0000, 361.0, 0.2025},
{AMMO, A_SNIPER, 20, 2039, "Sniper Ammo", 0.0000, 0.0000, 361.0, 0.2025},
{AMMO, A_PISTOL, 25, 2038, "Pistol Ammo", 0.0000, 0.0000, 361.0, 0.2025},
{AMMO, A_SHOTGUN, 25, 2358, "Shotgun Ammo", 0.0000, 0.0000, 361.0, 0.2025}
};

enum ITEMATTACHINFO
{
	Type,
    Model,
    Bone,
	Float:pOX,
	Float:pOY,
	Float:pOZ,
	Float:pRX,
	Float:pRY,
	Float:pRZ,
	Float:pSX,
	Float:pSY,
	Float:pSZ
}
new RPItemAttachInfo[][ITEMATTACHINFO] =
{
{BOTTLE, 1484, 6, 0.014999, 0.006002, 0.064001, -3.199918, 32.500026, -12.999999, 0.818997, 0.762000, 0.685998},
{GAS_CAN, 1650, 6, 0.083999, -0.007997, -0.003999, 163.900070, -115.299903, 158.199951, 1.000000, 1.000000, 1.000000},
{VEH_REPAIR, 18633, 6, 0.049998, 0.018999, 0.032999, 73.000007, 174.500030, -6.999997, 1.000000, 1.000000, 1.000000},
{HEALTH_PACK, 1240, 6, 0.060998, -0.016997, 0.035000, 14.600121, -117.099967, 77.699996, 0.614000, 0.608999, 0.594999},
{RP_MAP, 19165, 6, 0.135999, 0.032000, 0.097999, -66.400001, -11.699935, -12.299995, 0.154999, 0.107000, 0.640000},
{FOOD, 2702, 6, 0.086998, -0.004997, 0.082000, -106.999992, 1.400024, 168.500045, 1.000000, 1.000000, 1.000000}
};


enum RPINFO
{
	HideMap,
	Text:rpfName,
	Text:rplName,
	Text:rp_Map,
	Text:TD_Time,
	Text:StatsBackground,
	Text:DarkScreen,
	Text:Figures[6]
};
new RPInfo[RPINFO];

new Float:RPRandomSpawns[][4] = {
{-2180.2913,-2258.2847,30.6376,226.3175},
{-2117.2129,-2390.4568,30.6250,45.2325},
{-2132.1973,-2511.4751,31.8163,146.3677}
};

new RPRandomName[][] =
{
	"Jacob",
	"Ethan",
	"Walter",
	"William",
	"Alex",
	"Alexander",
	"William",
	"George",
	"Frank",
	"Robert",
	"Harry",
	"Clara",
	"Marie",
	"Anna",
	"Mary",
	"Elizabeth",
	"Helen",
	"Hannah",
	"Florence",
	"Thomas",
	"Arthur",
	"Martha",
	"Sarah",
	"Ella",
	"Elsi",
	"Fannie",
	"Stella",
	"Viola",
	"White"
};

//====================[DDDM]==================================
#define DM_MAX_OBJECTS 10500
#define DM_MAX_SPOTS MAX_PLAYERS-2
#define MAX_DM_ITEMS 500
#define MAX_DM_CP 550 // to avoid -1 index or some shit, teh fucker.. it was 500
#define MAX_DM_BEST_LINES 5
#define DM_BUY_MENU_STRING "Glasses - $1500\nHats - $1500\nFlash - $60000\nWheels - $8000\nWeather - $30000\nTime - $15000\nNos - $1500\nExplosive Barrel(RACE ONLY) - $3500"

#define DM_SPAWN_PLAYERS_TIME 6000
#define DM_START_GAME_TIME 9000
#define DM_SPAWN_DEADS 1
//#define DM_OBJECTS_ONE_BY_ONE 1

#define DM_MAX_MARKERS 102

#define DM_TYPE_DM 0
#define DM_TYPE_DD 1
#define DM_TYPE_RACE 2
enum DMPLAYERINFO
{
	RunUps,
	Alive,
	Wins,
	Money,
	Hunters,
	SpecID,
	Score,
	rRespawn,
	CarTimer,
	cRaceCP,//current race CP
	cPSame,//same race CP
	cRacePos,//current race position.. 1t 2nd..
	rFinished,//finished race??
	DisableDB,
	DisableTT,
	PVP,
	PVPID,
	PVPWins,
	PVPChecked,//used to see if pvp couple is checked
	PVPTime[3],//mins,secs,mils
	PVPRounds,
	PVPAmount,
	PVPRequest[3],//ID, rounds, amounts
	vEntered[DM_MAX_MARKERS],
	iEntered[MAX_DM_ITEMS],
	Asked,
	Camper,
	Glasses,
	dWeather,//-2 disabled, -1 purchased, other = id
	dTime,//-2 disabled, -1 purchased, other = id
	Wheels,
	eBarrel,// barrel
	Hats,
	Flash,
	Skin,
	sPlate[20]
};
new DMPlayerInfo[MAX_PLAYERS][DMPLAYERINFO];

#define MAX_DM_MAPS 200
enum DDDMMAPS
{
	Exists,
	mName[50],
	pathName[100],
	//spawns
	sExists[DM_MAX_SPOTS],
	sVehID[DM_MAX_SPOTS],
	Float:sX[DM_MAX_SPOTS],
    Float:sY[DM_MAX_SPOTS],
	Float:sZ[DM_MAX_SPOTS],
	Float:sAng[DM_MAX_SPOTS],

	//worlds
	wID[DM_MAX_SPOTS],
	wTaken[DM_MAX_SPOTS],

	//object
	oExists[DM_MAX_OBJECTS],
	oModel[DM_MAX_OBJECTS],
	Float:ox[DM_MAX_OBJECTS],
	Float:oy[DM_MAX_OBJECTS],
	Float:oz[DM_MAX_OBJECTS],
	Float:orx[DM_MAX_OBJECTS],
	Float:ory[DM_MAX_OBJECTS],
	Float:orz[DM_MAX_OBJECTS],

	//items
	iExists[MAX_DM_ITEMS],
	iType[MAX_DM_ITEMS], //0 = fix, 1= nos, 2=speed boost, other = vehicleids
    Float:iX[MAX_DM_ITEMS],
    Float:iY[MAX_DM_ITEMS],
	Float:iZ[MAX_DM_ITEMS],


    //checkpoints
	cExists[MAX_DM_CP],
	cID[MAX_DM_CP],
	cSize[MAX_DM_CP],
	cType[MAX_DM_CP], //c type, for airplane.. car.. etc
	cNext[MAX_DM_CP], //next checkpoint ID
    Float:cX[MAX_DM_CP],
    Float:cY[MAX_DM_CP],
	Float:cZ[MAX_DM_CP],

	//velocities and teles
	vExists[DM_MAX_MARKERS],
	vFreeze[DM_MAX_MARKERS],
	Float:vpX[DM_MAX_MARKERS],
	Float:vpY[DM_MAX_MARKERS],
	Float:vpZ[DM_MAX_MARKERS],
	Float:vpRange[DM_MAX_MARKERS],
	Float:vtX[DM_MAX_MARKERS],
	Float:vtY[DM_MAX_MARKERS],
	Float:vtZ[DM_MAX_MARKERS],
	Float:vAng[DM_MAX_MARKERS],
	Float:vvX[DM_MAX_MARKERS],
	Float:vvY[DM_MAX_MARKERS],
	Float:vvZ[DM_MAX_MARKERS],
	vtTypeX[DM_MAX_MARKERS],//0=not needed, 1= veh vel needed
	vtTypeY[DM_MAX_MARKERS],//0=not needed, 1= veh vel needed
	vtTypeZ[DM_MAX_MARKERS],//0=not needed, 1= veh vel needed
	vvTypeX[DM_MAX_MARKERS],//0=not needed, 1= veh vel needed vor velocity
	vvTypeY[DM_MAX_MARKERS],//0=not needed, 1= veh vel needed
	vvTypeZ[DM_MAX_MARKERS]//0=not needed, 1= veh vel needed
}
new DMMapsInfo[MAX_DM_MAPS][DDDMMAPS];

enum DMOBJECTINFO
{
	oObject,
	oExists,
	oModel,
	Float:ox,
	Float:oy,
	Float:oz,
	Float:orx,
	Float:ory,
	Float:orz
}
new DMObjects[DM_MAX_OBJECTS][DMOBJECTINFO];

enum DMMAPINFO
{
	AliveAtStart,
	MapBought,
	TimeLeft,
	AllWorldTimer,
	rMapTimer,
	rRestart,//race restart??
	Type,
	Map,
	Timer,
	mName[50],
	sLink[50],
	pathName[100],
	Author[50],
	//Objects[DM_MAX_OBJECTS],

	dStarted,
	VehID,
	Rating,
	//fun shit
	fWeather,
	fColor,
	
	//alive
    Al_Mils,
	Al_Secs,
	Al_Mins,

	//spawns
	sExists[DM_MAX_SPOTS],
	sVehID[DM_MAX_SPOTS],
	sTaken[DM_MAX_SPOTS],
	Float:sX[DM_MAX_SPOTS],
    Float:sY[DM_MAX_SPOTS],
	Float:sZ[DM_MAX_SPOTS],
	Float:sAng[DM_MAX_SPOTS],

	//worlds
	wID[DM_MAX_SPOTS],
	wTaken[DM_MAX_SPOTS],

	//items
	iExists[MAX_DM_ITEMS],
	iType[MAX_DM_ITEMS], //0 = fix, 1= nos, 2=speed boost, other = vehicleids
    Text3D:iText[MAX_DM_ITEMS],
    Float:iX[MAX_DM_ITEMS],
    Float:iY[MAX_DM_ITEMS],
	Float:iZ[MAX_DM_ITEMS],


    //checkpoints
	cExists[MAX_DM_CP],
	cSize[MAX_DM_CP],
	cType[MAX_DM_CP], //c type, for airplane.. car.. etc
	cNext[MAX_DM_CP], //next checkpoint ID
    Float:cX[MAX_DM_CP],
    Float:cY[MAX_DM_CP],
	Float:cZ[MAX_DM_CP],

	//velocities and teles
	vExists[DM_MAX_MARKERS],
	vFreeze[DM_MAX_MARKERS],
    Text3D:vText[DM_MAX_MARKERS],
	Float:vpX[DM_MAX_MARKERS],
	Float:vpY[DM_MAX_MARKERS],
	Float:vpZ[DM_MAX_MARKERS],
	Float:vpRange[DM_MAX_MARKERS],
	Float:vtX[DM_MAX_MARKERS],
	Float:vtY[DM_MAX_MARKERS],
	Float:vtZ[DM_MAX_MARKERS],
	Float:vAng[DM_MAX_MARKERS],
	Float:vvX[DM_MAX_MARKERS],
	Float:vvY[DM_MAX_MARKERS],
	Float:vvZ[DM_MAX_MARKERS],
	vtTypeX[DM_MAX_MARKERS],//0=not needed, 1= veh vel needed
	vtTypeY[DM_MAX_MARKERS],//0=not needed, 1= veh vel needed
	vtTypeZ[DM_MAX_MARKERS],//0=not needed, 1= veh vel needed
	vvTypeX[DM_MAX_MARKERS],//0=not needed, 1= veh vel needed vor velocity
	vvTypeY[DM_MAX_MARKERS],//0=not needed, 1= veh vel needed
	vvTypeZ[DM_MAX_MARKERS]//0=not needed, 1= veh vel needed

};
new DMMAPInfo[DMMAPINFO];

new RACE_highCP[MAX_PLAYERS];//highest CP.. cpamring them
new RACE_highCPID[MAX_PLAYERS];//highest CP ID.. cpamring them

#define RACE_CHECK_DISTANCE 1
#if defined RACE_CHECK_DISTANCE

new RACE_lowDis[MAX_DM_CP][MAX_PLAYERS];//cp id, player count - lowest distance.. cpamring them
new RACE_lowDisID[MAX_DM_CP][MAX_PLAYERS]; // player id of lowest distance

#endif
enum DMTEXTS
{
    somethingthatisntneeded,//pawno crashes otherwise..
    Text:mInfo,//map info shows current map as a td.. blah ... what's with the blahs?!
    //new map
    Text:BG,
    Text:Text, // the map info etc... author etc
    Text:Loading, // loading text
    
    //alive things
    Text:Al_BGs[3],
    Text:Al_Time,
	Text:Al_AliveNum,

	//best times
	Text:TT_BG1,
	Text:TT_BG2,
	Text:TT_Text,
	Text:TT_Line,
	Text:TT_Line2,//prevent a bug
	Text:TT_bTimes[MAX_DM_BEST_LINES],
	Text:TT_bNames[MAX_DM_BEST_LINES]

};
new DMTXTD[DMTEXTS];



enum BESTOFDM
{
	bMils,
	bSecs,
	bMins,
	Name[50]
};
new DMBest[MAX_DM_BEST_LINES][BESTOFDM];

#define MAX_DM_DB_LINES 11
enum DEATHBOARDDM
{
	dStr[50],
	Text:dText
};
new DeathBoardDM[MAX_DM_DB_LINES][DEATHBOARDDM];


//23439871 to what color?

//====================[PJ]==================================
#define PJ_MAX_OBJECTS 10500
#define MAX_PJ_ITEMS 50
#define MAX_PJ_BEST_LINES 5
#define PJ_BUY_MENU_STRING "Camper - $1500\nGlasses - $1500\nHats - $1500\nWeather - $30000\nTime - $15000"

#define PJ_SPAWN_PLAYERS_TIME 6000
#define PJ_START_GAME_TIME 9000
#define PJ_SPAWN_DEADS 1
//#define PJ_OBJECTS_ONE_BY_ONE 1

enum PJPLAYERINFO
{
	RunUps,
	Alive,
	Wins,
	Money,
	Finishes,
	SpecID,
	Score,
	DisableDB,
	DisableTT,
	rRespawn,
	Respawning,
	PVP,
	PVPID,
	PVPWins,
	PVPChecked,//used to see if pvp couple is checked
	PVPTime[3],//mins,secs,mils
	PVPRounds,
	PVPAmount,
	PVPRequest[3],//ID, rounds, amounts
	iEntered[MAX_PJ_ITEMS],
	Asked,
	Camper,
	InDuel,
	Glasses,
	dWeather,//-2 disabled, -1 purchased, other = id
	dTime,//-2 disabled, -1 purchased, other = id
	Hats,
	Skin
};
new PJPlayerInfo[MAX_PLAYERS][PJPLAYERINFO];

enum PJOBJECTINFO
{
	oObject,
	oExists,
	oModel,
	Float:ox,
	Float:oy,
	Float:oz,
	Float:orx,
	Float:ory,
	Float:orz
}
new PJObjects[PJ_MAX_OBJECTS][PJOBJECTINFO];


#define MAX_PJ_MAPS 100
enum PJMAPS
{
	Exists,
	mName[50],
	pathName[100],
	Float:LowestZ,

	//parachutes
	iExists[MAX_PJ_ITEMS],
	iType[MAX_PJ_ITEMS], //0=parachute .. others = who knows.. something new in the future
    Text3D:iText[MAX_PJ_ITEMS],
    Float:iX[MAX_PJ_ITEMS],
    Float:iY[MAX_PJ_ITEMS],
	Float:iZ[MAX_PJ_ITEMS],
	
	//spawn
	Float:sX,
    Float:sY,
	Float:sZ,
	Float:sAng,
	
	//object
	oExists[PJ_MAX_OBJECTS],
	oModel[PJ_MAX_OBJECTS],
	Float:ox[PJ_MAX_OBJECTS],
	Float:oy[PJ_MAX_OBJECTS],
	Float:oz[PJ_MAX_OBJECTS],
	Float:orx[PJ_MAX_OBJECTS],
	Float:ory[PJ_MAX_OBJECTS],
	Float:orz[PJ_MAX_OBJECTS]
}
new PJMapsInfo[MAX_PJ_MAPS][PJMAPS];

enum PJMAPINFO
{
	AliveAtStart,
	MapBought,
	TimeLeft,
	Timer,
	rMapTimer,
	DuelTimer,
	Float:LowestZ,
	mName[50],
	sLink[50],
	pathName[100],
	Author[50],
	Map,
	dStarted,
	Rating,
	//fun shit
	fWeather,

	//spawn
	Float:sX,
    Float:sY,
	Float:sZ,
	Float:sAng,

	//parachutes
	iExists[MAX_PJ_ITEMS],
	iType[MAX_PJ_ITEMS], //0=parachute .. others = who knows.. something new in the future
    Text3D:iText[MAX_PJ_ITEMS],
    Float:iX[MAX_PJ_ITEMS],
    Float:iY[MAX_PJ_ITEMS],
	Float:iZ[MAX_PJ_ITEMS],

	//alive
    Al_Mils,
	Al_Secs,
	Al_Mins

};
new PJMAPInfo[PJMAPINFO];

enum PJTEXTS
{
    somethingthatisntneeded,//pawno crashes otherwise..
    Text:mInfo,//map info shows current map as a td.. blah ... what's with the blahs?!
    //new map
    Text:BG,
    Text:Text, // the map info etc... author etc
    Text:Loading, // loading text

    //alive things
    Text:Al_BGs[3],
    Text:Al_Time,
	Text:Al_AliveNum,

	//best times
	Text:TT_BG1,
	Text:TT_BG2,
	Text:TT_Text,
	Text:TT_Line,
	Text:TT_Line2,//prevent a bug
	Text:TT_bTimes[MAX_PJ_BEST_LINES],
	Text:TT_bNames[MAX_PJ_BEST_LINES]

};
new PJTXTD[PJTEXTS];

enum BESTOFPJ
{
	bMils,
	bSecs,
	bMins,
	Name[50]
};
new PJBest[MAX_PJ_BEST_LINES][BESTOFPJ];

//====================[COLORS]==============================

#define COLOR_RED 0xFF000000
#define COLOR_YELLOW 0x33FF3355
#define COLOR_PURPLE 0x800080AA
#define black 0x2C272755
#define red1 0xFF000000
#define COLOR_LIGHTBLUE 0x0000BBAA
#define POINTCOLOR 0x800080FF
#define COLOR_PINK 0xFF66FFAA
#define COLOR_BLUE 0x0000BBAA
#define COLOR_WHITE 0xFFFFFFAA
#define COLOR_GREEN 0x33AA33AA
#define COLOR_BROWN 0x993300AA
//#define RED 0xAA3333AA
#define COLOR_BRIGHTRED 0xFF0000AA
#define COLOR_VIOLET 0x9955DEEE
#define COLOR_SEAGREEN 0x00EEADDF
#define COLOR_ORANGE 0xFF990055
#define COLOR_LIGHTRED 0xFF000055
#define blue 0x00EEADDF//0x375FFF55
#define green1 0x33FF3355
#define yellow 0xFFFF0055
#define white 0xFFFFFF55
#define red 0xFF9900AA //0xFF000000
#define green 0xFF9900AA//0x800080AA
#define grey12 0xC0C0C000
#define grey 0xFF9900AA
#define blue1 0x2641FE33
#define lightblue 0x67F6F6AA
#define orange 0x00EEAD33 //0xFFFF00AA
#define COLOR_GREEN1 0x33AA33AA
#define COLORGREEN 0x00FF00FF
#define L_LIGHTRED 0xFF0000AA
#define R_PINK 0xFF66FF33
#define R_WHITE 0xFFFFFF33
#define R_BROWN 0x99330033
#define R_BRIGHTRED 0xFF000033
#define R_VIOLET 0x9955DE33
#define R_SEAGREEN 0x00EEAD33
#define R_ORANGE 0xFF990033
#define R_LIGHTRED 0xFF000033
#define R_RED 0xFF990033
#define R_GREEN 0xFF990033
#define R_GREY 0xC0C0C033
#define R_BLUE 0x2641FE33
#define R_LIGHTBLUE 0x67F6F633
#define P_COL_WHITE 0xFFFFFFAA
#define P_COL_BROWN 0x993300AA
#define P_COL_BRIGHTRED 0xFF0000AA
#define P_COL_VIOLET 0x9955DEAA
#define P_COL_SEAGREEN 0x00EEADAA
#define P_COL_ORANGE 0xFF9900AA
#define P_COL_LIGHTRED 0xFF0000AA
#define P_COL_RED 0xFF0000AA//0xAA3333AA
#define P_COL_GREEN 0x33AA33AA
#define P_COL_GREY 0xC0C0C0AA
#define P_COL_BLUE 0x2641FEAA
#define P_COL_LIGHTBLUE 0x67F6F6AA
#define P_COL_BLACK 0x000000AA
#define P_COL_YELLOW 0xFFFF00AA
#define P_COL_SEABLUE 0x5BB9E6AA

main()
{
 	print("________________________________________");
	print("            	PANGEA v.2        ");
	print("________________________________________\n");
}

//==============================================================================

public OnPlayerConnect(playerid)
{
	PlayerInfo[playerid][ID]=0;
   	PlayerInfo[playerid][MainMenu] = 0;
   	PlayerInfo[playerid][LoggedIn] = 0;
   	PlayerInfo[playerid][Registered] = 0;
   	PlayerInfo[playerid][PlayerMode] = -1;
    FullyConnected[playerid]=false;
	PlayerInfo[playerid][ConnectedForMSG] = 0;
   	fixPlayerName(playerid, false);
	GetPlayerName(playerid, PlayerInfo[playerid][Name], MAX_PLAYER_NAME);

    forLoop(i, MAX_AC_VARIABLES)
	    AC_Warnings[playerid][i]=0;

    NoTeleportCheck[playerid]=0;
	AC_PlayerInfo[playerid][AC_pVehicleEntered]=INVALID_VEHICLE_ID;
	AC_PlayerInfo[playerid][AC_pFreezed]=false;
	
 	ResetWeapons(playerid);
    OnPConnect(playerid);
	//printf("DEBUG CFONTROL ONPLAYERCONNECT 2 pid %d",playerid);
 	return 1;
}
stock OnPConnect(playerid)
{
    if(!IsPlayerNPC(playerid))
 	{
		if(db_IsIPBanned(getThePlayerIP(playerid)))
		{
		    db_GetBannedInfoByIP(getThePlayerIP(playerid), playerid, false);
	    	BlockIpAddress(IPRange(getThePlayerIP(playerid)), 5*60 * 1000);
      		KickThePlayer(playerid);
		    return 0;
		}
		if(ServerInfo[SerialCheck] == 0)
		{
			if(db_IsSerialBanned(getThePlayerSerial(playerid)))
			{
		        db_GetBannedInfoByName(PlayerInfo[playerid][Name], playerid, false);
		    	BlockIpAddress(IPRange(getThePlayerIP(playerid)), 5*60 * 1000);
			    KickThePlayer(playerid);
			    return 0;
			}
		}

		if(db_IsNameBanned(PlayerInfo[playerid][Name], getThePlayerSerial(playerid), true))
		{
	        db_GetBannedInfoByName(PlayerInfo[playerid][Name], playerid, false);
	    	BlockIpAddress(getThePlayerIP(playerid), 60 * 1000);
		    KickThePlayer(playerid);
		    return 0;
		}

		if(ServerInfo[AdvCheck] == 1)
		{
			if(CheckIP(PlayerInfo[playerid][Name]) || AdvertCheck(PlayerInfo[playerid][Name]))
			{
				user_Kick(playerid,-1,"Illegal nickname(ADV)",true,false);
				return 0;
			}
		}
		/*if(IsNumeric(PlayerInfo[playerid][Name]))
		{
			user_Kick(playerid,-1,"Numeric nickname",true,false);
			return 0;
		}*/
		new dup_player = ReturnPlayerID(PlayerInfo[playerid][Name]);
		if(dup_player != INVALID_PLAYER_ID && dup_player != playerid)
		{
		    user_Kick(playerid,-1,"Nickname duplication",true,false);
			return 0;
		}
		db_SaveAKA(playerid);
 	    //HideTDs(playerid);
		ShowIntroForPlayer(playerid);
		OnConnectVarInit(playerid);

	    OnConnectCreateTDs(playerid);
	    //OnConnectCreate3Ds(playerid);

		new uID;
		uID = user_Exists(PlayerInfo[playerid][Name]);
	   	if(uID != 0)
		{
		    PlayerInfo[playerid][Registered] = 1;
			PlayerInfo[playerid][ID] = uID;
			format(PlayerInfo[playerid][Password], 50, "%s",db_ReturnStatsStr(toStr(uID), "USERS", "PASSWORD"));
		}
		
		PlayerInfo[playerid][StuffCreated] = 1;
		PlayerInfo[playerid][ConnectedForMSG] = 1;
		
	    new string[128];
	    format(string,sizeof(string),"(join)-{CCCCCC} %s[%d] has joined.[AKA %s]",PlayerInfo[playerid][Name], playerid, db_GetAKAByIP(getThePlayerIP(playerid)));
		forLoop(i, MAX_PLAYERS)
		{
			if(IsPlayerConnected(i))
			{
				if((PlayerInfo[i][Level] > 1) && PlayerInfo[i][Registered] && PlayerInfo[i][LoggedIn])
				{
				    SendClientMessage(i, green1, string);
				}
			}
		}
	    format(string,sizeof(string),"[JOIN]{CCCCCC} %s[%d] has joined.",PlayerInfo[playerid][Name], playerid);
		forLoop(i, MAX_PLAYERS)
		{
			if(IsPlayerConnected(i))
			{
				if(PlayerInfo[i][Level] == 0 && PlayerInfo[i][Registered] && PlayerInfo[i][LoggedIn] && PlayerInfo[i][Spawned])
				{
				    SendClientMessage(i, green1, string);
				}
			}
		}
	
		format(string, sizeof string, "[JOIN] %s[%d] has joined.", PlayerInfo[playerid][Name], playerid);
		db_SaveChat(-1, -1, string);
		format(string, sizeof(string), "~w~%s (~b~joined~w~)",FixpInfoName(playerid));
		forLoop(i, MAX_MODES)UpdatepInfo(i,string);
		
		ApplyAnimation(playerid, "FOOD","EAT_Burger", 3.0, 0, 0, 0, 0, 0);//so we can use it later with no problems
		ApplyAnimation(playerid, "BOMBER","BOM_Plant_Loop",4.0,1,0,0,1,0);
		ApplyAnimation(playerid, "SWEET", "Sweet_injuredloop", 4.0, 0, 0, 0, 0, 0);
	}
	return 1;
}

stock AccountDialogs(playerid)
{
	if(PlayerInfo[playerid][Registered] == 0)
    	ShowPlayerDialog(playerid,REGISTERMENU, DIALOG_STYLE_PASSWORD,"Register Menu", "Create a password(4-30 characters)", "Register", "");
    else if(PlayerInfo[playerid][Registered] && !PlayerInfo[playerid][LoggedIn])
    	ShowPlayerDialog(playerid,LOGINMENU, DIALOG_STYLE_PASSWORD,"Login Menu", "Put your password to login:", "Login", "");
	return 1;
}

stock showIntro(playerid)
{
	ClearTheChatForPlayer(playerid);
    SetPlayerHealth(playerid,100000);
    SetPlayerSkin(playerid,168);
	SelectTextDraw(playerid, -5963521);
	TogglePlayerControllable(playerid,false);

	HideIntroForPlayer(playerid);
	AccountDialogs(playerid);
	CallRemoteFunction("PangeaIntroCamera","d",playerid);
}

stock hideIntro(playerid)
{
    if(ServerInfo[InstSpawn] == 0)
        ShowMMTexts(playerid);
	else
	{
	    PlayerInfo[playerid][PlayerMode] = getRandMode();
	    if(PlayerInfo[playerid][PlayerMode] == TW)
	    {
			if(AxisCount() == AllyCount())
            {
                switch(random(6))
                {
                    case 0:{TWPlayerInfo[playerid][Country] = GERMANY;PlayerInfo[playerid][pTeam] = AXIS;}
                    case 1:{TWPlayerInfo[playerid][Country] = USA;PlayerInfo[playerid][pTeam] = ALLIES;}
                    case 2:{TWPlayerInfo[playerid][Country] = BALKAN;PlayerInfo[playerid][pTeam] = ALLIES;}
                    case 3:{TWPlayerInfo[playerid][Country] = BRITISH;PlayerInfo[playerid][pTeam] = ALLIES;}
                    case 4:{TWPlayerInfo[playerid][Country] = RUSSIA;PlayerInfo[playerid][pTeam] = ALLIES;}
                    case 5:{TWPlayerInfo[playerid][Country] = JAPAN;PlayerInfo[playerid][pTeam] = AXIS;}
                    case 6:{TWPlayerInfo[playerid][Country] = ITALY;PlayerInfo[playerid][pTeam] = AXIS;}
                }
			}
			if(AxisCount() > AllyCount())
			{
				TWPlayerInfo[playerid][Country] = BRITISH;
				PlayerInfo[playerid][pTeam] = ALLIES;
			}
			if(AxisCount() < AllyCount())
			{
				TWPlayerInfo[playerid][Country] = GERMANY;
				PlayerInfo[playerid][pTeam] = AXIS;
			}
            TWPlayerInfo[playerid][Class] = SOLDIER;
	    }
	    if(PlayerInfo[playerid][PlayerMode] == CO)
	    {
	        if(CriminalCountCO() == CopCountCO())
            {
                switch(random(2))
                {
                    case 0:PlayerInfo[playerid][pTeam] = COP;
                    case 1:PlayerInfo[playerid][pTeam] = CRIMINAL;
                }
			}
			if(CriminalCountCO() > CopCountCO())
				PlayerInfo[playerid][pTeam] = COP;
			if(CriminalCountCO() < CopCountCO())
				PlayerInfo[playerid][pTeam] = CRIMINAL;
	    }
	    if(PlayerInfo[playerid][PlayerMode] == TL)
	    {
	        if(AxisCountTL() == AllyCountTL())
            {
                switch(random(2))
                {
                    case 0:PlayerInfo[playerid][pTeam] = AXIS;
                    case 1:PlayerInfo[playerid][pTeam] = ALLIES;
                }
			}
			if(AxisCountTL() > AllyCountTL())
				PlayerInfo[playerid][pTeam] = ALLIES;
			if(AxisCountTL() < AllyCountTL())
				PlayerInfo[playerid][pTeam] = AXIS;

	    }
	    if(PlayerInfo[playerid][PlayerMode] == CTF)
	    {
	        if (RedCountCTF() == BlueCountCTF())
            {
                switch(random(2))
                {
                    case 0:PlayerInfo[playerid][pTeam] = RED;
                    case 1:PlayerInfo[playerid][pTeam] = BLUE;
                }
			}
			if (RedCountCTF() > BlueCountCTF())
				PlayerInfo[playerid][pTeam] = BLUE;
			if (RedCountCTF() < BlueCountCTF())
				PlayerInfo[playerid][pTeam] = RED;
	    }
	    if(PlayerInfo[playerid][PlayerMode] == VW)
	    {
	        if(TeamCountVW(VW_VIETNAM) == TeamCountVW(VW_USA))
            {
                switch(random(2))
                {
                    case 0:PlayerInfo[playerid][pTeam] = VW_USA;
                    case 1:PlayerInfo[playerid][pTeam] = VW_VIETNAM;
                }
			}
			else if (TeamCountVW(VW_USA) > TeamCountVW(VW_VIETNAM))
				PlayerInfo[playerid][pTeam] = VW_VIETNAM;
			else
				PlayerInfo[playerid][pTeam] = VW_USA;
	    }
	    if(PlayerInfo[playerid][PlayerMode] == PTP)
	    {
	        PlayerInfo[playerid][pTeam] = NOTEAM;
	        PTPPlayerInfo[playerid][Class] = CIVILIAN;
	    }
		CancelSelectTextDraw(playerid);
		PlayerInfo[playerid][MainMenu] = 1;
	    PlayerInfo[playerid][Spawned] = 0;
	 	PlayerInfo[playerid][PlayerOptionSelected] = 1;
	 	A_SpawnPlayer(playerid);
	 	updateMMPlayers();
	}
	//SpawnPlayer(playerid);
}

stock OnConnectVarInit(playerid)
{
   	PlayerInfo[playerid][ID] = 0;
   	format(PlayerInfo[playerid][Password], 50, "-1");
    PlayerInfo[playerid][Jailed] = 0;
	PlayerInfo[playerid][BlockPM] = 0;
	PlayerInfo[playerid][NoCMD] = 0;
	PlayerInfo[playerid][NoReport] = 0;
	PlayerInfo[playerid][HideAdmin] = 0;
	PlayerInfo[playerid][Frozen] = 0;
	PlayerInfo[playerid][Level] = 0;
	PlayerInfo[playerid][wCheck] = 0;
	PlayerInfo[playerid][NoACCheck] = 1;
	PlayerInfo[playerid][TimesOnServer] = 0;
	PlayerInfo[playerid][LoggedIn] = 0;
	PlayerInfo[playerid][Registered] = 0;
	PlayerInfo[playerid][EnteredZone]=-1;
	PlayerInfo[playerid][DynamicArea] = -1;
	PlayerInfo[playerid][God] = 0;
	PlayerInfo[playerid][GodCar] = 0;
	PlayerInfo[playerid][Spycmds] = 0;
	PlayerInfo[playerid][Spypms] = 0;
	PlayerInfo[playerid][Muted] = 0;
	PlayerInfo[playerid][Messages]= 0;
	PlayerInfo[playerid][DeathFlood]= 0;
	PlayerInfo[playerid][Commands]= 0;
	PlayerInfo[playerid][Warnings] = 0;
	PlayerInfo[playerid][SpecID] = -1;
	PlayerInfo[playerid][Vehicle] = -1;
	PlayerInfo[playerid][cSelVeh] = -1;
	PlayerInfo[playerid][PingCount] = 0;
	PlayerInfo[playerid][PingTime] = 0;
	PlayerInfo[playerid][FailLogin] = 0;
   	PlayerInfo[playerid][MainMenu] = 0;
   	PlayerInfo[playerid][PlayerMode] = -1;
   	PlayerInfo[playerid][EditingAttachments] = -2;
   	
   	PlayerInfo[playerid][DamageTextTimer] = -1;
   	
   	if(PlayerInfo[playerid][SpeedoObject] != -1)
		DestroyTheDynamicObject(PlayerInfo[playerid][SpeedoObject]);
	PlayerInfo[playerid][SpeedoObject] = -1;

	if(PlayerInfo[playerid][RacePlaceObject] != -1)
		DestroyTheDynamicObject(PlayerInfo[playerid][RacePlaceObject]);
	PlayerInfo[playerid][RacePlaceObject] = -1;

	SetPlayerWantedLevel(playerid, 0);
	SetPlayerSkillLevel(playerid,WEAPONSKILL_PISTOL,50);
				
	PlayerInfo[playerid][DisbleSpeedo] = 0;
	PlayerInfo[playerid][SpeedoType] = 0;
	PlayerInfo[playerid][SpeedoReset] = 0;
	PlayerInfo[playerid][SpeedoSide] = 0;
    format(PlayerInfo[playerid][SpeedoCol],10,"%s","33FF33");
    PlayerInfo[playerid][SelectMenu] = -1;
   	forLoop(i, SELECT_MENU_OPTIONS)PlayerInfo[playerid][SelectMenuOption][i] = -1;
   	forLoop(i, MAX_MODES)PlayerInfo[playerid][ModeUnLock][i] = 0;
   	forLoop(i, 14)PlayerInfo[playerid][vComponents][i] = 0;

	PlayerInfo[playerid][Option] = 0;
	PlayerInfo[playerid][Attachments][0]=0;
	PlayerInfo[playerid][Attachments][1]=0;
	PlayerInfo[playerid][Attachments][2]=0;
	PlayerInfo[playerid][PlayerOptionSelected] = 0;
    PlayerInfo[playerid][Spawned] = 0;
    PlayerInfo[playerid][Online] = 30;
    PlayerInfo[playerid][JustSpectated] = 0;
    PlayerInfo[playerid][ObjectsRemoved] = 0;
    PlayerInfo[playerid][TagState] = 0;
	PlayerInfo[playerid][lCountDown] = -1;
	PlayerInfo[playerid][sProtected] = 0;
	PlayerInfo[playerid][DisableSounds] = 0;
	PlayerInfo[playerid][DisableShowpInfo] = 0;
	PlayerInfo[playerid][DisableShowkSpree] = 0;
	PlayerInfo[playerid][Credits] = 0;
	PlayerInfo[playerid][HeadShots] = 0;
	PlayerInfo[playerid][Radio] = 0;
	PlayerInfo[playerid][VIP] =0;
	PlayerInfo[playerid][pTeam] = NOPOWER;
    PlayerInfo[playerid][poFirstTime] = 0;
	PlayerInfo[playerid][HasSelectedVeh]=1;
	PlayerInfo[playerid][InDodo] = -1;
	PlayerInfo[playerid][OnMiniGunCar] = -1;
	PlayerInfo[playerid][ZoneDead] = 0;
	PlayerInfo[playerid][bombcount] =0;
    PlayerInfo[playerid][supplyid]=0;
	PlayerInfo[playerid][InNevada] = -1;
	PlayerInfo[playerid][SelectedSkin] = -1;
	PlayerInfo[playerid][InSubmarine] = -1;
	PlayerInfo[playerid][InTank] = -1;
	PlayerInfo[playerid][SavedPos] = 0;
	PlayerInfo[playerid][SFSavedPos] = 0;
	PlayerInfo[playerid][SFSP_SavedPos] = 0;
	PlayerInfo[playerid][Spree] = 0;
	PlayerInfo[playerid][AbuseFixVIP] = 0;
	PlayerInfo[playerid][AbuseHealVIP] = 0;
	
	forLoop(i, 10)
	{
		pAttachments[playerid][i][Exists] = 0;
		sAttachments[playerid][i][Exists] = 0;
	}
	forLoop(i, 5)PlayerInfo[playerid][SkinsCMD][i] = 0;
    forLoop(i, PING_MAX_EXCEEDS)PlayerInfo[playerid][pPing][i] = 0;
    
 	SFPlayerInfo[playerid][BlockTele] = 0;
	SFPlayerInfo[playerid][EventsWon] =0;
	SFPlayerInfo[playerid][Superman] = 0;
	SFPlayerInfo[playerid][Spiderman] = 0;
	SFPlayerInfo[playerid][Money]=1;
	SFPlayerInfo[playerid][Event] = 0;
	SFPlayerInfo[playerid][SpecID] = -1;
	SFPlayerInfo[playerid][BetsWon] = 0;
	SFPlayerInfo[playerid][BetsLost] = 0;
	forLoop(i, MAX_EVENTS)
  		SFPlayerInfo[playerid][BetpID][i]=-1;
	SFPlayerInfo[playerid][EventRank] =0;
	SFPlayerInfo[playerid][Boost] = 1;

	FFAPlayerInfo[playerid][GangID] = 0;
	FFAPlayerInfo[playerid][Properties] = 0;
	FFAPlayerInfo[playerid][PropertySpawn] = 0;
	FFAPlayerInfo[playerid][Treasures] = 0;
	FFAPlayerInfo[playerid][Money] = 0;
	FFAPlayerInfo[playerid][TreasureRank]=0;
	FFAPlayerInfo[playerid][CaptureRank]=0;
	FFAPlayerInfo[playerid][KillsRank]=0;
	FFAPlayerInfo[playerid][Deaths] = 0;
	FFAPlayerInfo[playerid][Kills] = 0;
	FFAPlayerInfo[playerid][Score] = 0;
	FFAPlayerInfo[playerid][Captures] = 0;
	FFAPlayerInfo[playerid][DisableTK] = 0;
    format(FFAPlayerInfo[playerid][gRank],50,"%s","s");
    for (new y = 0; y != 102; y++) FFAPlayerInfo[playerid][pTreasure][y] = 0;

	TLPlayerInfo[playerid][RoundsLost] = 0;
	TLPlayerInfo[playerid][RoundsWon] = 0;
	TLPlayerInfo[playerid][Deaths] = 0;
	TLPlayerInfo[playerid][Kills] = 0;
	TLPlayerInfo[playerid][Score] = 0;
	TLPlayerInfo[playerid][Objective] = 0;
	TLPlayerInfo[playerid][OnTower] = 0;
	DestroyPlayerDDShip(playerid);

	COPlayerInfo[playerid][RoundsLost] = 0;
	COPlayerInfo[playerid][RoundsWon] = 0;
	COPlayerInfo[playerid][Deaths] = 0;
	COPlayerInfo[playerid][Kills] = 0;
	COPlayerInfo[playerid][Score] = 0;
	COPlayerInfo[playerid][Money] = 0;
	COPlayerInfo[playerid][Arrests] = 0;
	COPlayerInfo[playerid][Releases] = 0;
	COPlayerInfo[playerid][KillsRank] = 0;
	COPlayerInfo[playerid][PoliceRank] = 0;
	COPlayerInfo[playerid][CriminalRank] = 0;
	COPlayerInfo[playerid][Arresting] = -1;
	COPlayerInfo[playerid][InJail] = 0;

	PTPPlayerInfo[playerid][Deaths] = 0;
	PTPPlayerInfo[playerid][Kills] = 0;
	PTPPlayerInfo[playerid][Score] = 0;
	PTPPlayerInfo[playerid][Money] = 0;
	PTPPlayerInfo[playerid][Survives] = 0;
	PTPPlayerInfo[playerid][TimesAsPres] = 0;
	PTPPlayerInfo[playerid][LeadersKilled] = 0;
	PTPPlayerInfo[playerid][AlreadyLeader] = 0;
	PTPPlayerInfo[playerid][Class] = NOTEAM;
    PTPPlayerInfo[playerid][Rank] = 0;
    PTPPlayerInfo[playerid][RoundsLost] = 0;
	PTPPlayerInfo[playerid][RoundsWon] = 0;

    RPPlayerInfo[playerid][FirstTime] = 0;
    RPPlayerInfo[playerid][isRepairing] = 0;
    RPPlayerInfo[playerid][isFueling] = 0;
	RPPlayerInfo[playerid][Money] = 0;
	RPPlayerInfo[playerid][TryRunning] = 0;
    RPPlayerInfo[playerid][BagType] = RP_BAG_SMALL;
    forLoop(i, 14)RPPlayerInfo[playerid][selWeap][i] = -1;
	forLoop(i, RP_MAX_BAG_ITEMS)
	{
	    RPPlayerInfo[playerid][BagItems][i] = 0;
	    RPPlayerInfo[playerid][BagItemsValue][i] = 0;
	}
   	format(RPPlayerInfo[playerid][rpfName], RP_MAX_NAME_LEN, "");
   	format(RPPlayerInfo[playerid][rplName], RP_MAX_NAME_LEN, "");

    ZOPlayerInfo[playerid][Chosen] = 0;
    ZOPlayerInfo[playerid][RoundsLost] = 0;
	ZOPlayerInfo[playerid][RoundsWon] = 0;
	ZOPlayerInfo[playerid][Deaths] = 0;
	ZOPlayerInfo[playerid][Kills] = 0;
	ZOPlayerInfo[playerid][Score] = 0;
	ZOPlayerInfo[playerid][Money] = 0;

	GKPlayerInfo[playerid][RoundsWon] = 0;
	GKPlayerInfo[playerid][Deaths] = 0;
	GKPlayerInfo[playerid][Kills] = 0;
	GKPlayerInfo[playerid][Score] = 0;
	GKPlayerInfo[playerid][Money] = 0;
	GKPlayerInfo[playerid][CaseTime] = 0;
	GKPlayerInfo[playerid][Holding] = 0;
	
	VWPlayerInfo[playerid][LastLoad] = 0;
	VWPlayerInfo[playerid][LastCreate] = 0;
	VWPlayerInfo[playerid][Deployed] = 0;
	VWPlayerInfo[playerid][DeployIn] = 0;
	VWPlayerInfo[playerid][RoundsWon] = 0;
	VWPlayerInfo[playerid][RoundsLost] = 0;
	VWPlayerInfo[playerid][Deaths] = 0;
	VWPlayerInfo[playerid][Kills] = 0;
	VWPlayerInfo[playerid][Score] = 0;
	VWPlayerInfo[playerid][Rank] = 0;
	forLoop(id, VW_MAX_CLASSES)
	{
	    forLoop(i, VW_MAX_WEAPS)
			VWWeaponInfo[playerid][id][i] = 0;
	}
	VWDestroyPlayerAction(playerid);
	
    CTFPlayerInfo[playerid][RoundsLost] = 0;
	CTFPlayerInfo[playerid][RoundsWon] = 0;
	CTFPlayerInfo[playerid][Deaths] = 0;
	CTFPlayerInfo[playerid][Kills] = 0;
	CTFPlayerInfo[playerid][Score] = 0;
	CTFPlayerInfo[playerid][Captures] = 0;
	CTFPlayerInfo[playerid][Capturing] = 0;

	DMPlayerInfo[playerid][Score] = 0;
    DMPlayerInfo[playerid][Alive] = 0;
    DMPlayerInfo[playerid][rRespawn] = 0;
    DMPlayerInfo[playerid][Asked] = 0;
    DMPlayerInfo[playerid][PVP] = 0;
    DMPlayerInfo[playerid][Glasses] = 0;
    DMPlayerInfo[playerid][dWeather] = -2;
    DMPlayerInfo[playerid][dTime] = -2;
    DMPlayerInfo[playerid][eBarrel] = 0;
    format(DMPlayerInfo[playerid][sPlate], 20, ServerInfo[lPlate]);
    DMPlayerInfo[playerid][Skin] = 251;
    DMPlayerInfo[playerid][Wheels] = 0;
    DMPlayerInfo[playerid][Hats] = 0;
    DMPlayerInfo[playerid][Flash] = 0;
    DMPlayerInfo[playerid][Camper] = 0;
    DMPlayerInfo[playerid][PVPID] = -1;
    DMPlayerInfo[playerid][PVPRequest][0] = -1;
    DMPlayerInfo[playerid][PVPChecked] = 0;
    DMPlayerInfo[playerid][RunUps] = 0;
    DMPlayerInfo[playerid][Money] = 0;
    DMPlayerInfo[playerid][Wins] = 0;
    DMPlayerInfo[playerid][Hunters] = 0;
	DMPlayerInfo[playerid][SpecID] = -1;
	DMPlayerInfo[playerid][DisableDB] = 0;
	DMPlayerInfo[playerid][DisableTT] = 1;

    PJPlayerInfo[playerid][Score] = 0;
    PJPlayerInfo[playerid][Alive] = 0;
    PJPlayerInfo[playerid][rRespawn] = 0;
    PJPlayerInfo[playerid][Respawning] = 0;
    PJPlayerInfo[playerid][Asked] = 0;
    PJPlayerInfo[playerid][PVP] = 0;
    PJPlayerInfo[playerid][Glasses] = 0;
    PJPlayerInfo[playerid][dWeather] = -2;
    PJPlayerInfo[playerid][dTime] = -2;
    PJPlayerInfo[playerid][Skin] = 251;
    PJPlayerInfo[playerid][Hats] = 0;
    PJPlayerInfo[playerid][Camper] = 0;
    PJPlayerInfo[playerid][InDuel] = 0;
    PJPlayerInfo[playerid][PVPID] = -1;
    PJPlayerInfo[playerid][PVPRequest][0] = -1;
    PJPlayerInfo[playerid][PVPChecked] = 0;
    PJPlayerInfo[playerid][RunUps] = 0;
    PJPlayerInfo[playerid][Money] = 0;
    PJPlayerInfo[playerid][Wins] = 0;
    PJPlayerInfo[playerid][Finishes] = 0;
	PJPlayerInfo[playerid][SpecID] = -1;
	PJPlayerInfo[playerid][DisableDB] = 0;
	PJPlayerInfo[playerid][DisableTT] = 1;

    TWPlayerInfo[playerid][Deaths] = 0;
	TWPlayerInfo[playerid][Kills] = 0;
	TWPlayerInfo[playerid][Score] = 0;
	TWPlayerInfo[playerid][Country] = -1;
	TWPlayerInfo[playerid][ABombsDropped] = 0;
	TWPlayerInfo[playerid][ArmyRank] = 1;
	TWPlayerInfo[playerid][WeapRank] = 1;
	TWPlayerInfo[playerid][Healing] = -1;
	TWPlayerInfo[playerid][OnTower] = 0;
	TWPlayerInfo[playerid][pHealing] = -1;
	TWPlayerInfo[playerid][BombedShips] = 0;
	TWPlayerInfo[playerid][TookOver] = 0;
 	TWPlayerInfo[playerid][GamesWon] = 0;
 	TWPlayerInfo[playerid][GamesLost] = 0;
 	TWPlayerInfo[playerid][AtomSoundPlayed] = 0;
 	TWPlayerInfo[playerid][GasBombMSG] = 0;
 	TWPlayerInfo[playerid][GasMask] = 0;
 	TWPlayerInfo[playerid][GasMaskOn] = 0;
	TWPlayerInfo[playerid][Class] = NOCLASS;
	TWPlayerInfo[playerid][AirRank] = 1;
	TWPlayerInfo[playerid][MedicRank] = 1;
	TWPlayerInfo[playerid][PeopleSaved] = 0;
	TWPlayerInfo[playerid][LeadersKilled] = 0;
	TWPlayerInfo[playerid][Survives] = 0;
	TWPlayerInfo[playerid][AsLeader] = 0;
	TWPlayerInfo[playerid][AlreadyLeader] = 0;
	TWPlayerInfo[playerid][AtomicBought] = 0;
    TWPlayerInfo[playerid][SquadID] = 0;
    TWPlayerInfo[playerid][Money]=0;
 	DestroyAllPlayerTWBombs(playerid);
	forLoop(b, MAX_BOMB_TYPES)
    {
    	PlayerInfo[playerid][bombsleft][b] = floatround(gBombID[b][8]);
    	TWPlayerInfo[playerid][TWBombsLeft][b] = floatround(gBombID[b][8]);
	}
}

stock OnConnectCreateTDs(playerid)
{
	TWPlayerInfo[playerid][ClassTXT]=CreatePlayerTextDraw(playerid, 567.666503, 99.518470, "axis pilot");
	PlayerTextDrawLetterSize(playerid, TWPlayerInfo[playerid][ClassTXT], 0.162915, 1.314810);
	PlayerTextDrawTextSize(playerid, TWPlayerInfo[playerid][ClassTXT], 550.000122, 78.814826);
	PlayerTextDrawAlignment(playerid, TWPlayerInfo[playerid][ClassTXT], 2);
	PlayerTextDrawColor(playerid, TWPlayerInfo[playerid][ClassTXT], -1);
	PlayerTextDrawUseBox(playerid, TWPlayerInfo[playerid][ClassTXT], true);
	PlayerTextDrawBoxColor(playerid, TWPlayerInfo[playerid][ClassTXT], 119);
	PlayerTextDrawSetShadow(playerid, TWPlayerInfo[playerid][ClassTXT], 0);
	PlayerTextDrawSetOutline(playerid, TWPlayerInfo[playerid][ClassTXT], 1);
	PlayerTextDrawBackgroundColor(playerid, TWPlayerInfo[playerid][ClassTXT], 51);
	PlayerTextDrawFont(playerid, TWPlayerInfo[playerid][ClassTXT], 2);
	PlayerTextDrawSetProportional(playerid, TWPlayerInfo[playerid][ClassTXT], 1);
	
	TWPlayerInfo[playerid][RankTXT]=CreatePlayerTextDraw(playerid, 567.833129, 117.629600, "general");
	PlayerTextDrawLetterSize(playerid, TWPlayerInfo[playerid][RankTXT], 0.162915, 1.314810);
	PlayerTextDrawTextSize(playerid, TWPlayerInfo[playerid][RankTXT], 552.083435, 78.814826);
	PlayerTextDrawAlignment(playerid, TWPlayerInfo[playerid][RankTXT], 2);
	PlayerTextDrawColor(playerid, TWPlayerInfo[playerid][RankTXT], -1);
	PlayerTextDrawUseBox(playerid, TWPlayerInfo[playerid][RankTXT], true);
	PlayerTextDrawBoxColor(playerid, TWPlayerInfo[playerid][RankTXT], 119);
	PlayerTextDrawSetShadow(playerid, TWPlayerInfo[playerid][RankTXT], 0);
	PlayerTextDrawSetOutline(playerid, TWPlayerInfo[playerid][RankTXT], 1);
	PlayerTextDrawBackgroundColor(playerid, TWPlayerInfo[playerid][RankTXT], 51);
	PlayerTextDrawFont(playerid, TWPlayerInfo[playerid][RankTXT], 2);
	PlayerTextDrawSetProportional(playerid, TWPlayerInfo[playerid][RankTXT], 1);

	PlayerInfo[playerid][BombTXT] = CreatePlayerTextDraw(playerid, 320.000061, 429.333526, "Atomic bomb~n~20");
	PlayerTextDrawLetterSize(playerid, PlayerInfo[playerid][BombTXT], 0.150832, 1.034814);
	PlayerTextDrawTextSize(playerid, PlayerInfo[playerid][BombTXT], 170.833312, 69.999946);
	PlayerTextDrawAlignment(playerid, PlayerInfo[playerid][BombTXT], 2);
	PlayerTextDrawColor(playerid, PlayerInfo[playerid][BombTXT], -1);
	PlayerTextDrawUseBox(playerid, PlayerInfo[playerid][BombTXT], true);
	PlayerTextDrawBoxColor(playerid, PlayerInfo[playerid][BombTXT], 153);
	PlayerTextDrawSetShadow(playerid, PlayerInfo[playerid][BombTXT], 0);
	PlayerTextDrawSetOutline(playerid, PlayerInfo[playerid][BombTXT], 1);
	PlayerTextDrawBackgroundColor(playerid, PlayerInfo[playerid][BombTXT], 51);
	PlayerTextDrawFont(playerid, PlayerInfo[playerid][BombTXT], 2);
	PlayerTextDrawSetProportional(playerid, PlayerInfo[playerid][BombTXT], 1);

    GKPlayerInfo[playerid][pTime] = CreatePlayerTextDraw(playerid, 539.917053, 2.518519, "00:00");
	PlayerTextDrawLetterSize(playerid, GKPlayerInfo[playerid][pTime], 0.132500, 1.724443);
	PlayerTextDrawAlignment(playerid, GKPlayerInfo[playerid][pTime], 1);
	PlayerTextDrawColor(playerid, GKPlayerInfo[playerid][pTime], -1);
	PlayerTextDrawSetShadow(playerid, GKPlayerInfo[playerid][pTime], 0);
	PlayerTextDrawSetOutline(playerid, GKPlayerInfo[playerid][pTime], 1);
	PlayerTextDrawBackgroundColor(playerid, GKPlayerInfo[playerid][pTime], 51);
	PlayerTextDrawFont(playerid, GKPlayerInfo[playerid][pTime], 2);
	PlayerTextDrawSetProportional(playerid, GKPlayerInfo[playerid][pTime], 1);

    PlayerInfo[playerid][InfoText]=CreatePlayerTextDraw(playerid, 332.916717, 411.703796, " ");
	PlayerTextDrawLetterSize(playerid, PlayerInfo[playerid][InfoText], 0.187916, 1.698518);
	PlayerTextDrawAlignment(playerid, PlayerInfo[playerid][InfoText], 2);
	PlayerTextDrawColor(playerid, PlayerInfo[playerid][InfoText], -1);
	PlayerTextDrawSetShadow(playerid, PlayerInfo[playerid][InfoText], 0);
	PlayerTextDrawSetOutline(playerid, PlayerInfo[playerid][InfoText], 1);
	PlayerTextDrawBackgroundColor(playerid, PlayerInfo[playerid][InfoText], 51);
	PlayerTextDrawFont(playerid, PlayerInfo[playerid][InfoText], 2);
	PlayerTextDrawSetProportional(playerid, PlayerInfo[playerid][InfoText], 1);
	
	PlayerInfo[playerid][pSpec] = CreatePlayerTextDraw(playerid, 499.583526, 22.296304, " ");
	PlayerTextDrawLetterSize(playerid, PlayerInfo[playerid][pSpec], 0.185831, 1.377036);
	PlayerTextDrawTextSize(playerid, PlayerInfo[playerid][pSpec], 632.083312, -100.592613);
	PlayerTextDrawAlignment(playerid, PlayerInfo[playerid][pSpec], 1);
	PlayerTextDrawColor(playerid, PlayerInfo[playerid][pSpec], 255);
	PlayerTextDrawSetShadow(playerid, PlayerInfo[playerid][pSpec], 0);
	PlayerTextDrawSetOutline(playerid, PlayerInfo[playerid][pSpec], 1);
	PlayerTextDrawBackgroundColor(playerid, PlayerInfo[playerid][pSpec], 255);
	PlayerTextDrawFont(playerid, PlayerInfo[playerid][pSpec], 2);
	PlayerTextDrawSetProportional(playerid, PlayerInfo[playerid][pSpec], 1);

    RPPlayerInfo[playerid][selItem] = CreatePlayerTextDraw(playerid, 639.000671, 98.889015, " ");
	PlayerTextDrawLetterSize(playerid, RPPlayerInfo[playerid][selItem], 0.145832, 1.589628);
	PlayerTextDrawAlignment(playerid, RPPlayerInfo[playerid][selItem], 3);
	PlayerTextDrawColor(playerid, RPPlayerInfo[playerid][selItem], -1);
	PlayerTextDrawSetShadow(playerid, RPPlayerInfo[playerid][selItem], 1);
	PlayerTextDrawSetOutline(playerid, RPPlayerInfo[playerid][selItem], 0);
	PlayerTextDrawBackgroundColor(playerid, RPPlayerInfo[playerid][selItem], 255);
	PlayerTextDrawFont(playerid, RPPlayerInfo[playerid][selItem], 2);
	PlayerTextDrawSetProportional(playerid, RPPlayerInfo[playerid][selItem], 1);

    RPPlayerInfo[playerid][rptName] = CreatePlayerTextDraw(playerid, 440.999938, 143.111083, " ");
	PlayerTextDrawLetterSize(playerid, RPPlayerInfo[playerid][rptName], 0.294999, 1.483852);
	PlayerTextDrawAlignment(playerid, RPPlayerInfo[playerid][rptName], 1);
	PlayerTextDrawColor(playerid, RPPlayerInfo[playerid][rptName], -1);
	PlayerTextDrawSetShadow(playerid, RPPlayerInfo[playerid][rptName], 0);
	PlayerTextDrawSetOutline(playerid, RPPlayerInfo[playerid][rptName], 1);
	PlayerTextDrawBackgroundColor(playerid, RPPlayerInfo[playerid][rptName], 51);
	PlayerTextDrawFont(playerid, RPPlayerInfo[playerid][rptName], 1);
	PlayerTextDrawSetProportional(playerid, RPPlayerInfo[playerid][rptName], 1);

    RPPlayerInfo[playerid][p_HP] = CreatePlayerTextDraw(playerid, 517.916564, 46.148281, " ");
	PlayerTextDrawLetterSize(playerid, RPPlayerInfo[playerid][p_HP], 0.242083, 2.144442);
	PlayerTextDrawAlignment(playerid, RPPlayerInfo[playerid][p_HP], 1);
	PlayerTextDrawColor(playerid, RPPlayerInfo[playerid][p_HP], -1);
	PlayerTextDrawSetShadow(playerid, RPPlayerInfo[playerid][p_HP], 0);
	PlayerTextDrawSetOutline(playerid, RPPlayerInfo[playerid][p_HP], 1);
	PlayerTextDrawBackgroundColor(playerid, RPPlayerInfo[playerid][p_HP], 51);
	PlayerTextDrawFont(playerid, RPPlayerInfo[playerid][p_HP], 2);
	PlayerTextDrawSetProportional(playerid, RPPlayerInfo[playerid][p_HP], 1);

	RPPlayerInfo[playerid][p_HU] = CreatePlayerTextDraw(playerid, 566.000061, 46.111297, " ");
	PlayerTextDrawLetterSize(playerid, RPPlayerInfo[playerid][p_HU], 0.242081, 2.165183);
	PlayerTextDrawAlignment(playerid, RPPlayerInfo[playerid][p_HU], 1);
	PlayerTextDrawColor(playerid, RPPlayerInfo[playerid][p_HU], -1);
	PlayerTextDrawSetShadow(playerid, RPPlayerInfo[playerid][p_HU], 0);
	PlayerTextDrawSetOutline(playerid, RPPlayerInfo[playerid][p_HU], 1);
	PlayerTextDrawBackgroundColor(playerid, RPPlayerInfo[playerid][p_HU], 51);
	PlayerTextDrawFont(playerid, RPPlayerInfo[playerid][p_HU], 2);
	PlayerTextDrawSetProportional(playerid, RPPlayerInfo[playerid][p_HU], 1);

	RPPlayerInfo[playerid][p_TH] = CreatePlayerTextDraw(playerid, 611.167053, 46.074180, " ");
	PlayerTextDrawLetterSize(playerid, RPPlayerInfo[playerid][p_TH], 0.242916, 2.242960);
	PlayerTextDrawAlignment(playerid, RPPlayerInfo[playerid][p_TH], 1);
	PlayerTextDrawColor(playerid, RPPlayerInfo[playerid][p_TH], -1);
	PlayerTextDrawSetShadow(playerid, RPPlayerInfo[playerid][p_TH], 0);
	PlayerTextDrawSetOutline(playerid, RPPlayerInfo[playerid][p_TH], 1);
	PlayerTextDrawBackgroundColor(playerid, RPPlayerInfo[playerid][p_TH], 51);
	PlayerTextDrawFont(playerid, RPPlayerInfo[playerid][p_TH], 2);
	PlayerTextDrawSetProportional(playerid, RPPlayerInfo[playerid][p_TH], 1);

    RPPlayerInfo[playerid][p_AL] = CreatePlayerTextDraw(playerid, 518.833801, 73.000114, " ");
	PlayerTextDrawLetterSize(playerid, RPPlayerInfo[playerid][p_AL], 0.208749, 2.305182);
	PlayerTextDrawAlignment(playerid, RPPlayerInfo[playerid][p_AL], 1);
	PlayerTextDrawColor(playerid, RPPlayerInfo[playerid][p_AL], -1);
	PlayerTextDrawSetShadow(playerid, RPPlayerInfo[playerid][p_AL], 0);
	PlayerTextDrawSetOutline(playerid, RPPlayerInfo[playerid][p_AL], 1);
	PlayerTextDrawBackgroundColor(playerid, RPPlayerInfo[playerid][p_AL], 51);
	PlayerTextDrawFont(playerid, RPPlayerInfo[playerid][p_AL], 2);
	PlayerTextDrawSetProportional(playerid, RPPlayerInfo[playerid][p_AL], 1);

	RPPlayerInfo[playerid][p_CA] = CreatePlayerTextDraw(playerid, 584.000427, 73.481590, " ");
	PlayerTextDrawLetterSize(playerid, RPPlayerInfo[playerid][p_CA], 0.208749, 2.305182);
	PlayerTextDrawAlignment(playerid, RPPlayerInfo[playerid][p_CA], 1);
	PlayerTextDrawColor(playerid, RPPlayerInfo[playerid][p_CA], -1);
	PlayerTextDrawSetShadow(playerid, RPPlayerInfo[playerid][p_CA], 0);
	PlayerTextDrawSetOutline(playerid, RPPlayerInfo[playerid][p_CA], 1);
	PlayerTextDrawBackgroundColor(playerid, RPPlayerInfo[playerid][p_CA], 51);
	PlayerTextDrawFont(playerid, RPPlayerInfo[playerid][p_CA], 2);
	PlayerTextDrawSetProportional(playerid, RPPlayerInfo[playerid][p_CA], 1);

	PlayerInfo[playerid][tSpawning] = CreatePlayerTextDraw(playerid,79.166641, 376.444396, "Spawning in~n~Protect the president");
	PlayerTextDrawLetterSize(playerid, PlayerInfo[playerid][tSpawning], 0.207083, 1.765925);
	PlayerTextDrawAlignment(playerid, PlayerInfo[playerid][tSpawning], 2);
	PlayerTextDrawColor(playerid, PlayerInfo[playerid][tSpawning], -1);
	PlayerTextDrawSetShadow(playerid, PlayerInfo[playerid][tSpawning], 0);
	PlayerTextDrawSetOutline(playerid, PlayerInfo[playerid][tSpawning], 1);
	PlayerTextDrawBackgroundColor(playerid, PlayerInfo[playerid][tSpawning], 255);
	PlayerTextDrawFont(playerid, PlayerInfo[playerid][tSpawning], 2);
	PlayerTextDrawSetProportional(playerid, PlayerInfo[playerid][tSpawning], 1);
	
	FFAPlayerInfo[playerid][TXT_Treasures] = CreatePlayerTextDraw(playerid, 579.166992, 1.037101, "treasures: 102/102");
	PlayerTextDrawLetterSize(playerid, FFAPlayerInfo[playerid][TXT_Treasures], 0.124165, 1.522219);
	PlayerTextDrawTextSize(playerid, FFAPlayerInfo[playerid][TXT_Treasures], 494.583251, 61.703643);
	PlayerTextDrawAlignment(playerid, FFAPlayerInfo[playerid][TXT_Treasures], 2);
	PlayerTextDrawColor(playerid, FFAPlayerInfo[playerid][TXT_Treasures], -1);
	PlayerTextDrawUseBox(playerid, FFAPlayerInfo[playerid][TXT_Treasures], true);
	PlayerTextDrawBoxColor(playerid, FFAPlayerInfo[playerid][TXT_Treasures], -902627175);
	PlayerTextDrawSetShadow(playerid, FFAPlayerInfo[playerid][TXT_Treasures], 0);
	PlayerTextDrawSetOutline(playerid, FFAPlayerInfo[playerid][TXT_Treasures], 1);
	PlayerTextDrawBackgroundColor(playerid, FFAPlayerInfo[playerid][TXT_Treasures], 255);
	PlayerTextDrawFont(playerid, FFAPlayerInfo[playerid][TXT_Treasures], 2);
	PlayerTextDrawSetProportional(playerid, FFAPlayerInfo[playerid][TXT_Treasures], 1);
	
	createVWTexts(playerid);
}
stock OnConnectCreate3Ds(playerid)
{
	PlayerInfo[playerid][ModeLabel] = CreateDynamic3DTextLabel(" ", 0xff0000AA, 0.0, 0.0, 1.2, 15.0, playerid, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);
	PlayerInfo[playerid][TeamLabel] = CreateDynamic3DTextLabel(" ", 0xff0000AA, 0.0, 0.0, 0.7, 15.0, playerid, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);

	RPPlayerInfo[playerid][NameLabel] = CreateDynamic3DTextLabel(" ", 0xff0000AA, 0.0, 0.0, -1.0, 10.0, playerid, INVALID_VEHICLE_ID, 1, -1, -1, -1, 100.0);
	forLoop(i, MAX_PLAYERS)
	{
	    PlayerInfo[playerid][EnemyFriend][i] = CreateDynamic3DTextLabel(" ", 0xff0000AA, 0.0, 0.0, -1.0, 150.0, i, INVALID_VEHICLE_ID, 1, -1, -1, playerid, 100.0);
	}

	UpdateDynamic3DTextLabelText(PlayerInfo[playerid][ModeLabel], 0xFFFF00AA, " ");
	UpdateDynamic3DTextLabelText(PlayerInfo[playerid][TeamLabel], 0xFFFF00AA, " ");
	UpdateDynamic3DTextLabelText(RPPlayerInfo[playerid][NameLabel], 0xFFFF00AA, " ");
}
stock OnDisconnectDestroy3Ds(playerid)
{
	DestroyTheDynamic3DTextLabel(PlayerInfo[playerid][ModeLabel]);
    DestroyTheDynamic3DTextLabel(PlayerInfo[playerid][TeamLabel]);
	DestroyTheDynamic3DTextLabel(RPPlayerInfo[playerid][NameLabel]);
	forLoop(i, MAX_PLAYERS)
	{
	    DestroyTheDynamic3DTextLabel(PlayerInfo[playerid][EnemyFriend][i]);
	}
}

stock DestroyPlayerStuff(playerid)
{
	//printf("DEBUG CFONTROL DestroyPlayerStuff 1");
    if(PlayerInfo[playerid][Vehicle] != -1)
		CarDeleter(PlayerInfo[playerid][Vehicle]);
	PlayerInfo[playerid][Vehicle]=-1;
	
	if(PlayerInfo[playerid][SpeedoObject] != -1)
		DestroyTheDynamicObject(PlayerInfo[playerid][SpeedoObject]);
	PlayerInfo[playerid][SpeedoObject] = -1;

	if(PlayerInfo[playerid][RacePlaceObject] != -1)
		DestroyTheDynamicObject(PlayerInfo[playerid][RacePlaceObject]);
	PlayerInfo[playerid][RacePlaceObject] = -1;

	DestroyTexts(playerid);
	//OnDisconnectDestroy3Ds(playerid);
	DestroyPlayerDDShip(playerid);
	DestroyAllPlayerTWBombs(playerid);
	PlayerInfo[playerid][StuffCreated] = 0;
	//printf("DEBUG CFONTROL DestroyPlayerStuff 2");
}

stock DestroyTexts(playerid)
{
    PlayerTextDrawDestroy(playerid, PlayerInfo[playerid][BombTXT]);
    PlayerTextDrawDestroy(playerid, PlayerInfo[playerid][InfoText]);
    PlayerTextDrawDestroy(playerid, GKPlayerInfo[playerid][pTime]);
    PlayerTextDrawDestroy(playerid, PlayerInfo[playerid][pSpec]);
    PlayerTextDrawDestroy(playerid, FFAPlayerInfo[playerid][TXT_Treasures]);
	PlayerTextDrawDestroy(playerid, PlayerInfo[playerid][tSpawning]);
    PlayerTextDrawDestroy(playerid, TWPlayerInfo[playerid][ClassTXT]);
    PlayerTextDrawDestroy(playerid, TWPlayerInfo[playerid][RankTXT]);
    PlayerTextDrawDestroy(playerid, RPPlayerInfo[playerid][selItem]);
    PlayerTextDrawDestroy(playerid, RPPlayerInfo[playerid][rptName]);
    PlayerTextDrawDestroy(playerid, RPPlayerInfo[playerid][p_HP]);
    PlayerTextDrawDestroy(playerid, RPPlayerInfo[playerid][p_TH]);
    PlayerTextDrawDestroy(playerid, RPPlayerInfo[playerid][p_HU]);
    PlayerTextDrawDestroy(playerid, RPPlayerInfo[playerid][p_AL]);
    PlayerTextDrawDestroy(playerid, RPPlayerInfo[playerid][p_CA]);
    destroyVWTexts(playerid);
}

stock OnConnectRemoveObjects(playerid)
{
	//refill hpss
	RemoveBuildingForPlayer(playerid, 1302, 0.0, 0.0, 0.0, 6000.0);
	RemoveBuildingForPlayer(playerid, 1209, 0.0, 0.0, 0.0, 6000.0);
	RemoveBuildingForPlayer(playerid, 955, 0.0, 0.0, 0.0, 6000.0);
	RemoveBuildingForPlayer(playerid, 956, 0.0, 0.0, 0.0, 6000.0);
	RemoveBuildingForPlayer(playerid, 1775, 0.0, 0.0, 0.0, 6000.0);
	RemoveBuildingForPlayer(playerid, 1776, 0.0, 0.0, 0.0, 6000.0);
	RemoveBuildingForPlayer(playerid, 1977, 0.0, 0.0, 0.0, 6000.0);

	//ctf lv basea for blues
	RemoveBuildingForPlayer(playerid, 985, 2497.4063, 2777.0703, 11.5313, 0.25);
	RemoveBuildingForPlayer(playerid, 986, 2497.4063, 2769.1094, 11.5313, 0.25);
/*
	//horst's base
	RemoveBuildingForPlayer(playerid, 8235, 1166.7188, 1354.2109, 11.7813, 0.25);
	RemoveBuildingForPlayer(playerid, 8231, 1166.6406, 1354.2031, 11.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 8230, 1166.7188, 1354.2109, 11.7813, 0.25);
	RemoveBuildingForPlayer(playerid, 8237, 1172.6250, 1347.4844, 9.9141, 0.25);
	RemoveBuildingForPlayer(playerid, 3371, -248.0391, 995.8828, 21.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 3305, -248.0391, 995.8828, 21.6719, 0.25);
*/
    //north chicken
	RemoveBuildingForPlayer(playerid, 16776, -237.0234, 2662.8359, 62.6094, 0.25);

	RemoveBuildingForPlayer(playerid, 12956, 96.3281, -261.1953, 3.8594, 0.25);//airborne object

	RemoveBuildingForPlayer(playerid, 3366, 276.6563, 2023.7578, 16.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 3366, 276.6563, 1989.5469, 16.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 3366, 276.6563, 1955.7656, 16.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 3268, 276.6563, 2023.7578, 16.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 3268, 276.6563, 1989.5469, 16.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 3268, 276.6563, 1955.7656, 16.6328, 0.25);

	// area 69
	RemoveBuildingForPlayer(playerid, 3267, 188.2422, 2081.6484, 22.4453, 0.25);
	RemoveBuildingForPlayer(playerid, 3277, 188.2422, 2081.6484, 22.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 16294, 15.1797, 1719.3906, 21.6172, 0.25);
	RemoveBuildingForPlayer(playerid, 3267, 15.6172, 1719.1641, 22.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 3277, 15.6016, 1719.1719, 22.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 3267, 237.6953, 1696.8750, 22.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 3277, 237.6797, 1696.8828, 22.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 16293, 238.0703, 1697.5547, 21.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 16093, 211.6484, 1810.1563, 20.7344, 0.25);
	RemoveBuildingForPlayer(playerid, 16638, 211.7266, 1809.1875, 18.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 1411, 347.1953, 1799.2656, 18.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 1411, 342.9375, 1796.2891, 18.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 16670, 330.7891, 1813.2188, 17.8281, 0.25);
	RemoveBuildingForPlayer(playerid, 1697, 220.3828, 1835.3438, 23.2344, 0.25);
	RemoveBuildingForPlayer(playerid, 1697, 228.7969, 1835.3438, 23.2344, 0.25);
	RemoveBuildingForPlayer(playerid, 1697, 236.9922, 1835.3438, 23.2344, 0.25);
	RemoveBuildingForPlayer(playerid, 16095, 279.1328, 1829.7813, 16.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 16094, 191.1406, 1870.0391, 21.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 16096, 120.5078, 1934.0313, 19.8281, 0.25);
	RemoveBuildingForPlayer(playerid, 16671, 193.9531, 2051.7969, 20.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 3267, 354.4297, 2028.4922, 22.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 3277, 354.4141, 2028.5000, 22.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 16668, 357.9375, 2049.4219, 16.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 16669, 380.2578, 1914.9609, 17.4297, 0.25);

	//printf("DEBUG CFONTROL OnConnectRemoveObjects 2");
}

public OnPlayerRequestSpawn(playerid)
{
	return 1;
}

forward FixPlayerrr(playerid);
public FixPlayerrr(playerid)
{
	//printf("DEBUG CFONTROL FixPlayerrr 1");
    ToggleThePlayerSpectating(playerid,0);
    PlayerInfo[playerid][NoACCheck] = 0;
	SpawnPlayer(playerid);
	return 1;
	//printf("DEBUG CFONTROL FixPlayerrr 2");
	//OnPlayerSpawn(playerid);
}
stock A_SpawnPlayer(playerid)
{
    TogglePlayerControllable(playerid,true);
    ToggleThePlayerSpectating(playerid, false);
    ResetWeapons(playerid);
    FixBeforeSpawn(playerid);
    OnPlayerSpawn(playerid);
    //SetCameraBehindPlayer(playerid);
    //SpawnPlayer(playerid);
}
public OnPlayerRequestClass(playerid, classid)
{
    ToggleThePlayerSpectating(playerid,1);
    SetTimerEx("FixPlayerrr", 100, false, "i", playerid);
	return 1;
}

forward ChangeWeather();
public ChangeWeather()
{
    switch(random(5))
	{
	    case 0:ModeWeather[TW]=4,ModeTime[TW]=12;
	    case 1:ModeWeather[TW]=5,ModeTime[TW]=0;
	    case 2:ModeWeather[TW]=9,ModeTime[TW]=12;
	    case 3:ModeWeather[TW]=2,ModeTime[TW]=9;
	    case 4:ModeWeather[TW]=18,ModeTime[TW]=20;
	}
	forLoop(i, MAX_PLAYERS)if(IsPlayerConnected(i))
 	{
 	    if(PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][PlayerMode] == TW)
 		{
 		    SetPlayerTime(i, ModeTime[PlayerInfo[i][PlayerMode]], 0);
 		    SetPlayerWeather(i, ModeWeather[PlayerInfo[i][PlayerMode]]);
		}
	}
}



forward SetPlayerTheWeather(playerid);
public SetPlayerTheWeather(playerid)
{
	//printf("DEBUG CFONTROL SetPlayerTheWeather 1");
    if(PlayerInfo[playerid][PlayerMode] == TW)
    {
		SetPlayerWeather(playerid, ModeWeather[TW]);
	}
	TWPlayerInfo[playerid][AtomSoundPlayed]=0;
	//printf("DEBUG CFONTROL SetPlayerTheWeather 2");
}
forward GasBombMSGOff(playerid);
public GasBombMSGOff(playerid)
{
	TWPlayerInfo[playerid][GasBombMSG] = 0;
}

forward MGVehicleCheck(i);
public MGVehicleCheck(i)
{
	if(!IsPlayerConnected(i) || IsPlayerNPC(i))return 0;
    if(!IsPlayerInAnyVehicle(i) && PlayerInfo[i][Spawned] == 1)
	{
	    if(PlayerInfo[i][PlayerMode]==TW && GetPlayerVirtualWorld(i)==W_TW)
	    {
		    if(TWPlayerInfo[i][Class] != LEADER && TWPlayerInfo[i][Class] != VICE && TWPlayerInfo[i][Class] != BODYGUARD && PlayerInfo[i][Spawned] == 1)
			{
			    new vehicle = GetPlayerSurfingVehicleID(i);
		        if(GetVehicleModel(vehicle) == 478)
		        {
		            new u = GetVehicleDriver(vehicle);
		            if(u != -1)
		            {
	                    if(PlayerInfo[u][PlayerMode] == TW && PlayerInfo[u][pTeam] == PlayerInfo[i][pTeam])
						{
                            if(PlayerInfo[i][OnMiniGunCar] == -1)
				            {
                                PlayerInfo[i][OnMiniGunCar] = u;
								GiveWeapon(i,WEAPON_MINIGUN,20);
				            }
						}
					}
		        }
				else if(PlayerInfo[i][OnMiniGunCar] > -1)
		        {
					RemovePlayerWeapon(i, WEAPON_MINIGUN);
                    PlayerInfo[i][OnMiniGunCar] = -1;
		        }
			}
		}
	}
	return 1;
}

stock AxisWin()
{
	//printf("DEBUG CFONTROL AxisWin 1");
    forLoop(y, MAX_PLAYERS)
    {
		if(IsPlayerConnected(y) && PlayerInfo[y][PlayerMode] == TW && PlayerInfo[y][Spawned]==1 && !PlayerInfo[y][Jailed] && !IsPlayerNPC(y))
		{
			if(PlayerInfo[y][pTeam]== AXIS)
			{
			    TWPlayerInfo[y][GamesWon] ++;
			    GiveThePlayerMoney(y, 3000);
				SendClientMessage(y,red1,"{33FF33}Notice:{FFFFFF} You won this round, you got $3,000!");
				ChangeThem(y);
			}

			if(PlayerInfo[y][pTeam]== ALLIES)
			{
			    TWPlayerInfo[y][GamesLost] ++;
			    GiveThePlayerMoney(y, -3000);
				SendClientMessage(y,red1,"{FF0000}Notice:{FFFFFF} You lost this round, you lost $3,000!");
			    ChangeThem(y);
			}
			if(PlayerInfo[y][pTeam]== AXIS && TWPlayerInfo[y][Class] == LEADER)
			{
			    RefoundSurvivor(y);
			    TWPlayerInfo[y][Class] = SOLDIER;
			}
		}
	}
	db_SaveChat(-1, TW,"[WAR NEWS] Axis have won the war!");
	//printf("DEBUG CFONTROL AxisWin 2");
}
stock AllyWin()
{
	//printf("DEBUG CFONTROL AllyWin 1");
    forLoop(y, MAX_PLAYERS)
    {
		if(IsPlayerConnected(y) && PlayerInfo[y][PlayerMode] == TW && PlayerInfo[y][Spawned]==1 && !PlayerInfo[y][Jailed] && !IsPlayerNPC(y))
		{
			if(PlayerInfo[y][pTeam]== ALLIES)
			{
			    TWPlayerInfo[y][GamesWon] ++;
			    GiveThePlayerMoney(y, 3000);
				SendClientMessage(y,red1,"{33FF33}Notice:{FFFFFF} You won this round, you got $3,000!");
				ChangeThem(y);
			}

			if(PlayerInfo[y][pTeam]== AXIS)
			{
			    TWPlayerInfo[y][GamesLost] ++;
			    GiveThePlayerMoney(y, -3000);
				SendClientMessage(y,red1,"{FF0000}Notice:{FFFFFF} You lost this round, you lost $3,000!");
			    ChangeThem(y);
			}
			if(PlayerInfo[y][pTeam]== ALLIES && TWPlayerInfo[y][Class] == LEADER)
			{
			    RefoundSurvivor(y);
			    TWPlayerInfo[y][Class] = SOLDIER;
			}
		}
	}
	db_SaveChat(-1, TW,"[WAR NEWS] Allies have won the war!");
	//printf("DEBUG CFONTROL AllyWin 2");
}
stock getRandMode()
{
    new mode = TW;
	if(ServerInfo[OffMode] == -1)
	{
	    switch(random(12))
		{
		    case 0: mode = TW;
		    case 1: mode = TRP;
		    case 2: mode = FFA;
		    case 3: mode = CO;
		    case 4: mode = CTF;
		    case 5: mode = STUNT;
		    case 6: mode = DM;
		    case 7: mode = ZO;
		    case 8: mode = PJ;
		    case 9: mode = PTP;
		    case 10: mode = GK;
		    case 11: mode = VW;
		}
	}
	else mode = ServerInfo[OffMode];
	return mode;
}

forward ShowMMTexts(playerid);
public ShowMMTexts(playerid)
{
    new mode = getRandMode();
	ClearTheChatForPlayer(playerid);
 	HideTDs(playerid);
    TextDrawShowForPlayer(playerid,MM_Texts[BG]);
    TextDrawShowForPlayer(playerid,MM_Texts[Line]);
 	TextDrawShowForPlayer(playerid,MM_Texts[Play]);
 	PlayerTextDrawShow(playerid,PlayerInfo[playerid][tSpawning]);
 	forLoop(id, MM_MAX_MODES)
	{
		TextDrawShowForPlayer(playerid,MM_Texts[Modes][id]);
		TextDrawShowForPlayer(playerid,MM_Texts[Players][id]);
	}

	PlayerInfo[playerid][PlayerMode] = -1;
 	fixPlayerName(playerid, true);
 	
    PlayerInfo[playerid][TagState] = 1;
	TextDrawHideForPlayer(playerid,ServerInfo[Version_TD]);
	TextDrawHideForPlayer(playerid,ServerInfo[MenuCMD_TD]);

	SetHealth(playerid,100000);
    SetPlayerSkin(playerid,231);
	SetPlayerColor(playerid,grey12);
	TogglePlayerControllable(playerid,false);
	
	updateMMSelectedMode(playerid, mode);
	SelectTextDraw(playerid, SELECT_TEXT_DRAW);
    return 1;
}

stock HideMMTexts(playerid)
{
	TextDrawHideForPlayer(playerid,MM_Texts[BG]);
    TextDrawHideForPlayer(playerid,MM_Texts[Line]);
 	TextDrawHideForPlayer(playerid,MM_Texts[Play]);
 	PlayerTextDrawHide(playerid,PlayerInfo[playerid][tSpawning]);
 	forLoop(id, MM_MAX_MODES)
	{
		TextDrawHideForPlayer(playerid,MM_Texts[Modes][id]);
		TextDrawHideForPlayer(playerid,MM_Texts[Players][id]);
		TextDrawHideForPlayer(playerid,MM_Texts[Selected][id]);
	}
 	forLoop(id, MM_MAX_TW_C)
	{
		TextDrawHideForPlayer(playerid,MM_Texts[TW_C][id]);
		TextDrawHideForPlayer(playerid,MM_Texts[ColSelect][id]);
	}
 	forLoop(id, MM_MAX_TW_CL)
 	{
		TextDrawHideForPlayer(playerid,MM_Texts[TW_CL][id]);
		TextDrawHideForPlayer(playerid,MM_Texts[TW_CLSelect][id]);
	}
		
 	forLoop(id, MM_MAX_CO_C)
		TextDrawHideForPlayer(playerid,MM_Texts[CO_C][id]);
		
 	forLoop(id, MM_MAX_CTF_C)
		TextDrawHideForPlayer(playerid,MM_Texts[CTF_C][id]);

 	forLoop(id, MM_MAX_PTP_C)
		TextDrawHideForPlayer(playerid,MM_Texts[PTP_C][id]);
}

stock HideTDs(playerid)
{
	HideIntroForPlayer(playerid);
    HideNewMapTextsDM(playerid);
    HideSpecTexts(playerid);
    HideDMAliveText(playerid);
    HideDMDDTexts(playerid);
    HideNewMapTextsPJ(playerid);
    HidePJAliveText(playerid);
    HidekSpree(playerid);
    HidepInfo(playerid);
	HideMMTexts(playerid);
	HideTankAimForPlayer(playerid);
    HideRocketAimForPlayer(playerid);
	hideCOTexts(playerid);
	hideCTFTexts(playerid);
	hideVWTexts(playerid);
	hidePTPTexts(playerid);
	hideZOTexts(playerid);
	hideGKTexts(playerid);

    TextDrawHideForPlayer(playerid,ServerInfo[Kill_TD]);
    TextDrawHideForPlayer(playerid,ServerInfo[MenuCMD_TD]);

    TextDrawHideForPlayer(playerid,RPInfo[StatsBackground]);
    TextDrawHideForPlayer(playerid,RPInfo[rp_Map]);
    TextDrawHideForPlayer(playerid,RPInfo[DarkScreen]);
    forLoop(i,6)TextDrawHideForPlayer(playerid,RPInfo[Figures][i]);
    TextDrawHideForPlayer(playerid,RPInfo[rplName]);
    TextDrawHideForPlayer(playerid,RPInfo[rpfName]);
    TextDrawHideForPlayer(playerid,RPInfo[TD_Time]);
    
    PlayerTextDrawHide(playerid, FFAPlayerInfo[playerid][TXT_Treasures]);
    
    PlayerTextDrawHide(playerid, RPPlayerInfo[playerid][selItem]);
    PlayerTextDrawHide(playerid, RPPlayerInfo[playerid][rptName]);
    PlayerTextDrawHide(playerid, RPPlayerInfo[playerid][p_HP]);
    PlayerTextDrawHide(playerid, RPPlayerInfo[playerid][p_TH]);
    PlayerTextDrawHide(playerid, RPPlayerInfo[playerid][p_HU]);
    PlayerTextDrawHide(playerid, RPPlayerInfo[playerid][p_AL]);
    PlayerTextDrawHide(playerid, RPPlayerInfo[playerid][p_CA]);

    TextDrawHideForPlayer(playerid,DMTXTD[mInfo]);
    TextDrawHideForPlayer(playerid,PJTXTD[mInfo]);
    TextDrawHideForPlayer(playerid,TLInfo[TimeleftTD]);

	TextDrawHideForPlayer(playerid,ServerInfo[Bomber_TD]);
	PlayerTextDrawHide(playerid,PlayerInfo[playerid][BombTXT]);
	PlayerTextDrawHide(playerid,PlayerInfo[playerid][InfoText]);

	PlayerTextDrawHide(playerid,TWPlayerInfo[playerid][ClassTXT]);
	PlayerTextDrawHide(playerid,TWPlayerInfo[playerid][RankTXT]);
	TextDrawHideForPlayer(playerid,TWInfo[ClassTXT]);
	TextDrawHideForPlayer(playerid,TWInfo[RankTXT]);
	TextDrawHideForPlayer(playerid,TWInfo[WarBGTXT]);
	TextDrawHideForPlayer(playerid,TWInfo[AlliesTXT]);
	TextDrawHideForPlayer(playerid,TWInfo[AxisTXT]);
}
stock ShowIntroForPlayer(playerid)
{
    TextDrawShowForPlayer(playerid,ServerInfo[mIntro_TD]);
    PlayerPlaySound(playerid,6200,0.0,0.0,0.0);
}
stock HideIntroForPlayer(playerid)
{
    TextDrawHideForPlayer(playerid,ServerInfo[mIntro_TD]);
}

stock createMMTDs()
{
	new Float:start = 21.85, Float:coef = 17.0;
	MM_Texts[BG] = TextDrawCreate(158.249725, -9.907411, "usebox");
	TextDrawLetterSize(MM_Texts[BG], 0.000000, 51.828411);
	TextDrawTextSize(MM_Texts[BG], 2.999994, 0.000000);
	TextDrawAlignment(MM_Texts[BG], 1);
	TextDrawColor(MM_Texts[BG], 0);
	TextDrawUseBox(MM_Texts[BG], true);
	TextDrawBoxColor(MM_Texts[BG], 102);
	TextDrawSetShadow(MM_Texts[BG], 0);
	TextDrawSetOutline(MM_Texts[BG], 0);
	TextDrawFont(MM_Texts[BG], 0);

	MM_Texts[Line] = TextDrawCreate(158.250000, 366.537048, "usebox");
	TextDrawLetterSize(MM_Texts[Line], 0.000000, 0.009464);
	TextDrawTextSize(MM_Texts[Line], 3.000000, 0.000000);
	TextDrawAlignment(MM_Texts[Line], 1);
	TextDrawColor(MM_Texts[Line], 0);
	TextDrawUseBox(MM_Texts[Line], true);
	TextDrawBoxColor(MM_Texts[Line], -1);
	TextDrawSetShadow(MM_Texts[Line], 0);
	TextDrawSetOutline(MM_Texts[Line], 0);
	TextDrawFont(MM_Texts[Line], 0);

	MM_Texts[Play] = TextDrawCreate(47.000144, 415.777893, "   Spawn");
	TextDrawLetterSize(MM_Texts[Play], 0.281666, 2.279258);
	TextDrawTextSize(MM_Texts[Play], 109.583320, 20.851848);
	TextDrawAlignment(MM_Texts[Play], 1);
	TextDrawColor(MM_Texts[Play], -1);
	TextDrawUseBox(MM_Texts[Play], true);
	TextDrawBoxColor(MM_Texts[Play], -147897910);
	TextDrawSetShadow(MM_Texts[Play], 0);
	TextDrawSetOutline(MM_Texts[Play], 1);
	TextDrawBackgroundColor(MM_Texts[Play], 255);
	TextDrawFont(MM_Texts[Play], 2);
	TextDrawSetProportional(MM_Texts[Play], 1);
	TextDrawSetSelectable(MM_Texts[Play],1);

	forLoop(id, MM_MAX_MODES)
	{
	    MM_Texts[Modes][id] = TextDrawCreate(14.499929, start, MM_Mode_Names[id]);
		TextDrawLetterSize(MM_Texts[Modes][id], 0.213750, 2.025183);
		TextDrawTextSize(MM_Texts[Modes][id], 121.666687, coef);
		TextDrawAlignment(MM_Texts[Modes][id], 1);
		TextDrawColor(MM_Texts[Modes][id], -1);
		TextDrawUseBox(MM_Texts[Modes][id], true);
		TextDrawBoxColor(MM_Texts[Modes][id], MM_Mode_Colors[id]);
		TextDrawSetShadow(MM_Texts[Modes][id], 0);
		TextDrawSetOutline(MM_Texts[Modes][id], 1);
		TextDrawBackgroundColor(MM_Texts[Modes][id], 255);
		TextDrawFont(MM_Texts[Modes][id], 2);
		TextDrawSetProportional(MM_Texts[Modes][id], 1);
		TextDrawSetSelectable(MM_Texts[Modes][id],1);

		MM_Texts[Players][id] = TextDrawCreate(135.333236, start, "0");
		TextDrawLetterSize(MM_Texts[Players][id], 0.213750, 2.025183);
		TextDrawTextSize(MM_Texts[Players][id], 128.750045, 19.185180);
		TextDrawAlignment(MM_Texts[Players][id], 2);
		TextDrawColor(MM_Texts[Players][id], -1);
		TextDrawUseBox(MM_Texts[Players][id], true);
		TextDrawBoxColor(MM_Texts[Players][id], -1061109505);
		TextDrawSetShadow(MM_Texts[Players][id], 0);
		TextDrawSetOutline(MM_Texts[Players][id], 1);
		TextDrawBackgroundColor(MM_Texts[Players][id], 255);
		TextDrawFont(MM_Texts[Players][id], 2);
		TextDrawSetProportional(MM_Texts[Players][id], 1);

		MM_Texts[Selected][id] = TextDrawCreate(147.416458, start, "_");
		TextDrawLetterSize(MM_Texts[Selected][id], 0.176666, 2.016665);
		TextDrawTextSize(MM_Texts[Selected][id], 149.166748, 16.592588);
		TextDrawAlignment(MM_Texts[Selected][id], 1);
		TextDrawColor(MM_Texts[Selected][id], -1);
		TextDrawUseBox(MM_Texts[Selected][id], true);
		TextDrawBoxColor(MM_Texts[Selected][id], -243522358);
		TextDrawSetShadow(MM_Texts[Selected][id], 0);
		TextDrawSetOutline(MM_Texts[Selected][id], 1);
		TextDrawBackgroundColor(MM_Texts[Selected][id], 255);
		TextDrawFont(MM_Texts[Selected][id], 2);
		TextDrawSetProportional(MM_Texts[Selected][id], 1);
		
		if(id < MM_MAX_TW_C)
		{
		    MM_Texts[TW_C][id] = TextDrawCreate(163.416580, start, MM_TW_C_Names[id]);
			TextDrawLetterSize(MM_Texts[TW_C][id], 0.213750, 2.025183);
			TextDrawTextSize(MM_Texts[TW_C][id], 251.250045, coef);
			TextDrawAlignment(MM_Texts[TW_C][id], 1);
			TextDrawColor(MM_Texts[TW_C][id], -1);
			TextDrawUseBox(MM_Texts[TW_C][id], true);
			TextDrawBoxColor(MM_Texts[TW_C][id], 102);
			TextDrawSetShadow(MM_Texts[TW_C][id], 0);
			TextDrawSetOutline(MM_Texts[TW_C][id], 1);
			TextDrawBackgroundColor(MM_Texts[TW_C][id], 255);
			TextDrawFont(MM_Texts[TW_C][id], 2);
			TextDrawSetProportional(MM_Texts[TW_C][id], 1);
			TextDrawSetSelectable(MM_Texts[TW_C][id],1);
			
			MM_Texts[ColSelect][id] = TextDrawCreate(253.833084, start, "_");
			TextDrawLetterSize(MM_Texts[ColSelect][id], 0.176666, 2.025183);
			TextDrawTextSize(MM_Texts[ColSelect][id], 256.250122, coef);
			TextDrawAlignment(MM_Texts[ColSelect][id], 1);
			TextDrawColor(MM_Texts[ColSelect][id], -1);
			TextDrawUseBox(MM_Texts[ColSelect][id], true);
			TextDrawBoxColor(MM_Texts[ColSelect][id], -243522358);
			TextDrawSetShadow(MM_Texts[ColSelect][id], 0);
			TextDrawSetOutline(MM_Texts[ColSelect][id], 1);
			TextDrawBackgroundColor(MM_Texts[ColSelect][id], 255);
			TextDrawFont(MM_Texts[ColSelect][id], 2);
			TextDrawSetProportional(MM_Texts[ColSelect][id], 1);
		}
		
		if(id < MM_MAX_TW_CL)
		{
		    MM_Texts[TW_CL][id] = TextDrawCreate(266.916625, start, MM_TW_CL_Names[id]);
			TextDrawLetterSize(MM_Texts[TW_CL][id], 0.213750, 2.025182);
			TextDrawTextSize(MM_Texts[TW_CL][id], 351.250122, coef);
			TextDrawAlignment(MM_Texts[TW_CL][id], 1);
			TextDrawColor(MM_Texts[TW_CL][id], -1);
			TextDrawUseBox(MM_Texts[TW_CL][id], true);
			TextDrawBoxColor(MM_Texts[TW_CL][id], 102);
			TextDrawSetShadow(MM_Texts[TW_CL][id], 0);
			TextDrawSetOutline(MM_Texts[TW_CL][id], 1);
			TextDrawBackgroundColor(MM_Texts[TW_CL][id], 255);
			TextDrawFont(MM_Texts[TW_CL][id], 2);
			TextDrawSetProportional(MM_Texts[TW_CL][id], 1);
			TextDrawSetSelectable(MM_Texts[TW_CL][id],1);
			
			MM_Texts[TW_CLSelect][id] = TextDrawCreate(353.583160, start, "_");
			TextDrawLetterSize(MM_Texts[TW_CLSelect][id], 0.176666, 2.025183);
			TextDrawTextSize(MM_Texts[TW_CLSelect][id], 356.250152, 28.518512);
			TextDrawAlignment(MM_Texts[TW_CLSelect][id], 1);
			TextDrawColor(MM_Texts[TW_CLSelect][id], -1);
			TextDrawUseBox(MM_Texts[TW_CLSelect][id], true);
			TextDrawBoxColor(MM_Texts[TW_CLSelect][id], -243522358);
			TextDrawSetShadow(MM_Texts[TW_CLSelect][id], 0);
			TextDrawSetOutline(MM_Texts[TW_CLSelect][id], 1);
			TextDrawBackgroundColor(MM_Texts[TW_CLSelect][id], 255);
			TextDrawFont(MM_Texts[TW_CLSelect][id], 2);
			TextDrawSetProportional(MM_Texts[TW_CLSelect][id], 1);
		}
		
		if(id == MM_CTF || id == MM_CTF+1)
		{
		    new i = (id == MM_CTF) ? 0 : 1;
		    MM_Texts[CTF_C][i] = TextDrawCreate(163.416580, start, MM_CTF_C_Names[i]);
			TextDrawLetterSize(MM_Texts[CTF_C][i], 0.213750, 2.025183);
			TextDrawTextSize(MM_Texts[CTF_C][i], 251.250045, coef);
			TextDrawAlignment(MM_Texts[CTF_C][i], 1);
			TextDrawColor(MM_Texts[CTF_C][i], -1);
			TextDrawUseBox(MM_Texts[CTF_C][i], true);
			TextDrawBoxColor(MM_Texts[CTF_C][i], 102);
			TextDrawSetShadow(MM_Texts[CTF_C][i], 0);
			TextDrawSetOutline(MM_Texts[CTF_C][i], 1);
			TextDrawBackgroundColor(MM_Texts[CTF_C][i], 255);
			TextDrawFont(MM_Texts[CTF_C][i], 2);
			TextDrawSetProportional(MM_Texts[CTF_C][i], 1);
			TextDrawSetSelectable(MM_Texts[CTF_C][i],1);
		}
		if(id == MM_CO || id == MM_CO+1)
		{
		    new i = (id == MM_CO) ? 0 : 1;
			MM_Texts[CO_C][i] = TextDrawCreate(163.416580, start, MM_CO_C_Names[i]);
			TextDrawLetterSize(MM_Texts[CO_C][i], 0.213750, 2.025183);
			TextDrawTextSize(MM_Texts[CO_C][i], 251.250045, coef);
			TextDrawAlignment(MM_Texts[CO_C][i], 1);
			TextDrawColor(MM_Texts[CO_C][i], -1);
			TextDrawUseBox(MM_Texts[CO_C][i], true);
			TextDrawBoxColor(MM_Texts[CO_C][i], 102);
			TextDrawSetShadow(MM_Texts[CO_C][i], 0);
			TextDrawSetOutline(MM_Texts[CO_C][i], 1);
			TextDrawBackgroundColor(MM_Texts[CO_C][i], 255);
			TextDrawFont(MM_Texts[CO_C][i], 2);
			TextDrawSetProportional(MM_Texts[CO_C][i], 1);
			TextDrawSetSelectable(MM_Texts[CO_C][i],1);
		}
		
		if(id >= MM_PTP && id <= MM_PTP+(MM_MAX_PTP_C-1))
		{
		    new i = id - 1;
			MM_Texts[PTP_C][i] = TextDrawCreate(163.416580, start, MM_PTP_C_Names[i]);
			TextDrawLetterSize(MM_Texts[PTP_C][i], 0.213750, 2.025183);
			TextDrawTextSize(MM_Texts[PTP_C][i], 251.250045, coef);
			TextDrawAlignment(MM_Texts[PTP_C][i], 1);
			TextDrawColor(MM_Texts[PTP_C][i], -1);
			TextDrawUseBox(MM_Texts[PTP_C][i], true);
			TextDrawBoxColor(MM_Texts[PTP_C][i], 102);
			TextDrawSetShadow(MM_Texts[PTP_C][i], 0);
			TextDrawSetOutline(MM_Texts[PTP_C][i], 1);
			TextDrawBackgroundColor(MM_Texts[PTP_C][i], 255);
			TextDrawFont(MM_Texts[PTP_C][i], 2);
			TextDrawSetProportional(MM_Texts[PTP_C][i], 1);
			TextDrawSetSelectable(MM_Texts[PTP_C][i],1);
		}
		
		start+= 27.0;
	}
	
	MM_Texts[CO_C][2] = TextDrawCreate(162.083328, -11.925905, MM_CO_C_Names[2]);
	TextDrawLetterSize(MM_Texts[CO_C][2], 0.449999, 1.600000);
	TextDrawTextSize(MM_Texts[CO_C][2], 90.416671, 86.074111);
	TextDrawAlignment(MM_Texts[CO_C][2], 1);
	TextDrawColor(MM_Texts[CO_C][2], -1);
	TextDrawUseBox(MM_Texts[CO_C][2], true);
	TextDrawBoxColor(MM_Texts[CO_C][2], 255);
	TextDrawSetShadow(MM_Texts[CO_C][2], 0);
	TextDrawSetOutline(MM_Texts[CO_C][2], 1);
	TextDrawBackgroundColor(MM_Texts[CO_C][2], 51);
	TextDrawFont(MM_Texts[CO_C][2], 4);
	TextDrawSetProportional(MM_Texts[CO_C][2], 1);
	TextDrawSetSelectable(MM_Texts[CO_C][2], true);

	MM_Texts[CO_C][3] = TextDrawCreate(162.250030, 122.851760, MM_CO_C_Names[3]);
	TextDrawLetterSize(MM_Texts[CO_C][3], 0.449999, 1.600000);
	TextDrawTextSize(MM_Texts[CO_C][3], 90.000000, 86.074111);
	TextDrawAlignment(MM_Texts[CO_C][3], 1);
	TextDrawColor(MM_Texts[CO_C][3], -1);
	TextDrawUseBox(MM_Texts[CO_C][3], true);
	TextDrawBoxColor(MM_Texts[CO_C][3], 255);
	TextDrawSetShadow(MM_Texts[CO_C][3], 0);
	TextDrawSetOutline(MM_Texts[CO_C][3], 1);
	TextDrawBackgroundColor(MM_Texts[CO_C][3], 51);
	TextDrawFont(MM_Texts[CO_C][3], 4);
	TextDrawSetProportional(MM_Texts[CO_C][3], 1);
	TextDrawSetSelectable(MM_Texts[CO_C][3], true);
	
	MM_Texts[CTF_C][2] = TextDrawCreate(162.250030, 15.555578, MM_CTF_C_Names[2]);
	TextDrawLetterSize(MM_Texts[CTF_C][2], 0.449999, 1.600000);
	TextDrawTextSize(MM_Texts[CTF_C][2], 90.416671, 86.074111);
	TextDrawAlignment(MM_Texts[CTF_C][2], 1);
	TextDrawColor(MM_Texts[CTF_C][2], -1);
	TextDrawUseBox(MM_Texts[CTF_C][2], true);
	TextDrawBoxColor(MM_Texts[CTF_C][2], 255);
	TextDrawSetShadow(MM_Texts[CTF_C][2], 0);
	TextDrawSetOutline(MM_Texts[CTF_C][2], 1);
	TextDrawBackgroundColor(MM_Texts[CTF_C][2], 51);
	TextDrawFont(MM_Texts[CTF_C][2], 4);
	TextDrawSetProportional(MM_Texts[CTF_C][2], 1);
	TextDrawSetSelectable(MM_Texts[CTF_C][2], true);

	MM_Texts[CTF_C][3] = TextDrawCreate(162.250030, 149.814727, MM_CTF_C_Names[3]);
	TextDrawLetterSize(MM_Texts[CTF_C][3], 0.449999, 1.600000);
	TextDrawTextSize(MM_Texts[CTF_C][3], 90.000000, 86.074111);
	TextDrawAlignment(MM_Texts[CTF_C][3], 1);
	TextDrawColor(MM_Texts[CTF_C][3], -1);
	TextDrawUseBox(MM_Texts[CTF_C][3], true);
	TextDrawBoxColor(MM_Texts[CTF_C][3], 255);
	TextDrawSetShadow(MM_Texts[CTF_C][3], 0);
	TextDrawSetOutline(MM_Texts[CTF_C][3], 1);
	TextDrawBackgroundColor(MM_Texts[CTF_C][3], 51);
	TextDrawFont(MM_Texts[CTF_C][3], 4);
	TextDrawSetProportional(MM_Texts[CTF_C][3], 1);
	TextDrawSetSelectable(MM_Texts[CTF_C][3], true);
}

stock isClickingMMTexts(playerid, Text:clickedid)
{
    forLoop(id, MM_MAX_MODES)
    {
        if(clickedid == MM_Texts[Modes][id])
        {
			switch(id)
			{
			    case MM_RP:
				{
					updateMMSelectedMode(playerid, TRP);
				}
				case MM_TW:
				{
					updateMMSelectedMode(playerid, TW);
				}
				case MM_CO:
				{
					updateMMSelectedMode(playerid, CO);
				}
				case MM_PTP:
				{
				    updateMMSelectedMode(playerid, PTP);
				}
				case MM_ZO:
				{
				    updateMMSelectedMode(playerid, ZO);
				}
				case MM_GK:
				{
				    updateMMSelectedMode(playerid, GK);
				}
				case MM_DM:
				{
				    updateMMSelectedMode(playerid, DM);
				}
				case MM_PJ:
				{
				    updateMMSelectedMode(playerid, PJ);
				}
				case MM_FFA:
				{
				    updateMMSelectedMode(playerid, FFA);
				}
				case MM_CTF:
				{
				    updateMMSelectedMode(playerid, CTF);
				}
				case MM_VW:
				{
				    updateMMSelectedMode(playerid, VW);
				}
				case MM_SF:
				{
				    updateMMSelectedMode(playerid, STUNT);
				}
			}
            return 1;
        }
    }

    forLoop(id, MM_MAX_TW_C)
    {
        if(clickedid == MM_Texts[TW_C][id])
        {
			switch(id)
			{
			    case MM_TW_GER:
				{
				    if(AxisCount() > AllyCount())
						GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~w~TEAM IS FULL", 2000, 3);
					else updateMMSelectedColumn(playerid, GERMANY);
				}
			    case MM_TW_USA:
				{
				    if(AxisCount() < AllyCount())
						GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~w~TEAM IS FULL", 2000, 3);
					else updateMMSelectedColumn(playerid, USA);
				}
			    case MM_TW_JAP:
				{
				    if(AxisCount() > AllyCount())
						GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~w~TEAM IS FULL", 2000, 3);
					else updateMMSelectedColumn(playerid, JAPAN);
				}
			    case MM_TW_SOV:
				{
				    if(AxisCount() < AllyCount())
						GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~w~TEAM IS FULL", 2000, 3);
					else updateMMSelectedColumn(playerid, RUSSIA);
				}
			    case MM_TW_ITA:
				{
				    if(AxisCount() > AllyCount())
						GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~w~TEAM IS FULL", 2000, 3);
					else updateMMSelectedColumn(playerid, ITALY);
				}
			    case MM_TW_BAL:
				{
				    if(AxisCount() < AllyCount())
						GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~w~TEAM IS FULL", 2000, 3);
					else updateMMSelectedColumn(playerid, BALKAN);
				}
			    case MM_TW_UK:
				{
				    if(AxisCount() < AllyCount())
						GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~w~TEAM IS FULL", 2000, 3);
					else updateMMSelectedColumn(playerid, BRITISH);
				}
			}
            return 1;
        }
    }
    
    forLoop(id, MM_MAX_TW_CL)
    {
        if(clickedid == MM_Texts[TW_CL][id])
        {
			switch(id)
			{
			    case MM_TW_SOL:
				{
				     updateMMTWClass(playerid, SOLDIER);
				}
			    case MM_TW_PIL:
				{
				     updateMMTWClass(playerid, PILOT);
				}
			    case MM_TW_MED:
				{
				     updateMMTWClass(playerid, MEDIC);
				}
			    case MM_TW_ENG:
				{
				     updateMMTWClass(playerid, ENGINEER);
				}
			}
            return 1;
        }
    }
    
    forLoop(id, MM_MAX_PTP_C)
    {
        if(clickedid == MM_Texts[PTP_C][id])
        {
			switch(id)
			{
			    case MM_PTP_PRE:
				{
					if(ClassCountPTP(PRESIDENT) > 0 || PTPPlayerInfo[playerid][AlreadyLeader] > 0)
						GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~w~CLASS IS UNAVAILABLE", 2000, 3);
				    else updateMMSelectedColumn(playerid, PRESIDENT);
				}
			    case MM_PTP_VIC:
				{
				    if(ClassCountPTP(VICE) > 0 || PTPPlayerInfo[playerid][AlreadyLeader] > 0)
						GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~w~CLASS IS UNAVAILABLE", 2000, 3);
				    else updateMMSelectedColumn(playerid, VICE);
				}
			    case MM_PTP_SEC:
				{
                    if(ClassCountPTP(SECURITY) > 8 || TeamCountPTP(BAD) < TeamCountPTP(GOOD))
                        GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~w~CLASS IS UNAVAILABLE", 2000, 3);
				    else updateMMSelectedColumn(playerid, SECURITY);
				}
			    case MM_PTP_POL:
				{
				    if(TeamCountPTP(BAD) < TeamCountPTP(GOOD))
				        GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~w~TEAM IS FULL", 2000, 3);
				    else updateMMSelectedColumn(playerid, POLICE);
				}
			    case MM_PTP_TER:
				{
				    if(TeamCountPTP(BAD) > TeamCountPTP(GOOD))
				        GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~w~TEAM IS FULL", 2000, 3);
				    else updateMMSelectedColumn(playerid, TERRORIST);
				}
			    case MM_PTP_CIV:
				{
					updateMMSelectedColumn(playerid, CIVILIAN);
				}
			}
            return 1;
        }
    }
    
    forLoop(id, MM_MAX_CTF_C)
    {
        if(clickedid == MM_Texts[CTF_C][id])
        {
			switch(id)
			{
			    case MM_CTF_RED, MM_CTF_PIC_RED:
				{
					if(RedCountCTF() > BlueCountCTF())
						GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~w~TEAM IS FULL", 2000, 3);
				    else updateMMSelectedColumn(playerid, RED);
				}
			    case MM_CTF_BLUE, MM_CTF_PIC_BLUE:
				{
					if(RedCountCTF() < BlueCountCTF())
						GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~w~TEAM IS FULL", 2000, 3);
				    else updateMMSelectedColumn(playerid, BLUE);
				}
			}
            return 1;
        }
    }

    forLoop(id, MM_MAX_CO_C)
    {
        if(clickedid == MM_Texts[CO_C][id])
        {
			switch(id)
			{
			    case MM_CO_COP, MM_CO_PIC_COP:
				{
					if(CriminalCountCO() < CopCountCO())
						GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~w~TEAM IS FULL", 2000, 3);
				    else updateMMSelectedColumn(playerid, COP);
				}
			    case MM_CO_CRI, MM_CO_PIC_CRI:
				{
					if(CriminalCountCO() > CopCountCO())
						GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~w~TEAM IS FULL", 2000, 3);
				    else updateMMSelectedColumn(playerid, CRIMINAL);
				}
			}
            return 1;
        }
    }
    return 0;
}

stock updateMMTWClass(playerid, col)
{
	if(PlayerInfo[playerid][PlayerMode] == TW)
	{
		if(TWPlayerInfo[playerid][Class] != col)
		{
		    if(TWPlayerInfo[playerid][Class] == -1)
	        {
	            forLoop(id, MM_MAX_TW_CL)
					TextDrawHideForPlayer(playerid,MM_Texts[TW_CLSelect][id]);
	        }
	        else
	        {
	            TextDrawHideForPlayer(playerid,MM_Texts[TW_CLSelect][TWPlayerInfo[playerid][Class]-4]);
	        }
		    TWPlayerInfo[playerid][Class] = col;
	       	TextDrawShowForPlayer(playerid,MM_Texts[TW_CLSelect][TWPlayerInfo[playerid][Class]-4]);
		}
	}
}

stock updateMMSelectedColumn(playerid, col)
{
	switch(PlayerInfo[playerid][PlayerMode])
	{
    	case TW:
		{
		    if(TWPlayerInfo[playerid][Country] != col)
		    {
		        if(TWPlayerInfo[playerid][Country] == -1)
		        {
		            forLoop(id, MM_MAX_TW_C)
						TextDrawHideForPlayer(playerid,MM_Texts[ColSelect][id]);
		        }
		        else TextDrawHideForPlayer(playerid,MM_Texts[ColSelect][TWPlayerInfo[playerid][Country]]);

				TWPlayerInfo[playerid][Country] = col;
				TextDrawShowForPlayer(playerid,MM_Texts[ColSelect][TWPlayerInfo[playerid][Country]]);
				ChangeModePictureForPlayer(playerid);
			}
		}
	    case PTP:
		{
		    if(PTPPlayerInfo[playerid][Class] != col)
		    {
		        if(PTPPlayerInfo[playerid][Class] == -1)
		        {
		            forLoop(id, MM_MAX_TW_C)
						TextDrawHideForPlayer(playerid,MM_Texts[ColSelect][id]);
		        }
		        else TextDrawHideForPlayer(playerid,MM_Texts[ColSelect][PTPPlayerInfo[playerid][Class]]);
		        PTPPlayerInfo[playerid][Class] = col;
				TextDrawShowForPlayer(playerid,MM_Texts[ColSelect][PTPPlayerInfo[playerid][Class]]);
				ChangeModePictureForPlayer(playerid);
			}
		}
	    case CO:
		{
			if(PlayerInfo[playerid][pTeam] != col)
		    {
		        if(PlayerInfo[playerid][pTeam] == -1)
		        {
		            forLoop(id, MM_MAX_TW_C)
						TextDrawHideForPlayer(playerid,MM_Texts[ColSelect][id]);
		        }
		        else
		        {
		            switch(PlayerInfo[playerid][pTeam])
				    {
				        case COP:{TextDrawHideForPlayer(playerid,MM_Texts[ColSelect][MM_CO]);}
				        case CRIMINAL:{TextDrawHideForPlayer(playerid,MM_Texts[ColSelect][MM_CO+1]);}
				    }
		        }
				PlayerInfo[playerid][pTeam] = col;
				switch(PlayerInfo[playerid][pTeam])
			    {
			        case COP:{TextDrawShowForPlayer(playerid,MM_Texts[ColSelect][MM_CO]);}
			        case CRIMINAL:{TextDrawShowForPlayer(playerid,MM_Texts[ColSelect][MM_CO+1]);}
			    }
				ChangeModePictureForPlayer(playerid);
			}
		}
	    case CTF:
		{
		    if(PlayerInfo[playerid][pTeam] != col)
		    {
		        if(PlayerInfo[playerid][pTeam] == -1)
		        {
		            forLoop(id, MM_MAX_TW_C)
						TextDrawHideForPlayer(playerid,MM_Texts[ColSelect][id]);
		        }
		        else
		        {
		            switch(PlayerInfo[playerid][pTeam])
				    {
				        case RED:{TextDrawHideForPlayer(playerid,MM_Texts[ColSelect][MM_CTF]);}
				        case BLUE:{TextDrawHideForPlayer(playerid,MM_Texts[ColSelect][MM_CTF+1]);}
				    }
		        }
				PlayerInfo[playerid][pTeam] = col;
				switch(PlayerInfo[playerid][pTeam])
			    {
			        case RED:{TextDrawShowForPlayer(playerid,MM_Texts[ColSelect][MM_CTF]);}
			        case BLUE:{TextDrawShowForPlayer(playerid,MM_Texts[ColSelect][MM_CTF+1]);}
			    }
				ChangeModePictureForPlayer(playerid);
			}
		}
	}
}

stock updateMMSelectedMode(playerid, mode)
{
	if(PlayerInfo[playerid][PlayerMode] != mode)
	{
	    new str[55];
	    format(str, sizeof str, "spawning in~n~%s",PlayerModeNames[mode]);
	    PlayerTextDrawSetString(playerid, PlayerInfo[playerid][tSpawning], str);
	    
	    //hiding only what needs to be hidden
	 	switch(PlayerInfo[playerid][PlayerMode])
		{
		    case ZO:{TextDrawHideForPlayer(playerid,MM_Texts[Selected][MM_ZO]);}
		    case GK:{TextDrawHideForPlayer(playerid,MM_Texts[Selected][MM_GK]);}
		    case DM:{TextDrawHideForPlayer(playerid,MM_Texts[Selected][MM_DM]);}
		    case PJ:{TextDrawHideForPlayer(playerid,MM_Texts[Selected][MM_PJ]);}
		    case FFA:{TextDrawHideForPlayer(playerid,MM_Texts[Selected][MM_FFA]);}
		    case STUNT:{TextDrawHideForPlayer(playerid,MM_Texts[Selected][MM_SF]);}
		    case VW:{TextDrawHideForPlayer(playerid,MM_Texts[Selected][MM_VW]);}
		    case TRP:{TextDrawHideForPlayer(playerid,MM_Texts[Selected][MM_RP]);}
		    case TW:
			{
				TextDrawHideForPlayer(playerid,MM_Texts[Selected][MM_TW]);
			 	forLoop(id, MM_MAX_TW_C)
				{
					TextDrawHideForPlayer(playerid,MM_Texts[TW_C][id]);
					TextDrawHideForPlayer(playerid,MM_Texts[ColSelect][id]);
				}
			 	forLoop(id, MM_MAX_TW_CL)
			 	{
					TextDrawHideForPlayer(playerid,MM_Texts[TW_CL][id]);
					TextDrawHideForPlayer(playerid,MM_Texts[TW_CLSelect][id]);
				}
			}
		    case CO:
			{
				TextDrawHideForPlayer(playerid,MM_Texts[Selected][MM_CO]);
			 	forLoop(id, MM_MAX_CO_C)
				 	TextDrawHideForPlayer(playerid,MM_Texts[CO_C][id]);
				 	
				forLoop(id, MM_MAX_TW_C)
					TextDrawHideForPlayer(playerid,MM_Texts[ColSelect][id]);
			}
		    case CTF:
			{
				TextDrawHideForPlayer(playerid,MM_Texts[Selected][MM_CTF]);
			 	forLoop(id, MM_MAX_CTF_C)
				 	TextDrawHideForPlayer(playerid,MM_Texts[CTF_C][id]);

				forLoop(id, MM_MAX_TW_C)
					TextDrawHideForPlayer(playerid,MM_Texts[ColSelect][id]);
			}
		    case PTP:
			{
				TextDrawHideForPlayer(playerid,MM_Texts[Selected][MM_PTP]);
			 	forLoop(id, MM_MAX_PTP_C)
				 	TextDrawHideForPlayer(playerid,MM_Texts[PTP_C][id]);

				forLoop(id, MM_MAX_TW_C)
					TextDrawHideForPlayer(playerid,MM_Texts[ColSelect][id]);
			}
		}
        PlayerInfo[playerid][PlayerMode] = mode;
		switch(mode)
		{
		    case GK:{TextDrawShowForPlayer(playerid,MM_Texts[Selected][MM_GK]);}
		    case ZO:{TextDrawShowForPlayer(playerid,MM_Texts[Selected][MM_ZO]);}
		    case DM:{TextDrawShowForPlayer(playerid,MM_Texts[Selected][MM_DM]);}
		    case PJ:{TextDrawShowForPlayer(playerid,MM_Texts[Selected][MM_PJ]);}
		    case FFA:{TextDrawShowForPlayer(playerid,MM_Texts[Selected][MM_FFA]);}
		    case STUNT:{TextDrawShowForPlayer(playerid,MM_Texts[Selected][MM_SF]);}
		    case TRP:{TextDrawShowForPlayer(playerid,MM_Texts[Selected][MM_RP]);}
		    case VW:{TextDrawShowForPlayer(playerid,MM_Texts[Selected][MM_VW]);}
		    case TW:
		    {
		        new country = 0, eclass;
		        TextDrawShowForPlayer(playerid,MM_Texts[Selected][MM_TW]);
			 	forLoop(id, MM_MAX_TW_C)
				 	TextDrawShowForPlayer(playerid,MM_Texts[TW_C][id]);
					
				forLoop(id, MM_MAX_TW_CL)
				 	TextDrawShowForPlayer(playerid,MM_Texts[TW_CL][id]);
				 	
				switch(random(4))
			    {
			        case 0:{eclass = SOLDIER;}
			        case 1:{eclass = PILOT;}
			        case 2:{eclass = MEDIC;}
			        case 3:{eclass = ENGINEER;}
				}
				TWPlayerInfo[playerid][Class] = -1;
				updateMMTWClass(playerid, eclass);
			    if(AxisCount() < AllyCount())
			    {
				   	switch(random(3))
			        {
			            case 0:{country = GERMANY;}
			            case 1:{country = ITALY;}
			            case 2:{country = JAPAN;}
					}
			    }
			    else if(AxisCount() > AllyCount())
			    {
				   	switch(random(4))
			        {
			            case 0:{country = BRITISH;}
			            case 1:{country = RUSSIA;}
			            case 2:{country = BALKAN;}
			            case 3:{country = USA;}
					}
			    }
				else
				{
				    switch(random(7))
			        {
			            case 0:{country = GERMANY;}
			            case 1:{country = ITALY;}
			            case 2:{country = JAPAN;}
			            case 3:{country = BRITISH;}
			            case 4:{country = RUSSIA;}
			            case 5:{country = BALKAN;}
			            case 6:{country = USA;}
					}
				}
				TWPlayerInfo[playerid][Country] = -1;
				updateMMSelectedColumn(playerid, country);
		    }
		    case CO:
		    {
		        new team = 0;
		        TextDrawShowForPlayer(playerid,MM_Texts[Selected][MM_CO]);
			 	forLoop(id, MM_MAX_CO_C)
				{
				    if(ServerInfo[bigTXTDs] == 0 && id >= 2)
						break;
					TextDrawShowForPlayer(playerid,MM_Texts[CO_C][id]);
				}
		        if(CriminalCountCO() > CopCountCO())team = COP;
				else if(CriminalCountCO() < CopCountCO())team = CRIMINAL;
				else
				{
				    if(random(2) == 0)team = COP;
				    else team = CRIMINAL;
				}
				PlayerInfo[playerid][pTeam] = -1;
				updateMMSelectedColumn(playerid, team);
		    }
		    case CTF:
		    {
		        new team = 0;
		        TextDrawShowForPlayer(playerid,MM_Texts[Selected][MM_CTF]);
			 	forLoop(id, MM_MAX_CTF_C)
				{
				    if(ServerInfo[bigTXTDs] == 0 && id >= 2)
						break;
					TextDrawShowForPlayer(playerid,MM_Texts[CTF_C][id]);
				}
		        if(RedCountCTF() > BlueCountCTF())team = BLUE;
		        else if(RedCountCTF() < BlueCountCTF())team = RED;
		        else
		        {
				    if(random(2) == 0)team = RED;
				    else team = BLUE;
				}
				PlayerInfo[playerid][pTeam] = -1;
				updateMMSelectedColumn(playerid, team);
		    }
		    case PTP:
		    {
		        new eclass = 0;
		        TextDrawShowForPlayer(playerid,MM_Texts[Selected][MM_PTP]);
			 	forLoop(id, MM_MAX_PTP_C)
				{
					TextDrawShowForPlayer(playerid,MM_Texts[PTP_C][id]);
				}
		        //selection random team
		        if(TeamCountPTP(BAD) < TeamCountPTP(GOOD))eclass = TERRORIST;
		        else if(TeamCountPTP(BAD) > TeamCountPTP(GOOD))eclass = POLICE;
		        else
		        {
		            if(random(2) == 0)eclass = TERRORIST;
				    else eclass = POLICE;
				}
				PTPPlayerInfo[playerid][Class] = -1;
				updateMMSelectedColumn(playerid, eclass);
		    }
		}
    	ChangeModePictureForPlayer(playerid);
	}
}

stock updateMMPlayers()
{
	new string[10];
	format(string, sizeof string, "%d",ModeCount(TW));
	TextDrawSetString(MM_Texts[Players][MM_TW], string);

	format(string, sizeof string, "%d",ModeCount(FFA));
	TextDrawSetString(MM_Texts[Players][MM_FFA], string);

	format(string, sizeof string, "%d",ModeCount(STUNT));
	TextDrawSetString(MM_Texts[Players][MM_SF], string);

	format(string, sizeof string, "%d",ModeCount(TRP));
	TextDrawSetString(MM_Texts[Players][MM_RP], string);

	format(string, sizeof string, "%d",ModeCount(CO));
	TextDrawSetString(MM_Texts[Players][MM_CO], string);

	format(string, sizeof string, "%d",ModeCount(CTF));
	TextDrawSetString(MM_Texts[Players][MM_CTF], string);

	format(string, sizeof string, "%d",ModeCount(VW));
	TextDrawSetString(MM_Texts[Players][MM_VW], string);

	format(string, sizeof string, "%d",ModeCount(DM));
	TextDrawSetString(MM_Texts[Players][MM_DM], string);

	format(string, sizeof string, "%d",ModeCount(ZO));
	TextDrawSetString(MM_Texts[Players][MM_ZO], string);

	format(string, sizeof string, "%d",ModeCount(GK));
	TextDrawSetString(MM_Texts[Players][MM_GK], string);

	format(string, sizeof string, "%d",ModeCount(PJ));
	TextDrawSetString(MM_Texts[Players][MM_PJ], string);

	format(string, sizeof string, "%d",ModeCount(PTP));
	TextDrawSetString(MM_Texts[Players][MM_PTP], string);
	return 1;
}

stock ChangeModePictureForPlayer(playerid)
{
	if(ServerInfo[ChangeModePic] == 1)
	{
		SetPlayerWeather(playerid, 0);
		SetPlayerTime(playerid, 12, 0);
		SetPlayerInterior(playerid,0);
		TogglePlayerControllable(playerid,false);
		
		new mode = PlayerInfo[playerid][PlayerMode];
	    if(mode == STUNT)
	    {
	        SetPlayerVirtualWorld(playerid, W_STUNT);
            CallRemoteFunction("PangeaChangePicture","dd",playerid,mode);
	    }
	    if(mode == FFA)
	    {
		  	SetPlayerVirtualWorld(playerid, W_FFA);
            CallRemoteFunction("PangeaChangePicture","dd",playerid,mode);
	    }
	    if(mode == DM)
	    {
	        SetPlayerVirtualWorld(playerid, W_MODESEL);
            CallRemoteFunction("PangeaChangePicture","dd",playerid,mode);
	    }
	    if(mode == PJ)
	    {
	        SetPlayerVirtualWorld(playerid, W_MODESEL);
            CallRemoteFunction("PangeaChangePicture","dd",playerid,mode);
	    }
	    if(mode == ZO)
	    {
            SetPlayerVirtualWorld(playerid, W_MODESEL);
            CallRemoteFunction("PangeaChangePicture","dd",playerid,mode);
	    }
	    if(mode == GK)
	    {
            SetPlayerVirtualWorld(playerid, W_GK);
            CallRemoteFunction("PangeaChangePicture","dd",playerid,mode);
	    }
	    if(mode == TRP)
	    {
            SetPlayerVirtualWorld(playerid, W_RP);
            SetPlayerTime(playerid, ModeTime[mode], 0);
 		    SetPlayerWeather(playerid, ModeWeather[mode]);
            CallRemoteFunction("PangeaChangePicture","dd",playerid,mode);
	    }
	    if(mode == TW)
	    {
            SetPlayerVirtualWorld(playerid, W_TW);
			if(TWInfo[Map] == NorthernSA)
			{
		        SetPlayerPos(playerid,290.3136,2441.1711,16.7457);
				SetPlayerCameraPos(playerid, 304.9320,2488.7764,17.0474);
				SetPlayerCameraLookAt(playerid, 383.0270,2515.0715,44.790);
			}
			if(TWInfo[Map] == SouthernSA)
			{
		        SetPlayerPos(playerid,191.9386,-61.1124,1.57);
				SetPlayerCameraPos(playerid, 145.3407,-90.9224,37.505);
				SetPlayerCameraLookAt(playerid, 202.5375,-33.9032,31.543);
			}
	    }
	    if(mode == PTP)
	    {
            SetPlayerVirtualWorld(playerid, W_PTP);
			if(PTPInfo[Map] == PTP_DESERT)
			{
			    SetPlayerPos(playerid, -678.8756, 802.2015, 3.5361);
		        SetPlayerCameraPos(playerid, -682.2106, 823.8989, 31.5136);
				SetPlayerCameraLookAt(playerid, -682.3341, 824.8905, 31.3284);
			}
			if(PTPInfo[Map] == PTP_LV)
			{
				SetPlayerPos(playerid, 2065.0537, 2089.1265, 15.3776);
			    SetPlayerCameraPos(playerid, 2042.3798, 2090.1604, 42.1598);
				SetPlayerCameraLookAt(playerid, 2043.2870, 2090.5803, 42.1397);
			}
			if(PTPInfo[Map] == PTP_LS)
			{
				SetPlayerPos(playerid, 1270.8293, -1504.7589, 14.1207);
			    SetPlayerCameraPos(playerid, 1226.5956, -1557.7152, 85.7338);
				SetPlayerCameraLookAt(playerid, 1227.3667, -1557.0790, 85.8234);
			}
			if(PTPInfo[Map] == PTP_SF)
			{
				SetPlayerPos(playerid, -1834.7153, 328.9574, 19.6199);
			    SetPlayerCameraPos(playerid, -1782.0596, 314.2450, 100.9448);
				SetPlayerCameraLookAt(playerid, -1782.5920, 315.0919, 100.9042);
			}
	    }
	    if(mode == CO)
	    {
	    	SetPlayerVirtualWorld(playerid, W_CO);
	    	if(PlayerInfo[playerid][pTeam] == COP)
	    	{
	            if(COInfo[Map]==LS)
				{
					SetPlayerPos(playerid, 1408.7439, -1627.1420, 21.0410);
					SetPlayerCameraPos(playerid, 1443.0714, -1663.5889, 51.5789);
					SetPlayerCameraLookAt(playerid, 1444.0593, -1663.4099, 51.2588);
				}
				if(COInfo[Map]==FOREST)
				{
				    SetPlayerPos(playerid, 626.8413, -629.9186, 21.3036);
					SetPlayerCameraPos(playerid, 674.8215, -580.7954, 35.6492);
					SetPlayerCameraLookAt(playerid, 673.8802, -581.1409, 35.2690);
				}
	            if(COInfo[Map]==DESERT)
				{
				    SetPlayerPos(playerid, -1389.5159, 2647.7097, 56.5818);
					SetPlayerCameraPos(playerid, -1445.5480, 2606.5247, 82.5104);
					SetPlayerCameraLookAt(playerid, -1444.7487, 2607.1304, 82.0951);
				}
				if(COInfo[Map]==LV)
				{
				    SetPlayerPos(playerid, 2265.8086, 2450.9761, 24.8381);
					SetPlayerCameraPos(playerid, 2225.1685, 2357.3667, 60.5619);
					SetPlayerCameraLookAt(playerid, 2225.5266, 2358.3030, 60.1166);
				}
				if(COInfo[Map]==SF)
				{
					SetPlayerPos(playerid, -1631.1470, 706.2352, 21.2214);
					SetPlayerCameraPos(playerid, -1564.7314, 627.5413, 33.6262);
					SetPlayerCameraLookAt(playerid, -1565.4259, 628.2654, 33.2760);
				}
				if(COInfo[Map]==LV_AIR)
				{
					SetPlayerPos(playerid, 1617.5398, 1323.4478, 13.1550);
				    SetPlayerCameraPos(playerid, 1472.6506, 1168.0284, 91.4129);
					SetPlayerCameraLookAt(playerid, 1472.7714, 1169.0233, 90.9980);
				}
				if(COInfo[Map]==LS_AIR)
				{
					SetPlayerPos(playerid, 2108.7971, -2387.7014, 18.4652);
					SetPlayerCameraPos(playerid, 2152.5408, -2519.1377, 54.6422);
					SetPlayerCameraLookAt(playerid, 2151.5649, -2518.9106, 54.4021);
				}
				if(COInfo[Map]==QUARRY)
				{
					SetPlayerPos(playerid, 386.5043, 871.7897, 20.6562);
				    SetPlayerCameraPos(playerid, 420.6747, 879.4089, 49.8643);
					SetPlayerCameraLookAt(playerid, 421.6772, 879.4229, 49.4043);
				}
				if(COInfo[Map]==SF_AIR)
				{
					SetPlayerPos(playerid, -1413.4769, 31.4216, 14.8924);
				    SetPlayerCameraPos(playerid, -1411.5790, -1.2741, 8.3593);
					SetPlayerCameraLookAt(playerid, -1411.5050, -2.2739, 8.2943);
				}
			}
	    	if(PlayerInfo[playerid][pTeam] == CRIMINAL)
	    	{
	    	    if(COInfo[Map]==LS)
				{
					SetPlayerPos(playerid, 721.2437, -1286.8336, 14.7956);
					SetPlayerCameraPos(playerid, 829.2825, -1319.5381, 40.8263);
					SetPlayerCameraLookAt(playerid, 828.3584, -1319.9285, 40.5812);
				}
				if(COInfo[Map]==SF)
				{
					SetPlayerPos(playerid, -2692.7114, -315.1053, 13.4223);
					SetPlayerCameraPos(playerid, -2722.8840, -184.0492, 30.9141);
					SetPlayerCameraLookAt(playerid, -2722.9038, -185.0518, 30.8989);
				}
				if(COInfo[Map]==LV)
				{
				    SetPlayerPos(playerid, 1082.3099, 1484.6332, 21.6426);
					SetPlayerCameraPos(playerid, 1066.5333, 1352.4117, 42.7803);
					SetPlayerCameraLookAt(playerid, 1066.4976, 1351.4102, 42.4400);
				}
				if(COInfo[Map]==DESERT)
				{
				    SetPlayerPos(playerid, -738.1771, 1437.2888, 16.9041);
					SetPlayerCameraPos(playerid, -722.7010, 1437.2874, 32.1651);
					SetPlayerCameraLookAt(playerid, -723.7032, 1437.2491, 32.0299);
				}
			    if(COInfo[Map]==FOREST)
				{
				    SetPlayerPos(playerid, 1589.7773, 15.5750, 26.7306);
					SetPlayerCameraPos(playerid, 1449.9153, 65.5750, 46.1174);
					SetPlayerCameraLookAt(playerid, 1450.8354, 65.1772, 46.0222);
				}
				if(COInfo[Map]==LV_AIR)
				{
					SetPlayerPos(playerid, 1617.5398, 1323.4478, 13.1550);
				    SetPlayerCameraPos(playerid, 1472.6506, 1168.0284, 91.4129);
					SetPlayerCameraLookAt(playerid, 1472.7714, 1169.0233, 90.9980);
				}
				if(COInfo[Map]==LS_AIR)
				{
					SetPlayerPos(playerid, 2108.7971, -2387.7014, 18.4652);
					SetPlayerCameraPos(playerid, 2152.5408, -2519.1377, 54.6422);
					SetPlayerCameraLookAt(playerid, 2151.5649, -2518.9106, 54.4021);
				}
				if(COInfo[Map]==QUARRY)
				{
					SetPlayerPos(playerid, 386.5043, 871.7897, 20.6562);
				    SetPlayerCameraPos(playerid, 420.6747, 879.4089, 49.8643);
					SetPlayerCameraLookAt(playerid, 421.6772, 879.4229, 49.4043);
				}
				if(COInfo[Map]==SF_AIR)
				{
					SetPlayerPos(playerid, -1413.4769, 31.4216, 14.8924);
				    SetPlayerCameraPos(playerid, -1411.5790, -1.2741, 8.3593);
					SetPlayerCameraLookAt(playerid, -1411.5050, -2.2739, 8.2943);
				}
	    	}
	    }
	    if(mode == CTF)
	    {
            SetPlayerVirtualWorld(playerid, W_CTF);
			SetPlayerInterior(playerid, CTFSpawnInterior[CTFInfo[Map]]);
			if(PlayerInfo[playerid][pTeam] == BLUE)
			{
				if(CTFInfo[Map]==LS)//
				{
				    SetPlayerPos(playerid, 2572.6111, -1482.7233, 29.0909);
					SetPlayerCameraPos(playerid, 2549.5215, -1573.7000, 43.0782);
					SetPlayerCameraLookAt(playerid, 2550.2087, -1572.9738, 42.9282);
				}
				if(CTFInfo[Map]==FOREST)//
				{
				    SetPlayerPos(playerid, -242.3985, -241.4667, 3.1842);
				    SetPlayerCameraPos(playerid, -229.4782, -319.1673, 58.3477);
					SetPlayerCameraLookAt(playerid, -229.0266, -318.2766, 58.0027);
				}
				if(CTFInfo[Map]==DESERT)//
				{
				    SetPlayerPos(playerid, -2230.8525, 2357.2205, 6.0628);
				    SetPlayerCameraPos(playerid, -2294.7925, 2270.1377, 20.9580);
					SetPlayerCameraLookAt(playerid, -2294.0889, 2270.8616, 20.7030);
				}
				if(CTFInfo[Map]==LV)//
				{
				    SetPlayerPos(playerid, 2501.3547, 2835.0823, 13.5556);
				    SetPlayerCameraPos(playerid, 2488.6472, 2844.2683, 49.5850);
					SetPlayerCameraLookAt(playerid, 2489.2393, 2843.4639, 49.1200);
				}
				if(CTFInfo[Map]==SF)//
				{
				    SetPlayerPos(playerid, -2077.2766, -804.8897, 37.3983);
					SetPlayerCameraPos(playerid, -2053.0486, -772.1337, 57.6709);
					SetPlayerCameraLookAt(playerid, -2052.5815, -773.0243, 57.4159);
				}
				if(CTFInfo[Map]==MEAT_FAC)//
				{
					SetPlayerPos(playerid, 967.2011, 2159.8582, 1011.5911);
                	SetPlayerCameraPos(playerid, 949.8243, 2118.6387, 1015.5162);
					SetPlayerCameraLookAt(playerid, 949.3717, 2119.5293, 1015.1662);
				}
				if(CTFInfo[Map]==RC_BF)//
				{
					SetPlayerPos(playerid, -974.8116, 1045.9679, 1346.9449);
				    SetPlayerCameraPos(playerid, -980.8556, 1021.8389, 1361.7213);
					SetPlayerCameraLookAt(playerid, -981.7409, 1022.3016, 1360.3499);
				}
                if(CTFInfo[Map]==KICK_STA)//
				{
					SetPlayerPos(playerid, -1469.6224, 1662.5446, 1060.3738);
					SetPlayerCameraPos(playerid, -1489.9629, 1656.7570, 1067.6687);
					SetPlayerCameraLookAt(playerid, -1489.2100, 1656.1005, 1067.4889);
				}
                if(CTFInfo[Map]==BLOOD)//
				{
					SetPlayerPos(playerid, -1405.0764, 930.5826, 1038.9894);
				    SetPlayerCameraPos(playerid, -1399.7313, 925.4426, 1047.7938);
					SetPlayerCameraLookAt(playerid, -1399.7161, 926.4409, 1047.5248);
				}
				if(CTFInfo[Map]==PLE_DOMES)//
				{
				    SetPlayerPos(playerid, -2632.0220, 1405.5916, 906.8979);
				    SetPlayerCameraPos(playerid, -2646.6506, 1413.4917, 919.4553);
					SetPlayerCameraLookAt(playerid, -2647.6414, 1413.3717, 919.0695);
				}
			}
			if(PlayerInfo[playerid][pTeam] == RED)
			{
   				if(CTFInfo[Map]==LS)//
				{
				    SetPlayerPos(playerid, 152.9346, -1951.7975, 6.6947);
					SetPlayerCameraPos(playerid, 122.5251, -1981.3762, 33.5653);
					SetPlayerCameraLookAt(playerid, 123.0241, -1980.5115, 33.3103);
				}
				if(CTFInfo[Map]==SF)//
				{
				    SetPlayerPos(playerid, -2665.3735, 1322.8633, 19.9704);
					SetPlayerCameraPos(playerid, -2600.7722, 1286.3064, 39.3091);
					SetPlayerCameraLookAt(playerid, -2601.1377, 1287.2426, 39.0091);
				}
				if(CTFInfo[Map]==LV)//
				{
				    SetPlayerPos(playerid, 1243.6274, 1087.2900, 25.2434);
				    SetPlayerCameraPos(playerid, 1169.8119, 1008.5313, 41.7039);
					SetPlayerCameraLookAt(playerid, 1168.9858, 1009.0922, 41.4389);
				}
				if(CTFInfo[Map]==DESERT)//
				{
				    SetPlayerPos(playerid, 212.4204, 1810.8182, 18.2993);
				    SetPlayerCameraPos(playerid, 158.7038, 1926.8882, 42.7901);
					SetPlayerCameraLookAt(playerid, 159.4502, 1926.2247, 42.4601);
				}
			    if(CTFInfo[Map]==FOREST)//
				{
				    SetPlayerPos(playerid, 1938.1683, 151.3992, 39.4454);
				    SetPlayerCameraPos(playerid, 1984.8942, 107.5405, 56.1049);
					SetPlayerCameraLookAt(playerid, 1984.0784, 108.1165, 55.8449);
				}
				if(CTFInfo[Map]==MEAT_FAC)//
				{
					SetPlayerPos(playerid, 967.2011, 2159.8582, 1011.5911);
                	SetPlayerCameraPos(playerid, 949.8243, 2118.6387, 1015.5162);
					SetPlayerCameraLookAt(playerid, 949.3717, 2119.5293, 1015.1662);
				}
				if(CTFInfo[Map]==RC_BF)//
				{
					SetPlayerPos(playerid, -974.8116, 1045.9679, 1346.9449);
				    SetPlayerCameraPos(playerid, -980.8556, 1021.8389, 1361.7213);
					SetPlayerCameraLookAt(playerid, -981.7409, 1022.3016, 1360.3499);
				}
                if(CTFInfo[Map]==KICK_STA)//
				{
					SetPlayerPos(playerid, -1469.6224, 1662.5446, 1060.3738);
					SetPlayerCameraPos(playerid, -1489.9629, 1656.7570, 1067.6687);
					SetPlayerCameraLookAt(playerid, -1489.2100, 1656.1005, 1067.4889);
				}
                if(CTFInfo[Map]==BLOOD)//
				{
					SetPlayerPos(playerid, -1405.0764, 930.5826, 1038.9894);
				    SetPlayerCameraPos(playerid, -1399.7313, 925.4426, 1047.7938);
					SetPlayerCameraLookAt(playerid, -1399.7161, 926.4409, 1047.5248);
				}
				if(CTFInfo[Map]==PLE_DOMES)//
				{
				    SetPlayerPos(playerid, -2632.0220, 1405.5916, 906.8979);
				    SetPlayerCameraPos(playerid, -2646.6506, 1413.4917, 919.4553);
					SetPlayerCameraLookAt(playerid, -2647.6414, 1413.3717, 919.0695);
				}
			}
	    }
	    if(mode == VW)
	    {
            SetPlayerVirtualWorld(playerid, W_VW);
			if(VWInfo[Map] == VW_MOUNT)
			{
				SetPlayerPos(playerid, -2412.8850, -2186.2166, 34.2535);
		        SetPlayerCameraPos(playerid, -2563.2832, -2362.7700, 94.3930);
				SetPlayerCameraLookAt(playerid, -2562.4536, -2362.1987, 94.2130);
			}
	    }
	}
}

stock IsPlayerSkydiving(playerid)
{
    //printf("DEBUG CFONTROL IsPlayerSkydiving");
    new index = GetPlayerAnimationIndex(playerid);
    return (index >= 958 && index <= 962);
}

stock IsPlayerUsingParachute(playerid)
{
    //printf("DEBUG CFONTROL IsPlayerUsingParachute");
    new index = GetPlayerAnimationIndex(playerid);
    return (index >= 963 && index <= 979);
}
stock IsPlayerAiming(playerid) {
    //printf("DEBUG CFONTROL IsPlayerAiming");
	new anim = GetPlayerAnimationIndex(playerid);
	if (((anim >= 1160) && (anim <= 1163)) || (anim == 1167) || (anim == 1365) ||
	(anim == 1643) || (anim == 1453) || (anim == 220)) return 1;
 	return 0;
}
stock bool:IsPlayerSwimming(playerid)
{
    //printf("DEBUG CFONTROL IsPlayerSwimming");
	new animlib[1], animname[32];
 	if(GetPlayerAnimationIndex(playerid))
    {
        GetAnimationName(GetPlayerAnimationIndex(playerid),animlib,0,animname,32);
        if(!strcmp(animname, "SWIM_CRAWL") || !strcmp(animname, "SWIM_BREAST") || !strcmp(animname, "SWIM_GLIDE") || !strcmp(animname, "SWIM_DIVE_UNDER") || !strcmp(animname, "SWIM_UNDER"))
        {
            return true;
        }
        return false;
    }
    return false;
}

stock bool:IsPlayerFalling(playerid)
{
    //printf("DEBUG CFONTROL IsPlayerFalling");
	new animlib[1], animname[32];
 	if(GetPlayerAnimationIndex(playerid))
    {
        GetAnimationName(GetPlayerAnimationIndex(playerid),animlib,0,animname,32);
        if(!strcmp(animname, "FALL_FALL") || !strcmp(animname, "FALL_GLIDE"))
        {
            return true;
        }
        return false;
    }
    return false;
}

stock RPIsPlayerNormalState(playerid)
{
    //printf("DEBUG CFONTROL IsPlayerSkydiving");
    new index = GetPlayerAnimationIndex(playerid);
    return ((IsPlayerInAnyVehicle(playerid) || index == 1136 || index == 1231 || index == 1189 || index == 1159 || index == 1274 || index == 1223 || index == 1183));
}

stock AskToChangeMode(playerid)
{
	//printf("DEBUG CFONTROL AskToChangeMode 1");
	if(ServerInfo[ToChangeMode] == 1 && ModeCount(PlayerInfo[playerid][PlayerMode]) <= 1 && PlayerInfo[playerid][Spawned] == 1)
	{
		new maxppl=1;
		forLoop(i, MAX_MODES)
		{
		    if(ModeCount(i) >= maxppl && i != MOVIES && i != PlayerInfo[playerid][PlayerMode])
		    {
				PlayerInfo[playerid][SelectMenuOption][1]= i;
				maxppl=ModeCount(i);
		    }
		}
		if(maxppl > 1)
		{
	    	PlayerInfo[playerid][SelectMenu] = MODE;
		    new string[320],str[128];
			strcat(string,"{FFFFFF}This server mode has {FF0000}NO{FFFFFF} players.");
			format(str,128,"\nWould you like to change it to {33FF33}%s({FFFF00}%d {FFFFFF}players{33FF33}){FFFFFF} server mode?",PlayerModeNames[PlayerInfo[playerid][SelectMenuOption][1]],ModeCount(PlayerInfo[playerid][SelectMenuOption][1]));
			strcat(string,str);
			strcat(string,"\n{FF0000}NOTE: {FFFFFF}You can use /lobby to change it back..");
			strcat(string,"\n\nPress {33FF33}YES {FFFFFF}to transfer or {FF0000}NO {FFFFFF}to stay.");
			ShowPlayerDialog(playerid,SELMENU, DIALOG_STYLE_MSGBOX,"Switch Mode", string, "YES", "NO");
		}
	}
	//printf("DEBUG CFONTROL AskToChangeMode 2");
}
public OnPlayerSpawn(playerid)
{
	//printf("DEBUG CFONTROL OnPlayerSpawn 1");
 	FullyConnected[playerid]=true;
    NoTeleportCheck[playerid]=3;
    AC_PlayerInfo[playerid][AC_pFreezed]=false;
	if(PlayerInfo[playerid][JustSpectated] == 1)
	{
	    PlayerInfo[playerid][JustSpectated] = 0;
		SetPlayerPosEx(playerid, 0.0,0.0, 18.1, 12.0);
		SetPlayerCameraPos(playerid, -2766.4375, 2160.2202, 87.3119);
		SetPlayerCameraLookAt(playerid, -2766.0850, 2159.2815, 87.3369);
		//SpawnPlayerTimer(playerid, 10000);
	}
	else PlayerSpawn(playerid);
	//printf("DEBUG CFONTROL OnPlayerSpawn 2");
    return 1;
}
forward PlayerSpawn(playerid);
public PlayerSpawn(playerid)
{
	//printf("DEBUG CFONTROL PlayerSpawn 1");
    SetPlayerWorldBounds(playerid, 20000.0000, -20000.0000, 20000.0000, -20000.0000);
    if(PlayerInfo[playerid][EditingAttachments] == -1)
    {
	    PlayerInfo[playerid][EditingAttachments] = -2;
	    CancelEdit(playerid);
	}
	else if (PlayerInfo[playerid][EditingAttachments] >=0)
	{
	    RemovePlayerAttachedObjectEx(playerid, PlayerInfo[playerid][EditingAttachments]);
	    PlayerInfo[playerid][EditingAttachments] = -2;
	    CancelEdit(playerid);
	}
    forLoop(i, 10)
    {
		RemovePlayerAttachedObjectEx(playerid, i);
	}
    if(!IsPlayerNPC(playerid))
    {
		if(PlayerInfo[playerid][MainMenu] == 0)
		{
		    PlayerInfo[playerid][Spawned] = 0;
		    if(PlayerInfo[playerid][Registered] == 1 && PlayerInfo[playerid][LoggedIn] == 1)
		    	ShowMMTexts(playerid);
			else showIntro(playerid);
	        return true;
		}
	    else
		{
		    if(PlayerInfo[playerid][PlayerMode] != LOBBY)
			{
				if(PlayerInfo[playerid][Radio] == 0)StopAudioStreamForPlayer(playerid);
		        PlayerInfo[playerid][Spawned] = 1;
	    		HideTDs(playerid);
				ResetWeapons(playerid);
				TextDrawShowForPlayer(playerid,ServerInfo[Version_TD]);
				TextDrawShowForPlayer(playerid,ServerInfo[MenuCMD_TD]);
				SetArmor(playerid,0.0);
				GameTextForPlayer(playerid, " ", 9, 3);
				PlayerInfo[playerid][sProtected] = 30;
				ToggleThePlayerSpectating(playerid, 0);
				PlayerInfo[playerid][ZoneDead] = 0;
				SFPlayerInfo[playerid][Superman] = 0;
				SFPlayerInfo[playerid][Spiderman] = 0;
				DisablePlayerRaceCheckpoint(playerid);
				DisablePlayerCheckpoint(playerid);
				SetPlayerTime(playerid, ModeTime[PlayerInfo[playerid][PlayerMode]], 0);
		 		SetPlayerWeather(playerid, ModeWeather[PlayerInfo[playerid][PlayerMode]]);
    			SetPlayerChatBubble(playerid, " ", 0xEEEEEEFF, 0.1, 1000);
	            UpdateDynamic3DTextLabelText(PlayerInfo[playerid][ModeLabel], 0xFFFF00AA, " ");
				UpdateDynamic3DTextLabelText(PlayerInfo[playerid][TeamLabel], 0xFFFF00AA, " ");
				UpdateDynamic3DTextLabelText(RPPlayerInfo[playerid][NameLabel], 0xFFFFFFAA, " ");
				forLoop(y, MAX_PLAYERS)
			    	UpdateDynamic3DTextLabelText(PlayerInfo[playerid][EnemyFriend][y], 0xFF0000AA, " ");
	            SpawnThePlayer(playerid);
	            if(PlayerInfo[playerid][PlayerMode] != TRP && PlayerInfo[playerid][PlayerMode] != VW)
    				SetCameraBehindPlayer(playerid);
				if(PlayerInfo[playerid][PlayerMode] == TW)
				{
				    SetHealth(playerid,100000);
					SetPlayerScore(playerid,TWPlayerInfo[playerid][Score]);
					GiveArmyArmor(playerid);
    				SendClientMessage(playerid, red1, "{33FF33}HELPER:{FFFFFF} Use /myduty to see what your duty is!");
					new str[128];
					format(str,128,"%s %s",PowerNames[PlayerInfo[playerid][pTeam]],ClassNames[TWPlayerInfo[playerid][Class]]);
					PlayerTextDrawSetString(playerid, TWPlayerInfo[playerid][ClassTXT], str);
					PlayerTextDrawShow(playerid,TWPlayerInfo[playerid][ClassTXT]);
					
					TextDrawShowForPlayer(playerid,TWInfo[ClassTXT]);
					//TextDrawShowForPlayer(playerid,TWInfo[WarBGTXT]);
					//TextDrawShowForPlayer(playerid,TWInfo[AlliesTXT]);
					//TextDrawShowForPlayer(playerid,TWInfo[AxisTXT]);
					UpdateTWRanks(playerid, true);
					
					SetPlayerVirtualWorld(playerid, W_TW);
	                if(PlayerInfo[playerid][SelectedSkin] > -1 && (PlayerInfo[playerid][VIP] > 0 || PlayerInfo[playerid][Level] > 0))
						SetPlayerSkin(playerid,PlayerInfo[playerid][SelectedSkin]);
	                if(TWPlayerInfo[playerid][Country] == GERMANY || TWPlayerInfo[playerid][Country] == ITALY || TWPlayerInfo[playerid][Country] == JAPAN)
						PlayerInfo[playerid][pTeam] = AXIS;
					else PlayerInfo[playerid][pTeam] = ALLIES;
			       	if(TWPlayerInfo[playerid][LeadersKilled] >= 500 || TWPlayerInfo[playerid][Survives] >= 100)
					{
					    ResetWeapons(playerid);
						GivePlayerWeapons(playerid,17,180,33,2900,23,2900,25,2900);
						GivePlayerWeapons(playerid,22,2600,18,35,30,9550,34,9990);
						GivePlayerWeapons(playerid,0,0,16,400,31,9000,35,5);
						GivePlayerWeapons(playerid,0,0,0,0,24,2900,0,0);
					}

					if(TWPlayerInfo[playerid][LeadersKilled] >= 1000 || TWPlayerInfo[playerid][Survives] >= 200)
					{
	                    if(TWPlayerInfo[playerid][Country] == GERMANY) SetPlayerColor(playerid,COL_GERMANY_R5);
						if(TWPlayerInfo[playerid][Country] == ITALY) SetPlayerColor(playerid,COL_ITALY_R5);
					    if(TWPlayerInfo[playerid][Country] == JAPAN) SetPlayerColor(playerid,COL_JAPAN_R5);
					    if(TWPlayerInfo[playerid][Country] == RUSSIA) SetPlayerColor(playerid,COL_SOVIET_R5);
					    if(TWPlayerInfo[playerid][Country] == USA) SetPlayerColor(playerid,COL_USA_R5);
					    if(TWPlayerInfo[playerid][Country] == BALKAN) SetPlayerColor(playerid,COL_BALKAN_R5);
					    if(TWPlayerInfo[playerid][Country] == BRITISH) SetPlayerColor(playerid,COL_BRITISH_R5);
					}
					GivePlayerTheMoney(playerid);
					forLoop(y, MAX_PLAYERS)
				    {
						if(IsPlayerConnected(y) && PlayerInfo[y][PlayerMode] == TW && PlayerInfo[y][Spawned]==1 && !PlayerInfo[y][Jailed] && !IsPlayerNPC(y))
						{
						    if(TWPlayerInfo[y][LeadersKilled] < 1000 && TWPlayerInfo[y][Survives] < 200 && TWPlayerInfo[y][Class] != VICE && TWPlayerInfo[y][Class] != SPY)
						    {
								if(PlayerInfo[y][pTeam]==PlayerInfo[playerid][pTeam])
								{
								    UpdateDynamic3DTextLabelText(PlayerInfo[playerid][EnemyFriend][y], 0x33FF33AA, "{FFFFFF}**{33FF33}FRIEND{FFFFFF}**");
								}
								else
								{
								    UpdateDynamic3DTextLabelText(PlayerInfo[playerid][EnemyFriend][y], 0xFF0000AA, "{FFFFFF}**{FF0000}ENEMY{FFFFFF}**");
								}
							}
							else
							    UpdateDynamic3DTextLabelText(PlayerInfo[playerid][EnemyFriend][y], 0xFF0000AA, " ");

						    if(TWPlayerInfo[playerid][LeadersKilled] < 1000 && TWPlayerInfo[playerid][Survives] < 200 && TWPlayerInfo[playerid][Class] != VICE && TWPlayerInfo[playerid][Class] != SPY)
						    {
								if(PlayerInfo[playerid][pTeam]==PlayerInfo[y][pTeam])
								{
								    UpdateDynamic3DTextLabelText(PlayerInfo[y][EnemyFriend][playerid], 0x33FF33AA, "{FFFFFF}**{33FF33}FRIEND{FFFFFF}**");
								}
								else
								{
								    UpdateDynamic3DTextLabelText(PlayerInfo[y][EnemyFriend][playerid], 0xFF0000AA, "{FFFFFF}**{FF0000}ENEMY{FFFFFF}**");
								}
							}
							else
							    UpdateDynamic3DTextLabelText(PlayerInfo[y][EnemyFriend][playerid], 0xFF0000AA, " ");
						}
					}
					if(TWPlayerInfo[playerid][GasMask] == 1)
	                {
						if(TWPlayerInfo[playerid][GasMaskOn] == 1)SetPlayerAttachedObjectEx(playerid,8,19472,2,0.00,0.11,-0.00,0.00,89.00,87.99,1.00,1.00,1.00);
	                }
	                else TWPlayerInfo[playerid][GasMaskOn] = 0;
				}
	            if(PlayerInfo[playerid][PlayerMode] == STUNT)
				{
				    SetHealth(playerid,99.0);
     				SetPlayerMoney(playerid, 1000000);
     				GivePlayerTheMoney(playerid);
			       	SetPlayerScore(playerid,SFPlayerInfo[playerid][Money]);
			       	if(PlayerInfo[playerid][Attachments][1] == 1)
			       	{
				       	forLoop(i, 10)
					    {
							RemovePlayerAttachedObjectEx(playerid, i);
						}
						LoadpAtthachedObjectsFromFile(playerid);
						PlayerInfo[playerid][Attachments][0] = 1;
					}
					else
						PlayerInfo[playerid][Attachments][0] = 0;
				}
				if(PlayerInfo[playerid][PlayerMode] == FFA)
				{
					SetHealth(playerid,100000);
					GivePlayerTheMoney(playerid);
			       	SetPlayerScore(playerid,FFAPlayerInfo[playerid][Score]);
			       	if(PlayerInfo[playerid][Attachments][1] == 1)
			       	{
				       	forLoop(i, 10)
					    {
							RemovePlayerAttachedObjectEx(playerid, i);
						}
						LoadpAtthachedObjectsFromFile(playerid);
						PlayerInfo[playerid][Attachments][0] = 1;
					}
					else
						PlayerInfo[playerid][Attachments][0] = 0;
				}
				if(PlayerInfo[playerid][PlayerMode] == CTF)
				{
					SetHealth(playerid,100000);
					SetPlayerMoney(playerid, 1000);
				}
				if(PlayerInfo[playerid][PlayerMode] == TL)
				{
					SetPlayerMoney(playerid, 0);
				}
				if(PlayerInfo[playerid][poFirstTime] == 0)
				{
				    PlayerInfo[playerid][poFirstTime] = 1;
					GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~w~Use ~r~/menu ~w~to switch mode", 3000, 3);
					SendClientMessage(playerid,red1,"IMPORTANT:{FFFFFF} Use '/tut' to read a tutorial about a mode.");
				    if(ServerInfo[GlobalChat] == 1)
						SendClientMessage(playerid,red1,"IMPORTANT:{FFFFFF} Use '/g' to chat between different modes.");
				    if(!IsPlayerNPC(playerid))
					{
					    new msg[128];
						format(msg, sizeof(msg), "~w~%s (~p~joined~w~) %s",FixpInfoName(playerid),PlayerModeNames[PlayerInfo[playerid][PlayerMode]]);
						forLoop(i, MAX_MODES)UpdatepInfo(i,msg);
						format(msg, sizeof(msg), "[MODE CHANGE] %s[%d] has joined %s!", PlayerInfo[playerid][Name], playerid,PlayerModeNames[PlayerInfo[playerid][PlayerMode]]);
						db_SaveChat(-1, -1, msg);
					}
				}
				if(PlayerInfo[playerid][PlayerMode] == TL || PlayerInfo[playerid][PlayerMode] == CO
					|| PlayerInfo[playerid][PlayerMode] == ZO || PlayerInfo[playerid][PlayerMode] == CTF
						|| PlayerInfo[playerid][PlayerMode] == PTP || PlayerInfo[playerid][PlayerMode] == VW)
				{
			    	forLoop(y, MAX_PLAYERS)
				    {
						if(IsPlayerConnected(y) && PlayerInfo[y][PlayerMode] == PlayerInfo[playerid][PlayerMode] && PlayerInfo[y][Spawned] == 1 && !PlayerInfo[y][Jailed] && !IsPlayerNPC(y))
						{
						    if(PlayerInfo[playerid][PlayerMode] == PTP)
						    {
						    	if(PTPPlayerInfo[playerid][Class] != CIVILIAN && PTPPlayerInfo[y][Class] != CIVILIAN)
						        {
								    if(PlayerInfo[y][pTeam] == PlayerInfo[playerid][pTeam])
								    {
										UpdateDynamic3DTextLabelText(PlayerInfo[y][EnemyFriend][playerid], 0x33FF33AA, "{FFFFFF}[{33FF33}FRIEND{FFFFFF}]");
										UpdateDynamic3DTextLabelText(PlayerInfo[playerid][EnemyFriend][y], 0x33FF33AA, "{FFFFFF}[{33FF33}FRIEND{FFFFFF}]");
									}
									else
									{
										UpdateDynamic3DTextLabelText(PlayerInfo[playerid][EnemyFriend][y], 0xFF0000AA, "{FFFFFF}[{FF0000}ENEMY{FFFFFF}]");
										UpdateDynamic3DTextLabelText(PlayerInfo[y][EnemyFriend][playerid], 0xFF0000AA, "{FFFFFF}[{FF0000}ENEMY{FFFFFF}]");
							 		}
								}
								
								if(PTPPlayerInfo[playerid][Class] == CIVILIAN)
								{
						        	UpdateDynamic3DTextLabelText(PlayerInfo[playerid][EnemyFriend][y], 0x33FF33AA, "{FFFFFF}[{FF66FF}NEUTRAL{FFFFFF}]");
						        	UpdateDynamic3DTextLabelText(PlayerInfo[y][EnemyFriend][playerid], 0x33FF33AA, "{FFFFFF}[{FF66FF}NEUTRAL{FFFFFF}]");
								}

								if(PTPPlayerInfo[playerid][Class] == PRESIDENT)
					        		UpdateDynamic3DTextLabelText(PlayerInfo[y][EnemyFriend][playerid], 0x33FF33AA, "{FFFFFF}[{FFFF00}PRESIDENT{FFFFFF}]");

								if(PTPPlayerInfo[playerid][Class] == VICE)
						        	UpdateDynamic3DTextLabelText(PlayerInfo[y][EnemyFriend][playerid], 0x33FF33AA, " ");

								if(PTPPlayerInfo[y][Class] == PRESIDENT)
					        		UpdateDynamic3DTextLabelText(PlayerInfo[playerid][EnemyFriend][y], 0x33FF33AA, "{FFFFFF}[{FFFF00}PRESIDENT{FFFFFF}]");
							    	
								if(PTPPlayerInfo[y][Class] == VICE)
						        	UpdateDynamic3DTextLabelText(PlayerInfo[playerid][EnemyFriend][y], 0x33FF33AA, " ");

								continue;
						    }
						    if(PlayerInfo[playerid][PlayerMode] == ZO)
						    {
						        if(PlayerInfo[playerid][pTeam] == HUMAN)
									UpdateDynamic3DTextLabelText(PlayerInfo[y][EnemyFriend][playerid], 0x33FF33AA, "{FFFFFF}[{33AA33}HUMAN{FFFFFF}]");
								else if(PlayerInfo[playerid][pTeam] == ZOMBIE)
									UpdateDynamic3DTextLabelText(PlayerInfo[y][EnemyFriend][playerid], 0x33FF33AA, "{FFFFFF}[{FF0000}ZOMBIE{FFFFFF}]");

								if(PlayerInfo[y][pTeam] == HUMAN)
									UpdateDynamic3DTextLabelText(PlayerInfo[playerid][EnemyFriend][y], 0x33FF33AA, "{FFFFFF}[{33AA33}HUMAN{FFFFFF}]");
						        else if(PlayerInfo[y][pTeam] == ZOMBIE)
									UpdateDynamic3DTextLabelText(PlayerInfo[playerid][EnemyFriend][y], 0x33FF33AA, "{FFFFFF}[{FF0000}ZOMBIE{FFFFFF}]");

								continue;
						    }
							if(PlayerInfo[y][pTeam] == PlayerInfo[playerid][pTeam])
							{
							    UpdateDynamic3DTextLabelText(PlayerInfo[playerid][EnemyFriend][y], 0x33FF33AA, "{FFFFFF}[{33FF33}FRIEND{FFFFFF}]");
							    UpdateDynamic3DTextLabelText(PlayerInfo[y][EnemyFriend][playerid], 0x33FF33AA, "{FFFFFF}[{33FF33}FRIEND{FFFFFF}]");
							}
							else
							{
							    UpdateDynamic3DTextLabelText(PlayerInfo[playerid][EnemyFriend][y], 0xFF0000AA, "{FFFFFF}[{FF0000}ENEMY{FFFFFF}]");
							    UpdateDynamic3DTextLabelText(PlayerInfo[y][EnemyFriend][playerid], 0xFF0000AA, "{FFFFFF}[{FF0000}ENEMY{FFFFFF}]");
							}
						}
					}
				}
				TWPlayerInfo[playerid][EnteredTower] = 0;
				PlayerInfo[playerid][InNevada] = -1;
				PlayerInfo[playerid][InSubmarine] = -1;
	    		PlayerInfo[playerid][InTank] = -1;
		        OtherSpawn(playerid);
		        fixPlayerName(playerid, true);
				AskToChangeMode(playerid);
				if(PlayerInfo[playerid][PlayerMode] != TRP)
				{
					FixTagState(playerid);
					ShowpInfo(playerid);
					ShowkSpree(playerid);
				}
				else
				{
				    HidepInfo(playerid);
					HidekSpree(playerid);
				}
	            if(PlayerInfo[playerid][Jailed] > 0)
	            {
	                if(!(PlayerInfo[playerid][PlayerMode] == STUNT || PlayerInfo[playerid][PlayerMode] == FFA))
					{
					    OtherDeathDisconnect(playerid,0,0);
						SetPlayerMode(playerid, STUNT, false, false);
					}
	                SendClientMessage(playerid,red1, "Notice:{FFFFFF} You cannot evade jail time.");
	                JailPlayer(playerid);
	                new str[128];
					format(str,128,"Notice: {FFFFFF}%s(ID:%d) has been auto jailed as spawned for evading jail time.",PlayerInfo[playerid][Name],playerid);
					MessageToAllAdmins(lightblue,str);
	            }
	            if(PlayerInfo[playerid][Frozen] > 0)
	            {
	                SendClientMessage(playerid,red1, "Notice:{FFFFFF} You cannot evade freeze time.");
	                TogglePlayerControllable(playerid,false);
	                new str[128];
					format(str,128,"Notice: {FFFFFF}%s(ID:%d) has been auto frozen as spawned for evading freeze time.",PlayerInfo[playerid][Name],playerid);
					MessageToAllAdmins(lightblue,str);
	            }
				if(PlayerInfo[playerid][ObjectsRemoved] == 0)
				{
				    PlayerInfo[playerid][ObjectsRemoved] = 1;
					OnConnectRemoveObjects(playerid);
				}
			}
		}
	}
	//printf("DEBUG CFONTROL PlayerSpawn 2");
	return 1;
}

forward BalanceModeTeams(mode);
public BalanceModeTeams(mode)
{
	switch(mode)
	{
	    case CTF:
	    {
	        if (RedCountCTF() > BlueCountCTF() && (RedCountCTF() - BlueCountCTF()) >= 2)
	        {
	            ChooseRandomModePlayers(CTF, RED, BLUE, floatround((RedCountCTF() - BlueCountCTF())/2));
		 		SendMessageToMode(CTF,COLOR_WHITE, "{FF0000}TEAM BALANCER{FFFFFF} A few Red players have been moved to the Blue team!");
			}
			else if (RedCountCTF() < BlueCountCTF() && (BlueCountCTF() - RedCountCTF()) >= 2)
	        {
	            ChooseRandomModePlayers(CTF, BLUE, RED, floatround((BlueCountCTF() - RedCountCTF())/2));
		 		SendMessageToMode(CTF,COLOR_WHITE, "{FF0000}TEAM BALANCER{FFFFFF} A few Blue players have been moved to the Red team!");
			}
	    }
	    case CO:
	    {
	        if (CriminalCountCO() > CopCountCO() && (CriminalCountCO() - CopCountCO()) >= 2)
	        {
	            ChooseRandomModePlayers(CO, CRIMINAL, COP, floatround((CriminalCountCO() - CopCountCO())/2));
		 		SendMessageToMode(CO,COLOR_WHITE, "{FF0000}TEAM BALANCER{FFFFFF} A few Criminal players have been moved to the Police team!");
			}
			else if (CriminalCountCO() < CopCountCO() && (CopCountCO() - CriminalCountCO()) >= 2)
	        {
	            ChooseRandomModePlayers(CO, COP, CRIMINAL, floatround((CopCountCO() - CriminalCountCO())/2));
		 		SendMessageToMode(CO,COLOR_WHITE, "{FF0000}TEAM BALANCER{FFFFFF} A few Police players have been moved to the Criminal team!");
			}
	    }
		case PTP:
	    {
	        if(TeamCountPTP(BAD) > TeamCountPTP(GOOD) && (TeamCountPTP(BAD) - TeamCountPTP(GOOD)) >= 2)
	        {
	            ChooseRandomModePlayers(PTP, BAD, GOOD, floatround((TeamCountPTP(BAD) - TeamCountPTP(GOOD))/2));
		 		SendMessageToMode(PTP,COLOR_WHITE, "{FF0000}TEAM BALANCER{FFFFFF} A few Terrorist players have been moved to the Police team!");
			}
			else if(TeamCountPTP(BAD) < TeamCountPTP(GOOD) && (TeamCountPTP(GOOD) - TeamCountPTP(BAD)) >= 2)
	        {
	            ChooseRandomModePlayers(PTP, GOOD, BAD, floatround((TeamCountPTP(GOOD) - TeamCountPTP(BAD))/2));
		 		SendMessageToMode(PTP,COLOR_WHITE, "{FF0000}TEAM BALANCER{FFFFFF} A few Police players have been moved to the Terrorist team!");
			}
	    }
		case VW:
	    {
	        if(TeamCountVW(VW_USA) > TeamCountVW(VW_VIETNAM) && (TeamCountVW(VW_USA) - TeamCountVW(VW_VIETNAM)) >= 2)
	        {
	            ChooseRandomModePlayers(VW, VW_USA, VW_VIETNAM, floatround((TeamCountVW(VW_USA) - TeamCountVW(VW_VIETNAM))/2));
		 		SendMessageToMode(VW,COLOR_WHITE, "{FF0000}TEAM BALANCER{FFFFFF} A few Vietnamese players have been moved to the USA team!");
			}
			else if(TeamCountVW(VW_USA) < TeamCountVW(VW_VIETNAM) && (TeamCountVW(VW_VIETNAM) - TeamCountVW(VW_USA)) >= 2)
	        {
	            ChooseRandomModePlayers(VW, VW_VIETNAM, VW_USA, floatround((TeamCountVW(VW_VIETNAM) - TeamCountVW(VW_USA))/2));
		 		SendMessageToMode(VW,COLOR_WHITE, "{FF0000}TEAM BALANCER{FFFFFF} A few USA players have been moved to the Vietnam team!");
			}
	    }
	}
	return 1;
}

stock GetModeRandomPlayerID(mode, team)
{
	//printf("DEBUG CFONTROL GetModeRandomPlayerID 1");
	new op;
	new po[MAX_PLAYERS];
	forLoop(i, MAX_PLAYERS)
	{
		if(!IsPlayerConnected(i) || IsPlayerNPC(i))continue;
		if(mode != PTP && PlayerInfo[i][PlayerMode] == mode && PlayerInfo[i][pTeam] == team && PlayerInfo[i][Spawned] == 1)
		{
			po[op]=i;
			op++;
		}
		if(mode == PTP && PTPPlayerInfo[i][Class] != PRESIDENT && PTPPlayerInfo[i][Class] != VICE && PlayerInfo[i][PlayerMode] == mode && PlayerInfo[i][pTeam] == team && PlayerInfo[i][Spawned] == 1)
		{
			po[op]=i;
			op++;
		}
	}
	//printf("DEBUG CFONTROL GetModeRandomPlayerID 2 val: %d",po[random(op)]);
	return po[random(op)];
}

forward ChooseRandomModePlayers(mode, team, newteam, count);
public ChooseRandomModePlayers(mode, team, newteam, count)
{
	//printf("DEBUG CFONTROL ChooseRandomModePlayers 1");
	forLoop(i, count)
	{
		new pid=GetModeRandomPlayerID(mode, team);
	    PlayerInfo[pid][pTeam] = newteam;
	    if(mode == PTP)
	    {
	        if(newteam == BAD)PTPPlayerInfo[pid][Class] = TERRORIST;
	        else if(newteam == GOOD)PTPPlayerInfo[pid][Class] = POLICE;
	    }
		SpawnThePlayers(pid);
	}
	//printf("DEBUG CFONTROL ChooseRandomModePlayers 2");
	return 1;
}
stock SpawnThePlayer(playerid)
{
	//printf("DEBUG CFONTROL SpawnThePlayer 1");
    new strk[228];
    if(PlayerInfo[playerid][PlayerMode] == TRP)
    {
		SetArmor(playerid,0.0);
	    SetPlayerTeam(playerid, playerid);
		SetPlayerColor(playerid,0xFFFFFF00);
		PlayerInfo[playerid][TagState] = 1;
        PlayerInfo[playerid][sProtected] = 0;
		forLoop(i, MAX_PLAYERS)
	    {
	        if(IsPlayerConnected(i))
	        {
	            ShowPlayerNameTagForPlayer(playerid, i, false);
	        }
		}
		if(RPPlayerInfo[playerid][FirstTime] != 1)
		{
            new pstr[RP_MAX_NAME_LEN*3];
    	    SetPlayerScore(playerid,-1);
		    if(RPPlayerInfo[playerid][FirstTime] == 0)
		    {
    			format(RPPlayerInfo[playerid][rpfName], RP_MAX_NAME_LEN, "%s",RPRandomName[random(sizeof(RPRandomName))]);
    			format(RPPlayerInfo[playerid][rplName], RP_MAX_NAME_LEN, "%s",RPRandomName[random(sizeof(RPRandomName))]);
			}
			TextDrawShowForPlayer(playerid,RPInfo[rplName]);
            TextDrawShowForPlayer(playerid,RPInfo[rpfName]);
    		format(pstr,sizeof pstr, "%s~n~~n~%s",RPPlayerInfo[playerid][rpfName],RPPlayerInfo[playerid][rplName]);
			PlayerTextDrawSetString(playerid,RPPlayerInfo[playerid][rptName], pstr);
            PlayerTextDrawShow(playerid,RPPlayerInfo[playerid][rptName]);

			PlayerInfo[playerid][Option] = GetPlayerSkin(playerid);
			PlayerInfo[playerid][Spawned] = 0;
			PlayerInfo[playerid][PlayerOptionSelected] = 0;
			TextDrawShowForPlayer(playerid,ServerInfo[Left_TD]);
			TextDrawShowForPlayer(playerid,ServerInfo[Right_TD]);
			TextDrawShowForPlayer(playerid,ServerInfo[Spawn_TD]);
			SelectTextDraw(playerid, SELECT_TEXT_SKIN_CAR_DRAW);
			RPPlayerInfo[playerid][Freq] = 99;

		    SetPlayerTime(playerid, 12,0);
	     	SetPlayerWeather(playerid, 10);
			OptionSelectionSetup(playerid);
			SetPlayerCameraLookAt(playerid, 2128.0322,1577.9841,10.8203);
			return 0;
		}
		RPGivePlayerStats(playerid);
    }
    if(PlayerInfo[playerid][PlayerMode] == GK)
    {
        PlayerInfo[playerid][sProtected] = 15;
        SetPlayerTeam(playerid, playerid);
	    SetHealth(playerid,1000.0);
		GivePlayerTheMoney(playerid);
	   	GKPlayerInfo[playerid][Holding] = 0;
		SetPlayerScore(playerid,GKPlayerInfo[playerid][Score]);
		switch(random(12))
		{
		    case 0:SetPlayerColor(playerid,0x375FFFAA);//blue
		    case 1:SetPlayerColor(playerid, COLOR_GREEN);
		    case 2:SetPlayerColor(playerid, 0x33FF33AA);//yellow
		    case 3:SetPlayerColor(playerid, COLOR_PURPLE);
		    case 4:SetPlayerColor(playerid, COLOR_ORANGE);
		    case 5:SetPlayerColor(playerid, COLOR_LIGHTRED);
		    case 6:SetPlayerColor(playerid, 0x9955DEAA);//violet
		    case 8:SetPlayerColor(playerid, P_COL_BLUE);
		    case 9:SetPlayerColor(playerid, P_COL_VIOLET);
		    case 10:SetPlayerColor(playerid, P_COL_BROWN);
		    case 11:SetPlayerColor(playerid, P_COL_ORANGE);
		}
	    SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid,W_GK);
		SetPlayerPosEx(playerid, GKInfo[sX],GKInfo[sY],GKInfo[sZ],GKInfo[sA]);
	    SetPlayerTime(playerid, ModeTime[GK], 0);
	    SetPlayerWeather(playerid, ModeWeather[GK]);
	    showGKTexts(playerid);
		if(GKInfo[MapState] == 0)
		{
		    TogglePlayerControllable(playerid, false);
		    SendClientMessage(playerid, white, "{33FF33}INFO:{FFFFFF} Wait for the new round to start!");
		}
		SetPlayerWorldBounds(playerid,2977.9990, -1189.3513, 631.1843, -871.3196);
		GivePlayerWeapons(playerid,WEAPON_SHOTGUN,159,WEAPON_DEAGLE,120,WEAPON_SHOVEL,1,WEAPON_AK47,420);
    }
    if(PlayerInfo[playerid][PlayerMode] == PJ)
    {
        SetPlayerSkin(playerid,PJPlayerInfo[playerid][Skin]);
        PlayerInfo[playerid][sProtected] = 0;
        SetPlayerTeam(playerid, playerid);
	    SetHealth(playerid,99.0);
		GivePlayerTheMoney(playerid);
	   	PJPlayerInfo[playerid][Alive] = 0;
	   	PJPlayerInfo[playerid][Asked] = 0;
	   	PJPlayerInfo[playerid][InDuel] = 0;
	   	PJPlayerInfo[playerid][SpecID] = -1;
		SetPlayerScore(playerid,PJPlayerInfo[playerid][Score]);
		TextDrawHideForPlayer(playerid,PJTXTD[mInfo]);
		HidePJAliveText(playerid);
		if(PJMAPInfo[dStarted] == 1 && ModeCount(PJ) == 1)
		{
			PJMAPInfo[dStarted] = 0;
			KillTimer(PJMAPInfo[Timer]);
			PJMAPInfo[Timer] = SetTimer("StartPJMap", 5000, false);
		}
		switch(random(12))
		{
		    case 0:SetPlayerColor(playerid,0x375FFFAA);//blue
		    case 1:SetPlayerColor(playerid, COLOR_GREEN);
		    case 2:SetPlayerColor(playerid, 0x33FF33AA);//yellow
		    case 3:SetPlayerColor(playerid, COLOR_PURPLE);
		    case 4:SetPlayerColor(playerid, COLOR_ORANGE);
		    case 5:SetPlayerColor(playerid, COLOR_LIGHTRED);
		    case 6:SetPlayerColor(playerid, 0x9955DEAA);//violet
		    case 7:SetPlayerColor(playerid, 0xFF0000AA);//red
		    case 8:SetPlayerColor(playerid, P_COL_BLUE);
		    case 9:SetPlayerColor(playerid, P_COL_VIOLET);
		    case 10:SetPlayerColor(playerid, P_COL_BROWN);
		    case 11:SetPlayerColor(playerid, P_COL_ORANGE);
		}
		if(PJPlayerInfo[playerid][rRespawn] == 1)
		{
		    SetPlayerPosEx(playerid, PJMAPInfo[sX],PJMAPInfo[sY], PJMAPInfo[sZ]+3, PJMAPInfo[sAng]);
		    SetPlayerVirtualWorld(playerid,W_PJ);
		    SetPlayerInterior(playerid, 0);
		    if(PJPlayerInfo[playerid][Glasses] > 0)
			{
				new skin = GetPlayerSkin(playerid);
				SetPlayerAttachedObjectEx(playerid, 8, PJPlayerInfo[playerid][Glasses], 2, SkinOffSetGlasses[skin][0], SkinOffSetGlasses[skin][1], SkinOffSetGlasses[skin][2], SkinOffSetGlasses[skin][3], SkinOffSetGlasses[skin][4], SkinOffSetGlasses[skin][5], SkinOffSetGlasses[skin][6], SkinOffSetGlasses[skin][6], SkinOffSetGlasses[skin][6]);
			}
			if(PJPlayerInfo[playerid][Hats] > 0)
			{
				SetPlayerAttachedObjectEx(playerid, 3, PJPlayerInfo[playerid][Hats], 2, 0.120000, 0.040000, -0.003500, 0, 100, 100, 1.4, 1.4, 1.4);
			}
			
			if(GetPVarInt(playerid, "PJFlare") == 1)
				SetPlayerAttachedObjectEx(playerid, 5, 18728,1,-0.730000,1.504000,-0.117998,82.900054,1.599998,0.000000,0.467999,0.621000,0.809000);

			if(PJPlayerInfo[playerid][dWeather] >= 0)
			    SetPlayerWeather(playerid, PJPlayerInfo[playerid][dWeather]);
			if(PJPlayerInfo[playerid][dTime] >= 0)
			    SetPlayerTime(playerid, PJPlayerInfo[playerid][dTime], 0);

			TextDrawShowForPlayer(playerid,PJTXTD[mInfo]);

			ShowPJAliveText(playerid);
		    PJPlayerInfo[playerid][Alive] = 1;
		}
		else
		{
	        if(PJMAPInfo[dStarted] == 0)
		    {
		        PJPlayerInfo[playerid][Alive] = 1;
				TogglePlayerControllable(playerid,false);
    			ShowNewMapTextsPJ(playerid);
				TextDrawHideForPlayer(playerid,PJTXTD[mInfo]);
				TextDrawHideForPlayer(playerid,PJTXTD[Loading]);
	    		TextDrawShowForPlayer(playerid,PJTXTD[Text]);
				//SendClientMessage(playerid, white, "DEBUG MODE: A few txts have been removed to test some stuff.");
				format(strk,sizeof strk,"{FFFFFF}MAP: {33FF33}%s {FFFFFF}By: {33FF33}%s {FFFFFF}Rating: {33FF33}%d/10", FixpInfoString(PJMAPInfo[mName], 1), FixpInfoString(PJMAPInfo[Author], 1), PJMAPInfo[Rating]);
				SendClientMessage(playerid, white, strk);//too damn long.. that's why it isn;t being sent

			    SetPlayerPosEx(playerid, PJMAPInfo[sX],PJMAPInfo[sY], PJMAPInfo[sZ]+3, PJMAPInfo[sAng]);
			    SetPlayerVirtualWorld(playerid,W_PJ);
			    //GivePJCar(playerid, place);
			    SetPlayerInterior(playerid, 0);

				if(PJPlayerInfo[playerid][Glasses] > 0)
				{
					new skin = GetPlayerSkin(playerid);
					SetPlayerAttachedObjectEx(playerid, 8, PJPlayerInfo[playerid][Glasses], 2, SkinOffSetGlasses[skin][0], SkinOffSetGlasses[skin][1], SkinOffSetGlasses[skin][2], SkinOffSetGlasses[skin][3], SkinOffSetGlasses[skin][4], SkinOffSetGlasses[skin][5], SkinOffSetGlasses[skin][6], SkinOffSetGlasses[skin][6], SkinOffSetGlasses[skin][6]);
				}
				if(PJPlayerInfo[playerid][Hats] > 0)
				{
					SetPlayerAttachedObjectEx(playerid, 3, PJPlayerInfo[playerid][Hats], 2, 0.120000, 0.040000, -0.003500, 0, 100, 100, 1.4, 1.4, 1.4);
				}
				if(GetPVarInt(playerid, "PJFlare") == 1)
					SetPlayerAttachedObjectEx(playerid, 5, 18728,1,-0.730000,1.504000,-0.117998,82.900054,1.599998,0.000000,0.467999,0.621000,0.809000);

				
				if(PJPlayerInfo[playerid][dWeather] >= 0)
				    SetPlayerWeather(playerid, PJPlayerInfo[playerid][dWeather]);
				if(PJPlayerInfo[playerid][dTime] >= 0)
				    SetPlayerTime(playerid, PJPlayerInfo[playerid][dTime], 0);
		    }
		    else if(PJMAPInfo[dStarted] == 1)
		    {
				ShowPJAliveText(playerid);
				StartPJMapSpecForPlayer(playerid);
				TextDrawShowForPlayer(playerid,PJTXTD[mInfo]);

				SetPlayerColor(playerid,0xFFFFFF00);
				SetTimerEx("StartAudioForDDPJ", 2000, false, "i", playerid);
		    }
	    }
    }
    if(PlayerInfo[playerid][PlayerMode] == ZO)
	{
	    PlayerInfo[playerid][pTeam] = ZOMBIE;
	    if(ZOInfo[Floor] == 1)
	    {
			FreezeBeforeObjects(playerid);
		}
        PlayerInfo[playerid][sProtected] = 0;
	    SetHealth(playerid,99.0);
		GivePlayerTheMoney(playerid);
		if(ZOPlayerInfo[playerid][Chosen] == 0 && ZOInfo[TimeLeft] > ((ZOInfo[MapTime]*60)-20) && ModeCount(ZO) > 1)
			PlayerInfo[playerid][pTeam] = HUMAN;
		if(PlayerInfo[playerid][pTeam] == ZOMBIE)
		{
		    SetPlayerColor(playerid,0xFF990000);//orange
		    SetPlayerPosEx(playerid, ZOInfo[zX],ZOInfo[zY],ZOInfo[zZ]+1,random(360));
		    SendClientMessage(playerid, white, "{33FF33}INFO:{FFFFFF} Kill the {33AA33}humans {FFFFFF}before the evacuation arrives!");
		    switch(random(7))
			{
			    case 0:SetPlayerSkin(playerid,29);
			    case 1:SetPlayerSkin(playerid,32);
			    case 2:SetPlayerSkin(playerid,33);
			    case 3:SetPlayerSkin(playerid,54);
			    case 4:SetPlayerSkin(playerid,87);
			    case 5:SetPlayerSkin(playerid,142);
			    case 6:SetPlayerSkin(playerid,160);
			}
			PlayerInfo[playerid][sProtected] = 15;
		    SetHealth(playerid,1000.0);
		    GiveWeapon(playerid,WEAPON_CHAINSAW,1);
    		SetPlayerChatBubble(playerid, "**Spawn Protected**", 0xFFFFFFFF, 30.0, 10000);
			GameTextForPlayer(playerid, "~w~~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ You are a zombie",2999, 3);
		}
		if(PlayerInfo[playerid][pTeam] == HUMAN)
		{
		    SetPlayerColor(playerid,0x33AA33AA);//green
			SetPlayerPosEx(playerid, ZOInfo[hX],ZOInfo[hY],ZOInfo[hZ]+1,random(360));
			GivePlayerWeapons(playerid,WEAPON_SHOTGSPA,2459,WEAPON_DEAGLE,1320,WEAPON_SHOVEL,1,WEAPON_AK47,1220);
			GivePlayerWeapons(playerid,WEAPON_MP5,1559,WEAPON_GRENADE,3,0,0,0,0);
				
		    SendClientMessage(playerid, white, "{33FF33}INFO:{FFFFFF} Stay alive until the evacuation arrives! Use /shop to buy weapons!");
            switch(random(18))
			{
			    case 0:SetPlayerSkin(playerid,62);
			    case 1:SetPlayerSkin(playerid,167);
			    case 2:SetPlayerSkin(playerid,161);
			    case 3:SetPlayerSkin(playerid,138);
			    case 4:SetPlayerSkin(playerid,119);
			    case 5:SetPlayerSkin(playerid,121);
			    case 6:SetPlayerSkin(playerid,77);
			    case 7:SetPlayerSkin(playerid,70);
			    case 8:SetPlayerSkin(playerid,94);
			    case 9:SetPlayerSkin(playerid,129);
			    case 10:SetPlayerSkin(playerid,267);
			    case 11:SetPlayerSkin(playerid,272);
			    case 12:SetPlayerSkin(playerid,275);
			    case 13:SetPlayerSkin(playerid,278);
			    case 14:SetPlayerSkin(playerid,286);
			    case 15:SetPlayerSkin(playerid,287);
			    case 16:SetPlayerSkin(playerid,216);
			    case 17:SetPlayerSkin(playerid,214);
			}
			GameTextForPlayer(playerid, "~w~~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ You are a human",2999, 3);
		}
		//if(ModeCount(ZO) < 3)
	//	    SendClientMessage(playerid, white, "{FF0000}INFO:{FFFFFF} There need to be at least 3 players for this mode to work!");
	    SetPlayerVirtualWorld(playerid,W_ZO);
	    SetPlayerInterior(playerid, ZOInfo[Interior]);
	    SetPlayerTime(playerid, ModeTime[ZO], 0);
	    SetPlayerWeather(playerid, ModeWeather[ZO]);
	    SetPlayerTeam(playerid,PlayerInfo[playerid][pTeam]);
	    showZOTexts(playerid);
	}
    if(PlayerInfo[playerid][PlayerMode] == DM)
    {
        SetPlayerSkin(playerid,DMPlayerInfo[playerid][Skin]);
        PlayerInfo[playerid][sProtected] = 0;
        SetPlayerTeam(playerid, playerid);
	    SetHealth(playerid,99.0);
		GivePlayerTheMoney(playerid);
	   	DMPlayerInfo[playerid][Alive] = 0;
	   	DMPlayerInfo[playerid][Asked] = 0;
	   	DMPlayerInfo[playerid][SpecID] = -1;
		if(PlayerInfo[playerid][Vehicle] != -1) DestroyVehicle(PlayerInfo[playerid][Vehicle]);
		PlayerInfo[playerid][Vehicle]=-1;
		SetPlayerScore(playerid,DMPlayerInfo[playerid][Score]);
		TextDrawHideForPlayer(playerid,DMTXTD[mInfo]);
		HideDMAliveText(playerid);
		HideDMDDTexts(playerid);
		if(DMMAPInfo[dStarted] == 1 && ModeCount(DM) == 1)
		{
			DMMAPInfo[dStarted] = 0;
			KillTimer(DMMAPInfo[Timer]);
			KillTimer(DMMAPInfo[AllWorldTimer]);
			DMMAPInfo[Timer] = SetTimer("StartDDMap", 5000, false);
		}
		switch(random(12))
		{
		    case 0:SetPlayerColor(playerid,0x375FFFAA);//blue
		    case 1:SetPlayerColor(playerid, COLOR_GREEN);
		    case 2:SetPlayerColor(playerid, 0x33FF33AA);//yellow
		    case 3:SetPlayerColor(playerid, COLOR_PURPLE);
		    case 4:SetPlayerColor(playerid, COLOR_ORANGE);
		    case 5:SetPlayerColor(playerid, COLOR_LIGHTRED);
		    case 6:SetPlayerColor(playerid, 0x9955DEAA);//violet
		    case 7:SetPlayerColor(playerid, 0xFF0230AA);//random.. removed red
		    case 8:SetPlayerColor(playerid, P_COL_BLUE);
		    case 9:SetPlayerColor(playerid, P_COL_VIOLET);
		    case 10:SetPlayerColor(playerid, P_COL_BROWN);
		    case 11:SetPlayerColor(playerid, P_COL_ORANGE);
		}
		if(DMPlayerInfo[playerid][rRespawn] == 1 && DMMAPInfo[Type] == DM_TYPE_RACE)
		{
		    DMPlayerInfo[playerid][Alive] = 1;
		    new place=0, worldid = W_DM+2, rspotid, randomspot[DM_MAX_SPOTS];
            forLoop(id, DM_MAX_SPOTS)
		    {
		        if(DMMAPInfo[sExists][id] == 1 && DMMAPInfo[sTaken][id] == 0)
		        {
		            randomspot[rspotid]=id;
		            rspotid++;
		        }
		    }
            if(rspotid != 0)
		    {
				if(rspotid >= DM_MAX_SPOTS)rspotid = DM_MAX_SPOTS-1;
			    place = randomspot[random(rspotid)];
			    DMMAPInfo[sTaken][place] = 1;
		    }
		    else
		    {
			    forLoop(id, DM_MAX_SPOTS)
			    {
			        if(DMMAPInfo[sExists][id] == 1)
			        {
			            DMMAPInfo[sTaken][id] = 0;
			        }
			    }
			    place = 0;
		    }
		    DMPlayerInfo[playerid][cRaceCP] = 0;
		    DMPlayerInfo[playerid][cPSame] = -1;
		    DMPlayerInfo[playerid][cRacePos] = DMMapAlivePlayers();
            DMPlayerInfo[playerid][rFinished] = 0;

        	SendClientMessage(playerid, white, "{33FF33}RACE MAP:{FFFFFF} This is a RACE map, raming is allowed.");
        	forLoopV(c, DMPlayerInfo[playerid][cRaceCP], MAX_DM_CP)
			{
			    if(DMMAPInfo[cExists][c] == 1)
			    {
			        new nid = DMMAPInfo[cNext][c];
			        if(nid != -1) SetPlayerRaceCheckpoint(playerid, DMMAPInfo[cType][c],
									DMMAPInfo[cX][c], DMMAPInfo[cY][c], DMMAPInfo[cZ][c],
									DMMAPInfo[cX][nid], DMMAPInfo[cY][nid], DMMAPInfo[cZ][nid],
									DMMAPInfo[cSize][c]+6);
					else
					{
						SetPlayerRaceCheckpoint(playerid, DMMAPInfo[cType][c],
									DMMAPInfo[cX][c], DMMAPInfo[cY][c], DMMAPInfo[cZ][c],
									0.0, 0.0, 0.0,
									DMMAPInfo[cSize][c]+6);
                        DMPlayerInfo[playerid][cRaceCP] = MAX_DM_CP+10;
					}
					break;
			    }
			}
			if(DMPlayerInfo[playerid][eBarrel] == 1)
                SendClientMessage(playerid, white, "{FF0000}RACE MSG:{FFFFFF} You have one explosive barrel, press 2 to use it.");

			SetPlayerPosEx(playerid, DMMAPInfo[sX][place],DMMAPInfo[sY][place], DMMAPInfo[sZ][place]+1, DMMAPInfo[sAng][place]);
		    SetPlayerVirtualWorld(playerid,worldid);
		    //GiveDMCar(playerid, place);
		    SetPlayerInterior(playerid, 0);
		    
		    ShowDMAliveText(playerid);
    		ShowDMDDTexts(playerid);
			TextDrawShowForPlayer(playerid,DMTXTD[mInfo]);
		    
            KillTimer(DMPlayerInfo[playerid][CarTimer]);
			DMPlayerInfo[playerid][CarTimer] = SetTimerEx("GiveDMCar", 1000, false, "ii", playerid, place);

			if(DMPlayerInfo[playerid][Glasses] > 0)
			{
				new skin = GetPlayerSkin(playerid);
				SetPlayerAttachedObjectEx(playerid, 8, DMPlayerInfo[playerid][Glasses], 2, SkinOffSetGlasses[skin][0], SkinOffSetGlasses[skin][1], SkinOffSetGlasses[skin][2], SkinOffSetGlasses[skin][3], SkinOffSetGlasses[skin][4], SkinOffSetGlasses[skin][5], SkinOffSetGlasses[skin][6], SkinOffSetGlasses[skin][6], SkinOffSetGlasses[skin][6]);
			}
			if(DMPlayerInfo[playerid][Hats] > 0)
			{
				SetPlayerAttachedObjectEx(playerid, 3, DMPlayerInfo[playerid][Hats], 2, 0.120000, 0.040000, -0.003500, 0, 100, 100, 1.4, 1.4, 1.4);
			}
			if(DMPlayerInfo[playerid][dWeather] >= 0)
			    SetPlayerWeather(playerid, DMPlayerInfo[playerid][dWeather]);
			if(DMPlayerInfo[playerid][dTime] >= 0)
			    SetPlayerTime(playerid, DMPlayerInfo[playerid][dTime], 0);
		}
		else
		{
	        if(DMMAPInfo[dStarted] == 0)
		    {
		        DMPlayerInfo[playerid][Alive] = 1;
				TogglePlayerControllable(playerid,false);
				ShowNewMapTextsDM(playerid);
				TextDrawHideForPlayer(playerid,DMTXTD[mInfo]);
				TextDrawHideForPlayer(playerid,DMTXTD[Loading]);
				TextDrawShowForPlayer(playerid,DMTXTD[Text]);
				//SendClientMessage(playerid, white, "DEBUG MODE: A few txts have been removed to test some stuff.");
	    		
				format(strk,sizeof strk,"{FFFFFF}MAP: {33FF33}%s {FFFFFF}By: {33FF33}%s {FFFFFF}Rating: {33FF33}%d/10", FixpInfoString(DMMAPInfo[mName], 1), FixpInfoString(DMMAPInfo[Author], 1), DMMAPInfo[Rating]);
				SendClientMessage(playerid, white, strk);//too damn long.. that's why it isn;t being sent

                new place=-1, worldid=-1, rspotid, randomspot[DM_MAX_SPOTS];
	            forLoop(id, DM_MAX_SPOTS)
			    {
			        if(DMMAPInfo[sExists][id] == 1 && DMMAPInfo[sTaken][id] == 0)
			        {
			            randomspot[rspotid]=id;
			            rspotid++;
			        }
			    }
	            if(rspotid != 0)
			    {
					if(rspotid >= DM_MAX_SPOTS)rspotid = DM_MAX_SPOTS-1;
				    place = randomspot[random(rspotid)];
				    DMMAPInfo[sTaken][place] = 1;
			    }
			    else
			    {
				    forLoop(id, DM_MAX_SPOTS)
				    {
				        if(DMMAPInfo[sExists][id] == 1)
				        {
				            DMMAPInfo[sTaken][id] = 0;
				        }
				    }
				    place = 0;
			    }

	            
			    KillTimer(DMPlayerInfo[playerid][CarTimer]);
				DMPlayerInfo[playerid][CarTimer] = SetTimerEx("GiveDMCar", 2000, false, "ii", playerid, place);

	            forLoop(id, DM_MAX_SPOTS)
			    {
			        if(DMMAPInfo[wTaken][id] == 0)
			        {
			            worldid = DMMAPInfo[wID][id];
			            DMMAPInfo[wTaken][id] = 1;
			            break;
			        }
			    }
			    if(worldid == -1)
			    {
				    forLoop(id, DM_MAX_SPOTS)
				    {
				        DMMAPInfo[wTaken][id] = 0;
				    }
				    worldid=W_DM+1;
			    }
			    if(DMMAPInfo[Type] == DM_TYPE_DM)
	            	SendClientMessage(playerid, white, "{33FF33}DM MAP:{FFFFFF} This is a DM map, raming is NOT allowed. Last one wins!");
	            else if(DMMAPInfo[Type] == DM_TYPE_RACE)
	            {
	                DMPlayerInfo[playerid][cRaceCP] = 0;
		    		DMPlayerInfo[playerid][cPSame] = -1;
	                DMPlayerInfo[playerid][cRacePos] = DMMapAlivePlayers();
	                DMPlayerInfo[playerid][rFinished] = 0;

	            	SendClientMessage(playerid, white, "{33FF33}RACE MAP:{FFFFFF} This is a RACE map, raming is allowed.");
	            	forLoopV(c, DMPlayerInfo[playerid][cRaceCP], MAX_DM_CP)
					{
					    if(DMMAPInfo[cExists][c] == 1)
					    {
					        new nid = DMMAPInfo[cNext][c];
					        if(nid != -1) SetPlayerRaceCheckpoint(playerid, DMMAPInfo[cType][c],
											DMMAPInfo[cX][c], DMMAPInfo[cY][c], DMMAPInfo[cZ][c],
											DMMAPInfo[cX][nid], DMMAPInfo[cY][nid], DMMAPInfo[cZ][nid],
											DMMAPInfo[cSize][c]+6);
							else
							{
								SetPlayerRaceCheckpoint(playerid, DMMAPInfo[cType][c],
											DMMAPInfo[cX][c], DMMAPInfo[cY][c], DMMAPInfo[cZ][c],
											0.0, 0.0, 0.0,
											DMMAPInfo[cSize][c]+6);
	                            DMPlayerInfo[playerid][cRaceCP] = MAX_DM_CP+1;
							}
							break;
					    }
					}
					if(DMPlayerInfo[playerid][eBarrel] == 1)
	                    SendClientMessage(playerid, white, "{FF0000}RACE MSG:{FFFFFF} You have one explosive barrel, press 2 to use it.");
				}
				else
	            	SendClientMessage(playerid, white, "{33FF33}DD MAP:{FFFFFF}This is a DD map, raming is allowed. Last one wins!");


			    SetPlayerPosEx(playerid, DMMAPInfo[sX][place],DMMAPInfo[sY][place], DMMAPInfo[sZ][place]+1, DMMAPInfo[sAng][place]);
			    SetPlayerVirtualWorld(playerid,worldid);
			    //GiveDMCar(playerid, place);
			    SetPlayerInterior(playerid, 0);

				if(DMPlayerInfo[playerid][Glasses] > 0)
				{
					new skin = GetPlayerSkin(playerid);
					SetPlayerAttachedObjectEx(playerid, 8, DMPlayerInfo[playerid][Glasses], 2, SkinOffSetGlasses[skin][0], SkinOffSetGlasses[skin][1], SkinOffSetGlasses[skin][2], SkinOffSetGlasses[skin][3], SkinOffSetGlasses[skin][4], SkinOffSetGlasses[skin][5], SkinOffSetGlasses[skin][6], SkinOffSetGlasses[skin][6], SkinOffSetGlasses[skin][6]);
				}
				if(DMPlayerInfo[playerid][Hats] > 0)
				{
					SetPlayerAttachedObjectEx(playerid, 3, DMPlayerInfo[playerid][Hats], 2, 0.120000, 0.040000, -0.003500, 0, 100, 100, 1.4, 1.4, 1.4);
				}
				if(DMPlayerInfo[playerid][dWeather] >= 0)
				    SetPlayerWeather(playerid, DMPlayerInfo[playerid][dWeather]);
				if(DMPlayerInfo[playerid][dTime] >= 0)
				    SetPlayerTime(playerid, DMPlayerInfo[playerid][dTime], 0);
		    }
		    else if(DMMAPInfo[dStarted] == 1)
		    {
				ShowDMAliveText(playerid);
				StartDMMapSpecForPlayer(playerid);
                ShowDMDDTexts(playerid);
				TextDrawShowForPlayer(playerid,DMTXTD[mInfo]);

				SetPlayerColor(playerid,0xFFFFFF00);
				SetTimerEx("StartAudioForDDDM", 2000, false, "i", playerid);
		    }
		}
    }
    if(PlayerInfo[playerid][PlayerMode] == VW)
	{
	    if(PlayerInfo[playerid][poFirstTime] == 0)
	    {
	        VWGetOfficialObjective(playerid);
	        VWPlayerInfo[playerid][Deployed] = 0;
			
			if(TeamCountVW(VW_VIETNAM) == TeamCountVW(VW_USA))
            {
                switch(random(2))
                {
                    case 0:PlayerInfo[playerid][pTeam] = VW_USA;
                    case 1:PlayerInfo[playerid][pTeam] = VW_VIETNAM;
                }
			}
			else if (TeamCountVW(VW_USA) > TeamCountVW(VW_VIETNAM))
				PlayerInfo[playerid][pTeam] = VW_VIETNAM;
			else
				PlayerInfo[playerid][pTeam] = VW_USA;
		}
	    //vwspawnawdaw
	    SetPlayerTeam(playerid,PlayerInfo[playerid][pTeam]);
		SetHealth(playerid,99.0);
		PlayerInfo[playerid][sProtected] = 0;
		VWPlayerInfo[playerid][LastLoad] = 0;
		VWPlayerInfo[playerid][LastCreate] = 0;
		SetPlayerScore(playerid, VWPlayerInfo[playerid][Score]);
		if(VWPlayerInfo[playerid][Deployed] == 0)
		{
			SetPlayerColor(playerid, grey12);
			showVWTexts(playerid, true);
		}
		else
		{
		    VWSpawnInObjective(playerid, VWPlayerInfo[playerid][Objective]);
		    VWGiveWeapons(playerid);
			showVWTexts(playerid, false);
			SetPlayerColor(playerid, VWTeamCol[PlayerInfo[playerid][pTeam]]);
		    SetPlayerSkin(playerid, VW_ClassSkins[PlayerInfo[playerid][pTeam]][VWPlayerInfo[playerid][Class]]);
		    if(VWPlayerInfo[playerid][Class] == VW_MEDIC || VWPlayerInfo[playerid][Class] == VW_ENGINEER)
		        GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~w~PRESS ~r~ALT ~w~FOR ACTION", 4000, 3);
		}
	}
    if(PlayerInfo[playerid][PlayerMode] == CTF)
	{
	    SetPlayerTeam(playerid,PlayerInfo[playerid][pTeam]);
	    SetPlayerScore(playerid,CTFPlayerInfo[playerid][Score]);
		SetPlayerVirtualWorld(playerid, W_CTF);
		showCTFTexts(playerid);
		SetPlayerInterior(playerid,CTFSpawnInterior[CTFInfo[Map]]);
		SetHealth(playerid,99.0);
		CTFPlayerInfo[playerid][Capturing] = 0;
	    if(PlayerInfo[playerid][SelectedSkin] > -1)SetPlayerSkin(playerid,PlayerInfo[playerid][SelectedSkin]);
		else
		{
		    switch(random(18))
			{
			    case 0:SetPlayerSkin(playerid,8);
			    case 1:SetPlayerSkin(playerid,89);
			    case 2:SetPlayerSkin(playerid,93);
			    case 3:SetPlayerSkin(playerid,264);
			    case 4:SetPlayerSkin(playerid,26);
			    case 5:SetPlayerSkin(playerid,133);
			    case 6:SetPlayerSkin(playerid,46);
			    case 7:SetPlayerSkin(playerid,166);
			    case 8:SetPlayerSkin(playerid,36);
			    case 9:SetPlayerSkin(playerid,13);
			    case 10:SetPlayerSkin(playerid,133);
			    case 11:SetPlayerSkin(playerid,45);
			    case 12:SetPlayerSkin(playerid,67);
			    case 13:SetPlayerSkin(playerid,78);
			    case 14:SetPlayerSkin(playerid,231);
			    case 15:SetPlayerSkin(playerid,254);
			    case 16:SetPlayerSkin(playerid,131);
			    case 17:SetPlayerSkin(playerid,96);
			}
		}

		if(PlayerInfo[playerid][pTeam] == BLUE)
		{
			SetPlayerColor(playerid,0x375FFFAA);//blue
			SetPlayerPos(playerid,CTFSpawnBlue[CTFInfo[Map]][1],CTFSpawnBlue[CTFInfo[Map]][2],CTFSpawnBlue[CTFInfo[Map]][3]);
			SendClientMessage(playerid, white, "{33FF33}INFO:{FFFFFF} Capture the {FFFF00}flag {FFFFFF}before the {FF0000}red{FFFFFF} team wins!");
		}
		if(PlayerInfo[playerid][pTeam] == RED)
		{
   			SetPlayerColor(playerid,0xFF0000AA);//red000
			SetPlayerPos(playerid,CTFSpawnRed[CTFInfo[Map]][1],CTFSpawnRed[CTFInfo[Map]][2],CTFSpawnRed[CTFInfo[Map]][3]);
			SendClientMessage(playerid, white, "{33FF33}INFO:{FFFFFF} Capture the {FFFF00}flag {FFFFFF}before the {375FFF}blue{FFFFFF} team wins!");
		}
		
		if(CTFSpawnInterior[CTFInfo[Map]] > 0)
		{
		    PlayerInfo[playerid][sProtected] = 5;
			SetPlayerChatBubble(playerid, "**Spawn Protected**", 0xFFFFFFFF, 30.0, 5000);
			GivePlayerWeapons(playerid,WEAPON_SNIPER,9000,WEAPON_MP5,9925,WEAPON_DEAGLE,9120,WEAPON_M4,9320);
			GivePlayerWeapons(playerid,0,0,WEAPON_GRENADE,5,WEAPON_SHOTGSPA,9120,WEAPON_CHAINSAW,1);
		}
		else
		{
			SetPlayerChatBubble(playerid, "**Spawn Protected**", 0xFFFFFFFF, 30.0, 30000);
			GivePlayerWeapons(playerid,WEAPON_MP5,225,WEAPON_DEAGLE,120,WEAPON_BAT,1,WEAPON_M4,320);
		}
		SetPlayerWorldBounds(playerid,MapBoundsCTF[CTFInfo[Map]][0],MapBoundsCTF[CTFInfo[Map]][1],MapBoundsCTF[CTFInfo[Map]][2],MapBoundsCTF[CTFInfo[Map]][3]);
	}
    if(PlayerInfo[playerid][PlayerMode] == PTP)
	{
	    GivePlayerTheMoney(playerid);
	    SetPlayerScore(playerid,PTPPlayerInfo[playerid][Score]);
		SetPlayerVirtualWorld(playerid, W_PTP);
		SetPlayerInterior(playerid,0);
        SetPlayerWorldBounds(playerid,MapBoundsPTP[PTPInfo[Map]][0],MapBoundsPTP[PTPInfo[Map]][1],MapBoundsPTP[PTPInfo[Map]][2],MapBoundsPTP[PTPInfo[Map]][3]);

		if(ClassCountPTP(PRESIDENT) > 1 && PTPPlayerInfo[playerid][Class] == PRESIDENT)
			PTPPlayerInfo[playerid][Class] = CIVILIAN;
		if(ClassCountPTP(VICE) > 1 && PTPPlayerInfo[playerid][Class] == VICE)
			PTPPlayerInfo[playerid][Class] = CIVILIAN;
		if(ClassCountPTP(PRESIDENT) == 0 && PTPPlayerInfo[playerid][Class] == VICE)
			PTPPlayerInfo[playerid][Class] = PRESIDENT;
		if(ClassCountPTP(SECURITY) > 8 && PTPPlayerInfo[playerid][Class] == SECURITY)
			PTPPlayerInfo[playerid][Class] = POLICE;
			
		if(PTPPlayerInfo[playerid][Class] == PRESIDENT)
		{
		    PTPPlayerInfo[playerid][TimesAsPres]++;
		    PTPInfo[TimeLeft] = PTP_MAP_TIME;
		    SetPlayerSkin(playerid,295);
		    PresidentRespawnPTP(playerid);
   			PlayerInfo[playerid][pTeam] = GOOD;
   			SetPlayerPosEx(playerid,PTPSpawn[PTPInfo[Map]][0],PTPSpawn[PTPInfo[Map]][1],PTPSpawn[PTPInfo[Map]][2],PTPSpawn[PTPInfo[Map]][3]);
		}
		if(PTPPlayerInfo[playerid][Class] == VICE)
		{
		    SetPlayerSkin(playerid,147);
   			PlayerInfo[playerid][pTeam] = GOOD;
   			SetPlayerPosEx(playerid,PTPSpawn[PTPInfo[Map]][4],PTPSpawn[PTPInfo[Map]][5],PTPSpawn[PTPInfo[Map]][6],PTPSpawn[PTPInfo[Map]][7]);
		}
		if(PTPPlayerInfo[playerid][Class] == SECURITY)
		{
		    switch(random(4))
			{
			    case 0:SetPlayerSkin(playerid,165);
			    case 1:SetPlayerSkin(playerid,287);
			    case 2:SetPlayerSkin(playerid,285);
			    case 3:SetPlayerSkin(playerid,286);
			}
   			PlayerInfo[playerid][pTeam] = GOOD;
   			SetPlayerPosEx(playerid,PTPSpawn[PTPInfo[Map]][8],PTPSpawn[PTPInfo[Map]][9],PTPSpawn[PTPInfo[Map]][10],PTPSpawn[PTPInfo[Map]][11]);
		}
		if(PTPPlayerInfo[playerid][Class] == POLICE)
		{
		    switch(random(5))
			{
			    case 0:SetPlayerSkin(playerid,280);
			    case 1:SetPlayerSkin(playerid,281);
			    case 2:SetPlayerSkin(playerid,282);
			    case 3:SetPlayerSkin(playerid,283);
			    case 4:SetPlayerSkin(playerid,284);
			}
   			PlayerInfo[playerid][pTeam] = GOOD;
   			SetPlayerPosEx(playerid,PTPSpawn[PTPInfo[Map]][12],PTPSpawn[PTPInfo[Map]][13],PTPSpawn[PTPInfo[Map]][14],PTPSpawn[PTPInfo[Map]][15]);
		}
		if(PTPPlayerInfo[playerid][Class] == TERRORIST)
		{
		    switch(random(7))
			{
			    case 0:SetPlayerSkin(playerid,73);
			    case 1:SetPlayerSkin(playerid,111);
			    case 2:SetPlayerSkin(playerid,122);
			    case 3:SetPlayerSkin(playerid,179);
			    case 4:SetPlayerSkin(playerid,247);
			    case 5:SetPlayerSkin(playerid,248);
			    case 6:SetPlayerSkin(playerid,254);
			}
   			PlayerInfo[playerid][pTeam] = BAD;
   			SetPlayerPosEx(playerid,PTPSpawn[PTPInfo[Map]][16],PTPSpawn[PTPInfo[Map]][17],PTPSpawn[PTPInfo[Map]][18],PTPSpawn[PTPInfo[Map]][19]);
		}
		if(PTPPlayerInfo[playerid][Class] == CIVILIAN)
		{
		    switch(random(9))
			{
			    case 0:SetPlayerSkin(playerid,167);
			    case 1:SetPlayerSkin(playerid,95);
			    case 2:SetPlayerSkin(playerid,97);
			    case 3:SetPlayerSkin(playerid,119);
			    case 4:SetPlayerSkin(playerid,233);
			    case 5:SetPlayerSkin(playerid,252);
			    case 6:SetPlayerSkin(playerid,255);
			    case 7:SetPlayerSkin(playerid,264);
			    case 8:SetPlayerSkin(playerid,290);
			}
   			PlayerInfo[playerid][pTeam] = NOTEAM;
   			SetPlayerPosEx(playerid,PTPSpawn[PTPInfo[Map]][20],PTPSpawn[PTPInfo[Map]][21],PTPSpawn[PTPInfo[Map]][22],PTPSpawn[PTPInfo[Map]][23]);
		}
		GivethePTPWeapons(playerid);
   		SetPlayerColor(playerid,PTPClassColors[PTPPlayerInfo[playerid][Class]]);
	    if(PlayerInfo[playerid][pTeam] != NOTEAM)SetPlayerTeam(playerid,PlayerInfo[playerid][pTeam]);
	    else SetPlayerTeam(playerid, playerid+10);
		PlayerInfo[playerid][sProtected] = 20;
    	SetHealth(playerid,1000.0);
    	showPTPTexts(playerid);
    	SetPlayerChatBubble(playerid, "**Spawn Protected**", 0xFFFFFFFF, 30.0, 20000);
    	SendClientMessage(playerid, red1, "{33FF33}HELPER:{FFFFFF} Use /myduty to see what your job is and /ranks to see the rank list!");
	}

    if(PlayerInfo[playerid][PlayerMode] == CO)
	{
	    GivePlayerTheMoney(playerid);
	    SetPlayerTeam(playerid,PlayerInfo[playerid][pTeam]);
	    SetPlayerScore(playerid,COPlayerInfo[playerid][Score]);
		SetPlayerVirtualWorld(playerid, W_CO);
		SetPlayerInterior(playerid,0);
		COPlayerInfo[playerid][Arresting] = -1;
	    SetPlayerSkin(playerid,PlayerInfo[playerid][SelectedSkin]);//change the value when /cops or /criminal is used
        SetPlayerWorldBounds(playerid,MapBoundsCO[COInfo[Map]][1],MapBoundsCO[COInfo[Map]][2],MapBoundsCO[COInfo[Map]][3],MapBoundsCO[COInfo[Map]][4]);
        if(COInfo[TimeLeft] > 10*60+15)COPlayerInfo[playerid][InJail] = 0;
		if(COPlayerInfo[playerid][InJail] == 0)
	    {
			if(PlayerInfo[playerid][pTeam] == COP)
			{
				SetArmor(playerid, 99.9);
				SetPlayerColor(playerid,0x375FFFAA);//blue
				GivePlayerWeapons(playerid,WEAPON_SPRAYCAN,95,WEAPON_DEAGLE,820,WEAPON_NITESTICK,1,WEAPON_M4,1820);
				GivePlayerWeapons(playerid,WEAPON_SHOTGUN,1259,WEAPON_MP5,259,0,0,0,0);
				SetPlayerPos(playerid,COSpawnCop[COInfo[Map]][1],COSpawnCop[COInfo[Map]][2],COSpawnCop[COInfo[Map]][3]);
				if(!(PlayerInfo[playerid][SelectedSkin] >= 163 && PlayerInfo[playerid][SelectedSkin] <= 166) && !(PlayerInfo[playerid][SelectedSkin] >= 265 && PlayerInfo[playerid][SelectedSkin] <= 267) && !(PlayerInfo[playerid][SelectedSkin] >= 274 && PlayerInfo[playerid][SelectedSkin] <= 288))
				{
				    switch(random(5))
					{
					    case 0:SetPlayerSkin(playerid,280);
					    case 1:SetPlayerSkin(playerid,281);
					    case 2:SetPlayerSkin(playerid,282);
					    case 3:SetPlayerSkin(playerid,283);
					    case 4:SetPlayerSkin(playerid,284);
					}
				}
				SendClientMessage(playerid, white, "{33FF33}INFO:{FFFFFF} Arrest(Hold down N) all the {FF0000}criminals{FFFFFF} before the time runs out!");
			}
			if(PlayerInfo[playerid][pTeam] == CRIMINAL)
			{
			    if(PlayerInfo[playerid][SelectedSkin] == -1 || (PlayerInfo[playerid][SelectedSkin] >= 163 && PlayerInfo[playerid][SelectedSkin] <= 166) || (PlayerInfo[playerid][SelectedSkin] >= 265 && PlayerInfo[playerid][SelectedSkin] <= 267)
					|| (PlayerInfo[playerid][SelectedSkin] >= 274 && PlayerInfo[playerid][SelectedSkin] <= 288))
				{
				    switch(random(5))
					{
					    case 0:SetPlayerSkin(playerid,269);
					    case 1:SetPlayerSkin(playerid,261);
					    case 2:SetPlayerSkin(playerid,247);
					    case 3:SetPlayerSkin(playerid,230);
					    case 4:SetPlayerSkin(playerid,273);
					}
				}

	   			SetPlayerColor(playerid,0xFF0000AA);//red000
				SetPlayerPos(playerid,COSpawnCriminal[COInfo[Map]][1],COSpawnCriminal[COInfo[Map]][2],COSpawnCriminal[COInfo[Map]][3]);
				if(COInfo[TimeLeft] < 10*60 && CopCountCO() > 0)
				{
				    GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~w~ WAIT FOR ~r~CRIMINALS ~w~TO SAVE YOU", 5000, 3);
					COSpawnPlayerInPrison(playerid);
				    PlayerInfo[playerid][pTeam] = CRIMINAL;
					SetPlayerTeam(playerid, CRIMINAL);
		    		ResetWeapons(playerid);
				    if(PlayerInfo[playerid][SelectedSkin] == -1 || (PlayerInfo[playerid][SelectedSkin] >= 163 && PlayerInfo[playerid][SelectedSkin] <= 166) || (PlayerInfo[playerid][SelectedSkin] >= 265 && PlayerInfo[playerid][SelectedSkin] <= 267)
						|| (PlayerInfo[playerid][SelectedSkin] >= 274 && PlayerInfo[playerid][SelectedSkin] <= 288))
					{
					    switch(random(5))
						{
						    case 0:SetPlayerSkin(playerid,269);
						    case 1:SetPlayerSkin(playerid,261);
						    case 2:SetPlayerSkin(playerid,247);
						    case 3:SetPlayerSkin(playerid,230);
						    case 4:SetPlayerSkin(playerid,273);
						}
					}
					PlayerInfo[playerid][sProtected] = 0;
					SetHealth(playerid,99.0);
				    SendClientMessage(playerid, white, "{33FF33}INFO:{FFFFFF}You have spawned late, you have been put to prison.");
				}
				else
				{
					GivePlayerWeapons(playerid,WEAPON_SHOTGSPA,2459,WEAPON_DEAGLE,1320,WEAPON_SHOVEL,1,WEAPON_AK47,1220);
					GivePlayerWeapons(playerid,WEAPON_MP5,1559,WEAPON_GRENADE,3,0,0,0,0);
				    SetArmor(playerid, 99.9);
					SendClientMessage(playerid, white, "{33FF33}INFO:{FFFFFF}Do not let the {2641FE}cops{FFFFFF} arrest you!");
				}
			}
		}
		else if(COPlayerInfo[playerid][InJail] == 1)
		{
		    GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~w~ WAIT FOR ~r~CRIMINALS ~w~TO SAVE YOU", 5000, 3);
		    COSpawnPlayerInPrison(playerid);
		    SetPlayerTeam(playerid, CRIMINAL);
		    PlayerInfo[playerid][pTeam] = CRIMINAL;
		    ResetWeapons(playerid);
		    if(PlayerInfo[playerid][SelectedSkin] == -1 || (PlayerInfo[playerid][SelectedSkin] >= 163 && PlayerInfo[playerid][SelectedSkin] <= 166) || (PlayerInfo[playerid][SelectedSkin] >= 265 && PlayerInfo[playerid][SelectedSkin] <= 267)
				|| (PlayerInfo[playerid][SelectedSkin] >= 274 && PlayerInfo[playerid][SelectedSkin] <= 288))
			{
			    switch(random(5))
				{
				    case 0:SetPlayerSkin(playerid,269);
				    case 1:SetPlayerSkin(playerid,261);
				    case 2:SetPlayerSkin(playerid,247);
				    case 3:SetPlayerSkin(playerid,230);
				    case 4:SetPlayerSkin(playerid,273);
				}
			}
			PlayerInfo[playerid][sProtected] = 0;
			SetHealth(playerid,99.0);
		}
		PlayerInfo[playerid][sProtected] = 20;
    	SetHealth(playerid,1000.0);
    	SetPlayerChatBubble(playerid, "**Spawn Protected**", 0xFFFFFFFF, 30.0, 20000);
    	showCOTexts(playerid);
	}
	if(PlayerInfo[playerid][PlayerMode] == TL)
	{
	    if(PlayerInfo[playerid][Vehicle] != -1) CarDeleter(PlayerInfo[playerid][Vehicle]);
		PlayerInfo[playerid][Vehicle]=-1;
		PlayerInfo[playerid][sProtected] = 0;
	    SetPlayerScore(playerid,TLPlayerInfo[playerid][Score]);
	    SetHealth(playerid,99.0);
	    SetPlayerTeam(playerid,PlayerInfo[playerid][pTeam]);
		SetPlayerVirtualWorld(playerid, W_TL);
		
    	//TextDrawHideForPlayer(playerid,TLInfo[TimeleftTD]);
		if(TLInfo[Map]==RAMELLE)
		{
		    if(PlayerInfo[playerid][pTeam] == ALLIES)SetPlayerColor(playerid,0x375FFF00);//blue
			if(PlayerInfo[playerid][pTeam] == AXIS)SetPlayerColor(playerid,0xFFFFFF00);//white
			if(PlayerInfo[playerid][pTeam] == ALLIES)
			{
			    SetPlayerCheckpoint(playerid, -238.5190,196.3742,10.0163, 3.0);
				SetPlayerPosEx(playerid,-224.9683,144.5640,3.1231,34.0);
				SetPlayerSkin(playerid,124);
				GivePlayerWeapons(playerid,WEAPON_SNIPER,159,WEAPON_DEAGLE,260,WEAPON_GRENADE,5,WEAPON_M4,520);
			}
			if(PlayerInfo[playerid][pTeam] == AXIS)
			{
			    SetPlayerCheckpoint(playerid, -238.5190,196.3742,10.0163, 3.0);
				SetPlayerPosEx(playerid,-188.5461,563.6755,8.3427,287.0);
				GivePlayerWeapons(playerid,WEAPON_SNIPER,147,WEAPON_DEAGLE,270,WEAPON_GRENADE,2,WEAPON_AK47,500);
			}
	    }
		else if(TLInfo[Map]==AIRBORNE)
		{
		    if(PlayerInfo[playerid][pTeam] == ALLIES)SetPlayerColor(playerid,0x375FFF00);//blue
			if(PlayerInfo[playerid][pTeam] == AXIS)SetPlayerColor(playerid,0xFFFFFF00);//white
			if(PlayerInfo[playerid][pTeam] == ALLIES)
			{
			    SetPlayerCheckpoint(playerid, 90.0977,-312.0271,1.5781, 3.0);
				SetPlayerPosEx(playerid,337.0734+random(6),-0.1324+random(6),250.0,7);
				GiveWeapon(playerid,WEAPON_PARACHUTE,1);
				SetPlayerSkin(playerid,124);
				GivePlayerWeapons(playerid,WEAPON_SNIPER,159,WEAPON_DEAGLE,260,WEAPON_GRENADE,5,WEAPON_M4,520);
			}
			if(PlayerInfo[playerid][pTeam] == AXIS)
			{
			    SetPlayerCheckpoint(playerid, 90.0977,-312.0271,1.5781, 3.0);
				SetPlayerPos(playerid,144.9393,-251.8849,1.5724);
				SetPlayerSkin(playerid,287);
				GivePlayerWeapons(playerid,WEAPON_SNIPER,147,WEAPON_DEAGLE,270,WEAPON_GRENADE,2,WEAPON_AK47,500);
			}
	    }
	    else if(TLInfo[Map]==PEARLHARBOR)
		{
		    PlayerInfo[playerid][bombsleft][1] = 100;
		    PlayerInfo[playerid][bombsleft][2] = 5;
		    if(PlayerInfo[playerid][pTeam] == ALLIES)SetPlayerColor(playerid,0x375FFF77);//blue
			if(PlayerInfo[playerid][pTeam] == AXIS)SetPlayerColor(playerid,0xFFFFFFAA);//white
			GivePlayerWeapons(playerid,WEAPON_SNIPER,127,WEAPON_DEAGLE,230,WEAPON_GRENADE,2,WEAPON_AK47,600);
			new vehid;
            new rand=PlanePlaces[random(sizeof(PlanePlaces))];
			if(PlayerInfo[playerid][pTeam] == ALLIES)
			{
		 		SetPlayerSkin(playerid,73);
		 		CheckpointOnShipForPlayer(playerid,ALLIES);
				SetPlayerPos(playerid,2796.9695,-2493.4233,13);
			}
			if(PlayerInfo[playerid][pTeam] == AXIS)
			{
			    SetPlayerSkin(playerid,122);
				//SetPlayerCheckpoint(playerid, -4267.5088,1224.2740,-0.4472, 3.0);
				CheckpointOnShipForPlayer(playerid,ALLIES);
				vehid = AddStaticVehicle(476, 3581+rand,-2400+rand,106.4348,93, 3, 3);
	            SetVehicleVirtualWorld(vehid,W_TL);
				LinkVehicleToInterior(vehid,GetPlayerInterior(playerid));
				PlacePlayerInVehicle(playerid,vehid,0);
				new Float:a,Float:x,Float:y,Float:z;
				GetVehicleZAngle(GetPlayerVehicleID(playerid),a);
				GetVehicleVelocity(GetPlayerVehicleID(playerid),x,y,z);
				SetVehicleVelocity(GetPlayerVehicleID(playerid),x + (1 * floatsin(-a, degrees)),y + (1 * floatcos(-a, degrees)),z);
				PlayerInfo[playerid][Vehicle]=vehid;
			}
		    new st[90];
			format(st, sizeof(st), "~b~Ally ~w~ships: %d~n~~w~Time: %s",TLInfo[AllyShips],TimeConvertTL(TLInfo[TimeLeft]));
			TextDrawSetString(TLInfo[TimeleftTD], st);
		}
		else if(TLInfo[Map]==TANKBATTLE)
		{
		    PlayerInfo[playerid][bombsleft][1] = 0;
		    PlayerInfo[playerid][bombsleft][2] = 0;
		    if(PlayerInfo[playerid][pTeam] == ALLIES)SetPlayerColor(playerid,0xFFFFFF00);//white
			if(PlayerInfo[playerid][pTeam] == AXIS)SetPlayerColor(playerid,0xFF000000);//red
			GivePlayerWeapons(playerid,WEAPON_SNIPER,250,WEAPON_DEAGLE,260,WEAPON_GRENADE,2,WEAPON_AK47,240);
			if(PlayerInfo[playerid][pTeam] == ALLIES)
			{
		 		SetPlayerSkin(playerid,60);
		 		SetPlayerCheckpoint(playerid, 251.0600,-174.6518,6, 3.0);
				SetPlayerPos(playerid,276.3808+random(2),133.9082+random(2),2.8682);
			}
			if(PlayerInfo[playerid][pTeam] == AXIS)
			{
			    SetPlayerSkin(playerid,287);
		 		SetPlayerCheckpoint(playerid, 251.0600,-174.6518,6, 3.0);
				SetPlayerPos(playerid,-44.8527+random(2),-56.6509+random(2),3.1094);
			}
		    new st[90];
			format(st, sizeof(st), "~b~Brits~w~: %d~n~~r~Nazis~w~: %d~n~Time: %s",TLInfo[AllyShips],TLInfo[AxisShips],TimeConvertTL(TLInfo[TimeLeft]));
			TextDrawSetString(TLInfo[TimeleftTD], st);
		}
		else if(TLInfo[Map]==STALINGRAD)
		{
		    PlayerInfo[playerid][bombsleft][1] = 0;
		    PlayerInfo[playerid][bombsleft][2] = 0;
		    if(PlayerInfo[playerid][pTeam] == ALLIES)SetPlayerColor(playerid,0xFFFFFF00);//white
			if(PlayerInfo[playerid][pTeam] == AXIS)SetPlayerColor(playerid,0xFF000000);//red
			GivePlayerWeapons(playerid,WEAPON_SNIPER,270,WEAPON_DEAGLE,290,WEAPON_GRENADE,4,WEAPON_AK47,490);
			if(PlayerInfo[playerid][pTeam] == ALLIES)
			{
		 		SetPlayerSkin(playerid,111);
		 		SetPlayerCheckpoint(playerid, 666.7309,-566.0901,2.720, 3.0);
				SetPlayerPos(playerid,692.2737+random(2),-671.8736+random(2),16.3397);
			}
			if(PlayerInfo[playerid][pTeam] == AXIS)
			{
			    SetPlayerSkin(playerid,287);
		 		SetPlayerCheckpoint(playerid, 666.7309,-566.0901,2.720, 3.0);
				SetPlayerPos(playerid,748.5556+random(2),-449.0773+random(2),16.3382);
			}
		    new st[90];
			format(st, sizeof(st), "~b~Soviets~w~: %d~n~~r~Nazis~w~: %d~n~Time: %s",TLInfo[AllyShips],TLInfo[AxisShips],TimeConvertTL(TLInfo[TimeLeft]));
			TextDrawSetString(TLInfo[TimeleftTD], st);
		}
		else if(TLInfo[Map]==OFBRITAIN)
		{
		    PlayerInfo[playerid][bombsleft][1] = 0;
		    PlayerInfo[playerid][bombsleft][2] = 0;
		    if(PlayerInfo[playerid][pTeam] == ALLIES)SetPlayerColor(playerid,0xFFFFFFAA);//white
			if(PlayerInfo[playerid][pTeam] == AXIS)SetPlayerColor(playerid,0xFF0000AA);//red
			GivePlayerWeapons(playerid,WEAPON_SNIPER,287,WEAPON_DEAGLE,330,WEAPON_GRENADE,2,WEAPON_AK47,700);
			new vehid;
            new rand=PlanePlaces[random(sizeof(PlanePlaces))];
			if(PlayerInfo[playerid][pTeam] == ALLIES)
			{
		 		SetPlayerSkin(playerid,73);
		 		//SetPlayerCheckpoint(playerid, -4170.9326,2058.7932,-3.9998, 3.0);
				vehid = AddStaticVehicle(476, 44.4834+rand,-935.5773+rand,322.2135,356.0255, 1, 1);
	            SetVehicleVirtualWorld(vehid,W_TL);
				LinkVehicleToInterior(vehid,GetPlayerInterior(playerid));
				PlacePlayerInVehicle(playerid,vehid,0);
				new Float:a,Float:x,Float:y,Float:z;
				GetVehicleZAngle(GetPlayerVehicleID(playerid),a);
				GetVehicleVelocity(GetPlayerVehicleID(playerid),x,y,z);
				SetVehicleVelocity(GetPlayerVehicleID(playerid),x + (1 * floatsin(-a, degrees)),y + (1 * floatcos(-a, degrees)),z);
				PlayerInfo[playerid][Vehicle]=vehid;
			}
			if(PlayerInfo[playerid][pTeam] == AXIS)
			{
			    SetPlayerSkin(playerid,287);
				//SetPlayerCheckpoint(playerid, -4267.5088,1224.2740,-0.4472, 3.0);
				vehid = AddStaticVehicle(476, 24.4378+rand,789.3292+rand,322.7215,181.099, 3, 0);
	            SetVehicleVirtualWorld(vehid,W_TL);
				LinkVehicleToInterior(vehid,GetPlayerInterior(playerid));
				PlacePlayerInVehicle(playerid,vehid,0);
				new Float:a,Float:x,Float:y,Float:z;
				GetVehicleZAngle(GetPlayerVehicleID(playerid),a);
				GetVehicleVelocity(GetPlayerVehicleID(playerid),x,y,z);
				SetVehicleVelocity(GetPlayerVehicleID(playerid),x + (1 * floatsin(-a, degrees)),y + (1 * floatcos(-a, degrees)),z);
				PlayerInfo[playerid][Vehicle]=vehid;
			}
		    new st[90];
			format(st, sizeof(st), "~b~RAF~w~: %d~n~~r~Luftwaffe~w~: %d~n~Time: %s",TLInfo[AllyShips],TLInfo[AxisShips],TimeConvertTL(TLInfo[TimeLeft]));
			TextDrawSetString(TLInfo[TimeleftTD], st);
		}
		else if(TLInfo[Map]==MIDWAY)
		{
		    PlayerInfo[playerid][bombsleft][1] = 100;
		    PlayerInfo[playerid][bombsleft][2] = 5;
		    if(PlayerInfo[playerid][pTeam] == ALLIES)SetPlayerColor(playerid,0x375FFF77);//blue
			if(PlayerInfo[playerid][pTeam] == AXIS)SetPlayerColor(playerid,0xFFFFFFAA);//white
			GivePlayerWeapons(playerid,WEAPON_SNIPER,117,WEAPON_DEAGLE,90,WEAPON_GRENADE,2,WEAPON_AK47,160);
   			new vehid;
            new rand=PlanePlaces[random(sizeof(PlanePlaces))];
			if(PlayerInfo[playerid][pTeam] == ALLIES)
			{
		 		SetPlayerSkin(playerid,73);
		 		CheckpointOnShipForPlayer(playerid,AXIS);
				//SetPlayerCheckpoint(playerid, -4170.9326,2058.7932,-3.9998, 3.0);
				vehid = AddStaticVehicle(476, -3271+rand,1312+rand,106.4348,358.8341, 79, 1);
	            SetVehicleVirtualWorld(vehid,W_TL);
				LinkVehicleToInterior(vehid,GetPlayerInterior(playerid));
				PlacePlayerInVehicle(playerid,vehid,0);
				new Float:a,Float:x,Float:y,Float:z;
				GetVehicleZAngle(GetPlayerVehicleID(playerid),a);
				GetVehicleVelocity(GetPlayerVehicleID(playerid),x,y,z);
				SetVehicleVelocity(GetPlayerVehicleID(playerid),x + (1 * floatsin(-a, degrees)),y + (1 * floatcos(-a, degrees)),z);
				PlayerInfo[playerid][Vehicle]=vehid;
			}
			if(PlayerInfo[playerid][pTeam] == AXIS)
			{
			    SetPlayerSkin(playerid,122);
				//SetPlayerCheckpoint(playerid, -4267.5088,1224.2740,-0.4472, 3.0);
				CheckpointOnShipForPlayer(playerid,ALLIES);
				vehid = AddStaticVehicle(476, -3290+rand,2002+rand,106.4348,187.933, 3, 3);
	            SetVehicleVirtualWorld(vehid,W_TL);
				LinkVehicleToInterior(vehid,GetPlayerInterior(playerid));
				PlacePlayerInVehicle(playerid,vehid,0);
				new Float:a,Float:x,Float:y,Float:z;
				GetVehicleZAngle(GetPlayerVehicleID(playerid),a);
				GetVehicleVelocity(GetPlayerVehicleID(playerid),x,y,z);
				SetVehicleVelocity(GetPlayerVehicleID(playerid),x + (1 * floatsin(-a, degrees)),y + (1 * floatcos(-a, degrees)),z);
				PlayerInfo[playerid][Vehicle]=vehid;
			}
		    new st[90];
			format(st, sizeof(st), "~b~Ally ~w~ships: %d~n~~r~Axis ~w~ships: %d",TLInfo[AllyShips],TLInfo[AxisShips]);
			TextDrawSetString(TLInfo[TimeleftTD], st);
		}
		else if(TLInfo[Map]==DDAY)
		{
		    if(PlayerInfo[playerid][pTeam] == ALLIES)SetPlayerColor(playerid,0x375FFF00);//blue
			if(PlayerInfo[playerid][pTeam] == AXIS)SetPlayerColor(playerid,0xFFFFFFAA);//white
			if(PlayerInfo[playerid][pTeam] == ALLIES)
			{
			    SetPlayerCheckpoint(playerid, -2447.7444,-2761.9514,4.0249, 3.0);
				SpawnOnShip(playerid,random(2));
				SetPlayerSkin(playerid,124);
				GivePlayerWeapons(playerid,WEAPON_SNIPER,159,WEAPON_DEAGLE,160,WEAPON_GRENADE,3,WEAPON_M4,580);
			}
			if(PlayerInfo[playerid][pTeam] == AXIS)
			{
			    SetPlayerCheckpoint(playerid, -2447.7444,-2761.9514,4.0249, 3.0);
				SetPlayerPos(playerid,-2422.8259,-2767.7754,3.3748);
				SetPlayerSkin(playerid,287);
				GivePlayerWeapons(playerid,WEAPON_SNIPER,27,WEAPON_DEAGLE,230,WEAPON_GRENADE,1,WEAPON_AK47,270);
			}
	    }
	    TextDrawShowForPlayer(playerid,TLInfo[TimeleftTD]);
	}
	if(PlayerInfo[playerid][PlayerMode] == TW)
	{
	    if(TWPlayerInfo[playerid][Class] == NOCLASS || TWPlayerInfo[playerid][Class] > 8 || TWPlayerInfo[playerid][Class] < 0) TWPlayerInfo[playerid][Class] = SOLDIER;
	    if(TWInfo[Map] == NorthernSA)
		{
		    SetPlayerWorldBounds(playerid, 1251.7374, -3807.9812, 3967.9526, -269.9567);
			SetPlayerPos(playerid,CountrySpawnNorth[TWPlayerInfo[playerid][Country]][1],CountrySpawnNorth[TWPlayerInfo[playerid][Country]][2],CountrySpawnNorth[TWPlayerInfo[playerid][Country]][3]);
			if(TWPlayerInfo[playerid][Class] == PILOT)
		    	SetPlayerPosEx(playerid,CountryPilotSpawnNorth[TWPlayerInfo[playerid][Country]][1],CountryPilotSpawnNorth[TWPlayerInfo[playerid][Country]][2],CountryPilotSpawnNorth[TWPlayerInfo[playerid][Country]][3],CountryPilotSpawnNorth[TWPlayerInfo[playerid][Country]][4]);
		}
		else
		{
			SetPlayerPos(playerid,CountrySpawnSouth[TWPlayerInfo[playerid][Country]][1],CountrySpawnSouth[TWPlayerInfo[playerid][Country]][2],CountrySpawnSouth[TWPlayerInfo[playerid][Country]][3]);
	        if(TWPlayerInfo[playerid][Class] == PILOT)
		    	SetPlayerPosEx(playerid,CountryPilotSpawnSouth[TWPlayerInfo[playerid][Country]][1],CountryPilotSpawnSouth[TWPlayerInfo[playerid][Country]][2],CountryPilotSpawnSouth[TWPlayerInfo[playerid][Country]][3],CountryPilotSpawnSouth[TWPlayerInfo[playerid][Country]][4]);
		}
		if(TWPlayerInfo[playerid][Country] == GERMANY || TWPlayerInfo[playerid][Country] == ITALY || TWPlayerInfo[playerid][Country] == JAPAN)
			PlayerInfo[playerid][pTeam] = AXIS;
		else PlayerInfo[playerid][pTeam] = ALLIES;
		SetPlayerSkin(playerid,CountrySkins[TWPlayerInfo[playerid][Country]][TWPlayerInfo[playerid][Class]]);
		SetPlayerTeam(playerid, PlayerInfo[playerid][pTeam]);
		SetPlayerColor(playerid, CountryColors[TWPlayerInfo[playerid][Country]]);
		RefillWeaps(playerid);
		GivetheColors(playerid);
		TWPlayerInfo[playerid][Healing] = -1;
		TWPlayerInfo[playerid][pHealing] = -1;
	    if(TWPlayerInfo[playerid][Class] == LEADER)
	    {
	        if(pLeeaderCount(playerid) > 0)
			{
			    TWPlayerInfo[playerid][Class] = SOLDIER;
				A_SpawnPlayer(playerid);
			}
	        if(pLeeaderCount(playerid) == 0)
			{
				TWPlayerInfo[playerid][LeaderColor] = CountryColors[TWPlayerInfo[playerid][Country]];
				TWPlayerInfo[playerid][Blip] = 1;
			}
			LeaderBarState();
		}
		if(TWPlayerInfo[playerid][Class] == VICE)
	    {
	        if(pViceLeeaderCount(playerid) > 0)
			{
			    TWPlayerInfo[playerid][Class] = SOLDIER;
				A_SpawnPlayer(playerid);
			}
	        if(pViceLeeaderCount(playerid) == 0)
			{
				if(TWPlayerInfo[playerid][Country] == GERMANY) SetPlayerColor(playerid,COL_GERMANY_R5);
				if(TWPlayerInfo[playerid][Country] == ITALY) SetPlayerColor(playerid,COL_ITALY_R5);
			    if(TWPlayerInfo[playerid][Country] == JAPAN) SetPlayerColor(playerid,COL_JAPAN_R5);
			    if(TWPlayerInfo[playerid][Country] == RUSSIA) SetPlayerColor(playerid,COL_SOVIET_R5);
			    if(TWPlayerInfo[playerid][Country] == USA) SetPlayerColor(playerid,COL_USA_R5);
			    if(TWPlayerInfo[playerid][Country] == BALKAN) SetPlayerColor(playerid,COL_BALKAN_R5);
			    if(TWPlayerInfo[playerid][Country] == BRITISH) SetPlayerColor(playerid,COL_BRITISH_R5);
			}
		}
       	if(TWPlayerInfo[playerid][Class] == SPY)
       	{
       	    if(TWPlayerInfo[playerid][Country] == GERMANY) SetPlayerColor(playerid,COL_GERMANY_R5);
			if(TWPlayerInfo[playerid][Country] == ITALY) SetPlayerColor(playerid,COL_ITALY_R5);
		    if(TWPlayerInfo[playerid][Country] == JAPAN) SetPlayerColor(playerid,COL_JAPAN_R5);
		    if(TWPlayerInfo[playerid][Country] == RUSSIA) SetPlayerColor(playerid,COL_SOVIET_R5);
		    if(TWPlayerInfo[playerid][Country] == USA) SetPlayerColor(playerid,COL_USA_R5);
		    if(TWPlayerInfo[playerid][Country] == BALKAN) SetPlayerColor(playerid,COL_BALKAN_R5);
		    if(TWPlayerInfo[playerid][Country] == BRITISH) SetPlayerColor(playerid,COL_BRITISH_R5);
       	}

       	if(TWPlayerInfo[playerid][Class] == ENGINEER)
       	{
       	    if(TWPlayerBomb[playerid][bAmount]>0)GiveWeapon(playerid,40,1);
			TWPlayerBomb[playerid][bPlanting] = 0;
			TWPlayerBomb[playerid][bDefusing] = 0;
			TWPlayerBomb[playerid][rRepairing] = 0;
			forLoop(v, MAX_ENGI_BOMBS)
			{
				if(TWPlayerBomb[playerid][bCar][v] != -1)
				{
					SetVehicleParamsForPlayer(TWPlayerBomb[playerid][bCar][v],playerid,1,0);
				}
			}
       	}
       	else DestroyAllPlayerTWBombs(playerid);
       	SetPlayerMoney(playerid, TWPlayerInfo[playerid][Money] );
		format(strk,128,"{FFFFFF}**{%s}%s{FFFFFF}**",CountryChatColor[TWPlayerInfo[playerid][Country]],CountryClassNames[TWPlayerInfo[playerid][Country]][TWPlayerInfo[playerid][Class]]);
		UpdateDynamic3DTextLabelText(PlayerInfo[playerid][ModeLabel], 0x00EEADAA, strk);
		SetPlayerChatBubble(playerid, "**Spawn Protected**", 0xFFFFFFFF, 30.0, 30000);
    	if(TWPlayerInfo[playerid][SquadID] > 0)
    	{
			format(strk,128,"{FFFFFF}***{00EEAD}%s{FFFFFF}***", SquadInfo[getTWSquadID(TWPlayerInfo[playerid][SquadID])][sName]);
		    UpdateDynamic3DTextLabelText(PlayerInfo[playerid][TeamLabel], 0xFFFF00AA,strk);
	    }else UpdateDynamic3DTextLabelText(PlayerInfo[playerid][TeamLabel], 0xFFFF00AA, " ");

	    forLoop(b, 6)
	    {
	    	PlayerInfo[playerid][bombsleft][b] = TWPlayerInfo[playerid][TWBombsLeft][b];
		}
		if(PlayerInfo[playerid][Vehicle] != -1) CarDeleter(PlayerInfo[playerid][Vehicle]);
		PlayerInfo[playerid][Vehicle] = -1;
	}

    if(PlayerInfo[playerid][PlayerMode] == MOVIES)
	{
		SetPlayerWeather(playerid, 0);
		PlayerInfo[playerid][sProtected] = 0;
		SetPlayerColor(playerid,0xFFFFFF00);//white
		SetPlayerPos(playerid,2254.1694, -1260.5359, 24.2820);
    	SetPlayerWorldBounds(playerid, 20000.0000, -20000.0000, 20000.0000, -20000.0000);
	    SetPlayerVirtualWorld(playerid, W_MOVIE);
	    SetPlayerInterior(playerid,0);
	    if(PlayerInfo[playerid][SelectedSkin] > -1)SetPlayerSkin(playerid,PlayerInfo[playerid][SelectedSkin]);
		else
		{
		    switch(random(8))
			{
			    case 0:SetPlayerSkin(playerid,8);
			    case 1:SetPlayerSkin(playerid,89);
			    case 2:SetPlayerSkin(playerid,93);
			    case 3:SetPlayerSkin(playerid,264);
			    case 4:SetPlayerSkin(playerid,26);
			    case 5:SetPlayerSkin(playerid,133);
			    case 6:SetPlayerSkin(playerid,46);
			    case 7:SetPlayerSkin(playerid,166);
			}
		}
		SetPlayerTeam(playerid,playerid);
		SetPlayerScore(playerid,0);
	}
	if(PlayerInfo[playerid][PlayerMode] == STUNT)
	{
	    PlayerInfo[playerid][sProtected] = 0;
    	if(PlayerInfo[playerid][SFSP_SavedPos]!=0)
		{
		    SetPlayerVirtualWorld(playerid, PlayerInfo[playerid][SFSP_PosWorld]);
			SetPlayerInterior(playerid,	PlayerInfo[playerid][SFSP_PosInt]);
		    SetPlayerPosEx(playerid, PlayerInfo[playerid][SFSP_PosX], PlayerInfo[playerid][SFSP_PosY], PlayerInfo[playerid][SFSP_PosZ], PlayerInfo[playerid][SFSP_PosAng]);
			SendClientMessage(playerid,yellow,"Notice:{FFFFFF} You have spawned on your saved spawn place. Use /sspoff to disable it.");
		}
		else
		{
			SetPlayerPosEx(playerid,1745.0731,-2521.4158,13.5469,224.079);
		    SetPlayerVirtualWorld(playerid, W_STUNT);
		    SetPlayerInterior(playerid,0);
		}
    	SetPlayerWorldBounds(playerid, 20000.0000, -20000.0000, 20000.0000, -20000.0000);
	    SetPlayerColor(playerid, 0x33AA33AA);
	    if(PlayerInfo[playerid][SelectedSkin] > -1)SetPlayerSkin(playerid,PlayerInfo[playerid][SelectedSkin]);
		else
		{
		    switch(random(8))
			{
			    case 0:SetPlayerSkin(playerid,8);
			    case 1:SetPlayerSkin(playerid,89);
			    case 2:SetPlayerSkin(playerid,93);
			    case 3:SetPlayerSkin(playerid,264);
			    case 4:SetPlayerSkin(playerid,26);
			    case 5:SetPlayerSkin(playerid,133);
			    case 6:SetPlayerSkin(playerid,46);
			    case 7:SetPlayerSkin(playerid,166);
			}
		}
		SetPlayerTeam(playerid,playerid);
    }
    if(PlayerInfo[playerid][PlayerMode] == FFA)
	{
        if(FFAPlayerInfo[playerid][GangID] == 0)
		{
			SetPlayerColor(playerid, 0xFFFF00AA);
			SetPlayerTeam(playerid,playerid+MAX_FFA_GANGS);
			UpdateDynamic3DTextLabelText(PlayerInfo[playerid][ModeLabel], 0xFFFF00AA, " ");
			UpdateDynamic3DTextLabelText(PlayerInfo[playerid][TeamLabel], 0xFFFFFFAA, " ");
	        SetPlayerInterior(playerid,0);
			SetPlayerVirtualWorld(playerid, W_FFA);
			SetPlayerPosEx(playerid, 2037.7301,-2442.3262,13.5469,96.5505);
		}
		else
		{
		    new ganglocal = getFFAGangID(FFAPlayerInfo[playerid][GangID]);
			FFAPlayerInfo[playerid][DisableTK] = 0;
		    SetPlayerColor(playerid, GangInfo[ganglocal][Color]);
		    SetPlayerTeam(playerid, FFAPlayerInfo[playerid][GangID]);
			SetPlayerPosEx(playerid, GangInfo[ganglocal][gSpawnX],GangInfo[ganglocal][gSpawnY],GangInfo[ganglocal][gSpawnZ], random(231));

	    	format(strk,128,"{FFFFFF}***{%s}%s{FFFFFF}***", GangInfo[ganglocal][gColHex], GangInfo[ganglocal][gName]);
		    UpdateDynamic3DTextLabelText(PlayerInfo[playerid][ModeLabel], GangInfo[ganglocal][Color],strk);

            format(strk,128,"{FFFFFF}*{33FF33}%s{FFFFFF}*", FFAPlayerInfo[playerid][gRank]);
		    UpdateDynamic3DTextLabelText(PlayerInfo[playerid][TeamLabel], 0x00EEADAA,strk);
	        SetPlayerInterior(playerid,GangInfo[ganglocal][gOutInterior]);
			SetPlayerVirtualWorld(playerid, GangInfo[ganglocal][gOutWorld]);
		}
		if(FFAPlayerInfo[playerid][PropertySpawn] != 0)
		{
		    new pid = getFFAPropertyID(FFAPlayerInfo[playerid][PropertySpawn]);
		    if((FFAPropertyInfo[pid][OwnerType] == FFA_OWNER_PLAYER && FFAPropertyInfo[pid][OwnerID] == PlayerInfo[playerid][ID])
				|| (FFAPropertyInfo[pid][OwnerType] == FFA_OWNER_GANG && FFAPlayerInfo[playerid][GangID] > 0 && FFAPropertyInfo[pid][OwnerID] == FFAPlayerInfo[playerid][GangID]))
			{
				SetPlayerPosEx(playerid, FFAPropertyInfo[pid][gInX],FFAPropertyInfo[pid][gInY],FFAPropertyInfo[pid][gInZ], FFAPropertyInfo[pid][gInAng]);
		        SetPlayerInterior(playerid, FFAPropertyInfo[pid][InInterior]);
				SetPlayerVirtualWorld(playerid, ((pid+21)*31));
				FreezeBeforeObjects(playerid);
			}else FFAPlayerInfo[playerid][PropertySpawn] = 0;
		}
		PlayerTextDrawShow(playerid, FFAPlayerInfo[playerid][TXT_Treasures]);
		UpdateFFATreasures(playerid);
		
    	SetPlayerWorldBounds(playerid, 20000.0000, -20000.0000, 20000.0000, -20000.0000);
		if(PlayerInfo[playerid][SelectedSkin] > -1)SetPlayerSkin(playerid,PlayerInfo[playerid][SelectedSkin]);
		else
		{
		    switch(random(8))
			{
			    case 0:SetPlayerSkin(playerid,8);
			    case 1:SetPlayerSkin(playerid,89);
			    case 2:SetPlayerSkin(playerid,93);
			    case 3:SetPlayerSkin(playerid,264);
			    case 4:SetPlayerSkin(playerid,26);
			    case 5:SetPlayerSkin(playerid,133);
			    case 6:SetPlayerSkin(playerid,46);
			    case 7:SetPlayerSkin(playerid,166);
			}
		}
		SetPlayerChatBubble(playerid, "**Spawn Protected**", 0xFFFFFFFF, 30.0, 30000);
    }
	//printf("DEBUG CFONTROL SpawnThePlayer 2");
	return 1;
}

stock RefillWeaps(playerid)
{
	//printf("DEBUG CFONTROL RefillWeaps 1");
	if(PlayerInfo[playerid][pTeam] == ALLIES)
	{
        if(TWPlayerInfo[playerid][LeadersKilled] >= 500 || TWPlayerInfo[playerid][Survives] >= 100)
		{
            GivePlayerWeapons(playerid,17,180,33,2900,23,2900,25,2900);
			GivePlayerWeapons(playerid,22,2600,18,35,30,9550,34,9990);
			GivePlayerWeapons(playerid,0,0,16,400,31,9000,35,5);
			GivePlayerWeapons(playerid,0,0,0,0,24,2900,0,0);
		}
		else
		{
		    if(TWPlayerInfo[playerid][Class] == LEADER)
		    {
		        GivePlayerWeapons(playerid,0,0,WEAPON_DEAGLE,120,WEAPON_CANE,1,0,0);
			}
			if(TWPlayerInfo[playerid][Class] == VICE)
		    {
		        GivePlayerWeapons(playerid,0,0,WEAPON_DEAGLE,120,WEAPON_SHOTGUN,270,WEAPON_CANE,1);
			}
			if(TWPlayerInfo[playerid][Class] == BODYGUARD)
		    {
		        GivePlayerWeapons(playerid,WEAPON_DEAGLE,199,WEAPON_SHOTGUN,190,0,0,WEAPON_M4,810);
		    }
		    if(TWPlayerInfo[playerid][Class] == SOLDIER)
		    {
		        GivetheWeapons(playerid);
			}
			else if(TWPlayerInfo[playerid][Class] == PILOT)
		    {
		        GivePlayerWeapons(playerid,WEAPON_COLT45,199,WEAPON_RIFLE,190,WEAPON_GRENADE,30,0,0);
			}
			else if(TWPlayerInfo[playerid][Class] == MEDIC)
		    {
		        GivePlayerWeapons(playerid,WEAPON_MOLTOV,50,WEAPON_COLT45,190,WEAPON_RIFLE,170,WEAPON_M4,245);
			}
			else if(TWPlayerInfo[playerid][Class] == ENGINEER)
		    {
		        GivePlayerWeapons(playerid,WEAPON_MOLTOV,50,WEAPON_DEAGLE,190,WEAPON_RIFLE,170,WEAPON_M4,245);
			}
			else if(TWPlayerInfo[playerid][Class] == SPY)
		    {
		        GivePlayerWeapons(playerid,WEAPON_SNIPER,199,WEAPON_SILENCED,190,WEAPON_M4,270,WEAPON_SHOTGUN,110);
				GivePlayerWeapons(playerid,WEAPON_GRENADE,20,WEAPON_KNIFE,1,0,0,0,0);
			}
		}
	}
	if(PlayerInfo[playerid][pTeam] == AXIS)
	{
	    if(TWPlayerInfo[playerid][LeadersKilled] >= 500 || TWPlayerInfo[playerid][Survives] >= 100)
		{
            GivePlayerWeapons(playerid,17,180,33,2900,23,2900,25,2900);
			GivePlayerWeapons(playerid,22,2600,18,35,30,9550,34,9990);
			GivePlayerWeapons(playerid,0,0,16,400,31,9000,35,5);
			GivePlayerWeapons(playerid,0,0,0,0,24,2900,0,0);
		}
		else
		{
			if(TWPlayerInfo[playerid][Class] == LEADER)
		    {
		    	GivePlayerWeapons(playerid,0,0,WEAPON_DEAGLE,120,WEAPON_CANE,1,0,0);
			}
			if(TWPlayerInfo[playerid][Class] == VICE)
		    {
		    	GivePlayerWeapons(playerid,0,0,WEAPON_DEAGLE,120,WEAPON_SHOTGUN,270,WEAPON_CANE,1);
			}
			if(TWPlayerInfo[playerid][Class] == BODYGUARD)
		    {
		    	GivePlayerWeapons(playerid,WEAPON_DEAGLE,199,WEAPON_SHOTGUN,190,0,0,WEAPON_AK47,810);
			}
		    if(TWPlayerInfo[playerid][Class] == SOLDIER)
		    {
		    	GivetheWeapons(playerid);
			}
			else if(TWPlayerInfo[playerid][Class] == PILOT)
		    {
		        GivePlayerWeapons(playerid,WEAPON_COLT45,199,WEAPON_RIFLE,190,WEAPON_GRENADE,30,0,0);
			}
			else if(TWPlayerInfo[playerid][Class] == MEDIC)
		    {
		        GivePlayerWeapons(playerid,WEAPON_MOLTOV,50,WEAPON_COLT45,190,WEAPON_RIFLE,170,WEAPON_AK47,245);
			}
			else if(TWPlayerInfo[playerid][Class] == ENGINEER)
		    {
		        GivePlayerWeapons(playerid,WEAPON_MOLTOV,50,WEAPON_DEAGLE,190,WEAPON_RIFLE,170,WEAPON_AK47,245);
			}
	        else if(TWPlayerInfo[playerid][Class] == SPY)
		    {
		        GivePlayerWeapons(playerid,WEAPON_SNIPER,199,WEAPON_SILENCED,190,WEAPON_AK47,270,WEAPON_SHOTGUN,110);
				GivePlayerWeapons(playerid,WEAPON_GRENADE,20,WEAPON_KNIFE,1,0,0,0,0);
			}
		}
	}
	//printf("DEBUG CFONTROL RefillWeaps 2");
}
stock GangZoneShowFor(team,zone,color)
{
	//printf("DEBUG CFONTROL GangZoneShowFor 1");
    forLoop(y, MAX_PLAYERS)
    {
		if(IsPlayerConnected(y) && PlayerInfo[y][PlayerMode] == team && PlayerInfo[y][Spawned]==1 && !IsPlayerNPC(y))
		{
		    GangZoneShowForPlayer(y, zone, color);
		}
	}
	//printf("DEBUG CFONTROL GangZoneShowFor 2");
}
stock GangZoneHideFor(team,zone)
{
	//printf("DEBUG CFONTROL GangZoneHideFor 1");
    forLoop(y, MAX_PLAYERS)
    {
		if(IsPlayerConnected(y) && PlayerInfo[y][PlayerMode] == team && PlayerInfo[y][Spawned]==1 && !IsPlayerNPC(y))
		{
		    GangZoneHideForPlayer(y, zone);
		}
	}
	//printf("DEBUG CFONTROL GangZoneHideFor 2");
}
stock GangZoneFlashFor(team,zone,color)
{
	//printf("DEBUG CFONTROL GangZoneFlashFor 1");
    forLoop(y, MAX_PLAYERS)
    {
		if(IsPlayerConnected(y) && PlayerInfo[y][PlayerMode] == team && PlayerInfo[y][Spawned]==1 && !IsPlayerNPC(y))
		{
		    GangZoneFlashForPlayer(y, zone, color);
		}
	}
	//printf("DEBUG CFONTROL GangZoneFlashFor 2");
}
stock GangZoneStopFlashFor(team,zone)
{
	//printf("DEBUG CFONTROL GangZoneStopFlashFor 1");
    forLoop(y, MAX_PLAYERS)
    {
		if(IsPlayerConnected(y) && PlayerInfo[y][PlayerMode] == team && PlayerInfo[y][Spawned]==1 && !IsPlayerNPC(y))
		{
		    GangZoneStopFlashForPlayer(y, zone);
		}
	}
	//printf("DEBUG CFONTROL GangZoneStopFlashFor 2");
}

stock OtherSpawn(playerid)
{
	//printf("DEBUG CFONTROL OtherSpawn 1");
	forLoop(y, MAX_GANG_ZONES)
    {
    	GangZoneHideForPlayer(playerid, y);
    }
    DeleteMapIcons(playerid);
    if(PlayerInfo[playerid][PlayerMode] == TRP)
    {
    	GangZoneShowForPlayer(playerid, RPInfo[HideMap], 0x000000FF);
    }
	if(PlayerInfo[playerid][PlayerMode] == GK)
    {
        if(GKInfo[CaseState] == 1)
			SetPlayerMapIcon(playerid,0,GKInfo[cX],GKInfo[cY],GKInfo[cZ],23,1,1);
    }
	if(PlayerInfo[playerid][PlayerMode] == VW)
    {
        forLoop(id, VW_MAX_OBJECTIVES)
	    {
	    	if(VWObjectiveInfo[id][Exists] == 1 && VWObjectiveInfo[id][Type] == 1)
	    	{
	    	    SetPlayerMapIcon(playerid,99-id, VWObjectiveInfo[id][posX], VWObjectiveInfo[id][posY], VWObjectiveInfo[id][posZ], 19,0xFFFFFFAA,1);
	    	}
    	}
    }
	if(PlayerInfo[playerid][PlayerMode] == PTP)
	{
		SetPlayerMapIcon(playerid,1,PTPHPPlace[PTPInfo[Map]][0],PTPHPPlace[PTPInfo[Map]][1],PTPHPPlace[PTPInfo[Map]][2],22,0);//health
		//SetPlayerMapIcon(playerid,2,PTPArmorPlace[PTPInfo[Map]][0],PTPArmorPlace[PTPInfo[Map]][1],PTPArmorPlace[PTPInfo[Map]][2],16,0);//armor
		//SetPlayerMapIcon(playerid,3,PTPRefillPlace[PTPInfo[Map]][0],PTPRefillPlace[PTPInfo[Map]][1],PTPRefillPlace[PTPInfo[Map]][2],18,0);//refill police
	}
	if(PlayerInfo[playerid][PlayerMode] == CO)
	{
	    SetPlayerMapIcon(playerid,1,CORefillsCriminalPlace[COInfo[Map]][0],CORefillsCriminalPlace[COInfo[Map]][1],CORefillsCriminalPlace[COInfo[Map]][2],18,0);//refill criminal
		SetPlayerMapIcon(playerid,2,COHPPlace[COInfo[Map]][0],COHPPlace[COInfo[Map]][1],COHPPlace[COInfo[Map]][2],22,0);//health
		SetPlayerMapIcon(playerid,3,COArmorPlace[COInfo[Map]][0],COArmorPlace[COInfo[Map]][1],COArmorPlace[COInfo[Map]][2],16,0);//armor
		SetPlayerMapIcon(playerid,4,CORefillsCopPlace[COInfo[Map]][0],CORefillsCopPlace[COInfo[Map]][1],CORefillsCopPlace[COInfo[Map]][2],18,0);//refill police
		if(ServerInfo[COBigPrison] == 1)SetPlayerMapIcon(playerid,5,COGetOut[COInfo[Map]][0],COGetOut[COInfo[Map]][1],COGetOut[COInfo[Map]][2],52,0,1);//get out prison
	}
	if(PlayerInfo[playerid][PlayerMode] == TW)
	{
		new maxid;
		forLoop(id, MAX_TW_ZONES)
	    {
	        if(TWZoneInfo[id][Exists])
	        {
				if(TWZoneInfo[id][OriginalTeam] == NOPOWER && TWZoneInfo[id][Conquer]==-1)
	        		GangZoneShowForPlayer(playerid,TWZoneInfo[id][gZone],0x67F6F6AA);
	        	if(TWZoneInfo[id][Conquer]> -1)GangZoneShowForPlayer(playerid,TWZoneInfo[id][gZone],CountryColors[TWZoneInfo[id][Conquer]]);
	            SetPlayerMapIcon(playerid,id, TWZoneInfo[id][zX],TWZoneInfo[id][zY],TWZoneInfo[id][zZ], 19,0,0);
	            maxid++;
	        }
	    }
	    forLoop(id, MAX_SHIPS)
	    {
	        if(ShipInfo[id][Exists] && ShipInfo[id][Mode] == TW && ShipInfo[id][sHP] > 0)
	        {
	            if(ShipInfo[id][Team] == AXIS)
					GangZoneShowForPlayer(playerid,ShipInfo[id][gZone],0x000000AA);//black
				if(ShipInfo[id][Team] == ALLIES)
					GangZoneShowForPlayer(playerid,ShipInfo[id][gZone],0xFFFFFFAA);//white
                //SetPlayerMapIcon(playerid,maxid++,ShipInfo[id][sX], ShipInfo[id][sY] , ShipInfo[id][sZ],9,0,0);
			}
	    }
	    if(TWInfo[Map]==NorthernSA)
	    {
		    SetPlayerMapIcon(playerid,maxid++,-2257.7581,2562.1094,4.5851,37,0,0);// refill
			SetPlayerMapIcon(playerid,maxid++,-1509.4552,1975.4136,48.4171,37,0,0);//
			SetPlayerMapIcon(playerid,maxid++,-734.0106,1546.2145,39.0130,37,0,0);//
			SetPlayerMapIcon(playerid,maxid++,-213.0398,1766.8326,101.3613,37,0,0);//
			SetPlayerMapIcon(playerid,maxid++,384.2226,2603.7002,16.4844,37,0,0);//
			SetPlayerMapIcon(playerid,maxid++,-971.9948,2734.7493,45.86496,37,0,0);
			SetPlayerMapIcon(playerid,maxid++,374.8986,1944.3438,17.6406,37,0,0);
			SetPlayerMapIcon(playerid,maxid++,606.9611,884.1628,-43.1867,37,0,0);

			SetPlayerMapIcon(playerid,maxid++,-423.9521,1383.2028,14.2469,23,0,0);// atomic bomb

			SetPlayerMapIcon(playerid,maxid++,-553.4377,2593.6738,53.9348,6,0,0);// gunshop 1
		    SetPlayerMapIcon(playerid,maxid++,-688.1757,932.4590,13.6328,6,0,0);// gunshop 1
			SetPlayerMapIcon(playerid,maxid++,-2014.2509,2589.7290,92.1182,6,0,0);// gunshop 1
		}

        if(TWInfo[Map]==SouthernSA)
	    {
	        SetPlayerMapIcon(playerid,maxid++,2473.2815,-24.5566,26.4844,37,0,0);// refill
			SetPlayerMapIcon(playerid,maxid++,1458.2526,378.1677,19.2324,37,0,0);//
			SetPlayerMapIcon(playerid,maxid++,828.1487,-468.4805,21.8116,37,0,0);//
			SetPlayerMapIcon(playerid,maxid++,208.0349,-230.5896,2.1563,37,0,0);//
			SetPlayerMapIcon(playerid,maxid++,-349.5591,-169.2223,57.991,37,0,0);//
			SetPlayerMapIcon(playerid,maxid++,-1113.9672,-1143.9115,129.2259,37,0,0);
			SetPlayerMapIcon(playerid,maxid++,-2250.1736,-1709.7091,480.1501,37,0,0);
			SetPlayerMapIcon(playerid,maxid++,-2191.0901,-2265.9631,30.6250,37,0,0);

			SetPlayerMapIcon(playerid,maxid++,-2468.2107,-1924.0740,301.671,23,0,0);//atomic bomb

			SetPlayerMapIcon(playerid,maxid++,-80.4167,-1169.2866,2.1870,6,0,0);// gunshop 1
	    	SetPlayerMapIcon(playerid,maxid++,-551.5403,-180.9835,78.4063,6,0,0);// gunshop 1
			SetPlayerMapIcon(playerid,maxid++,1544.7015,17.5697,23.808,6,0,0);// gunshop 1
		}

	}

	if(PlayerInfo[playerid][PlayerMode] == FFA)
	{
		forLoop(i, MAX_FFA_GANGS)
		{
   			if(GangInfo[i][Exists])
			{
				GangZoneShowForPlayer(playerid,GangInfo[i][gZone],GangInfo[i][Color]);
				SetPlayerMapIcon(playerid,99-i,GangInfo[i][gSpawnX],GangInfo[i][gSpawnY],GangInfo[i][gSpawnZ],GangInfo[i][MapIcon],GangInfo[i][Color],1);
			}
		}
		forLoop(i, MAX_FFA_ZONES)
		{
		    if(FFAGangZones[i][Exists])
		    {
				if(FFAGangZones[i][Captured] == 0)
			    	GangZoneShowForPlayer(playerid,FFAGangZones[i][gZone], 0xFFFF00AA);
			    else
			    	GangZoneShowForPlayer(playerid,FFAGangZones[i][gZone],GangInfo[getFFAGangID(FFAGangZones[i][Captured])][Color]);
			}
		}
	}
	if(PlayerInfo[playerid][PlayerMode] == TL)
	{
	    forLoop(id, MAX_SHIPS)
	    {
			if(ShipInfo[id][Exists] && ShipInfo[id][Mode] == TL)
	        {
	            if(TLInfo[Map]==MIDWAY || TLInfo[Map]==PEARLHARBOR)
	            {
	                if(ShipInfo[id][Team] == AXIS)
						GangZoneShowForPlayer(playerid,ShipInfo[id][gZone],0xFFFFFFAA);//white
					if(ShipInfo[id][Team] == ALLIES)
						GangZoneShowForPlayer(playerid,ShipInfo[id][gZone],0x375FFF77);//blue
				}
				else
				{
		            if(ShipInfo[id][Team] == AXIS)
						GangZoneShowForPlayer(playerid,ShipInfo[id][gZone],0x000000AA);//black
					if(ShipInfo[id][Team] == ALLIES)
						GangZoneShowForPlayer(playerid,ShipInfo[id][gZone],0xFFFFFFAA);//white
				}
			}
	    }
	}
	//printf("DEBUG CFONTROL OtherSpawn 2");
}



stock OptionSelectionSetup(playerid)
{
	//printf("DEBUG CFONTROL OptionSelectionSetup 1");
	SetPlayerInterior(playerid,0);
    PlayerInfo[playerid][Spawned]=0;
    GameTextForPlayer(playerid, " ", 99, 3);
    SetPlayerVirtualWorld(playerid, 14353+playerid);

	if(PlayerInfo[playerid][Option] == 0)
		PlayerInfo[playerid][Option] = 1;

    SetPlayerSkin(playerid,PlayerInfo[playerid][Option]);
    SetPlayerPos(playerid,2128.0322,1577.9841,10.8203);
    SetPlayerFacingAngle(playerid, 95);
	SetPlayerCameraPos(playerid, 2122.4431,1577.6860,10.8203);
	SetPlayerCameraLookAt(playerid, 2128.0322,1577.9841,10.8203);
	
	if(PlayerInfo[playerid][PlayerMode] == STUNT || PlayerInfo[playerid][PlayerMode] == FFA)
	{
		if(PlayerInfo[playerid][SkinsCMD][0] == 0)ClearTheChatForPlayer(playerid);
		else
		{
		    new str[64];
			format(str,64,"ID: %d",GetPlayerSkin(playerid));
			PlayerTextDrawSetString(playerid, PlayerInfo[playerid][InfoText], str);
		}
	}
	//printf("DEBUG CFONTROL OptionSelectionSetup 2");
}

//----------------------------------------------------------

stock OptionSelectionNext(playerid)
{
	//printf("DEBUG CFONTROL OptionSelectionSetup 1");
    PlayerInfo[playerid][Option]++;
	if(PlayerInfo[playerid][PlayerMode] == STUNT || PlayerInfo[playerid][PlayerMode] == FFA || PlayerInfo[playerid][PlayerMode] == TRP)
	{
	    if(PlayerInfo[playerid][Option] > 299)
		    PlayerInfo[playerid][Option] = 1;
		if(PlayerInfo[playerid][Option] == 217 || PlayerInfo[playerid][Option] == 211)
            PlayerInfo[playerid][Option]++;
	}
	PlayerPlaySound(playerid,1052,0.0,0.0,0.0);
	OptionSelectionSetup(playerid);
	//printf("DEBUG CFONTROL OptionSelectionSetup 2");
}
stock OptionSelectionPrevious(playerid)
{
	//printf("DEBUG CFONTROL OptionSelectionPrevious 1");
    PlayerInfo[playerid][Option]--;
	if(PlayerInfo[playerid][PlayerMode] == STUNT || PlayerInfo[playerid][PlayerMode] == FFA || PlayerInfo[playerid][PlayerMode] == TRP)
	{
	    if(PlayerInfo[playerid][Option] < 1)
	    	PlayerInfo[playerid][Option] = 299;
        if(PlayerInfo[playerid][Option] == 217 || PlayerInfo[playerid][Option] == 211)
            PlayerInfo[playerid][Option]--;
	}
	PlayerPlaySound(playerid,1053,0.0,0.0,0.0);
	OptionSelectionSetup(playerid);
	//printf("DEBUG CFONTROL OptionSelectionPrevious 2");
}

//----------------------------------------------------------

public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
    return 1;
}
public OnPlayerClickTextDraw(playerid, Text:clickedid)
{
    if(clickedid == Text:INVALID_TEXT_DRAW)
    {
		if(!PlayerInfo[playerid][MainMenu] || !PlayerInfo[playerid][PlayerOptionSelected] || PlayerInfo[playerid][SkinsCMD][0] != 0
			 || !PlayerInfo[playerid][HasSelectedVeh] || (!VWPlayerInfo[playerid][Deployed] && PlayerInfo[playerid][PlayerMode] == VW))
		{
		    SelectTextDraw(playerid, SELECT_TEXT_DRAW);
		}
	}
    PlayerPlaySound(playerid,1085,0.0,0.0,0.0);
	if(isClickingVWTexts(playerid, clickedid))return 0;
	if(isClickingMMTexts(playerid, clickedid))return 0;
	//====================[RP]=====================
    if(clickedid == RPInfo[rplName])
	{
        ShowPlayerDialog(playerid, RP_CHANGE_L_NAME, DIALOG_STYLE_INPUT,
			"Roleplay name", "Enter ONLY the last name of character.\n{FFFFFF}EG: Seinfeld, Costanza, Kramer, Vandelay, Benes", "OK", "Cancel");
		return 0;
	}
    if(clickedid == RPInfo[rpfName])
	{
        ShowPlayerDialog(playerid, RP_CHANGE_F_NAME, DIALOG_STYLE_INPUT,
			"Roleplay name", "Enter ONLY the first name of character.\n{FFFFFF}EG: Jerry, George, Cosmo, Art, Elaine", "OK", "Cancel");
		return 0;
	}

    if(PlayerInfo[playerid][PlayerOptionSelected] == 0)
	{
	    if(clickedid == ServerInfo[Spawn_TD] && (PlayerInfo[playerid][PlayerMode] == FFA || PlayerInfo[playerid][PlayerMode] == STUNT || PlayerInfo[playerid][PlayerMode] == TRP))
		{
		    PlayerInfo[playerid][PlayerOptionSelected] = 1;
			TextDrawHideForPlayer(playerid,ServerInfo[Left_TD]);
			TextDrawHideForPlayer(playerid,ServerInfo[Right_TD]);
			TextDrawHideForPlayer(playerid,ServerInfo[Spawn_TD]);
			CancelSelectTextDraw(playerid);
			if(PlayerInfo[playerid][PlayerMode] != TRP)
			{
				TogglePlayerControllable(playerid,true);
	    		PlayerInfo[playerid][SelectedSkin] = GetPlayerSkin(playerid);
				if(PlayerInfo[playerid][SkinsCMD][0] == 0)A_SpawnPlayer(playerid);
				else
				{
				    HideTDs(playerid);
				    PlayerInfo[playerid][SkinsCMD][0] = 0;
					PlayerInfo[playerid][Spawned] = 1;
				    SetPlayerPosEx(playerid,PlayerInfo[playerid][SkinsCMD][1],PlayerInfo[playerid][SkinsCMD][2],PlayerInfo[playerid][SkinsCMD][3], PlayerInfo[playerid][SkinsCMD][4]);
				    if(PlayerInfo[playerid][PlayerMode] == STUNT) SetPlayerVirtualWorld(playerid, W_STUNT);
				 	if(PlayerInfo[playerid][PlayerMode] == FFA)SetPlayerVirtualWorld(playerid, W_FFA);
					ShowpInfo(playerid);
					ShowkSpree(playerid);
				}
			}
			else
			{
			    TextDrawHideForPlayer(playerid,RPInfo[rplName]);
	            TextDrawHideForPlayer(playerid,RPInfo[rpfName]);
	            PlayerTextDrawHide(playerid,RPPlayerInfo[playerid][rptName]);

			    RPPlayerInfo[playerid][dPosWorld] = playerid+3000;
				RPPlayerInfo[playerid][dPosInt] = 8;

                RPPlayerInfo[playerid][BagType] = RP_BAG_SMALL;

                RPPlayerInfo[playerid][dPosX] = 2817.9932;
                RPPlayerInfo[playerid][dPosY] = -1166.4851;
                RPPlayerInfo[playerid][dPosZ] = 1029.1719;
                RPPlayerInfo[playerid][dAngle] = 84.4013;

	            RPPlayerInfo[playerid][Health] = 99.9;
	            RPPlayerInfo[playerid][Thirst] = 100.0;
	            RPPlayerInfo[playerid][Hunger] = 100.0;
	            
				forLoop(i, RP_MAX_BAG_ITEMS)
				{
				    RPPlayerInfo[playerid][BagItems][i] = 0;
				    RPPlayerInfo[playerid][BagItemsValue][i] = 0;
				}
				
                RPPlayerInfo[playerid][BagItems][0] = 2861;
				RPPlayerInfo[playerid][BagItemsValue][0] = 40;
                RPPlayerInfo[playerid][BagItems][1] = 19165;
				RPPlayerInfo[playerid][BagItemsValue][1] = 0;
                RPPlayerInfo[playerid][BagItems][2] = 1240;
				RPPlayerInfo[playerid][BagItemsValue][2] = 60;
                RPPlayerInfo[playerid][BagItems][3] = 1484;
				RPPlayerInfo[playerid][BagItemsValue][3] = 100;
                RPPlayerInfo[playerid][BagItems][4] = 1650;
				RPPlayerInfo[playerid][BagItemsValue][4] = 93;
                RPPlayerInfo[playerid][BagItems][5] = 339;
				RPPlayerInfo[playerid][BagItemsValue][5] = 1;
                RPPlayerInfo[playerid][BagItems][6] = 355;
				RPPlayerInfo[playerid][BagItemsValue][6] = 30;
                RPPlayerInfo[playerid][BagItems][7] = 358;
				RPPlayerInfo[playerid][BagItemsValue][7] = 15;

				RPPlayerInfo[playerid][Money] = 0;
				RPPlayerInfo[playerid][AliveFor] = 0;
				RPPlayerInfo[playerid][HPState] = RP_HEALTHY;
			    RPPlayerInfo[playerid][FirstTime] = 1;
			    RPPlayerInfo[playerid][SkinID] = GetPlayerSkin(playerid);
			    A_SpawnPlayer(playerid);
			    OnPlayerCommandText(playerid, "/tut");
			}
			return 0;
		}
		if(clickedid == ServerInfo[Left_TD])
		{
            OptionSelectionPrevious(playerid);
			return 0;
		}
        if(clickedid == ServerInfo[Right_TD])
		{
            OptionSelectionNext(playerid);
			return 0;
		}
	}
	if(PlayerInfo[playerid][HasSelectedVeh] == 0)
	{
		if(clickedid == ServerInfo[Spawn_TD])
		{
            PlayerInfo[playerid][HasSelectedVeh] = 1;
    		PlayerInfo[playerid][Spawned] = 1;
	        TogglePlayerControllable(playerid,true);
            SetVehiclePos(PlayerInfo[playerid][cSelVeh],PlayerInfo[playerid][cSelPos][0],PlayerInfo[playerid][cSelPos][1],PlayerInfo[playerid][cSelPos][2]);
		    SetVehicleZAngle(PlayerInfo[playerid][cSelVeh], PlayerInfo[playerid][cSelPos][3]);

            SetPlayerInterior(playerid,0);
			HideTDs(playerid);
    		if(PlayerInfo[playerid][PlayerMode] == FFA)
			{
				SetPlayerVirtualWorld(playerid, W_FFA);
				SetVehicleVirtualWorld(PlayerInfo[playerid][cSelVeh],W_FFA);
			}
    		if(PlayerInfo[playerid][PlayerMode] == STUNT)
			{
				SetPlayerVirtualWorld(playerid, W_STUNT);
				SetVehicleVirtualWorld(PlayerInfo[playerid][cSelVeh],W_STUNT);
			}
		    LinkVehicleToInterior(PlayerInfo[playerid][cSelVeh],0);
			PlacePlayerInVehicle(playerid,PlayerInfo[playerid][cSelVeh],0);
    		SetCameraBehindPlayer(playerid);
			//A_SpawnPlayer(playerid);
    		TextDrawHideForPlayer(playerid,ServerInfo[Left_TD]);
    		TextDrawHideForPlayer(playerid,ServerInfo[Right_TD]);
			TextDrawHideForPlayer(playerid,ServerInfo[Spawn_TD]);
			CancelSelectTextDraw(playerid);
			PlayerInfo[playerid][Vehicle] = PlayerInfo[playerid][cSelVeh];
			if(PlayerInfo[playerid][DisbleSpeedo] == 0)
			{
				if(PlayerInfo[playerid][SpeedoObject] != -1)DestroyTheDynamicObject(PlayerInfo[playerid][SpeedoObject]);
			    PlayerInfo[playerid][SpeedoObject] = CreateDynamicObject(19483, 202.14845, 1755.43835, -17.83983,   0, 0, 0.00000, -1, -1, playerid);

				if(PlayerInfo[playerid][RacePlaceObject] != -1)DestroyTheDynamicObject(PlayerInfo[playerid][RacePlaceObject]);
			    PlayerInfo[playerid][RacePlaceObject] = CreateDynamicObject(19483, 202.14845, 1755.43835, -17.83983,   0, 0, 0.00000, -1, -1, playerid);

				PlayerInfo[playerid][SpeedoReset] = 1;
		    }
			new string[128];
			format(string, sizeof(string), "Notice:{FFFFFF} You have spawned a %s (Model:%d) + NOS.", VehicleNames[PlayerInfo[playerid][cVehModel]-400], PlayerInfo[playerid][cVehModel]);
			SendClientMessage(playerid,green1, string);
			if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 432) ShowTankAimForPlayer(playerid);
			ShowpInfo(playerid);
			ShowkSpree(playerid);
			return 0;
		}

        if(clickedid == ServerInfo[Left_TD])
		{
            SwitchToPreviousCar(playerid);
			return 0;
		}
        if(clickedid == ServerInfo[Right_TD])
		{
            SwitchToNextCar(playerid);
			return 0;
		}
	}
	if(clickedid == MM_Texts[Play])
	{
		if(PlayerInfo[playerid][Registered] == 0)
	    {
	        ShowPlayerDialog(playerid,REGISTERMENU, DIALOG_STYLE_PASSWORD,"Register Menu", "Create a password(4-30 characters)", "Register", "");
	    	GameTextForPlayer(playerid, "~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~r~You must register!", 2000, 3);
		}
	    else if(PlayerInfo[playerid][Registered] && !PlayerInfo[playerid][LoggedIn])
	    {
   			ShowPlayerDialog(playerid,LOGINMENU, DIALOG_STYLE_PASSWORD,"Login Menu", "Put your password to login:", "Login", "");
			GameTextForPlayer(playerid, "~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~r~You must login!", 2000, 3);
		}
		else
		{
			if(PlayerInfo[playerid][ModeUnLock][PlayerInfo[playerid][PlayerMode]] == 0 && strlen(ModePass[PlayerInfo[playerid][PlayerMode]]) > 2)
			{
			    PlayerInfo[playerid][ModeUnLockSel] = PlayerInfo[playerid][PlayerMode];
			    ShowPlayerDialog(playerid,MODE_PASSWORD, DIALOG_STYLE_INPUT,"Mode Password Menu", "You must enter the password to enter this mode.", "Enter", "Cancel");
			    return 1;
			}
		    HideTDs(playerid);
			CancelSelectTextDraw(playerid);
			PlayerInfo[playerid][MainMenu] = 1;
		    PlayerInfo[playerid][Spawned] = 0;
		 	PlayerInfo[playerid][PlayerOptionSelected] = 1;
		 	A_SpawnPlayer(playerid);
		 	updateMMPlayers();
		}
		return 0;
	}

	return 1;
}
//----------------------------------------------------------
public OnPlayerUpdate(playerid)
{
	if(!IsPlayerConnected(playerid) || IsPlayerNPC(playerid)) return 0;
    if(ServerInfo[AllowAntiAFK] == 1)
		PlayerInfo[playerid][Online] = 30;

	/*if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
		new Float:vector[3];
		GetPlayerCameraFrontVector(playerid, vector[0], vector[1], vector[2]);
		forLoop(i, sizeof(vector))
		{
			if(floatabs(vector[i]) > 10.0)
				return 0;
		}
	}*/
	CheckDMMapItemsForPlayer(playerid);
    CheckDMMapVTsForPlayer(playerid);
    CheckPJMapItemsForPlayer(playerid);
    UpdateSpeedoTXT(playerid);
    StuntBoost(playerid);
    
    if(PlayerInfo[playerid][PlayerMode] == TRP && PlayerInfo[playerid][Spawned] == 1 && RPPlayerInfo[playerid][FirstTime] == 1)
    {
        if(RPPlayerInfo[playerid][SelectedItem] != -1) SetPlayerArmedWeapon(playerid, 0);
        else
        {
            new slot = GetWeaponSlot(GetPlayerWeapon(playerid));
		    if(GetPlayerWeapon(playerid) != 0 && GetPlayerWeapon(playerid) == RPPlayerInfo[playerid][selWeap][slot])
		    {
		        new oid = RPPlayerInfo[playerid][selWeapID][slot];
		        new mid = GetItemInfoID(RPPlayerInfo[playerid][BagItems][oid]);
				updateSelItem(playerid, mid, oid);
		    }else PlayerTextDrawSetString(playerid,RPPlayerInfo[playerid][selItem], " ");
        }
        if(RPPlayerInfo[playerid][HPState] == RP_BROKEN_LEG && !IsPlayerInAnyVehicle(playerid))
		{
		    new index = GetPlayerAnimationIndex(playerid);
		    if(index == 1266 || index == 1195)
		    {
			    TogglePlayerControllable(playerid,false);
				TogglePlayerControllable(playerid,true);
				ApplyAnimation(playerid, "SWEET", "Sweet_injuredloop", 4.0, 0, 0, 0, 0, 0);
				GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~w~Broken Leg", 2000, 3);
			}
		}
    }
	UpdateSupermanMode(playerid);
	PlayerUpdateStuff(playerid);
	return 1;
}

forward CheckAFKPlayers(i);
public CheckAFKPlayers(i)
{
    if(ServerInfo[AllowAntiAFK] == 1)
    {
	    if(PlayerInfo[i][Online] > 0 && IsPlayerConnected(i) && !IsPlayerNPC(i) && GetPlayerState(i) != PLAYER_STATE_WASTED && GetPlayerState(i) != PLAYER_STATE_SPECTATING)
		{
		    PlayerInfo[i][Online]--;
			if(PlayerInfo[i][Online] == 0)
			{
			    if(PlayerInfo[i][Spawned] == 1)
			    {
					//printf("DEBUG CFONTROL CheckAFKPlayers 1");
			        switch(PlayerInfo[i][PlayerMode])
			        {
			            case DM, ZO, GK, CO, TL, CTF, VW, PJ, TRP:
			            {
							new msg[180];
			                format(msg, sizeof(msg), "{FF0000}AFK MANAGER {FFFFFF} %s has been sent to lobby for being AFK.", PlayerInfo[i][Name]);
							SendMessageToAll(false, COLOR_WHITE, msg);
			                SetPlayerWorldBounds(i, 20000.0000, -20000.0000, 20000.0000, -20000.0000 );
					        OtherDeathDisconnect(i,1,0);
							ResetWeapons(i);
							SetPlayerMode(i, LOBBY, false, false);
							format(msg, sizeof(msg), "~w~%s (~p~joined~w~) lobby",FixpInfoName(i));
							forLoop(u, MAX_MODES)UpdatepInfo(u,msg);
							format(msg, sizeof(msg), "[MODE CHANGE] %s[%d] was sent to lobby for being AFK!", PlayerInfo[i][Name], i);
							db_SaveChat(-1, -1, msg);
							PlayerInfo[i][Spawned] = 0;
						    PlayerInfo[i][MainMenu] = 0;
						    PlayerInfo[i][poFirstTime] = 0;
							ShowMMTexts(i);
			            }
			            case STUNT:
			            {
			                if(SFPlayerInfo[i][Event] > 0)
			                {
				                QuitEvent(i,0);
							 	A_SpawnPlayer(i);
						 	}
			            }
			            case PTP:
			            {
			                if(PTPPlayerInfo[i][Class] == PRESIDENT || PTPPlayerInfo[i][Class] == VICE)
			                {
			                    new msg[180];
				                format(msg, sizeof(msg), "{FF0000}AFK MANAGER {FFFFFF} %s has been sent to lobby for being AFK.", PlayerInfo[i][Name]);
								SendMessageToAll(false, COLOR_WHITE, msg);
				                SetPlayerWorldBounds(i, 20000.0000, -20000.0000, 20000.0000, -20000.0000 );
						        OtherDeathDisconnect(i,0,0);
								ResetWeapons(i);
								SetPlayerMode(i, LOBBY, false, false);
								format(msg, sizeof(msg), "~w~%s (~p~joined~w~) lobby",FixpInfoName(i));
								forLoop(u, MAX_MODES)UpdatepInfo(u,msg);
								format(msg, sizeof(msg), "[MODE CHANGE] %s[%d] was sent to lobby for being AFK!", PlayerInfo[i][Name], i);
								db_SaveChat(-1, -1, msg);
								PlayerInfo[i][Spawned] = 0;
							    PlayerInfo[i][MainMenu] = 0;
							    PlayerInfo[i][poFirstTime] = 0;
								ShowMMTexts(i);
			                }
			                else
			                {
			                    new msg[180];
				                format(msg, sizeof(msg), "{FF0000}AFK MANAGER {FFFFFF} %s has been sent to lobby for being AFK.", PlayerInfo[i][Name]);
								SendMessageToAll(false, COLOR_WHITE, msg);
				                SetPlayerWorldBounds(i, 20000.0000, -20000.0000, 20000.0000, -20000.0000 );
						        OtherDeathDisconnect(i,1,0);
								ResetWeapons(i);
								SetPlayerMode(i, LOBBY, false, false);
								format(msg, sizeof(msg), "~w~%s (~p~joined~w~) lobby",FixpInfoName(i));
								forLoop(u, MAX_MODES)UpdatepInfo(u,msg);
								format(msg, sizeof(msg), "[MODE CHANGE] %s[%d] was sent to lobby for being AFK!", PlayerInfo[i][Name], i);
								db_SaveChat(-1, -1, msg);
								PlayerInfo[i][Spawned] = 0;
							    PlayerInfo[i][MainMenu] = 0;
							    PlayerInfo[i][poFirstTime] = 0;
								ShowMMTexts(i);
			                }
			            }
			            case TW:
			            {
			                if(TWPlayerInfo[i][Class] == LEADER || TWPlayerInfo[i][Class] == VICE)
			                {
			                    new msg[180];
				                format(msg, sizeof(msg), "{FF0000}AFK MANAGER {FFFFFF} %s has been sent to lobby for being AFK.", PlayerInfo[i][Name]);
								SendMessageToAll(false, COLOR_WHITE, msg);
				                SetPlayerWorldBounds(i, 20000.0000, -20000.0000, 20000.0000, -20000.0000 );
						        OtherDeathDisconnect(i,0,0);
								ResetWeapons(i);
								SetPlayerMode(i, LOBBY, false, false);
								format(msg, sizeof(msg), "~w~%s (~p~joined~w~) lobby",FixpInfoName(i));
								forLoop(u, MAX_MODES)UpdatepInfo(u,msg);
								format(msg, sizeof(msg), "[MODE CHANGE] %s[%d] was sent to lobby for being AFK!", PlayerInfo[i][Name], i);
								db_SaveChat(-1, -1, msg);
								PlayerInfo[i][Spawned] = 0;
							    PlayerInfo[i][MainMenu] = 0;
							    PlayerInfo[i][poFirstTime] = 0;
								ShowMMTexts(i);
			                }
			                else
			                {
			                    new msg[180];
				                format(msg, sizeof(msg), "{FF0000}AFK MANAGER {FFFFFF} %s has been sent to lobby for being AFK.", PlayerInfo[i][Name]);
								SendMessageToAll(false, COLOR_WHITE, msg);
				                SetPlayerWorldBounds(i, 20000.0000, -20000.0000, 20000.0000, -20000.0000 );
						        OtherDeathDisconnect(i,1,0);
								ResetWeapons(i);
								SetPlayerMode(i, LOBBY, false, false);
								format(msg, sizeof(msg), "~w~%s (~p~joined~w~) lobby",FixpInfoName(i));
								forLoop(u, MAX_MODES)UpdatepInfo(u,msg);
								format(msg, sizeof(msg), "[MODE CHANGE] %s[%d] was sent to lobby for being AFK!", PlayerInfo[i][Name], i);
								db_SaveChat(-1, -1, msg);
								PlayerInfo[i][Spawned] = 0;
							    PlayerInfo[i][MainMenu] = 0;
							    PlayerInfo[i][poFirstTime] = 0;
								ShowMMTexts(i);
			                }
			            }
			        }
					//printf("DEBUG CFONTROL CheckAFKPlayers 2");
			    }
			}
		}
	}
}

forward PlayerUpdateStuff(playerid);
public PlayerUpdateStuff(playerid)
{
    if(!IsPlayerConnected(playerid) || IsPlayerNPC(playerid))return 0;
    //====================[Check for weapons hacks]============
	if(PlayerInfo[playerid][Level] < 1)
	{
	    if((GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USEJETPACK) && !(PlayerInfo[playerid][PlayerMode] == FFA || PlayerInfo[playerid][PlayerMode] == STUNT))
	    {
	        new Float:x, Float:y, Float:z;
			GetPlayerPos(playerid,x,y,z);
			SetPlayerPos(playerid,x,y,z+1);
	    }
		if(GetPlayerWeapon(playerid) != 0 && PlayerInfo[playerid][wCheck] == 0)
	    {
	        /*if(PlayerInfo[playerid][wCheck] == 1)
	        {
	            PlayerInfo[playerid][wCheck] = 0;
	            continue;
	        }*/
	        if(!CheckLegalWeapon(playerid,GetPlayerWeapon(playerid)))
			{
				ResetWeapons(playerid);
			}
			
			if(IsPlayerInAnyVehicle(playerid))
			{
				if(GetPlayerWeapon(playerid) == WEAPON_DEAGLE || GetPlayerWeapon(playerid) == WEAPON_SHOTGSPA || GetPlayerWeapon(playerid) == WEAPON_SAWEDOFF)
		        {
		            SetPlayerArmedWeapon(playerid, 5);
		        }
	        }
	    }
	}
	return 1;
}
stock ShowRocketAimForPlayer(playerid)
{
    TextDrawShowForPlayer(playerid,ServerInfo[RocketAim]);
}
stock HideRocketAimForPlayer(playerid)
{
    TextDrawHideForPlayer(playerid,ServerInfo[RocketAim]);
}

public OnPlayerDisconnect(playerid, reason)
{
    //new start = GetTickCount();
	//printf("DEBUG CFONTROL OnPlayerDisconnect 1 pid %d",playerid);
	//reasons: 0 = time out, 1 = quit, 2 = kick/ban
    if(!IsPlayerNPC(playerid))
	{
    	if(PlayerInfo[playerid][MainMenu] == 1)
		{
		    if(PlayerInfo[playerid][PlayerMode] == DM && PlayerInfo[playerid][Spawned] == 1)
		    {
	    		PVPDisqualifyDM(playerid, reason);//must be palced here... not on OtherDeathDis...
	    	}
		    if(PlayerInfo[playerid][PlayerMode] == PJ && PlayerInfo[playerid][Spawned] == 1)
		    {
	    		PVPDisqualifyPJ(playerid, reason);//must be palced here... not on OtherDeathDis...
	    	}
    		PlayerInfo[playerid][Spree] = 0;
			CalculatekSpree(PlayerInfo[playerid][PlayerMode]);
	    	if(ModeCount(PlayerInfo[playerid][PlayerMode])-1 <= 1)
			{
			    forLoop(i, MAX_PLAYERS)
				{
					if(IsPlayerConnected(i) && GetPlayerMode(i) == PlayerInfo[playerid][PlayerMode])
					{
			    		AskToChangeMode(i);
					}
				}
			}
		}
		if(PlayerInfo[playerid][PlayerMode] == TRP && PlayerInfo[playerid][Spawned] == 1)
	    {
    		RPSavePlayerStats(playerid);
        }
    	OtherDeathDisconnect(playerid,0,0);
    	DestroyPlayerStuff(playerid);
		VWDestroyPlayerAction(playerid);
		PlayerInfo[playerid][PlayerMode] = -1;
		updateMMPlayers();
    	new msg[256];
    	if(PlayerInfo[playerid][LoggedIn] == 1)
		{
			PlayerInfo[playerid][LoggedIn] = 0;
    		SavePlayer(playerid, 0);
    		SaveSettingsForPlayer(playerid);
    	}
		if(PlayerInfo[playerid][ConnectedForMSG])
		{
	        format(msg, sizeof(msg), "~w~%s (~p~quit~w~)",FixpInfoName(playerid));
			forLoop(i, MAX_MODES)UpdatepInfo(i,msg);
		}
    	if(reason == 0 || reason == 1)
		{
			format(msg, sizeof(msg), "[QUIT] %s[%d] has left the server.", PlayerInfo[playerid][Name], playerid);
			db_SaveChat(-1, -1, msg);
			
		    format(msg, sizeof(msg),"[QUIT]{CCCCCC} %s[%d] has quit the server.",PlayerInfo[playerid][Name], playerid);
			forLoop(i, MAX_PLAYERS)
			{
				if(IsPlayerConnected(i))
				{
					if(PlayerInfo[i][Registered] && PlayerInfo[i][LoggedIn] && PlayerInfo[i][Spawned])
					{
					    SendClientMessage(i, red1, msg);
					}
				}
			}
			}
    }
    FullyConnected[playerid] = false;
	//printf("DEBUG CFONTROL OnPlayerDisconnect 2 pid %d",playerid);
	//printf("onplayerdis %d e %d = %d",start, GetTickCount(), GetTickCount()-start);
    return 1;
}


public OnPlayerDeath(playerid, killerid, reason)
{
	//printf("DEBUG CFONTROL OnPlayerDeath 1 pid %d",playerid);
    if(!IsPlayerNPC(playerid))
	{
	    PlayerInfo[playerid][DeathFlood]++;
	    if(PlayerInfo[playerid][Level]==0)
		{
		    if(PlayerInfo[playerid][DeathFlood] >= 8)
		    {
				user_Ban(playerid,-1,"Exessive Death flooding",true,true,0);
				return 0;
	        }
	        if(PlayerInfo[playerid][DeathFlood] >= 3)
		    {
				user_Kick(playerid,-1,"Death flooding",true,true);
				return 0;
	        }
	    }
    	EXPL_OnPlayerDeath(playerid, killerid, reason);
	    if(PlayerInfo[playerid][PlayerMode] != DM && PlayerInfo[playerid][PlayerMode] != TRP)
			GiveDeathMsg(playerid, killerid, reason);
	    FixDeathScores(playerid,killerid);
	    PlayerInfo[playerid][lCountDown]=-1;
	    HideTDs(playerid);
	    if(PlayerInfo[playerid][EditingAttachments] == -1)
	    {
		    PlayerInfo[playerid][EditingAttachments] = -2;
		    CancelEdit(playerid);
		}
		else if (PlayerInfo[playerid][EditingAttachments] >=0)
		{
		    RemovePlayerAttachedObjectEx(playerid, PlayerInfo[playerid][EditingAttachments]);
		    PlayerInfo[playerid][EditingAttachments] = -2;
		    CancelEdit(playerid);
		}
	    SFPlayerInfo[playerid][Superman] = 0;
		SFPlayerInfo[playerid][Spiderman] = 0;
		PlayerInfo[playerid][AbuseFixVIP] = 0;
		PlayerInfo[playerid][AbuseHealVIP] = 0;
	    PlayerInfo[playerid][ZoneDead] = 1;
		SetPlayerColor(playerid,grey12);
		ResetWeapons(playerid);
		OtherDeathDisconnect(playerid,1,1);
	}
	//printf("DEBUG CFONTROL OnPlayerDeath 2 pid %d",playerid);
	return 1;
}
stock GiveDeathMsg(playerid, killerid, reason)
{
    if(PlayerInfo[playerid][MainMenu] == 0)return 0;
	new deathreason[70];
    format(deathreason,70,"%s",ReturnDeathReason(killerid,reason));
    if(IsPlayerConnected(killerid))
	{
		new msg[256];
		format(msg, sizeof(msg), "{FF0000}[KILL] {FFFFFF}You got {67F6F6}killed {FFFFFF}by %s. [Weapon: %s] [Distance: %d m]", PlayerInfo[killerid][Name],deathreason,GetDistanceBetweenPlayers(playerid, killerid));
        SendClientMessage(playerid, white, msg);
		format(msg, sizeof(msg), "{FF0000}[KILL] {FFFFFF}You {67F6F6}killed {FFFFFF}%s. [Weapon: %s] [Distance: %d m]", PlayerInfo[playerid][Name],deathreason,GetDistanceBetweenPlayers(playerid, killerid));
        SendClientMessage(killerid, white, msg);
		format(msg, sizeof(msg), "[KILL] %s(ID:%d) got killed by %s(ID:%d). [Weapon: %s] [Distance: %d m]", PlayerInfo[playerid][Name], playerid,PlayerInfo[killerid][Name],killerid,deathreason,GetDistanceBetweenPlayers(playerid, killerid));
		db_SaveChat(-1, PlayerInfo[playerid][PlayerMode],msg);
		ShowKillText(killerid);
		//if(strlen(deathreason) >= 9)strdel(deathreason, 9, strlen(deathreason));
		format(msg, sizeof(msg), "~w~%s (~h~~r~%s~w~) %s",FixpInfoName(killerid),deathreason,FixpInfoName(playerid));
		UpdatepInfo(PlayerInfo[playerid][PlayerMode],msg);
	}
	else
	{
	    new msg[156];
		format(msg, sizeof(msg), "[DEATH] %s(ID:%d) died. Reason: %s", PlayerInfo[playerid][Name], playerid,deathreason);
		db_SaveChat(-1, PlayerInfo[playerid][PlayerMode],msg);
		format(msg, sizeof(msg), "~w~%s (~h~~r~died~w~)",FixpInfoName(playerid),deathreason);
		UpdatepInfo(PlayerInfo[playerid][PlayerMode],msg);
	}
	return 1;
}

stock FixpInfoName(playerid)
{
	new thename[25];
	format(thename, sizeof thename,"%s",PlayerInfo[playerid][Name]);
	forLoop(i, strlen(thename))
    {
	    if (thename[i] == ']')thename[i] = ')';
	    if (thename[i] == '[')thename[i] = '(';
	    if (thename[i] == '_')thename[i] = '-';
	}
	return thename;
}

stock FixpInfoString(name[], tf)
{
    //printf("DEBUG CFONTROL FixpInfoString 1");
	new thename[100];
	format(thename,sizeof thename,"%s",name);
	if(tf == 0)
	{
		forLoop(i, strlen(thename))
	    {
		    if (thename[i] == ']')thename[i] = ')';
		    if (thename[i] == '[')thename[i] = '(';
		    if (thename[i] == '_')thename[i] = '-';
		}
	}
 	if(tf == 1 && strlen(thename) >= 30)
	{
		strdel(thename, 30, strlen(thename));
		format(thename,sizeof thename,"%s.",thename);
	}
	if(tf == 0 && strlen(thename) >= 50)
	{
		strdel(thename, 50, strlen(thename));
		format(thename,sizeof thename,"%s.",thename);
	}
    //printf("DEBUG CFONTROL FixpInfoString 2");
	return thename;
}

stock UpdatepInfo(mode,text[])
{
	TextDrawSetString(ServerInfo[pInfo_TD][mode],text);
	KillTimer(ServerInfo[pInfo_Timer][mode]);
	ServerInfo[pInfo_Timer][mode] = SetTimerEx("UpdatepInfoTimer", 5000, false, "i", mode);
	return 0;
}
forward UpdatepInfoTimer(mode);
public UpdatepInfoTimer(mode)
{
	TextDrawSetString(ServerInfo[pInfo_TD][mode], " ");
}
stock ShowHidepInfo(i)
{
	if(!PlayerInfo[i][DisableShowpInfo])
	{
	    HidepInfo(i);
		PlayerInfo[i][DisableShowpInfo] = 1;
	}
	else
	{
		PlayerInfo[i][DisableShowpInfo] = 0;
	    ShowpInfo(i);
	}
}
stock HidepInfo(playerid)
{
    forLoop(i, MAX_MODES)
    {
	    TextDrawHideForPlayer(playerid,ServerInfo[pInfo_TD][i]);
    }
}
stock ShowpInfo(playerid)
{
    if(ServerInfo[pInfoState] == 0) return 0;
    if(!PlayerInfo[playerid][DisableShowpInfo])
		TextDrawShowForPlayer(playerid,ServerInfo[pInfo_TD][PlayerInfo[playerid][PlayerMode]]);
	return 1;
}

stock CalculatekSpree(mode)
{
    //printf("DEBUG CFONTROL CalculatekSpree 1 m %d", mode);
    if(mode == LOBBY)return 0;
    //if(kSpree_LastCalled[mode] == 0)
    {
		new player=-1,spree;
	    forLoop(i, MAX_PLAYERS)
	   	{
			if(IsPlayerConnected(i) && !IsPlayerNPC(i) && PlayerInfo[i][Spawned] && PlayerInfo[i][PlayerMode] == mode && PlayerInfo[i][Spree] > 2)
			{
				if(PlayerInfo[i][Spree] > spree)
				{
					player = i;
					spree = PlayerInfo[i][Spree];
				}
			}
		}
		if(player != -1)
		{
		    if(!(kSpree_Spree[mode] == PlayerInfo[player][Spree] && kSpree_Player[mode] == player))RefoundkSpree(player);
		    UpdatekSpree(player, PlayerInfo[player][PlayerMode]);
			kSpree_Spree[mode] = PlayerInfo[player][Spree];
			kSpree_Player[mode] = player;
		}
		else
		{
		    UpdatekSpree(player, mode);
			kSpree_Player[mode] = -1;
		}
	//	kSpree_LastCalled[mode] = 3;
	}
	return 1;
    //printf("DEBUG CFONTROL CalculatekSpree 2 m %d", mode);
}

stock UpdatekSpree(playerid, mode)
{
	new string[120];
	format(string,sizeof string," ");
	if(playerid != -1)
	{
	    if(mode == TW || mode == FFA || mode == PTP || mode == TL || mode == VW || mode == CTF || mode == CO || mode == ZO || mode == GK)
			format(string,sizeof string,"%s is on a %d killing spree", FixpKillSpreeName(playerid), PlayerInfo[playerid][Spree]);
	    if(mode == STUNT)format(string,sizeof string,"%s is on a %d event spree", FixpKillSpreeName(playerid), PlayerInfo[playerid][Spree]);
	}
	else
	{
	    forLoop(i, MAX_PLAYERS)
	   	{
			if(IsPlayerConnected(i) && PlayerInfo[i][Spawned] && PlayerInfo[i][PlayerMode] == mode)
			{
				HideModekSpree(mode, i);
			}
		}
	}
	TextDrawSetString(kSpree_Line[mode], string);
}
stock FixpKillSpreeName(playerid)
{
    //printf("DEBUG CFONTROL FixpKillSpreeName 1");
	new thename[50];
	format(thename,50,"%s",PlayerInfo[playerid][Name]);
	forLoop(i, strlen(thename))
    {
	    if (thename[i] == ']')thename[i] = ')';
	    if (thename[i] == '[')thename[i] = '(';
	    if (thename[i] == '_')thename[i] = '-';
	}
	if(strlen(thename) >= 12)
	{
		strdel(thename, 12, strlen(thename));
		format(thename,50,"%s.",thename);
	}
    //printf("DEBUG CFONTROL FixpKillSpreeName 2");
	return thename;
}
stock ShowHidekSpree(i)
{
    //printf("DEBUG CFONTROL ShowHidekSpree 1");
	if(!PlayerInfo[i][DisableShowkSpree])
	{
	    HidekSpree(i);
		PlayerInfo[i][DisableShowkSpree] = 1;
	}
	else
	{
		PlayerInfo[i][DisableShowkSpree] = 0;
	    ShowkSpree(i);
	}
    //printf("DEBUG CFONTROL ShowHidekSpree 2");
}

stock HideModekSpree(mode, playerid)
{
    //TextDrawHideForPlayer(playerid,kSpree_Shadow);
    TextDrawHideForPlayer(playerid,kSpree_Line[mode]);
}

stock HidekSpree(playerid)
{
    //TextDrawHideForPlayer(playerid,kSpree_Shadow);
    forLoop(i, MAX_MODES)
    {
	    TextDrawHideForPlayer(playerid,kSpree_Line[i]);
    }
}
stock ShowkSpree(playerid)
{
    //printf("DEBUG CFONTROL ShowkSpree 1");
    //HidekSpree(playerid);
    if(PlayerInfo[playerid][PlayerMode] == TW || PlayerInfo[playerid][PlayerMode] == FFA || PlayerInfo[playerid][PlayerMode] == STUNT || PlayerInfo[playerid][PlayerMode] == CTF ||
		PlayerInfo[playerid][PlayerMode] == PTP || PlayerInfo[playerid][PlayerMode] == CO || PlayerInfo[playerid][PlayerMode] == ZO || PlayerInfo[playerid][PlayerMode] == TL
			 || PlayerInfo[playerid][PlayerMode] == GK || PlayerInfo[playerid][PlayerMode] == VW)
    {
	    if(!PlayerInfo[playerid][DisableShowkSpree])
		{
		    if(kSpree_Player[PlayerInfo[playerid][PlayerMode]] > -1)
		    {
			    //TextDrawShowForPlayer(playerid,kSpree_Shadow);
				TextDrawShowForPlayer(playerid,kSpree_Line[PlayerInfo[playerid][PlayerMode]]);
			}
		}
	}
    //printf("DEBUG CFONTROL ShowkSpree 2");
}
stock RefoundkSpree(playerid)
{
    //printf("DEBUG CFONTROL RefoundSpreePlayer 1");
    if(PlayerInfo[playerid][Spree] % 10 == 0 && PlayerInfo[playerid][Spree] > 0)
	{
		new string[228], spree = PlayerInfo[playerid][Spree];
		new money = spree*(20+random(15)), score = (10+random(20))*spree;
		if(PlayerInfo[playerid][PlayerMode] == TW)
		{
			ChangeModeScore(playerid, score);
			GiveThePlayerMoney(playerid,money);
			format(string,226,"{FF0000}kSPREE:{FFFFFF} %s has earned %d dollars and %d score for being on a %d killing spree!",PlayerInfo[playerid][Name],money,score,spree);
			SendMessageToMode(TW,green1,string);
			format(string, sizeof(string), "[KILLING SPREE] %s has earned %d dollars and %d score for being on a %d killing spree!",PlayerInfo[playerid][Name],money,score,spree);
			db_SaveChat(-1, TW,string);
		}
		if(PlayerInfo[playerid][PlayerMode] == VW)
		{
			//ChangeModeScore(playerid, score);
			VWGiveScore(playerid, score, "Spree");
			format(string,226,"{FF0000}kSPREE:{FFFFFF} %s has earned %d score for being on a %d killing spree!",PlayerInfo[playerid][Name],score,spree);
			SendMessageToMode(VW,green1,string);
			format(string, sizeof(string), "[KILLING SPREE] %s has earned %d score for being on a %d killing spree!",PlayerInfo[playerid][Name],score,spree);
			db_SaveChat(-1, VW,string);
		}
		if(PlayerInfo[playerid][PlayerMode] == CTF)
		{
			ChangeModeScore(playerid, score);
			format(string,226,"{FF0000}kSPREE:{FFFFFF} %s has earned %d score for being on a %d killing spree!",PlayerInfo[playerid][Name],score,spree);
			SendMessageToMode(CTF,green1,string);
			format(string, sizeof(string), "[KILLING SPREE] %s has earned %d score for being on a %d killing spree!",PlayerInfo[playerid][Name],score,spree);
			db_SaveChat(-1, CTF,string);
		}
		if(PlayerInfo[playerid][PlayerMode] == TL)
		{
			ChangeModeScore(playerid, score);
			format(string,226,"{FF0000}kSPREE:{FFFFFF} %s has earned %d score for being on a %d killing spree!",PlayerInfo[playerid][Name],score, spree);
			SendMessageToMode(TL,green1,string);
			format(string, sizeof(string), "[KILLING SPREE] %s has earned %d score for being on a %d killing spree!",PlayerInfo[playerid][Name],score, spree);
			db_SaveChat(-1, TL,string);
		}
		if(PlayerInfo[playerid][PlayerMode] == PTP)
		{
			ChangeModeScore(playerid, score);
			GiveThePlayerMoney(playerid,money);
			format(string,226,"{FF0000}kSPREE:{FFFFFF} %s has earned %d dollars and %d score for being on a %d killing spree!",PlayerInfo[playerid][Name],money,score,spree);
			SendMessageToMode(PTP,green1,string);
			format(string, sizeof(string), "[KILLING SPREE] %s has earned %d dollars and %d score for being on a %d killing spree!",PlayerInfo[playerid][Name],money,score,spree);
			db_SaveChat(-1, PTP,string);
		}
	    if(PlayerInfo[playerid][PlayerMode] == FFA)
		{
			ChangeModeScore(playerid, score);
			GiveThePlayerMoney(playerid,money);
			format(string,226,"{FF0000}kSPREE:{FFFFFF} %s has earned %d dollars and %d score for being on a %d killing spree!",PlayerInfo[playerid][Name],money,score,spree);
			SendMessageToMode(FFA,green1,string);
			format(string, sizeof(string), "[KILLING SPREE] %s has earned %d dollars and %d score for being on a %d killing spree!",PlayerInfo[playerid][Name],money,score,spree);
			db_SaveChat(-1, FFA,string);
		}
	    if(PlayerInfo[playerid][PlayerMode] == ZO)
		{
			ChangeModeScore(playerid, score);
			GiveThePlayerMoney(playerid,money);
			format(string,226,"{FF0000}kSPREE:{FFFFFF} %s has earned %d dollars and %d score for being on a %d killing spree!",PlayerInfo[playerid][Name],money,score,spree);
			SendMessageToMode(ZO,green1,string);
			format(string, sizeof(string), "[KILLING SPREE] %s has earned %d dollars and %d score for being on a %d killing spree!",PlayerInfo[playerid][Name],money,score,spree);
			db_SaveChat(-1, ZO,string);
		}
	    if(PlayerInfo[playerid][PlayerMode] == GK)
		{
			ChangeModeScore(playerid, score);
			GiveThePlayerMoney(playerid,money);
			format(string,226,"{FF0000}kSPREE:{FFFFFF} %s has earned %d dollars and %d score for being on a %d killing spree!",PlayerInfo[playerid][Name],money,score,spree);
			SendMessageToMode(GK,green1,string);
			format(string, sizeof(string), "[KILLING SPREE] %s has earned %d dollars and %d score for being on a %d killing spree!",PlayerInfo[playerid][Name],money,score,spree);
			db_SaveChat(-1, GK,string);
		}
	    if(PlayerInfo[playerid][PlayerMode] == STUNT)
		{
	     	GiveThePlayerMoney(playerid, money);
			format(string,226,"{FF0000}eSPREE:{FFFFFF} %s has earned $%d for being on a %d event winning spree!",PlayerInfo[playerid][Name],money,spree);
			SendMessageToMode(STUNT,green1,string);
			format(string, sizeof(string), "[EVENT SPREE] %s has earned $%d for being on a %d event winning spree!",PlayerInfo[playerid][Name], money,spree);
			db_SaveChat(-1, STUNT,string);
		}
	}
    //printf("DEBUG CFONTROL RefoundSpreePlayer 2");
}



stock ShowKillText(playerid)
{
    TextDrawShowForPlayer(playerid,ServerInfo[Kill_TD]);
	SetTimerEx("HideKillText", 900, false, "i", playerid);
	return 0;
}
forward HideKillText(playerid);
public HideKillText(playerid)
{
    TextDrawHideForPlayer(playerid,ServerInfo[Kill_TD]);
}
stock ShowDamageText(playerid)
{
	if(PlayerInfo[playerid][DamageTextTimer] != -1)return 0;
 	if(IsPlayerInAnyVehicle(playerid))
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
		    new carid=GetVehicleModel(GetPlayerVehicleID(playerid));
		    if(carid == 520 || carid == 425)
		    {
		        TextDrawShowForPlayer(playerid, DamageTxTInfo[DAMAGE_TXT_LAUNCHER][dTxt][0]);
	    		TextDrawShowForPlayer(playerid, DamageTxTInfo[DAMAGE_TXT_LAUNCHER][dTxt][1]);
		    }
		    else
		    {
		        TextDrawShowForPlayer(playerid, DamageTxTInfo[DAMAGE_TXT_TANK][dTxt][0]);
	    		TextDrawShowForPlayer(playerid, DamageTxTInfo[DAMAGE_TXT_TANK][dTxt][1]);
			}
	    }
	    else
	    {
	        TextDrawShowForPlayer(playerid, DamageTxTInfo[DAMAGE_TXT_NORMAL][dTxt][0]);
    		TextDrawShowForPlayer(playerid, DamageTxTInfo[DAMAGE_TXT_NORMAL][dTxt][1]);
	    }
	}
	else
	{
		switch(GetPlayerWeapon(playerid))
		{
		    case WEAPON_SNIPER:
		    {
		        TextDrawShowForPlayer(playerid, DamageTxTInfo[DAMAGE_TXT_SNIPER][dTxt][0]);
	    		TextDrawShowForPlayer(playerid, DamageTxTInfo[DAMAGE_TXT_SNIPER][dTxt][1]);
		    }
		    case WEAPON_ROCKETLAUNCHER:
		    {
		        TextDrawShowForPlayer(playerid, DamageTxTInfo[DAMAGE_TXT_LAUNCHER][dTxt][0]);
	    		TextDrawShowForPlayer(playerid, DamageTxTInfo[DAMAGE_TXT_LAUNCHER][dTxt][1]);
		    }
		    default:
		    {
		        TextDrawShowForPlayer(playerid, DamageTxTInfo[DAMAGE_TXT_NORMAL][dTxt][0]);
	    		TextDrawShowForPlayer(playerid, DamageTxTInfo[DAMAGE_TXT_NORMAL][dTxt][1]);
		    }
		}
	}
	PlayerInfo[playerid][DamageTextTimer] = SetTimerEx("HideDamageText", 400, false, "i", playerid);
	return 1;
}
forward HideDamageText(playerid);
public HideDamageText(playerid)
{
    PlayerInfo[playerid][DamageTextTimer] = -1;
    forLoop(id, DAMAGE_TXT_MAX)
    {
    	TextDrawHideForPlayer(playerid, DamageTxTInfo[id][dTxt][0]);
    	TextDrawHideForPlayer(playerid, DamageTxTInfo[id][dTxt][1]);
	}
}
stock FixDeathScores(playerid,killerid)
{
	if(PlayerInfo[playerid][PlayerMode] == TRP)
    {
        RPPlayerInfo[playerid][FirstTime] = 2;
        RPCreateDeadBody(playerid);
    }
	if(PlayerInfo[playerid][PlayerMode] == STUNT)
    {
		PlayerInfo[playerid][Spree] = 0;
        GiveThePlayerMoney(playerid, -10);
		CalculatekSpree(PlayerInfo[playerid][PlayerMode]);
		if(IsPlayerConnected(killerid) && PlayerInfo[killerid][PlayerMode] == STUNT)
		{
		    GiveThePlayerMoney(killerid, 30);
		}
    }
    if(PlayerInfo[playerid][PlayerMode] == CTF)
    {
        CTFPlayerInfo[playerid][Deaths] ++;
		PlayerInfo[playerid][Spree] = 0;
		ChangeModeScore(playerid, -2);
        if(CTFPlayerInfo[playerid][Capturing] == 1)PlaceFlagAtPlayerPos(playerid);

		if(IsPlayerConnected(killerid) && PlayerInfo[killerid][PlayerMode] == CTF)
		{
		    CTFPlayerInfo[killerid][Kills]++;
			PlayerInfo[killerid][Spree]++;
			ChangeModeScore(killerid, 2);
		}
		CalculatekSpree(PlayerInfo[playerid][PlayerMode]);
    }
    if(PlayerInfo[playerid][PlayerMode] == VW)
    {
        VWPlayerInfo[playerid][Deployed] = 0;
        VWPlayerInfo[playerid][Deaths] ++;
		PlayerInfo[playerid][Spree] = 0;

		if(IsPlayerConnected(killerid) && PlayerInfo[killerid][PlayerMode] == VW)
		{
		    VWPlayerInfo[killerid][Kills]++;
			PlayerInfo[killerid][Spree]++;
			//ChangeModeScore(killerid, 2);
			VWGiveScore(killerid, 4, "Kill");
			//VWKillCamera(playerid, killerid);
		}
		CalculatekSpree(PlayerInfo[playerid][PlayerMode]);
    }
    if(PlayerInfo[playerid][PlayerMode] == GK)
    {
        GKPlayerInfo[playerid][Deaths] ++;
		PlayerInfo[playerid][Spree] = 0;
		ChangeModeScore(playerid, -2);

		if(IsPlayerConnected(killerid) && PlayerInfo[killerid][PlayerMode] == GK)
		{
		    GKPlayerInfo[killerid][Kills]++;
			PlayerInfo[killerid][Spree]++;
		    GiveThePlayerMoney(killerid,400);
		    GiveThePlayerMoney(playerid,-400);
			ChangeModeScore(killerid, 2);
		}
		CalculatekSpree(PlayerInfo[playerid][PlayerMode]);
    }
    if(PlayerInfo[playerid][PlayerMode] == ZO)
    {
        ZOPlayerInfo[playerid][Deaths] ++;
		PlayerInfo[playerid][Spree] = 0;
		ChangeModeScore(playerid, -2);
        if(PlayerInfo[playerid][pTeam] == HUMAN) PlayerInfo[playerid][pTeam] = ZOMBIE;

		if(IsPlayerConnected(killerid) && PlayerInfo[killerid][PlayerMode] == ZO)
		{
		    ZOPlayerInfo[killerid][Kills]++;
			PlayerInfo[killerid][Spree]++;
		    GiveThePlayerMoney(killerid,400);
		    GiveThePlayerMoney(playerid,-400);
			ChangeModeScore(killerid, 2);
		}
		CalculatekSpree(PlayerInfo[playerid][PlayerMode]);
    }
    if(PlayerInfo[playerid][PlayerMode] == CO)
    {
        COPlayerInfo[playerid][Deaths] ++;
		ChangeModeScore(playerid, -2);
		PlayerInfo[playerid][Spree] = 0;
        if(PlayerInfo[playerid][pTeam] == CRIMINAL) COPlayerInfo[playerid][InJail] = 1;

		if(IsPlayerConnected(killerid) && PlayerInfo[killerid][PlayerMode] == CO)
		{
		    COPlayerInfo[killerid][Kills]++;
			PlayerInfo[killerid][Spree]++;
		    GiveThePlayerMoney(killerid,400);
		    GiveThePlayerMoney(playerid,-400);
			ChangeModeScore(killerid, 2);
			UpgradeCORanks(killerid);
		}
		CalculatekSpree(PlayerInfo[playerid][PlayerMode]);
    }
    if(PlayerInfo[playerid][PlayerMode] == TL)
    {
        TLPlayerInfo[playerid][Deaths] ++;
		ChangeModeScore(playerid, -2);
		PlayerInfo[playerid][Spree] = 0;
		if(IsPlayerConnected(killerid) && PlayerInfo[killerid][PlayerMode] == TL)
		{
		    TLPlayerInfo[killerid][Kills]++;
			PlayerInfo[killerid][Spree]++;
			ChangeModeScore(killerid, 2);
		}
		CalculatekSpree(PlayerInfo[playerid][PlayerMode]);
    }
    if(PlayerInfo[playerid][PlayerMode] == FFA)
    {
        FFAPlayerInfo[playerid][Deaths] ++;
        GiveThePlayerMoney(playerid,-100);
		ChangeModeScore(playerid, -2);
		PlayerInfo[playerid][Spree]=0;
		if(IsPlayerConnected(killerid) && PlayerInfo[killerid][PlayerMode] == FFA)
		{
		    FFAPlayerInfo[killerid][Kills]++;
			PlayerInfo[killerid][Spree]++;
		    GiveThePlayerMoney(killerid,400);
		    GiveThePlayerMoney(playerid,-300);
			UpgradeFFARanks(killerid);
			ChangeModeScore(killerid, 2);
		}
		CalculatekSpree(PlayerInfo[playerid][PlayerMode]);
    }
    if(PlayerInfo[playerid][PlayerMode] == PTP)
	{
  		PTPPlayerInfo[playerid][Deaths]++;
		ChangeModeScore(playerid, -2);
		PlayerInfo[playerid][Spree]=0;
    	if(IsPlayerConnected(killerid) && PlayerInfo[killerid][PlayerMode] == PTP)
		{
			PTPPlayerInfo[killerid][Kills]++;
			ChangeModeScore(killerid, 2);
	 		GiveThePlayerMoney(playerid, -200);
	 		GiveThePlayerMoney(killerid, 200);
			PlayerInfo[killerid][Spree]++;
		    UpgradePTPRanks(killerid);
		}
		CalculatekSpree(PlayerInfo[playerid][PlayerMode]);
	    if(PTPPlayerInfo[playerid][Class] == PRESIDENT && PlayerInfo[playerid][Spawned] == 1)
		{
			new str[226];
			if(!IsPlayerConnected(killerid))
			{
				format(str, sizeof(str), "[NEWS] President %s has died!", PlayerInfo[playerid][Name]);
				db_SaveChat(-1, PTP,str);
				format(str, sizeof(str), "{33FF33}NEWS:{FFFFFF} President{FF9900} %s {FFFFFF}has died!", PlayerInfo[playerid][Name]);
			}
			else
			{
				format(str, sizeof(str), "[NEWS] President %s has been assasinated by %s!", PlayerInfo[playerid][Name],PlayerInfo[killerid][Name]);
				db_SaveChat(-1, PTP,str);
			 	format(str, sizeof(str), "{33FF33}NEWS:{FFFFFF} President {FF9900}%s {FFFFFF}has been assasinated by %s(+50 score & +$20,000)!", PlayerInfo[playerid][Name],PlayerInfo[killerid][Name]);
			  	PTPPlayerInfo[killerid][LeadersKilled]++;
			  	GiveThePlayerMoney(killerid, 20000);
				ChangeModeScore(killerid, 50);
		  	}
		  	SendMessageToMode(PTP,COLOR_WHITE, str);
			PTPPlayerInfo[playerid][Class] = CIVILIAN;
		  	if(ClassCountPTP(VICE) != 0)PTPPresidentDies(playerid);
			else
			{
				SendMessageToMode(PTP,COLOR_WHITE, "{33FF33}NEWS:{FFFFFF} There is no one to replace him.");
				format(str, sizeof(str), "[NEWS] There is no one to replace him.!");
				db_SaveChat(-1, PTP,str);
				EndPTPRound(BAD);
			}
	        PTPPlayerInfo[playerid][AlreadyLeader] = 900;
		}
	}
    if(PlayerInfo[playerid][PlayerMode] == TW)
	{
  		TWPlayerInfo[playerid][Deaths]++;
		ChangeModeScore(playerid, -2);
		PlayerInfo[playerid][Spree]=0;
    	if(IsPlayerConnected(killerid) && PlayerInfo[killerid][PlayerMode] == TW)
		{
			TWPlayerInfo[killerid][Kills]++;
			ChangeModeScore(killerid, 2);
	 		GiveThePlayerMoney(playerid, -200);
	 		GiveThePlayerMoney(killerid, 200);
			PlayerInfo[killerid][Spree]++;
		    Ranks(killerid);
		}
		CalculatekSpree(PlayerInfo[playerid][PlayerMode]);
	    if(TWPlayerInfo[playerid][Class] == LEADER && PlayerInfo[playerid][Spawned] == 1)
		{
			new str[226];
			if(!IsPlayerConnected(killerid))
			{
				format(str, sizeof(str), "[WAR NEWS] The %s %s has died!",CountryClassNames[TWPlayerInfo[playerid][Country]][TWPlayerInfo[playerid][Class]], PlayerInfo[playerid][Name]);
				db_SaveChat(-1, TW,str);
				format(str, sizeof(str), "{33FF33}WAR NEWS:{FFFFFF} The {FF9900}%s %s {FFFFFF}has died!",CountryClassNames[TWPlayerInfo[playerid][Country]][TWPlayerInfo[playerid][Class]], PlayerInfo[playerid][Name]);
			}
			else
			{
				format(str, sizeof(str), "[WAR NEWS] The %s %s has been assasinated by %s!",CountryClassNames[TWPlayerInfo[playerid][Country]][TWPlayerInfo[playerid][Class]], PlayerInfo[playerid][Name],PlayerInfo[killerid][Name]);
				db_SaveChat(-1, TW,str);
			 	format(str, sizeof(str), "{33FF33}WAR NEWS:{FFFFFF} The {FF9900}%s %s {FFFFFF}has been assasinated by %s!",CountryClassNames[TWPlayerInfo[playerid][Country]][TWPlayerInfo[playerid][Class]], PlayerInfo[playerid][Name],PlayerInfo[killerid][Name]);
			  	RefoundKiller(killerid);
		  	}
		  	SendMessageToMode(TW,COLOR_WHITE, str);
			TWPlayerInfo[playerid][Class] = SOLDIER;
		  	if(PlayerCountryViceLeaderCount(playerid) != 0)ViceLeaderDies(playerid);
			else
			{
				SendMessageToMode(TW,COLOR_WHITE, "{33FF33}WAR NEWS:{FFFFFF} There is no one to replace him.");
				format(str, sizeof(str), "[WAR NEWS] There is no one to replace him.!");
				db_SaveChat(-1, TW,str);
				LeaderBarState();
			}
	        TWPlayerInfo[playerid][AlreadyLeader] = 900;
			PowerTakesOver();
			BodyGuardLeaderDies(playerid);
		}
	}
	//printf("DEBUG CFONTROL FixDeathScores 2");
}
stock ReturnDeathReason(killerid,reason)
{
	//printf("DEBUG CFONTROL ReturnDeathReason 1");
	new deathreason[70];
    switch (reason)
	{
	    case 0:
		{
			format(deathreason, sizeof(deathreason), "Fists");
			if(IsPlayerConnected(killerid))
			{
				if(PlayerInfo[killerid][PlayerMode] == ZO && PlayerInfo[killerid][pTeam] == ZOMBIE)
					format(deathreason, sizeof(deathreason), "Infected");
			}
		}
        case 1: format(deathreason, sizeof(deathreason), "Brass Knuckles");
        case 2: format(deathreason, sizeof(deathreason), "Golf Stick");
        case 3: format(deathreason, sizeof(deathreason), "Nite Stick");
        case 4: format(deathreason, sizeof(deathreason), "Knife");
        case 5: format(deathreason, sizeof(deathreason), "Baseball Bat");
        case 6: format(deathreason, sizeof(deathreason), "Shovel");
        case 7: format(deathreason, sizeof(deathreason), "Pool Cue");
        case 8: format(deathreason, sizeof(deathreason), "Katana");
        case 9: format(deathreason, sizeof(deathreason), "Chainsaw");
        case 10: format(deathreason, sizeof(deathreason), "Dildo");
        case 11: format(deathreason, sizeof(deathreason), "Small Vibrator");
        case 12: format(deathreason, sizeof(deathreason), "Large Vibrator");
        case 13: format(deathreason, sizeof(deathreason), "Vibrator");
        case 14: format(deathreason, sizeof(deathreason), "Flowers");
        case 15: format(deathreason, sizeof(deathreason), "Cane");
        case 16: format(deathreason, sizeof(deathreason), "Grenade");
        case 17: format(deathreason, sizeof(deathreason), "Smoke Grenade");
        case 18: format(deathreason, sizeof(deathreason), "Molotov Cocktail");
        case 19: format(deathreason, sizeof(deathreason), "Vehicle Weapon");
        case 20: format(deathreason, sizeof(deathreason), "Hydra Flare");
        case 21: format(deathreason, sizeof(deathreason), "Jetpack");
        case 22: format(deathreason, sizeof(deathreason), "9mm Pistol");
        case 23: format(deathreason, sizeof(deathreason), "Silenced 9mm Pistol");
        case 24: format(deathreason, sizeof(deathreason), "Desert Eagle");
        case 25: format(deathreason, sizeof(deathreason), "Shotgun");
        case 26: format(deathreason, sizeof(deathreason), "Sawnoff Shotgun");
        case 27: format(deathreason, sizeof(deathreason), "Combat Shotgun");
        case 28: format(deathreason, sizeof(deathreason), "Micro SMG");
        case 29: format(deathreason, sizeof(deathreason), "MP5");
        case 30: format(deathreason, sizeof(deathreason), "AK47");
        case 31:
		{
	 		if(IsPlayerConnected(killerid) && IsPlayerInAnyVehicle(killerid))
			{
			    format(deathreason, sizeof(deathreason), "M4");
				new carid=GetVehicleModel(GetPlayerVehicleID(killerid));
	            if(carid == 476)
	            {
	                format(deathreason, sizeof(deathreason), "Rustler Machinegun");
		    	}
		    	if(carid == 447)
	            {
	                format(deathreason, sizeof(deathreason), "Seasparrow Machinegun");
		    	}
		    	if(carid == 430)
	            {
	                format(deathreason, sizeof(deathreason), "Predator Machinegun");
		    	}
	    	}
	    	else format(deathreason, sizeof(deathreason), "M4");
	 	}
        case 32: format(deathreason, sizeof(deathreason), "Tec-9");
        case 33: format(deathreason, sizeof(deathreason), "Rifle");
        case 34: format(deathreason, sizeof(deathreason), "Sniper Rifle");
        case 35: format(deathreason, sizeof(deathreason), "Rocket Launcher");
        case 36: format(deathreason, sizeof(deathreason), "Heat Seeker");
        case 37:
        {
		    if(IsPlayerConnected(killerid))
			{
			    format(deathreason, sizeof(deathreason), "Fire");
				if(GetPlayerWeapon(killerid) == WEAPON_FLAMETHROWER)
		        {
	                format(deathreason, sizeof(deathreason), "Flamethrower");
		    	}
		    	else if(GetPlayerWeapon(killerid) == WEAPON_MOLTOV)
		    	{
		    	    format(deathreason, sizeof(deathreason), "Molotov Cocktail");
		    	}
	    	}
	    	else format(deathreason, sizeof(deathreason), "Fire");
		}
        case 38:
		{
		    if(IsPlayerConnected(killerid) && IsPlayerInAnyVehicle(killerid))
			{
			    format(deathreason, sizeof(deathreason), "Minigun");
				new carid=GetVehicleModel(GetPlayerVehicleID(killerid));
	            if(carid == 425)
	            {
	                format(deathreason, sizeof(deathreason), "Hunter Machinegun");
		    	}
	    	}
	    	else format(deathreason, sizeof(deathreason), "Minigun");
		}
        case 39: format(deathreason, sizeof(deathreason), "Satchels");
        case 40: format(deathreason, sizeof(deathreason), "Detonator");
        case 41: format(deathreason, sizeof(deathreason), "Spraycan");
        case 42: format(deathreason, sizeof(deathreason), "Fire Extinguisher");
        case 43: format(deathreason, sizeof(deathreason), "Camera");
        case 44: format(deathreason, sizeof(deathreason), "Nightvision Goggles");
        case 45: format(deathreason, sizeof(deathreason), "Infrared Goggles");
        case 46: format(deathreason, sizeof(deathreason), "Parachute");
        case 47: format(deathreason, sizeof(deathreason), "Fake Pistol");
        case 48: format(deathreason, sizeof(deathreason), "Unknown");

        case 49:
		{
            format(deathreason, sizeof(deathreason), "Car Ram");
	    }
        case 50:
		{
		    if(IsPlayerConnected(killerid) && IsPlayerInAnyVehicle(killerid))
			{
				new carid=GetVehicleModel(GetPlayerVehicleID(killerid));
	            if(carid == 417 || carid == 425 || carid == 447 || carid == 469 || carid == 487 || carid == 488 || carid == 497 || carid == 548 ||
				 carid == 563)
	            {
	                format(deathreason, sizeof(deathreason), "Heli Blade");
		    	}
		    	else
		    	{
		    	    if(GetPlayerWeapon(killerid) != 32 || GetPlayerWeapon(killerid) != 28 || GetPlayerWeapon(killerid) != 29)
		    	    {
		    			format(deathreason, sizeof(deathreason), "Car Park");
		    		}
		    		else
		    		{
		    			format(deathreason, sizeof(deathreason), "Drive By Shooting");
		    		}
		    	}
	    	}
	    	else format(deathreason, sizeof(deathreason), "Heli Blade");
	    }
        case 51:
		{
			if(IsPlayerConnected(killerid))
			{
			    format(deathreason, sizeof(deathreason), "Explosion");
				if(IsPlayerInAnyVehicle(killerid))
				{
				    format(deathreason, sizeof(deathreason), "Explosion");

					new carid=GetVehicleModel(GetPlayerVehicleID(killerid));
		            if(carid == 520)
		            {
		                format(deathreason, sizeof(deathreason), "Hydra Missle");
			    	}
    				if(carid == 425)
		            {
		                format(deathreason, sizeof(deathreason), "Hunter Missle");
			    	}
			    	if(carid == 432)
		            {
		                format(deathreason, sizeof(deathreason), "Tank Shell");
			    	}
		    	}
		    	if(!IsPlayerInAnyVehicle(killerid))
		    	{
		    	    if(GetPlayerWeapon(killerid) == WEAPON_ROCKETLAUNCHER)
         				format(deathreason, sizeof(deathreason), "Rocket Launcher");
                    if(GetPlayerWeapon(killerid) == WEAPON_GRENADE)
         				format(deathreason, sizeof(deathreason), "Grenade");
				}

			}
	    	else format(deathreason, sizeof(deathreason), "Explosion");
		}
        case 52: format(deathreason, sizeof(deathreason), "Unknown");
        case 53: format(deathreason, sizeof(deathreason), "Drowned");
        case 54: format(deathreason, sizeof(deathreason), "Splat");
        case 55: format(deathreason, sizeof(deathreason), "Unknown");
        case 56: format(deathreason, sizeof(deathreason), "Gas Bomb");
        case 57: format(deathreason, sizeof(deathreason), "Mine");
        case 58: format(deathreason, sizeof(deathreason), "Nuke");
        case 59: format(deathreason, sizeof(deathreason), "Poison");
        case 60: format(deathreason, sizeof(deathreason), "Plane bomb");
        case 255: format(deathreason, sizeof(deathreason), "Unknown");
    }
	//printf("DEBUG CFONTROL ReturnDeathReason 2");
    return deathreason;
}
stock DMPJDeathDisconnect(playerid, reason, ereason)
{
    if(PlayerInfo[playerid][PlayerMode] == DM && DMMAPInfo[dStarted] == 1 && DMPlayerInfo[playerid][Alive] == 1 && PlayerInfo[playerid][Spawned] == 1)
	{
	    DMMapDisqualifyPlayer(playerid,reason,ereason);
	}
	if(PlayerInfo[playerid][PlayerMode] == PJ && PJMAPInfo[dStarted] == 1 && PJPlayerInfo[playerid][Alive] == 1 && PlayerInfo[playerid][Spawned] == 1)
	{
	    PJMapDisqualifyPlayer(playerid,reason,ereason);
	}
}
stock OtherDeathDisconnect(playerid,reason,ereason)
{
	forLoop(x, MAX_PLAYERS)
	{
	    if(GetPlayerState(x) == PLAYER_STATE_SPECTATING && PlayerInfo[x][Level] > 0 && PlayerInfo[x][SpecID] == playerid) {
	       AdvanceSpectate(x);
		}
	}
	if(PlayerInfo[playerid][HasSelectedVeh] == 0)CarDeleter(PlayerInfo[playerid][cSelVeh]);
    DMPJDeathDisconnect(playerid, reason, ereason);

	if(PlayerInfo[playerid][PlayerMode] == FFA)
	{
	    FFACheckGangZoneCount(playerid, false);
	}
    if(PlayerInfo[playerid][PlayerMode] == GK)
    {
        GKDropCase(playerid);
    }
	if(PlayerInfo[playerid][PlayerMode] == CO)
	{
	    if(PlayerInfo[playerid][EnteredZone] == COInfo[AreaID])
	    {
	        PlayerInfo[playerid][EnteredZone] = -1;
	 		COInfo[BeingReleased]=0;
 			GameTextForPlayer(playerid," ",1000,6);
	 		new str[126];
        	format(str,126,"{33FF33}NEWS:{FFFFFF} %s failed to release the prisoners!",PlayerInfo[playerid][Name]);
        	SendMessageToMode(CO,white, str);
			format(str, sizeof(str), "[NEWS] %s failed to release the prisoners!",PlayerInfo[playerid][Name]);
			db_SaveChat(-1, CO,str);
			PlayerInfo[playerid][lCountDown]=-1;
	    }
	}

	if(PlayerInfo[playerid][PlayerMode] == PTP)
	{
  		if(reason == 0)
		{
   			if(PTPPlayerInfo[playerid][Class] == PRESIDENT && PlayerInfo[playerid][Spawned] == 1)
			{
				new str[226];
				format(str, sizeof(str), "{33FF33}NEWS:{FFFFFF} President {FF9900} %s{FFFFFF} has disconnected!", PlayerInfo[playerid][Name]);
			  	SendMessageToMode(PTP,COLOR_WHITE, str);
			  	format(str, sizeof(str), "[NEWS] President %s has disconnected!", PlayerInfo[playerid][Name]);
				db_SaveChat(-1, PTP,str);
				PTPPlayerInfo[playerid][Class] = CIVILIAN;
		  		if(ClassCountPTP(VICE) != 0)PTPPresidentDies(playerid);
				else
				{
					SendMessageToMode(PTP,COLOR_WHITE, "{33FF33}NEWS:{FFFFFF} There is no one to replace him.");
					format(str, sizeof(str), "[NEWS] There is no one to replace him.!");
					db_SaveChat(-1, PTP,str);
					EndPTPRound(BAD);
				}
		        PTPPlayerInfo[playerid][AlreadyLeader] = 900;
			}
			if(PTPPlayerInfo[playerid][Class] == VICE && PlayerInfo[playerid][Spawned] == 1)
			{
				new str[226];
				format(str, sizeof(str), "{33FF33}NEWS:{FFFFFF} Vice president {FF9900} %s{FFFFFF} has disconnected!", PlayerInfo[playerid][Name]);
	  			SendMessageToMode(PTP,COLOR_WHITE, str);
			  	format(str, sizeof(str), "[NEWS] Vice president %s has disconnected!", PlayerInfo[playerid][Name]);
				db_SaveChat(-1, PTP,str);
			}
		}
	}

	if(PlayerInfo[playerid][PlayerMode] == TW)
	{
	    forLoop(id, MAX_TW_ZONES)
		{
			if(TWZoneInfo[id][Exists] == 1 && PlayerInfo[playerid][EnteredZone] == TWZoneInfo[id][AreaID])
			{
		  		TWZoneInfo[id][BeingCaptured] = 0;
				PlayerInfo[playerid][EnteredZone] = -1;
				PlayerInfo[playerid][lCountDown]=-1;
				GameTextForPlayer(playerid," ",1000,6);

				new str[126];
				if(PlayerInfo[playerid][PlayerMode] == TW)
				{
				    if(TWZoneInfo[id][OriginalTeam] == PlayerInfo[playerid][pTeam])
					{
                    	format(str,sizeof(str),"{33FF33}WAR NEWS:{FFFFFF} {FF9900}%s,{%s} %s %s {FFFFFF}failed to release the {FF9900}%s!",PlayerInfo[playerid][Name],CountryChatColor[TWPlayerInfo[playerid][Country]],caCountryNames[TWPlayerInfo[playerid][Country]],ClassNames[TWPlayerInfo[playerid][Class]],TWZoneInfo[id][zName]);
		            	SendMessageToMode(TW,white,str);
						format(str, sizeof(str), "[WAR NEWS] %s, %s %s failed to release the %s!",PlayerInfo[playerid][Name],caCountryNames[TWPlayerInfo[playerid][Country]],ClassNames[TWPlayerInfo[playerid][Class]],TWZoneInfo[id][zName]);
						db_SaveChat(-1, TW,str);
					}
					else if(TWZoneInfo[id][OriginalTeam] != PlayerInfo[playerid][pTeam])
					{
						format(str,sizeof(str),"{33FF33}WAR NEWS:{FFFFFF} {FF9900}%s,{%s} %s %s {FFFFFF}failed to take over the {FF9900}%s!",PlayerInfo[playerid][Name],CountryChatColor[TWPlayerInfo[playerid][Country]],caCountryNames[TWPlayerInfo[playerid][Country]],ClassNames[TWPlayerInfo[playerid][Class]],TWZoneInfo[id][zName]);
		            	SendMessageToMode(TW,white,str);
						format(str, sizeof(str), "[WAR NEWS] %s, %s %s failed to take over the %s!",PlayerInfo[playerid][Name],caCountryNames[TWPlayerInfo[playerid][Country]],ClassNames[TWPlayerInfo[playerid][Class]],TWZoneInfo[id][zName]);
						db_SaveChat(-1, TW,str);
					}
					DisablePlayerCheckpoint(playerid);
					GangZoneStopFlashFor(TW,TWZoneInfo[id][gZone]);
				}
	        	break;
			}
		}
	    if(TWPlayerInfo[playerid][Class] == ENGINEER)
       	{
       	    TWPlayerBomb[playerid][bPlanting] = 0;
			TWPlayerBomb[playerid][bDefusing] = 0;
			TWPlayerBomb[playerid][rRepairing] = 0;
       	}
	    if(TWPlayerInfo[playerid][Class] == MEDIC)
	    {
		    if(TWPlayerInfo[playerid][Healing] > -1)
			{
			    TWPlayerInfo[TWPlayerInfo[playerid][Healing]][pHealing] = -1;
				TWPlayerInfo[playerid][Healing] = -1;
			}
		}
  		if(TWPlayerInfo[playerid][pHealing] > -1)
		{
			TWPlayerInfo[TWPlayerInfo[playerid][pHealing]][Healing] = -1;
			TWPlayerInfo[playerid][pHealing] = -1;
		}
  		if(reason == 0)
		{
			if(TWPlayerInfo[playerid][Class] == LEADER && PlayerInfo[playerid][Spawned] == 1)
			{
				new str[226];
				format(str, sizeof(str), "{33FF33}WAR NEWS:{FFFFFF} The {FF9900}%s %s{FFFFFF} has disconnected!",CountryClassNames[TWPlayerInfo[playerid][Country]][TWPlayerInfo[playerid][Class]], PlayerInfo[playerid][Name]);
			  	SendMessageToMode(TW,COLOR_WHITE, str);
			  	format(str, sizeof(str), "[WAR NEWS] The %s %s has disconnected!",CountryClassNames[TWPlayerInfo[playerid][Country]][TWPlayerInfo[playerid][Class]], PlayerInfo[playerid][Name]);
				db_SaveChat(-1, TW,str);
				TWPlayerInfo[playerid][Class] = SOLDIER;
				if(PlayerCountryViceLeaderCount(playerid) != 0)ViceLeaderDisconnects(playerid);
				else
				{
					SendMessageToMode(TW,COLOR_WHITE, "{33FF33}WAR NEWS:{FFFFFF} There is no one to replace him.");
					format(str, sizeof(str), "[WAR NEWS] There is no one to replace him.!");
					db_SaveChat(-1, TW,str);
					LeaderBarState();
				}
				TWPlayerInfo[playerid][AlreadyLeader] = 900;
				PowerTakesOver();
				BodyGuardLeaderDisconnects(playerid);
			}
			if(TWPlayerInfo[playerid][Class] == VICE && PlayerInfo[playerid][Spawned] == 1)
			{
				new str[226];
				format(str, sizeof(str), "{33FF33}WAR NEWS:{FFFFFF} The {FF9900}%s %s{FFFFFF} has disconnected!",CountryClassNames[TWPlayerInfo[playerid][Country]][TWPlayerInfo[playerid][Class]], PlayerInfo[playerid][Name]);
	  			SendMessageToMode(TW,COLOR_WHITE, str);
			  	format(str, sizeof(str), "[WAR NEWS] The %s %s has disconnected!",CountryClassNames[TWPlayerInfo[playerid][Country]][TWPlayerInfo[playerid][Class]], PlayerInfo[playerid][Name]);
				db_SaveChat(-1, TW,str);
			}
 			DestroyAllPlayerTWBombs(playerid);
		}
	}
	if(PlayerInfo[playerid][PlayerMode] == TL)
    {
	    if(PlayerInfo[playerid][EnteredZone] == TLInfo[AreaID])
	    {
	        PlayerInfo[playerid][EnteredZone] = -1;
	 		TLInfo[BeingBombed]=0;
 			GameTextForPlayer(playerid," ",1000,6);
	 		new str[126];
	        format(str,126,"{33FF33}WAR NEWS:{FFFFFF} %s failed to bomb the base!",PlayerInfo[playerid][Name]);
        	SendMessageToMode(TL,white,str);
		  	format(str, sizeof(str), "[WAR NEWS] %s failed to bomb the base!",PlayerInfo[playerid][Name]);
			db_SaveChat(-1, TL,str);
			PlayerInfo[playerid][lCountDown]=-1;
	    }
	    if(reason == 1)
		{
	        if(TLInfo[Map]==OFBRITAIN)
			{
			    if(PlayerInfo[playerid][pTeam] ==AXIS)TLInfo[AllyShips] ++;
				if(PlayerInfo[playerid][pTeam] ==ALLIES)TLInfo[AxisShips] ++;
				new st[90];
				format(st, sizeof(st), "~b~RAF~w~: %d~n~~r~Luftwaffe~w~: %d~n~Time: %s",TLInfo[AllyShips],TLInfo[AxisShips],TimeConvertTL(TLInfo[TimeLeft]));
    			TextDrawSetString(TLInfo[TimeleftTD], st);
			}
			if(TLInfo[Map]==STALINGRAD)
			{
			    if(PlayerInfo[playerid][pTeam] ==AXIS)TLInfo[AllyShips] ++;
				if(PlayerInfo[playerid][pTeam] ==ALLIES)TLInfo[AxisShips] ++;
				new st[90];
				format(st, sizeof(st), "~b~Soviets~w~: %d~n~~r~Nazis~w~: %d~n~Time: %s",TLInfo[AllyShips],TLInfo[AxisShips],TimeConvertTL(TLInfo[TimeLeft]));
				TextDrawSetString(TLInfo[TimeleftTD], st);
			}
			if(TLInfo[Map]==TANKBATTLE)
			{
			    if(PlayerInfo[playerid][pTeam] ==AXIS)TLInfo[AllyShips] ++;
				if(PlayerInfo[playerid][pTeam] ==ALLIES)TLInfo[AxisShips] ++;
				new st[90];
				format(st, sizeof(st), "~b~Brits~w~: %d~n~~r~Nazis~w~: %d~n~Time: %s",TLInfo[AllyShips],TLInfo[AxisShips],TimeConvertTL(TLInfo[TimeLeft]));
     			TextDrawSetString(TLInfo[TimeleftTD], st);
			}
		}
    }
	if(PlayerInfo[playerid][PlayerMode] == CO)
	{
	    if(COPlayerInfo[playerid][Arresting] > -1)
		{
		    COPlayerInfo[COPlayerInfo[playerid][Arresting]][Arresting] = -1;
			COPlayerInfo[playerid][Arresting] = -1;
		}
	}
	if(PlayerInfo[playerid][PlayerMode] == CTF)
	{
	    if(CTFPlayerInfo[playerid][Capturing] == 1)
		{
		    PlaceFlagAtPlayerPos(playerid);
		}
	}
	if(PlayerInfo[playerid][PlayerMode] == STUNT)
	{
	 	if(SFPlayerInfo[playerid][Event] > 0)
	 	{
			QuitEvent(playerid,ereason);
		}
	}
}

public OnVehicleStreamIn(vehicleid, forplayerid)
{
    if(GetVehicleVirtualWorld(vehicleid) == W_TW)
	{
   	    forLoop(v, MAX_ENGI_BOMBS)
   	    {
			if(vehicleid == TWPlayerBomb[forplayerid][bCar][v])
			    SetVehicleParamsForPlayer(vehicleid,forplayerid,1,0);
		}
	}
	return 1;
}

/*public OnPlayerPause(playerid)
{
	if(PlayerInfo[playerid][PlayerMode] == CO)
	{
	    if(PlayerInfo[playerid][EnteredZone] == COInfo[AreaID])
	    {
	        PlayerInfo[playerid][EnteredZone] = -1;
	 		COInfo[BeingReleased]=0;
 			GameTextForPlayer(playerid," ",1000,6);
	 		new str[126];
        	format(str,126,"{33FF33}NEWS:{FFFFFF} %s failed to release the prisoners!",PlayerInfo[playerid][Name]);
        	SendMessageToMode(CO,white, str);
			format(str, sizeof(str), "[NEWS] %s failed to release the prisoners!",PlayerInfo[playerid][Name]);
			db_SaveChat(-1, CO,str);
			PlayerInfo[playerid][lCountDown]=-1;
	    }
	}
	if(PlayerInfo[playerid][PlayerMode] == TL)
    {
	    if(PlayerInfo[playerid][EnteredZone] == TLInfo[AreaID])
	    {
	        PlayerInfo[playerid][EnteredZone] = -1;
	 		TLInfo[BeingBombed]=0;
 			GameTextForPlayer(playerid," ",1000,6);
	 		new str[126];
	        format(str,126,"{33FF33}WAR NEWS:{FFFFFF} %s failed to bomb the base!",PlayerInfo[playerid][Name]);
        	SendMessageToMode(TL,white,str);
		  	format(str, sizeof(str), "[WAR NEWS] %s failed to bomb the base!",PlayerInfo[playerid][Name]);
			db_SaveChat(-1, TL,str);
			PlayerInfo[playerid][lCountDown]=-1;
	    }
    }
	if(PlayerInfo[playerid][PlayerMode] == CTF)
	{
	    if(CTFPlayerInfo[playerid][Capturing] == 1)
		{
		    PlaceFlagAtPlayerPos(playerid);
		}
	}
	return 1;
}*/

public OnVehicleDeath(vehicleid, killerid)
{
	//printf("DEBUG CFONTROL OnVehicleDeath 1 vid %d world %d",vehicleid, GetVehicleVirtualWorld(vehicleid));
    forLoop(i, MAX_PLAYERS)
	{
		if(!IsPlayerConnected(i) || IsPlayerNPC(i))continue;
		if (vehicleid == PlayerInfo[i][InNevada])
		{
			new Float:burnx, Float:burny, Float:burnz;
			GetPlayerPos(i,burnx, burny, burnz);
			CreateExplosionEx(GetPlayerVirtualWorld(i), burnx, burny , burnz, 10.0, 50, 51, true,-1);
		    SetHealth(i, 0.0);
			SendClientMessage(i,red1,"{FF0000}Notice:{FFFFFF} The plane has exploded, and everyone inside has died.");
		    PlayerInfo[i][InNevada]=-1;
		    PlayerInfo[i][InTank] = -1;
		}
		if (vehicleid == PlayerInfo[i][InTank])
		{
			new Float:burnx, Float:burny, Float:burnz;
			GetPlayerPos(i,burnx, burny, burnz);
			CreateExplosionEx(GetPlayerVirtualWorld(i), burnx, burny , burnz, 10.0, 50, 51, true,-1);
		    SetHealth(i, 0.0);
			SendClientMessage(i,red1,"{FF0000}Notice:{FFFFFF} The tank has exploded, and everyone inside has died.");
		    PlayerInfo[i][InTank] = -1;
		    PlayerInfo[i][InNevada]=-1;
		}
	}
	FixTWVehicleFromMine(vehicleid, 0);
	if(GetVehicleVirtualWorld(vehicleid) == W_TW || GetVehicleVirtualWorld(vehicleid) == W_TL)
	{
	    if(GetVehicleModel(vehicleid) == 476 || GetVehicleModel(vehicleid) == 553 || GetVehicleModel(vehicleid) == 513 || GetVehicleModel(vehicleid) == 512 || GetVehicleModel(vehicleid) == 593 || GetVehicleModel(vehicleid) == 511)
		{
	        ShipStatusFromPlane(vehicleid);
		}
	}
	//printf("DEBUG CFONTROL OnVehicleDeath 2 vid %d world %d",vehicleid, GetVehicleVirtualWorld(vehicleid));
	return 1;
}

/*public OnPlayerCrashVehicle(playerid, vehicleid, Float:damage)
{
    if(PlayerInfo[playerid][PlayerMode] == TRP && PlayerInfo[playerid][Spawned] == 1 && !IsVehBicycle(vehicleid))
    {
        if(damage > 100.0)
		{
		    forLoop(i, MAX_PLAYERS)
		    {
		        if(IsPlayerConnected(i) && PlayerInfo[i][PlayerMode] == TRP && PlayerInfo[i][Spawned] == 1 && IsPlayerInAnyVehicle(i) && GetPlayerVehicleID(i) == vehicleid)
		        {
		            OnPlayerTakeDamage(i, INVALID_PLAYER_ID, random(13)+1.0, 0, 0);
		        }
		    }
		}
    }
    return 1;
}*/

public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{
	if(!IsPlayerConnected(playerid) || playerid >= MAX_PLAYERS || playerid < 0) return 0;
    if( hittype != BULLET_HIT_TYPE_NONE ) // Bullet Crashing uses just this hittype
	{
        if( !( -1000.0 <= fX <= 1000.0 ) || !( -1000.0 <= fY <= 1000.0 ) || !( -1000.0 <= fZ <= 1000.0 ) )
		// a valid offset, it's impossible that a offset bigger than 1000 is legit (also less than -1000.0 is impossible,
		//not used by this hack, but still, let's check for it, just for the future, who knows what hacks will appear).
		//The object with biggest offset is having ~700-800 radius.
		{
			/*
				If you want, here you can kick the cheater
			*/
			return 0; // let's desynchronize that bullet, so players won't crash
		}
	}

    if(weaponid != 0 && PlayerInfo[playerid][wCheck] == 0 && !CheckLegalWeapon(playerid, weaponid))
    {
	   	//GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~r~weapsh", 1000, 3);
		return 0;
	}
	if(hittype == BULLET_HIT_TYPE_PLAYER)
	{
	    if(GetPlayerMode(playerid) == GetPlayerMode(hitid) && GetThePlayerTeam(playerid) == GetThePlayerTeam(hitid))
    	{
    	    return 0;
    	}
	   	//ShowDamageText(playerid);
	}
	if(hittype == BULLET_HIT_TYPE_VEHICLE)
	{
	    new pmode = GetPlayerMode(playerid), team = GetThePlayerTeam(playerid),
			driver = GetVehicleDriver(hitid);
	    if(driver != -1)
	    {
		    if(pmode == GetPlayerMode(driver) && team == GetThePlayerTeam(driver))
				return 0;
			else ShowDamageText(playerid);
		}
	   	//GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~r~shaw", 1000, 3);
		//ShowDamageText(playerid);
	}
	return 1;
}

stock GetThePlayerTeam(playerid)
{
	switch(GetPlayerMode(playerid))
	{
		case TRP, STUNT, DM, PJ, MOVIES, GK:
		{
		    return playerid;
		}
		case TW, TL, CTF, VW, CO:
		{
		    return PlayerInfo[playerid][pTeam];
		}
		case PTP:
		{
		    if(PlayerInfo[playerid][pTeam] != NOTEAM)
				return PlayerInfo[playerid][pTeam];
			else return playerid+10;
		}
		case FFA:
		{
		    if(FFAPlayerInfo[playerid][GangID] == 0)
		        return playerid+MAX_FFA_GANGS;
			else
			{
			    if(FFAPlayerInfo[playerid][DisableTK] == 1)
			        return playerid+MAX_FFA_GANGS;
				else return FFAPlayerInfo[playerid][GangID];
			}
		}
		default:return playerid;
	}
	return playerid;
}

stock GetVehicleDriver(vehicleid)
{
	forLoop(u, MAX_PLAYERS)
	{
	    if(IsPlayerConnected(u) && GetPlayerState(u) == PLAYER_STATE_DRIVER && GetPlayerVehicleID(u) == vehicleid)
		{
		    return u;
		}
	}
	return -1;
}

public OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid, bodypart)
{
	if(PlayerInfo[playerid][Spawned] == 1 && issuerid != INVALID_PLAYER_ID)
    {
        if(PlayerInfo[issuerid][PlayerMode] == PlayerInfo[playerid][PlayerMode] && PlayerInfo[issuerid][Spawned] == 1 && GetPlayerTeam(playerid) != GetPlayerTeam(issuerid))
	    {
	        ShowDamageText(issuerid);
	    }
    }
	if(PlayerInfo[playerid][PlayerMode] != TRP && PlayerInfo[playerid][Spawned] == 1 && PlayerInfo[playerid][sProtected] == 0 && PlayerInfo[playerid][God] == 0)
    {
        if(issuerid != INVALID_PLAYER_ID && PlayerInfo[issuerid][PlayerMode] == PlayerInfo[playerid][PlayerMode] && PlayerInfo[issuerid][Spawned] == 1 && GetPlayerTeam(playerid) != GetPlayerTeam(issuerid))
	    {
	        if(bodypart == WEAPON_BODY_PART_HEAD && (weaponid == 33 || weaponid == 34))
	        {
				PlayerInfo[issuerid][HeadShots]++;
				if(PlayerInfo[issuerid][PlayerMode] != VW)
				{
					ChangeModeScore(issuerid, random(70)+2);
	            	GameTextForPlayer(issuerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~r~HEADSHOT", 1000, 3);
				}
				else
					VWGiveScore(issuerid, 50, "Headshot");
					
				GiveThePlayerMoney(issuerid, random(600)+10);
	            SetHealth(playerid, 0.0);
	            GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~r~HEADSHOT", 1000, 3);
		 	}
	    }
    }
    
    if(PlayerInfo[playerid][PlayerMode] == TRP && PlayerInfo[playerid][Spawned] == 1)
    {
	   	new Float:afamount = amount, Float:health;
		GetPlayerHealth(playerid, health);
        if(issuerid != INVALID_PLAYER_ID && PlayerInfo[issuerid][PlayerMode] == TRP)
	    {
			if(bodypart != WEAPON_BODY_PART_HEAD)
			{
				switch(weaponid)
			    {
					case 0: afamount = 5.0;
					case 1: afamount = 8.0;
					case 2: afamount = 10.0;
					case 3: afamount = 10.0;
					case 4: afamount = 12.0;
					case 5: afamount = 13.0;
					case 6: afamount = 10.0;
					case 7: afamount = 10.0;
					case 8: afamount = 20.0;
					case 9: afamount = 25.0;
					case 10: afamount = 50.0;
					case 11: afamount = 20.0;
					case 12: afamount = 25.0;
					case 13: afamount = 25.0;
					case 16: afamount = 70.0;
					case 22: afamount = 25.0;
					case 25: afamount = 35.0;
					case 26: afamount = 30.0;
					case 27: afamount = 35.0;
					case 28: afamount = 15.0;
					case 29: afamount = 25.0;
					case 30: afamount = 25.0;
					case 31: afamount = 30.0;
					case 32: afamount = 15.0;
					case 33: afamount = 35.0;
					case 34: afamount = 50.0;
					default: afamount = amount;
				}
			}
			else afamount = 90.0;
			
			if((bodypart == WEAPON_BODY_PART_RIGHT_LEG || bodypart == WEAPON_BODY_PART_LEFT_LEG) && RPPlayerInfo[playerid][HPState] != RP_BROKEN_LEG)
			{
			    RPPlayerInfo[playerid][HPState] = RP_BROKEN_LEG;
				GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~w~Broken Leg", 5000, 3);
				ApplyAnimation(playerid, "SWEET", "Sweet_injuredloop", 4.0, 0, 0, 0, 0, 0);
			}
	    }
	    else
	    {
	        if(amount > 14.0 && RPPlayerInfo[playerid][HPState] != RP_BROKEN_LEG)
			{
				RPPlayerInfo[playerid][HPState] = RP_BROKEN_LEG;
				GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~w~Broken Leg", 5000, 3);
				ApplyAnimation(playerid, "SWEET", "Sweet_injuredloop", 4.0, 0, 0, 0, 0, 0);
			}
	    }
		RPPlayerInfo[playerid][Health] = health - afamount;
		updateRPStats(playerid);
		if(weaponid != 37)
		{
		    TextDrawShowForPlayer(playerid,RPInfo[DarkScreen]);
		    if(floatround(health - afamount) > 30)
		        SetTimerEx("RPHideBlackScreen", 200, false, "i", playerid);
	    }
    }

    if(issuerid != INVALID_PLAYER_ID)
    {
        if(PlayerInfo[playerid][PlayerMode] == ZO && PlayerInfo[issuerid][PlayerMode] == ZO && PlayerInfo[playerid][Spawned] == 1)
	    {
	        if(PlayerInfo[playerid][pTeam] == HUMAN && PlayerInfo[issuerid][pTeam] == ZOMBIE)
	        {
				new Float:armour, Float:health, Float:afamount = 25.0;
				GetPlayerHealth(playerid, health);
				GetPlayerArmour(playerid, armour);
				if(armour > 0.0)
				{
				    if(armour >= afamount)
				    {
				        SetArmor(playerid, armour - afamount);
				        afamount = 0.0;
				    } else {
				        afamount = afamount - armour;
						SetArmor(playerid, 0.0);
					}
				}
				if(afamount > 0.0)
				{
					if(afamount >= health)
					{
					    SetPVarInt(playerid, "ExpDamager", issuerid+1 );
					    SetPVarInt(playerid, "ExpReason", weaponid);
					    ResetCustomDeathTimer(playerid, 6000);
					    SetHealth(playerid, 0.0);
					}
				    else SetHealth(playerid, health - afamount);
				}
	        }
		}
	}
	GetPlayerArmour(playerid, PlayerInfo[playerid][gArmor]);
	GetPlayerHealth(playerid, PlayerInfo[playerid][gHP]);
	return 1;
}

public OnPlayerPickUpDynamicPickup(playerid, pickupid)
{
	//printf("DEBUG CFONTROL OnPlayerPickUpDynamicPickup 1");
	PlayerPickUpPickup(playerid, pickupid);
	//printf("DEBUG CFONTROL OnPlayerPickUpDynamicPickup 2");
    return 1;
}

stock PlayerPickUpPickup(playerid, pickupid)
{
    if(PlayerInfo[playerid][PlayerMode] == TW)
	{
	    if(pickupid == TWInfo[pAtom])
		{
		    new string[128];
			format(string,sizeof(string),"\nAtomic Bomb    -      %d dollars",TWInfo[AtomPrice]);
			ShowPlayerDialog(playerid,ATOMICMENU, DIALOG_STYLE_LIST,"Atomic bomb", string, "Select", "Cancel");
		}
        for (new y = 0; y < 7; y++)
		{
			if(pickupid == TWInfo[pGetIn][y])
			{
			    if(TWPlayerInfo[playerid][Class] == LEADER && PlayerInfo[playerid][Spawned] == 1 && PlayerInfo[playerid][PlayerMode] == TW)
				{
					new str[226];
					format(str, sizeof(str), "{33FF33}WAR NEWS:{FFFFFF} The {FF9900}%s %s{FFFFFF} went inside the {FF9900}%s{FFFFFF} base!",CountryClassNames[TWPlayerInfo[playerid][Country]][TWPlayerInfo[playerid][Class]], PlayerInfo[playerid][Name], cCountryNames[y]);
				  	SendMessageToMode(TW,COLOR_WHITE, str);
				  	format(str, sizeof(str), "[WAR NEWS] The %s %s went inside the %s base!",CountryClassNames[TWPlayerInfo[playerid][Country]][TWPlayerInfo[playerid][Class]], PlayerInfo[playerid][Name], cCountryNames[y]);
					db_SaveChat(-1, TW,str);
			  	}
			    TWPlayerInfo[playerid][GotInFrom] = y;
				SetPlayerVirtualWorld(playerid,y+4000);
				SetPlayerInterior(playerid,1);
				SetPlayerWorldBounds(playerid, 20000.0000, -20000.0000, 20000.0000, -20000.0000);
				SetPlayerPosEx(playerid,-792.2911,491.9289,1367.3643,4.0);
			}
		}
		forLoop(i, MAX_SUPPLIES)
  		{
  		    if(Supplies[i][Exists] == 1 && Supplies[i][gMode] == TW)
		  	{
			    if(pickupid == Supplies[i][gArmor])SetArmor(playerid,99.0);
			    if(pickupid == Supplies[i][gHP])SetHealth(playerid, 99.0);
			    if(pickupid == Supplies[i][Ak])GiveWeapon(playerid,WEAPON_AK47,50);
				if(pickupid == Supplies[i][Sniper])GiveWeapon(playerid,WEAPON_SNIPER,50);
				if(pickupid == Supplies[i][Deagle])GiveWeapon(playerid,WEAPON_DEAGLE,50);
				if(pickupid == Supplies[i][Grenade])GiveWeapon(playerid,WEAPON_GRENADE,10);
				if(pickupid == Supplies[i][Shotgun])GiveWeapon(playerid,WEAPON_SHOTGUN,50);
			}
	    }
		if(pickupid == TWInfo[pGetOut])
		{
	        if(TWPlayerInfo[playerid][GotInFrom] == ITALY)
		    {
		        if(TWInfo[Map] == NorthernSA)SetPlayerPos(playerid,236.4508,2018.2136,17.8253);
		    	if(TWInfo[Map] == SouthernSA)SetPlayerPos(playerid,-14.1908,101.7527,4.2578);
		    }
		    if(TWPlayerInfo[playerid][GotInFrom] == USA)
		    {
		        if(TWInfo[Map] == NorthernSA)SetPlayerPos(playerid,-30.2740,1016.9291,19.8358);
		    	if(TWInfo[Map] == SouthernSA)SetPlayerPos(playerid,-1140.7908,-973.4166,129.9);
		    }
		    if(TWPlayerInfo[playerid][GotInFrom] == RUSSIA)
		    {
		        if(TWInfo[Map] == NorthernSA)SetPlayerPos(playerid,-1648.5845,2563.5327,84.7249);
		    	if(TWInfo[Map] == SouthernSA)SetPlayerPos(playerid,847.8864,-592.8430,17.9);
		    }
		    if(TWPlayerInfo[playerid][GotInFrom] == GERMANY)
		    {
		        if(TWInfo[Map] == NorthernSA)SetPlayerPos(playerid,268.4044,2635.1611,16.4766);
		    	if(TWInfo[Map] == SouthernSA)SetPlayerPos(playerid,225.1091,83.1824,4.125);
		    }
		    if(TWPlayerInfo[playerid][GotInFrom] == JAPAN)
		    {
		        if(TWInfo[Map] == NorthernSA)SetPlayerPos(playerid,-230.8295,2785.0959,62.1617);
	      		if(TWInfo[Map] == SouthernSA)SetPlayerPos(playerid,-2012.8962,-2425.9709,30.6250);// << WTF! 2012 24-25 30 ?
		    }
		    if(TWPlayerInfo[playerid][GotInFrom] == BALKAN)
		    {
		        if(TWInfo[Map] == NorthernSA)SetPlayerPos(playerid,-366.0243,1533.4468,75.3594);
		    	if(TWInfo[Map] == SouthernSA)SetPlayerPos(playerid,1338.7842,344.9577,19.5);
		    }
		    if(TWPlayerInfo[playerid][GotInFrom] == BRITISH)
		    {
		        if(TWInfo[Map] == NorthernSA)SetPlayerPos(playerid,-756.0033,1627.5045,27.1172);
		    	if(TWInfo[Map] == SouthernSA)SetPlayerPos(playerid,2433.6667,119.4354,26.7);
		    }
		    if(TWPlayerInfo[playerid][Class] == LEADER && PlayerInfo[playerid][Spawned] == 1 && PlayerInfo[playerid][PlayerMode] == TW)
			{
				new str[126];
				format(str, sizeof(str), "{33FF33}WAR NEWS:{FFFFFF} The {%s}%s %s{FFFFFF} went outside the {FF9900}%s{FFFFFF} base!",CountryChatColor[TWPlayerInfo[playerid][Country]],CountryClassNames[TWPlayerInfo[playerid][Country]][TWPlayerInfo[playerid][Class]], PlayerInfo[playerid][Name], cCountryNames[TWPlayerInfo[playerid][GotInFrom]]);
			  	SendMessageToMode(TW,COLOR_WHITE, str);
			  	format(str, sizeof(str), "[WAR NEWS] The %s %s went outside the %s base!",CountryClassNames[TWPlayerInfo[playerid][Country]][TWPlayerInfo[playerid][Class]], PlayerInfo[playerid][Name], cCountryNames[TWPlayerInfo[playerid][GotInFrom]]);
				db_SaveChat(-1, TW,str);
		  	}
		  	if(TWInfo[Map] == NorthernSA)
			  	SetPlayerWorldBounds(playerid, 1251.7374, -3807.9812, 3967.9526, -269.9567);
			SetPlayerVirtualWorld(playerid,W_TW);
			SetPlayerInterior(playerid,0);
		}
	}
	if(PlayerInfo[playerid][PlayerMode] == PTP)
	{
	    if(pickupid == PTPInfo[pRefill])
		{
		    //ResetWeapons(playerid);
	        GivethePTPWeapons(playerid);
		}
		/*if(pickupid == PTPInfo[WeapShop])
		{
		    ShowPlayerDialog(playerid, 20320, DIALOG_STYLE_LIST, "Weapons", "Thrown Weapons\nPistols\nShotguns\nRifles\nHealth and Armour", "Select", "Exit");
		}*/
		if(pickupid == PTPInfo[pArmor])SetArmor(playerid,99.0);
		if(pickupid == PTPInfo[pHP])SetHealth(playerid, 99.0);
	}
	if(PlayerInfo[playerid][PlayerMode] == CO)
	{
	    if(pickupid == COInfo[pRefillCop] || pickupid == COInfo[pRefillCriminal] || pickupid == COInfo[prisonWEAP])
		{
		    //ResetWeapons(playerid);
	        if(PlayerInfo[playerid][pTeam] == COP)
	        {
	            GivePlayerWeapons(playerid,WEAPON_SPRAYCAN,95,WEAPON_DEAGLE,820,WEAPON_NITESTICK,1,WEAPON_M4,1820);
				GivePlayerWeapons(playerid,WEAPON_SHOTGUN,1259,0,0,0,0,0,0);
         	}
			if(PlayerInfo[playerid][pTeam] == CRIMINAL)
	        {
                GivePlayerWeapons(playerid,WEAPON_SHOTGSPA,2459,WEAPON_DEAGLE,1320,WEAPON_SHOVEL,1,WEAPON_AK47,1220);
				GivePlayerWeapons(playerid,WEAPON_MP5,1559,WEAPON_GRENADE,3,0,0,0,0);
         	}
		}
		/*if(pickupid == COInfo[WeapShop])
		{
		    ShowPlayerDialog(playerid, 20320, DIALOG_STYLE_LIST, "Weapons", "Thrown Weapons\nPistols\nShotguns\nRifles\nHealth and Armour", "Select", "Exit");
		}*/
		if(ServerInfo[COBigPrison] == 1)
		{
			if(pickupid == COInfo[pGetIn])GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~w~PRESS ~g~ENTER ~w~TO EXIT", 2000, 3);
			if(pickupid == COInfo[pGetOut])GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~w~PRESS ~g~ENTER ~w~TO ENTER", 2000, 3);
			if(pickupid == COInfo[prisonAR])SetArmor(playerid,99.0);
			if(pickupid == COInfo[prisonHP])SetHealth(playerid, 99.0);
		}
		if(pickupid == COInfo[pArmor])SetArmor(playerid,99.0);
		if(pickupid == COInfo[pHP])SetHealth(playerid, 99.0);
	}
	if(PlayerInfo[playerid][PlayerMode] == GK)
	{
	    if(pickupid == GKInfo[PickUp])GKPickUpCase(playerid);
	    
	    new y = 0;
	    if(pickupid == GKWeaps[y][gArmor])SetArmor(playerid,99.0);
	    if(pickupid == GKWeaps[y][gHP])SetHealth(playerid, 99.0);
	    if(pickupid == GKWeaps[y][Golf])GiveWeapon(playerid,WEAPON_GOLFCLUB,1);
		if(pickupid == GKWeaps[y][Knife])GiveWeapon(playerid,WEAPON_KNIFE,1);
		if(pickupid == GKWeaps[y][NiteStick])GiveWeapon(playerid,WEAPON_NITESTICK,1);
		if(pickupid == GKWeaps[y][Bat])GiveWeapon(playerid,WEAPON_BAT,1);
		if(pickupid == GKWeaps[y][Shovel])GiveWeapon(playerid,WEAPON_SHOVEL,1);
		if(pickupid == GKWeaps[y][Pool])GiveWeapon(playerid,WEAPON_POOLSTICK,1);
		if(pickupid == GKWeaps[y][Katana])GiveWeapon(playerid,WEAPON_KATANA,1);
		if(pickupid == GKWeaps[y][Chainsaw])GiveWeapon(playerid,WEAPON_CHAINSAW,1);
		if(pickupid == GKWeaps[y][Dildo])GiveWeapon(playerid,WEAPON_DILDO,1);
		if(pickupid == GKWeaps[y][Cane])GiveWeapon(playerid,WEAPON_CANE,1);
		if(pickupid == GKWeaps[y][Colt])GiveWeapon(playerid,WEAPON_COLT45,500);
		if(pickupid == GKWeaps[y][Silenced])GiveWeapon(playerid,WEAPON_SILENCED,500);

		if(pickupid == GKWeaps[y][Rocket])GiveWeapon(playerid,WEAPON_ROCKETLAUNCHER,10);
		if(pickupid == GKWeaps[y][M4])GiveWeapon(playerid,WEAPON_M4,500);
		if(pickupid == GKWeaps[y][Ak])GiveWeapon(playerid,WEAPON_AK47,500);
		if(pickupid == GKWeaps[y][Mp5])GiveWeapon(playerid,WEAPON_MP5,500);
		if(pickupid == GKWeaps[y][Sniper])GiveWeapon(playerid,WEAPON_SNIPER,500);
		if(pickupid == GKWeaps[y][Rifle])GiveWeapon(playerid,WEAPON_RIFLE,500);
		if(pickupid == GKWeaps[y][Deagle])GiveWeapon(playerid,WEAPON_DEAGLE,500);
		if(pickupid == GKWeaps[y][UZI])GiveWeapon(playerid,WEAPON_UZI,500);
		if(pickupid == GKWeaps[y][Tec])GiveWeapon(playerid,WEAPON_TEC9,500);
		if(pickupid == GKWeaps[y][Grenade])GiveWeapon(playerid,WEAPON_GRENADE,500);
		if(pickupid == GKWeaps[y][Shotgun])GiveWeapon(playerid,WEAPON_SHOTGUN,500);
		if(pickupid == GKWeaps[y][Sawed])GiveWeapon(playerid,WEAPON_SAWEDOFF,500);
		if(pickupid == GKWeaps[y][Spac])GiveWeapon(playerid,WEAPON_SHOTGSPA,500);
		if(pickupid == GKWeaps[y][Molotov])GiveWeapon(playerid,WEAPON_MOLTOV,500);
    }
	if(PlayerInfo[playerid][PlayerMode] == CTF)
	{
		for (new y = 0; y < 2; y++)
		{
		    if(pickupid == CTFWeaps[y][gArmor])SetArmor(playerid,99.0);
		    if(pickupid == CTFWeaps[y][gHP])SetHealth(playerid, 99.0);
		    if(pickupid == CTFWeaps[y][Golf])GiveWeapon(playerid,WEAPON_GOLFCLUB,1);
			if(pickupid == CTFWeaps[y][Knife])GiveWeapon(playerid,WEAPON_KNIFE,1);
			if(pickupid == CTFWeaps[y][NiteStick])GiveWeapon(playerid,WEAPON_NITESTICK,1);
			if(pickupid == CTFWeaps[y][Bat])GiveWeapon(playerid,WEAPON_BAT,1);
			if(pickupid == CTFWeaps[y][Shovel])GiveWeapon(playerid,WEAPON_SHOVEL,1);
			if(pickupid == CTFWeaps[y][Pool])GiveWeapon(playerid,WEAPON_POOLSTICK,1);
			if(pickupid == CTFWeaps[y][Katana])GiveWeapon(playerid,WEAPON_KATANA,1);
			if(pickupid == CTFWeaps[y][Chainsaw])GiveWeapon(playerid,WEAPON_CHAINSAW,1);
			if(pickupid == CTFWeaps[y][Dildo])GiveWeapon(playerid,WEAPON_DILDO,1);
			if(pickupid == CTFWeaps[y][Cane])GiveWeapon(playerid,WEAPON_CANE,1);
			if(pickupid == CTFWeaps[y][Colt])GiveWeapon(playerid,WEAPON_COLT45,500);
			if(pickupid == CTFWeaps[y][Silenced])GiveWeapon(playerid,WEAPON_SILENCED,500);

			if(pickupid == CTFWeaps[y][Rocket])GiveWeapon(playerid,WEAPON_ROCKETLAUNCHER,10);
			if(pickupid == CTFWeaps[y][M4])GiveWeapon(playerid,WEAPON_M4,500);
			if(pickupid == CTFWeaps[y][Ak])GiveWeapon(playerid,WEAPON_AK47,500);
			if(pickupid == CTFWeaps[y][Mp5])GiveWeapon(playerid,WEAPON_MP5,500);
			if(pickupid == CTFWeaps[y][Sniper])GiveWeapon(playerid,WEAPON_SNIPER,500);
			if(pickupid == CTFWeaps[y][Rifle])GiveWeapon(playerid,WEAPON_RIFLE,500);
			if(pickupid == CTFWeaps[y][Deagle])GiveWeapon(playerid,WEAPON_DEAGLE,500);
			if(pickupid == CTFWeaps[y][UZI])GiveWeapon(playerid,WEAPON_UZI,500);
			if(pickupid == CTFWeaps[y][Tec])GiveWeapon(playerid,WEAPON_TEC9,500);
			if(pickupid == CTFWeaps[y][Grenade])GiveWeapon(playerid,WEAPON_GRENADE,500);
			if(pickupid == CTFWeaps[y][Shotgun])GiveWeapon(playerid,WEAPON_SHOTGUN,500);
			if(pickupid == CTFWeaps[y][Sawed])GiveWeapon(playerid,WEAPON_SAWEDOFF,500);
			if(pickupid == CTFWeaps[y][Spac])GiveWeapon(playerid,WEAPON_SHOTGSPA,500);
			if(pickupid == CTFWeaps[y][Molotov])GiveWeapon(playerid,WEAPON_MOLTOV,500);
	    }
    }
    
    if(PlayerInfo[playerid][PlayerMode] == FFA)
	{
		forLoop(y, MAX_FFA_GANGS_ALL)
		{
		    if(pickupid == GangInfo[y][gArmor]) SetArmor(playerid,99.0);
		    if(pickupid == GangInfo[y][gHP]) SetHealth(playerid, 99.0);
			if(pickupid == GangInfo[y][Rocket])GiveWeapon(playerid,WEAPON_ROCKETLAUNCHER,10);
			if(pickupid == GangInfo[y][M4])GiveWeapon(playerid,WEAPON_M4,500);
			if(pickupid == GangInfo[y][Ak])GiveWeapon(playerid,WEAPON_AK47,500);
			if(pickupid == GangInfo[y][Mp5])GiveWeapon(playerid,WEAPON_MP5,500);
			if(pickupid == GangInfo[y][Sniper])GiveWeapon(playerid,WEAPON_SNIPER,500);
			if(pickupid == GangInfo[y][Rifle])GiveWeapon(playerid,WEAPON_RIFLE,500);
			if(pickupid == GangInfo[y][Deagle])GiveWeapon(playerid,WEAPON_DEAGLE,500);
			if(pickupid == GangInfo[y][UZI])GiveWeapon(playerid,WEAPON_UZI,500);
			if(pickupid == GangInfo[y][Tec])GiveWeapon(playerid,WEAPON_TEC9,500);
			if(pickupid == GangInfo[y][Grenade])GiveWeapon(playerid,WEAPON_GRENADE,500);
			if(pickupid == GangInfo[y][Shotgun])GiveWeapon(playerid,WEAPON_SHOTGUN,500);
			if(pickupid == GangInfo[y][Sawed])GiveWeapon(playerid,WEAPON_SAWEDOFF,500);
			if(pickupid == GangInfo[y][Spac])GiveWeapon(playerid,WEAPON_SHOTGSPA,500);
			if(pickupid == GangInfo[y][Molotov])GiveWeapon(playerid,WEAPON_MOLTOV,500);
	    }
	    for (new y = 0; y < MAX_FFA_TREASURES; y++)
		{
		    if(pickupid == FFAInfo[Treasures][y])
			{
				if(FFAPlayerInfo[playerid][pTreasure][y] == 0)
				{
				    new string[128];
					FFAPlayerInfo[playerid][pTreasure][y] = 1;
				    FFAPlayerInfo[playerid][Treasures]++;
				    GiveThePlayerMoney(playerid,3500);
				    if((MAX_FFA_TREASURES - FFAPlayerInfo[playerid][Treasures]) != 0)
				    {
					    format(string,sizeof(string),"TREASURE:{FFFFFF} %s[%d] has found a treasure, %d left to go!",PlayerInfo[playerid][Name],playerid, (MAX_FFA_TREASURES - FFAPlayerInfo[playerid][Treasures]));
						SendMessageToMode(FFA,red1,string);
						format(string, sizeof(string), "[NEWS] %s[%d] has found a treasure, %d left to go!",PlayerInfo[playerid][Name],playerid, (MAX_FFA_TREASURES - FFAPlayerInfo[playerid][Treasures]));
						db_SaveChat(-1, FFA,string);
						GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~Well done~w~~n~]]~r~treasure found~w~]]", 8000, 3);
					}
					else
					{
						PlayerInfo[playerid][VIP] = 1;
						format(string,sizeof(string),"VIP = %d", PlayerInfo[playerid][VIP]);
						db_UpdateUserTableValue(toStr(PlayerInfo[playerid][ID]), "USERS", string);
			
					    format(string,sizeof(string),"TREASURE:{FFFFFF} %s[%d] has found all the treasures and earned free VIP!",PlayerInfo[playerid][Name],playerid);
						SendMessageToMode(FFA,green1,string);
						format(string, sizeof(string), "[TREASURES] %s has found all the treasures and earned free VIP!",PlayerInfo[playerid][Name],playerid);
						db_SaveChat(-1, FFA,string);
						
						SendClientMessage(playerid,red1,"{00FF00}VIP:{FFFFFF} Use /vipcmds for the available commands.");
						GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~Well done~w~~n~]]~r~All treasures found~w~]]", 8000, 3);
					}
					UpgradeFFARanks(playerid);
					UpdateFFATreasures(playerid);
					PlayAudioStreamForPlayer(playerid, "http://dl.dropbox.com/u/17150100/Gta%20San%20Andreas%20Mission%20Complete%20Sound.mp3");
				}
			}
		}
    }
    if(PlayerInfo[playerid][PlayerMode] == TW)
	{
		for (new y = 0; y != 8; y++)
		{
			if(pickupid == TWInfo[pRefill][y])
				ShowPlayerDialog(playerid,REFILLMENU, DIALOG_STYLE_LIST,"Refill menu", "\nWeapon refill-Picked up weapons will be erased \nPlane bomb refill \nRefill both bombs and weaps", "Select", "Cancel");
		}
		for (new t = 0; t < 3; t++)
		{
			if(pickupid == TWInfo[WeapShop][t])
			{
			    ShowPlayerDialog(playerid, 20320, DIALOG_STYLE_LIST, "Weapons", "Thrown Weapons\nPistols\nShotguns\nRifles\nHealth and Armour\nPlane bombs\nItems", "Select", "Exit");
			}
		}
	}
	if(PlayerInfo[playerid][PlayerMode] == TL)
	{
    	forLoop(i, MAX_SUPPLIES)
  		{
  		    if(Supplies[i][Exists] == 1 && Supplies[i][gMode] == TL)
		  	{
			    if(pickupid == Supplies[i][gArmor])SetArmor(playerid,99.0);
			    if(pickupid == Supplies[i][gHP])SetHealth(playerid, 99.0);
			    if(pickupid == Supplies[i][Ak])GiveWeapon(playerid,WEAPON_AK47,50);
				if(pickupid == Supplies[i][Sniper])GiveWeapon(playerid,WEAPON_SNIPER,50);
				if(pickupid == Supplies[i][Deagle])GiveWeapon(playerid,WEAPON_DEAGLE,50);
				if(pickupid == Supplies[i][Grenade])GiveWeapon(playerid,WEAPON_GRENADE,10);
				if(pickupid == Supplies[i][Shotgun])GiveWeapon(playerid,WEAPON_SHOTGUN,50);
			}
	    }
	}
}
stock TimeConverter(sec)
{
	//printf("DEBUG CFONTROL TimeConverter 1");
    new string[128];
    new hr = floatround(sec / 3600);
	new mins2 = floatround((sec - (hr * 3600))/60);
	sec -= ((hr * 3600) + (mins2 * 60));
    //format(string,sizeof(string),"%d:%d:%d",hr,mins2,sec);

    new strings[5][5];
    if(hr > 9)format(strings[0],5,"%d",hr);
    else format(strings[0],5,"0%d",hr);

    if(mins2 > 9)format(strings[1],5,"%d",mins2);
    else format(strings[1],5,"0%d",mins2);

    if(sec > 9)format(strings[2],5,"%d",sec);
    else format(strings[2],5,"0%d",sec);

    format(string,sizeof(string),"%s:%s:%s",strings[0],strings[1],strings[2]);
	//printf("DEBUG CFONTROL TimeConverter 2");
	return string;
}


forward StartNewGameForPlayer(i);
public StartNewGameForPlayer(i)
{
	//printf("DEBUG CFONTROL StartNewGameForPlayer 1");
	A_SpawnPlayer(i);
	//printf("DEBUG CFONTROL StartNewGameForPlayer 2");
}

stock StartNewGame()
{
	//printf("DEBUG CFONTROL stock StartNewGame 1");
	TWChangeMap();
    TWSettings();
	new str[126];
    forLoop(i, MAX_PLAYERS) if(IsPlayerConnected(i) && !IsPlayerNPC(i) && PlayerInfo[i][PlayerMode] == TW && PlayerInfo[i][Spawned]==1)
	{
		PlayerInfo[i][lCountDown]=-1;
	    GameTextForPlayer(i, "~n~~n~~n~~w~ changing map!", 15000, 3);
	    format(str, sizeof str, "{33FF33}WAR NEWS:{FFFFFF} The powers are now fighting in the %s.",TWMapNames[TWInfo[Map]]);
	    SendClientMessage(i,white,str);
	    DestroyAllPlayerTWBombs(i);
	}
	format(str, sizeof(str), "[WAR NEWS] The powers are now fighting in the %s.",TWMapNames[TWInfo[Map]]);
	db_SaveChat(-1, TW,str);
	//printf("DEBUG CFONTROL stock StartNewGame 2");
}
stock ChangeTheGame()
{
	//printf("DEBUG CFONTROL stock ChangeTheGame 1");
    TWChangeMap();
    TWSettings();
	new str[126];
    forLoop(i, MAX_PLAYERS) if(IsPlayerConnected(i) && !IsPlayerNPC(i) && PlayerInfo[i][PlayerMode] == TW && PlayerInfo[i][Spawned]==1)
	{
	    GameTextForPlayer(i, "~n~~n~~n~~g~ changing map!", 15000, 3);
	    format(str, sizeof str, "{33FF33}WAR NEWS:{FFFFFF} The powers are now fighting in the %s.",TWMapNames[TWInfo[Map]]);
	    SendClientMessage(i,white,str);
	    DestroyAllPlayerTWBombs(i);
	    A_SpawnPlayer(i);
	}
	format(str, sizeof(str), "[WAR NEWS] The powers are now fighting in the %s.",TWMapNames[TWInfo[Map]]);
	db_SaveChat(-1, TW,str);
	//printf("DEBUG CFONTROL stock ChangeTheGame 2");
}


stock SetPlayerPosInNevada(playerid, nevadaid)
{
    //printf("DEBUG CFONTROL SetPlayerPosInNevada 1");
	SetPlayerPosEx(playerid, 2732.6028,-1864.0654,1237.2150,77.1);
	SetPlayerVirtualWorld(playerid, nevadaid +1201);
	SetPlayerInterior(playerid,11);
	PlayerInfo[playerid][InNevada] = nevadaid;
	PlayerInfo[playerid][InTank] = -1;
    //printf("DEBUG CFONTROL SetPlayerPosInNevada 2");
}
stock SetPlayerPosInTank(playerid, nevadaid)
{
    //printf("DEBUG CFONTROL SetPlayerPosInTank 1");
	SetPlayerPosEx(playerid, 2655.8062,-1421.8580,1129.4216,77.1);
	SetPlayerVirtualWorld(playerid, nevadaid +1201);
	SetPlayerInterior(playerid,11);
	SetPlayerWeather(playerid, 2);
	PlayerInfo[playerid][InTank] = nevadaid;
	PlayerInfo[playerid][InNevada] = -1;
    //printf("DEBUG CFONTROL SetPlayerPosInTank 2");
}
stock PlayerToVehicle(playerid, vehicleid, Float:dist)
{
    //printf("DEBUG CFONTROL PlayerToVehicle 1");
	new Float:pos[3];
	GetVehiclePos(vehicleid, pos[0], pos[1], pos[2]);
    //printf("DEBUG CFONTROL PlayerToVehicle 2");
	return IsPlayerInRangeOfPoint(playerid, dist, pos[0], pos[1], pos[2]);
}
stock GetClosestVehicle(playerid)
{
    //printf("DEBUG CFONTROL GetClosestVehicle 1");
	new Float:x, Float:y, Float:z;
	new Float:dist, Float:closedist=9999, closeveh;
	forLoopV(i, 1, MAX_VEHICLES)
	{
		if(GetVehiclePos(i, x, y, z) && GetVehicleVirtualWorld(i) == GetPlayerVirtualWorld(playerid))
		{
			dist = GetPlayerDistanceFromPoint(playerid, x, y, z);
			if(dist < closedist)
			{
				closedist = dist;
				closeveh = i;
			}
		}
	}
    //printf("DEBUG CFONTROL GetClosestVehicle 2");
	return closeveh;
}
stock GetClosestPlayer(playerid)
{
    //printf("DEBUG CFONTROL GetClosestPlayer 1");
	new Float:x, Float:y, Float:z;
	new Float:dist, Float:closedist=9999, closeplayer = -1;
	forLoop(i, MAX_PLAYERS)
	{
		if(IsPlayerConnected(i) && !IsPlayerNPC(i) && i != playerid && GetPlayerMode(i) == GetPlayerMode(playerid) && GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid))
		{
		    GetPlayerPos(i, x, y, z);
			dist = GetPlayerDistanceFromPoint(playerid, x, y, z);
			if(dist < closedist)
			{
				closedist = dist;
				closeplayer = i;
			}
		}
	}
    //printf("DEBUG CFONTROL GetClosestPlayer 2");
	return closeplayer;
}
forward AlreadyLeaderOff(playerid, mode);
public AlreadyLeaderOff(playerid, mode)
{
    //printf("DEBUG CFONTROL AlreadyLeaderOff 1");
    if(mode == TW) TWPlayerInfo[playerid][AlreadyLeader]=0;
    else PTPPlayerInfo[playerid][AlreadyLeader]=0;
	if(GetPlayerMode(playerid) == TW)
		SendClientMessage(playerid,green1, "Notice:{FFFFFF} You can now be elected as a leader again.");
	if(GetPlayerMode(playerid) == PTP)
	    SendClientMessage(playerid,green1, "Notice:{FFFFFF} You can become President again.");
    //printf("DEBUG CFONTROL AlreadyLeaderOff 2");
}
forward AtomicBoughtOff(playerid);
public AtomicBoughtOff(playerid)
{
    //printf("DEBUG CFONTROL AtomicBoughtOff 1");
	TWPlayerInfo[playerid][AtomicBought]=0;
	if(GetPlayerMode(playerid) == TW)
	    SendClientMessage(playerid,green1, "Notice:{FFFFFF} You can now buy an atomic bomb again.");
    //printf("DEBUG CFONTROL AtomicBoughtOff 2");
}
forward TowerFix(i);
public TowerFix(i)
{
	TWPlayerInfo[i][EnteredTower]=0;
	if(GetPlayerMode(i) == TW)
    	SendClientMessage(i, red1, "{33FF33}Notice:{FFFFFF} The AA gun is ready for you.");
}

stock FixBeforeSpawn(playerid)
{
    //printf("DEBUG CFONTROL FixBeforeSpawn 1");
	ResetWeapons(playerid);
	new Float:x1,Float:y1,Float:z1;
	GetPlayerPos(playerid,x1,y1,z1);
	SetPlayerPos(playerid,x1,y1,z1+2);
    //printf("DEBUG CFONTROL FixBeforeSpawn 2");
}

stock CreateExplosionEx(worldid, Float:x, Float:y, Float:z, Float:radius, Float:maxdamage, reason=51, playsound=true,player)
{
	//printf("DEBUG CFONTROL CreateExplosionEx 1");
	new objectid;
	objectid = CreateTheDynamicObject(18682, x, y, z - 2.5, 0.0, 0.0, 0.0,worldid);
	SetTimerEx("DestroyObjectPub", 5000, 0, "i", objectid);

	if(playsound)       //Sound
	{
	    forLoop(i, MAX_PLAYERS)
	    {
			if(IsPlayerConnected(i) && GetPlayerVirtualWorld(i) == worldid)
			{
			    if(IsPlayerInRangeOfPoint(i, 250,x, y, z))
			    {
		    		PlayerPlaySound(i, 1159, x, y, z);
		    		Streamer_Update(i);
				}
	    	}
        }
	}

	if(maxdamage > 0.0 && radius > 0.0)
	{
	    forLoop(i, MAX_PLAYERS)
	    {
			if(IsPlayerConnected(i) && GetPlayerVirtualWorld(i) == worldid && i != player)
			{
				if(IsPlayerInRangeOfPoint(i, radius,x, y, z))
				{
				    PushPlayerEx(i, x, y, z);
					if(!ServerInfo[DisBombTeamKill])DamagePlayer(i, maxdamage, player, reason, x, y, z);
		    		else if(player != -1 && ServerInfo[DisBombTeamKill] && GetPlayerTeam(i) != GetPlayerTeam(player))
						DamagePlayer(i, maxdamage, player, reason, x, y, z);
	    		}
    		}
        }
        if(IsPlayerInRangeOfPoint(player, radius,x, y, z))
		{
        	PushPlayerEx(player, x, y, z);
			DamagePlayer(player, maxdamage, player, reason, x, y, z);
		}
	}
	//printf("DEBUG CFONTROL CreateExplosionEx 2");
}

stock PushPlayerEx(playerid, Float:X, Float:Y, Float:Z)
{
	//printf("DEBUG CFONTROL PushPlayerEx 1");
	new Float:pX, Float:pY, Float:pZ;
    new Float: xp = 0.0, Float: yp = 0.0,
		Float: yz = 0.0, Float: vyz = 0.0;
	GetPlayerPos(playerid, pX, pY, pZ);

	if(floatround(X) == floatround(pX))
	{
	    switch(random(2))
	    {
	    	case 0:xp=0.17;
	    	case 1:xp=-0.17;
		}
	}
	if(floatround(Y) == floatround(pY))
	{
	    switch(random(2))
	    {
	    	case 0:yp=0.17;
	    	case 1:yp=-0.17;
		}
	}
	if(floatround(X) < floatround(pX)) xp=0.17;
	else if(floatround(X) > floatround(pX)) xp=-0.17;

	if(floatround(Y) < floatround(pY)) yp=0.17;
	else if(floatround(Y) > floatround(pY)) yp=-0.17;


    if(floatround(Z) <= floatround(pZ))
    {
        vyz=0.08;
        yz=0.17;
    }
    if(floatround(Z) > floatround(pZ))
    {
        vyz=-0.08;
        yz=-0.17;
    }
	if(GetPlayerState(playerid) == 2)
	{
		GetVehicleVelocity(GetPlayerVehicleID(playerid),pX, pY, pZ);
		SetVehicleVelocity(GetPlayerVehicleID(playerid), pX+xp, pY+yp, pZ+vyz);
	}
	if(GetPlayerState(playerid) == 1)
	{
	    GetPlayerVelocity(playerid, pX, pY, pZ);
		SetPlayerVelocity(playerid,  pX+xp, pY+yp, pZ+yz);
	}
	//printf("DEBUG CFONTROL PushPlayerEx 2");
}

stock DamagePlayer(playerid, Float:amount, damagerid, reason,Float:bx,Float:by,Float:bz)
{
	//printf("DEBUG CFONTROL DamagePlayer 1");
	new Float:armour, Float:health;
    if(IsPlayerInRangeOfPoint(playerid, 5,bx, by, bz))
    {
        if(IsPlayerInAnyVehicle(playerid))
	    {
			SetVehicleHealth(GetPlayerVehicleID(playerid), random(200)+20);
			SetPVarInt(playerid, "ExpDamager", damagerid+1 );
		    SetPVarInt(playerid, "ExpReason", reason);
		    ResetCustomDeathTimer(playerid, 6000);
			return;
	    }

	    GetPlayerHealth(playerid, health);
		GetPlayerArmour(playerid, armour);
        if(armour > 80.0)
		{
		    SetArmor(playerid, 16.0);
		    return;
		}
		else SetArmor(playerid, 0.0);
		if(health > 80.0)
		{
		    SetHealth(playerid, 14);
		}
		else
		{
		    SetPVarInt(playerid, "ExpDamager", damagerid+1 );
			SetPVarInt(playerid, "ExpReason", reason);
			SetHealth(playerid, 0.0);
		    ResetCustomDeathTimer(playerid, 6000);
		}
		return;

    }
    if(IsPlayerInAnyVehicle(playerid))
    {
		amount *= 2.5;
		GetVehicleHealth(GetPlayerVehicleID(playerid), health);
		SetVehicleHealth(GetPlayerVehicleID(playerid), health - amount);
		if(health - amount <= 250.0)
		{
			SetPVarInt(playerid, "ExpDamager", damagerid+1 );
		    SetPVarInt(playerid, "ExpReason", reason);
		    ResetCustomDeathTimer(playerid, 6000);
		}
        return;
    }
	GetPlayerHealth(playerid, health);
	GetPlayerArmour(playerid, armour);

	if(armour > 0.0)
	{
	    if(armour >= amount)
	    {
	        SetArmor(playerid, armour - amount);
	        amount = 0.0;
	    } else
	    {
	        amount = amount - armour;
			SetArmor(playerid, 0.0);
		}
	}
	if(amount > 0.0)
	{
		if(amount >= health)
		{
		    SetPVarInt(playerid, "ExpDamager", damagerid+1 );
		    SetPVarInt(playerid, "ExpReason", reason);
		    ResetCustomDeathTimer(playerid, 6000);
		}
	    SetHealth(playerid, health - amount);
	}
	//printf("DEBUG CFONTROL DamagePlayer 2");
}
stock EXPL_OnPlayerDeath(playerid, &killerid, &reason)
{
	//printf("DEBUG CFONTROL EXPL_OnPlayerDeath 1");
	if(killerid == INVALID_PLAYER_ID)
	{
	    if(GetPVarInt(playerid, "ExpDamager") > 0)
	    {
	        killerid = GetPVarInt(playerid, "ExpDamager") - 1;
	        reason = GetPVarInt(playerid, "ExpReason");
            SetPVarInt(playerid, "ExpDamager", 0);
		}
		if(killerid == playerid) killerid = INVALID_PLAYER_ID;
	}
	//printf("DEBUG CFONTROL EXPL_OnPlayerDeath 2");
}
forward Float:M_GetPlayerToPointSquare(playerid, Float:x, Float:y, Float:z);
stock Float:M_GetPlayerToPointSquare(playerid, Float:x, Float:y, Float:z)
{
    //printf("DEBUG CFONTROL M_GetPlayerToPointSquare 1");
	new Float:px, Float:py, Float:pz;
	if(IsPlayerInAnyVehicle(playerid)) GetVehiclePos(GetPlayerVehicleID(playerid), px, py, pz);
		else GetPlayerPos(playerid, px, py, pz);
	px -= x;
	py -= y;
	pz -= z;

    //printf("DEBUG CFONTROL M_GetPlayerToPointSquare 2");
	return px * px + py + py + pz * pz;
}

forward DestroyObjectPub(objectid);
public DestroyObjectPub(objectid)
{
    //printf("DEBUG CFONTROL DestroyObjectPub 1");
    DestroyTheDynamicObject(objectid);
    //printf("DEBUG CFONTROL DestroyObjectPub 2");
}

forward ResetCustomDeath(playerid);
public ResetCustomDeath(playerid)
{
    //printf("DEBUG CFONTROL ResetCustomDeath 1");
	SetPVarInt(playerid, "ExpDamager", 0);
    //printf("DEBUG CFONTROL ResetCustomDeath 2");
}

forward SetAtomPrice();
public SetAtomPrice()
{
	//printf("DEBUG CFONTROL SetAtomPrice 1");
    new string[128], Slot1 = -1, HighestCash = -9999;

	forLoop(x, MAX_PLAYERS) if (IsPlayerConnected(x) && PlayerInfo[x][Spawned] == 1 && PlayerInfo[x][PlayerMode] == TW) if (GetThePlayerMoney(x) >= HighestCash) {
		HighestCash = GetThePlayerMoney(x);
		Slot1 = x;
	}
	if(Slot1 != -1)
	{
		if(TWInfo[AtomPrice] != 10000)
		{
			if(GetThePlayerMoney(Slot1) >= 10000)
			{
		        TWInfo[AtomPrice] = 10000;

		    }
		}

        if(TWInfo[AtomPrice] != 100000)
		{
			if(GetThePlayerMoney(Slot1) >= 100000)
			{
		        TWInfo[AtomPrice] = 100000;
		    }
		}

        if(TWInfo[AtomPrice] != 1000000)
		{
			if(GetThePlayerMoney(Slot1) >= 1000000)
			{
		        TWInfo[AtomPrice] = 1000000;
		    }
		}
		format(string,sizeof(string),"{FF0000}WAR NEWS:{FFFFFF} The price of the atomic bomb has been set to %d dollars!",TWInfo[AtomPrice]);
		SendMessageToMode(TW,red1,string);
	  	format(string, sizeof(string), "[WAR NEWS] The price of the atomic bomb has been set to %d dollars!",TWInfo[AtomPrice]);
		db_SaveChat(-1, TW,string);
	}
	//printf("DEBUG CFONTROL SetAtomPrice 2");
}
stock LeaderBarState()
{
	/*new allyCount=0,axisCount=0;
    forLoop(i, MAX_PLAYERS)
	{
  		if(IsPlayerConnected(i) && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][PlayerMode] == TW && TWPlayerInfo[i][Class] == LEADER)
  		{
  		    if(PlayerInfo[i][pTeam] == AXIS)axisCount++;
  		    else if(PlayerInfo[i][pTeam] == ALLIES)allyCount++;
  		}

	}*/
}

stock TWSettings()
{
	TWMapChange();
	new allyships=0,axisships=0,allyzones=0,axiszones=0;
	forLoop(id, MAX_SHIPS)
	{
		if(ShipInfo[id][Exists] == 1 && ShipInfo[id][Mode]==TW)
		{
		    if(ShipInfo[id][Team] == AXIS)axisships++;
		    if(ShipInfo[id][Team] == ALLIES)allyships++;
		}
	}
	forLoop(id, MAX_TW_ZONES)
	{
		if(TWZoneInfo[id][Exists])
        {
        	if(TWZoneInfo[id][OriginalTeam] == AXIS)axiszones++;
            if(TWZoneInfo[id][OriginalTeam] == ALLIES)allyzones++;
		}
	}

    SetTimer("TWLeaderElection", 20*1000, false);
	//tw settings
	//printf("DEBUG CFONTROL TWSettings 2");
}
stock TWCountryCount(country)
{
    //printf("DEBUG CFONTROL TWCountryCount");
	new aCount=0;
	forLoop(i, MAX_PLAYERS) if(IsPlayerConnected(i) && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][PlayerMode] == TW && TWPlayerInfo[i][Country] == country && !IsPlayerNPC(i))aCount++;
	return aCount;
}

forward TWLeaderElection();
public TWLeaderElection()
{
	//printf("DEBUG CFONTROL TWLeaderElection 1");
	new string[7][1700];
	forLoop(i, MAX_PLAYERS)
	{
	    if(IsPlayerConnected(i))
 		{
 		    if(PlayerInfo[i][PlayerMode] == TW && PlayerInfo[i][Spawned] == 1)
	 		{
				TWPlayerInfo[i][pVotes]=0;
	 		    forLoop(u, 7)
	 		    {
	 		    	TWPlayerInfo[i][Nominated][u]=-1;
				}
			}
		}
	}
	new b[7]=0;
	forLoop(u, 7)b[u]=0;

	forLoop(i, MAX_PLAYERS)
	{
	    if(IsPlayerConnected(i) && !IsPlayerNPC(i))
 		{
 		    if(PlayerInfo[i][PlayerMode] == TW && PlayerInfo[i][Spawned] == 1)
	 		{
	 		    if(TWPlayerInfo[i][AlreadyLeader] == 0 && TWCountryCount(TWPlayerInfo[i][Country]) > 1)
	 		    {
	 		    	new str[60];
					format(str,60,"\n%s",PlayerInfo[i][Name]);
		    		strcat(string[TWPlayerInfo[i][Country]],str);
		    		TWPlayerInfo[i][Nominated][TWPlayerInfo[i][Country]]=b[TWPlayerInfo[i][Country]];
					b[TWPlayerInfo[i][Country]]++;
				}
			}
	    }
	}
	forLoop(i, MAX_PLAYERS)
	{
	    if(IsPlayerConnected(i) && !IsPlayerNPC(i))
 		{
 		    if(PlayerInfo[i][PlayerMode] == TW && PlayerInfo[i][Spawned] == 1)
	 		{
	 		    ShowPlayerDialog(i, ELECTIONMENU, DIALOG_STYLE_LIST, "Leader Election",string[TWPlayerInfo[i][Country]], "Select", "Cancel");
			}
	    }
	}
	TWInfo[Election] = 1;
	SetTimer("TWLeaderElectionEnd", 30*1000, false);
	SendMessageToMode(TW,white, "{33FF33}NEWS:{FFFFFF} Leader elections have started. Time left: 30 seconds.");
  	db_SaveChat(-1, TW,"[WAR NEWS] Leader elections have started.");
	//printf("DEBUG CFONTROL TWLeaderElection 2");
}
forward TWLeaderElectionEnd();
public TWLeaderElectionEnd()
{
	//printf("DEBUG CFONTROL TWLeaderElectionEnd 1");
	new highestvotes[7]=0,highestvotesid[7]=-1;
	forLoop(u, 7)
	{
	    highestvotes[u]=0;
		highestvotesid[u]=-1;
	}
	forLoop(u, 7)
	{
	    forLoop(i, MAX_PLAYERS)
	    {
	        if(IsPlayerConnected(i) && !IsPlayerNPC(i) && PlayerInfo[i][PlayerMode] == TW && PlayerInfo[i][Spawned] == 1 && TWPlayerInfo[i][pVotes] > 0 && TWPlayerInfo[i][Country] == u && TWPlayerInfo[i][Nominated][u] > -1)
			{
		        if(TWPlayerInfo[i][pVotes] > highestvotes[u])
		        {
		            highestvotesid[u] = i;
		            highestvotes[u] = TWPlayerInfo[i][pVotes];
		        }
	        }
	    }
	}
	TWInfo[Election] = 0;
	forLoop(u, 7)
	{
	    if(highestvotesid[u] >-1)
	    {
		    PlayerInfo[highestvotesid[u]][SelectMenu] = THE_TW;
			PlayerInfo[highestvotesid[u]][SelectMenuOption][1]= LEADER;
			new string[160];
			strcat(string,"{FFFFFF}You have been selected to become\n the {33FF33}leader{FFFFFF} of your country.");
			strcat(string,"\n\n{33FF33}Accept {FFFFFF}or {FF0000}deny, {FFFFFF}its your choice.");
			ShowPlayerDialog(highestvotesid[u],SELMENU, DIALOG_STYLE_MSGBOX,"Leader Offer", string, "Accept", "Deny");
		}
	}
	//printf("DEBUG CFONTROL TWLeaderElectionEnd 2");
}
CMD:bhelp(playerid, params[])
{
    if(PlayerInfo[playerid][PlayerMode] == TW || PlayerInfo[playerid][PlayerMode] == TL)
    {
    	SendClientMessage(playerid, red1, "{33FF33}BHelp:{FFFFFF} ONLY IN RUSTLERS and NEVADAS.");
    	SendClientMessage(playerid, red1, "{33FF33}BHelp:{FFFFFF} You can drop bombs by firstly pressing:");
    	SendClientMessage(playerid, red1, "{33FF33}BHelp:{FFFFFF} Buttons: Y and N to switch bombs.");
    	SendClientMessage(playerid, red1, "{33FF33}BHelp:{FFFFFF} Button: SPACEBAR(handbrake) to drop them.");
		return 1;
    }else return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be in the TW mode to use this command.");
}

CMD:info(playerid, params[])
{
	new str[128];
	format(str, sizeof str, "{00EEAD}Website: {FFFFFF}%s",ServerInfo[Site]);
	SendClientMessage(playerid, red1, str);
	SendClientMessage(playerid, red1, "{00EEAD}TeamSpeak: {FFFFFF}11.1.1.16");
	return 1;
}

CMD:soldier(playerid, params[])
{
	if(PlayerInfo[playerid][PlayerMode] != TW)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be in the TW mode to use this command.");
	if(!isAllowedToChangeMode(playerid, true))return 1;
	if(IsPlayerFalling(playerid) || IsPlayerSwimming(playerid))return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} To avoid abuse, you must be on foot to use this command.");
	if((TWInfo[Map] == NorthernSA && !IsPlayerInRangeOfPoint(playerid, 300,CountrySpawnNorth[TWPlayerInfo[playerid][Country]][1],CountrySpawnNorth[TWPlayerInfo[playerid][Country]][2],CountrySpawnNorth[TWPlayerInfo[playerid][Country]][3]))
		|| (TWInfo[Map] == SouthernSA && !IsPlayerInRangeOfPoint(playerid, 300,CountrySpawnSouth[TWPlayerInfo[playerid][Country]][1],CountrySpawnSouth[TWPlayerInfo[playerid][Country]][2],CountrySpawnSouth[TWPlayerInfo[playerid][Country]][3])))
		    return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} To avoid abuse, you must be near your spawn to use this command.");
	if(GetThePlayerHealth(playerid) < 30)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} To avoid abuse, you must have at least 30 percent of health.");
	if(TWPlayerInfo[playerid][Class] == SOLDIER)
		return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You already are a soldier.");
	TWPlayerInfo[playerid][Class] = SOLDIER;
	A_SpawnPlayer(playerid);
	return 1;
}
CMD:pilot(playerid, params[])
{
	if(PlayerInfo[playerid][PlayerMode] != TW)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be in the TW mode to use this command.");
	if(!isAllowedToChangeMode(playerid, true))return 1;
	if(IsPlayerFalling(playerid) || IsPlayerSwimming(playerid))return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} To avoid abuse, you must be on foot to use this command.");
	if((TWInfo[Map] == NorthernSA && !IsPlayerInRangeOfPoint(playerid, 300,CountrySpawnNorth[TWPlayerInfo[playerid][Country]][1],CountrySpawnNorth[TWPlayerInfo[playerid][Country]][2],CountrySpawnNorth[TWPlayerInfo[playerid][Country]][3]))
		|| (TWInfo[Map] == SouthernSA && !IsPlayerInRangeOfPoint(playerid, 300,CountrySpawnSouth[TWPlayerInfo[playerid][Country]][1],CountrySpawnSouth[TWPlayerInfo[playerid][Country]][2],CountrySpawnSouth[TWPlayerInfo[playerid][Country]][3])))
		    return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} To avoid abuse, you must be near your spawn to use this command.");
	if(GetThePlayerHealth(playerid) < 30)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} To avoid abuse, you must have at least 30 percent of health.");
	if(TWPlayerInfo[playerid][Class] == PILOT)
		return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You already are a pilot.");
	TWPlayerInfo[playerid][Class] = PILOT;
	A_SpawnPlayer(playerid);
	return 1;
}
CMD:medic(playerid, params[])
{
	if(PlayerInfo[playerid][PlayerMode] != TW)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be in the TW mode to use this command.");
	if(!isAllowedToChangeMode(playerid, true))return 1;
	if(IsPlayerFalling(playerid) || IsPlayerSwimming(playerid))return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} To avoid abuse, you must be on foot to use this command.");
	if((TWInfo[Map] == NorthernSA && !IsPlayerInRangeOfPoint(playerid, 300,CountrySpawnNorth[TWPlayerInfo[playerid][Country]][1],CountrySpawnNorth[TWPlayerInfo[playerid][Country]][2],CountrySpawnNorth[TWPlayerInfo[playerid][Country]][3]))
		|| (TWInfo[Map] == SouthernSA && !IsPlayerInRangeOfPoint(playerid, 300,CountrySpawnSouth[TWPlayerInfo[playerid][Country]][1],CountrySpawnSouth[TWPlayerInfo[playerid][Country]][2],CountrySpawnSouth[TWPlayerInfo[playerid][Country]][3])))
		    return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} To avoid abuse, you must be near your spawn to use this command.");
	if(GetThePlayerHealth(playerid) < 30)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} To avoid abuse, you must have at least 30 percent of health.");
	if(TWPlayerInfo[playerid][Class] == MEDIC)
		return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You already are a medic.");
	TWPlayerInfo[playerid][Class] = MEDIC;
	A_SpawnPlayer(playerid);
	return 1;
}
CMD:engineer(playerid, params[])
{
	if(PlayerInfo[playerid][PlayerMode] != TW)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be in the TW mode to use this command.");
	if(!isAllowedToChangeMode(playerid, true))return 1;
	if(IsPlayerFalling(playerid) || IsPlayerSwimming(playerid))return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} To avoid abuse, you must be on foot to use this command.");
	if((TWInfo[Map] == NorthernSA && !IsPlayerInRangeOfPoint(playerid, 300,CountrySpawnNorth[TWPlayerInfo[playerid][Country]][1],CountrySpawnNorth[TWPlayerInfo[playerid][Country]][2],CountrySpawnNorth[TWPlayerInfo[playerid][Country]][3]))
		|| (TWInfo[Map] == SouthernSA && !IsPlayerInRangeOfPoint(playerid, 300,CountrySpawnSouth[TWPlayerInfo[playerid][Country]][1],CountrySpawnSouth[TWPlayerInfo[playerid][Country]][2],CountrySpawnSouth[TWPlayerInfo[playerid][Country]][3])))
		    return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} To avoid abuse, you must be near your spawn to use this command.");
	if(GetThePlayerHealth(playerid) < 30)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} To avoid abuse, you must have at least 30 percent of health.");
	if(TWPlayerInfo[playerid][Class] == ENGINEER)
		return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You already are an engineer.");
	TWPlayerInfo[playerid][Class] = ENGINEER;
	A_SpawnPlayer(playerid);
	return 1;
}

CMD:atomhelp(playerid, params[])
{
    if(PlayerInfo[playerid][PlayerMode] != TW)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be in the TW mode to use this command.");
    SendClientMessage(playerid,red1,"{33FF33}A-Bomb:{FFFFFF} Where? Under a skull icon on your minimap.");
	return 1;
}
CMD:refillhelp(playerid, params[])
{
    if(PlayerInfo[playerid][PlayerMode] != TW)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be in the TW mode to use this command.");
	SendClientMessage(playerid,red1,"{33FF33}REFILL:{FFFFFF} Where? Find a map icon: '?'. Find a briefcase, walk into it.");
	return 1;
}

CMD:aahelp(playerid, params[])
{
    if(PlayerInfo[playerid][PlayerMode] != TW)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be in the TW mode to use this command.");
	SendClientMessage(playerid,red1,"{33FF33}AA:{FFFFFF} The AA gun feature.");
    SendClientMessage(playerid,red1,"{33FF33}AA:{FFFFFF} To use the AA gun, you must stay on a spot tower.");
    SendClientMessage(playerid,red1,"{33FF33}AA:{FFFFFF} You will get only 500 bullets, use them wisely.");
    SendClientMessage(playerid,red1,"{33FF33}AA:{FFFFFF} You can use the AA gun once in 3 minutes.");
	return 1;
}

CMD:weapranks(playerid, params[])
{
    if(PlayerInfo[playerid][PlayerMode] != TW)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be in the TW mode to use this command.");
	new string[256];
	strcat(string,"\n{FFFFFF}Rank - {FF0000}Requirements");
	strcat(string,"\n{FFFFFF}#1 - {FF0000}0 kills");
	strcat(string,"\n{FFFFFF}#2 - {FF0000}50");
	strcat(string,"\n{FFFFFF}#3 - {FF0000}250");
	strcat(string,"\n{FFFFFF}#4 - {FF0000}650");
	strcat(string,"\n{FFFFFF}#5 - {FF0000}1050");
	strcat(string,"\n{FFFFFF}#6 - {FF0000}1850");
	ShowPlayerDialog(playerid, 4521, DIALOG_STYLE_MSGBOX,"Weapon Ranks", string, "Close", "");
	return 1;
}
CMD:armyranks(playerid, params[])
{
    if(PlayerInfo[playerid][PlayerMode] != TW)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be in the TW mode to use this command.");
	new string[256];
	strcat(string,"\n{FFFFFF}Rank - {FF0000}Requirements");
	strcat(string,"\n{FFFFFF}Private - {FF0000}0 lands");
	strcat(string,"\n{FFFFFF}Corporal - {FF0000}80");
	strcat(string,"\n{FFFFFF}Lieutenant - {FF0000}120");
	strcat(string,"\n{FFFFFF}Major - {FF0000}260");
	strcat(string,"\n{FFFFFF}Colonel - {FF0000}400");
	strcat(string,"\n{FFFFFF}General - {FF0000}840");
	ShowPlayerDialog(playerid, 4521, DIALOG_STYLE_MSGBOX,"Army Ranks", string, "Close", "");
	return 1;
}

CMD:airranks(playerid, params[])
{
    if(PlayerInfo[playerid][PlayerMode] != TW)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be in the TW mode to use this command.");
	new string[256];
	strcat(string,"\n{FFFFFF}Rank - {FF0000}Requirements");
	strcat(string,"\n{FFFFFF}Airman - {FF0000}0 ships/submarines");
	strcat(string,"\n{FFFFFF}Sergeant - {FF0000}20");
	strcat(string,"\n{FFFFFF}Lieutenant - {FF0000}60");
	strcat(string,"\n{FFFFFF}Major - {FF0000}400");
	strcat(string,"\n{FFFFFF}Colonel - {FF0000}800");
	strcat(string,"\n{FFFFFF}Captain - {FF0000}1200");
	ShowPlayerDialog(playerid, 4521, DIALOG_STYLE_MSGBOX,"Weapon Ranks", string, "Close", "");
	return 1;
}

CMD:medicranks(playerid, params[])
{
    if(PlayerInfo[playerid][PlayerMode] != TW)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be in the TW mode to use this command.");
	new string[256];
	strcat(string,"\n{FFFFFF}Rank - {FF0000}Requirements");
	strcat(string,"\n{FFFFFF}Private - {FF0000}0 saved players");
	strcat(string,"\n{FFFFFF}Corporal - {FF0000}50");
	strcat(string,"\n{FFFFFF}Sergeant - {FF0000}150");
	strcat(string,"\n{FFFFFF}Lieutenant - {FF0000}300");
	strcat(string,"\n{FFFFFF}Major - {FF0000}500");
	strcat(string,"\n{FFFFFF}General - {FF0000}800");
	ShowPlayerDialog(playerid, 4521, DIALOG_STYLE_MSGBOX,"Medic Ranks", string, "Close", "");
	return 1;
}

CMD:radio(playerid, params[])
{
    if(PlayerInfo[playerid][PlayerMode] == TRP)return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command in this mode..");
	if(PlayerInfo[playerid][Spawned] == 0)return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You have to be spawned in order to use this command.");
    //if(PlayerInfo[playerid][PlayerMode] == FFA || PlayerInfo[playerid][PlayerMode] == STUNT || PlayerInfo[playerid][PlayerMode] == MOVIES || PlayerInfo[playerid][PlayerMode] == MOVIES)
	//{
	ShowPlayerDialog(playerid, RADIO_MENU, DIALOG_STYLE_LIST, "Chose Your Radio Genre", "\nDubstep\nHipHop\nReggae\nJazz\nPOP\nR&B\nRock\nRAP\nTurn radio off", "Select", "Back");
	//}else return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be in Stunt&Fun or FFA mode to use this command.");
	return 1;
}
CMD:sound(playerid, params[])
{
	if(PlayerInfo[playerid][PlayerMode] == TRP)return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command in this mode..");
	ShowPlayerDialog(playerid,SOUNDENABLE, DIALOG_STYLE_LIST,"Sound menu", "Enable sound. \nDisable sound.", "Select", "Exit");
	return 1;
}


CMD:blocktele(playerid, params[])
{
	if(PlayerInfo[playerid][PlayerMode] != STUNT)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be in Stunt&Fun mode to use this command.");
	if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING || GetPlayerState(playerid) == PLAYER_STATE_WASTED)return SendClientMessage(playerid,blue,"{FF0000}Error:{FFFFFF} You cannot use this comamnd now.");
	if(SFPlayerInfo[playerid][BlockTele] == 0)
	{
	    SFPlayerInfo[playerid][BlockTele] = 1;
		SendClientMessage(playerid,red1,"Notice:{FFFFFF} You have blocked teleports to your position.");
	}else{
		SFPlayerInfo[playerid][BlockTele] = 0;
		SendClientMessage(playerid,green1,"Notice:{FFFFFF} You are allowing teleports to your position.");
	}
	return 1;
}

CMD:sync(playerid, params[])
{
    if(AC_PlayerInfo[playerid][AC_pFreezed] == true)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You cannot use this command at this moment.");
	if((SFPlayerInfo[playerid][Event] > 0 && PlayerInfo[playerid][PlayerMode] == STUNT)||PlayerInfo[playerid][Frozen] > 0||PlayerInfo[playerid][Spawned] == 0||TWPlayerBomb[playerid][bPlanting] == 1
	|| TWPlayerBomb[playerid][bDefusing] == 1 || PlayerInfo[playerid][PlayerMode] == DM || PlayerInfo[playerid][PlayerMode] == PJ)
		return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command at this moment.");
	if(!IsPlayerInAnyVehicle(playerid))
	{
	    if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING || GetPlayerState(playerid) == PLAYER_STATE_WASTED)return SendClientMessage(playerid,blue,"{FF0000}Error:{FFFFFF} You cannot use this comamnd now.");
		TogglePlayerControllable(playerid,false);
		TogglePlayerControllable(playerid,true);
	    SetCameraBehindPlayer(playerid);
	    SendClientMessage(playerid,white,"{FF0000}Notice:{FFFFFF} You are fully synced.");
	}else return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You can only use this command on foot.");
	return 1;
}
CMD:attachments(playerid, params[])
{
    if(PlayerInfo[playerid][PlayerMode] == FFA || PlayerInfo[playerid][PlayerMode] == STUNT || PlayerInfo[playerid][PlayerMode] == MOVIES)
    {
        if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING || GetPlayerState(playerid) == PLAYER_STATE_WASTED)return SendClientMessage(playerid,blue,"{FF0000}Error:{FFFFFF} You cannot use this comamnd now.");
		if(PlayerInfo[playerid][PlayerMode] == STUNT && SFPlayerInfo[playerid][Event] > 0) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command at this moment. You are in an event.");
		ShowPlayerDialog(playerid, DIALOG_ATTACH, DIALOG_STYLE_LIST,"{FF0000}Attachments Menu", "\nAdd/Edit Objects \nLoad objects\nUnload objects\nSpawn with Objects", "Select", "Cancel");
	}else return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be in Stunt&Fun or FFA mode to use this command.");
    return 1;
}
CMD:camo(playerid, params[])
{
	if(PlayerInfo[playerid][PlayerMode] != TW || PlayerInfo[playerid][Spawned] == 0 )return 0;
	if(TWPlayerInfo[playerid][Class] != SPY)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be a spy.");
	RemovePlayerAttachedObjectEx(playerid, 9);
	SetPlayerAttachedObjectEx(playerid,9,647,1,-0.005999,-0.10600,0.01299,12.600023,87.2,-67.2,0.46099,0.48700,0.968000);
	return 1;
}
CMD:uncamo(playerid, params[])
{
	if(PlayerInfo[playerid][PlayerMode] != TW || PlayerInfo[playerid][Spawned] == 0 )return 0;
	if(TWPlayerInfo[playerid][Class] != SPY)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be a spy.");
	RemovePlayerAttachedObjectEx(playerid, 9);
	return 1;
}

CMD:gasmask(playerid, params[])
{
	if(PlayerInfo[playerid][PlayerMode] != TW || PlayerInfo[playerid][Spawned] == 0 )return 0;
	if(TWPlayerInfo[playerid][GasMask] == 0)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must buy a gas mask.");
	if(TWPlayerInfo[playerid][GasMaskOn] == 1)
	{
		RemovePlayerAttachedObjectEx(playerid, 8);
		TWPlayerInfo[playerid][GasMaskOn] = 0;
	}
	else
	{
		SetPlayerAttachedObjectEx(playerid,8,19472,2,0.00,0.11,-0.00,0.00,89.00,87.99,1.00,1.00,1.00);
		TWPlayerInfo[playerid][GasMaskOn] = 1;
	}
	return 1;
}


CMD:lands(playerid, params[])
{
    if(PlayerInfo[playerid][PlayerMode] != TW)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be in the TW mode to use this command.");
	new str11[90],string2[1000];
    forLoop(id, MAX_TW_ZONES)
	{
	    if(TWZoneInfo[id][Exists])
	    {
	        if(TWZoneInfo[id][OriginalTeam] == NOPOWER && TWZoneInfo[id][Conquer]==-1)
	        {
	        	format(str11,80,"\n{FFFFFF}%s - {67F6F6}Neutral",TWZoneInfo[id][zName]);
	        	strcat(string2,str11);
			}
	        if(TWZoneInfo[id][Conquer]>-1)
	        {
				format(str11,80,"\n{FFFFFF}%s - {%s}%s{FFFFFF}(%s)",TWZoneInfo[id][zName],CountryChatColor[TWZoneInfo[id][Conquer]],CountryNames[TWZoneInfo[id][Conquer]],PowerNames[TWZoneInfo[id][Team]]);
	        	strcat(string2,str11);
			}
	    }
	}
	ShowPlayerDialog(playerid, 4521, DIALOG_STYLE_MSGBOX, "Lands", string2, "Close", "");
    return 1;
}
CMD:ships(playerid, params[])
{
    if(PlayerInfo[playerid][PlayerMode] != TW)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be in the TW mode to use this command.");
	new str11[90],string2[1000];
    forLoop(id, MAX_SHIPS)
	{
	    if(ShipInfo[id][Exists] && ShipInfo[id][Mode] == TW)
	    {
	        format(str11,90,"\n{FFFFFF}%s: {67F6F6}%d",ShipInfo[id][NameShort],ShipInfo[id][sHP]);
	        strcat(string2,str11);
	    }
	}
	ShowPlayerDialog(playerid, 4521, DIALOG_STYLE_MSGBOX, "Ships", string2, "Close", "");
    return 1;
}

CMD:leaders(playerid, params[])
{
    if(!(PlayerInfo[playerid][PlayerMode] == TW || PlayerInfo[playerid][PlayerMode] == PTP))return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be in the TW or PTP mode to use this command.");
 	if(PlayerInfo[playerid][PlayerMode] == TW)
	{
		if(!AxisLeeaderCount() && !AllyLeeaderCount())return SendClientMessage(playerid,red1, "{FF0000}Notice: {FFFFFF}There are no leaders.");
	    new string5[190],string2[1200];
	    forLoop(i, MAX_PLAYERS)
	    {
			if(IsPlayerConnected(i) && PlayerInfo[i][Spawned] == 1  && TWPlayerInfo[i][Class] == LEADER && PlayerInfo[i][PlayerMode] == TW)
			{
			    format(string5,190,"\n{%s}%s %s(ID:%d)",CountryChatColor[TWPlayerInfo[i][Country]],CountryClassNames[TWPlayerInfo[i][Country]][TWPlayerInfo[i][Class]],PlayerInfo[i][Name],i);
			    strcat(string2,string5);
			}
		}
		ShowPlayerDialog(playerid, 4511, DIALOG_STYLE_MSGBOX,"Leader List", string2, "Close", "");
	}
	else if(PlayerInfo[playerid][PlayerMode] == PTP)
	{
		if(ClassCountPTP(PRESIDENT) == 0 && ClassCountPTP(VICE) == 0)
			return SendClientMessage(playerid,red1, "{FF0000}Notice: {FFFFFF}There are no leaders.");

		new string[126];
	    SendClientMessage(playerid, white, "-----------------------------------------------------------------------");
	    if(ClassCountPTP(PRESIDENT) != 0)
	    {
		    forLoop(i, MAX_PLAYERS)
		    {
				if(IsPlayerConnected(i) && PlayerInfo[i][Spawned] == 1 && PTPPlayerInfo[i][Class] == PRESIDENT && PlayerInfo[i][PlayerMode] == PTP)
				{
				    format(string,sizeof string,"{FFFF00}PRESIDENT: {FFFFFF}%s(ID:%d)",PlayerInfo[i][Name],i);
				    break;
				}
			}
		}else format(string,sizeof string,"{FFFF00}PRESIDENT: {FFFFFF}No one");
		SendClientMessage(playerid, white, string);

		if(ClassCountPTP(VICE) != 0)
	    {
		    forLoop(i, MAX_PLAYERS)
		    {
				if(IsPlayerConnected(i) && PlayerInfo[i][Spawned] == 1 && PTPPlayerInfo[i][Class] == VICE && PlayerInfo[i][PlayerMode] == PTP)
				{
					format(string,sizeof string,"{FFFF00}VICE: {FFFFFF}%s(ID:%d)",PlayerInfo[i][Name],i);
				    break;
				}
			}
		}else format(string,sizeof string,"{FFFF00}VICE: {FFFFFF}No one");
		SendClientMessage(playerid, white, string);
	    SendClientMessage(playerid, white, "-----------------------------------------------------------------------");
	}
	return 1;
}

CMD:atomprice(playerid, params[])
{
	if(PlayerInfo[playerid][PlayerMode] != TW)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be in the TW mode to use this command.");
	new st1[128];
	format(st1,sizeof(st1),"{FF0000}WAR NEWS:{FFFFFF} The price of the atomic bomb is %d dollars!",TWInfo[AtomPrice]);
	SendClientMessage(playerid,red1,st1);
	return 1;
}
CMD:beforefilming(playerid, params[])
{
    if(PlayerInfo[playerid][PlayerMode] == TRP)return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command in this mode..");
	HideTDs(playerid);
	return 1;
}

CMD:vfix(playerid, params[])
{
	if(PlayerInfo[playerid][VIP] == 0)return 0;
	if(PlayerInfo[playerid][PlayerMode] == TRP)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You cannot use this command in this mode..");
    if(PlayerInfo[playerid][AbuseFixVIP] == 1) return SendClientMessage(playerid,blue,"{FF0000}Error:{FFFFFF} You cannot use command anymore..it will work after the next death.");
    if (!IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} You are not in a vehicle");
	PlayerInfo[playerid][AbuseFixVIP]=1;
    RepairVehicle(GetPlayerVehicleID(playerid));
    SendClientMessage(playerid,red,"Notice:{FFFFFF} You can use this command one time before you die.");
	return 1;
}

CMD:healme(playerid, params[])
{
    if(PlayerInfo[playerid][VIP] == 0)return 0;
	if(PlayerInfo[playerid][PlayerMode] == TRP)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You cannot use this command in this mode..");
    if(PlayerInfo[playerid][AbuseHealVIP] == 1) return SendClientMessage(playerid,blue,"{FF0000}Error:{FFFFFF} You cannot use command anymore..it will work after the next death.");
    PlayerInfo[playerid][AbuseHealVIP] = 1;
    SetHealth(playerid,99.0);
    SendClientMessage(playerid,red,"Notice:{FFFFFF} You can use this command one time before you die.");
	return 1;
}

CMD:para(playerid, params[])
{
    if(PlayerInfo[playerid][PlayerMode] == STUNT && SFPlayerInfo[playerid][Event] > 0) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command at this moment. You are in an event.");
	if(PlayerInfo[playerid][PlayerMode] == TRP || PlayerInfo[playerid][PlayerMode] == PJ || PlayerInfo[playerid][PlayerMode] == DM)return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command in this mode.");
    GiveWeapon(playerid,WEAPON_PARACHUTE,1);
	return 1;
}

CMD:fstyle(playerid, params[])
{
    if(PlayerInfo[playerid][PlayerMode] == TRP)return 0;
	if(PlayerInfo[playerid][PlayerMode] == STUNT && SFPlayerInfo[playerid][Event] > 0) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command at this moment. You are in an event.");
	if(IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,blue,"{FF0000}Error:{FFFFFF} You cannot use this comamnd in any vehicle");
	if(PlayerInfo[playerid][Spawned] == 0)return SendClientMessage(playerid,blue,"{FF0000}Error:{FFFFFF} You have to be spawned in order to use this command.");
    if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING || GetPlayerState(playerid) == PLAYER_STATE_WASTED)return SendClientMessage(playerid,blue,"{FF0000}Error:{FFFFFF} You cannot use this comamnd now.");
	ShowPlayerDialog(playerid,FIGHTMENU, DIALOG_STYLE_LIST, "Fighting Style Selection Menu","\nBoxing  \nElbow  \nKneehead  \nKungfu \nGrabKick  \nNormal", "Select", "Cancel");
	return 1;
}

CMD:admins(playerid, params[])
{
	new st[128];
    if(AdminCount() == 0 || ServerInfo[showAdmins] == 0)
    {
		format(st,128,"Admin Notice:{FFFFFF} There are %d naked monkeys under your bed.",random(322));
		SendClientMessage(playerid, red1,st);
    }
	else
	{
		SendClientMessage(playerid, red1, "=======================[Admin List]=======================");
		forLoop(i, MAX_PLAYERS) if(IsPlayerConnected(i))
		{
			if(PlayerInfo[i][Level] > 0 && PlayerInfo[i][HideAdmin] == 0 && PlayerInfo[i][Registered] && PlayerInfo[i][LoggedIn])
			{
			    format(st,128,"{FFFFFF}%s(ID:%d) {FF0000}Level: %d",PlayerInfo[i][Name],i,PlayerInfo[i][Level]);
				SendClientMessage(playerid, red1,st);
			}
		}
		SendClientMessage(playerid, red1, "==========================================================");
	}
	if(PlayerInfo[playerid][Level] < 1)
	{
		format(st,128,"Notice: {FFFFFF}Player: %s(ID:%d) has used the /admins command.",PlayerInfo[playerid][Name],playerid);
		MessageToAllAdmins(lightblue,st);
	}
	return 1;
}

CMD:blockpms(playerid, params[])
{
	if(PlayerInfo[playerid][BlockPM] == 0)
	{
		PlayerInfo[playerid][BlockPM] = 1;
		SendClientMessage(playerid,red1,"Notice:{FFFFFF} You have blocked incoming PMs.");
	}else{
	    PlayerInfo[playerid][BlockPM] = 0;
		SendClientMessage(playerid,red1,"Notice:{FFFFFF} You are allowing incoming PMs.");
	}
	return 1;
}
CMD:hideadmin(playerid, params[])
{
	if(PlayerInfo[playerid][Level] < 5)return 0;
	if(PlayerInfo[playerid][HideAdmin] == 0)
	{
		PlayerInfo[playerid][HideAdmin] = 1;
		SendClientMessage(playerid,red1,"Notice:{FFFFFF} You are hiding.");
	}else{
	    PlayerInfo[playerid][HideAdmin] = 0;
		SendClientMessage(playerid,red1,"Notice:{FFFFFF} You are not hiding.");
	}
	return 1;
}
CMD:spycmds(playerid, params[])
{
	if(PlayerInfo[playerid][Level] < 4)return 0;
	if(PlayerInfo[playerid][Spycmds] == 0)
	{
		PlayerInfo[playerid][Spycmds] = 1;
		SendClientMessage(playerid,red1,"Notice:{FFFFFF} You are spying cmds.");
	}else{
	    PlayerInfo[playerid][Spycmds] = 0;
		SendClientMessage(playerid,red1,"Notice:{FFFFFF} You are not spying cmds.");
	}
	return 1;
}

CMD:spypms(playerid, params[])
{
	if(PlayerInfo[playerid][Level] < 4)return 0;
	if(PlayerInfo[playerid][Spypms] == 0)
	{
		PlayerInfo[playerid][Spypms] = 1;
		SendClientMessage(playerid,red1,"Notice:{FFFFFF} You are spying pms.");
	}else{
	    PlayerInfo[playerid][Spypms] = 0;
		SendClientMessage(playerid,red1,"Notice:{FFFFFF} You are not spying pms.");
	}
	return 1;
}


CMD:makevice(playerid,params[])
{
    if(PlayerInfo[playerid][PlayerMode] != TW)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be in the TW mode to use this command.");
	if(TWPlayerInfo[playerid][Class] != LEADER)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be a leader in TW.");
	if(PlayerCountryViceLeaderCount(playerid) > 0)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You can't invite more Vice Leaders(max=1)");
	new player, string[128];
    if (sscanf(params, "d", player))return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /makevice <playerid>");

    if(IsPlayerConnected(player) && player != playerid && player != INVALID_PLAYER_ID)
	{
	    if(PlayerInfo[player][Spawned] == 0)return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} The player is not spawned.");
	    if(PlayerInfo[player][PlayerMode] != TW)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} Player must be in the TW mode.");
	    if(TWPlayerInfo[player][Country] != TWPlayerInfo[playerid][Country])return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} Player must be in your country.");
	    if(TWPlayerInfo[player][AlreadyLeader] > 0)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} Player has been a leader already.");
		PlayerInfo[player][SelectMenu] = THE_TW;
	    PlayerInfo[player][SelectMenuOption][0]= playerid;
	    PlayerInfo[player][SelectMenuOption][1]= VICE;
		format(string, sizeof(string), "Notice:{FFFFFF} You have just sent %s an invitation to become your Vice Leader.", PlayerInfo[player][Name]);
		SendClientMessage(playerid,green1,string);
		format(string, sizeof(string), "Country Leader {33FF33}%s {FFFFFF}invites to become his Vice Leader.", PlayerInfo[playerid][Name]);
		ShowPlayerDialog(player,SELMENU, DIALOG_STYLE_MSGBOX,"WW2 Vice Invite", string, "Accept", "Deny");
		return 1;
	}else return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} The player is not connected or is yourself.");
}
CMD:unmakevice(playerid,params[])
{
    if(PlayerInfo[playerid][PlayerMode] != TW)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be in the TW mode to use this command.");
	if(TWPlayerInfo[playerid][Class] != LEADER)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be a leader in TW.");
	if(PlayerCountryViceLeaderCount(playerid) == 0)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} There are no Vice Leaders.");
    new player, string[128];
    if (sscanf(params, "d", player))return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /unmakevice <playerid>");

    if(IsPlayerConnected(player) && player != playerid && player != INVALID_PLAYER_ID)
	{
	    if(PlayerInfo[player][Spawned] == 0)return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} The player is not spawned.");
	    if(PlayerInfo[player][PlayerMode] != TW)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} Player must be in the TW mode.");
	    if(TWPlayerInfo[player][Country] != TWPlayerInfo[playerid][Country])return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} Player must be in your country.");
	    if(TWPlayerInfo[player][Class] != VICE)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} Player must be a Vice leader.");
		TWPlayerInfo[player][Class] = SOLDIER;
		A_SpawnPlayer(player);
		format(string, sizeof(string), "Notice:{FFFFFF} You have fired Vice Leader %s.", PlayerInfo[player][Name]);
		SendClientMessage(playerid,red1,string);
		format(string, sizeof(string), "Notice:{FFFFFF} You have been fired as a Vice Leader from Leader %s.", PlayerInfo[playerid][Name]);
		SendClientMessage(player,red1,string);
		return 1;
	}else return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} The player is not connected.");
}
CMD:makespy(playerid,params[])
{
    if(PlayerInfo[playerid][PlayerMode] != TW)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be in the TW mode to use this command.");
	if(TWPlayerInfo[playerid][Class] != LEADER)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be a leader in TW.");
	if(PlayerCountrySpyCount(playerid) >= 2)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You can't invite more Spies(max=2)");
    new player, string[128];
    if (sscanf(params, "d", player))return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /makespy <playerid>");
	if(IsPlayerConnected(player) && player != playerid && player != INVALID_PLAYER_ID)
	{
	    if(PlayerInfo[player][Spawned] == 0)return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} The player is not spawned.");
	    if(PlayerInfo[player][PlayerMode] != TW)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} Player must be in the TW mode.");
	    if(TWPlayerInfo[player][Country] != TWPlayerInfo[playerid][Country])return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} Player must be in your country.");
		PlayerInfo[player][SelectMenu] = THE_TW;
	    PlayerInfo[player][SelectMenuOption][0]= playerid;
	    PlayerInfo[player][SelectMenuOption][1]= SPY;
		format(string, sizeof(string), "Notice:{FFFFFF} You have just sent %s an invitation to become your spy.", PlayerInfo[player][Name]);
		SendClientMessage(playerid,green1,string);
		format(string, sizeof(string), "Country Leader {33FF33}%s {FFFFFF}invites to become his spy.", PlayerInfo[playerid][Name]);
		ShowPlayerDialog(player,SELMENU, DIALOG_STYLE_MSGBOX,"WW2 Spy Invite", string, "Accept", "Deny");
		return 1;
	}else return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} The player is not connected.");
}
CMD:unmakespy(playerid,params[])
{
    if(PlayerInfo[playerid][PlayerMode] != TW)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be in the TW mode to use this command.");
	if(TWPlayerInfo[playerid][Class] != LEADER)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be a leader in TW.");
	if(PlayerCountrySpyCount(playerid) == 0)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} There are no Spies.");
    new player, string[128];
    if (sscanf(params, "d", player))return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /unmakespy <playerid>");
	if(IsPlayerConnected(player) && player != playerid && player != INVALID_PLAYER_ID)
	{
	    if(PlayerInfo[player][Spawned] == 0)return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} The player is not spawned.");
	    if(PlayerInfo[player][PlayerMode] != TW)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} Player must be in the TW mode.");
	    if(TWPlayerInfo[player][Country] != TWPlayerInfo[playerid][Country])return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} Player must be in your country.");
	    if(TWPlayerInfo[player][Class] != SPY)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} Player must be a Spy.");
		TWPlayerInfo[player][Class] = SOLDIER;
		A_SpawnPlayer(player);
		format(string, sizeof(string), "Notice:{FFFFFF} You have fired Spy %s.", PlayerInfo[player][Name]);
		SendClientMessage(playerid,red1,string);
		format(string, sizeof(string), "Notice:{FFFFFF} You have been fired as a Spy from Leader %s.", PlayerInfo[playerid][Name]);
		SendClientMessage(player,red1,string);
		return 1;
	}else return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} The player is not connected.");
}
CMD:makeguard(playerid,params[])
{
    if(PlayerInfo[playerid][PlayerMode] != TW)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be in the TW mode to use this command.");
	if(TWPlayerInfo[playerid][Class] != LEADER)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be a leader in TW.");
	if(PlayerCountryGuardCount(playerid) >= 8)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You can't invite more Guards(max=8)");
    new player, string[128];
    if (sscanf(params, "d", player))return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /makeguard <playerid>");
	if(IsPlayerConnected(player) && player != playerid && player != INVALID_PLAYER_ID)
	{
	    if(PlayerInfo[player][Spawned] == 0)return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} The player is not spawned.");
	    if(PlayerInfo[player][PlayerMode] != TW)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} Player must be in the TW mode.");
	    if(TWPlayerInfo[player][Country] != TWPlayerInfo[playerid][Country])return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} Player must be in your country.");
		PlayerInfo[player][SelectMenu] = THE_TW;
	    PlayerInfo[player][SelectMenuOption][0]= playerid;
	    PlayerInfo[player][SelectMenuOption][1]= BODYGUARD;
		format(string, sizeof(string), "Notice:{FFFFFF} You have just sent %s an invitation to become your guard.", PlayerInfo[player][Name]);
		SendClientMessage(playerid,green1,string);
		format(string, sizeof(string), "Country Leader {33FF33}%s {FFFFFF}invites to become his guard.", PlayerInfo[playerid][Name]);
		ShowPlayerDialog(player,SELMENU, DIALOG_STYLE_MSGBOX,"WW2 Guard Invite", string, "Accept", "Deny");
		return 1;
	}else return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} The player is not connected.");
}
CMD:unmakeguard(playerid,params[])
{
    if(PlayerInfo[playerid][PlayerMode] != TW)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be in the TW mode to use this command.");
	if(TWPlayerInfo[playerid][Class] != LEADER)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be a leader in TW.");
	if(PlayerCountryGuardCount(playerid) == 0)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} There are no Guards.");
    new player, string[128];
    if (sscanf(params, "d", player))return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /unmakeguard <playerid>");
	if(IsPlayerConnected(player) && player != playerid && player != INVALID_PLAYER_ID)
	{
	    if(PlayerInfo[player][Spawned] == 0)return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} The player is not spawned.");
	    if(PlayerInfo[player][PlayerMode] != TW)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} Player must be in the TW mode.");
	    if(TWPlayerInfo[player][Country] != TWPlayerInfo[playerid][Country])return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} Player must be in your country.");
	    if(TWPlayerInfo[player][Class] != BODYGUARD)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} Player must be a Guard.");
		TWPlayerInfo[player][Class] = SOLDIER;
		A_SpawnPlayer(player);
		format(string, sizeof(string), "Notice:{FFFFFF} You have fired Guard %s.", PlayerInfo[player][Name]);
		SendClientMessage(playerid,red1,string);
		format(string, sizeof(string), "Notice:{FFFFFF} You have been fired as a Guard from Leader %s.", PlayerInfo[playerid][Name]);
		SendClientMessage(player,red1,string);
		return 1;
	}else return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} The player is not connected.");
}
stock CreateFFApicks(id,Float:x,Float:y)
{
	//printf("DEBUG CFONTROL CreateFFApicks 1");
	GangInfo[id][Rocket]=CreateDynamicPickup(359, 1,x+3,y,GetGroundZ(Float:x, Float:y)+1,W_FFA); // rocket
	GangInfo[id][Deagle]=CreateDynamicPickup(348,1,x,y+3,GetGroundZ(Float:x, Float:y)+1,W_FFA); // deagle
	GangInfo[id][Sniper]=CreateDynamicPickup(358, 1,x+3,y+3,GetGroundZ(Float:x, Float:y)+1,W_FFA); // sniper
	GangInfo[id][M4]=CreateDynamicPickup(356, 1,x+6,y,GetGroundZ(Float:x, Float:y)+1,W_FFA); // m4
	GangInfo[id][Ak]=CreateDynamicPickup(355, 1,x,y+6,GetGroundZ(Float:x, Float:y)+1,W_FFA); // ak
	GangInfo[id][Molotov]=CreateDynamicPickup(344,1,x+6,y+6,GetGroundZ(Float:x, Float:y)+1,W_FFA); // molotov
	GangInfo[id][Mp5]=CreateDynamicPickup(353, 1,x+9,y,GetGroundZ(Float:x, Float:y)+1,W_FFA); // mp5
	GangInfo[id][UZI]=CreateDynamicPickup(352, 1,x,y+9,GetGroundZ(Float:x, Float:y)+1,W_FFA); // uzi
	GangInfo[id][Tec]=CreateDynamicPickup(372, 1,x+9,y+9,GetGroundZ(Float:x, Float:y)+1,W_FFA); // tec
	GangInfo[id][Grenade]=CreateDynamicPickup(342, 1,x-3,y,GetGroundZ(Float:x, Float:y)+1,W_FFA); // grenade
	GangInfo[id][Shotgun]=CreateDynamicPickup(349, 1,x,y-3,GetGroundZ(Float:x, Float:y)+1,W_FFA); // shutgun
	GangInfo[id][Sawed]=CreateDynamicPickup(350, 1,x-3,y-3,GetGroundZ(Float:x, Float:y)+1,W_FFA); // sawedoff
	GangInfo[id][Spac]=CreateDynamicPickup(351,1,x-6,y,GetGroundZ(Float:x, Float:y)+1,W_FFA); // spac
	GangInfo[id][Rifle]=CreateDynamicPickup(357, 1,x,y-6,GetGroundZ(Float:x, Float:y)+1,W_FFA); // rifle
	GangInfo[id][gHP]=CreateDynamicPickup(1240, 2,x-9,y-9,GetGroundZ(Float:x, Float:y)+1,W_FFA);//health
	GangInfo[id][gArmor]=CreateDynamicPickup(1242, 2,x-6,y-6,GetGroundZ(Float:x, Float:y)+1,W_FFA);//armor
	GangInfo[id][gJP]=CreateDynamicPickup(370, 2,x+9,y+13,GetGroundZ(Float:x, Float:y)+1,W_FFA); // jetpack
	//printf("DEBUG CFONTROL CreateFFApicks 2");
}
stock DestroyFFApicks(id)
{
	//printf("DEBUG CFONTROL DestroyFFApicks 1");
	DestroyTheDynamicPickup(GangInfo[id][Rocket]);
	DestroyTheDynamicPickup(GangInfo[id][Deagle]);
	DestroyTheDynamicPickup(GangInfo[id][Sniper]);
	DestroyTheDynamicPickup(GangInfo[id][M4]);
	DestroyTheDynamicPickup(GangInfo[id][Ak]);
	DestroyTheDynamicPickup(GangInfo[id][Molotov]);
	DestroyTheDynamicPickup(GangInfo[id][Mp5]);
	DestroyTheDynamicPickup(GangInfo[id][UZI]);
	DestroyTheDynamicPickup(GangInfo[id][Tec]);
	DestroyTheDynamicPickup(GangInfo[id][Grenade]);
	DestroyTheDynamicPickup(GangInfo[id][Shotgun]);
	DestroyTheDynamicPickup(GangInfo[id][Sawed]);
	DestroyTheDynamicPickup(GangInfo[id][Spac]);
	DestroyTheDynamicPickup(GangInfo[id][Rifle]);
	DestroyTheDynamicPickup(GangInfo[id][gHP]);
	DestroyTheDynamicPickup(GangInfo[id][gArmor]);
	DestroyTheDynamicPickup(GangInfo[id][gJP]);

	GangInfo[id][Rocket]=-1;
    GangInfo[id][M4]=-1;
    GangInfo[id][Ak]=-1;
    GangInfo[id][Mp5]=-1;
    GangInfo[id][Sniper]=-1;
    GangInfo[id][Rifle]=-1;
    GangInfo[id][Deagle]=-1;
    GangInfo[id][UZI]=-1;
    GangInfo[id][Tec]=-1;
    GangInfo[id][Grenade]=-1;
    GangInfo[id][Shotgun]=-1;
    GangInfo[id][Sawed]=-1;
    GangInfo[id][Spac]=-1;
    GangInfo[id][Molotov]=-1;
    GangInfo[id][gHP]=-1;
    GangInfo[id][gArmor]=-1;
    GangInfo[id][gJP]=-1;
	//printf("DEBUG CFONTROL DestroyFFApicks 2");
}
stock CreateTWVehicle(model,Float:x,Float:y,Float:z,Float:r,col1,col2)
{
	if(maxTWvehs >= MAX_TW_VEHICLES)return -1;
    maxTWvehs++;
    TWInfo[Vehicles][maxTWvehs]=AddStaticVehicleEx(model,Float:x,Float:y,Float:z,Float:r,col1,col2,120);
    SetVehicleVirtualWorld(TWInfo[Vehicles][maxTWvehs],W_TW);
    SetVehicleNumberPlate(TWInfo[Vehicles][maxTWvehs], ServerInfo[lPlate]);
    return TWInfo[Vehicles][maxTWvehs];
}

stock CreateTWPickUps(model, type, Float:X, Float:Y, Float:Z, virtualworld)
{
	//printf("DEBUG CFONTROL CreateTWPickUps 1");
	if(maxTWpicks >= MAX_TW_PICKS)return -1;
    maxTWpicks++;
    TWInfo[Pickups][maxTWpicks]=CreateDynamicPickup(model, type, Float:X, Float:Y, Float:Z, virtualworld);
	//printf("DEBUG CFONTROL CreateTWPickUps 2");
    return TWInfo[Pickups][maxTWpicks];
}

stock CreateTWAATower(team,Float:X,Float:Y,Float:Z)
{
	//printf("DEBUG CFONTROL CreateTWAATower 1");
    maxTWtowers++;
    TWAATower[maxTWtowers][Exists] = 1;
	TWAATower[maxTWtowers][Team] = team;
	TWAATower[maxTWtowers][AreaID] = CreateDynamicSphere(X, Y, Z, 3.0, W_TW, -1, -1);
	//printf("DEBUG CFONTROL CreateTWAATower 2");
}

stock TWMapChange()
{
	//printf("DEBUG CFONTROL TWMapChange 1");
    maxTWpicks=-1;
	maxTWvehs=-1;
	maxTWtowers=-1;
    TWInfo[AtomPrice] = 1000000;
    DeleteCars();

    forLoop(i, MAX_PLAYERS)
	{
		if(IsPlayerConnected(i) && !IsPlayerNPC(i))
		{
		    PlayerInfo[i][supplyid] = 0;
		}
	}
	forLoop(id, MAX_TW_ZONES)
	{
	    if(TWZoneInfo[id][Exists])
	    {
            GangZoneDestroy(TWZoneInfo[id][gZone]);
            DestroyTheDynamic3DTextLabel(TWZoneInfo[id][Zone3DT]);
            DestroyTheDynamicArea(TWZoneInfo[id][AreaID]);
	    	TWZoneInfo[id][Exists]=0;
	    	TWZoneInfo[id][AreaID] = -1;
	    }
	    TWZoneInfo[id][Team] = 0;
	    TWZoneInfo[id][Conquer] = -1;
	    TWZoneInfo[id][Needed]=0;
	}
	forLoop(id, MAX_SUPPLIES)
    {
	    if(Supplies[id][Exists] == 1 && Supplies[id][gMode] == TW)
		{
		    Supplies[id][Exists] = 0;
		    DestroyTheDynamicPickup(Supplies[id][gHP]);
		    DestroyTheDynamicPickup(Supplies[id][gArmor]);
		    DestroyTheDynamicPickup(Supplies[id][Ak]);
			DestroyTheDynamicPickup(Supplies[id][Sniper]);
			DestroyTheDynamicPickup(Supplies[id][Deagle]);
			DestroyTheDynamicPickup(Supplies[id][Grenade]);
			DestroyTheDynamicPickup(Supplies[id][Shotgun]);
		}
	}
    forLoop(id, MAX_TW_OBJECTS)
    {
    	if(TWInfo[Objects][id] != -1)DestroyTheDynamicObject(TWInfo[Objects][id]);
    	TWInfo[Objects][id] = -1;
    }
    forLoop(id, MAX_TW_TOWERS)
	{
	    if(TWAATower[id][Exists] == 1)
	    {
			TWAATower[id][Exists]=0;
			DestroyTheDynamicArea(TWAATower[id][AreaID]);
		}
	}
    forLoop(id, MAX_SHIPS)
	{
	    if(ShipInfo[id][Exists]==1 && ShipInfo[id][Mode] == TW)
	    {
	        DestroyShip(id);
	    }
	}
    forLoop(id, MAX_TW_PICKS)
    {
        if(TWInfo[Pickups][id] != -1)DestroyTheDynamicPickup(TWInfo[Pickups][id]);
    	TWInfo[Pickups][id] = -1;
    }

	if(TWInfo[Map]==SouthernSA)
	{
        CreateSupplies(0, TW, -720.0,-1126.0);
	    CreateSupplies(1, TW, -1941.0,-1803.0);
	    CreateSupplies(2, TW, -2689.0,-1722.0);
	    CreateSupplies(3, TW, -917.0,-264.0);
	    CreateSupplies(4, TW, 400.0,-192.0);
	    CreateSupplies(5, TW, 1378.0,-6.0);
	    CreateSupplies(6, TW, 2081.0,39.0);
	    CreateSupplies(7, TW, -2278.0,-1691.0);

		TWInfo[pAtom] = CreateTWPickUps(1274, 2,-2468.2107,-1924.0740,301.671,W_TW);
		TWInfo[pRefill][0]=CreateTWPickUps(1210, 2,2473.2815,-24.5566,26.4844,W_TW);//
		TWInfo[pRefill][1]=CreateTWPickUps(1210, 2,1458.2526,378.1677,19.2324,W_TW);//
		TWInfo[pRefill][2]=CreateTWPickUps(1210, 2,828.1487,-468.4805,21.8116,W_TW);//
		TWInfo[pRefill][3]=CreateTWPickUps(1210, 2,208.0349,-230.5896,2.1563,W_TW);//
		TWInfo[pRefill][4]=CreateTWPickUps(1210, 2,-349.5591,-169.2223,57.991,W_TW);//
		TWInfo[pRefill][5]=CreateTWPickUps(1210, 2,-1113.9672,-1143.9115,129.2259,W_TW);
		TWInfo[pRefill][6]=CreateTWPickUps(1210, 2,-2250.1736,-1709.7091,480.1501,W_TW);
		TWInfo[pRefill][7]=CreateTWPickUps(1210, 2,-2191.0901,-2265.9631,30.6250,W_TW);

	    TWInfo[WeapShop][0]=CreateTWPickUps(1274, 2,-80.4167,-1169.2866,2.1870,W_TW);// gunshop 1
	    TWInfo[WeapShop][1]=CreateTWPickUps(1274, 2,-551.5403,-180.9835,78.4063,W_TW);// gunshop 1
		TWInfo[WeapShop][2]=CreateTWPickUps(1274, 2,1544.7015,17.5697,23.808,W_TW);// gunshop 1

		TWInfo[pGetIn][USA]=CreateTWPickUps(1273, 23,-1138.4443,-973.6356,130.36, W_TW);//
	    TWInfo[pGetIn][BRITISH]=CreateTWPickUps(1273, 23,2434.0063,121.8238,27.06, W_TW);//
	    TWInfo[pGetIn][GERMANY]=CreateTWPickUps(1273, 23,225.2330,86.8108,4.5839, W_TW);//
	    TWInfo[pGetIn][JAPAN]=CreateTWPickUps(1273, 23,-2010.3130,-2423.5579,30.6250, W_TW);//
	    TWInfo[pGetIn][RUSSIA]=CreateTWPickUps(1273, 23,848.6513,-594.9088,18.1631, W_TW);//
	    TWInfo[pGetIn][ITALY]=CreateTWPickUps(1273, 23,-13.2948,102.8497,4.2608, W_TW);//
	    TWInfo[pGetIn][BALKAN]=CreateTWPickUps(1273, 23,1340.9885,344.1198,19.66, W_TW);//
	    TWInfo[pGetOut]=CreateTWPickUps(1273, 23,-795.1531,492.2133,1367.3649, -1);

	    CreateZone("German land",AXIS,GERMANY,0,306.4013,-84.4734,6.24,120,120,120,120);//
	    CreateZone("Balkan land",ALLIES,BALKAN,1,1243.8484,226.3084,28.0728,120,120,120,120);//
	    CreateZone("USA land",ALLIES,USA,2,-1104.5698,-1208.2001,129.22,120,120,120,120);//
	    CreateZone("Japanese land",AXIS,JAPAN,3,-2168.3892,-2361.6741,30.6638,120,120,120,120);//
	    CreateZone("Italian land",AXIS,ITALY,4,-100.4718,-109.6907,3.1,120,120,120,120);//
	    CreateZone("British land",ALLIES,BRITISH,5,2201.1497,-66.2801,27.475,120,120,120,120);//
	    CreateZone("Soviet land",ALLIES,RUSSIA,6,612.6320,-607.2084,17.22,120,120,120,120);//

	    CreateZone("Food factory",NOPOWER,-1,7,-63.7661,-283.1607,6.4286,70,80,80,70);
	    CreateZone("Electric power plant",NOPOWER,-1,8,-1055.0204,-697.0110,32.352,70,80,80,70);
	    CreateZone("Rocky Mountain",NOPOWER,-1,9,-2817.0286,-1524.4176,140.84,70,80,80,70);
		CreateZone("Mineral Proccessor Factory",NOPOWER,-1,10,-1858.6940,-1607.6570,21.764,70,80,80,70);
	    CreateZone("Mineral Field",NOPOWER,-1,11,2351.3616,-649.1661,128.05,70,80,80,70);
	    CreateZone("Pesant Wood Shop",NOPOWER,-1,12,-533.5944,-103.2206,63.296,70,80,80,70);
	    CreateZone("Pesant Farm",NOPOWER,-1,13,-366.5442,-1421.3469,25.7266,70,80,80,70);
	    CreateZone("Old Farm",NOPOWER,-1,14,-1111.0706,-1637.1006,76.0,70,80,80,70);

	    CreateShip(TW,"British ship, Magnificent","Magnificent",100,ALLIES,SHIP,2066,-157,4,0,0,0);//
		CreateShip(TW,"British submarine, Implacable","Implacable",100,ALLIES,SUB,2629,392,1,0,0,90);//
	    CreateShip(TW,"American ship, Arizona","Arizona",100,ALLIES,SHIP,-184,-631,4,0,0,0);//+
	    CreateShip(TW,"American submarine, Essex","Essex",100,ALLIES,SUB,-533,-321,1,0,0,90);
	    CreateShip(TW,"American ship, Independece","Independece",100,ALLIES,SHIP,-115,-1951,4,0,0,0);//+
	    CreateShip(TW,"Russian ship, Stalin","Stalin",100,ALLIES,SHIP,2435,481,4,0,0,0);
	    CreateShip(TW,"Balkan ship, Apolonia","Apolonia",100,ALLIES,SHIP,1659,510,4,0,0,0);

	    CreateShip(TW,"Italian ship, Aquila","Aquila",100,AXIS,SHIP,103,261,4,0,0,0);
	    CreateShip(TW,"Italian ship, Littorio","Littorio",100,AXIS,SHIP,-353,341,4,0,0,0);
	    CreateShip(TW,"Italian submarine, Sparviero","Sparviero",100,AXIS,SUB,-689,303,1,0,0,90);
		CreateShip(TW,"German submarine, Tirpitz","Tirpitz",100,AXIS,SUB,550,582,1,0,0,90);
	    CreateShip(TW,"German ship, Graf Zepplin","Graf Zepplin",100,AXIS,SHIP,793,520,4,0,0,0);
	    CreateShip(TW,"German ship, Peter Strasser","Peter Strasser",100,AXIS,SHIP,278,408,4,0,0,0);
		CreateShip(TW,"Japanese submarine, Asahi","Asahi",100,AXIS,SUB,-2879,-2608,1,0,0,90);
	    CreateShip(TW,"Japanese ship, Zuikaku","Zuikaku",100,AXIS,SHIP,-1863,-2934,4,0,0,0);
	    CreateShip(TW,"Japanese ship, Kaiyo","Kaiyo",100,AXIS,SHIP,-2882,-2188,4,0,0,0);


        CreateTWAATower(AXIS,247.8528,-61.2940,49.3481); // germany aa tower 2
		CreateTWAATower(AXIS,359.6575,-126.7883,49.09810); // germany aa tower 3
		CreateTWAATower(AXIS,218.0150,-229.0977,23.5481); // germany aa tower 4
		CreateTWAATower(AXIS,165.4507,-238.6361,28.7881); // germany aa tower 5
		CreateTWAATower(AXIS,329.7612,66.6484,49.6181);
		CreateTWAATower(AXIS,-2055.4622,-2284.1365,45.6981); // japan
		CreateTWAATower(AXIS,-2223.0715,-2273.3499,61.3481); // japan aa tower 2 and the aboe too
		CreateTWAATower(AXIS,-2201.5105,-2464.4265,78.1981); // japan aa tower 3
		CreateTWAATower(AXIS,-2110.4636,-2457.0818,78.0381); // japan aa tower 4
		CreateTWAATower(AXIS,-2106.3271,-2396.5940,69.7781); // japan aa tower 5
		CreateTWAATower(AXIS,-1942.8987,-2448.5750,44.9681); // japan aa tower 6
		CreateTWAATower(AXIS,-73.4273,-122.7150,34.6481); // italy aa tower 1
		CreateTWAATower(AXIS,28.3966,87.6094,34.6681); // italy aa tower 2
		CreateTWAATower(AXIS,-84.2361,127.0963,34.5881); // italy aa tower 3
		CreateTWAATower(AXIS,-150.9739,-59.6343,34.4581);// italy aa tower 4

		CreateTWAATower(ALLIES,-1019.8487,-967.6853,158.6381); // usa aa tower 1
		CreateTWAATower(ALLIES,-1241.3257,-970.4275,176.1381); // usa aa tower 2
		CreateTWAATower(ALLIES,-1164.8798,-1263.4500,168.1781); // usa aa tower 3
		CreateTWAATower(ALLIES,-1037.7194,-1161.5170,158.5981); // usa aa tower 4
		CreateTWAATower(ALLIES,651.5980,-428.5837,47.4581); // russia tower 1
		CreateTWAATower(ALLIES,612.5634,-607.2969,38.6681); // russia tower 2
		CreateTWAATower(ALLIES,668.0936,-587.7554,47.5281); // russia tower 3
		CreateTWAATower(ALLIES,733.7392,-543.8681,48.0081); // russia tower 4
		CreateTWAATower(ALLIES,859.6558,-605.9170,67.7581); // russia tower 5
		CreateTWAATower(ALLIES,848.7574,-554.6976,31.2581); // russia tower 6
		CreateTWAATower(ALLIES,872.8541,-398.3852,53.8481); // russia tower 7
		CreateTWAATower(ALLIES,2450.5967,-42.2439,73.8281); // british aa 1
		CreateTWAATower(ALLIES,2566.1079,-15.6666,74.4981); // british aa 2
		CreateTWAATower(ALLIES,2614.7188,62.7843,43.2681); // british aa 3
		CreateTWAATower(ALLIES,2493.2639,143.7679,58.2581); // british aa 4
		CreateTWAATower(ALLIES,2225.9048,156.4953,55.7681); // british aa 5
		CreateTWAATower(ALLIES,2170.4668,27.6772,38.8181); // british aa 6
		CreateTWAATower(ALLIES,2146.9673,-95.9495,17.4381); // british aa 7
		CreateTWAATower(ALLIES,2425.7227,-136.9779,46.0881); // british aa 8
		CreateTWAATower(ALLIES,1225.2983,156.6720,41.0481); // fr aa 1
		CreateTWAATower(ALLIES,1070.2946,206.1229,49.0181); // fr aa 2
		CreateTWAATower(ALLIES,1260.9375,242.0723,46.4181); // fr aa 3
		CreateTWAATower(ALLIES,1191.8126,353.7274,35.4281); // fr aa 4
		CreateTWAATower(ALLIES,1396.2034,180.7876,34.5381); // fr aa 5
		CreateTWAATower(ALLIES,1405.1700,305.1641,50.6881); // fr aa 6
		CreateTWAATower(ALLIES,1400.2803,463.9637,50.2981);


	    CreateTWVehicle(545,2429.8237,110.9300,26.2984,89.0225,0,0); // britain cars
		CreateTWVehicle(580,2437.3760,110.7576,26.2803,89.0208,0,0); //
		CreateTWVehicle(545,2451.8525,110.5767,26.2969,88.3170,0,0); //
		CreateTWVehicle(432,2470.1572,92.1201,26.4915,176.9820,46,39); //
		CreateTWVehicle(432,2489.8022,35.7134,26.4914,266.3745,121,50); //
		CreateTWVehicle(432,2529.2383,72.3403,26.4813,1.4365,76,0); //
		CreateTWVehicle(432,2539.5068,60.7431,26.4934,181.7616,94,2); //
		CreateTWVehicle(432,2541.6494,118.7027,26.5779,91.8116,114,11); //
		CreateTWVehicle(432,2551.5654,106.5840,26.0423,89.0010,77,114); //
		CreateTWVehicle(432,2548.5596,112.8176,26.1301,106.4527,7,34); //
		CreateTWVehicle(545,2465.2627,20.0345,26.1492,203.8869,102,27); //
		CreateTWVehicle(545,2526.5288,-41.3660,26.7602,184.1038,10,45); //
		CreateTWVehicle(432,2528.5930,-27.1217,27.3683,11.6161,13,58); //
		CreateTWVehicle(432,2533.2542,-12.9885,26.5646,15.1097,114,119); //
		CreateTWVehicle(432,2540.6716,-7.8112,26.5211,356.1458,112,76); //
		CreateTWVehicle(432,2458.8018,9.5801,26.4323,354.1112,123,36); //
		CreateTWVehicle(432,2431.6169,46.7170,26.4944,81.0187,6,93); //
		CreateTWVehicle(432,2412.3826,37.3984,26.4771,274.6827,72,111); //
		CreateTWVehicle(432,2377.0178,-34.0891,26.4917,85.1489,118,114); //
		CreateTWVehicle(432,2370.4751,-82.6971,26.6746,181.7519,58,54); //
		CreateTWVehicle(432,2378.5093,-82.5061,26.6058,180.9206,48,83); //
		CreateTWVehicle(432,2386.1826,-82.8215,26.5280,186.3990,44,41); //
		CreateTWVehicle(432,2395.4646,-82.4711,26.5310,169.6326,84,111); //
		CreateTWVehicle(432,2406.3535,-80.8476,26.5422,170.0012,7,59); //
		CreateTWVehicle(432,2400.2979,-82.5166,26.5330,177.9741,80,11); //
		CreateTWVehicle(432,2415.7542,-82.4405,26.5262,185.4143,29,18); //
		CreateTWVehicle(432,2423.4036,-82.1927,26.5522,171.1246,84,110); //
		CreateTWVehicle(432,2431.4167,-81.8342,26.5993,187.2377,67,95); //
		CreateTWVehicle(432,2438.8962,-80.1874,26.5774,158.0009,7,73); //
		CreateTWVehicle(468,2335.8145,-114.7816,26.1287,170.7366,77,63); //
		CreateTWVehicle(580,2265.6812,-22.8336,26.2034,86.1885,75,45); //
		CreateTWVehicle(432,2227.1912,-22.5759,26.5505,70.5653,108,120); //
		CreateTWVehicle(432,2226.4846,-112.6639,26.5475,175.8719,44,22); //
		//AnddStaticVehicle(545,2216.7078,150.4073,25.7746,0.9975,24,122); //
		CreateTWVehicle(432,2299.1592,158.6412,26.5373,171.0463,13,109); //
		CreateTWVehicle(553,2458.4114,-201.9691,28.3392,88.5723,1,1); // british planes
		CreateTWVehicle(476,2399.7036,-159.7099,27.7612,107.5347,1,1); //
		CreateTWVehicle(476,2384.8887,-160.3337,27.7808,115.2710,1,1); //
		CreateTWVehicle(476,2371.4158,-159.7975,27.7755,112.2943,1,1); //
		CreateTWVehicle(476,2356.4883,-160.2468,27.7881,122.5561,1,1); //
		CreateTWVehicle(476,2342.1240,-159.8845,27.7947,115.5759,1,1); //
		CreateTWVehicle(476,2413.7900,-166.2847,27.7795,117.1207,1,1); //
		CreateTWVehicle(476,2431.1912,-174.9075,27.7794,100.0293,1,1); //
		CreateTWVehicle(476,2447.5459,-181.1106,27.7791,89.4180,1,1); //
		CreateTWVehicle(476,2398.2925,-231.3915,27.7794,67.4427,1,1); //
		CreateTWVehicle(476,2382.6008,-231.2505,27.7807,49.7865,1,1); //
		CreateTWVehicle(476,2348.2703,-239.3614,27.7794,59.2264,1,1); //
		CreateTWVehicle(476,2326.8533,-240.1740,27.7803,68.6512,1,1); //
		CreateTWVehicle(593,2418.4014,-224.7558,27.4602,60.4918,89,68); //
		CreateTWVehicle(511,2324.2068,-161.6306,28.3782,124.7414,1,1); //
		CreateTWVehicle(545,1329.0529,349.2076,19.2878,155.3647,0,0); // balkan cars
		CreateTWVehicle(580,1333.6904,339.7968,19.2024,154.7950,0,0); //
		CreateTWVehicle(580,1338.9790,350.9312,19.2750,155.5342,0,0); //
		CreateTWVehicle(432,1284.3207,322.5043,19.5458,64.4769,22,23); //
		CreateTWVehicle(432,1335.4524,299.3191,19.5413,251.3104,38,118); //
		CreateTWVehicle(432,1399.1317,262.8649,19.5704,148.6247,38,1); //
		CreateTWVehicle(468,1420.3536,273.8903,19.2240,53.4167,36,13); //
		CreateTWVehicle(432,1373.9539,205.1115,19.5410,54.3295,71,110); //
		CreateTWVehicle(432,1377.4541,280.1278,19.5506,240.3804,31,0); //
		CreateTWVehicle(432,1338.6272,409.3362,19.6430,149.6265,1,47); //
		CreateTWVehicle(432,1332.5635,410.7964,19.6190,151.7434,75,12); //
		CreateTWVehicle(432,1327.1163,415.1758,19.5413,149.6984,15,66); //
		CreateTWVehicle(432,1318.3601,420.4288,19.4306,148.8384,101,46); //
		CreateTWVehicle(432,1313.2942,423.7845,19.3870,155.2996,123,66); //
		CreateTWVehicle(432,1355.2605,429.7008,19.6932,245.7651,92,125); //
		CreateTWVehicle(432,1352.5238,425.0088,19.7197,239.7750,90,80); //
		CreateTWVehicle(432,1346.9250,416.8648,19.5963,235.5311,14,105); //
		CreateTWVehicle(432,1349.0906,447.0160,20.1846,325.6267,53,56); //
		CreateTWVehicle(432,1354.7925,443.7719,20.1414,317.1220,11,67); //
		CreateTWVehicle(432,1331.4426,437.3265,19.2041,260.0374,106,4); //
		CreateTWVehicle(432,1303.6863,422.1664,19.4879,141.9497,108,65); //
		CreateTWVehicle(432,1294.7211,414.2794,19.4419,242.3413,60,109); //
		CreateTWVehicle(432,1293.0017,408.8113,19.4777,245.8525,11,107); //
		CreateTWVehicle(432,1290.3673,404.3037,19.4793,245.5803,37,38); //
		CreateTWVehicle(432,1283.9034,420.4800,19.2669,239.5084,4,40); //
		CreateTWVehicle(432,1292.0768,423.9678,19.2994,238.6443,64,0); //
		CreateTWVehicle(432,1297.6149,429.0856,19.2133,159.5189,71,6); //
		CreateTWVehicle(432,1275.3379,169.8406,20.0586,186.1914,14,55); //
		CreateTWVehicle(432,1281.6704,194.6484,19.8795,59.4127,118,54); //
		CreateTWVehicle(545,1287.4722,160.0115,20.2773,178.6288,117,31); //
		CreateTWVehicle(509,1202.4813,182.3735,20.0131,81.3740,106,82); //
		CreateTWVehicle(511,1045.8882,209.5131,38.2561,9.0963,106,1); // fra planes
		CreateTWVehicle(476,1023.6703,216.9982,37.6608,342.4189,106,1); //
		CreateTWVehicle(476,1021.5323,229.8663,37.6578,350.4289,106,1); //
		CreateTWVehicle(476,1019.1021,244.8590,37.6701,345.6700,106,1); //
		CreateTWVehicle(476,1017.0167,258.2152,37.6615,349.9584,106,1); //
		CreateTWVehicle(476,1014.4167,272.6770,37.6594,344.0522,106,1); //
		CreateTWVehicle(476,1012.7704,287.2314,37.6590,346.1848,106,1); //
		CreateTWVehicle(476,1061.3998,222.6758,37.6417,27.5155,106,1); //
		CreateTWVehicle(476,1057.8196,237.7834,37.6698,33.3957,106,1); //
		CreateTWVehicle(476,1057.3679,252.7653,37.6687,27.8432,106,1); //
		CreateTWVehicle(476,1054.4718,267.3694,37.6635,35.3271,106,1); //
		CreateTWVehicle(476,1052.7058,281.3998,37.6616,34.5438,106,1); //
		CreateTWVehicle(476,1050.0394,295.4554,37.6599,37.0710,106,1); //
		CreateTWVehicle(580,861.3879,-570.4663,17.4306,272.9766,0,0); // russia cars
		CreateTWVehicle(580,851.0045,-570.1958,16.7341,271.4423,0,0); //
		CreateTWVehicle(545,844.4459,-570.9755,16.2998,272.3869,0,0); //
		CreateTWVehicle(432,717.5829,-616.0726,15.7704,266.3516,8,86); //
		CreateTWVehicle(432,717.9492,-621.0471,15.4397,263.3630,32,110); //
		CreateTWVehicle(432,735.2933,-608.7883,15.8036,185.3537,61,66); //
		CreateTWVehicle(432,717.6504,-626.3173,15.3096,269.5602,105,2); //
		CreateTWVehicle(432,716.7368,-634.7746,15.4030,96.7201,29,74); //
		CreateTWVehicle(432,728.0562,-646.9715,15.4761,176.5573,47,6); //
		CreateTWVehicle(432,735.4834,-669.7163,16.6100,274.1296,47,6); //
		CreateTWVehicle(432,750.1911,-663.2401,16.5807,347.5231,47,6); //
		CreateTWVehicle(432,757.3019,-647.5404,16.9280,330.8878,47,6); //
		CreateTWVehicle(432,758.4698,-633.5473,16.1275,29.0012,47,6); //
		CreateTWVehicle(432,759.0041,-607.9318,15.9879,216.0528,47,6); //
		CreateTWVehicle(432,739.9197,-620.4826,14.9707,19.6772,47,6); //
		CreateTWVehicle(432,717.5485,-608.0546,16.3648,96.3574,47,6); //
		CreateTWVehicle(432,725.0815,-521.0900,16.2496,11.4207,47,6); //
		CreateTWVehicle(432,675.7877,-510.3307,16.3191,173.0243,47,6); //
		CreateTWVehicle(432,684.7173,-655.1657,16.2432,186.9905,47,6); //
		CreateTWVehicle(500,608.4727,-517.2856,16.3181,4.6814,17,100); //
		CreateTWVehicle(500,607.3378,-620.0447,17.2628,234.6376,17,100); //
		CreateTWVehicle(468,672.5390,-563.9621,16.7232,149.9424,68,75); //
		CreateTWVehicle(553,783.2172,-408.1785,26.3804,354.9743,6,1); // russia planes
		CreateTWVehicle(476,805.0174,-390.3209,25.8426,9.3247,6,1); //
		CreateTWVehicle(476,807.0686,-372.8046,25.8276,9.5292,6,1); //
		CreateTWVehicle(476,808.5544,-357.0376,25.8312,10.5296,6,1); //
		CreateTWVehicle(476,809.6942,-342.7769,25.8314,9.2303,6,1); //
		CreateTWVehicle(476,810.5921,-327.3614,25.8353,11.9028,6,1); //
		CreateTWVehicle(476,812.3244,-314.6017,25.8238,10.9215,6,1); //
		CreateTWVehicle(476,813.6843,-299.5213,25.8436,9.4381,6,1); //
		CreateTWVehicle(476,815.2766,-283.8740,25.8420,13.7053,6,1); //
		CreateTWVehicle(476,765.1926,-392.4194,25.8256,338.0482,6,1); //
		CreateTWVehicle(476,767.0190,-377.7254,25.8302,334.7242,6,1); //
		CreateTWVehicle(476,768.8892,-361.5945,25.8309,334.2168,6,1); //
		CreateTWVehicle(476,769.8038,-346.1984,25.8306,339.5231,6,1); //
		CreateTWVehicle(476,772.5821,-329.4377,25.8300,331.2443,6,1); //
		CreateTWVehicle(476,773.4174,-314.5548,25.8253,335.5583,6,1); //
		CreateTWVehicle(476,775.8599,-295.0192,25.8303,338.0197,6,1); //
		CreateTWVehicle(476,812.7899,-299.8292,25.8355,17.0944,6,1); //
		CreateTWVehicle(476,813.9559,-285.6494,25.8290,23.9441,6,1); //
		CreateTWVehicle(593,777.8918,-280.7735,25.5064,85.2091,67,75); //
		CreateTWVehicle(593,779.2084,-265.2521,25.5108,86.8129,78,49); //
		CreateTWVehicle(476,99.7075,-121.3056,2.3041,29.3300,0,3); // germany pllanes
		CreateTWVehicle(476,100.4410,-99.3988,2.1567,20.8588,0,3); //
		CreateTWVehicle(476,101.4571,-72.1873,2.1263,38.0384,0,3); //
		CreateTWVehicle(476,109.6615,-45.8762,2.3324,35.5045,0,3); //
		CreateTWVehicle(476,121.7361,-12.3713,2.1659,44.1659,0,3); //
		CreateTWVehicle(476,129.0496,3.5775,1.8942,10.3148,0,3); //
		CreateTWVehicle(476,139.6742,27.2851,2.1475,35.9986,0,3); //
		CreateTWVehicle(476,85.1577,-109.7349,1.6741,34.1116,0,3); //
		CreateTWVehicle(476,84.3854,-78.5819,1.5922,24.5108,0,3); //
		CreateTWVehicle(476,90.2839,-44.4796,1.5915,36.5927,0,3); //
		CreateTWVehicle(593,70.0997,-151.8925,1.6885,357.3111,46,102); //
		CreateTWVehicle(553,29.2714,-181.5646,2.0583,350.2546,0,3); //
		CreateTWVehicle(553,-4.0894,-178.3132,2.2864,355.7946,0,3); //
		CreateTWVehicle(553,-36.0557,-174.9897,4.1859,347.5255,0,3); //
		CreateTWVehicle(511,-64.6367,-167.3111,4.2655,332.6276,0,3); //
		CreateTWVehicle(476,-59.6697,-111.9619,3.8934,321.8734,0,3); //
		CreateTWVehicle(476,-45.8922,-71.3628,3.9024,312.4673,0,3); //
		CreateTWVehicle(476,-37.0736,-42.4538,3.9025,291.6343,0,3); //
		CreateTWVehicle(476,-24.1101,-19.4264,3.8945,290.9517,0,3); //
		CreateTWVehicle(593,9.3218,38.4799,3.5927,286.8715,50,113); //
		CreateTWVehicle(593,25.3188,63.5166,3.5705,288.3641,50,113); //
		CreateTWVehicle(580,212.2982,68.3554,2.8328,92.0645,0,0); //
		CreateTWVehicle(580,224.5919,68.7264,3.2211,92.4053,0,0); // germany cars
		CreateTWVehicle(580,239.4784,68.9606,3.3834,91.5396,0,0); //
		CreateTWVehicle(432,290.0837,93.4214,4.3898,355.6755,3,15); //
		CreateTWVehicle(432,291.7055,105.7686,4.3943,353.2948,3,15); //
		CreateTWVehicle(432,296.2380,136.4412,3.9892,280.2514,3,15); //
		CreateTWVehicle(432,313.9395,134.2777,4.2903,203.2681,3,15); //
		CreateTWVehicle(432,302.0098,115.7261,4.3722,279.0870,3,15); //
		CreateTWVehicle(432,327.8312,115.9623,4.2810,205.2562,3,15); //
		CreateTWVehicle(432,350.1604,125.8780,5.5509,53.8985,3,15); //
		CreateTWVehicle(432,360.0538,129.9109,6.0122,54.2174,3,15); //
		CreateTWVehicle(432,365.0028,133.8975,6.2962,54.3003,3,15); //
		CreateTWVehicle(432,179.7370,82.2460,3.2255,353.7474,3,15); //
		CreateTWVehicle(432,160.9428,99.3719,3.6431,3.5660,3,15); //
		CreateTWVehicle(432,160.0807,115.9031,3.8716,2.7734,3,15); //
		CreateTWVehicle(432,148.4789,123.4304,2.9974,182.0137,3,15); //
		CreateTWVehicle(432,148.6400,108.3481,3.3914,179.8450,3,15); //
		CreateTWVehicle(432,210.4712,-16.3321,1.5654,80.1022,3,15); //
		CreateTWVehicle(432,226.2977,-127.3184,1.6026,151.2488,3,15); //
		CreateTWVehicle(500,223.2569,-144.4698,1.5640,93.6826,45,123); //
		CreateTWVehicle(500,177.8383,-249.1272,1.4365,349.0065,45,123); //
		CreateTWVehicle(500,308.5042,-240.2600,1.5609,209.5445,45,123); //
		CreateTWVehicle(500,-118.2968,-149.4698,3.1042,334.2874,45,123); // italia cars
		CreateTWVehicle(500,-118.2970,-149.4698,3.1042,334.2867,45,123); //
		CreateTWVehicle(500,-117.5162,-115.8717,3.0837,348.8149,45,123); //
		CreateTWVehicle(500,-96.3041,-59.3905,3.1002,341.2101,45,123); //
		CreateTWVehicle(500,-80.3516,-93.7879,3.0952,234.2562,45,123); //
		CreateTWVehicle(432,-79.5635,-85.4493,3.2697,68.4357,68,61); //
		CreateTWVehicle(432,-77.6313,-77.4640,3.2453,69.3009,53,16); //
		CreateTWVehicle(432,-72.0669,-60.0840,3.1766,72.0253,122,85); //
		CreateTWVehicle(432,-69.0676,-52.0851,3.1533,72.0373,122,85); //
		CreateTWVehicle(432,-66.0682,-44.0949,3.1591,71.9848,122,85); //
		CreateTWVehicle(432,-63.0523,-36.0521,3.1699,72.0107,122,85); //
		CreateTWVehicle(432,-60.0468,-28.0372,3.1704,71.9971,122,85); //
		CreateTWVehicle(432,-57.9743,-19.7342,3.1838,71.7945,122,85); //
		CreateTWVehicle(432,-54.9757,-11.7413,3.1626,71.6478,122,85); //
		CreateTWVehicle(432,-51.9742,-3.7427,3.1657,71.4985,122,85); //
		CreateTWVehicle(432,-34.5421,-13.1709,3.1680,59.2882,122,85); //
		CreateTWVehicle(432,-29.2956,30.3521,3.1494,65.2157,122,85); //
		CreateTWVehicle(432,-23.8783,37.2587,3.1607,64.1524,122,85); //
		CreateTWVehicle(545,-19.6287,89.9930,2.9569,68.9614,0,0); //
		CreateTWVehicle(580,-26.8085,94.0020,2.9798,54.0329,0,87); //
		CreateTWVehicle(580,-10.9946,85.6516,2.9134,58.4892,0,87); //
		CreateTWVehicle(468,-100.0311,63.2478,2.7862,76.7670,53,73); //
		CreateTWVehicle(468,-160.1899,-124.0186,2.7856,264.6141,53,73); //
		CreateTWVehicle(553,-215.2046,-147.7304,4.1706,344.8447,61,1); // italy planes
		CreateTWVehicle(553,-247.2011,-141.8590,4.1561,345.2054,61,1); //
		CreateTWVehicle(476,-185.3572,-145.1751,3.7983,11.8789,61,1); //
		CreateTWVehicle(476,-174.6878,-95.7636,3.8956,13.8900,61,1); //
		CreateTWVehicle(476,-165.0120,-72.6219,3.8950,25.5305,61,1); //
		CreateTWVehicle(476,-155.9396,-49.8195,3.8904,7.4117,61,1); //
		CreateTWVehicle(476,-145.9458,-26.5878,3.9008,13.9038,61,1); //
		CreateTWVehicle(476,-139.9476,-9.6705,3.8880,1.1996,61,1); //
		CreateTWVehicle(476,-133.0778,9.2153,3.8943,2.8211,61,1); //
		CreateTWVehicle(476,-129.0810,21.5817,3.8908,20.3696,61,1); //
		CreateTWVehicle(476,-122.3877,39.4676,3.8952,16.2629,61,1); //
		CreateTWVehicle(476,-117.5740,55.5491,3.8938,33.1020,61,1); //
		CreateTWVehicle(476,-108.5941,81.6260,3.8950,18.3405,61,1); //
		CreateTWVehicle(476,-102.7323,98.6808,3.8935,20.2348,61,1); //
		CreateTWVehicle(476,-277.1303,-36.7515,2.7728,326.2225,61,1); //
		CreateTWVehicle(476,-271.5659,-9.9760,2.7325,321.3139,61,1); //
		CreateTWVehicle(476,-261.0483,18.7387,2.7760,319.6138,61,1); //
		CreateTWVehicle(476,-252.0247,54.4096,2.6548,322.4003,61,1); //
		CreateTWVehicle(476,-238.7618,83.7891,2.7155,314.8447,61,1); //
		CreateTWVehicle(476,-227.8171,118.6557,2.8613,317.5537,61,1); //
		CreateTWVehicle(593,-216.2248,146.4860,4.2555,295.3553,23,57); //
		CreateTWVehicle(593,-200.6780,175.9875,8.9584,280.5300,23,57); //
		CreateTWVehicle(513,169.0054,20.7042,1.6811,34.5102,3,0); //
		CreateTWVehicle(513,182.5821,27.1470,1.9875,46.2429,3,0); //

        CreateTWVehicle(545,-1154.2173,-977.6176,129.3451,0.2611,0,0); // usa cars
		CreateTWVehicle(580,-1154.3990,-983.9781,129.3373,358.4313,0,0); //
		CreateTWVehicle(545,-1154.7018,-991.0671,129.3470,358.8179,0,0); //
		CreateTWVehicle(500,-1202.3567,-1025.6857,129.5121,174.5457,24,13); //
		CreateTWVehicle(468,-1195.9827,-1045.1584,128.8949,77.4249,2,59); //
		CreateTWVehicle(545,-1144.2515,-1056.2878,129.3500,8.8277,105,101); //
		CreateTWVehicle(545,-1037.3497,-948.8898,129.2814,181.4150,41,94); //
		CreateTWVehicle(468,-1074.6450,-1032.1138,129.1545,85.7348,4,12); //
		CreateTWVehicle(545,-1175.4452,-1182.9023,129.1180,111.9088,105,101); //
		CreateTWVehicle(545,-1120.2596,-1174.6255,129.2729,264.4343,54,19); //
		CreateTWVehicle(500,-1043.6559,-1148.4354,129.4536,175.2443,114,42); //
		CreateTWVehicle(500,-1054.4120,-1276.5652,129.3627,344.5709,41,70); //
		CreateTWVehicle(553,-1201.1147,-1200.4567,134.8699,97.1359,86,1); // usa planes
		CreateTWVehicle(476,-1217.8806,-1222.2578,134.3144,68.4478,81,1); //
		CreateTWVehicle(476,-1238.8770,-1223.3533,134.3096,71.6061,81,1); //
		CreateTWVehicle(476,-1257.1282,-1225.1587,134.3104,66.7352,81,1); //
		CreateTWVehicle(476,-1279.8293,-1226.7537,134.3015,72.9762,81,1); //
		CreateTWVehicle(476,-1260.4011,-1186.9802,134.3104,121.6987,81,1); //
		CreateTWVehicle(476,-1279.9464,-1190.3414,134.3068,142.0040,81,1); //
		CreateTWVehicle(476,-1300.5905,-1229.2229,134.3102,74.9630,81,1); //
		CreateTWVehicle(476,-1319.3013,-1229.8730,134.3104,73.5704,81,1); //
		CreateTWVehicle(476,-1222.0416,-1183.2251,134.3141,113.5422,81,1); //
		CreateTWVehicle(476,-1244.5327,-1184.9528,134.3205,114.8924,81,1); //
		CreateTWVehicle(476,-1297.1456,-1192.4563,134.3282,125.2536,81,1); //
		CreateTWVehicle(476,-1317.7987,-1191.8639,134.3065,123.2661,81,1); //
		CreateTWVehicle(476,-1334.0555,-1193.3910,134.3181,138.1193,81,1); //
		CreateTWVehicle(593,-1344.3107,-1230.3384,133.9880,93.5176,73,21); //
		CreateTWVehicle(432,-1086.1578,-946.2976,129.5316,91.2174,70,38); // usa tanks
		CreateTWVehicle(432,-1086.2015,-953.2641,129.5060,90.3088,70,38); //
		CreateTWVehicle(432,-1086.2003,-960.2415,129.4910,90.3020,70,38); //
		CreateTWVehicle(432,-1086.1985,-967.2088,129.5177,90.2574,70,38); //
		CreateTWVehicle(432,-1086.1962,-974.2015,129.4970,90.2795,70,38); //
		CreateTWVehicle(432,-1086.1940,-981.1687,129.5177,90.2559,70,38); //
		CreateTWVehicle(432,-1086.1917,-988.1572,129.4961,90.1787,70,38); //
		CreateTWVehicle(432,-1086.1893,-995.1246,129.5177,90.1931,70,38); //
		CreateTWVehicle(432,-1086.1769,-1002.0542,129.5219,90.1519,70,38); //
		CreateTWVehicle(432,-1086.1729,-1009.0281,129.5408,89.9454,70,38); //
		CreateTWVehicle(432,-1086.1707,-1016.0305,129.5300,89.8654,70,38); //
		CreateTWVehicle(432,-1086.1738,-1023.0676,129.5515,89.9715,70,38); //
		CreateTWVehicle(545,-2019.2664,-2433.8809,30.4454,35.1171,0,0); // japan cars
		CreateTWVehicle(545,-2009.2651,-2444.3103,30.4242,51.0343,0,0); //
		CreateTWVehicle(580,-2014.3324,-2439.4902,30.4571,47.7210,0,0); //
		CreateTWVehicle(500,-2090.6016,-2397.9163,30.6029,132.9441,64,106); //
		CreateTWVehicle(500,-2129.6555,-2402.3435,30.6058,139.9904,64,106); //
		CreateTWVehicle(500,-2244.3315,-2442.2126,30.9887,49.6752,64,106); //
		CreateTWVehicle(545,-2213.2532,-2431.5850,30.3998,288.2812,54,7); //
		CreateTWVehicle(545,-2170.5115,-2346.4368,30.3536,317.9541,54,7); //
		CreateTWVehicle(545,-2187.9585,-2291.7517,30.2741,127.2875,54,7); //
		CreateTWVehicle(545,-2171.1992,-2238.9941,30.4543,97.9413,54,7); //
		CreateTWVehicle(468,-2214.1438,-2519.1201,30.2538,265.2667,71,118); //
		CreateTWVehicle(511,-2267.5969,-2470.2610,30.5009,41.6232,3,1); // jap planes
		CreateTWVehicle(476,-2259.9321,-2451.4333,29.8936,54.7216,3,1); //
		CreateTWVehicle(476,-2272.0718,-2436.6624,29.9324,59.5344,3,1); //
		CreateTWVehicle(476,-2299.4094,-2409.0271,29.9034,78.9695,3,1); //
		CreateTWVehicle(476,-2318.6455,-2389.0557,29.8967,68.0841,8,1); //
		CreateTWVehicle(476,-2308.2754,-2397.2742,29.9600,63.3029,3,1); //
		CreateTWVehicle(476,-2328.7034,-2373.7605,30.0291,52.0586,3,1); //
		CreateTWVehicle(476,-2343.2131,-2352.3472,29.8993,55.4248,3,1); //
		CreateTWVehicle(476,-2287.8503,-2478.6140,29.8999,18.5287,3,1); //
		CreateTWVehicle(476,-2302.7947,-2462.2646,29.9000,22.0959,3,1); //
		CreateTWVehicle(476,-2300.7732,-2464.6755,29.9091,25.7633,3,1); //
		CreateTWVehicle(476,-2315.3572,-2446.4968,29.8997,21.9769,3,1); //
		CreateTWVehicle(476,-2329.3271,-2430.0129,29.9000,28.1524,3,1); //
		CreateTWVehicle(476,-2342.6548,-2415.1335,29.9008,21.7886,3,1); //
		CreateTWVehicle(476,-2351.9404,-2402.7024,29.9106,27.0599,3,1); //
		CreateTWVehicle(476,-2360.3223,-2392.5945,29.9178,26.9011,3,1); //
		CreateTWVehicle(476,-2375.4839,-2373.3726,29.9004,19.0333,3,1); //
		CreateTWVehicle(432,-1982.2467,-2444.1785,30.6973,322.3996,37,74); //
		CreateTWVehicle(432,-1982.5662,-2456.3635,30.6220,233.4393,37,74); //
		CreateTWVehicle(432,-1972.5742,-2465.5642,30.8950,298.0714,37,74); //
		CreateTWVehicle(432,-1966.7939,-2450.4045,30.6887,56.6541,37,74); //
		CreateTWVehicle(432,-1959.8197,-2444.9292,30.6845,24.0564,37,74); //
		CreateTWVehicle(432,-1941.8300,-2456.7798,30.8299,166.4561,37,74); //
		CreateTWVehicle(432,-1941.2981,-2470.9500,31.1964,161.3416,37,74); //
		CreateTWVehicle(432,-1957.0056,-2480.6040,30.7949,57.9114,37,74); //
		CreateTWVehicle(432,-1933.1345,-2450.2095,30.6749,315.3168,37,74); //
		CreateTWVehicle(432,-1924.1498,-2435.1165,30.6831,36.5192,37,74); //
		CreateTWVehicle(432,-1908.3889,-2434.8008,31.2101,143.8786,37,74); //
		CreateTWVehicle(432,-1911.8597,-2458.3774,31.0407,202.5196,37,74); //
		CreateTWVehicle(432,-1920.9479,-2474.3242,31.1741,93.5538,37,74); //
		CreateTWVehicle(432,-2062.3821,-2394.5823,30.6842,273.1996,37,74); //
		CreateTWVehicle(432,-2040.3893,-2384.4785,30.6910,345.6676,37,74); //
		CreateTWVehicle(432,-2040.8976,-2375.9185,30.6905,25.8868,37,74); //
		CreateTWVehicle(432,-2052.8694,-2363.2209,30.6804,42.6846,37,74); //
		CreateTWVehicle(432,-2066.4646,-2351.2405,30.6912,29.5546,37,74); //
		CreateTWVehicle(432,-2079.1570,-2345.6282,30.6844,149.4819,37,74); //
		CreateTWVehicle(432,-2084.8210,-2375.8474,30.6839,245.5363,37,74); //
		CreateTWVehicle(432,-2069.4517,-2414.0159,30.6818,259.8202,37,74); //
		CreateTWVehicle(432,-2163.7119,-2241.3625,30.6893,68.7135,37,74); //

		//other cars
		CreateTWVehicle(478,-81.7686,-1199.1636,2.3841,225.2835,0,0); //
		CreateTWVehicle(478,-1631.9449,-1455.0005,59.3131,60.1196,0,0); //
		CreateTWVehicle(478,2547.8713,-796.0638,88.6763,345.6199,0,0); //
	}
    if(TWInfo[Map]==NorthernSA)
    {

        CreateSupplies(0, TW, -1130.0,2275.0);
	    CreateSupplies(1, TW, -781.0,2414.0);
	    CreateSupplies(2, TW, -667.0,953.0);
	    CreateSupplies(3, TW, 29.0,2234.0);
	    CreateSupplies(4, TW, -324.0,1702.0);
	    CreateSupplies(5, TW, -422.0,2213.0);
	    CreateSupplies(6, TW, -789.0,2582.0);
	    CreateSupplies(7, TW, -706.0,2062.0);

        TWInfo[pAtom] = CreateTWPickUps(1274, 2,-423.9521,1383.2028,14.2469,W_TW);

	    TWInfo[WeapShop][0]=CreateTWPickUps(1274, 2,-553.4377,2593.6738,53.9348,W_TW);// gunshop 1
	    TWInfo[WeapShop][1]=CreateTWPickUps(1274, 2,-688.1757,932.4590,13.6328,W_TW);// gunshop 1
		TWInfo[WeapShop][2]=CreateTWPickUps(1274, 2,-2014.2509,2589.7290,92.1182,W_TW);// gunshop 1

		TWInfo[pRefill][0]=CreateTWPickUps(1210, 2,-2257.7581,2562.1094,4.5851,W_TW);//
		TWInfo[pRefill][1]=CreateTWPickUps(1210, 2,-1509.4552,1975.4136,48.4171,W_TW);//
		TWInfo[pRefill][2]=CreateTWPickUps(1210, 2,-734.0106,1546.2145,39.0130,W_TW);//
		TWInfo[pRefill][3]=CreateTWPickUps(1210, 2,-213.0398,1766.8326,101.3613,W_TW);//
		TWInfo[pRefill][4]=CreateTWPickUps(1210, 2,384.2226,2603.7002,16.4844,W_TW);//
		TWInfo[pRefill][5]=CreateTWPickUps(1210, 2,-971.9948,2734.7493,45.86496,W_TW);
		TWInfo[pRefill][6]=CreateTWPickUps(1210, 2,374.8986,1944.3438,17.6406,W_TW);
		TWInfo[pRefill][7]=CreateTWPickUps(1210, 2,606.9611,884.1628,-43.1867,W_TW);

		TWInfo[pGetIn][USA]=CreateTWPickUps(1273, 23,-30.4667,1013.3097,20.0187, W_TW);
	    TWInfo[pGetIn][BRITISH]=CreateTWPickUps(1273, 23,-755.0980,1631.9944,27.1488, W_TW);
	    TWInfo[pGetIn][GERMANY]=CreateTWPickUps(1273, 23,272.6254,2636.7156,16.9598, W_TW);
	    TWInfo[pGetIn][JAPAN]=CreateTWPickUps(1273, 23,-230.6357,2789.4805,61.9794, W_TW);
	    TWInfo[pGetIn][RUSSIA]=CreateTWPickUps(1273, 23,-1651.1227,2564.4458,84.3645, W_TW);
	    TWInfo[pGetIn][ITALY]=CreateTWPickUps(1273, 23,233.2182,2017.8849,17.8253, W_TW);
	    TWInfo[pGetIn][BALKAN]=CreateTWPickUps(1273, 23,-370.0750,1534.4694,75.3594, W_TW);
	    TWInfo[pGetOut]=CreateTWPickUps(1273, 23,-795.1531,492.2133,1367.3649, -1);


	    CreateZone("German land",AXIS,GERMANY,0,293.5587,2401.3181,16.1,120,120,120,120);
	    CreateZone("Balkan land",ALLIES,BALKAN,1,-339.6965,1859.3923,45.1603,120,120,120,120);
	    CreateZone("USA land",ALLIES,USA,2,-213.4101,1176.6090,19.7,120,120,120,120);
	    CreateZone("Japanese land",AXIS,JAPAN,3,-254.4059,2603.0266,62.8,120,120,120,120);
	    CreateZone("Italian land",AXIS,ITALY,4,109.3779,1843.4926,17.6406,120,120,120,120);
	    CreateZone("British land",ALLIES,BRITISH,5,-788.5254,1422.1056,13.9453,120,120,120,120);
	    CreateZone("Soviet land",ALLIES,RUSSIA,6,-1478.3301,2622.9031,58.78134,120,120,120,120);

	    CreateZone("Vehicle factory",NOPOWER,-1,7,193.1729,1401.8845,10.5859,70,80,80,70);
	    CreateZone("Fuel ship",NOPOWER,-1,8,-1422.8157,1490.1552,1.8672,170,20,40,20);
	    CreateZone("Ammunition ship",NOPOWER,-1,9,-2471.4556,1539.8333,33.2344,170,20,40,20);
		CreateZone("Fuel wells land",NOPOWER,-1,10,599.2071,1245.9226,11.7188,70,80,80,70);
	    CreateZone("Mine factory",NOPOWER,-1,11,679.3915,824.8904,-38.9921,70,80,80,70);
	    CreateZone("Harbor",NOPOWER,-1,12,-2442.6633,2301.5122,4.9843,70,80,80,70);



	    CreateShip(TW,"British ship, Belfast","Belfast",100,ALLIES,SHIP,-706, 1692,4,0,0,0);
		CreateShip(TW,"British submarine, Upholder","Upholder",100,ALLIES,SUB,-596,1382,1,0,0,90);
	    CreateShip(TW,"British submarine, Olympus","Olympus",100,ALLIES,SUB,-720,1889,1,0,0,90);
	    CreateShip(TW,"British ship, Duke of York","Duke of York",100,ALLIES,SHIP,-1402,1320,4,0,0,0);
	    CreateShip(TW,"American ship, Dixmude","Dixmude",100,ALLIES,SHIP,-655,529,4,0,0,0);
	    CreateShip(TW,"American submarine, Fall River","Fall River",100,ALLIES,SUB,-330.4052,414.6258,1,0,0,90);
	    CreateShip(TW,"American ship, Appalachian","Appalachian",100,ALLIES,SHIP,199,263,4,0,0,0);
	    CreateShip(TW,"British ship, Ancylus","Ancylus",100,ALLIES,SHIP,-2161,2182,4,0,0,0);

	    CreateShip(TW,"Italian ship, Gato","Gato",100,AXIS,SHIP,244,487,4,0,0,0);
	    CreateShip(TW,"German submarine, Iltis","Itlis",100,AXIS,SUB,699,549,1,0,0,90);
	    CreateShip(TW,"German submarine, Niedersachsen","Niedersachsen",100,AXIS,SUB,941,2989,1,0,0,90);
	    CreateShip(TW,"German ship, Coronel","Coronel",100,AXIS,SHIP,210.9318,3008,4,0,0,0);
	    CreateShip(TW,"Japanese submarine, Asahi","Asahi",100,AXIS,SUB,-1848,2970,1,0,0,90);
	    CreateShip(TW,"Japanese ship, Shokaku","Shokaku",100,AXIS,SHIP,-2409,2946,4,0,0,0);
		CreateShip(TW,"German ship, Albatros","Albatros",100,AXIS,SHIP,-2625,1867,4,0,0,0);
	    CreateShip(TW,"German ship, Bismarck","Bismarck",100,AXIS,SHIP,-2803,1701,4,0,0,0);


		//german
        CreateTWAATower(AXIS,374.1225,2471.0444,31.5666);
		CreateTWAATower(AXIS,223.4132,2566.1248,31.5681);
		CreateTWAATower(AXIS,290.4521,2568.2693,31.5681);
		CreateTWAATower(AXIS,239.8713,2465.0444,31.5681);
		CreateTWAATower(AXIS,208.1117,2360.0493,31.5681);
		//italy
		CreateTWAATower(AXIS,179.2504,2090.6509,33.4681);
		CreateTWAATower(AXIS,196.7844,1947.6206,33.4681);
		CreateTWAATower(AXIS,227.2522,1876.7104,33.4681);
		CreateTWAATower(AXIS,280.0067,1791.4984,33.4681);
		CreateTWAATower(AXIS,350.5121,1805.7111,33.4681);
		CreateTWAATower(AXIS,382.3357,1893.0155,33.4681);
		CreateTWAATower(AXIS,116.3088,1890.4725,33.6881);
		CreateTWAATower(AXIS,250.1381,1966.7975,32.7581);
		CreateTWAATower(AXIS,254.2190,2067.1729,32.7581);
		//japan
		CreateTWAATower(AXIS,-369.5478,2703.8662,78.8472);
		CreateTWAATower(AXIS,-369.8567,2670.2041,79.8472);
		CreateTWAATower(AXIS,-296.8448,2612.8401,77.6491);
		CreateTWAATower(AXIS,-241.3194,2590.7461,77.7813);
		CreateTWAATower(AXIS,-204.8669,2590.4326,77.78137);
		CreateTWAATower(AXIS,-178.7645,2622.9143,77.78132);
		CreateTWAATower(AXIS,-178.7645,2622.9143,77.7813);
		CreateTWAATower(AXIS,-144.9169,2647.7991,77.7813);
		CreateTWAATower(AXIS,-191.0977,2790.3228,78.6172);
		CreateTWAATower(AXIS,-293.3741,2771.3171,78.0012);

		///soviet
		CreateTWAATower(ALLIES,-1435.6100,2511.0686,73.9781);
        CreateTWAATower(ALLIES,-1515.4872,2768.4258,95.3481);
        CreateTWAATower(ALLIES,-1361.5105,2806.0125,101.0981);
        CreateTWAATower(ALLIES,-1634.3126,2593.2471,91.2881);
        CreateTWAATower(ALLIES,-1633.3425,2538.8804,96.4781);
        CreateTWAATower(ALLIES,-1562.4921,2488.0530,73.9781);
		//british
        CreateTWAATower(ALLIES,-726.5972,1640.9730,39.3181);
        CreateTWAATower(ALLIES,-778.5188,1624.1504,41.6281);
        CreateTWAATower(ALLIES,-748.8865,1509.3229,39.3181);
		//usa
        CreateTWAATower(ALLIES,-176.8873,1014.6535,34.5181);
        CreateTWAATower(ALLIES,-72.2197,1017.8937,34.9181);
        CreateTWAATower(ALLIES,14.4248,1023.9491,34.9181);
        CreateTWAATower(ALLIES,-25.6093,964.4114,34.9181);
		//balkan
        CreateTWAATower(ALLIES,-387.4752,1587.1389,90.3081);
		CreateTWAATower(ALLIES,-292.7018,1634.3690,79.6681);
		CreateTWAATower(ALLIES,-213.2845,1564.5748,74.9381);
		CreateTWAATower(ALLIES,-200.3796,1426.0691,82.9181);
		CreateTWAATower(ALLIES,-409.1393,1519.8022,89.4781);


        //germany cars
        CreateTWVehicle(476,264.3121,2530.6880,17.4289,100.4793,0,0); // ger rus id 37
		CreateTWVehicle(476,250.0458,2532.0286,17.4399,106.7439,0,0); // ger rus 38
		CreateTWVehicle(476,232.3387,2531.2317,17.4119,118.8086,0,0); // ger rus 39
		CreateTWVehicle(476,211.6267,2531.7710,17.4049,121.4122,0,0); // ger rus 40
		CreateTWVehicle(476,190.9214,2531.3396,17.4269,123.4566,0,0); // ger rus 41
		CreateTWVehicle(476,170.4698,2532.9890,17.3751,134.9161,0,0); // ger rus 42
		CreateTWVehicle(476,271.8390,2471.1768,17.1830,60.8590,0,0); // ger rus 43
		CreateTWVehicle(476,251.9192,2473.5295,17.1886,62.6363,0,0); // ger rus 44
		CreateTWVehicle(476,197.1993,2475.7983,17.1832,69.8742,0,0); // ger rus 47
		CreateTWVehicle(476,176.0396,2472.9539,17.1905,57.5100,0,0); // ger rus 48
		CreateTWVehicle(432,367.5539,2602.3816,16.5015,189.1635,121,100); // ger rhi 58
		CreateTWVehicle(432,320.6262,2585.7717,16.5664,174.3109,78,109); // ger rhi 60
		CreateTWVehicle(432,266.2132,2588.2310,16.4819,175.3255,42,32); // ger rhi 63
		CreateTWVehicle(432,241.0770,2588.4089,16.4550,178.9019,94,6); // ger rhi 64
		CreateTWVehicle(432,199.0165,2585.7092,16.3970,180.1989,25,93); // ger rhi 66
		CreateTWVehicle(553,137.8791,2544.9614,17.7900,132.3764,0,1); // ger neva 68
		CreateTWVehicle(553,148.8407,2465.8562,17.8235,46.3292,2,69); // ger neva 69
		CreateTWVehicle(593,305.1993,2460.2092,16.9379,7.4051,121,3); // 71
		CreateTWVehicle(513,290.5033,2540.5476,17.8643,175.5360,122,1); // ger stuntplane 73
		CreateTWVehicle(605,354.2705,2391.7410,16.2375,7.5882,48,91); // 78
		CreateTWVehicle(545,349.4257,2390.1133,16.1958,13.1666,8,38); // 79
		CreateTWVehicle(580,311.3259,2381.5388,16.1540,357.3949,72,83); // 80
		CreateTWVehicle(545,237.4606,2382.6824,16.1939,54.8073,3,6); // 81
		CreateTWVehicle(576,244.9049,2546.9211,16.3146,0.3903,75,82); //83
		CreateTWVehicle(432,330.8555,2543.9763,16.9699,4.8891,85,48); // ger rhino
		CreateTWVehicle(432,320.0063,2545.3047,16.9951,1.3155,58,109); // ger rhino
		CreateTWVehicle(432,325.7333,2543.5950,16.9718,4.5019,75,32); // ger rhino
		CreateTWVehicle(432,306.7749,2546.7888,16.9948,180.3782,25,32); // ger rhino
		CreateTWVehicle(432,200.1214,2602.0674,16.7176,175.7486,61,49); // ger rhino
		CreateTWVehicle(432,193.0025,2589.6531,16.6970,175.1700,124,70); //
		CreateTWVehicle(576,225.9346,2373.6689,16.3014,354.4214,38,108); // ger car
		CreateTWVehicle(545,276.6335,2610.6995,16.3064,74.9875,0,0); //
		CreateTWVehicle(580,267.9679,2613.1968,16.3176,74.9875,0,0); //
		CreateTWVehicle(580,284.4283,2608.9658,16.2685,75.9293,0,0); //
		CreateTWVehicle(476,208.1906,2544.2476,17.3246,126.2779,0,0); //
		CreateTWVehicle(476,182.8719,2546.9167,17.2450,128.7123,0,0); //
		CreateTWVehicle(476,135.0660,2565.2935,17.0754,111.6903,0,0); //
		CreateTWVehicle(553,165.7325,2559.2253,17.8280,123.7217,0,1); //
		CreateTWVehicle(513,170.9477,2451.8237,17.0254,354.5204,0,3); // ger plane
		CreateTWVehicle(512,179.9553,2457.7305,16.7906,18.2556,0,3); //
		CreateTWVehicle(513,193.1757,2461.4275,17.0373,16.7110,0,3); // ger plane

		//italy cars
        CreateTWVehicle(553,308.5439,2046.2156,18.9752,178.7833,61,49); // italy
		CreateTWVehicle(476,325.3965,1994.7352,18.3543,156.0287,7,6); //
		CreateTWVehicle(476,324.9933,1982.2422,18.3441,153.5255,76,6); //
		CreateTWVehicle(476,324.8029,1965.5206,18.3528,153.2404,123,2); //
		CreateTWVehicle(476,325.2600,1952.5248,18.3455,157.5004,56,61); //
		CreateTWVehicle(476,325.2985,1939.0789,18.3466,161.0432,24,120); //
		CreateTWVehicle(476,324.8354,1925.7006,18.3533,154.2633,44,109); //
		CreateTWVehicle(476,326.0530,1911.7007,18.3641,147.0356,105,87); //
		CreateTWVehicle(545,242.2959,2019.8418,17.6334,179.1140,0,0); // ita ca
		CreateTWVehicle(580,242.3742,2026.7855,17.5754,180.6975,0,0); //
		CreateTWVehicle(580,242.1222,2010.4985,17.5867,178.7397,0,0); //
		CreateTWVehicle(432,269.6181,2076.4563,17.7999,178.4287,26,110); // ita rhi
		CreateTWVehicle(432,276.6913,2076.4819,17.7983,181.2618,29,38); // ita rhi
		CreateTWVehicle(432,284.6298,2076.7078,17.8069,177.9124,88,92); // ita rhi
		CreateTWVehicle(432,293.6267,2076.9412,17.7970,178.1523,24,87); // ita rhi
		CreateTWVehicle(432,301.4071,2077.1658,17.7985,181.0534,12,28); // ita rhi
		CreateTWVehicle(576,209.3441,1952.3463,17.2487,235.4503,41,30); // ita car
		CreateTWVehicle(432,212.9255,1958.9559,17.8121,237.2353,88,69); // ita rhi
		CreateTWVehicle(545,278.7993,1938.9166,17.4517,271.8671,66,2); // ita car
		CreateTWVehicle(512,274.3372,2032.1827,17.9230,245.3417,121,49); // plane
		CreateTWVehicle(513,276.7565,2015.6942,18.1934,297.0322,61,124); //
		CreateTWVehicle(511,345.5503,2020.3198,23.9487,155.1218,3,3); // plane
		CreateTWVehicle(593,344.0204,1996.4291,18.1739,149.7012,8,108); //
		CreateTWVehicle(545,273.9911,1978.1023,17.4513,281.4290,35,112); //
		CreateTWVehicle(476,278.6413,1988.7587,18.4182,264.0506,86,16); //
		CreateTWVehicle(476,339.5450,1975.2417,18.4179,131.3699,123,2); // rustl
		CreateTWVehicle(468,370.6407,1951.7427,17.3087,37.6003,37,61); //
		CreateTWVehicle(432,273.8130,1945.4174,17.8142,273.7208,113,19); // rhi
		CreateTWVehicle(432,274.1673,1966.7233,17.8015,269.4377,66,106); // rhi
		CreateTWVehicle(432,278.4427,1957.4335,17.8034,268.4350,24,50); // rhi
		CreateTWVehicle(468,289.6194,1819.7220,17.2909,239.9960,110,74); //
		CreateTWVehicle(580,286.7353,1799.7932,17.4368,258.3848,26,63); //
		CreateTWVehicle(545,152.7299,1880.2673,17.9189,61.0150,106,100); //
		CreateTWVehicle(545,131.8964,2017.8074,18.4639,117.1187,62,120); //
		CreateTWVehicle(432,167.8374,2035.6866,18.1662,233.3831,31,60); //

		//japan
		CreateTWVehicle(553,-72.0660,2758.1838,74.0632,185.7383,0,3); // japanese neva
		CreateTWVehicle(593,-50.4396,2769.6406,73.1844,185.4427,114,81); //
		CreateTWVehicle(593,-100.4089,2762.6104,73.1787,182.9349,9,124); //
		CreateTWVehicle(476,-102.1138,2747.9380,73.6475,202.9955,0,3); //
		CreateTWVehicle(476,-98.2642,2727.0491,73.6478,203.7027,25,4); //
		CreateTWVehicle(476,-97.3099,2709.4053,73.6481,205.0862,56,14); //
		CreateTWVehicle(476,-95.9058,2690.3784,73.6350,202.1656,94,41); //
		CreateTWVehicle(476,-90.9858,2673.7354,73.6448,203.4021,56,14); //
		CreateTWVehicle(476,-47.4820,2747.8254,73.6477,157.6489,78,66); //
		CreateTWVehicle(476,-43.8925,2725.0383,73.6588,159.9671,78,66); //
		CreateTWVehicle(476,-40.1472,2701.3281,73.6447,160.0558,78,66); //
		CreateTWVehicle(476,-36.1151,2670.5574,73.6463,173.7514,78,66); //
		CreateTWVehicle(432,-262.0086,2758.5437,62.6059,183.6825,35,67); //
		CreateTWVehicle(432,-250.4353,2774.0457,62.7244,192.9681,97,120); //
		CreateTWVehicle(432,-202.8347,2729.7312,62.8503,89.5837,3,99); //
		CreateTWVehicle(432,-213.6026,2734.5608,62.8568,0.7683,18,53); //
		CreateTWVehicle(432,-194.2344,2763.4763,62.4820,89.6601,118,72); //
		CreateTWVehicle(432,-155.5042,2723.7249,62.1685,83.0160,111,28); //
		CreateTWVehicle(432,-158.4833,2715.0806,62.5031,273.0008,87,21); //
		CreateTWVehicle(432,-146.0900,2711.8401,62.1584,258.5838,37,57); //
		CreateTWVehicle(545,-229.5244,2778.6318,62.2596,81.3804,0,0); //
		CreateTWVehicle(580,-236.4747,2779.7454,61.8971,84.0770,0,0); //
		CreateTWVehicle(545,-307.0377,2718.5393,62.4744,181.5199,24,10); //
		CreateTWVehicle(500,-289.3607,2651.4382,62.9940,178.3715,9,61); //
		CreateTWVehicle(586,-241.5338,2617.6978,62.2778,179.5284,101,103); //
		CreateTWVehicle(500,-211.0205,2618.7502,62.9680,0.4393,38,51); //
		CreateTWVehicle(545,-192.6401,2605.3818,62.1441,175.6140,25,124); //
		CreateTWVehicle(509,-173.1343,2598.7324,59.7836,269.7744,76,53); //

        CreateTWVehicle(545,-1640.9371,2564.8350,83.6199,355.6663,0,0); // russia vehicles
		CreateTWVehicle(580,-1642.0620,2559.7146,83.9790,348.2362,0,0); //
		CreateTWVehicle(580,-1639.7566,2571.3926,83.0888,5.6381,0,0); //
		CreateTWVehicle(553,-1518.1613,2478.3279,58.5479,179.3537,6,0); //
		CreateTWVehicle(511,-1495.4116,2484.0156,58.5884,178.5300,57,84); //
		CreateTWVehicle(511,-1543.8374,2477.8264,58.5857,178.4530,98,85); //
		CreateTWVehicle(476,-1549.3081,2459.0713,58.1347,204.9998,0,3); //
		CreateTWVehicle(476,-1546.5618,2440.6155,58.1411,207.8994,0,3); //
		CreateTWVehicle(476,-1490.7440,2468.3955,58.1408,140.4970,0,3); //
		CreateTWVehicle(476,-1490.3058,2438.4614,58.1354,142.4095,0,3); //
		CreateTWVehicle(476,-1515.1960,2457.9456,58.1391,183.3680,0,3); //
		CreateTWVehicle(476,-1517.0288,2435.5828,58.1344,182.1362,0,3); //
		CreateTWVehicle(545,-1539.0028,2587.6306,55.6523,322.9927,36,75); //
		CreateTWVehicle(531,-1483.9540,2609.7773,55.8106,270.2819,103,48); //
		CreateTWVehicle(580,-1474.8970,2647.3218,55.6372,188.1355,33,107); //
		CreateTWVehicle(432,-1478.1190,2670.3337,55.8325,123.9838,41,50); //
		CreateTWVehicle(432,-1529.2103,2678.2976,55.9826,18.0853,41,50); //
		CreateTWVehicle(432,-1551.2677,2647.3672,55.9250,180.6438,41,50); //
		CreateTWVehicle(432,-1521.2264,2599.4875,55.8742,346.0993,41,50); //
		CreateTWVehicle(432,-1417.4023,2595.4895,55.9012,256.3282,41,50); //
		CreateTWVehicle(432,-1452.1798,2631.8452,55.9991,89.4309,24,44); //
		CreateTWVehicle(545,-1530.6949,2541.1882,55.5945,97.2560,81,88); //

		CreateTWVehicle(545,-754.8976,1609.6249,26.9283,89.9949,0,4); // brit
		CreateTWVehicle(580,-746.4976,1608.3560,26.9131,91.7918,0,0); //
		CreateTWVehicle(580,-764.6345,1607.8610,26.9133,92.7966,0,0); //
		CreateTWVehicle(432,-791.7717,1599.4222,27.2790,179.3615,55,122); //
		CreateTWVehicle(432,-773.1081,1616.3450,27.2773,312.1233,55,122); //
		CreateTWVehicle(432,-745.6578,1577.7814,27.1191,233.1120,55,122); //
		CreateTWVehicle(432,-752.1757,1549.6129,27.1632,186.4604,55,122); //
		CreateTWVehicle(432,-809.9510,1542.3169,27.1403,75.6617,55,122); //
		CreateTWVehicle(432,-810.6985,1608.3199,27.1206,11.8723,55,122); //
		CreateTWVehicle(432,-832.3416,1629.8859,27.2734,67.3432,55,122); //
		CreateTWVehicle(432,-867.1721,1622.8948,27.1165,146.8709,55,122); //
		CreateTWVehicle(432,-893.9644,1492.4642,24.6064,212.2655,55,122); //
		CreateTWVehicle(432,-824.4272,1498.6041,19.5355,270.6491,55,122); //
		CreateTWVehicle(432,-760.8464,1432.8099,14.6669,174.9200,55,122); //
		CreateTWVehicle(432,-742.8835,1472.1163,21.8561,120.8461,55,122); //
		CreateTWVehicle(432,-666.0337,1463.2565,14.8929,18.6725,55,122); //
		CreateTWVehicle(553,-632.4114,1591.7313,24.5082,241.7430,63,96); //
		CreateTWVehicle(476,-703.5444,1627.1077,24.0980,282.3161,104,26); //
		CreateTWVehicle(476,-701.0137,1641.9136,24.0978,251.9485,104,26); //
		CreateTWVehicle(476,-679.6993,1640.0955,24.1138,244.2868,104,26); //
		CreateTWVehicle(476,-657.6963,1641.1534,24.0983,240.0550,104,26); //
		CreateTWVehicle(476,-631.8568,1639.6243,24.0958,227.8796,104,26); //
		CreateTWVehicle(476,-651.1915,1608.6647,24.1073,261.2593,87,93); //

		CreateTWVehicle(545,-357.1065,1548.6287,75.3736,355.3975,0,0); // fra
		CreateTWVehicle(580,-358.0210,1541.0754,75.3555,350.3685,0,0); //
		CreateTWVehicle(580,-355.4565,1558.4575,75.3422,350.2520,0,0); //
		CreateTWVehicle(593,-289.3047,1541.4805,76.6611,239.4101,46,0); //
		CreateTWVehicle(593,-289.4302,1505.1904,76.6592,293.4933,113,14); //
		CreateTWVehicle(511,-288.6455,1523.1663,77.5775,271.3116,115,22); //
		CreateTWVehicle(476,-267.6476,1507.0422,77.1270,288.6087,118,113); //
		CreateTWVehicle(476,-249.1812,1507.2606,77.1288,283.1129,118,113); //
		CreateTWVehicle(476,-222.7659,1507.8646,77.1250,285.7095,118,113); //
		CreateTWVehicle(476,-194.4285,1510.6818,77.1250,300.4865,118,113); //
		CreateTWVehicle(476,-271.6711,1540.0206,77.1312,232.2580,118,113); //
		CreateTWVehicle(476,-251.4611,1543.1599,77.1347,250.6656,118,113); //
		CreateTWVehicle(476,-237.1132,1543.6371,77.1327,257.5323,9,59); //
		CreateTWVehicle(476,-203.6626,1543.0609,77.1283,241.9518,9,59); //
		CreateTWVehicle(432,-323.8490,1571.1075,75.7095,312.3326,71,31); //
		CreateTWVehicle(432,-330.2676,1574.0077,75.7222,307.7274,71,31); //
		CreateTWVehicle(432,-343.5495,1561.0691,75.7265,315.6557,71,31); //
		CreateTWVehicle(432,-327.5267,1557.1758,75.7204,305.4911,71,31); //
		CreateTWVehicle(432,-288.6503,1562.5211,75.5203,312.3109,71,31); //
		CreateTWVehicle(432,-327.3818,1531.7062,75.5186,71.4739,71,31); //
		CreateTWVehicle(432,-337.9187,1498.0913,75.8527,199.8035,71,31); //
		CreateTWVehicle(432,-276.8311,1403.5459,72.6042,258.8410,71,31); //
		CreateTWVehicle(468,-241.0453,1628.9451,25.2607,38.2211,54,27); //
		CreateTWVehicle(432,-248.6153,1683.0846,28.1905,135.1444,28,13); //
		CreateTWVehicle(432,-295.7553,1684.6931,26.2296,125.0594,28,13); //
		CreateTWVehicle(545,-311.0562,1746.7966,42.6574,24.4564,31,120); //
		CreateTWVehicle(432,-327.2445,1763.3690,42.9247,16.5651,57,60); //
		CreateTWVehicle(432,-356.2629,1840.7815,42.4495,41.7050,57,60); //
		CreateTWVehicle(432,-359.8110,1823.6219,42.5336,250.3996,57,60); //
		CreateTWVehicle(432,-307.3683,1808.9327,42.7100,221.7622,57,60); //
		CreateTWVehicle(432,-393.1834,1740.3157,42.2171,102.0316,57,60); //
		CreateTWVehicle(432,-78.9599,1077.6825,19.8988,180.0618,57,60); //
		CreateTWVehicle(432,-85.2580,1078.3164,19.8977,181.2926,57,60); //
		CreateTWVehicle(432,-89.8543,1079.3220,19.9602,181.6639,57,60); //
		CreateTWVehicle(432,-79.3566,1054.8610,19.9015,80.9119,57,60); //
		CreateTWVehicle(432,-92.6507,1053.9719,19.9016,195.1752,57,60); //
		CreateTWVehicle(432,-102.6100,1058.3043,19.9156,3.1094,57,60); //
		CreateTWVehicle(432,-119.5495,1054.0762,20.0097,176.6021,57,60); //
		CreateTWVehicle(432,-220.1809,993.6613,19.7389,102.9164,57,60); //

		CreateTWVehicle(580,-39.2383,1028.9420,19.4627,273.9618,0,0); // usa
		CreateTWVehicle(545,-30.7357,1028.3942,19.4850,270.0501,0,0); //
		CreateTWVehicle(545,-47.7834,1028.7213,19.4833,267.3303,0,0); //
		CreateTWVehicle(468,-34.8277,1071.1104,19.6867,182.2000,25,1); //
		CreateTWVehicle(463,4.0766,1084.8386,19.3125,95.5164,50,44); //
		CreateTWVehicle(545,-13.4258,1218.0374,19.1643,87.1767,83,99); //
		CreateTWVehicle(545,-12.3844,1222.1106,19.1781,110.5909,123,62); //
		CreateTWVehicle(545,-52.0398,1165.9319,19.4392,180.7206,83,97); //
		CreateTWVehicle(545,-44.1549,1165.8999,19.3692,176.7601,81,61); //
		CreateTWVehicle(580,-37.0418,1167.2150,19.2696,178.2413,59,34); //
		CreateTWVehicle(432,-151.8271,1177.8081,19.9097,327.8329,91,67); //
		CreateTWVehicle(432,-199.9733,1169.3074,19.8111,143.0104,91,67); //
		CreateTWVehicle(432,-228.6798,1092.1404,19.8445,139.0155,91,67); //
		CreateTWVehicle(432,-251.3914,1067.6965,20.2786,180.2052,91,67); //
		CreateTWVehicle(509,-223.3371,1028.6067,19.2364,249.8829,6,0); //
		CreateTWVehicle(511,-37.5938,870.6519,29.7654,285.7533,37,74); //
		CreateTWVehicle(476,-20.1887,889.3925,28.8533,266.2438,95,32); // rus
		CreateTWVehicle(476,-2.4924,896.4875,28.8535,263.8515,79,72); // rus
		CreateTWVehicle(476,13.4492,905.0292,28.8515,270.0944,114,96); // rus
		CreateTWVehicle(476,29.5253,909.7354,28.8508,274.0404,85,74); // rus
		CreateTWVehicle(476,47.7580,916.8165,28.8500,272.3819,75,99); // rus
		CreateTWVehicle(476,28.1582,876.7002,28.8565,308.3481,10,86); //
		CreateTWVehicle(476,56.1760,880.4853,28.8516,272.6788,10,86); //

		//othersss
		CreateTWVehicle(576,-545.5590,2605.1938,53.1250,88.6298,114,121); //
		CreateTWVehicle(545,-643.1405,2715.3228,72.1012,44.0357,79,69); //
		CreateTWVehicle(545,-802.9941,2753.2209,45.6087,356.4373,79,0); //
		CreateTWVehicle(576,-901.9763,2687.5039,42.0033,48.2722,78,24); //
		CreateTWVehicle(460,-918.4846,2652.7744,42.3008,140.8547,97,71); //
		CreateTWVehicle(472,-929.2021,2660.8911,40.6067,131.5335,94,101); //

        CreateTWVehicle(478,-1809.6825,2029.6006,9.6114,26.5290,92,92); //minigun car
        CreateTWVehicle(478,713.2307,1444.0857,16.4191,40.9924,0,0); //minigun car
    }
	//printf("DEBUG CFONTROL TWMapChange 2");
}

stock CreateDamateTexts()
{
    DamageTxTInfo[DAMAGE_TXT_TANK][dX][0] = 319.999938;
	DamageTxTInfo[DAMAGE_TXT_TANK][dY][0] = 124.444412;

	DamageTxTInfo[DAMAGE_TXT_TANK][dX][1] = 320.166809;
	DamageTxTInfo[DAMAGE_TXT_TANK][dY][1] = 116.629623;

	DamageTxTInfo[DAMAGE_TXT_SNIPER][dX][0] = 320.416534;
	DamageTxTInfo[DAMAGE_TXT_SNIPER][dY][0] = 218.814804;

	DamageTxTInfo[DAMAGE_TXT_SNIPER][dX][1] = 320.166839;
	DamageTxTInfo[DAMAGE_TXT_SNIPER][dY][1] = 211.518508;

	DamageTxTInfo[DAMAGE_TXT_NORMAL][dX][0] = 339.166656;
	DamageTxTInfo[DAMAGE_TXT_NORMAL][dY][0] = 173.703689;

	DamageTxTInfo[DAMAGE_TXT_NORMAL][dX][1] = 339.333343;
	DamageTxTInfo[DAMAGE_TXT_NORMAL][dY][1] = 166.407348;

	DamageTxTInfo[DAMAGE_TXT_LAUNCHER][dX][0] = 323.749969;
	DamageTxTInfo[DAMAGE_TXT_LAUNCHER][dY][0] = 223.481475;

	DamageTxTInfo[DAMAGE_TXT_LAUNCHER][dX][1] = 323.500091;
	DamageTxTInfo[DAMAGE_TXT_LAUNCHER][dY][1] = 216.185180;

	forLoop(id, DAMAGE_TXT_MAX)
	{
		new name[2][10];
	    DamageTxTInfo[id][sizX][0] = 0.587499;
	    DamageTxTInfo[id][sizY][0] = 0.982963;

	    DamageTxTInfo[id][sizX][1] = 0.176664;
	    DamageTxTInfo[id][sizY][1] = 0.905184;

		format(name[0], 10, "- -");
		format(name[1], 10, "i~n~~n~i");
		forLoop(i, 2)
		{
		    DamageTxTInfo[id][dTxt][i] = TextDrawCreate(DamageTxTInfo[id][dX][i], DamageTxTInfo[id][dY][i], name[i]);
			TextDrawLetterSize(DamageTxTInfo[id][dTxt][i], DamageTxTInfo[id][sizX][i], DamageTxTInfo[id][sizY][i]);
			TextDrawAlignment(DamageTxTInfo[id][dTxt][i], 2);
			TextDrawColor(DamageTxTInfo[id][dTxt][i], -1);
			TextDrawSetShadow(DamageTxTInfo[id][dTxt][i], 0);
			TextDrawSetOutline(DamageTxTInfo[id][dTxt][i], 1);
			TextDrawBackgroundColor(DamageTxTInfo[id][dTxt][i], 51);
			TextDrawFont(DamageTxTInfo[id][dTxt][i], 2);
			TextDrawSetProportional(DamageTxTInfo[id][dTxt][i], 1);
		}
	}
}

stock CreateServerTXTs()
{
    //introoo
	ServerInfo[mIntro_TD] = TextDrawCreate(909.999816, -31.353319, "usebox");
	TextDrawLetterSize(ServerInfo[mIntro_TD], 0.000000, 76.640014);
	TextDrawTextSize(ServerInfo[mIntro_TD], -52.400009, 0.000000);
	TextDrawAlignment(ServerInfo[mIntro_TD], 1);
	TextDrawColor(ServerInfo[mIntro_TD], 0);
	TextDrawUseBox(ServerInfo[mIntro_TD], true);
	TextDrawBoxColor(ServerInfo[mIntro_TD], 255);
	TextDrawSetShadow(ServerInfo[mIntro_TD], 0);
	TextDrawSetOutline(ServerInfo[mIntro_TD], 0);
	TextDrawFont(ServerInfo[mIntro_TD], 0);

	//===================[TW]========================
	TWInfo[WarBGTXT] = TextDrawCreate(609.916687, 135.277770, "usebox");
	TextDrawLetterSize(TWInfo[WarBGTXT], 0.000000, 1.296501);
	TextDrawTextSize(TWInfo[WarBGTXT], 495.916687, 0.000000);
	TextDrawAlignment(TWInfo[WarBGTXT], 1);
	TextDrawColor(TWInfo[WarBGTXT], 0);
	TextDrawUseBox(TWInfo[WarBGTXT], true);
	TextDrawBoxColor(TWInfo[WarBGTXT], 102);
	TextDrawSetShadow(TWInfo[WarBGTXT], 0);
	TextDrawSetOutline(TWInfo[WarBGTXT], 0);
	TextDrawFont(TWInfo[WarBGTXT], 0);

    TWInfo[ClassTXT] = TextDrawCreate(498.333221, 99.555534, " class");
	TextDrawLetterSize(TWInfo[ClassTXT], 0.162915, 1.314811);
	TextDrawTextSize(TWInfo[ClassTXT], 525.416625, 37.851825);
	TextDrawAlignment(TWInfo[ClassTXT], 1);
	TextDrawColor(TWInfo[ClassTXT], -1);
	TextDrawUseBox(TWInfo[ClassTXT], true);
	TextDrawBoxColor(TWInfo[ClassTXT], -902626614);
	TextDrawSetShadow(TWInfo[ClassTXT], 0);
	TextDrawSetOutline(TWInfo[ClassTXT], 1);
	TextDrawBackgroundColor(TWInfo[ClassTXT], 255);
	TextDrawFont(TWInfo[ClassTXT], 2);
	TextDrawSetProportional(TWInfo[ClassTXT], 1);

    TWInfo[RankTXT] = TextDrawCreate(498.499877, 117.666641, " rank");
	TextDrawLetterSize(TWInfo[RankTXT], 0.162915, 1.314811);
	TextDrawTextSize(TWInfo[RankTXT], 525.416625, 37.851825);
	TextDrawAlignment(TWInfo[RankTXT], 1);
	TextDrawColor(TWInfo[RankTXT], -1);
	TextDrawUseBox(TWInfo[RankTXT], true);
	TextDrawBoxColor(TWInfo[RankTXT], 864595146);
	TextDrawSetShadow(TWInfo[RankTXT], 0);
	TextDrawSetOutline(TWInfo[RankTXT], 1);
	TextDrawBackgroundColor(TWInfo[RankTXT], 255);
	TextDrawFont(TWInfo[RankTXT], 2);
	TextDrawSetProportional(TWInfo[RankTXT], 1);

	TWInfo[AlliesTXT] = TextDrawCreate(498.249938, 134.740722, "allies");
	TextDrawLetterSize(TWInfo[AlliesTXT], 0.162915, 1.314810);
	TextDrawTextSize(TWInfo[AlliesTXT], 540.416625, 38.370315);
	TextDrawAlignment(TWInfo[AlliesTXT], 1);
	TextDrawColor(TWInfo[AlliesTXT], -1);
	TextDrawSetShadow(TWInfo[AlliesTXT], 0);
	TextDrawSetOutline(TWInfo[AlliesTXT], 1);
	TextDrawBackgroundColor(TWInfo[AlliesTXT], 255);
	TextDrawFont(TWInfo[AlliesTXT], 2);
	TextDrawSetProportional(TWInfo[AlliesTXT], 1);

	TWInfo[AxisTXT] = TextDrawCreate(607.166564, 134.185134, "axis");
	TextDrawLetterSize(TWInfo[AxisTXT], 0.162915, 1.314810);
	TextDrawTextSize(TWInfo[AxisTXT], 540.416625, 38.370315);
	TextDrawAlignment(TWInfo[AxisTXT], 3);
	TextDrawColor(TWInfo[AxisTXT], -1);
	TextDrawSetShadow(TWInfo[AxisTXT], 0);
	TextDrawSetOutline(TWInfo[AxisTXT], 1);
	TextDrawBackgroundColor(TWInfo[AxisTXT], 255);
	TextDrawFont(TWInfo[AxisTXT], 2);
	TextDrawSetProportional(TWInfo[AxisTXT], 1);

	//===================[RP]========================
	RPInfo[HideMap] = GangZoneCreate(-3689.816162, -3250.380859, 3238.183837, 3341.619140);

    RPInfo[rplName] = TextDrawCreate(373.333404, 168.585128, "Last Name:");
	TextDrawLetterSize(RPInfo[rplName], 0.302333, 1.570963);
	TextDrawTextSize(RPInfo[rplName], 433.666564, 15.644449);
	TextDrawAlignment(RPInfo[rplName], 1);
	TextDrawColor(RPInfo[rplName], 563827914);
	TextDrawUseBox(RPInfo[rplName], false);
	TextDrawBoxColor(RPInfo[rplName], 255);
	TextDrawSetShadow(RPInfo[rplName], 0);
	TextDrawSetOutline(RPInfo[rplName], 1);
	TextDrawBackgroundColor(RPInfo[rplName], 255);
	TextDrawFont(RPInfo[rplName], 1);
	TextDrawSetProportional(RPInfo[rplName], 1);

    RPInfo[rpfName] = TextDrawCreate(371.666717, 143.111053, "First Name:");
	TextDrawLetterSize(RPInfo[rpfName], 0.302333, 1.570963);
	TextDrawTextSize(RPInfo[rpfName], 433.666534, 15.837041);
	TextDrawAlignment(RPInfo[rpfName], 1);
	TextDrawColor(RPInfo[rpfName], 563827914);
	TextDrawUseBox(RPInfo[rpfName], false);
	TextDrawBoxColor(RPInfo[rpfName], 255);
	TextDrawSetShadow(RPInfo[rpfName], 0);
	TextDrawSetOutline(RPInfo[rpfName], 1);
	TextDrawBackgroundColor(RPInfo[rpfName], 255);
	TextDrawFont(RPInfo[rpfName], 1);
	TextDrawSetProportional(RPInfo[rpfName], 1);

	TextDrawSetSelectable(RPInfo[rpfName],1);
	TextDrawSetSelectable(RPInfo[rplName],1);

    RPInfo[rp_Map]  = TextDrawCreate(174.999877, 75.185020, "samaps:map");
	TextDrawLetterSize(RPInfo[rp_Map] , 0.428333, 2.455554);
	TextDrawTextSize(RPInfo[rp_Map] , 281.666381, 291.409118);
	TextDrawAlignment(RPInfo[rp_Map] , 1);
	TextDrawColor(RPInfo[rp_Map] , -1);
	TextDrawSetShadow(RPInfo[rp_Map] , 0);
	TextDrawSetOutline(RPInfo[rp_Map] , 1);
	TextDrawBackgroundColor(RPInfo[rp_Map] , 51);
	TextDrawFont(RPInfo[rp_Map] , 4);
	TextDrawSetProportional(RPInfo[rp_Map] , 1);

	RPInfo[StatsBackground] = TextDrawCreate(495.416809, 15.555561, "ld_drv:ribbw");
	TextDrawLetterSize(RPInfo[StatsBackground], 0.449999, 1.600000);
	TextDrawTextSize(RPInfo[StatsBackground], 181.250015, 90.222244);
	TextDrawAlignment(RPInfo[StatsBackground], 1);
	TextDrawColor(RPInfo[StatsBackground], -1);
	TextDrawSetShadow(RPInfo[StatsBackground], 0);
	TextDrawSetOutline(RPInfo[StatsBackground], 1);
	TextDrawBackgroundColor(RPInfo[StatsBackground], 51);
	TextDrawFont(RPInfo[StatsBackground], 4);
	TextDrawSetProportional(RPInfo[StatsBackground], 1);

	RPInfo[DarkScreen] = TextDrawCreate(0.000000, 0.000000, "_");
	TextDrawBackgroundColor(RPInfo[DarkScreen], 255);
	TextDrawFont(RPInfo[DarkScreen], 1);
	TextDrawLetterSize(RPInfo[DarkScreen], 0.500000, 49.599960);
	TextDrawColor(RPInfo[DarkScreen], -1);
	TextDrawSetOutline(RPInfo[DarkScreen], 0);
	TextDrawSetProportional(RPInfo[DarkScreen], 1);
	TextDrawSetShadow(RPInfo[DarkScreen], 1);
	TextDrawUseBox(RPInfo[DarkScreen], 1);
	TextDrawBoxColor(RPInfo[DarkScreen], 0x00000066);
	TextDrawTextSize(RPInfo[DarkScreen], 640.000000, 0.000000);

	RPInfo[TD_Time] = TextDrawCreate(501.833526, 23.955480, "22:31:21 September 17, 2050");
	TextDrawLetterSize(RPInfo[TD_Time], 0.148249, 2.357036);
	TextDrawAlignment(RPInfo[TD_Time], 1);
	TextDrawColor(RPInfo[TD_Time], -1);
	TextDrawSetShadow(RPInfo[TD_Time], 0);
	TextDrawSetOutline(RPInfo[TD_Time], 1);
	TextDrawBackgroundColor(RPInfo[TD_Time], 51);
	TextDrawFont(RPInfo[TD_Time], 2);
	TextDrawSetProportional(RPInfo[TD_Time], 1);

	RPInfo[Figures][0] = TextDrawCreate(501.083312, 48.740650, "hud:radar_hostpital");
	TextDrawLetterSize(RPInfo[Figures][0], 0.449999, 1.600000);
	TextDrawTextSize(RPInfo[Figures][0], 13.000000, 17.007408);
	TextDrawAlignment(RPInfo[Figures][0], 1);
	TextDrawColor(RPInfo[Figures][0], -16776961);
	TextDrawSetShadow(RPInfo[Figures][0], 0);
	TextDrawSetOutline(RPInfo[Figures][0], 1);
	TextDrawBackgroundColor(RPInfo[Figures][0], 51);
	TextDrawFont(RPInfo[Figures][0], 4);
	TextDrawSetProportional(RPInfo[Figures][0], 1);

	RPInfo[Figures][1] = TextDrawCreate(550.249816, 49.222270, "hud:radar_datefood");
	TextDrawLetterSize(RPInfo[Figures][1], 0.449999, 1.600000);
	TextDrawTextSize(RPInfo[Figures][1], 13.000000, 17.422220);
	TextDrawAlignment(RPInfo[Figures][1], 1);
	TextDrawColor(RPInfo[Figures][1], -1);
	TextDrawSetShadow(RPInfo[Figures][1], 0);
	TextDrawSetOutline(RPInfo[Figures][1], 1);
	TextDrawBackgroundColor(RPInfo[Figures][1], 51);
	TextDrawFont(RPInfo[Figures][1], 4);
	TextDrawSetProportional(RPInfo[Figures][1], 1);

	RPInfo[Figures][2] = TextDrawCreate(598.083862, 46.489208, "hud:radar_diner");
	TextDrawLetterSize(RPInfo[Figures][2], 0.449999, 1.600000);
	TextDrawTextSize(RPInfo[Figures][2], 11.833333, 19.392593);
	TextDrawAlignment(RPInfo[Figures][2], 1);
	TextDrawColor(RPInfo[Figures][2], -1);
	TextDrawSetShadow(RPInfo[Figures][2], 0);
	TextDrawSetOutline(RPInfo[Figures][2], 1);
	TextDrawBackgroundColor(RPInfo[Figures][2], 51);
	TextDrawFont(RPInfo[Figures][2], 4);
	TextDrawSetProportional(RPInfo[Figures][2], 1);

	RPInfo[Figures][3] = TextDrawCreate(501.167205, 76.007728, "hud:radar_girlfriend");
	TextDrawLetterSize(RPInfo[Figures][3], 0.449999, 1.600000);
	TextDrawTextSize(RPInfo[Figures][3], 13.083332, 15.762964);
	TextDrawAlignment(RPInfo[Figures][3], 1);
	TextDrawColor(RPInfo[Figures][3], -1);
	TextDrawSetShadow(RPInfo[Figures][3], 0);
	TextDrawSetOutline(RPInfo[Figures][3], 1);
	TextDrawBackgroundColor(RPInfo[Figures][3], 51);
	TextDrawFont(RPInfo[Figures][3], 4);
	TextDrawSetProportional(RPInfo[Figures][3], 1);

	RPInfo[Figures][4] = TextDrawCreate(571.333923, 75.452171, "hud:radar_cash");
	TextDrawLetterSize(RPInfo[Figures][4], 0.449999, 1.600000);
	TextDrawTextSize(RPInfo[Figures][4], 11.833333, 19.392593);
	TextDrawAlignment(RPInfo[Figures][4], 1);
	TextDrawColor(RPInfo[Figures][4], -1);
	TextDrawSetShadow(RPInfo[Figures][4], 0);
	TextDrawSetOutline(RPInfo[Figures][4], 1);
	TextDrawBackgroundColor(RPInfo[Figures][4], 51);
	TextDrawFont(RPInfo[Figures][4], 4);
	TextDrawSetProportional(RPInfo[Figures][4], 1);

    RPInfo[Figures][5] = TextDrawCreate(27.083360, 331.852203, "ld_drv:naward");
	TextDrawLetterSize(RPInfo[Figures][5], 0.449999, 1.600000);
	TextDrawTextSize(RPInfo[Figures][5], 121.250076, 101.629623);
	TextDrawAlignment(RPInfo[Figures][5], 1);
	TextDrawColor(RPInfo[Figures][5], -1);
	TextDrawSetShadow(RPInfo[Figures][5], 0);
	TextDrawSetOutline(RPInfo[Figures][5], 1);
	TextDrawBackgroundColor(RPInfo[Figures][5], 51);
	TextDrawFont(RPInfo[Figures][5], 4);
	TextDrawSetProportional(RPInfo[Figures][5], 1);

	//=====================[DD/DM]================
	//toop tiimes
	DMTXTD[TT_BG1] = TextDrawCreate(609.083374, 98.981475, "usebox");
	TextDrawLetterSize(DMTXTD[TT_BG1], 0.000000, 11.157614);
	TextDrawTextSize(DMTXTD[TT_BG1], 495.916687, 0.000000);
	TextDrawAlignment(DMTXTD[TT_BG1], 1);
	TextDrawColor(DMTXTD[TT_BG1], 0);
	TextDrawUseBox(DMTXTD[TT_BG1], true);
	TextDrawBoxColor(DMTXTD[TT_BG1], 102);
	TextDrawSetShadow(DMTXTD[TT_BG1], 0);
	TextDrawSetOutline(DMTXTD[TT_BG1], 0);
	TextDrawFont(DMTXTD[TT_BG1], 0);

	DMTXTD[TT_BG2] = TextDrawCreate(609.083312, 98.981483, "usebox");
	TextDrawLetterSize(DMTXTD[TT_BG2], 0.000000, 2.160699);
	TextDrawTextSize(DMTXTD[TT_BG2], 495.916687, 0.000000);
	TextDrawAlignment(DMTXTD[TT_BG2], 1);
	TextDrawColor(DMTXTD[TT_BG2], 0);
	TextDrawUseBox(DMTXTD[TT_BG2], true);
	TextDrawBoxColor(DMTXTD[TT_BG2], -1061109505);
	TextDrawSetShadow(DMTXTD[TT_BG2], 0);
	TextDrawSetOutline(DMTXTD[TT_BG2], 0);
	TextDrawFont(DMTXTD[TT_BG2], 0);

	DMTXTD[TT_Line] = TextDrawCreate(569.083435, 132.166641, "usebox");
	TextDrawLetterSize(DMTXTD[TT_Line], 0.000000, 6.539302);
	TextDrawTextSize(DMTXTD[TT_Line], 564.666748, 0.000000);
	TextDrawAlignment(DMTXTD[TT_Line], 1);
	TextDrawColor(DMTXTD[TT_Line], 0);
	TextDrawUseBox(DMTXTD[TT_Line], true);
	TextDrawBoxColor(DMTXTD[TT_Line], -1);
	TextDrawSetShadow(DMTXTD[TT_Line], 0);
	TextDrawSetOutline(DMTXTD[TT_Line], 0);
	TextDrawFont(DMTXTD[TT_Line], 0);

	DMTXTD[TT_Text] = TextDrawCreate(523.333312, 101.111106, "TOP TIMES");
	TextDrawLetterSize(DMTXTD[TT_Text], 0.258333, 1.745185);
	TextDrawAlignment(DMTXTD[TT_Text], 1);
	TextDrawColor(DMTXTD[TT_Text], 255);
	TextDrawSetShadow(DMTXTD[TT_Text], 0);
	TextDrawSetOutline(DMTXTD[TT_Text], 1);
	TextDrawBackgroundColor(DMTXTD[TT_Text], -2139062017);
	TextDrawFont(DMTXTD[TT_Text], 2);
	TextDrawSetProportional(DMTXTD[TT_Text], 1);

	DMTXTD[TT_bNames][0] = TextDrawCreate(500.000000, 127.50, "_");
	DMTXTD[TT_bNames][1] = TextDrawCreate(500.000000, 141.50, "_");
	DMTXTD[TT_bNames][2] = TextDrawCreate(500.000000, 155.50, "_");
	DMTXTD[TT_bNames][3] = TextDrawCreate(500.000000, 169.50, "_");
	DMTXTD[TT_bNames][4] = TextDrawCreate(500.000000, 183.50, "_");

	DMTXTD[TT_bTimes][0] = TextDrawCreate(572.666992, 127.50, "_");
	DMTXTD[TT_bTimes][1] = TextDrawCreate(572.666992, 141.50, "_");
	DMTXTD[TT_bTimes][2] = TextDrawCreate(572.666992, 155.50, "_");
	DMTXTD[TT_bTimes][3] = TextDrawCreate(572.666992, 169.50, "_");
	DMTXTD[TT_bTimes][4] = TextDrawCreate(572.666992, 183.50, "_");
	forLoop(i, MAX_DM_BEST_LINES)CreateDMTTTexts(i);

	DMTXTD[TT_Line2] = TextDrawCreate(592.941101, 112.000007, "_");
	TextDrawLetterSize(DMTXTD[TT_Line2], 0.132823, 16.025821);
	TextDrawAlignment(DMTXTD[TT_Line2], 1);
	TextDrawColor(DMTXTD[TT_Line2], -1);
	TextDrawSetShadow(DMTXTD[TT_Line2], 0);
	TextDrawSetOutline(DMTXTD[TT_Line2], 1);
	TextDrawBackgroundColor(DMTXTD[TT_Line2], 51);
	TextDrawFont(DMTXTD[TT_Line2], 1);
	TextDrawSetProportional(DMTXTD[TT_Line2], 1);

	//death board
	DeathBoardDM[0][dText] = TextDrawCreate(638.117065, 242.083419, "_");
	DeathBoardDM[1][dText] = TextDrawCreate(638.117065, 252.083419, "_");
	DeathBoardDM[2][dText] = TextDrawCreate(638.117065, 262.083419, "_");
	DeathBoardDM[3][dText] = TextDrawCreate(638.117065, 272.083419, "_");
	DeathBoardDM[4][dText] = TextDrawCreate(638.117065, 282.083419, "_");
	DeathBoardDM[5][dText] = TextDrawCreate(638.117065, 292.083419, "_");
	DeathBoardDM[6][dText] = TextDrawCreate(638.117065, 302.083419, "_");
	DeathBoardDM[7][dText] = TextDrawCreate(638.117065, 312.083419, "_");
	DeathBoardDM[8][dText] = TextDrawCreate(638.117065, 322.083419, "_");
	DeathBoardDM[9][dText] = TextDrawCreate(638.117065, 332.083419, "_");
	DeathBoardDM[10][dText] = TextDrawCreate(638.117065, 342.083419, "_");
    forLoop(i, MAX_DM_DB_LINES)CreateDMDBTexts(i);

	//alive txts
	DMTXTD[Al_BGs][0] = TextDrawCreate(569.916809, 2.536983, "usebox");
	TextDrawLetterSize(DMTXTD[Al_BGs][0], 0.000000, 1.923046);
	TextDrawTextSize(DMTXTD[Al_BGs][0], 497.999938, 0.000000);
	TextDrawAlignment(DMTXTD[Al_BGs][0], 1);
	TextDrawColor(DMTXTD[Al_BGs][0], 0);
	TextDrawUseBox(DMTXTD[Al_BGs][0], true);
	TextDrawBoxColor(DMTXTD[Al_BGs][0], 102);
	TextDrawSetShadow(DMTXTD[Al_BGs][0], 0);
	TextDrawSetOutline(DMTXTD[Al_BGs][0], 0);
	TextDrawFont(DMTXTD[Al_BGs][0], 0);

	DMTXTD[Al_BGs][1] = TextDrawCreate(519.916564, 2.536940, "usebox");
	TextDrawLetterSize(DMTXTD[Al_BGs][1], 0.000000, 1.875204);
	TextDrawTextSize(DMTXTD[Al_BGs][1], 497.999847, 0.000000);
	TextDrawAlignment(DMTXTD[Al_BGs][1], 1);
	TextDrawColor(DMTXTD[Al_BGs][1], 0);
	TextDrawUseBox(DMTXTD[Al_BGs][1], true);
	TextDrawBoxColor(DMTXTD[Al_BGs][1], -703127382);
	TextDrawSetShadow(DMTXTD[Al_BGs][1], 0);
	TextDrawSetOutline(DMTXTD[Al_BGs][1], 0);
	TextDrawFont(DMTXTD[Al_BGs][1], 0);

	DMTXTD[Al_BGs][2] = TextDrawCreate(569.666442, 2.499904, "usebox");
	TextDrawLetterSize(DMTXTD[Al_BGs][2], 0.000000, 1.916872);
	TextDrawTextSize(DMTXTD[Al_BGs][2], 521.749633, 0.000000);
	TextDrawAlignment(DMTXTD[Al_BGs][2], 1);
	TextDrawColor(DMTXTD[Al_BGs][2], 0);
	TextDrawUseBox(DMTXTD[Al_BGs][2], true);
	TextDrawBoxColor(DMTXTD[Al_BGs][2], 296674506);
	TextDrawSetShadow(DMTXTD[Al_BGs][2], 0);
	TextDrawSetOutline(DMTXTD[Al_BGs][2], 0);
	TextDrawFont(DMTXTD[Al_BGs][2], 0);

	DMTXTD[Al_Time] = TextDrawCreate(525.999877, 3.074008, "00:00:00");
	TextDrawLetterSize(DMTXTD[Al_Time], 0.190832, 1.750367);
	TextDrawAlignment(DMTXTD[Al_Time], 1);
	TextDrawColor(DMTXTD[Al_Time], -1);
	TextDrawSetShadow(DMTXTD[Al_Time], 0);
	TextDrawSetOutline(DMTXTD[Al_Time], 1);
	TextDrawBackgroundColor(DMTXTD[Al_Time], 255);
	TextDrawFont(DMTXTD[Al_Time], 2);
	TextDrawSetProportional(DMTXTD[Al_Time], 1);

	DMTXTD[Al_AliveNum] = TextDrawCreate(508.333129, 2.592528, "0");
	TextDrawLetterSize(DMTXTD[Al_AliveNum], 0.190832, 1.750367);
	TextDrawAlignment(DMTXTD[Al_AliveNum], 2);
	TextDrawColor(DMTXTD[Al_AliveNum], -1);
	TextDrawSetShadow(DMTXTD[Al_AliveNum], 0);
	TextDrawSetOutline(DMTXTD[Al_AliveNum], 1);
	TextDrawBackgroundColor(DMTXTD[Al_AliveNum], 255);
	TextDrawFont(DMTXTD[Al_AliveNum], 2);
	TextDrawSetProportional(DMTXTD[Al_AliveNum], 1);

	//map info
	DMTXTD[mInfo] = TextDrawCreate(3.294121, 426.999847, "_");
	TextDrawLetterSize(DMTXTD[mInfo], 0.186470, 1.063333);
	TextDrawAlignment(DMTXTD[mInfo], 1);
	TextDrawColor(DMTXTD[mInfo], 23439871);
	TextDrawSetShadow(DMTXTD[mInfo], 0);
	TextDrawSetOutline(DMTXTD[mInfo], 1);
	TextDrawBackgroundColor(DMTXTD[mInfo], 51);
	TextDrawFont(DMTXTD[mInfo], 2);
	TextDrawSetProportional(DMTXTD[mInfo], 1);

	//new map
    DMTXTD[BG] = TextDrawCreate(698.940185, -11.333361, "usebox");
	TextDrawLetterSize(DMTXTD[BG], 0.000000, 53.205760);
	TextDrawTextSize(DMTXTD[BG], -32.117641, 0.000000);
	TextDrawAlignment(DMTXTD[BG], 1);
	TextDrawColor(DMTXTD[BG], 0);
	TextDrawUseBox(DMTXTD[BG], true);
	TextDrawBoxColor(DMTXTD[BG], 255);
	TextDrawSetShadow(DMTXTD[BG], 0);
	TextDrawSetOutline(DMTXTD[BG], 0);
	TextDrawFont(DMTXTD[BG], 0);

	DMTXTD[Loading] = TextDrawCreate(256.470733, 215.250030, "Loading New Map...");
	TextDrawLetterSize(DMTXTD[Loading], 0.347411, 1.862500);
	TextDrawAlignment(DMTXTD[Loading], 1);
	TextDrawColor(DMTXTD[Loading], -1);
	TextDrawSetShadow(DMTXTD[Loading], 0);
	TextDrawSetOutline(DMTXTD[Loading], 1);
	TextDrawBackgroundColor(DMTXTD[Loading], 51);
	TextDrawFont(DMTXTD[Loading], 1);
	TextDrawSetProportional(DMTXTD[Loading], 1);


	DMTXTD[Text] = TextDrawCreate(238.750000, 181.481414, "_");
	TextDrawLetterSize(DMTXTD[Text], 0.250416, 2.346668);
	TextDrawAlignment(DMTXTD[Text], 1);
	TextDrawColor(DMTXTD[Text], -1);
	TextDrawSetShadow(DMTXTD[Text], 0);
	TextDrawSetOutline(DMTXTD[Text], 1);
	TextDrawBackgroundColor(DMTXTD[Text], 51);
	TextDrawFont(DMTXTD[Text], 2);
	TextDrawSetProportional(DMTXTD[Text], 1);
	//=====================[PJ]================

	//toop tiimes
	PJTXTD[TT_BG1] = TextDrawCreate(609.083374, 98.981475, "usebox");
	TextDrawLetterSize(PJTXTD[TT_BG1], 0.000000, 11.157614);
	TextDrawTextSize(PJTXTD[TT_BG1], 495.916687, 0.000000);
	TextDrawAlignment(PJTXTD[TT_BG1], 1);
	TextDrawColor(PJTXTD[TT_BG1], 0);
	TextDrawUseBox(PJTXTD[TT_BG1], true);
	TextDrawBoxColor(PJTXTD[TT_BG1], 102);
	TextDrawSetShadow(PJTXTD[TT_BG1], 0);
	TextDrawSetOutline(PJTXTD[TT_BG1], 0);
	TextDrawFont(PJTXTD[TT_BG1], 0);

	PJTXTD[TT_BG2] = TextDrawCreate(609.083312, 98.981483, "usebox");
	TextDrawLetterSize(PJTXTD[TT_BG2], 0.000000, 2.160699);
	TextDrawTextSize(PJTXTD[TT_BG2], 495.916687, 0.000000);
	TextDrawAlignment(PJTXTD[TT_BG2], 1);
	TextDrawColor(PJTXTD[TT_BG2], 0);
	TextDrawUseBox(PJTXTD[TT_BG2], true);
	TextDrawBoxColor(PJTXTD[TT_BG2], -1061109505);
	TextDrawSetShadow(PJTXTD[TT_BG2], 0);
	TextDrawSetOutline(PJTXTD[TT_BG2], 0);
	TextDrawFont(PJTXTD[TT_BG2], 0);

	PJTXTD[TT_Line] = TextDrawCreate(569.083435, 132.166641, "usebox");
	TextDrawLetterSize(PJTXTD[TT_Line], 0.000000, 6.539302);
	TextDrawTextSize(PJTXTD[TT_Line], 564.666748, 0.000000);
	TextDrawAlignment(PJTXTD[TT_Line], 1);
	TextDrawColor(PJTXTD[TT_Line], 0);
	TextDrawUseBox(PJTXTD[TT_Line], true);
	TextDrawBoxColor(PJTXTD[TT_Line], -1);
	TextDrawSetShadow(PJTXTD[TT_Line], 0);
	TextDrawSetOutline(PJTXTD[TT_Line], 0);
	TextDrawFont(PJTXTD[TT_Line], 0);

	PJTXTD[TT_Text] = TextDrawCreate(523.333312, 101.111106, "TOP TIMES");
	TextDrawLetterSize(PJTXTD[TT_Text], 0.258333, 1.745185);
	TextDrawAlignment(PJTXTD[TT_Text], 1);
	TextDrawColor(PJTXTD[TT_Text], 255);
	TextDrawSetShadow(PJTXTD[TT_Text], 0);
	TextDrawSetOutline(PJTXTD[TT_Text], 1);
	TextDrawBackgroundColor(PJTXTD[TT_Text], -2139062017);
	TextDrawFont(PJTXTD[TT_Text], 2);
	TextDrawSetProportional(PJTXTD[TT_Text], 1);

	PJTXTD[TT_bNames][0] = TextDrawCreate(500.000000, 127.50, "_");
	PJTXTD[TT_bNames][1] = TextDrawCreate(500.000000, 141.50, "_");
	PJTXTD[TT_bNames][2] = TextDrawCreate(500.000000, 155.50, "_");
	PJTXTD[TT_bNames][3] = TextDrawCreate(500.000000, 169.50, "_");
	PJTXTD[TT_bNames][4] = TextDrawCreate(500.000000, 183.50, "_");

	PJTXTD[TT_bTimes][0] = TextDrawCreate(572.666992, 127.50, "_");
	PJTXTD[TT_bTimes][1] = TextDrawCreate(572.666992, 141.50, "_");
	PJTXTD[TT_bTimes][2] = TextDrawCreate(572.666992, 155.50, "_");
	PJTXTD[TT_bTimes][3] = TextDrawCreate(572.666992, 169.50, "_");
	PJTXTD[TT_bTimes][4] = TextDrawCreate(572.666992, 183.50, "_");

	forLoop(i, MAX_PJ_BEST_LINES)CreatePJTTTexts(i);

	PJTXTD[TT_Line2] = TextDrawCreate(592.941101, 112.000007, "_");
	TextDrawLetterSize(PJTXTD[TT_Line2], 0.132823, 16.025821);
	TextDrawAlignment(PJTXTD[TT_Line2], 1);
	TextDrawColor(PJTXTD[TT_Line2], -1);
	TextDrawSetShadow(PJTXTD[TT_Line2], 0);
	TextDrawSetOutline(PJTXTD[TT_Line2], 1);
	TextDrawBackgroundColor(PJTXTD[TT_Line2], 51);
	TextDrawFont(PJTXTD[TT_Line2], 1);
	TextDrawSetProportional(PJTXTD[TT_Line2], 1);

	//alive txts
	PJTXTD[Al_BGs][0] = TextDrawCreate(569.916809, 2.536983, "usebox");
	TextDrawLetterSize(PJTXTD[Al_BGs][0], 0.000000, 1.923046);
	TextDrawTextSize(PJTXTD[Al_BGs][0], 497.999938, 0.000000);
	TextDrawAlignment(PJTXTD[Al_BGs][0], 1);
	TextDrawColor(PJTXTD[Al_BGs][0], 0);
	TextDrawUseBox(PJTXTD[Al_BGs][0], true);
	TextDrawBoxColor(PJTXTD[Al_BGs][0], 102);
	TextDrawSetShadow(PJTXTD[Al_BGs][0], 0);
	TextDrawSetOutline(PJTXTD[Al_BGs][0], 0);
	TextDrawFont(PJTXTD[Al_BGs][0], 0);

	PJTXTD[Al_BGs][1] = TextDrawCreate(519.916564, 2.536940, "usebox");
	TextDrawLetterSize(PJTXTD[Al_BGs][1], 0.000000, 1.875204);
	TextDrawTextSize(PJTXTD[Al_BGs][1], 497.999847, 0.000000);
	TextDrawAlignment(PJTXTD[Al_BGs][1], 1);
	TextDrawColor(PJTXTD[Al_BGs][1], 0);
	TextDrawUseBox(PJTXTD[Al_BGs][1], true);
	TextDrawBoxColor(PJTXTD[Al_BGs][1], -703127382);
	TextDrawSetShadow(PJTXTD[Al_BGs][1], 0);
	TextDrawSetOutline(PJTXTD[Al_BGs][1], 0);
	TextDrawFont(PJTXTD[Al_BGs][1], 0);

	PJTXTD[Al_BGs][2] = TextDrawCreate(569.666442, 2.499904, "usebox");
	TextDrawLetterSize(PJTXTD[Al_BGs][2], 0.000000, 1.916872);
	TextDrawTextSize(PJTXTD[Al_BGs][2], 521.749633, 0.000000);
	TextDrawAlignment(PJTXTD[Al_BGs][2], 1);
	TextDrawColor(PJTXTD[Al_BGs][2], 0);
	TextDrawUseBox(PJTXTD[Al_BGs][2], true);
	TextDrawBoxColor(PJTXTD[Al_BGs][2], 296674506);
	TextDrawSetShadow(PJTXTD[Al_BGs][2], 0);
	TextDrawSetOutline(PJTXTD[Al_BGs][2], 0);
	TextDrawFont(PJTXTD[Al_BGs][2], 0);

	PJTXTD[Al_Time] = TextDrawCreate(525.999877, 3.074008, "00:00:00");
	TextDrawLetterSize(PJTXTD[Al_Time], 0.190832, 1.750367);
	TextDrawAlignment(PJTXTD[Al_Time], 1);
	TextDrawColor(PJTXTD[Al_Time], -1);
	TextDrawSetShadow(PJTXTD[Al_Time], 0);
	TextDrawSetOutline(PJTXTD[Al_Time], 1);
	TextDrawBackgroundColor(PJTXTD[Al_Time], 255);
	TextDrawFont(PJTXTD[Al_Time], 2);
	TextDrawSetProportional(PJTXTD[Al_Time], 1);

	PJTXTD[Al_AliveNum] = TextDrawCreate(508.333129, 2.592528, "0");
	TextDrawLetterSize(PJTXTD[Al_AliveNum], 0.190832, 1.750367);
	TextDrawAlignment(PJTXTD[Al_AliveNum], 2);
	TextDrawColor(PJTXTD[Al_AliveNum], -1);
	TextDrawSetShadow(PJTXTD[Al_AliveNum], 0);
	TextDrawSetOutline(PJTXTD[Al_AliveNum], 1);
	TextDrawBackgroundColor(PJTXTD[Al_AliveNum], 255);
	TextDrawFont(PJTXTD[Al_AliveNum], 2);
	TextDrawSetProportional(PJTXTD[Al_AliveNum], 1);

	//map info
	PJTXTD[mInfo] = TextDrawCreate(3.294121, 426.999847, "_");
	TextDrawLetterSize(PJTXTD[mInfo], 0.186470, 1.063333);
	TextDrawAlignment(PJTXTD[mInfo], 1);
	TextDrawColor(PJTXTD[mInfo], 23439871);
	TextDrawSetShadow(PJTXTD[mInfo], 0);
	TextDrawSetOutline(PJTXTD[mInfo], 1);
	TextDrawBackgroundColor(PJTXTD[mInfo], 51);
	TextDrawFont(PJTXTD[mInfo], 2);
	TextDrawSetProportional(PJTXTD[mInfo], 1);

	//new map
    PJTXTD[BG] = TextDrawCreate(698.940185, -11.333361, "usebox");
	TextDrawLetterSize(PJTXTD[BG], 0.000000, 53.205760);
	TextDrawTextSize(PJTXTD[BG], -32.117641, 0.000000);
	TextDrawAlignment(PJTXTD[BG], 1);
	TextDrawColor(PJTXTD[BG], 0);
	TextDrawUseBox(PJTXTD[BG], true);
	TextDrawBoxColor(PJTXTD[BG], 255);
	TextDrawSetShadow(PJTXTD[BG], 0);
	TextDrawSetOutline(PJTXTD[BG], 0);
	TextDrawFont(PJTXTD[BG], 0);

	PJTXTD[Loading] = TextDrawCreate(256.470733, 215.250030, "Loading New Map...");
	TextDrawLetterSize(PJTXTD[Loading], 0.347411, 1.862500);
	TextDrawAlignment(PJTXTD[Loading], 1);
	TextDrawColor(PJTXTD[Loading], -1);
	TextDrawSetShadow(PJTXTD[Loading], 0);
	TextDrawSetOutline(PJTXTD[Loading], 1);
	TextDrawBackgroundColor(PJTXTD[Loading], 51);
	TextDrawFont(PJTXTD[Loading], 1);
	TextDrawSetProportional(PJTXTD[Loading], 1);


	PJTXTD[Text] = TextDrawCreate(238.750000, 181.481414, "_");
	TextDrawLetterSize(PJTXTD[Text], 0.250416, 2.346668);
	TextDrawAlignment(PJTXTD[Text], 1);
	TextDrawColor(PJTXTD[Text], -1);
	TextDrawSetShadow(PJTXTD[Text], 0);
	TextDrawSetOutline(PJTXTD[Text], 1);
	TextDrawBackgroundColor(PJTXTD[Text], 51);
	TextDrawFont(PJTXTD[Text], 2);
	TextDrawSetProportional(PJTXTD[Text], 1);
    //=================== other

    kSpree_Shadow=TextDrawCreate(0.000000, 434.000000, "_");
	TextDrawBackgroundColor(kSpree_Shadow, 255);
	TextDrawFont(kSpree_Shadow, 2);
	TextDrawLetterSize(kSpree_Shadow, 0.500000, 1.000000);
	TextDrawColor(kSpree_Shadow, -1);
	TextDrawSetOutline(kSpree_Shadow, 0);
	TextDrawSetProportional(kSpree_Shadow, 1);
	TextDrawSetShadow(kSpree_Shadow, 1);
	TextDrawUseBox(kSpree_Shadow, 1);
	TextDrawBoxColor(kSpree_Shadow, 102);
	TextDrawTextSize(kSpree_Shadow, 181.000000, 0.000000);

	forLoop(i, MAX_MODES)
	{
     	ServerInfo[pInfo_TD][i]=TextDrawCreate(2.000000, 310.000000, " ");
		TextDrawBackgroundColor(ServerInfo[pInfo_TD][i], 255);
		TextDrawFont(ServerInfo[pInfo_TD][i], 2);
		TextDrawLetterSize(ServerInfo[pInfo_TD][i], 0.149997, 1.099999);
		TextDrawColor(ServerInfo[pInfo_TD][i], -1);
		TextDrawSetOutline(ServerInfo[pInfo_TD][i], 0);
		TextDrawSetProportional(ServerInfo[pInfo_TD][i], 1);
		TextDrawSetShadow(ServerInfo[pInfo_TD][i], 1);

        ServerInfo[pInfo_TD][i] = TextDrawCreate(594.166442, 436.073944, " ");
		TextDrawLetterSize(ServerInfo[pInfo_TD][i], 0.148750, 1.231852);
		TextDrawAlignment(ServerInfo[pInfo_TD][i], 3);
		TextDrawColor(ServerInfo[pInfo_TD][i], -1);
		TextDrawSetShadow(ServerInfo[pInfo_TD][i], 0);
		TextDrawSetOutline(ServerInfo[pInfo_TD][i], 1);
		TextDrawBackgroundColor(ServerInfo[pInfo_TD][i], 17);
		TextDrawFont(ServerInfo[pInfo_TD][i], 2);
		TextDrawSetProportional(ServerInfo[pInfo_TD][i], 1);

		kSpree_Line[i]=TextDrawCreate(1.000000, 434.000000, " ");
		TextDrawBackgroundColor(kSpree_Line[i], 255);
		TextDrawFont(kSpree_Line[i], 2);
		TextDrawLetterSize(kSpree_Line[i], 0.200000, 1.000000);
		TextDrawColor(kSpree_Line[i], -1);
		TextDrawSetOutline(kSpree_Line[i], 0);
		TextDrawSetProportional(kSpree_Line[i], 1);
		TextDrawSetShadow(kSpree_Line[i], 1);

		kSpree_Player[i]=-1;
		kSpree_Spree[i]=0;
	//	kSpree_LastCalled[i] = 0;
	}

    ServerInfo[Spawn_TD] = TextDrawCreate(301.250030, 429.333496, "  SPAWN");
	TextDrawLetterSize(ServerInfo[Spawn_TD], 0.307500, 2.004443);
	TextDrawTextSize(ServerInfo[Spawn_TD], 361.249877, 33.185184);
	TextDrawAlignment(ServerInfo[Spawn_TD], 1);
	TextDrawColor(ServerInfo[Spawn_TD], 255);
	TextDrawUseBox(ServerInfo[Spawn_TD], true);
	TextDrawBoxColor(ServerInfo[Spawn_TD], -1061109505);
	TextDrawSetShadow(ServerInfo[Spawn_TD], 0);
	TextDrawSetOutline(ServerInfo[Spawn_TD], 1);
	TextDrawBackgroundColor(ServerInfo[Spawn_TD], -1061109505);
	TextDrawFont(ServerInfo[Spawn_TD], 2);
	TextDrawSetProportional(ServerInfo[Spawn_TD], 1);

	ServerInfo[Left_TD] = TextDrawCreate(279.166687, 429.333343, " <");
	TextDrawLetterSize(ServerInfo[Left_TD], 0.335833, 2.206666);
	TextDrawTextSize(ServerInfo[Left_TD], 297.499969, 35.296296);
	TextDrawAlignment(ServerInfo[Left_TD], 1);
	TextDrawColor(ServerInfo[Left_TD], 255);
	TextDrawUseBox(ServerInfo[Left_TD], true);
	TextDrawBoxColor(ServerInfo[Left_TD], -1061109505);
	TextDrawSetShadow(ServerInfo[Left_TD], 0);
	TextDrawSetOutline(ServerInfo[Left_TD], 1);
	TextDrawBackgroundColor(ServerInfo[Left_TD], -1061109505);
	TextDrawFont(ServerInfo[Left_TD], 2);
	TextDrawSetProportional(ServerInfo[Left_TD], 1);

	ServerInfo[Right_TD] = TextDrawCreate(365.166748, 429.296295, " >");
	TextDrawLetterSize(ServerInfo[Right_TD], 0.335833, 2.206666);
	TextDrawTextSize(ServerInfo[Right_TD], 384.583221, 35.037036);
	TextDrawAlignment(ServerInfo[Right_TD], 1);
	TextDrawColor(ServerInfo[Right_TD], 255);
	TextDrawUseBox(ServerInfo[Right_TD], true);
	TextDrawBoxColor(ServerInfo[Right_TD], -1061109505);
	TextDrawSetShadow(ServerInfo[Right_TD], 0);
	TextDrawSetOutline(ServerInfo[Right_TD], 1);
	TextDrawBackgroundColor(ServerInfo[Right_TD], -1061109505);
	TextDrawFont(ServerInfo[Right_TD], 2);
	TextDrawSetProportional(ServerInfo[Right_TD], 1);

    TextDrawSetSelectable(ServerInfo[Left_TD],1);
	TextDrawSetSelectable(ServerInfo[Right_TD],1);
	TextDrawSetSelectable(ServerInfo[Spawn_TD],1);

	ServerInfo[Bomber_TD] = TextDrawCreate(357.500061, 428.814880, "~u~~w~Y~n~~d~~r~N");
	TextDrawLetterSize(ServerInfo[Bomber_TD], 0.163332, 0.972593);
	TextDrawAlignment(ServerInfo[Bomber_TD], 1);
	TextDrawColor(ServerInfo[Bomber_TD], -1);
	TextDrawSetShadow(ServerInfo[Bomber_TD], 0);
	TextDrawSetOutline(ServerInfo[Bomber_TD], 1);
	TextDrawBackgroundColor(ServerInfo[Bomber_TD], 255);
	TextDrawFont(ServerInfo[Bomber_TD], 2);
	TextDrawSetProportional(ServerInfo[Bomber_TD], 1);


	//=================[Main menu]==================
	createMMTDs();

	//==============================================
	ServerInfo[Version_TD] = TextDrawCreate(599.058654, 437.500000, "PANGEA~w~.2");
	TextDrawLetterSize(ServerInfo[Version_TD], 0.217058, 1.016666);
	TextDrawAlignment(ServerInfo[Version_TD], 1);
	TextDrawColor(ServerInfo[Version_TD], 23439871);
	TextDrawSetShadow(ServerInfo[Version_TD], 0);
	TextDrawSetOutline(ServerInfo[Version_TD], 1);
	TextDrawBackgroundColor(ServerInfo[Version_TD], 51);
	TextDrawFont(ServerInfo[Version_TD], 1);
	TextDrawSetProportional(ServerInfo[Version_TD], 1);

	ServerInfo[MenuCMD_TD] = TextDrawCreate(615.833862, 423.629699, "/menu");
	TextDrawLetterSize(ServerInfo[MenuCMD_TD], 0.141666, 1.439258);
	TextDrawTextSize(ServerInfo[MenuCMD_TD], 637.083618, -54.962985);
	TextDrawAlignment(ServerInfo[MenuCMD_TD], 1);
	TextDrawColor(ServerInfo[MenuCMD_TD], -1);
	TextDrawSetShadow(ServerInfo[MenuCMD_TD], 0);
	TextDrawSetOutline(ServerInfo[MenuCMD_TD], 1);
	TextDrawBackgroundColor(ServerInfo[MenuCMD_TD], 51);
	TextDrawFont(ServerInfo[MenuCMD_TD], 2);
	TextDrawSetProportional(ServerInfo[MenuCMD_TD], 1);

    ServerInfo[TankAim] = TextDrawCreate(318.749938, 118.222229, "-");
	TextDrawLetterSize(ServerInfo[TankAim], 0.210416, 2.134073);
	TextDrawAlignment(ServerInfo[TankAim], 1);
	TextDrawColor(ServerInfo[TankAim], -1);
	TextDrawSetShadow(ServerInfo[TankAim], 0);
	TextDrawSetOutline(ServerInfo[TankAim], 1);
	TextDrawBackgroundColor(ServerInfo[TankAim], 51);
	TextDrawFont(ServerInfo[TankAim], 2);
	TextDrawSetProportional(ServerInfo[TankAim], 1);

    ServerInfo[RocketAim] = TextDrawCreate(322.083343, 217.777740, "-");
	TextDrawLetterSize(ServerInfo[RocketAim], 0.210416, 2.134073);
	TextDrawAlignment(ServerInfo[RocketAim], 1);
	TextDrawColor(ServerInfo[RocketAim], -1);
	TextDrawSetShadow(ServerInfo[RocketAim], 0);
	TextDrawSetOutline(ServerInfo[RocketAim], 1);
	TextDrawBackgroundColor(ServerInfo[RocketAim], 51);
	TextDrawFont(ServerInfo[RocketAim], 2);
	TextDrawSetProportional(ServerInfo[RocketAim], 1);

    CreateDamateTexts();

    ServerInfo[Kill_TD] = TextDrawCreate(351.000000,176.000000,"KILL");
	TextDrawAlignment(ServerInfo[Kill_TD],0);
	TextDrawBackgroundColor(ServerInfo[Kill_TD],0x000000ff);
	TextDrawFont(ServerInfo[Kill_TD],1);
	TextDrawLetterSize(ServerInfo[Kill_TD],0.199999,1.000000);
	TextDrawColor(ServerInfo[Kill_TD],0xffffffff);
	TextDrawSetOutline(ServerInfo[Kill_TD],1);
	TextDrawSetProportional(ServerInfo[Kill_TD],1);
	TextDrawSetShadow(ServerInfo[Kill_TD],1);

	PTPInfo[td_BGs][0] = TextDrawCreate(608.666931, 100.537048, "usebox");
	TextDrawLetterSize(PTPInfo[td_BGs][0], 0.000000, 1.699280);
	TextDrawTextSize(PTPInfo[td_BGs][0], 495.500030, 0.000000);
	TextDrawAlignment(PTPInfo[td_BGs][0], 1);
	TextDrawColor(PTPInfo[td_BGs][0], 0);
	TextDrawUseBox(PTPInfo[td_BGs][0], true);
	TextDrawBoxColor(PTPInfo[td_BGs][0], 102);
	TextDrawSetShadow(PTPInfo[td_BGs][0], 0);
	TextDrawSetOutline(PTPInfo[td_BGs][0], 0);
	TextDrawFont(PTPInfo[td_BGs][0], 0);

	PTPInfo[td_BGs][1] = TextDrawCreate(527.416442, 100.018516, "usebox");
	TextDrawLetterSize(PTPInfo[td_BGs][1], 0.000000, 1.746603);
	TextDrawTextSize(PTPInfo[td_BGs][1], 495.500030, 0.000000);
	TextDrawAlignment(PTPInfo[td_BGs][1], 1);
	TextDrawColor(PTPInfo[td_BGs][1], 0);
	TextDrawUseBox(PTPInfo[td_BGs][1], true);
	TextDrawBoxColor(PTPInfo[td_BGs][1], -724556342);
	TextDrawSetShadow(PTPInfo[td_BGs][1], 0);
	TextDrawSetOutline(PTPInfo[td_BGs][1], 0);
	TextDrawFont(PTPInfo[td_BGs][1], 0);

	PTPInfo[td_BGs][2] = TextDrawCreate(608.833496, 120.722244, "usebox");
	TextDrawLetterSize(PTPInfo[td_BGs][2], 0.000000, 1.782613);
	TextDrawTextSize(PTPInfo[td_BGs][2], 495.500030, 0.000000);
	TextDrawAlignment(PTPInfo[td_BGs][2], 1);
	TextDrawColor(PTPInfo[td_BGs][2], 0);
	TextDrawUseBox(PTPInfo[td_BGs][2], true);
	TextDrawBoxColor(PTPInfo[td_BGs][2], 102);
	TextDrawSetShadow(PTPInfo[td_BGs][2], 0);
	TextDrawSetOutline(PTPInfo[td_BGs][2], 0);
	TextDrawFont(PTPInfo[td_BGs][2], 0);

	PTPInfo[td_BGs][3] = TextDrawCreate(514.666320, 120.722229, "usebox");
	TextDrawLetterSize(PTPInfo[td_BGs][3], 0.000000, 1.788270);
	TextDrawTextSize(PTPInfo[td_BGs][3], 495.500000, 0.000000);
	TextDrawAlignment(PTPInfo[td_BGs][3], 1);
	TextDrawColor(PTPInfo[td_BGs][3], 0);
	TextDrawUseBox(PTPInfo[td_BGs][3], true);
	TextDrawBoxColor(PTPInfo[td_BGs][3], -230806838);
	TextDrawSetShadow(PTPInfo[td_BGs][3], 0);
	TextDrawSetOutline(PTPInfo[td_BGs][3], 0);
	TextDrawFont(PTPInfo[td_BGs][3], 0);

	PTPInfo[td_BGs][4] = TextDrawCreate(551.499755, 120.685180, "usebox");
	TextDrawLetterSize(PTPInfo[td_BGs][4], 0.000000, 1.788270);
	TextDrawTextSize(PTPInfo[td_BGs][4], 530.916809, 0.000000);
	TextDrawAlignment(PTPInfo[td_BGs][4], 1);
	TextDrawColor(PTPInfo[td_BGs][4], 0);
	TextDrawUseBox(PTPInfo[td_BGs][4], true);
	TextDrawBoxColor(PTPInfo[td_BGs][4], 862362570);
	TextDrawSetShadow(PTPInfo[td_BGs][4], 0);
	TextDrawSetOutline(PTPInfo[td_BGs][4], 0);
	TextDrawFont(PTPInfo[td_BGs][4], 0);

	PTPInfo[td_BGs][5] = TextDrawCreate(583.749938, 120.648155, "usebox");
	TextDrawLetterSize(PTPInfo[td_BGs][5], 0.000000, 1.788270);
	TextDrawTextSize(PTPInfo[td_BGs][5], 568.417114, 0.000000);
	TextDrawAlignment(PTPInfo[td_BGs][5], 1);
	TextDrawColor(PTPInfo[td_BGs][5], 0);
	TextDrawUseBox(PTPInfo[td_BGs][5], true);
	TextDrawBoxColor(PTPInfo[td_BGs][5], 398221770);
	TextDrawSetShadow(PTPInfo[td_BGs][5], 0);
	TextDrawSetOutline(PTPInfo[td_BGs][5], 0);
	TextDrawFont(PTPInfo[td_BGs][5], 0);

	PTPInfo[td_Ts][0] = TextDrawCreate(500.000030, 99.037040, "pres");
	TextDrawLetterSize(PTPInfo[td_Ts][0], 0.217500, 1.791851);
	TextDrawAlignment(PTPInfo[td_Ts][0], 1);
	TextDrawColor(PTPInfo[td_Ts][0], -1);
	TextDrawSetShadow(PTPInfo[td_Ts][0], 0);
	TextDrawSetOutline(PTPInfo[td_Ts][0], 1);
	TextDrawBackgroundColor(PTPInfo[td_Ts][0], 255);
	TextDrawFont(PTPInfo[td_Ts][0], 2);
	TextDrawSetProportional(PTPInfo[td_Ts][0], 1);

	PTPInfo[td_Ts][1] = TextDrawCreate(498.916748, 119.740745, "HP");
	TextDrawLetterSize(PTPInfo[td_Ts][1], 0.217500, 1.791851);
	TextDrawAlignment(PTPInfo[td_Ts][1], 1);
	TextDrawColor(PTPInfo[td_Ts][1], -1);
	TextDrawSetShadow(PTPInfo[td_Ts][1], 0);
	TextDrawSetOutline(PTPInfo[td_Ts][1], 1);
	TextDrawBackgroundColor(PTPInfo[td_Ts][1], 255);
	TextDrawFont(PTPInfo[td_Ts][1], 2);
	TextDrawSetProportional(PTPInfo[td_Ts][1], 1);

	PTPInfo[td_Ts][2] = TextDrawCreate(534.916625, 119.185188, "AR");
	TextDrawLetterSize(PTPInfo[td_Ts][2], 0.217500, 1.791851);
	TextDrawAlignment(PTPInfo[td_Ts][2], 1);
	TextDrawColor(PTPInfo[td_Ts][2], -1);
	TextDrawSetShadow(PTPInfo[td_Ts][2], 0);
	TextDrawSetOutline(PTPInfo[td_Ts][2], 1);
	TextDrawBackgroundColor(PTPInfo[td_Ts][2], 255);
	TextDrawFont(PTPInfo[td_Ts][2], 2);
	TextDrawSetProportional(PTPInfo[td_Ts][2], 1);

	PTPInfo[td_Ts][3] = TextDrawCreate(573.416687, 119.666664, "T");
	TextDrawLetterSize(PTPInfo[td_Ts][3], 0.217500, 1.791851);
	TextDrawAlignment(PTPInfo[td_Ts][3], 1);
	TextDrawColor(PTPInfo[td_Ts][3], -1);
	TextDrawSetShadow(PTPInfo[td_Ts][3], 0);
	TextDrawSetOutline(PTPInfo[td_Ts][3], 1);
	TextDrawBackgroundColor(PTPInfo[td_Ts][3], 255);
	TextDrawFont(PTPInfo[td_Ts][3], 2);
	TextDrawSetProportional(PTPInfo[td_Ts][3], 1);

	PTPInfo[td_Pres] = TextDrawCreate(566.833190, 100.037025, "/ptp");
	TextDrawLetterSize(PTPInfo[td_Pres], 0.182083, 1.682962);
	TextDrawAlignment(PTPInfo[td_Pres], 2);
	TextDrawColor(PTPInfo[td_Pres], -1);
	TextDrawSetShadow(PTPInfo[td_Pres], 0);
	TextDrawSetOutline(PTPInfo[td_Pres], 1);
	TextDrawBackgroundColor(PTPInfo[td_Pres], 255);
	TextDrawFont(PTPInfo[td_Pres], 2);
	TextDrawSetProportional(PTPInfo[td_Pres], 1);

	PTPInfo[td_HP] = TextDrawCreate(514.500183, 119.185195, "100");
	TextDrawLetterSize(PTPInfo[td_HP], 0.217500, 1.791851);
	TextDrawAlignment(PTPInfo[td_HP], 1);
	TextDrawColor(PTPInfo[td_HP], -1);
	TextDrawSetShadow(PTPInfo[td_HP], 0);
	TextDrawSetOutline(PTPInfo[td_HP], 1);
	TextDrawBackgroundColor(PTPInfo[td_HP], 255);
	TextDrawFont(PTPInfo[td_HP], 2);
	TextDrawSetProportional(PTPInfo[td_HP], 1);

	PTPInfo[td_AR] = TextDrawCreate(552.583496, 119.666671, "100");
	TextDrawLetterSize(PTPInfo[td_AR], 0.217500, 1.791851);
	TextDrawAlignment(PTPInfo[td_AR], 1);
	TextDrawColor(PTPInfo[td_AR], -1);
	TextDrawSetShadow(PTPInfo[td_AR], 0);
	TextDrawSetOutline(PTPInfo[td_AR], 1);
	TextDrawBackgroundColor(PTPInfo[td_AR], 255);
	TextDrawFont(PTPInfo[td_AR], 2);
	TextDrawSetProportional(PTPInfo[td_AR], 1);

	PTPInfo[td_Time] = TextDrawCreate(584.833618, 119.111129, "15:00");
	TextDrawLetterSize(PTPInfo[td_Time], 0.157500, 1.911110);
	TextDrawAlignment(PTPInfo[td_Time], 1);
	TextDrawColor(PTPInfo[td_Time], -1);
	TextDrawSetShadow(PTPInfo[td_Time], 0);
	TextDrawSetOutline(PTPInfo[td_Time], 1);
	TextDrawBackgroundColor(PTPInfo[td_Time], 255);
	TextDrawFont(PTPInfo[td_Time], 2);
	TextDrawSetProportional(PTPInfo[td_Time], 1);

    TLInfo[TimeleftTD] = TextDrawCreate(547.000000,262.000000,"Time left: 05:00");
	TextDrawAlignment(TLInfo[TimeleftTD],0);
	TextDrawBackgroundColor(TLInfo[TimeleftTD],0x000000ff);
	TextDrawFont(TLInfo[TimeleftTD],1);
	TextDrawLetterSize(TLInfo[TimeleftTD],0.299999,1.500000);
	TextDrawColor(TLInfo[TimeleftTD],0xffffffff);
	TextDrawSetOutline(TLInfo[TimeleftTD],1);
	TextDrawSetProportional(TLInfo[TimeleftTD],1);
	TextDrawSetShadow(TLInfo[TimeleftTD],1);

	//===========[VW]===================
	VWInfo[L_BG] = TextDrawCreate(604.916687, 156.537017, "usebox");
	TextDrawLetterSize(VWInfo[L_BG], 0.000000, 17.370576);
	TextDrawTextSize(VWInfo[L_BG], 423.416656, 0.000000);
	TextDrawAlignment(VWInfo[L_BG], 1);
	TextDrawColor(VWInfo[L_BG], 0);
	TextDrawUseBox(VWInfo[L_BG], true);
	TextDrawBoxColor(VWInfo[L_BG], 102);
	TextDrawSetShadow(VWInfo[L_BG], 0);
	TextDrawSetOutline(VWInfo[L_BG], 0);
	TextDrawFont(VWInfo[L_BG], 0);

	VWInfo[Rank_BG] = TextDrawCreate(609.500122, 4.092660, "usebox");
	TextDrawLetterSize(VWInfo[Rank_BG], 0.000000, 1.620061);
	TextDrawTextSize(VWInfo[Rank_BG], 495.499877, 0.000000);
	TextDrawAlignment(VWInfo[Rank_BG], 1);
	TextDrawColor(VWInfo[Rank_BG], 0);
	TextDrawUseBox(VWInfo[Rank_BG], true);
	TextDrawBoxColor(VWInfo[Rank_BG], 102);
	TextDrawSetShadow(VWInfo[Rank_BG], 0);
	TextDrawSetOutline(VWInfo[Rank_BG], 0);
	TextDrawFont(VWInfo[Rank_BG], 0);

    VWInfo[Score_BG] = TextDrawCreate(609.500061, 119.722221, "usebox");
	TextDrawLetterSize(VWInfo[Score_BG], 0.000000, 1.584566);
	TextDrawTextSize(VWInfo[Score_BG], 495.499969, 0.000000);
	TextDrawAlignment(VWInfo[Score_BG], 1);
	TextDrawColor(VWInfo[Score_BG], 0);
	TextDrawUseBox(VWInfo[Score_BG], true);
	TextDrawBoxColor(VWInfo[Score_BG], 102);
	TextDrawSetShadow(VWInfo[Score_BG], 0);
	TextDrawSetOutline(VWInfo[Score_BG], 0);
	TextDrawFont(VWInfo[Score_BG], 0);

	VWInfo[ObjTXT] = TextDrawCreate(552.499938, 100.074066, "~w~(~g~A~w~) ~w~(~g~B~w~) ~w~(~g~C~w~)");
	TextDrawLetterSize(VWInfo[ObjTXT], 0.229580, 1.781481);
	TextDrawTextSize(VWInfo[ObjTXT], -13.333333, 108.888816);
	TextDrawAlignment(VWInfo[ObjTXT], 2);
	TextDrawColor(VWInfo[ObjTXT], -1);
	TextDrawUseBox(VWInfo[ObjTXT], true);
	TextDrawBoxColor(VWInfo[ObjTXT], 102);
	TextDrawSetShadow(VWInfo[ObjTXT], 0);
	TextDrawSetOutline(VWInfo[ObjTXT], 1);
	TextDrawBackgroundColor(VWInfo[ObjTXT], 51);
	TextDrawFont(VWInfo[ObjTXT], 2);
	TextDrawSetProportional(VWInfo[ObjTXT], 1);

	VWInfo[Score][VW_USA] = TextDrawCreate(500.833374, 118.740707, "USA: 500");
	TextDrawLetterSize(VWInfo[Score][VW_USA], 0.180833, 1.610370);
	TextDrawAlignment(VWInfo[Score][VW_USA], 1);
	TextDrawColor(VWInfo[Score][VW_USA], -1);
	TextDrawSetShadow(VWInfo[Score][VW_USA], 0);
	TextDrawSetOutline(VWInfo[Score][VW_USA], 1);
	TextDrawBackgroundColor(VWInfo[Score][VW_USA], 51);
	TextDrawFont(VWInfo[Score][VW_USA], 2);
	TextDrawSetProportional(VWInfo[Score][VW_USA], 1);

	VWInfo[Score][VW_VIETNAM] = TextDrawCreate(605.166748, 118.703659, "Vietnam: 999");
	TextDrawLetterSize(VWInfo[Score][VW_VIETNAM], 0.180833, 1.610370);
	TextDrawAlignment(VWInfo[Score][VW_VIETNAM], 3);
	TextDrawColor(VWInfo[Score][VW_VIETNAM], -1);
	TextDrawSetShadow(VWInfo[Score][VW_VIETNAM], 0);
	TextDrawSetOutline(VWInfo[Score][VW_VIETNAM], 1);
	TextDrawBackgroundColor(VWInfo[Score][VW_VIETNAM], 51);
	TextDrawFont(VWInfo[Score][VW_VIETNAM], 2);
	TextDrawSetProportional(VWInfo[Score][VW_VIETNAM], 1);

	VWInfo[L_Tab][VW_TAB_DEPLOY] = TextDrawCreate(426.250030, 138.962982, VW_TabNames[VW_TAB_DEPLOY]);
	TextDrawLetterSize(VWInfo[L_Tab][VW_TAB_DEPLOY], 0.236663, 1.511852);
	TextDrawTextSize(VWInfo[L_Tab][VW_TAB_DEPLOY], 470.833496, 10.0);
	TextDrawAlignment(VWInfo[L_Tab][VW_TAB_DEPLOY], 1);
	TextDrawColor(VWInfo[L_Tab][VW_TAB_DEPLOY], -1);
	TextDrawUseBox(VWInfo[L_Tab][VW_TAB_DEPLOY], true);
	TextDrawBoxColor(VWInfo[L_Tab][VW_TAB_DEPLOY], -2139062017);
	TextDrawSetShadow(VWInfo[L_Tab][VW_TAB_DEPLOY], 0);
	TextDrawSetOutline(VWInfo[L_Tab][VW_TAB_DEPLOY], 1);
	TextDrawBackgroundColor(VWInfo[L_Tab][VW_TAB_DEPLOY], 51);
	TextDrawFont(VWInfo[L_Tab][VW_TAB_DEPLOY], 2);
	TextDrawSetProportional(VWInfo[L_Tab][VW_TAB_DEPLOY], 1);
	TextDrawSetSelectable(VWInfo[L_Tab][VW_TAB_DEPLOY], true);

	VWInfo[L_Tab][VW_TAB_CLASS] = TextDrawCreate(474.750000, 138.925918, VW_TabNames[VW_TAB_CLASS]);
	TextDrawLetterSize(VWInfo[L_Tab][VW_TAB_CLASS], 0.236663, 1.511852);
	TextDrawTextSize(VWInfo[L_Tab][VW_TAB_CLASS], 512.500244, 10.0);
	TextDrawAlignment(VWInfo[L_Tab][VW_TAB_CLASS], 1);
	TextDrawColor(VWInfo[L_Tab][VW_TAB_CLASS], -1);
	TextDrawUseBox(VWInfo[L_Tab][VW_TAB_CLASS], true);
	TextDrawBoxColor(VWInfo[L_Tab][VW_TAB_CLASS], -2139062017);
	TextDrawSetShadow(VWInfo[L_Tab][VW_TAB_CLASS], 0);
	TextDrawSetOutline(VWInfo[L_Tab][VW_TAB_CLASS], 1);
	TextDrawBackgroundColor(VWInfo[L_Tab][VW_TAB_CLASS], 51);
	TextDrawFont(VWInfo[L_Tab][VW_TAB_CLASS], 2);
	TextDrawSetProportional(VWInfo[L_Tab][VW_TAB_CLASS], 1);
	TextDrawSetSelectable(VWInfo[L_Tab][VW_TAB_CLASS], true);

	VWInfo[L_Tab][VW_TAB_TEAM] = TextDrawCreate(516.416503, 138.925949, VW_TabNames[VW_TAB_TEAM]);
	TextDrawLetterSize(VWInfo[L_Tab][VW_TAB_TEAM], 0.236663, 1.511852);
	TextDrawTextSize(VWInfo[L_Tab][VW_TAB_TEAM], 550.000122, 10.0);
	TextDrawAlignment(VWInfo[L_Tab][VW_TAB_TEAM], 1);
	TextDrawColor(VWInfo[L_Tab][VW_TAB_TEAM], -1);
	TextDrawUseBox(VWInfo[L_Tab][VW_TAB_TEAM], true);
	TextDrawBoxColor(VWInfo[L_Tab][VW_TAB_TEAM], -2139062017);
	TextDrawSetShadow(VWInfo[L_Tab][VW_TAB_TEAM], 0);
	TextDrawSetOutline(VWInfo[L_Tab][VW_TAB_TEAM], 1);
	TextDrawBackgroundColor(VWInfo[L_Tab][VW_TAB_TEAM], 51);
	TextDrawFont(VWInfo[L_Tab][VW_TAB_TEAM], 2);
	TextDrawSetProportional(VWInfo[L_Tab][VW_TAB_TEAM], 1);
	TextDrawSetSelectable(VWInfo[L_Tab][VW_TAB_TEAM], true);

	VWInfo[L_Tab][VW_TAB_WEAPS] = TextDrawCreate(554.333374, 138.925964, VW_TabNames[VW_TAB_WEAPS]);
	TextDrawLetterSize(VWInfo[L_Tab][VW_TAB_WEAPS], 0.236662, 1.511852);
	TextDrawTextSize(VWInfo[L_Tab][VW_TAB_WEAPS], 602.083557, 10.0);
	TextDrawAlignment(VWInfo[L_Tab][VW_TAB_WEAPS], 1);
	TextDrawColor(VWInfo[L_Tab][VW_TAB_WEAPS], -1);
	TextDrawUseBox(VWInfo[L_Tab][VW_TAB_WEAPS], true);
	TextDrawBoxColor(VWInfo[L_Tab][VW_TAB_WEAPS], -2139062017);
	TextDrawSetShadow(VWInfo[L_Tab][VW_TAB_WEAPS], 0);
	TextDrawSetOutline(VWInfo[L_Tab][VW_TAB_WEAPS], 1);
	TextDrawBackgroundColor(VWInfo[L_Tab][VW_TAB_WEAPS], 51);
	TextDrawFont(VWInfo[L_Tab][VW_TAB_WEAPS], 2);
	TextDrawSetProportional(VWInfo[L_Tab][VW_TAB_WEAPS], 1);
	TextDrawSetSelectable(VWInfo[L_Tab][VW_TAB_WEAPS], true);

    VWInfo[L_Tab_A][VW_TAB_DEPLOY] = TextDrawCreate(426.250030, 138.962982, VW_TabNames[VW_TAB_DEPLOY]);
	TextDrawLetterSize(VWInfo[L_Tab_A][VW_TAB_DEPLOY], 0.236663, 1.511852);
	TextDrawTextSize(VWInfo[L_Tab_A][VW_TAB_DEPLOY], 470.833496, 10.0);
	TextDrawAlignment(VWInfo[L_Tab_A][VW_TAB_DEPLOY], 1);
	TextDrawColor(VWInfo[L_Tab_A][VW_TAB_DEPLOY], -1);
	TextDrawUseBox(VWInfo[L_Tab_A][VW_TAB_DEPLOY], true);
	TextDrawBoxColor(VWInfo[L_Tab_A][VW_TAB_DEPLOY], -1061109505);
	TextDrawSetShadow(VWInfo[L_Tab_A][VW_TAB_DEPLOY], 0);
	TextDrawSetOutline(VWInfo[L_Tab_A][VW_TAB_DEPLOY], 1);
	TextDrawBackgroundColor(VWInfo[L_Tab_A][VW_TAB_DEPLOY], 51);
	TextDrawFont(VWInfo[L_Tab_A][VW_TAB_DEPLOY], 2);
	TextDrawSetProportional(VWInfo[L_Tab_A][VW_TAB_DEPLOY], 1);

	VWInfo[L_Tab_A][VW_TAB_CLASS] = TextDrawCreate(474.750000, 138.925918, VW_TabNames[VW_TAB_CLASS]);
	TextDrawLetterSize(VWInfo[L_Tab_A][VW_TAB_CLASS], 0.236663, 1.511852);
	TextDrawTextSize(VWInfo[L_Tab_A][VW_TAB_CLASS], 512.500244, 10.0);
	TextDrawAlignment(VWInfo[L_Tab_A][VW_TAB_CLASS], 1);
	TextDrawColor(VWInfo[L_Tab_A][VW_TAB_CLASS], -1);
	TextDrawUseBox(VWInfo[L_Tab_A][VW_TAB_CLASS], true);
	TextDrawBoxColor(VWInfo[L_Tab_A][VW_TAB_CLASS], -1061109505);
	TextDrawSetShadow(VWInfo[L_Tab_A][VW_TAB_CLASS], 0);
	TextDrawSetOutline(VWInfo[L_Tab_A][VW_TAB_CLASS], 1);
	TextDrawBackgroundColor(VWInfo[L_Tab_A][VW_TAB_CLASS], 51);
	TextDrawFont(VWInfo[L_Tab_A][VW_TAB_CLASS], 2);
	TextDrawSetProportional(VWInfo[L_Tab_A][VW_TAB_CLASS], 1);

	VWInfo[L_Tab_A][VW_TAB_TEAM] = TextDrawCreate(516.416503, 138.925949, VW_TabNames[VW_TAB_TEAM]);
	TextDrawLetterSize(VWInfo[L_Tab_A][VW_TAB_TEAM], 0.236663, 1.511852);
	TextDrawTextSize(VWInfo[L_Tab_A][VW_TAB_TEAM], 550.000122, 10.0);
	TextDrawAlignment(VWInfo[L_Tab_A][VW_TAB_TEAM], 1);
	TextDrawColor(VWInfo[L_Tab_A][VW_TAB_TEAM], -1);
	TextDrawUseBox(VWInfo[L_Tab_A][VW_TAB_TEAM], true);
	TextDrawBoxColor(VWInfo[L_Tab_A][VW_TAB_TEAM], -1061109505);
	TextDrawSetShadow(VWInfo[L_Tab_A][VW_TAB_TEAM], 0);
	TextDrawSetOutline(VWInfo[L_Tab_A][VW_TAB_TEAM], 1);
	TextDrawBackgroundColor(VWInfo[L_Tab_A][VW_TAB_TEAM], 51);
	TextDrawFont(VWInfo[L_Tab_A][VW_TAB_TEAM], 2);
	TextDrawSetProportional(VWInfo[L_Tab_A][VW_TAB_TEAM], 1);

	VWInfo[L_Tab_A][VW_TAB_WEAPS] = TextDrawCreate(554.333374, 138.925964, VW_TabNames[VW_TAB_WEAPS]);
	TextDrawLetterSize(VWInfo[L_Tab_A][VW_TAB_WEAPS], 0.236662, 1.511852);
	TextDrawTextSize(VWInfo[L_Tab_A][VW_TAB_WEAPS], 602.083557, 10.0);
	TextDrawAlignment(VWInfo[L_Tab_A][VW_TAB_WEAPS], 1);
	TextDrawColor(VWInfo[L_Tab_A][VW_TAB_WEAPS], -1);
	TextDrawUseBox(VWInfo[L_Tab_A][VW_TAB_WEAPS], true);
	TextDrawBoxColor(VWInfo[L_Tab_A][VW_TAB_WEAPS], -1061109505);
	TextDrawSetShadow(VWInfo[L_Tab_A][VW_TAB_WEAPS], 0);
	TextDrawSetOutline(VWInfo[L_Tab_A][VW_TAB_WEAPS], 1);
	TextDrawBackgroundColor(VWInfo[L_Tab_A][VW_TAB_WEAPS], 51);
	TextDrawFont(VWInfo[L_Tab_A][VW_TAB_WEAPS], 2);
	TextDrawSetProportional(VWInfo[L_Tab_A][VW_TAB_WEAPS], 1);

	VWInfo[L_Team_BG][VW_USA] = TextDrawCreate(426.249969, 156.592575, "_");
	TextDrawLetterSize(VWInfo[L_Team_BG][VW_USA], 0.320416, 8.714067);
	TextDrawTextSize(VWInfo[L_Team_BG][VW_USA], 602.083312, 50.888889);
	TextDrawAlignment(VWInfo[L_Team_BG][VW_USA], 1);
	TextDrawColor(VWInfo[L_Team_BG][VW_USA], -1);
	TextDrawUseBox(VWInfo[L_Team_BG][VW_USA], true);
	TextDrawBoxColor(VWInfo[L_Team_BG][VW_USA], 0xffffff66);
	TextDrawSetShadow(VWInfo[L_Team_BG][VW_USA], 0);
	TextDrawSetOutline(VWInfo[L_Team_BG][VW_USA], 1);
	TextDrawBackgroundColor(VWInfo[L_Team_BG][VW_USA], 51);
	TextDrawFont(VWInfo[L_Team_BG][VW_USA], 2);
	TextDrawSetProportional(VWInfo[L_Team_BG][VW_USA], 1);

	VWInfo[L_Team_BG][VW_VIETNAM] = TextDrawCreate(426.416687, 238.481430, "_");
	TextDrawLetterSize(VWInfo[L_Team_BG][VW_VIETNAM], 0.326249, 8.361477);
	TextDrawTextSize(VWInfo[L_Team_BG][VW_VIETNAM], 602.083312, 50.888889);
	TextDrawAlignment(VWInfo[L_Team_BG][VW_VIETNAM], 1);
	TextDrawColor(VWInfo[L_Team_BG][VW_VIETNAM], -1);
	TextDrawUseBox(VWInfo[L_Team_BG][VW_VIETNAM], true);
	TextDrawBoxColor(VWInfo[L_Team_BG][VW_VIETNAM], 0xffffff66);
	TextDrawSetShadow(VWInfo[L_Team_BG][VW_VIETNAM], 0);
	TextDrawSetOutline(VWInfo[L_Team_BG][VW_VIETNAM], 1);
	TextDrawBackgroundColor(VWInfo[L_Team_BG][VW_VIETNAM], 51);
	TextDrawFont(VWInfo[L_Team_BG][VW_VIETNAM], 2);
	TextDrawSetProportional(VWInfo[L_Team_BG][VW_VIETNAM], 1);
	TextDrawSetSelectable(VWInfo[L_Team_BG][VW_VIETNAM], true);

	VWInfo[L_Team_Name][VW_USA] = TextDrawCreate(514.583312, 188.222259, TeamNamesVW[VW_USA]);
	TextDrawLetterSize(VWInfo[L_Team_Name][VW_USA], 0.352916, 1.765925);
	TextDrawTextSize(VWInfo[L_Team_Name][VW_USA], 15.0, 147.259246);
	TextDrawAlignment(VWInfo[L_Team_Name][VW_USA], 2);
	TextDrawColor(VWInfo[L_Team_Name][VW_USA], -1);
	TextDrawUseBox(VWInfo[L_Team_Name][VW_USA], false);
	TextDrawBoxColor(VWInfo[L_Team_Name][VW_USA], 255);
	TextDrawSetShadow(VWInfo[L_Team_Name][VW_USA], 0);
	TextDrawSetOutline(VWInfo[L_Team_Name][VW_USA], 1);
	TextDrawBackgroundColor(VWInfo[L_Team_Name][VW_USA], 51);
	TextDrawFont(VWInfo[L_Team_Name][VW_USA], 2);
	TextDrawSetProportional(VWInfo[L_Team_Name][VW_USA], 1);
	TextDrawSetSelectable(VWInfo[L_Team_Name][VW_USA], true);

	VWInfo[L_Team_Name][VW_VIETNAM] = TextDrawCreate(514.333435, 260.777832, TeamNamesVW[VW_VIETNAM]);
	TextDrawLetterSize(VWInfo[L_Team_Name][VW_VIETNAM], 0.352916, 1.765925);
	TextDrawTextSize(VWInfo[L_Team_Name][VW_VIETNAM], 15.0, 147.259231);
	TextDrawAlignment(VWInfo[L_Team_Name][VW_VIETNAM], 2);
	TextDrawColor(VWInfo[L_Team_Name][VW_VIETNAM], -1);
	TextDrawUseBox(VWInfo[L_Team_Name][VW_VIETNAM], false);
	TextDrawBoxColor(VWInfo[L_Team_Name][VW_VIETNAM], 255);
	TextDrawSetShadow(VWInfo[L_Team_Name][VW_VIETNAM], 0);
	TextDrawSetOutline(VWInfo[L_Team_Name][VW_VIETNAM], 1);
	TextDrawBackgroundColor(VWInfo[L_Team_Name][VW_VIETNAM], 51);
	TextDrawFont(VWInfo[L_Team_Name][VW_VIETNAM], 2);
	TextDrawSetProportional(VWInfo[L_Team_Name][VW_VIETNAM], 1);
	TextDrawSetSelectable(VWInfo[L_Team_Name][VW_VIETNAM], true);

    VWInfo[L_Class_BG][VW_MEDIC] = TextDrawCreate(427.916717, 160.222183, "_");
	TextDrawLetterSize(VWInfo[L_Class_BG][VW_MEDIC], 0.283749, 16.725185);
	TextDrawTextSize(VWInfo[L_Class_BG][VW_MEDIC], 480.416687, 125.0);
	TextDrawAlignment(VWInfo[L_Class_BG][VW_MEDIC], 1);
	TextDrawColor(VWInfo[L_Class_BG][VW_MEDIC], -1);
	TextDrawUseBox(VWInfo[L_Class_BG][VW_MEDIC], true);
	TextDrawBoxColor(VWInfo[L_Class_BG][VW_MEDIC], 0x00000000);
	TextDrawSetShadow(VWInfo[L_Class_BG][VW_MEDIC], 0);
	TextDrawSetOutline(VWInfo[L_Class_BG][VW_MEDIC], 1);
	TextDrawBackgroundColor(VWInfo[L_Class_BG][VW_MEDIC], 51);
	TextDrawFont(VWInfo[L_Class_BG][VW_MEDIC], 2);
	TextDrawSetProportional(VWInfo[L_Class_BG][VW_MEDIC], 1);
	TextDrawSetSelectable(VWInfo[L_Class_BG][VW_MEDIC], true);

	VWInfo[L_Class_BG][VW_SNIPER] = TextDrawCreate(484.333190, 159.666564, "_");
	TextDrawLetterSize(VWInfo[L_Class_BG][VW_SNIPER], 0.283749, 16.828886);
	TextDrawTextSize(VWInfo[L_Class_BG][VW_SNIPER], 537.916809, 125.0);
	TextDrawAlignment(VWInfo[L_Class_BG][VW_SNIPER], 1);
	TextDrawColor(VWInfo[L_Class_BG][VW_SNIPER], -1);
	TextDrawUseBox(VWInfo[L_Class_BG][VW_SNIPER], true);
	TextDrawBoxColor(VWInfo[L_Class_BG][VW_SNIPER], 0x00000000);
	TextDrawSetShadow(VWInfo[L_Class_BG][VW_SNIPER], 0);
	TextDrawSetOutline(VWInfo[L_Class_BG][VW_SNIPER], 1);
	TextDrawBackgroundColor(VWInfo[L_Class_BG][VW_SNIPER], 51);
	TextDrawFont(VWInfo[L_Class_BG][VW_SNIPER], 2);
	TextDrawSetProportional(VWInfo[L_Class_BG][VW_SNIPER], 1);
	TextDrawSetSelectable(VWInfo[L_Class_BG][VW_SNIPER], true);

	VWInfo[L_Class_BG][VW_ENGINEER] = TextDrawCreate(542.000061, 159.629562, "_");
	TextDrawLetterSize(VWInfo[L_Class_BG][VW_ENGINEER], 0.283749, 16.828886);
	TextDrawTextSize(VWInfo[L_Class_BG][VW_ENGINEER], 600.000122, 125.0);
	TextDrawAlignment(VWInfo[L_Class_BG][VW_ENGINEER], 1);
	TextDrawColor(VWInfo[L_Class_BG][VW_ENGINEER], -1);
	TextDrawUseBox(VWInfo[L_Class_BG][VW_ENGINEER], true);
	TextDrawBoxColor(VWInfo[L_Class_BG][VW_ENGINEER], 0x00000000);
	TextDrawSetShadow(VWInfo[L_Class_BG][VW_ENGINEER], 0);
	TextDrawSetOutline(VWInfo[L_Class_BG][VW_ENGINEER], 1);
	TextDrawBackgroundColor(VWInfo[L_Class_BG][VW_ENGINEER], 51);
	TextDrawFont(VWInfo[L_Class_BG][VW_ENGINEER], 2);
	TextDrawSetProportional(VWInfo[L_Class_BG][VW_ENGINEER], 1);
	TextDrawSetSelectable(VWInfo[L_Class_BG][VW_ENGINEER], true);

    VWInfo[L_Class_BG_A][VW_MEDIC] = TextDrawCreate(427.916717, 160.222183, "_");
	TextDrawLetterSize(VWInfo[L_Class_BG_A][VW_MEDIC], 0.283749, 16.725185);
	TextDrawTextSize(VWInfo[L_Class_BG_A][VW_MEDIC], 480.416687, 94.888885);
	TextDrawAlignment(VWInfo[L_Class_BG_A][VW_MEDIC], 1);
	TextDrawColor(VWInfo[L_Class_BG_A][VW_MEDIC], -1);
	TextDrawUseBox(VWInfo[L_Class_BG_A][VW_MEDIC], true);
	TextDrawBoxColor(VWInfo[L_Class_BG_A][VW_MEDIC], 0xffffff66);
	TextDrawSetShadow(VWInfo[L_Class_BG_A][VW_MEDIC], 0);
	TextDrawSetOutline(VWInfo[L_Class_BG_A][VW_MEDIC], 1);
	TextDrawBackgroundColor(VWInfo[L_Class_BG_A][VW_MEDIC], 51);
	TextDrawFont(VWInfo[L_Class_BG_A][VW_MEDIC], 2);
	TextDrawSetProportional(VWInfo[L_Class_BG_A][VW_MEDIC], 1);

	VWInfo[L_Class_BG_A][VW_SNIPER] = TextDrawCreate(484.333190, 159.666564, "_");
	TextDrawLetterSize(VWInfo[L_Class_BG_A][VW_SNIPER], 0.283749, 16.828886);
	TextDrawTextSize(VWInfo[L_Class_BG_A][VW_SNIPER], 537.916809, 111.481468);
	TextDrawAlignment(VWInfo[L_Class_BG_A][VW_SNIPER], 1);
	TextDrawColor(VWInfo[L_Class_BG_A][VW_SNIPER], -1);
	TextDrawUseBox(VWInfo[L_Class_BG_A][VW_SNIPER], true);
	TextDrawBoxColor(VWInfo[L_Class_BG_A][VW_SNIPER], 0xffffff66);
	TextDrawSetShadow(VWInfo[L_Class_BG_A][VW_SNIPER], 0);
	TextDrawSetOutline(VWInfo[L_Class_BG_A][VW_SNIPER], 1);
	TextDrawBackgroundColor(VWInfo[L_Class_BG_A][VW_SNIPER], 51);
	TextDrawFont(VWInfo[L_Class_BG_A][VW_SNIPER], 2);
	TextDrawSetProportional(VWInfo[L_Class_BG_A][VW_SNIPER], 1);

	VWInfo[L_Class_BG_A][VW_ENGINEER] = TextDrawCreate(542.000061, 159.629562, "_");
	TextDrawLetterSize(VWInfo[L_Class_BG_A][VW_ENGINEER], 0.283749, 16.828886);
	TextDrawTextSize(VWInfo[L_Class_BG_A][VW_ENGINEER], 600.000122, 108.888877);
	TextDrawAlignment(VWInfo[L_Class_BG_A][VW_ENGINEER], 1);
	TextDrawColor(VWInfo[L_Class_BG_A][VW_ENGINEER], -1);
	TextDrawUseBox(VWInfo[L_Class_BG_A][VW_ENGINEER], true);
	TextDrawBoxColor(VWInfo[L_Class_BG_A][VW_ENGINEER], 0xffffff66);
	TextDrawSetShadow(VWInfo[L_Class_BG_A][VW_ENGINEER], 0);
	TextDrawSetOutline(VWInfo[L_Class_BG_A][VW_ENGINEER], 1);
	TextDrawBackgroundColor(VWInfo[L_Class_BG_A][VW_ENGINEER], 51);
	TextDrawFont(VWInfo[L_Class_BG_A][VW_ENGINEER], 2);
	TextDrawSetProportional(VWInfo[L_Class_BG_A][VW_ENGINEER], 1);

	VWInfo[L_Class_Names] = TextDrawCreate(437.499969, 159.185150, "Medic          Sniper       Engineer");
	TextDrawLetterSize(VWInfo[L_Class_Names], 0.225833, 1.377037);
	TextDrawAlignment(VWInfo[L_Class_Names], 1);
	TextDrawColor(VWInfo[L_Class_Names], -1);
	TextDrawSetShadow(VWInfo[L_Class_Names], 0);
	TextDrawSetOutline(VWInfo[L_Class_Names], 1);
	TextDrawBackgroundColor(VWInfo[L_Class_Names], 51);
	TextDrawFont(VWInfo[L_Class_Names], 2);
	TextDrawSetProportional(VWInfo[L_Class_Names], 1);

	VWInfo[L_Spawn] = TextDrawCreate(561.833435, 317.814849, " spawn");
	TextDrawLetterSize(VWInfo[L_Spawn], 0.236663, 1.511852);
	TextDrawTextSize(VWInfo[L_Spawn], 602.083374, 10.0);
	TextDrawAlignment(VWInfo[L_Spawn], 1);
	TextDrawColor(VWInfo[L_Spawn], -1);
	TextDrawUseBox(VWInfo[L_Spawn], true);
	TextDrawBoxColor(VWInfo[L_Spawn], 865717962);
	TextDrawSetShadow(VWInfo[L_Spawn], 0);
	TextDrawSetOutline(VWInfo[L_Spawn], 1);
	TextDrawBackgroundColor(VWInfo[L_Spawn], 51);
	TextDrawFont(VWInfo[L_Spawn], 2);
	TextDrawSetProportional(VWInfo[L_Spawn], 1);
	TextDrawSetSelectable(VWInfo[L_Spawn], true);

    VWCreateDeploySelect();
    VWCreateWeapsSelect();

	//===================================
	GKInfo[td_BG][0] = TextDrawCreate(608.666870, 100.537040, "usebox");
	TextDrawLetterSize(GKInfo[td_BG][0], 0.000000, 1.757407);
	TextDrawTextSize(GKInfo[td_BG][0], 495.499908, 0.000000);
	TextDrawAlignment(GKInfo[td_BG][0], 1);
	TextDrawColor(GKInfo[td_BG][0], 0);
	TextDrawUseBox(GKInfo[td_BG][0], true);
	TextDrawBoxColor(GKInfo[td_BG][0], 102);
	TextDrawSetShadow(GKInfo[td_BG][0], 0);
	TextDrawSetOutline(GKInfo[td_BG][0], 0);
	TextDrawFont(GKInfo[td_BG][0], 0);

	GKInfo[td_BG][1] = TextDrawCreate(608.833557, 3.018529, "usebox");
	TextDrawLetterSize(GKInfo[td_BG][1], 0.000000, 1.715740);
	TextDrawTextSize(GKInfo[td_BG][1], 496.749816, 0.000000);
	TextDrawAlignment(GKInfo[td_BG][1], 1);
	TextDrawColor(GKInfo[td_BG][1], 0);
	TextDrawUseBox(GKInfo[td_BG][1], true);
	TextDrawBoxColor(GKInfo[td_BG][1], 102);
	TextDrawSetShadow(GKInfo[td_BG][1], 0);
	TextDrawSetOutline(GKInfo[td_BG][1], 0);
	TextDrawFont(GKInfo[td_BG][1], 0);

	GKInfo[td_pW] = TextDrawCreate(498.333557, 100.592506, " winning");
	TextDrawLetterSize(GKInfo[td_pW], 0.164582, 1.745184);
	TextDrawTextSize(GKInfo[td_pW], 531.666625, -27.999996);
	TextDrawAlignment(GKInfo[td_pW], 1);
	TextDrawColor(GKInfo[td_pW], -1);
	TextDrawUseBox(GKInfo[td_pW], true);
	TextDrawBoxColor(GKInfo[td_pW], 16777215);
	TextDrawSetShadow(GKInfo[td_pW], 0);
	TextDrawSetOutline(GKInfo[td_pW], 1);
	TextDrawBackgroundColor(GKInfo[td_pW], 51);
	TextDrawFont(GKInfo[td_pW], 2);
	TextDrawSetProportional(GKInfo[td_pW], 1);

	GKInfo[td_pWin] = TextDrawCreate(535.000122, 100.592582, "-");
	TextDrawLetterSize(GKInfo[td_pWin], 0.115000, 1.657036);
	TextDrawAlignment(GKInfo[td_pWin], 1);
	TextDrawColor(GKInfo[td_pWin], -1);
	TextDrawSetShadow(GKInfo[td_pWin], 0);
	TextDrawSetOutline(GKInfo[td_pWin], 1);
	TextDrawBackgroundColor(GKInfo[td_pWin], 51);
	TextDrawFont(GKInfo[td_pWin], 2);
	TextDrawSetProportional(GKInfo[td_pWin], 1);

	GKInfo[td_pT] = TextDrawCreate(568.333007, 100.592582, " T");
	TextDrawLetterSize(GKInfo[td_pT], 0.230000, 1.739999);
	TextDrawTextSize(GKInfo[td_pT], 580.833374, -6.740739);
	TextDrawAlignment(GKInfo[td_pT], 1);
	TextDrawColor(GKInfo[td_pT], -1);
	TextDrawUseBox(GKInfo[td_pT], true);
	TextDrawBoxColor(GKInfo[td_pT], -5963521);
	TextDrawSetShadow(GKInfo[td_pT], 0);
	TextDrawSetOutline(GKInfo[td_pT], 0);
	TextDrawBackgroundColor(GKInfo[td_pT], 255);
	TextDrawFont(GKInfo[td_pT], 2);
	TextDrawSetProportional(GKInfo[td_pT], 1);

	GKInfo[td_pTime] = TextDrawCreate(586.000244, 100.037033, "00:00");
	TextDrawLetterSize(GKInfo[td_pTime], 0.132500, 1.724443);
	TextDrawAlignment(GKInfo[td_pTime], 1);
	TextDrawColor(GKInfo[td_pTime], -1);
	TextDrawSetShadow(GKInfo[td_pTime], 0);
	TextDrawSetOutline(GKInfo[td_pTime], 1);
	TextDrawBackgroundColor(GKInfo[td_pTime], 51);
	TextDrawFont(GKInfo[td_pTime], 2);
	TextDrawSetProportional(GKInfo[td_pTime], 1);

	GKInfo[td_yT] = TextDrawCreate(499.583374, 3.111125, " your time");
	TextDrawLetterSize(GKInfo[td_yT], 0.132916, 1.719258);
	TextDrawTextSize(GKInfo[td_yT], 535.000061, -42.000015);
	TextDrawAlignment(GKInfo[td_yT], 1);
	TextDrawColor(GKInfo[td_yT], -1);
	TextDrawUseBox(GKInfo[td_yT], true);
	TextDrawBoxColor(GKInfo[td_yT], -2147450625);
	TextDrawSetShadow(GKInfo[td_yT], 0);
	TextDrawSetOutline(GKInfo[td_yT], 1);
	TextDrawBackgroundColor(GKInfo[td_yT], 51);
	TextDrawFont(GKInfo[td_yT], 2);
	TextDrawSetProportional(GKInfo[td_yT], 1);

	GKInfo[td_mT] = TextDrawCreate(560.833496, 3.111083, " map");
	TextDrawLetterSize(GKInfo[td_mT], 0.168750, 1.698517);
	TextDrawTextSize(GKInfo[td_mT], 581.250000, -21.777776);
	TextDrawAlignment(GKInfo[td_mT], 1);
	TextDrawColor(GKInfo[td_mT], -1);
	TextDrawUseBox(GKInfo[td_mT], true);
	TextDrawBoxColor(GKInfo[td_mT], -1061109505);
	TextDrawSetShadow(GKInfo[td_mT], 0);
	TextDrawSetOutline(GKInfo[td_mT], 1);
	TextDrawBackgroundColor(GKInfo[td_mT], 51);
	TextDrawFont(GKInfo[td_mT], 2);
	TextDrawSetProportional(GKInfo[td_mT], 1);

	GKInfo[td_mTime] = TextDrawCreate(587.000061, 2.518514, "00:00");
	TextDrawLetterSize(GKInfo[td_mTime], 0.132500, 1.724443);
	TextDrawAlignment(GKInfo[td_mTime], 1);
	TextDrawColor(GKInfo[td_mTime], -1);
	TextDrawSetShadow(GKInfo[td_mTime], 0);
	TextDrawSetOutline(GKInfo[td_mTime], 1);
	TextDrawBackgroundColor(GKInfo[td_mTime], 51);
	TextDrawFont(GKInfo[td_mTime], 2);
	TextDrawSetProportional(GKInfo[td_mTime], 1);

	ZOInfo[td_BGs][0] = TextDrawCreate(609.500122, 100.018455, "usebox");
	TextDrawLetterSize(ZOInfo[td_BGs][0], 0.000000, 2.089712);
	TextDrawTextSize(ZOInfo[td_BGs][0], 495.916687, 0.000000);
	TextDrawAlignment(ZOInfo[td_BGs][0], 1);
	TextDrawColor(ZOInfo[td_BGs][0], 0);
	TextDrawUseBox(ZOInfo[td_BGs][0], true);
	TextDrawBoxColor(ZOInfo[td_BGs][0], 102);
	TextDrawSetShadow(ZOInfo[td_BGs][0], 0);
	TextDrawSetOutline(ZOInfo[td_BGs][0], 0);
	TextDrawFont(ZOInfo[td_BGs][0], 0);

	ZOInfo[td_BGs][1] = TextDrawCreate(538.249816, 100.536941, "usebox");
	TextDrawLetterSize(ZOInfo[td_BGs][1], 0.000000, 2.000203);
	TextDrawTextSize(ZOInfo[td_BGs][1], 495.916503, 0.000000);
	TextDrawAlignment(ZOInfo[td_BGs][1], 1);
	TextDrawColor(ZOInfo[td_BGs][1], 0);
	TextDrawUseBox(ZOInfo[td_BGs][1], true);
	TextDrawBoxColor(ZOInfo[td_BGs][1], 1183400138);
	TextDrawSetShadow(ZOInfo[td_BGs][1], 0);
	TextDrawSetOutline(ZOInfo[td_BGs][1], 0);
	TextDrawFont(ZOInfo[td_BGs][1], 0);

	ZOInfo[td_BGs][2] = TextDrawCreate(573.832946, 99.981407, "usebox");
	TextDrawLetterSize(ZOInfo[td_BGs][2], 0.000000, 2.083539);
	TextDrawTextSize(ZOInfo[td_BGs][2], 555.499572, 0.000000);
	TextDrawAlignment(ZOInfo[td_BGs][2], 1);
	TextDrawColor(ZOInfo[td_BGs][2], 0);
	TextDrawUseBox(ZOInfo[td_BGs][2], true);
	TextDrawBoxColor(ZOInfo[td_BGs][2], 296674506);
	TextDrawSetShadow(ZOInfo[td_BGs][2], 0);
	TextDrawSetOutline(ZOInfo[td_BGs][2], 0);
	TextDrawFont(ZOInfo[td_BGs][2], 0);

	ZOInfo[td_Ts][0] = TextDrawCreate(517.083190, 100.592536, "humans");
	TextDrawLetterSize(ZOInfo[td_Ts][0], 0.190832, 1.750367);
	TextDrawAlignment(ZOInfo[td_Ts][0], 2);
	TextDrawColor(ZOInfo[td_Ts][0], -1);
	TextDrawSetShadow(ZOInfo[td_Ts][0], 0);
	TextDrawSetOutline(ZOInfo[td_Ts][0], 1);
	TextDrawBackgroundColor(ZOInfo[td_Ts][0], 255);
	TextDrawFont(ZOInfo[td_Ts][0], 2);
	TextDrawSetProportional(ZOInfo[td_Ts][0], 1);

	ZOInfo[td_Ts][1] = TextDrawCreate(564.499938, 101.036987, "T");
	TextDrawLetterSize(ZOInfo[td_Ts][1], 0.190832, 1.750367);
	TextDrawAlignment(ZOInfo[td_Ts][1], 2);
	TextDrawColor(ZOInfo[td_Ts][1], -1);
	TextDrawSetShadow(ZOInfo[td_Ts][1], 0);
	TextDrawSetOutline(ZOInfo[td_Ts][1], 1);
	TextDrawBackgroundColor(ZOInfo[td_Ts][1], 255);
	TextDrawFont(ZOInfo[td_Ts][1], 2);
	TextDrawSetProportional(ZOInfo[td_Ts][1], 1);

	ZOInfo[td_H] = TextDrawCreate(546.416442, 101.074028, "99");
	TextDrawLetterSize(ZOInfo[td_H], 0.190832, 1.750367);
	TextDrawAlignment(ZOInfo[td_H], 2);
	TextDrawColor(ZOInfo[td_H], -1);
	TextDrawSetShadow(ZOInfo[td_H], 0);
	TextDrawSetOutline(ZOInfo[td_H], 1);
	TextDrawBackgroundColor(ZOInfo[td_H], 255);
	TextDrawFont(ZOInfo[td_H], 2);
	TextDrawSetProportional(ZOInfo[td_H], 1);

	ZOInfo[td_Time] = TextDrawCreate(578.083251, 101.074012, "99:99");
	TextDrawLetterSize(ZOInfo[td_Time], 0.190832, 1.750367);
	TextDrawAlignment(ZOInfo[td_Time], 1);
	TextDrawColor(ZOInfo[td_Time], -1);
	TextDrawSetShadow(ZOInfo[td_Time], 0);
	TextDrawSetOutline(ZOInfo[td_Time], 1);
	TextDrawBackgroundColor(ZOInfo[td_Time], 255);
	TextDrawFont(ZOInfo[td_Time], 2);
	TextDrawSetProportional(ZOInfo[td_Time], 1);

	COInfo[td_BGs][0] = TextDrawCreate(554.083557, 101.055511, "usebox");
	TextDrawLetterSize(COInfo[td_BGs][0], 0.000000, 1.839714);
	TextDrawTextSize(COInfo[td_BGs][0], 496.333190, 0.000000);
	TextDrawAlignment(COInfo[td_BGs][0], 1);
	TextDrawColor(COInfo[td_BGs][0], 0);
	TextDrawUseBox(COInfo[td_BGs][0], true);
	TextDrawBoxColor(COInfo[td_BGs][0], 102);
	TextDrawSetShadow(COInfo[td_BGs][0], 0);
	TextDrawSetOutline(COInfo[td_BGs][0], 0);
	TextDrawFont(COInfo[td_BGs][0], 0);

	COInfo[td_BGs][1] = TextDrawCreate(525.749694, 101.055458, "usebox");
	TextDrawLetterSize(COInfo[td_BGs][1], 0.000000, 1.833539);
	TextDrawTextSize(COInfo[td_BGs][1], 496.333190, 0.000000);
	TextDrawAlignment(COInfo[td_BGs][1], 1);
	TextDrawColor(COInfo[td_BGs][1], 0);
	TextDrawUseBox(COInfo[td_BGs][1], true);
	TextDrawBoxColor(COInfo[td_BGs][1], -703127382);
	TextDrawSetShadow(COInfo[td_BGs][1], 0);
	TextDrawSetOutline(COInfo[td_BGs][1], 0);
	TextDrawFont(COInfo[td_BGs][1], 0);

	COInfo[td_BGs][2] = TextDrawCreate(609.666625, 101.018470, "usebox");
	TextDrawLetterSize(COInfo[td_BGs][2], 0.000000, 1.839714);
	TextDrawTextSize(COInfo[td_BGs][2], 553.416442, 0.000000);
	TextDrawAlignment(COInfo[td_BGs][2], 1);
	TextDrawColor(COInfo[td_BGs][2], 0);
	TextDrawUseBox(COInfo[td_BGs][2], true);
	TextDrawBoxColor(COInfo[td_BGs][2], 102);
	TextDrawSetShadow(COInfo[td_BGs][2], 0);
	TextDrawSetOutline(COInfo[td_BGs][2], 0);
	TextDrawFont(COInfo[td_BGs][2], 0);

	COInfo[td_BGs][3] = TextDrawCreate(581.749633, 101.018417, "usebox");
	TextDrawLetterSize(COInfo[td_BGs][3], 0.000000, 1.833539);
	TextDrawTextSize(COInfo[td_BGs][3], 553.416381, 0.000000);
	TextDrawAlignment(COInfo[td_BGs][3], 1);
	TextDrawColor(COInfo[td_BGs][3], 0);
	TextDrawUseBox(COInfo[td_BGs][3], true);
	TextDrawBoxColor(COInfo[td_BGs][3], 428611018);
	TextDrawSetShadow(COInfo[td_BGs][3], 0);
	TextDrawSetOutline(COInfo[td_BGs][3], 0);
	TextDrawFont(COInfo[td_BGs][3], 0);

	COInfo[td_Time] = TextDrawCreate(499.999816, 101.111045, "Time");
	TextDrawLetterSize(COInfo[td_Time], 0.226666, 1.755553);
	TextDrawAlignment(COInfo[td_Time], 1);
	TextDrawColor(COInfo[td_Time], -1);
	TextDrawSetShadow(COInfo[td_Time], 0);
	TextDrawSetOutline(COInfo[td_Time], 1);
	TextDrawBackgroundColor(COInfo[td_Time], 255);
	TextDrawFont(COInfo[td_Time], 2);
	TextDrawSetProportional(COInfo[td_Time], 1);

	COInfo[td_TimeLeft] = TextDrawCreate(526.249938, 100.592613, "15:00");
	TextDrawLetterSize(COInfo[td_TimeLeft], 0.177083, 1.833331);
	TextDrawAlignment(COInfo[td_TimeLeft], 1);
	TextDrawColor(COInfo[td_TimeLeft], -1);
	TextDrawSetShadow(COInfo[td_TimeLeft], 0);
	TextDrawSetOutline(COInfo[td_TimeLeft], 1);
	TextDrawBackgroundColor(COInfo[td_TimeLeft], 51);
	TextDrawFont(COInfo[td_TimeLeft], 2);
	TextDrawSetProportional(COInfo[td_TimeLeft], 1);

	COInfo[td_Jail] = TextDrawCreate(556.833129, 100.555496, "jail");
	TextDrawLetterSize(COInfo[td_Jail], 0.226666, 1.755553);
	TextDrawAlignment(COInfo[td_Jail], 1);
	TextDrawColor(COInfo[td_Jail], -1);
	TextDrawSetShadow(COInfo[td_Jail], 0);
	TextDrawSetOutline(COInfo[td_Jail], 1);
	TextDrawBackgroundColor(COInfo[td_Jail], 255);
	TextDrawFont(COInfo[td_Jail], 2);
	TextDrawSetProportional(COInfo[td_Jail], 1);

	COInfo[td_JailLeft] = TextDrawCreate(582.666748, 100.037048, "0/0");
	TextDrawLetterSize(COInfo[td_JailLeft], 0.177083, 1.833331);
	TextDrawAlignment(COInfo[td_JailLeft], 1);
	TextDrawColor(COInfo[td_JailLeft], -1);
	TextDrawSetShadow(COInfo[td_JailLeft], 0);
	TextDrawSetOutline(COInfo[td_JailLeft], 1);
	TextDrawBackgroundColor(COInfo[td_JailLeft], 51);
	TextDrawFont(COInfo[td_JailLeft], 2);
	TextDrawSetProportional(COInfo[td_JailLeft], 1);

	CTFInfo[td_BGs][0] = TextDrawCreate(351.999969, 427.722259, "usebox");
	TextDrawLetterSize(CTFInfo[td_BGs][0], 0.000000, 2.621602);
	TextDrawTextSize(CTFInfo[td_BGs][0], 287.999969, 0.000000);
	TextDrawAlignment(CTFInfo[td_BGs][0], 1);
	TextDrawColor(CTFInfo[td_BGs][0], 0);
	TextDrawUseBox(CTFInfo[td_BGs][0], true);
	TextDrawBoxColor(CTFInfo[td_BGs][0], 102);
	TextDrawSetShadow(CTFInfo[td_BGs][0], 0);
	TextDrawSetOutline(CTFInfo[td_BGs][0], 0);
	TextDrawFont(CTFInfo[td_BGs][0], 0);

	CTFInfo[td_BGs][1] = TextDrawCreate(315.749938, 427.203826, "usebox");
	TextDrawLetterSize(CTFInfo[td_BGs][1], 0.000000, 2.708537);
	TextDrawTextSize(CTFInfo[td_BGs][1], 288.416625, 0.000000);
	TextDrawAlignment(CTFInfo[td_BGs][1], 1);
	TextDrawColor(CTFInfo[td_BGs][1], 0);
	TextDrawUseBox(CTFInfo[td_BGs][1], true);
	TextDrawBoxColor(CTFInfo[td_BGs][1], -149744726);
	TextDrawSetShadow(CTFInfo[td_BGs][1], 0);
	TextDrawSetOutline(CTFInfo[td_BGs][1], 0);
	TextDrawFont(CTFInfo[td_BGs][1], 0);

	CTFInfo[td_BGs][2] = TextDrawCreate(352.166564, 427.685272, "usebox");
	TextDrawLetterSize(CTFInfo[td_BGs][2], 0.000000, 3.791870);
	TextDrawTextSize(CTFInfo[td_BGs][2], 323.416625, 0.000000);
	TextDrawAlignment(CTFInfo[td_BGs][2], 1);
	TextDrawColor(CTFInfo[td_BGs][2], 0);
	TextDrawUseBox(CTFInfo[td_BGs][2], true);
	TextDrawBoxColor(CTFInfo[td_BGs][2], 578656682);
	TextDrawSetShadow(CTFInfo[td_BGs][2], 0);
	TextDrawSetOutline(CTFInfo[td_BGs][2], 0);
	TextDrawFont(CTFInfo[td_BGs][2], 0);

	CTFInfo[td_Red] = TextDrawCreate(302.083129, 427.777740, "0");
	TextDrawLetterSize(CTFInfo[td_Red], 0.304580, 2.045923);
	TextDrawAlignment(CTFInfo[td_Red], 2);
	TextDrawColor(CTFInfo[td_Red], -1);
	TextDrawSetShadow(CTFInfo[td_Red], 0);
	TextDrawSetOutline(CTFInfo[td_Red], 1);
	TextDrawBackgroundColor(CTFInfo[td_Red], 255);
	TextDrawFont(CTFInfo[td_Red], 2);
	TextDrawSetProportional(CTFInfo[td_Red], 1);

	CTFInfo[td_Blue] = TextDrawCreate(337.666442, 428.259246, "0");
	TextDrawLetterSize(CTFInfo[td_Blue], 0.304580, 2.045923);
	TextDrawAlignment(CTFInfo[td_Blue], 2);
	TextDrawColor(CTFInfo[td_Blue], -1);
	TextDrawSetShadow(CTFInfo[td_Blue], 0);
	TextDrawSetOutline(CTFInfo[td_Blue], 1);
	TextDrawBackgroundColor(CTFInfo[td_Blue], 255);
	TextDrawFont(CTFInfo[td_Blue], 2);
	TextDrawSetProportional(CTFInfo[td_Blue], 1);
	
	CTFInfo[td_BlueInfo] = TextDrawCreate(354.166717, 423.629760, " ");
	TextDrawLetterSize(CTFInfo[td_BlueInfo], 0.150416, 1.522220);
	TextDrawAlignment(CTFInfo[td_BlueInfo], 1);
	TextDrawColor(CTFInfo[td_BlueInfo], -1);
	TextDrawSetShadow(CTFInfo[td_BlueInfo], 0);
	TextDrawSetOutline(CTFInfo[td_BlueInfo], 1);
	TextDrawBackgroundColor(CTFInfo[td_BlueInfo], 51);
	TextDrawFont(CTFInfo[td_BlueInfo], 2);
	TextDrawSetProportional(CTFInfo[td_BlueInfo], 1);

	CTFInfo[td_RedInfo] = TextDrawCreate(285.583251, 423.592620, " ");
	TextDrawLetterSize(CTFInfo[td_RedInfo], 0.150416, 1.522220);
	TextDrawAlignment(CTFInfo[td_RedInfo], 3);
	TextDrawColor(CTFInfo[td_RedInfo], -1);
	TextDrawSetShadow(CTFInfo[td_RedInfo], 0);
	TextDrawSetOutline(CTFInfo[td_RedInfo], 1);
	TextDrawBackgroundColor(CTFInfo[td_RedInfo], 51);
	TextDrawFont(CTFInfo[td_RedInfo], 2);
	TextDrawSetProportional(CTFInfo[td_RedInfo], 1);

	CTFInfo[td_Fracs][0] = TextDrawCreate(305.416717, 437.629669, "/5");
	TextDrawLetterSize(CTFInfo[td_Fracs][0], 0.152916, 1.008888);
	TextDrawAlignment(CTFInfo[td_Fracs][0], 1);
	TextDrawColor(CTFInfo[td_Fracs][0], -1);
	TextDrawSetShadow(CTFInfo[td_Fracs][0], 0);
	TextDrawSetOutline(CTFInfo[td_Fracs][0], 1);
	TextDrawBackgroundColor(CTFInfo[td_Fracs][0], 255);
	TextDrawFont(CTFInfo[td_Fracs][0], 2);
	TextDrawSetProportional(CTFInfo[td_Fracs][0], 1);

	CTFInfo[td_Fracs][1] = TextDrawCreate(340.999969, 437.592620, "/5");
	TextDrawLetterSize(CTFInfo[td_Fracs][1], 0.152916, 1.008888);
	TextDrawAlignment(CTFInfo[td_Fracs][1], 1);
	TextDrawColor(CTFInfo[td_Fracs][1], -1);
	TextDrawSetShadow(CTFInfo[td_Fracs][1], 0);
	TextDrawSetOutline(CTFInfo[td_Fracs][1], 1);
	TextDrawBackgroundColor(CTFInfo[td_Fracs][1], 255);
	TextDrawFont(CTFInfo[td_Fracs][1], 2);
	TextDrawSetProportional(CTFInfo[td_Fracs][1], 1);
}

stock Settings()
{
	//printf("DEBUG CFONTROL Settings 1");
    DeleteDMMapStuff();
    DeletePJMapStuff();
    UpdateDMMaps();
    UpdatePJMaps();
    
    forLoop(y, MAX_EVENTS)
	{
    	forLoop(i, MAX_EVENT_OBJECTS)EventInfo[y][Objects][i] = -1;
    	forLoop(i, MAX_EVENT_SPOTS)EventInfo[y][Vehicles][i] = -1;
		EventInfo[y][Exists]=0;
	}
    forLoop(y, MAX_TW_SQUADS) SquadInfo[y][Exists]=0;
    forLoop(y, MAX_FFA_GANGS_ALL)
	{
	    GangInfo[y][Rocket]=-1;
	    GangInfo[y][M4]=-1;
	    GangInfo[y][Ak]=-1;
	    GangInfo[y][Mp5]=-1;
	    GangInfo[y][Sniper]=-1;
	    GangInfo[y][Rifle]=-1;
	    GangInfo[y][Deagle]=-1;
	    GangInfo[y][UZI]=-1;
	    GangInfo[y][Tec]=-1;
	    GangInfo[y][Grenade]=-1;
	    GangInfo[y][Shotgun]=-1;
	    GangInfo[y][Sawed]=-1;
	    GangInfo[y][Spac]=-1;
	    GangInfo[y][Molotov]=-1;
	    GangInfo[y][gHP]=-1;
	    GangInfo[y][gArmor]=-1;
	    GangInfo[y][gJP]=-1;
		GangInfo[y][OutPickup]=-1;
		GangInfo[y][InPickup]=-1;
		GangInfo[y][gZone]=-1;
		GangInfo[y][Exists]=0;
	}
	forLoop(y, MAX_TW_PICKS) TWInfo[Pickups][y] = -1;
    forLoop(y, MAX_TL_OBJECTS)TLInfo[Objects][y] = -1;
	forLoop(y, MAX_PLAYERS) PlayerInfo[y][Vehicle] = -1;
	forLoop(y, MAX_TW_VEHICLES) TWInfo[Vehicles][y] = -1;
	forLoop(y, MAX_GK_VEHICLES) GKInfo[Vehicles][y] = -1;

	forLoop(y, MAX_TW_TOWERS)
	{
		TWAATower[y][Exists]=0;
	}
	forLoop(y, MAX_SHIPS)
	{
	    ShipInfo[y][Exists]=0;
	    forLoop(i, MAX_SHIP_VEHS) ShipInfo[y][Vehicles][i] = -1;
		ShipInfo[y][Object] = -1;
	}
	forLoop(y, MAX_TL_TOWERS)
	{
		TLAATower[y][Exists]=0;
	}
	forLoop(y, MAX_TL_VEHICLES)
	{
    	TLInfo[Vehicles][y] = -1;
	}
	forLoop(y, MAX_CO_VEHICLES)
	{
    	COInfo[Vehicles][y] = -1;
	}
    forLoop(id, PTP_MAX_VEHICLES)
    {
    	PTPInfo[Vehicles][id] = -1;
    }
	CreatePickup(1254, 23,2133.51,1041.8232,20000.5506, -1); //test
	CreatePickup(1254, 23,2134.511,1012.8232,20000.5506, -1); //test2
	GangZoneCreate(202.783447, -17.186729, 212.783447, 11.813262);


	//freemode
	new treasure_model = 1274;
    FFAInfo[Treasures][0]=CreateDynamicPickup(treasure_model, 1,-2887.6331,2436.8655,201.7058,W_FFA); // treasure 1
	FFAInfo[Treasures][1]=CreateDynamicPickup(treasure_model, 1,-1140.4266,2859.3689,64.1022,W_FFA); // treasure 2
	FFAInfo[Treasures][2]=CreateDynamicPickup(treasure_model, 1,-427.5540,2505.3855,124.3047,W_FFA); // treasure 3
	FFAInfo[Treasures][3]=CreateDynamicPickup(treasure_model, 1,-1753.6006,804.5240,168.3660,W_FFA); // tras
	FFAInfo[Treasures][4]=CreateDynamicPickup(treasure_model, 1,876.6941,2725.5361,20.4969,W_FFA); // trasu
	FFAInfo[Treasures][5]=CreateDynamicPickup(treasure_model, 1,-2366.9304,1535.6541,2.1172,W_FFA); // treas
	FFAInfo[Treasures][6]=CreateDynamicPickup(treasure_model, 1,-2431.5015,-1619.2819,526.2352,W_FFA); // treas
	FFAInfo[Treasures][7]=CreateDynamicPickup(treasure_model, 1,-2595.1863,-1539.9004,420.5467,W_FFA); // treas
	FFAInfo[Treasures][8]=CreateDynamicPickup(treasure_model, 1,-735.0062,-1909.0948,69.8482,W_FFA); // trea
	FFAInfo[Treasures][9]=CreateDynamicPickup(treasure_model, 1,-861.0542,-1436.5399,94.9910,W_FFA); // treas
	FFAInfo[Treasures][10]=CreateDynamicPickup(treasure_model, 1,-2418.7136,-2823.9890,3.0000,W_FFA); //  tras
	FFAInfo[Treasures][11]=CreateDynamicPickup(treasure_model, 1,2566.2424,-555.1666,114.4780,W_FFA); // trea
	FFAInfo[Treasures][12]=CreateDynamicPickup(treasure_model, 1,2058.5901,2404.5833,150.4766,W_FFA); // treas
	FFAInfo[Treasures][13]=CreateDynamicPickup(treasure_model, 1,421.0332,2857.8398,33.4232,W_FFA); //
	FFAInfo[Treasures][14]=CreateDynamicPickup(treasure_model, 1,709.4238,916.0052,53.6736,W_FFA); // treas
	FFAInfo[Treasures][15]=CreateDynamicPickup(treasure_model, 1,619.1095,886.9000,-33.8750,W_FFA); // treas
	FFAInfo[Treasures][16]=CreateDynamicPickup(treasure_model, 1,2234.0732,1089.9174,40.7969,W_FFA); // treas
	FFAInfo[Treasures][17]=CreateDynamicPickup(treasure_model, 1,-751.8923,1129.0013,32.6742,W_FFA); // treas
	FFAInfo[Treasures][18]=CreateDynamicPickup(treasure_model, 1,-2683.4248,1594.4141,217.2739,W_FFA); // treas
	FFAInfo[Treasures][19]=CreateDynamicPickup(treasure_model, 1,-2660.7251,1419.1506,23.8984,W_FFA); // treas
    FFAInfo[Treasures][20]=CreateDynamicPickup(treasure_model, 1,-897.2676,1612.2847,23.5214,W_FFA); // treas
	FFAInfo[Treasures][21]=CreateDynamicPickup(treasure_model, 1,-1051.9890,1546.9354,33.4569,W_FFA); // treas
	FFAInfo[Treasures][22]=CreateDynamicPickup(treasure_model, 1,-1519.7037,676.6038,139.2734,W_FFA); // treas
	FFAInfo[Treasures][23]=CreateDynamicPickup(treasure_model, 1,-1757.2493,774.0735,45.0554,W_FFA); // treas
	FFAInfo[Treasures][24]=CreateDynamicPickup(treasure_model, 1,-1756.1853,806.1931,44.1459,W_FFA); // treas
	FFAInfo[Treasures][25]=CreateDynamicPickup(treasure_model, 1,-1876.7987,948.2148,49.8047,W_FFA); // treas
	FFAInfo[Treasures][26]=CreateDynamicPickup(treasure_model, 1,-1989.7079,1118.0267,73.9896,W_FFA); // treas
	FFAInfo[Treasures][27]=CreateDynamicPickup(treasure_model, 1,-1959.7030,664.9697,47.7031,W_FFA); // treas
	FFAInfo[Treasures][28]=CreateDynamicPickup(treasure_model, 1,-1951.8276,649.4489,47.7031,W_FFA); // treas
	FFAInfo[Treasures][29]=CreateDynamicPickup(treasure_model, 1,-1952.4037,659.9423,102.7302,W_FFA); // treas
	FFAInfo[Treasures][30]=CreateDynamicPickup(treasure_model, 1,-1769.5707,502.1561,34.7310,W_FFA); // treas
	FFAInfo[Treasures][31]=CreateDynamicPickup(treasure_model, 1,-1688.3087,581.9686,29.3691,W_FFA); // treas
	FFAInfo[Treasures][32]=CreateDynamicPickup(treasure_model, 1,-1532.9402,685.8642,39.1740,W_FFA); // treas
	FFAInfo[Treasures][33]=CreateDynamicPickup(treasure_model, 1,-1132.7485,1101.6317,32.6523,W_FFA); // treas
	FFAInfo[Treasures][34]=CreateDynamicPickup(treasure_model, 1,-1677.4719,1210.7771,21.1563,W_FFA); // treas
	FFAInfo[Treasures][35]=CreateDynamicPickup(treasure_model, 1,-1686.4719,1035.1820,56.9063,W_FFA); // treas
	FFAInfo[Treasures][36]=CreateDynamicPickup(treasure_model, 1,-1884.1442,785.8140,109.8438,W_FFA); // treas
	FFAInfo[Treasures][37]=CreateDynamicPickup(treasure_model, 1,-2104.9587,891.9241,76.7031,W_FFA);// treas
	FFAInfo[Treasures][38]=CreateDynamicPickup(treasure_model, 1,-2664.9241,868.0731,76.2734,W_FFA); // treas
	FFAInfo[Treasures][39]=CreateDynamicPickup(treasure_model, 1,-2704.6353,845.2526,66.1552,W_FFA); // treas
	FFAInfo[Treasures][40]=CreateDynamicPickup(treasure_model, 1,-2713.1482,853.1864,77.0960,W_FFA); // treas
	FFAInfo[Treasures][41]=CreateDynamicPickup(treasure_model, 1,-2769.8467,789.1190,59.4297,W_FFA); // treas
	FFAInfo[Treasures][42]=CreateDynamicPickup(treasure_model, 1,-2518.6104,313.2928,27.7656,W_FFA); // treas
	FFAInfo[Treasures][43]=CreateDynamicPickup(treasure_model, 1,-2546.2161,191.8963,13.0391,W_FFA);// treas
	FFAInfo[Treasures][44]=CreateDynamicPickup(treasure_model, 1,-2718.2173,-319.1707,57.4873,W_FFA); // treas
	FFAInfo[Treasures][45]=CreateDynamicPickup(treasure_model, 1,-2639.8005,-410.2354,37.1772,W_FFA); // treas
	FFAInfo[Treasures][46]=CreateDynamicPickup(treasure_model, 1,-2527.5034,-705.7775,139.3203,W_FFA); // treas
	FFAInfo[Treasures][47]=CreateDynamicPickup(treasure_model, 1,-2507.0046,-943.8470,15.9659,W_FFA); // treas
	FFAInfo[Treasures][48]=CreateDynamicPickup(treasure_model, 1,-2292.8572,-1215.1163,210.4698,W_FFA); // treas
	FFAInfo[Treasures][49]=CreateDynamicPickup(treasure_model, 1,-2194.4641,-1416.5646,222.5735,W_FFA); // treas
	FFAInfo[Treasures][50]=CreateDynamicPickup(treasure_model, 1,-392.6797,2484.6375,41.7051,W_FFA);// treas
	FFAInfo[Treasures][51]=CreateDynamicPickup(treasure_model, 1,-625.3308,2369.7119,132.4650,W_FFA);// trea
	FFAInfo[Treasures][52]=CreateDynamicPickup(treasure_model, 1,1561.2350,-1472.1538,13.5458,W_FFA); // trea
	FFAInfo[Treasures][53]=CreateDynamicPickup(treasure_model, 1,1434.0979,-1494.7650,19.9955,W_FFA); // trea
	FFAInfo[Treasures][54]=CreateDynamicPickup(treasure_model, 1,1434.4585,-1501.7062,21.3906,W_FFA); // trea
	FFAInfo[Treasures][55]=CreateDynamicPickup(treasure_model, 1,1590.4025,-1657.7324,19.8792,W_FFA); // trea
	FFAInfo[Treasures][56]=CreateDynamicPickup(treasure_model, 1,1564.5781,-1675.4935,61.8907,W_FFA); // trea
	FFAInfo[Treasures][57]=CreateDynamicPickup(treasure_model, 1,2119.2161,-2007.4094,7.5286,W_FFA); // trea
	FFAInfo[Treasures][58]=CreateDynamicPickup(treasure_model, 1,2058.3667,-1994.1438,39.8440,W_FFA); // trea
	FFAInfo[Treasures][59]=CreateDynamicPickup(treasure_model, 1,2141.2983,-2180.8813,13.1208,W_FFA); // trea
	FFAInfo[Treasures][60]=CreateDynamicPickup(treasure_model, 1,2232.2864,-2268.0510,14.7647,W_FFA); // trea
	FFAInfo[Treasures][61]=CreateDynamicPickup(treasure_model, 1,2256.8411,-2251.7498,13.5469,W_FFA); // trea
	FFAInfo[Treasures][62]=CreateDynamicPickup(treasure_model, 1,2157.4287,-2320.9336,13.1206,W_FFA); // trea
	FFAInfo[Treasures][63]=CreateDynamicPickup(treasure_model, 1,2203.9170,-2210.6204,15.1711,W_FFA); // trea
	FFAInfo[Treasures][64]=CreateDynamicPickup(treasure_model, 1,2200.9854,-2328.9382,33.7149,W_FFA); // trea
	FFAInfo[Treasures][65]=CreateDynamicPickup(treasure_model, 1,2211.7004,-2458.5359,42.1496,W_FFA); // trea
	FFAInfo[Treasures][66]=CreateDynamicPickup(treasure_model, 1,2838.3438,-2485.5947,24.5381,W_FFA); // trea
	FFAInfo[Treasures][67]=CreateDynamicPickup(treasure_model, 1,2837.8762,-2341.5586,-11.1066,W_FFA); // trea
	FFAInfo[Treasures][68]=CreateDynamicPickup(treasure_model, 1,2563.7310,-2238.4504,0.1635,W_FFA); // trea
	FFAInfo[Treasures][69]=CreateDynamicPickup(treasure_model, 1,1075.3999,-2391.3811,-0.2591,W_FFA); // trea
	FFAInfo[Treasures][70]=CreateDynamicPickup(treasure_model, 1,839.8622,-1886.8656,3.0962,W_FFA); // trea
	FFAInfo[Treasures][71]=CreateDynamicPickup(treasure_model, 1,720.8451,-1489.2733,2.2179,W_FFA); // trea
	FFAInfo[Treasures][72]=CreateDynamicPickup(treasure_model, 1,726.6741,-1785.5284,-9.4197,W_FFA); // trea
	FFAInfo[Treasures][73]=CreateDynamicPickup(treasure_model, 1,-54.0337,-1403.3906,2.3517,W_FFA);// trea
	FFAInfo[Treasures][74]=CreateDynamicPickup(treasure_model, 1,-217.2596,-601.8731,-0.1263,W_FFA); // trea
	FFAInfo[Treasures][75]=CreateDynamicPickup(treasure_model, 1,-991.5067,-409.7979,-6.7118,W_FFA);// trea
	FFAInfo[Treasures][76]=CreateDynamicPickup(treasure_model, 1,-1918.1176,-1027.0824,31.6528,W_FFA); // trea
	FFAInfo[Treasures][77]=CreateDynamicPickup(treasure_model, 1,-1684.1589,-1037.2030,73.6170,W_FFA); // trea
	FFAInfo[Treasures][78]=CreateDynamicPickup(treasure_model, 1,-1953.9316,-862.0208,31.6073,W_FFA);// trea
	FFAInfo[Treasures][79]=CreateDynamicPickup(treasure_model, 1,2007.4426,-2424.0745,13.5469,W_FFA); // 1st treasure
	FFAInfo[Treasures][80]=CreateDynamicPickup(treasure_model, 1,-1954.1272,-791.8975,35.8909,W_FFA);// trea
	FFAInfo[Treasures][81]=CreateDynamicPickup(treasure_model, 1,-2019.1764,-819.4343,30.1793,W_FFA); // trea
	FFAInfo[Treasures][82]=CreateDynamicPickup(treasure_model, 1,-1418.8125,-1477.3257,101.6719,W_FFA);// trea
	FFAInfo[Treasures][83]=CreateDynamicPickup(treasure_model, 1,-1850.8171,-1552.9950,21.3152,W_FFA); // trea
	FFAInfo[Treasures][84]=CreateDynamicPickup(treasure_model, 1,-1842.2733,-1694.8964,32.4753,W_FFA); // trea
	FFAInfo[Treasures][85]=CreateDynamicPickup(treasure_model, 1,-1583.7894,-2573.5002,27.9877,W_FFA); // trea
	FFAInfo[Treasures][86]=CreateDynamicPickup(treasure_model, 1,-989.8898,-2323.9644,67.8174,W_FFA);// trea
	FFAInfo[Treasures][87]=CreateDynamicPickup(treasure_model, 1,-2134.5347,1192.8125,74.3864,W_FFA); // trea
	FFAInfo[Treasures][88]=CreateDynamicPickup(treasure_model, 1,-1692.0210,1139.6881,75.7813,W_FFA); // trea
	FFAInfo[Treasures][89]=CreateDynamicPickup(treasure_model, 1,-1667.0370,989.0165,49.3281,W_FFA); // trea
	FFAInfo[Treasures][90]=CreateDynamicPickup(treasure_model, 1,2706.7839,951.3347,26.5469,W_FFA); //
	FFAInfo[Treasures][91]=CreateDynamicPickup(treasure_model, 1,2691.3430,867.6603,10.1387,W_FFA); // trea
	FFAInfo[Treasures][92]=CreateDynamicPickup(treasure_model, 1,2687.9087,834.0967,24.4501,W_FFA); // trea
	FFAInfo[Treasures][93]=CreateDynamicPickup(treasure_model, 1,2560.0022,796.3901,5.3158,W_FFA); // trea
	FFAInfo[Treasures][94]=CreateDynamicPickup(treasure_model, 1,2646.2686,761.0602,35.6651,W_FFA); // trea
	FFAInfo[Treasures][95]=CreateDynamicPickup(treasure_model, 1,2786.1094,961.8860,14.2559,W_FFA); // trea
	FFAInfo[Treasures][96]=CreateDynamicPickup(treasure_model, 1,1890.5811,-1315.9375,19.4953,W_FFA); // trea
	FFAInfo[Treasures][97]=CreateDynamicPickup(treasure_model, 1,1859.8011,-1449.1953,28.7969,W_FFA);// trea
	FFAInfo[Treasures][98]=CreateDynamicPickup(treasure_model, 1,1906.9086,-1577.6566,23.9495,W_FFA); // trea
	FFAInfo[Treasures][99]=CreateDynamicPickup(treasure_model, 1,1696.5532,-1969.3888,8.8250,W_FFA);// trea
	FFAInfo[Treasures][100]=CreateDynamicPickup(treasure_model, 1,858.1108,-1386.8220,-0.5015,W_FFA); // trea
	FFAInfo[Treasures][101]=CreateDynamicPickup(treasure_model, 1,383.2918,-2684.9634,-0.7563,W_FFA);

    CreateFFApicks(0,2002.0509,-2451.6460);//ls spawn
    
	//server intro tags!!
    ServerInfo[sTag][0] = CreateDynamicObject(19481, 154.968582, -1951.474365, 39.384796, 0.000000, -4.400002, -71.699951, W_INTRO);
    SetDynamicObjectMaterialText(ServerInfo[sTag][0], 0, "{FFFFFF}Pangea", OBJECT_MATERIAL_SIZE_256x128,
	"Arial", 35, 0, 0xFFFFFF00, 0, OBJECT_MATERIAL_TEXT_ALIGN_RIGHT);

	ServerInfo[sTag][1] = CreateDynamicObject(19481, 388.141754, -2045.854858, 27.927066, 0.000000, 0.000000, 178.099990, W_INTRO);
    SetDynamicObjectMaterialText(ServerInfo[sTag][1], 0, "{FFFFFF}a Multi-mode Server", OBJECT_MATERIAL_SIZE_256x128,
	"Arial", 25, 0, 0xFFFFFF00, 0, OBJECT_MATERIAL_TEXT_ALIGN_RIGHT);

	//RP house exit
    CreateDynamic3DTextLabel("{CCCCCC}Press '{33FF33}ENTER{CCCCCC}' to exit", 0xCCCCCCAA, 2807.5911,-1174.4734,1025.5703, 4,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,0, -1, -1, -1, 100);

    CreateDynamic3DTextLabel("{CCCCCC}Press '{33FF33}ENTER{CCCCCC}' to exit", 0xCCCCCCAA, 2732.6023,-1864.0302,1237.2156, 4,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,0, -1, -1, -1, 100);
	CreateDynamic3DTextLabel("{CCCCCC}Press '{33FF33}ENTER{CCCCCC}' to exit", 0xCCCCCCAA, 2655.1648,-1421.2745,1129.4218, 4,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,0, -1, -1, -1, 100);
	CreateDynamic3DTextLabel("{CCCCCC}Press '{33FF33}ENTER{CCCCCC}' to exit", 0xCCCCCCAA, 521.2170,-2433.5474,1204.1504, 4,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,0, -1, -1, -1, 100);

	new string2[2000];
	strcat(string2," {FFFFFF}>>{FF9900}Stunt&Fun(SF){FFFFFF}<<");
	strcat(string2,"\n{FFFFFF}>>{FF9900}Events:");
	strcat(string2,"\n{33FF33} /events - {FFFFFF}See the whole list of created events.");
	strcat(string2,"\n{33FF33} /estart - {FFFFFF}Start an event(race,dm,derby..etc).");
	strcat(string2,"\n{33FF33} /ejoin(/equit) - {FFFFFF}Join/quit an event.");
	strcat(string2,"\n{33FF33} /einfo - {FFFFFF}Check an event's info.");
	strcat(string2,"\n{33FF33} /inevent - {FFFFFF}See which player is in the current event.");
	strcat(string2,"\n{33FF33} /watch (/stopwatch) - {FFFFFF}Spectate someone in an event.");
	strcat(string2,"\n{FFFFFF}>>{FF9900}About Teleport:");
	strcat(string2,"\n{33FF33} /teles - {FFFFFF}See the teleport list.");
	strcat(string2,"\n{33FF33} /tele - {FFFFFF}Teleport to a friend.");
	strcat(string2,"\n{33FF33} /blocktele - {FFFFFF}Block/unblock teleports to your position.");
	strcat(string2,"\n{33FF33} /s - {FFFFFF}Save the current position");
	strcat(string2,"\n{33FF33} /ssp - {FFFFFF}Save the current position as spawn place");
	strcat(string2,"\n{FFFFFF}>>{FF9900}Player:");
	strcat(string2,"\n{33FF33} /cars - {FFFFFF}Vehicle selection menu.");
	strcat(string2,"\n{33FF33} /car - {FFFFFF}Spawn a specific vehicle. (EG: /car nrg)");
	strcat(string2,"\n{33FF33} /tunecar - {FFFFFF}Modify your vehicle.");
	strcat(string2,"\n{33FF33} /fcar - {FFFFFF}Flip your vehicle.");
	strcat(string2,"\n{33FF33} /nos - {FFFFFF}Add NOS to your vehicle.");
	strcat(string2,"\n{33FF33} /jetpack - {FFFFFF}Spawn a jetpack.");
	strcat(string2,"\n{33FF33} /skin or /skins - {FFFFFF}Change your skin.");
	strcat(string2,"\n{33FF33} /attachments - {FFFFFF}Attach objects to your body.");
	strcat(string2,"\n{33FF33} /superman - {FFFFFF}Enable/disable Superman mode!");
	//strcat(string2,"\n{33FF33} /spiderman - {FFFFFF}Enable/disable Spiderman mode!");
	Create3DTextLabel(string2,white,1752.6595,-2543.3525,20.5469,30.0,W_STUNT,0);

	format(string2,20," ");
    strcat(string2,"{FFFFFF}>>{FF9900}Free For All(FFA){FFFFFF}<<");
	strcat(string2,"\n{33FF33} /cars - {FFFFFF}Vehicle selection menu.");
	strcat(string2,"\n{33FF33} /car - {FFFFFF}Spawn a specific vehicle. (EG: /car nrg)");
	strcat(string2,"\n{33FF33} /tunecar - {FFFFFF}Modify your vehicle.");
	strcat(string2,"\n{33FF33} /skin or /skins - {FFFFFF}Change your skin.");
	strcat(string2,"\n{33FF33} /attachments - {FFFFFF}Attach objects to your body.");
	strcat(string2,"\n{FFFFFF}>>{FF9900}Properties:");
	strcat(string2,"\n{33FF33} /changeffaspawn - {FFFFFF}Spawn inside a building.");
	strcat(string2,"\n{33FF33} /pbuy - /psell - {FFFFFF}Buy or sell a building.");
	strcat(string2,"\n{33FF33} /plock - {FFFFFF}Lock/unlock a building.");
    Create3DTextLabel(string2,white,2002.0509,-2451.6460,18.5469,30.0,W_FFA,0);
}

stock ChangeThem(playerid)
{
	//printf("DEBUG CFONTROL ChangeThem 1");
	SetTimerEx("StartNewGameForPlayer",4000,0,"d",playerid);
    
    CameraPos(playerid);
	DeleteMapIcons(playerid);
	TogglePlayerControllable(playerid,false);
 	DisablePlayerCheckpoint(playerid);
	//printf("DEBUG CFONTROL ChangeThem 2");
}



stock PowerTakesOver()
{
	//printf("DEBUG CFONTROL PowerTakesOver 1");
	new axiscountships=0,allycountships=0,axiscountzones=0,allycountzones=0;
	new originalaxiszones,originalallyzones;

	forLoop(id, MAX_TW_ZONES)
	{
	    if(TWZoneInfo[id][Exists] && TWZoneInfo[id][Needed]>0)
        {
			if(TWZoneInfo[id][OriginalTeam] == ALLIES)
			{
			    originalallyzones++;
			}
			if(TWZoneInfo[id][OriginalTeam] == AXIS)
			{
                originalaxiszones++;
			}
			if(TWZoneInfo[id][OriginalTeam] == ALLIES && TWZoneInfo[id][Team] != AXIS)
			{
			    allycountzones++;
			}
			if(TWZoneInfo[id][OriginalTeam] == AXIS && TWZoneInfo[id][Team] != ALLIES)
			{
                axiscountzones++;
			}
        }
	}
    forLoop(id, MAX_SHIPS)
	{
	    if(ShipInfo[id][Exists] && ShipInfo[id][Mode] == TW)
	    {
			if(ShipInfo[id][Team] == AXIS && ShipInfo[id][sHP] > 0)
			{
	            axiscountships++;
			}
			if(ShipInfo[id][Team] == ALLIES && ShipInfo[id][sHP] > 0)
			{
	            allycountships++;
			}
		}
	}

	if(AxisLeeaderCount() == 0 && axiscountships==0 && axiscountzones == 0 && allycountzones == originalallyzones)
	{
		forLoop(i, MAX_PLAYERS) if(IsPlayerConnected(i) && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][PlayerMode] == TW)
		{
			SendClientMessage(i,white,"{33FF33}WAR NEWS:{FFFFFF} Axis Power has been defeated! Allies win the war!");
		    GameTextForPlayer(i, "~n~ ~n~ ~n~ ~n~ Allies WIN THE WAR!", 5000, 3);
	    }
        AllyWin();
		StartNewGame();
	}
	if(AllyLeeaderCount() == 0 && allycountships==0 && allycountzones==0 && axiscountzones == originalaxiszones)
	{
	    forLoop(i, MAX_PLAYERS) if(IsPlayerConnected(i) && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][PlayerMode]== TW)
		{
		    SendClientMessage(i,white,"{33FF33}WAR NEWS:{FFFFFF} Ally Power has been defeated! Axis wins the war!");
		    GameTextForPlayer(i, "~n~ ~n~ ~n~ ~n~ Axis WIN THE WAR!", 5000, 3);
	    }
	    AxisWin();
	    StartNewGame();
	}
	//printf("DEBUG CFONTROL PowerTakesOver 2");
}

stock RefoundKiller(playerid)
{
	//printf("DEBUG CFONTROL RefoundKiller 1");
	GiveThePlayerMoney(playerid, 20000);
	TWPlayerInfo[playerid][LeadersKilled]++;
	ChangeModeScore(playerid, 50);
	SendClientMessage(playerid,green1, "{33FF33}Notice:{FFFFFF} You got a +50 score & win $20,000 for killing a leader.");
    if(TWPlayerInfo[playerid][LeadersKilled] == 500)
	{
	    TWPlayerInfo[playerid][WeapRank] = 6;
	    new string[128];
		format(string,126,"{FF0000}WAR NEWS:{FFFFFF} %s has killed 500 leaders and unlocked all weaps of rank 6!",PlayerInfo[playerid][Name]);
		SendMessageToMode(TW,green1,string);
	  	format(string, sizeof(string), "[WAR NEWS] %s has killed 500 leaders and unlocked all weaps of rank 6!",PlayerInfo[playerid][Name]);
		db_SaveChat(-1, TW,string);
	}
	if(TWPlayerInfo[playerid][LeadersKilled] == 1000)
	{
	    TWPlayerInfo[playerid][AirRank] = 6;
	    new string[128];
		format(string,126,"{FF0000}WAR NEWS:{FFFFFF} %s has killed 1000 leaders and unlocked air rank 6!",PlayerInfo[playerid][Name]);
		SendMessageToMode(TW,green1,string);
	  	format(string, sizeof(string), "[WAR NEWS] %s has killed 1000 leaders and unlocked air rank 6!",PlayerInfo[playerid][Name]);
		db_SaveChat(-1, TW,string);
	}
	//printf("DEBUG CFONTROL RefoundKiller 2");
	return 1;
}
stock RefoundSurvivor(playerid)
{
	//printf("DEBUG CFONTROL RefoundSurvivor 1");
	GiveThePlayerMoney(playerid, 25000);
	TWPlayerInfo[playerid][Survives]++;
	TWPlayerInfo[playerid][AlreadyLeader] = 900;
	ChangeModeScore(playerid, 55);
	SendClientMessage(playerid,green1, "{33FF33}Notice:{FFFFFF} You got a +55 score & win $25,000 for surviving this round.");
	BodyGuardLeaderSurvives(playerid);
	OtherLeaderSurvives(playerid);
	if(TWPlayerInfo[playerid][Survives] == 100)
	{
	    TWPlayerInfo[playerid][WeapRank] = 6;
	    new string[128];
		format(string,126,"{FF0000}WAR NEWS:{FFFFFF} %s just completed his 100th survive as a leader and unlocked weap rank 6!",PlayerInfo[playerid][Name]);
		SendMessageToMode(TW,green1,string);
	  	format(string, sizeof(string), "[WAR NEWS] %s just completed his 100th survive as a leader and unlocked weap rank 6!",PlayerInfo[playerid][Name]);
		db_SaveChat(-1, TW,string);
	}
	if(TWPlayerInfo[playerid][Survives] == 200)
	{
	    TWPlayerInfo[playerid][AirRank] = 6;
	    new string[128];
		format(string,126,"{FF0000}WAR NEWS:{FFFFFF} %s just completed his 200th survive as a leader and unlocked air rank 6!",PlayerInfo[playerid][Name]);
		SendMessageToMode(TW,green1,string);
	  	format(string, sizeof(string), "[WAR NEWS] %s just completed his 200th survive as a leader and unlocked air rank 6!",PlayerInfo[playerid][Name]);
		db_SaveChat(-1, TW,string);
	}
	//printf("DEBUG CFONTROL RefoundSurvivor 2");
	return 1;
}
stock RefoundAtomicBomber(playerid)
{
	//printf("DEBUG CFONTROL RefoundAtomicBomber 1");
    GiveThePlayerMoney(playerid, 5000);
	ChangeModeScore(playerid, 10);
	TWPlayerInfo[playerid][ABombsDropped] ++;
	SendClientMessage(playerid,green1, "{33FF33}Notice:{FFFFFF} You got a +10 score and $5,000 for dropping the atomic bomb!");
	//printf("DEBUG CFONTROL RefoundAtomicBomber 2");
	return 1;
}
stock RefoundMedicPoison(playerid)
{
	//printf("DEBUG CFONTROL RefoundMedicPoison 1");
    GiveThePlayerMoney(playerid, 2000);
	ChangeModeScore(playerid, 10);
	SendClientMessage(playerid,green1, "Notice:{FFFFFF} You earned 2,000 dollars and 10 score for poisoning an enemy!");
	//printf("DEBUG CFONTROL RefoundMedicPoison 2");
	return 1;
}
stock RefoundMedicPoisonForLeader(playerid)
{
	//printf("DEBUG CFONTROL RefoundMedicPoisonForLeader 1");
    GiveThePlayerMoney(playerid, 15000);
	ChangeModeScore(playerid, 20);
	SendClientMessage(playerid,green1, "Notice:{FFFFFF} You earned 15,000 dollars and 20 score for poisoning a leader!");
	//printf("DEBUG CFONTROL RefoundMedicPoisonForLeader 2");
	return 1;
}

stock RefoundMedic(playerid)
{
	//printf("DEBUG CFONTROL RefoundMedic 1");
    GiveThePlayerMoney(playerid, 5000);
	ChangeModeScore(playerid, 10);
	TWPlayerInfo[playerid][PeopleSaved] ++;
	SendClientMessage(playerid,green1, "{33FF33}Notice:{FFFFFF} You got a +10 score and $5,000 for healing an injured player.");
	GiveMedicRanks(playerid);
	//printf("DEBUG CFONTROL RefoundMedic 2");
	return 1;
}
stock RefoundMedicForLeader(playerid)
{
	//printf("DEBUG CFONTROL RefoundMedicForLeader 1");
    GiveThePlayerMoney(playerid, 15000);
	ChangeModeScore(playerid, 20);
	TWPlayerInfo[playerid][PeopleSaved] ++;
	SendClientMessage(playerid,green1, "{33FF33}Notice:{FFFFFF} You got a +20 score and $15,000 for healing a leader.");
	GiveMedicRanks(playerid);
	//printf("DEBUG CFONTROL RefoundMedicForLeader 2");
	return 1;
}
stock RefoundBomber(playerid)
{
	//printf("DEBUG CFONTROL RefoundBomber 1");
    GiveThePlayerMoney(playerid, 2500);
	ChangeModeScore(playerid, 15);
	TWPlayerInfo[playerid][BombedShips] ++;
	SendClientMessage(playerid,green1, "{33FF33}Notice:{FFFFFF} You got a +15 score and $2,500 for taking down a ship/submarine.");
	GetAirRanks(playerid);
	//printf("DEBUG CFONTROL RefoundBomber 2");
	return 1;
}

stock RefoundRepair(playerid)
{
	//printf("DEBUG CFONTROL RefoundRepair 1");
    GiveThePlayerMoney(playerid, 4500);
	ChangeModeScore(playerid, 20);
	SendClientMessage(playerid,green1, "Notice:{FFFFFF} You earned 4,500 dollars and 20 score for repairing a ship.");
	//printf("DEBUG CFONTROL RefoundRepair 2");
	return 1;
}
stock Refound(playerid)
{
	//printf("DEBUG CFONTROL Refound 1");
	TWPlayerInfo[playerid][TookOver] ++;
    GiveThePlayerMoney(playerid, 2000);
	ChangeModeScore(playerid, 5);
	SendClientMessage(playerid,green1, "{33FF33}Notice:{FFFFFF} You got a +5 score and $2,000 for getting a new land.");
	//printf("DEBUG CFONTROL Refound 2");
	return 1;
}

stock TWChangeMap()
{
	if(ServerInfo[SouthMapTW] == 1)
	{
	    TWInfo[Map]++;
	    if(TWInfo[Map] >= 2)TWInfo[Map] = 0;
    }
	else TWInfo[Map] = 0;
    db_UpdateSettings(TW);
}

stock GivetheWeapons(playerid)
{
	if(TWPlayerInfo[playerid][Class] == SOLDIER)
	{
	    if(TWPlayerInfo[playerid][WeapRank] >= 1)
	    {
	        GivePlayerWeapons(playerid,17,90,33,400,23,400,25,400);
	    }
	    if(TWPlayerInfo[playerid][WeapRank] >= 2)
	    {
	        GivePlayerWeapons(playerid,17,100,33,600,23,600,25,600);
			GivePlayerWeapons(playerid,22,200,0,0,0,0,0,0);
	    }
	    if(TWPlayerInfo[playerid][WeapRank] >= 3)
	    {
	        GivePlayerWeapons(playerid,17,120,33,800,23,800,25,800);
			GivePlayerWeapons(playerid,22,400,18,5,0,0,0,0);
	    }
	    if(TWPlayerInfo[playerid][WeapRank] >= 4)
	    {
			GivePlayerWeapons(playerid,17,120,33,850,23,850,25,850);
			GivePlayerWeapons(playerid,22,500,18,10,30,250,0,0);
	    }
	    if(TWPlayerInfo[playerid][WeapRank] >= 5)
	    {
	        GivePlayerWeapons(playerid,37,500,0,0,0,0,0,0);
	    	GivePlayerWeapons(playerid,17,180,33,2900,23,2900,25,2900);
			GivePlayerWeapons(playerid,22,2600,18,15,30,9550,34,9990);
	    }
	    if(TWPlayerInfo[playerid][WeapRank] >= 6)
	    {
	    	GivePlayerWeapons(playerid,17,180,33,2900,23,2900,25,2900);
			GivePlayerWeapons(playerid,22,2600,18,35,30,9550,34,9990);
			GivePlayerWeapons(playerid,16,400,31,9000,35,5,24,2900);
	    }
    }
}

stock GiveArmyArmor(playerid)
{
	//printf("DEBUG CFONTROL GiveArmyArmor 1");
    if(TWPlayerInfo[playerid][ArmyRank] >= 1)
    {
        SetArmor(playerid,0.0);
    }
    if(TWPlayerInfo[playerid][ArmyRank] >= 2)
    {
		SetArmor(playerid,10.0);
    }
    if(TWPlayerInfo[playerid][ArmyRank] >= 3)
    {
		SetArmor(playerid,20.0);
    }
    if(TWPlayerInfo[playerid][ArmyRank] >= 4)
    {
		SetArmor(playerid,50.0);
    }
    if(TWPlayerInfo[playerid][ArmyRank] >= 5)
    {
		SetArmor(playerid,70.0);
    }
    if(TWPlayerInfo[playerid][ArmyRank] >= 6)
    {
		SetArmor(playerid,99.0);
    }
	//printf("DEBUG CFONTROL GiveArmyArmor 2");
}
stock GiveArmyRanks(playerid)
{
	//printf("DEBUG CFONTROL GiveArmyRanks 1");
	if (TWPlayerInfo[playerid][TookOver] >= 80)
	{
	    if(TWPlayerInfo[playerid][ArmyRank] < 2)
	    {
			TWPlayerInfo[playerid][ArmyRank] = 2;
			GiveArmyMessage(playerid);
		}
	}
	if (TWPlayerInfo[playerid][TookOver] >= 120)
	{
	    if(TWPlayerInfo[playerid][ArmyRank] < 3)
	    {
			TWPlayerInfo[playerid][ArmyRank] = 3;
			GiveArmyMessage(playerid);
		}
	}
	if (TWPlayerInfo[playerid][TookOver] >= 260)
	{
	    if(TWPlayerInfo[playerid][ArmyRank] < 4)
	    {
			TWPlayerInfo[playerid][ArmyRank] = 4;
			GiveArmyMessage(playerid);
		}
	}
	if (TWPlayerInfo[playerid][TookOver] >= 400)
	{
	    if(TWPlayerInfo[playerid][ArmyRank] < 5)
	    {
			TWPlayerInfo[playerid][ArmyRank] = 5;
			GiveArmyMessage(playerid);
		}
	}
    if (TWPlayerInfo[playerid][TookOver] >= 840)
	{
	    if(TWPlayerInfo[playerid][ArmyRank] < 6)
	    {
			TWPlayerInfo[playerid][ArmyRank] = 6;
			GiveArmyMessage(playerid);
		}
	}
	//printf("DEBUG CFONTROL GiveArmyRanks 2");
}
stock GiveArmyMessage(playerid)
{
	//printf("DEBUG CFONTROL GiveArmyMessage 1");
	new string[128];
	format(string,126,"WAR NEWS: {FFFFFF}%s just got promoted to army rank %s.",PlayerInfo[playerid][Name],TheArmyRanks[TWPlayerInfo[playerid][ArmyRank]]);
	SendMessageToMode(TW,green1,string);
  	format(string, sizeof(string), "[WAR NEWS] %s just got promoted to army rank %s.",PlayerInfo[playerid][Name],TheArmyRanks[TWPlayerInfo[playerid][ArmyRank]]);
	db_SaveChat(-1, TW,string);
	GiveArmyArmor(playerid);
	UpdateTWRanks(playerid, false);
	//printf("DEBUG CFONTROL GiveArmyMessage 2");
}

stock Ranks(playerid)
{
	//printf("DEBUG CFONTROL Ranks 1");
	if (TWPlayerInfo[playerid][Kills] >= 50)
	{
	    if(TWPlayerInfo[playerid][WeapRank] < 2)
	    {
			TWPlayerInfo[playerid][WeapRank] = 2;
			GiveMessage(playerid);
		}
	}
	if (TWPlayerInfo[playerid][Kills] >= 250)
	{
	    if(TWPlayerInfo[playerid][WeapRank] < 3)
	    {
			TWPlayerInfo[playerid][WeapRank] = 3;
			GiveMessage(playerid);
		}
	}
	if (TWPlayerInfo[playerid][Kills] >= 650)
	{
	    if(TWPlayerInfo[playerid][WeapRank] < 4)
	    {
			TWPlayerInfo[playerid][WeapRank] = 4;
			GiveMessage(playerid);
		}
	}
	if (TWPlayerInfo[playerid][Kills] >= 1050)
	{
	    if(TWPlayerInfo[playerid][WeapRank] < 5)
	    {
			TWPlayerInfo[playerid][WeapRank] = 5;
			GiveMessage(playerid);
		}
	}
    if (TWPlayerInfo[playerid][Kills] >= 1850)
	{
	    if(TWPlayerInfo[playerid][WeapRank] < 6)
	    {
			TWPlayerInfo[playerid][WeapRank] = 6;
			GiveMessage(playerid);
		}
	}
	//printf("DEBUG CFONTROL Ranks 2");
}


stock GiveMedicRanks(playerid)
{
	//printf("DEBUG CFONTROL GiveMedicRanks 1");
	if (TWPlayerInfo[playerid][PeopleSaved] >= 50)
	{
	    if(TWPlayerInfo[playerid][MedicRank] < 2)
	    {
			TWPlayerInfo[playerid][MedicRank] = 2;
			GiveMedicMessage(playerid);
		}
	}
	if (TWPlayerInfo[playerid][PeopleSaved] >= 150)
	{
	    if(TWPlayerInfo[playerid][MedicRank] < 3)
	    {
			TWPlayerInfo[playerid][MedicRank] = 3;
			GiveMedicMessage(playerid);
		}
	}
	if (TWPlayerInfo[playerid][PeopleSaved] >= 300)
	{
	    if(TWPlayerInfo[playerid][MedicRank] < 4)
	    {
			TWPlayerInfo[playerid][MedicRank] = 4;
			GiveMedicMessage(playerid);
		}
	}
	if (TWPlayerInfo[playerid][PeopleSaved] >= 500)
	{
	    if(TWPlayerInfo[playerid][MedicRank] < 5)
	    {
			TWPlayerInfo[playerid][MedicRank] = 5;
			GiveMedicMessage(playerid);
		}
	}
	if (TWPlayerInfo[playerid][PeopleSaved] >= 800)
	{
	    if(TWPlayerInfo[playerid][MedicRank] < 6)
	    {
			TWPlayerInfo[playerid][MedicRank] = 6;
			GiveMedicMessage(playerid);
		}
	}
	//printf("DEBUG CFONTROL GiveMedicRanks 2");
}
stock GiveMedicMessage(playerid)
{
	//printf("DEBUG CFONTROL GiveMedicMessage 1");
	new string[128];
	format(string,126,"WAR NEWS: {FFFFFF}%s just got promoted to medic rank %s.",PlayerInfo[playerid][Name],TheMedicRanks[TWPlayerInfo[playerid][MedicRank]]);
	SendMessageToMode(TW,green1,string);
  	format(string, sizeof(string), "[WAR NEWS] %s just got promoted to medic rank %s.",PlayerInfo[playerid][Name],TheMedicRanks[TWPlayerInfo[playerid][MedicRank]]);
	db_SaveChat(-1, TW,string);
	GivetheHealth(playerid);
	UpdateTWRanks(playerid, false);
	//printf("DEBUG CFONTROL GiveMedicMessage 2");
}

stock GivetheHealth(playerid)
{
	//printf("DEBUG CFONTROL GivetheHealth 1");
    if(TWPlayerInfo[playerid][MedicRank] >= 1)
    {
        SetHealth(playerid,99.0);
    }
    if(TWPlayerInfo[playerid][MedicRank] >= 2)
    {
		SetHealth(playerid,140.0);
    }
    if(TWPlayerInfo[playerid][MedicRank] >= 3)
    {
		SetHealth(playerid,180.0);
    }
    if(TWPlayerInfo[playerid][MedicRank] >= 4)
    {
		SetHealth(playerid,220.0);
    }
    if(TWPlayerInfo[playerid][MedicRank] >= 5)
    {
		SetHealth(playerid,260.0);
    }
    if(TWPlayerInfo[playerid][MedicRank] >= 6)
    {
		SetHealth(playerid,300.0);
    }
	//printf("DEBUG CFONTROL GivetheHealth 2");
}

stock GetAirRanks(playerid)
{
	//printf("DEBUG CFONTROL GetAirRanks 1");
	if (TWPlayerInfo[playerid][BombedShips] >= 20)
	{
	    if(TWPlayerInfo[playerid][AirRank] < 2)
	    {
			TWPlayerInfo[playerid][AirRank] = 2;
			GiveAirMessage(playerid);
		}
	}
	if (TWPlayerInfo[playerid][BombedShips] >= 60)
	{
	    if(TWPlayerInfo[playerid][AirRank] < 3)
	    {
			TWPlayerInfo[playerid][AirRank] = 3;
			GiveAirMessage(playerid);
		}
	}
	if (TWPlayerInfo[playerid][BombedShips] >= 400)
	{
	    if(TWPlayerInfo[playerid][AirRank] < 4)
	    {
			TWPlayerInfo[playerid][AirRank] = 4;
			GiveAirMessage(playerid);
		}
	}
	if (TWPlayerInfo[playerid][BombedShips] >= 800)
	{
	    if(TWPlayerInfo[playerid][AirRank] < 5)
	    {
			TWPlayerInfo[playerid][AirRank] = 5;
			GiveAirMessage(playerid);
		}
	}
	if (TWPlayerInfo[playerid][BombedShips] >= 1200)
	{
	    if(TWPlayerInfo[playerid][AirRank] < 6)
	    {
			TWPlayerInfo[playerid][AirRank] = 6;
			GiveAirMessage(playerid);
		}
	}
}
stock GiveAirMessage(playerid)
{
	new string[128];
	format(string,126,"WAR NEWS: {FFFFFF}%s just got promoted to air force rank %s.",PlayerInfo[playerid][Name],TheAirRanks[TWPlayerInfo[playerid][AirRank]]);
	SendMessageToMode(TW,green1,string);
  	format(string, sizeof(string), "[WAR NEWS] %s just got promoted to air force rank %s.",PlayerInfo[playerid][Name],TheAirRanks[TWPlayerInfo[playerid][AirRank]]);
	db_SaveChat(-1, TW,string);
	GivetheColors(playerid);
	UpdateTWRanks(playerid, false);
}

stock UpdateTWRanks(playerid, bool:adawshowtxt = false)
{
	new str[128];
	switch(TWPlayerInfo[playerid][Class])
	{
	    case PILOT:
	    {
			format(str, sizeof str,"%s",TheAirRanks[TWPlayerInfo[playerid][AirRank]]);
	    }
	    case MEDIC:
	    {
			format(str, sizeof str,"%s",TheMedicRanks[TWPlayerInfo[playerid][MedicRank]]);
	    }
	    default:
	    {
	        format(str, sizeof str,"%s",TheArmyRanks[TWPlayerInfo[playerid][ArmyRank]]);
	    }
	}
	PlayerTextDrawSetString(playerid, TWPlayerInfo[playerid][RankTXT], str);

	if(adawshowtxt)
	{
		TextDrawShowForPlayer(playerid,TWInfo[RankTXT]);
		PlayerTextDrawShow(playerid,TWPlayerInfo[playerid][RankTXT]);
	}
}

stock GivetheColors(playerid)
{
	//printf("DEBUG CFONTROL GivetheColors 1");
    if(TWPlayerInfo[playerid][Class] == PILOT)
    {
	    if(TWPlayerInfo[playerid][AirRank] >= 1)
	    {
			if(TWPlayerInfo[playerid][Country] == GERMANY) SetPlayerColor(playerid,COL_GERMANY_R1);
			if(TWPlayerInfo[playerid][Country] == ITALY) SetPlayerColor(playerid,COL_ITALY_R1);
	        if(TWPlayerInfo[playerid][Country] == JAPAN) SetPlayerColor(playerid,COL_JAPAN_R1);
	        if(TWPlayerInfo[playerid][Country] == RUSSIA) SetPlayerColor(playerid,COL_SOVIET_R1);
	        if(TWPlayerInfo[playerid][Country] == USA) SetPlayerColor(playerid,COL_USA_R1);
	        if(TWPlayerInfo[playerid][Country] == BALKAN) SetPlayerColor(playerid,COL_BALKAN_R1);
	        if(TWPlayerInfo[playerid][Country] == BRITISH) SetPlayerColor(playerid,COL_BRITISH_R1);
	    }
	    if(TWPlayerInfo[playerid][AirRank] >= 2)
	    {
			if(TWPlayerInfo[playerid][Country] == GERMANY) SetPlayerColor(playerid,COL_GERMANY_R2);
			if(TWPlayerInfo[playerid][Country] == ITALY) SetPlayerColor(playerid,COL_ITALY_R2);
	        if(TWPlayerInfo[playerid][Country] == JAPAN) SetPlayerColor(playerid,COL_JAPAN_R2);
	        if(TWPlayerInfo[playerid][Country] == RUSSIA) SetPlayerColor(playerid,COL_SOVIET_R2);
	        if(TWPlayerInfo[playerid][Country] == USA) SetPlayerColor(playerid,COL_USA_R2);
	        if(TWPlayerInfo[playerid][Country] == BALKAN) SetPlayerColor(playerid,COL_BALKAN_R2);
	        if(TWPlayerInfo[playerid][Country] == BRITISH) SetPlayerColor(playerid,COL_BRITISH_R2);
	    }
	    if(TWPlayerInfo[playerid][AirRank] >= 3)
	    {
			if(TWPlayerInfo[playerid][Country] == GERMANY) SetPlayerColor(playerid,COL_GERMANY_R3);
			if(TWPlayerInfo[playerid][Country] == ITALY) SetPlayerColor(playerid,COL_ITALY_R3);
	        if(TWPlayerInfo[playerid][Country] == JAPAN) SetPlayerColor(playerid,COL_JAPAN_R3);
	        if(TWPlayerInfo[playerid][Country] == RUSSIA) SetPlayerColor(playerid,COL_SOVIET_R3);
	        if(TWPlayerInfo[playerid][Country] == USA) SetPlayerColor(playerid,COL_USA_R3);
	        if(TWPlayerInfo[playerid][Country] == BALKAN) SetPlayerColor(playerid,COL_BALKAN_R3);
	        if(TWPlayerInfo[playerid][Country] == BRITISH) SetPlayerColor(playerid,COL_BRITISH_R3);
	    }
	    if(TWPlayerInfo[playerid][AirRank] >= 4)
	    {
			if(TWPlayerInfo[playerid][Country] == GERMANY) SetPlayerColor(playerid,COL_GERMANY_R4);
			if(TWPlayerInfo[playerid][Country] == ITALY) SetPlayerColor(playerid,COL_ITALY_R4);
	        if(TWPlayerInfo[playerid][Country] == JAPAN) SetPlayerColor(playerid,COL_JAPAN_R4);
	        if(TWPlayerInfo[playerid][Country] == RUSSIA) SetPlayerColor(playerid,COL_SOVIET_R4);
	        if(TWPlayerInfo[playerid][Country] == USA) SetPlayerColor(playerid,COL_USA_R4);
	        if(TWPlayerInfo[playerid][Country] == BALKAN) SetPlayerColor(playerid,COL_BALKAN_R4);
	        if(TWPlayerInfo[playerid][Country] == BRITISH) SetPlayerColor(playerid,COL_BRITISH_R4);
	    }
	    if(TWPlayerInfo[playerid][AirRank] >= 5)
	    {
			if(TWPlayerInfo[playerid][Country] == GERMANY) SetPlayerColor(playerid,COL_GERMANY_R5);
			if(TWPlayerInfo[playerid][Country] == ITALY) SetPlayerColor(playerid,COL_ITALY_R5);
	        if(TWPlayerInfo[playerid][Country] == JAPAN) SetPlayerColor(playerid,COL_JAPAN_R5);
	        if(TWPlayerInfo[playerid][Country] == RUSSIA) SetPlayerColor(playerid,COL_SOVIET_R5);
	        if(TWPlayerInfo[playerid][Country] == USA) SetPlayerColor(playerid,COL_USA_R5);
	        if(TWPlayerInfo[playerid][Country] == BALKAN) SetPlayerColor(playerid,COL_BALKAN_R5);
	        if(TWPlayerInfo[playerid][Country] == BRITISH) SetPlayerColor(playerid,COL_BRITISH_R5);
	    }
	    if(TWPlayerInfo[playerid][AirRank] >= 6)
	    {
			if(TWPlayerInfo[playerid][Country] == GERMANY) SetPlayerColor(playerid,COL_GERMANY_R5);
			if(TWPlayerInfo[playerid][Country] == ITALY) SetPlayerColor(playerid,COL_ITALY_R5);
	        if(TWPlayerInfo[playerid][Country] == JAPAN) SetPlayerColor(playerid,COL_JAPAN_R5);
	        if(TWPlayerInfo[playerid][Country] == RUSSIA) SetPlayerColor(playerid,COL_SOVIET_R5);
	        if(TWPlayerInfo[playerid][Country] == USA) SetPlayerColor(playerid,COL_USA_R5);
	        if(TWPlayerInfo[playerid][Country] == BALKAN) SetPlayerColor(playerid,COL_BALKAN_R5);
	        if(TWPlayerInfo[playerid][Country] == BRITISH) SetPlayerColor(playerid,COL_BRITISH_R5);
	    }
    }
	//printf("DEBUG CFONTROL GivetheColors 2");
}
stock GivePlayerWeapons(playerid,weap1 = 0,w1ammo = 0,weap2 = 0,w2ammo = 0,weap3 = 0,w3ammo = 0,weap4 = 0,w4ammo = 0)
{
	//printf("DEBUG CFONTROL GivePlayerWeapons 1");
	if(weap1 != 0 && w1ammo != 0)GiveWeapon(playerid,weap1,w1ammo);
    if(weap2 != 0 && w2ammo != 0)GiveWeapon(playerid,weap2,w2ammo);
    if(weap3 != 0 && w3ammo != 0)GiveWeapon(playerid,weap3,w3ammo);
    if(weap4 != 0 && w4ammo != 0)GiveWeapon(playerid,weap4,w4ammo);
	//printf("DEBUG CFONTROL GivePlayerWeapons 2");
}

stock GetRandomPlayerID()
{
	//printf("DEBUG CFONTROL GetRandomPlayerID 1");
	new op;
	new po[MAX_PLAYERS];
	forLoop(i, MAX_PLAYERS)
	{
		if(!IsPlayerConnected(i))continue;
		if(PlayerInfo[i][Spawned] == 1)
		{
		po[op]=i;
		op++;
		}
	}
	//printf("DEBUG CFONTROL GetRandomPlayerID 2 val %d",po[random(op)]);
	return po[random(op)];
}


stock EndSpawnProtection(playerid)
{
	//printf("DEBUG CFONTROL EndSpawnProtection 1");
	SetHealth(playerid,99.0);
    PlayerInfo[playerid][sProtected] = 0;
	if(GetPlayerMode(playerid) == TW)GivetheHealth(playerid);
	SetPlayerChatBubble(playerid, " ", 0xEEEEEEFF, 0.1, 1000);
    SendClientMessage(playerid, red1, "Notice:{FFFFFF} Your spawn protection has ended.");
	//printf("DEBUG CFONTROL EndSpawnProtection 2");
}

stock FreezeBeforeObjects(playerid, bool:showmsg = true)
{
    TogglePlayerControllable(playerid,false);
	if(showmsg)GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~w~Loading..", 3000, 3);
	SetTimerEx("UnfreezeAfterObjects",3000,0,"d",playerid);
}

stock SpawnPlayerTimer(playerid, timere)
{
    SetTimerEx("SpawnThePlayers", timere, false, "i", playerid);
}

stock ResetCustomDeathTimer(playerid, timere)
{
    SetTimerEx("ResetCustomDeath", timere, false, "i", playerid);
}

forward UnfreezeAfterObjects(playerid);
public UnfreezeAfterObjects(playerid)
{
    TogglePlayerControllable(playerid,true);
}
stock Sync(playerid)
{
	//printf("DEBUG CFONTROL Sync 1");
    TogglePlayerControllable(playerid,false);
    TogglePlayerControllable(playerid,true);
	//printf("DEBUG CFONTROL Sync 2");
}
public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
	//printf("DEBUG CFONTROL OnPlayerClickPlayer 1");
    if(DMMapAlivePlayers() > 1 && PlayerInfo[playerid][Spawned] == 1 && PlayerInfo[playerid][PlayerMode] == DM && PlayerInfo[clickedplayerid][PlayerMode] == DM && DMPlayerInfo[playerid][Alive] == 0 && DMPlayerInfo[clickedplayerid][Alive] == 1)
    {
        DM_StartSpectate(playerid, clickedplayerid);
    }
    if(PJMapAlivePlayers() > 1 && PlayerInfo[playerid][Spawned] == 1 && PlayerInfo[playerid][PlayerMode] == PJ && PlayerInfo[clickedplayerid][PlayerMode] == PJ && PJPlayerInfo[playerid][Alive] == 0 && PJPlayerInfo[clickedplayerid][Alive] == 1)
    {
        PJ_StartSpectate(playerid, clickedplayerid);
    }
	//printf("DEBUG CFONTROL OnPlayerClickPlayer 2");
	return 1;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	//printf("DEBUG CFONTROL OnDialogResponse");
	new string[228];
	//====================[RP]=====================
    if(dialogid == RP_CHANGE_F_NAME)
    {
        if(response)
        {
	        if(!IsValidRPName(inputtext))
	        {
				ShowPlayerDialog(playerid, RP_CHANGE_F_NAME, DIALOG_STYLE_INPUT,
					"Roleplay name", "Enter ONLY the first name of character.\n{FFFFFF}EG: Jerry, George, Cosmo, Art, Elaine", "OK", "Cancel");
	            SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} Max length = 2, only a-z and A-Z");
	            return true;
	        }
	        format(RPPlayerInfo[playerid][rpfName], RP_MAX_NAME_LEN, "%s",FixRPName(inputtext));

			new pstr[RP_MAX_NAME_LEN*3];
    		format(pstr,sizeof pstr, "%s~n~~n~%s",RPPlayerInfo[playerid][rpfName],RPPlayerInfo[playerid][rplName]);
			PlayerTextDrawSetString(playerid,RPPlayerInfo[playerid][rptName], pstr);
		}
	}
    if(dialogid == RP_CHANGE_L_NAME)
    {
        if(response)
        {
	        if(!IsValidRPName(inputtext))
	        {
				ShowPlayerDialog(playerid, RP_CHANGE_L_NAME, DIALOG_STYLE_INPUT,
					"Roleplay name", "Enter ONLY the last name of character.\n{FFFFFF}EG: Seinfeld, Costanza, Kramer, Vandelay, Benes", "OK", "Cancel");
	            SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} Max length = 2, only a-z and A-Z");
	            return true;
	        }
	        format(RPPlayerInfo[playerid][rplName], RP_MAX_NAME_LEN, "%s",FixRPName(inputtext));

			new pstr[RP_MAX_NAME_LEN*3];
    		format(pstr,sizeof pstr, "%s~n~~n~%s",RPPlayerInfo[playerid][rpfName],RPPlayerInfo[playerid][rplName]);
			PlayerTextDrawSetString(playerid,RPPlayerInfo[playerid][rptName], pstr);
		}
	}
    if(dialogid == RP_READ_NOTE)
    {
        if(response)
        {
            new i = PlayerInfo[playerid][SelectMenuOption][SELECT_MENU_OPTIONS-1];
		    forLoop(u, SELECT_MENU_OPTIONS)PlayerInfo[playerid][SelectMenuOption][u] = -1;
	        RPDestroyNote(i);
		}
	}
	//====================[SPEEDooo]====================
	if(dialogid == SP_MENU_COLORS)
	{
	    if(response)
	    {
	        switch(listitem)
			{
		        case 0:format(PlayerInfo[playerid][SpeedoCol],10,"%s","33AA33");
		        case 1:format(PlayerInfo[playerid][SpeedoCol],10,"%s","67F6F6");
		        case 2:format(PlayerInfo[playerid][SpeedoCol],10,"%s","9955DE");
		        case 3:format(PlayerInfo[playerid][SpeedoCol],10,"%s","FF3300");
		        case 4:format(PlayerInfo[playerid][SpeedoCol],10,"%s","2641FE");
		        case 5:format(PlayerInfo[playerid][SpeedoCol],10,"%s","FF66FF");
		        case 6:format(PlayerInfo[playerid][SpeedoCol],10,"%s","00EEAD");
	        }
	        SendClientMessage(playerid,0,"{33FF33}Info:{FFFFFF} Speedo color has been changed.");
	        ShowPlayerDialog(playerid, SP_MENU_COLORS, DIALOG_STYLE_LIST, "Speedoo Colors", "Green\nLight blue\nViolet\nOrange\nBlue\nPink\nSea Green", "Select", "Back");
	    }
	    else
            ShowPlayerDialog(playerid, SP_MENU, DIALOG_STYLE_LIST, "Speedoo", SP_MENU_STRING, "Select", "Exit");
	}
	if(dialogid == SP_MENU && response)
	{
	    switch(listitem)
		{
		    case 0:
		    {
		        ShowPlayerDialog(playerid, SP_MENU_COLORS, DIALOG_STYLE_LIST, "Speedoo Colors", "Green\nLight blue\nViolet\nOrange\nBlue\nPink\nSea Green", "Select", "Back");
		    }
		    case 1:
		    {
                if(PlayerInfo[playerid][SpeedoType] == 0)
				{
				    PlayerInfo[playerid][SpeedoType] = 1;
				    SendClientMessage(playerid,0,"{33FF33}Info:{FFFFFF} Speedo units have been changed to MPH.");
				}
				else
				{
				    PlayerInfo[playerid][SpeedoType] = 0;
			    	SendClientMessage(playerid,0,"{33FF33}Info:{FFFFFF} Speedo units have been changed to KM/H.");
				}
				ShowPlayerDialog(playerid, SP_MENU, DIALOG_STYLE_LIST, "Speedoo", SP_MENU_STRING, "Select", "Exit");
		    }
		    case 2:
		    {
                if(PlayerInfo[playerid][SpeedoSide] == 0)
				{
				    PlayerInfo[playerid][SpeedoSide] = 1;
				    SendClientMessage(playerid,0,"{33FF33}Info:{FFFFFF} Speedo has been moved to the right.");
				}
				else
				{
				    PlayerInfo[playerid][SpeedoSide] = 0;
			    	SendClientMessage(playerid,0,"{33FF33}Info:{FFFFFF} Speedo has been moved to the left.");
				}
				PlayerInfo[playerid][SpeedoReset] = 1;
				ShowPlayerDialog(playerid, SP_MENU, DIALOG_STYLE_LIST, "Speedoo", SP_MENU_STRING, "Select", "Exit");
		    }
		    case 3:
		    {
                if(PlayerInfo[playerid][DisbleSpeedo] == 0)
				{
				    PlayerInfo[playerid][DisbleSpeedo] = 1;
				    if(PlayerInfo[playerid][SpeedoObject] != -1)DestroyTheDynamicObject(PlayerInfo[playerid][SpeedoObject]);
			    	PlayerInfo[playerid][SpeedoObject] = -1;
			    	
			    	if(PlayerInfo[playerid][RacePlaceObject] != -1)DestroyTheDynamicObject(PlayerInfo[playerid][RacePlaceObject]);
			    	PlayerInfo[playerid][RacePlaceObject] = -1;

					SendClientMessage(playerid,0,"{33FF33}Info:{FFFFFF} Speedo has been disabled. Type in /speedo again to enable.");
				}
				else
				{
				    PlayerInfo[playerid][DisbleSpeedo] = 0;
				    if(IsPlayerInAnyVehicle(playerid))
					{
					    PlayerInfo[playerid][SpeedoObject] = CreateDynamicObject(19483, 202.14845, 1755.43835, -17.83983,   0, 0, 0.00000, -1, -1, playerid);

                        if((PlayerInfo[playerid][PlayerMode] == DM && DMMAPInfo[Type] == DM_TYPE_RACE) || PlayerInfo[playerid][PlayerMode] == TRP)
							PlayerInfo[playerid][RacePlaceObject] = CreateDynamicObject(19483, 202.14845, 1755.43835, -17.83983,   0, 0, 0.00000, -1, -1, playerid);

						PlayerInfo[playerid][SpeedoReset] = 1;
					}
			    	SendClientMessage(playerid,0,"{33FF33}Info:{FFFFFF} Speedo has been enabled. Type in /speedo again to disable.");
				}
				ShowPlayerDialog(playerid, SP_MENU, DIALOG_STYLE_LIST, "Speedoo", SP_MENU_STRING, "Select", "Exit");
		    }
		}
	}
	//====================[PJ]====================
	if(dialogid == PJ_BUY_MENU && response)
	{
		switch(listitem)
		{
			case 0:
			{
			    if(PJPlayerInfo[playerid][Glasses] > 0)
					ShowPlayerDialog(playerid, PJ_BUY_MENU_GLASSES, DIALOG_STYLE_LIST, "Shopping Center", "Black\nBlue\nPurple\nPink\nRed\nOrange\nYellow\nGreen\nRemove Glasses (+$1500)", "Buy", "Back");
				else
					ShowPlayerDialog(playerid, PJ_BUY_MENU_GLASSES, DIALOG_STYLE_LIST, "Shopping Center", "Black\nBlue\nPurple\nPink\nRed\nOrange\nYellow\nGreen", "Buy", "Back");
			}
			case 1:
			{
				if(PJPlayerInfo[playerid][Hats] > 0)
					ShowPlayerDialog(playerid, PJ_BUY_MENU_HATS, DIALOG_STYLE_LIST, "Shopping Center", "Santa Hat\nCowboy Hat\nBurger Hat\nChicken Hat\nCap (White)\nCap(Yellow)\nRemove Hat (+$1500)", "Buy", "Back");
				else
					ShowPlayerDialog(playerid, PJ_BUY_MENU_HATS, DIALOG_STYLE_LIST, "Shopping Center", "Santa Hat\nCowboy Hat\nBurger Hat\nChicken Hat\nCap (White)\nCap(Yellow)", "Buy", "Back");
			}
			case 2:
			{
				if(PJPlayerInfo[playerid][dWeather] > -2) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You can change your weather using /weather.");
			    if(GetThePlayerMoney(playerid)  <  30000) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You don't have enough money.");
				GiveThePlayerMoney(playerid, -30000);
				PJPlayerInfo[playerid][dWeather] = -1;
                SendClientMessage(playerid, green1, "Notice:{FFFFFF} Use /weather to change your weather.");
                ShowPlayerDialog(playerid, PJ_BUY_MENU, DIALOG_STYLE_LIST, "Shopping Center", PJ_BUY_MENU_STRING, "Select", "Exit");
			}
			case 3:
			{
				if(PJPlayerInfo[playerid][dTime] > -2) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You can change your time using /time.");
			    if(GetThePlayerMoney(playerid)  <  15000) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You don't have enough money.");
				GiveThePlayerMoney(playerid, -15000);
				PJPlayerInfo[playerid][dTime] = -1;
                SendClientMessage(playerid, green1, "Notice:{FFFFFF} Use /time to change your time.");
                ShowPlayerDialog(playerid, PJ_BUY_MENU, DIALOG_STYLE_LIST, "Shopping Center", PJ_BUY_MENU_STRING, "Select", "Exit");
			}
		}
	}
	if(dialogid == PJ_BUY_MENU_HATS)
	{
 		if(!response)
 			ShowPlayerDialog(playerid, PJ_BUY_MENU, DIALOG_STYLE_LIST, "Shopping Center", PJ_BUY_MENU_STRING, "Select", "Exit");
 		else
	    {
			if(listitem == 0)
			{
				//Santa Hat
				if(GetThePlayerMoney(playerid)  <  1500) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You don't have enough money.");
				GiveThePlayerMoney(playerid, -1500);
				PJPlayerInfo[playerid][Hats] = 19065;
				SendClientMessage(playerid, green1, "Notice:{FFFFFF} A Hat has been purchased.");
                if(PJPlayerInfo[playerid][Alive] == 1)
                {
					RemovePlayerAttachedObjectEx(playerid, 3);
					SetPlayerAttachedObjectEx(playerid, 3, PJPlayerInfo[playerid][Hats], 2, 0.120000, 0.040000, -0.003500, 0, 100, 100, 1.4, 1.4, 1.4);
				}
				ShowPlayerDialog(playerid, PJ_BUY_MENU, DIALOG_STYLE_LIST, "Shopping Center", PJ_BUY_MENU_STRING, "Select", "Exit");
	        }
			if(listitem == 1)
			{
				//Cowboy Hat
				if(GetThePlayerMoney(playerid)  <  1500) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You don't have enough money.");
				GiveThePlayerMoney(playerid, -1500);
				PJPlayerInfo[playerid][Hats] = 18962;
				SendClientMessage(playerid, green1, "Notice:{FFFFFF} A Hat has been purchased.");
				if(PJPlayerInfo[playerid][Alive] == 1)
                {
					RemovePlayerAttachedObjectEx(playerid, 3);
					SetPlayerAttachedObjectEx(playerid, 3, PJPlayerInfo[playerid][Hats], 2, 0.120000, 0.040000, -0.003500, 0, 100, 100, 1.4, 1.4, 1.4);
				}
				ShowPlayerDialog(playerid, PJ_BUY_MENU, DIALOG_STYLE_LIST, "Shopping Center", PJ_BUY_MENU_STRING, "Select", "Exit");
	        }
			if(listitem == 2)
			{
				//Burger Hat
				if(GetThePlayerMoney(playerid)  <  1500) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You don't have enough money.");
				GiveThePlayerMoney(playerid, -1500);
				PJPlayerInfo[playerid][Hats] = 19094;
				SendClientMessage(playerid, green1, "Notice:{FFFFFF} A Hat has been purchased.");
				if(PJPlayerInfo[playerid][Alive] == 1)
                {
					RemovePlayerAttachedObjectEx(playerid, 3);
					SetPlayerAttachedObjectEx(playerid, 3, PJPlayerInfo[playerid][Hats], 2, 0.120000, 0.040000, -0.003500, 0, 100, 100, 1.4, 1.4, 1.4);
				}
				ShowPlayerDialog(playerid, PJ_BUY_MENU, DIALOG_STYLE_LIST, "Shopping Center", PJ_BUY_MENU_STRING, "Select", "Exit");
	        }
			if(listitem == 3)
			{
				//Chicken Hat
				if(GetThePlayerMoney(playerid)  <  1500) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You don't have enough money.");
				GiveThePlayerMoney(playerid, -1500);
				PJPlayerInfo[playerid][Hats] = 19137;
				SendClientMessage(playerid, green1, "Notice:{FFFFFF} A Hat has been purchased.");
				if(PJPlayerInfo[playerid][Alive] == 1)
                {
					RemovePlayerAttachedObjectEx(playerid, 3);
					SetPlayerAttachedObjectEx(playerid, 3, PJPlayerInfo[playerid][Hats], 2, 0.120000, 0.040000, -0.003500, 0, 100, 100, 1.4, 1.4, 1.4);
				}
				ShowPlayerDialog(playerid, PJ_BUY_MENU, DIALOG_STYLE_LIST, "Shopping Center", PJ_BUY_MENU_STRING, "Select", "Exit");
	        }
			if(listitem == 4)
			{
				//Cap (white)
				if(GetThePlayerMoney(playerid)  <  1500) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You don't have enough money.");
				GiveThePlayerMoney(playerid, -1500);
				PJPlayerInfo[playerid][Hats] = 19093;
				SendClientMessage(playerid, green1, "Notice:{FFFFFF} A Hat has been purchased.");
				if(PJPlayerInfo[playerid][Alive] == 1)
                {
					RemovePlayerAttachedObjectEx(playerid, 3);
					SetPlayerAttachedObjectEx(playerid, 3, PJPlayerInfo[playerid][Hats], 2, 0.120000, 0.040000, -0.003500, 0, 100, 100, 1.4, 1.4, 1.4);
				}
				ShowPlayerDialog(playerid, PJ_BUY_MENU, DIALOG_STYLE_LIST, "Shopping Center", PJ_BUY_MENU_STRING, "Select", "Exit");
	        }
			if(listitem == 5)
			{
				//Cap (yellow)
				if(GetThePlayerMoney(playerid)  <  1500) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You don't have enough money.");
				GiveThePlayerMoney(playerid, -1500);
				PJPlayerInfo[playerid][Hats] = 19160;
				SendClientMessage(playerid, green1, "Notice:{FFFFFF} A Hat has been purchased.");
				if(PJPlayerInfo[playerid][Alive] == 1)
                {
					RemovePlayerAttachedObjectEx(playerid, 3);
					SetPlayerAttachedObjectEx(playerid, 3, PJPlayerInfo[playerid][Hats], 2, 0.120000, 0.040000, -0.003500, 0, 100, 100, 1.4, 1.4, 1.4);
				}
				ShowPlayerDialog(playerid, PJ_BUY_MENU, DIALOG_STYLE_LIST, "Shopping Center", PJ_BUY_MENU_STRING, "Select", "Exit");
	        }
			if(listitem == 6)
			{
				//remove hat
				if(PJPlayerInfo[playerid][Hats] == 0)return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You don't have a hat.");
				GiveThePlayerMoney(playerid, 1000);
				PJPlayerInfo[playerid][Hats] = 0;
				SendClientMessage(playerid, green1, "Notice:{FFFFFF} A Hat has been removed.");
				if(PJPlayerInfo[playerid][Alive] == 1)
					RemovePlayerAttachedObjectEx(playerid, 3);
				ShowPlayerDialog(playerid, PJ_BUY_MENU, DIALOG_STYLE_LIST, "Shopping Center", PJ_BUY_MENU_STRING, "Select", "Exit");
	        }
	    }
    }

	if(dialogid == PJ_BUY_MENU_GLASSES)
	{
 		if(!response)
 			ShowPlayerDialog(playerid, PJ_BUY_MENU, DIALOG_STYLE_LIST, "Shopping Center", PJ_BUY_MENU_STRING, "Select", "Exit");
 		else
	    {
			if(listitem == 0)
			{
				//Black
	        	if(GetThePlayerMoney(playerid)  <  1500) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You don't have enough money.");
				new skin = GetPlayerSkin(playerid);
				GiveThePlayerMoney(playerid, -1500);
				PJPlayerInfo[playerid][Glasses] = 19012;
				SendClientMessage(playerid, green1, "Notice:{FFFFFF} Glasses have been purchased.");
                if(PJPlayerInfo[playerid][Alive] == 1)
                {
					RemovePlayerAttachedObjectEx(playerid, 8);
					SetPlayerAttachedObjectEx(playerid, 8, PJPlayerInfo[playerid][Glasses], 2, SkinOffSetGlasses[skin][0], SkinOffSetGlasses[skin][1], SkinOffSetGlasses[skin][2], SkinOffSetGlasses[skin][3], SkinOffSetGlasses[skin][4], SkinOffSetGlasses[skin][5], SkinOffSetGlasses[skin][6], SkinOffSetGlasses[skin][6], SkinOffSetGlasses[skin][6]);
                }
				ShowPlayerDialog(playerid, PJ_BUY_MENU, DIALOG_STYLE_LIST, "Shopping Center", PJ_BUY_MENU_STRING, "Select", "Exit");
	        }
			if(listitem == 1)
			{
				//Blue
	        	if(GetThePlayerMoney(playerid)  <  1500) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You don't have enough money.");
				new skin = GetPlayerSkin(playerid);
				GiveThePlayerMoney(playerid, -1500);
				PJPlayerInfo[playerid][Glasses] = 19009;
				SendClientMessage(playerid, green1, "Notice:{FFFFFF} Glasses have been purchased.");
                if(PJPlayerInfo[playerid][Alive] == 1)
                {
					RemovePlayerAttachedObjectEx(playerid, 8);
					SetPlayerAttachedObjectEx(playerid, 8, PJPlayerInfo[playerid][Glasses], 2, SkinOffSetGlasses[skin][0], SkinOffSetGlasses[skin][1], SkinOffSetGlasses[skin][2], SkinOffSetGlasses[skin][3], SkinOffSetGlasses[skin][4], SkinOffSetGlasses[skin][5], SkinOffSetGlasses[skin][6], SkinOffSetGlasses[skin][6], SkinOffSetGlasses[skin][6]);
                }
				ShowPlayerDialog(playerid, PJ_BUY_MENU, DIALOG_STYLE_LIST, "Shopping Center", PJ_BUY_MENU_STRING, "Select", "Exit");
			}
			if(listitem == 2)
			{
				//Purple
	        	if(GetThePlayerMoney(playerid)  <  1500) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You don't have enough money.");
				new skin = GetPlayerSkin(playerid);
				GiveThePlayerMoney(playerid, -1500);
				PJPlayerInfo[playerid][Glasses] = 19024;
				SendClientMessage(playerid, green1, "Notice:{FFFFFF} Glasses have been purchased.");
                if(PJPlayerInfo[playerid][Alive] == 1)
                {
					RemovePlayerAttachedObjectEx(playerid, 8);
					SetPlayerAttachedObjectEx(playerid, 8, PJPlayerInfo[playerid][Glasses], 2, SkinOffSetGlasses[skin][0], SkinOffSetGlasses[skin][1], SkinOffSetGlasses[skin][2], SkinOffSetGlasses[skin][3], SkinOffSetGlasses[skin][4], SkinOffSetGlasses[skin][5], SkinOffSetGlasses[skin][6], SkinOffSetGlasses[skin][6], SkinOffSetGlasses[skin][6]);
                }
				ShowPlayerDialog(playerid, PJ_BUY_MENU, DIALOG_STYLE_LIST, "Shopping Center", PJ_BUY_MENU_STRING, "Select", "Exit");
			}
			if(listitem == 3)
			{
				//Pink
	        	if(GetThePlayerMoney(playerid)  <  1500) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You don't have enough money.");
				new skin = GetPlayerSkin(playerid);
				GiveThePlayerMoney(playerid, -1500);
				PJPlayerInfo[playerid][Glasses] = 19025;
				SendClientMessage(playerid, green1, "Notice:{FFFFFF} Glasses have been purchased.");
                if(PJPlayerInfo[playerid][Alive] == 1)
                {
					RemovePlayerAttachedObjectEx(playerid, 8);
					SetPlayerAttachedObjectEx(playerid, 8, PJPlayerInfo[playerid][Glasses], 2, SkinOffSetGlasses[skin][0], SkinOffSetGlasses[skin][1], SkinOffSetGlasses[skin][2], SkinOffSetGlasses[skin][3], SkinOffSetGlasses[skin][4], SkinOffSetGlasses[skin][5], SkinOffSetGlasses[skin][6], SkinOffSetGlasses[skin][6], SkinOffSetGlasses[skin][6]);
                }
				ShowPlayerDialog(playerid, PJ_BUY_MENU, DIALOG_STYLE_LIST, "Shopping Center", PJ_BUY_MENU_STRING, "Select", "Exit");
			}
			if(listitem == 4)
			{
				//Red
	        	if(GetThePlayerMoney(playerid)  <  1500) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You don't have enough money.");
				new skin = GetPlayerSkin(playerid);
				GiveThePlayerMoney(playerid, -1500);
				PJPlayerInfo[playerid][Glasses] = 19019;
				SendClientMessage(playerid, green1, "Notice:{FFFFFF} Glasses have been purchased.");
                if(PJPlayerInfo[playerid][Alive] == 1)
                {
					RemovePlayerAttachedObjectEx(playerid, 8);
					SetPlayerAttachedObjectEx(playerid, 8, PJPlayerInfo[playerid][Glasses], 2, SkinOffSetGlasses[skin][0], SkinOffSetGlasses[skin][1], SkinOffSetGlasses[skin][2], SkinOffSetGlasses[skin][3], SkinOffSetGlasses[skin][4], SkinOffSetGlasses[skin][5], SkinOffSetGlasses[skin][6], SkinOffSetGlasses[skin][6], SkinOffSetGlasses[skin][6]);
                }
				ShowPlayerDialog(playerid, PJ_BUY_MENU, DIALOG_STYLE_LIST, "Shopping Center", PJ_BUY_MENU_STRING, "Select", "Exit");
			}
			if(listitem == 5)
			{
				//Orange
	        	if(GetThePlayerMoney(playerid)  <  1500) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You don't have enough money.");
				new skin = GetPlayerSkin(playerid);
				GiveThePlayerMoney(playerid, -1500);
				PJPlayerInfo[playerid][Glasses] = 19018;
				SendClientMessage(playerid, green1, "Notice:{FFFFFF} Glasses have been purchased.");
                if(PJPlayerInfo[playerid][Alive] == 1)
                {
					RemovePlayerAttachedObjectEx(playerid, 8);
					SetPlayerAttachedObjectEx(playerid, 8, PJPlayerInfo[playerid][Glasses], 2, SkinOffSetGlasses[skin][0], SkinOffSetGlasses[skin][1], SkinOffSetGlasses[skin][2], SkinOffSetGlasses[skin][3], SkinOffSetGlasses[skin][4], SkinOffSetGlasses[skin][5], SkinOffSetGlasses[skin][6], SkinOffSetGlasses[skin][6], SkinOffSetGlasses[skin][6]);
                }
				ShowPlayerDialog(playerid, PJ_BUY_MENU, DIALOG_STYLE_LIST, "Shopping Center", PJ_BUY_MENU_STRING, "Select", "Exit");
			}
			if(listitem == 6)
			{
				//Yellow
	        	if(GetThePlayerMoney(playerid)  <  1500) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You don't have enough money.");
				new skin = GetPlayerSkin(playerid);
				GiveThePlayerMoney(playerid, -1500);
				PJPlayerInfo[playerid][Glasses] = 19028;
				SendClientMessage(playerid, green1, "Notice:{FFFFFF} Glasses have been purchased.");
                if(PJPlayerInfo[playerid][Alive] == 1)
                {
					RemovePlayerAttachedObjectEx(playerid, 8);
					SetPlayerAttachedObjectEx(playerid, 8, PJPlayerInfo[playerid][Glasses], 2, SkinOffSetGlasses[skin][0], SkinOffSetGlasses[skin][1], SkinOffSetGlasses[skin][2], SkinOffSetGlasses[skin][3], SkinOffSetGlasses[skin][4], SkinOffSetGlasses[skin][5], SkinOffSetGlasses[skin][6], SkinOffSetGlasses[skin][6], SkinOffSetGlasses[skin][6]);
                }
				ShowPlayerDialog(playerid, PJ_BUY_MENU, DIALOG_STYLE_LIST, "Shopping Center", PJ_BUY_MENU_STRING, "Select", "Exit");
			}
			if(listitem == 7)
			{
				//Green
	        	if(GetThePlayerMoney(playerid)  <  1500) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You don't have enough money.");
				new skin = GetPlayerSkin(playerid);
				GiveThePlayerMoney(playerid, -1500);
				PJPlayerInfo[playerid][Glasses] = 19029;
				SendClientMessage(playerid, green1, "Notice:{FFFFFF} Glasses have been purchased.");
                if(PJPlayerInfo[playerid][Alive] == 1)
                {
					RemovePlayerAttachedObjectEx(playerid, 8);
					SetPlayerAttachedObjectEx(playerid, 8, PJPlayerInfo[playerid][Glasses], 2, SkinOffSetGlasses[skin][0], SkinOffSetGlasses[skin][1], SkinOffSetGlasses[skin][2], SkinOffSetGlasses[skin][3], SkinOffSetGlasses[skin][4], SkinOffSetGlasses[skin][5], SkinOffSetGlasses[skin][6], SkinOffSetGlasses[skin][6], SkinOffSetGlasses[skin][6]);
                }
				ShowPlayerDialog(playerid, PJ_BUY_MENU, DIALOG_STYLE_LIST, "Shopping Center", PJ_BUY_MENU_STRING, "Select", "Exit");
			}
			if(listitem == 8)
			{
				//remove glasses
				if(PJPlayerInfo[playerid][Glasses] == 0)return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You don't have glasses.");
				GiveThePlayerMoney(playerid, 1500);
				PJPlayerInfo[playerid][Glasses] = 0;
				SendClientMessage(playerid, green1, "Notice:{FFFFFF} Glasses have been removed.");
                if(PJPlayerInfo[playerid][Alive] == 1)
					RemovePlayerAttachedObjectEx(playerid, 8);
				ShowPlayerDialog(playerid, PJ_BUY_MENU, DIALOG_STYLE_LIST, "Shopping Center", PJ_BUY_MENU_STRING, "Select", "Exit");
	        }
	    }
    }
	//====================[DD/DM]====================
	if(dialogid == DM_BUY_MENU && response)
	{
		switch(listitem)
		{
			case 0:
			{
			    if(DMPlayerInfo[playerid][Glasses] > 0)
					ShowPlayerDialog(playerid, DM_BUY_MENU_GLASSES, DIALOG_STYLE_LIST, "Shopping Center", "Black\nBlue\nPurple\nPink\nRed\nOrange\nYellow\nGreen\nRemove Glasses (+$1500)", "Buy", "Back");
				else
					ShowPlayerDialog(playerid, DM_BUY_MENU_GLASSES, DIALOG_STYLE_LIST, "Shopping Center", "Black\nBlue\nPurple\nPink\nRed\nOrange\nYellow\nGreen", "Buy", "Back");
			}
			case 1:
			{
				if(DMPlayerInfo[playerid][Hats] > 0)
					ShowPlayerDialog(playerid, DM_BUY_MENU_HATS, DIALOG_STYLE_LIST, "Shopping Center", "Santa Hat\nCowboy Hat\nBurger Hat\nChicken Hat\nCap (White)\nCap(Yellow)\nRemove Hat (+$1500)", "Buy", "Back");
				else
					ShowPlayerDialog(playerid, DM_BUY_MENU_HATS, DIALOG_STYLE_LIST, "Shopping Center", "Santa Hat\nCowboy Hat\nBurger Hat\nChicken Hat\nCap (White)\nCap(Yellow)", "Buy", "Back");
			}
			case 2:
			{
				if(DMPlayerInfo[playerid][Flash] != 0) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You can toggle flash using /flash.");
			    if(GetThePlayerMoney(playerid)  <  60000) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You don't have enough money.");
				GiveThePlayerMoney(playerid, -60000);
				DMPlayerInfo[playerid][Flash] = 1;
                SendClientMessage(playerid, green1, "Notice:{FFFFFF} Flash has been purchased, use /flash to toggle it.");
                ShowPlayerDialog(playerid, DM_BUY_MENU, DIALOG_STYLE_LIST, "Shopping Center", DM_BUY_MENU_STRING, "Select", "Exit");
			}
			case 3:
			{
				if(DMPlayerInfo[playerid][Wheels] > 0)
					ShowPlayerDialog(playerid, DM_BUY_MENU_WHEELS, DIALOG_STYLE_LIST, "Shopping Center", "Ahab\nVirtual\nAccess\nShadow\nMega\nRimshine\nWires\nClassic\nTwist\nCutter\nSwitch\nGrove\nImport\nDollar\nTrance\nAtomic\nRemove wheels(+$8000)", "Buy", "Back");
				else
					ShowPlayerDialog(playerid, DM_BUY_MENU_WHEELS, DIALOG_STYLE_LIST, "Shopping Center", "Ahab\nVirtual\nAccess\nShadow\nMega\nRimshine\nWires\nClassic\nTwist\nCutter\nSwitch\nGrove\nImport\nDollar\nTrance\nAtomic", "Buy", "Back");
			}
			case 4:
			{
				if(DMPlayerInfo[playerid][dWeather] > -2) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You can change your weather using /weather.");
			    if(GetThePlayerMoney(playerid)  <  30000) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You don't have enough money.");
				GiveThePlayerMoney(playerid, -30000);
				DMPlayerInfo[playerid][dWeather] = -1;
                SendClientMessage(playerid, green1, "Notice:{FFFFFF} Use /weather to change your weather.");
                ShowPlayerDialog(playerid, DM_BUY_MENU, DIALOG_STYLE_LIST, "Shopping Center", DM_BUY_MENU_STRING, "Select", "Exit");
			}
			case 5:
			{
				if(DMPlayerInfo[playerid][dTime] > -2) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You can change your time using /time.");
			    if(GetThePlayerMoney(playerid)  <  15000) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You don't have enough money.");
				GiveThePlayerMoney(playerid, -15000);
				DMPlayerInfo[playerid][dTime] = -1;
                SendClientMessage(playerid, green1, "Notice:{FFFFFF} Use /time to change your time.");
                ShowPlayerDialog(playerid, DM_BUY_MENU, DIALOG_STYLE_LIST, "Shopping Center", DM_BUY_MENU_STRING, "Select", "Exit");
			}
			case 6:
			{
			    if(DMPlayerInfo[playerid][Alive] == 0)return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} To avoid bugs: you must spawn first to purchase nos.");
				if(GetThePlayerMoney(playerid)  <  1500) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You don't have enough money.");
				GiveThePlayerMoney(playerid, -1500);
				AddVehicleComponent(GetPlayerVehicleID(playerid), 1010);
				PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
				SendClientMessage(playerid, green1, "Notice:{FFFFFF} Nos has been purchased.");
                ShowPlayerDialog(playerid, DM_BUY_MENU, DIALOG_STYLE_LIST, "Shopping Center", DM_BUY_MENU_STRING, "Select", "Exit");
			}
			case 7:
			{
			    if(DMMAPInfo[Type] != DM_TYPE_RACE)return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} Barrels are purcahsed only on RACE maps.");
			    if(DMPlayerInfo[playerid][eBarrel] == 1)return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You already have a barrel, press 2 to use it...");
				if(GetThePlayerMoney(playerid)  <  3500) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You don't have enough money.");
				GiveThePlayerMoney(playerid, -3500);
				DMPlayerInfo[playerid][eBarrel] = 1;
				SendClientMessage(playerid, green1, "Notice:{FFFFFF} Barrel has been purchased. Press 2 to drop it anywhere you want.");
                ShowPlayerDialog(playerid, DM_BUY_MENU, DIALOG_STYLE_LIST, "Shopping Center", DM_BUY_MENU_STRING, "Select", "Exit");
			}
		}
	}
	if(dialogid == DM_BUY_MENU_WHEELS)
	{
 		if(!response)
 			ShowPlayerDialog(playerid, DM_BUY_MENU, DIALOG_STYLE_LIST, "Shopping Center", DM_BUY_MENU_STRING, "Select", "Exit");
 		else
	    {
	        if(listitem == 0)
			{
	            if(GetThePlayerMoney(playerid)  <  8000) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You don't have enough money.");
				GiveThePlayerMoney(playerid, -8000);
				DMPlayerInfo[playerid][Wheels] = 1096;
				SendClientMessage(playerid, green1, "Notice:{FFFFFF} Wheels have been purchased.");
				if(DMPlayerInfo[playerid][Alive] == 1)
					AddVehicleComponent(GetPlayerVehicleID(playerid), DMPlayerInfo[playerid][Wheels]);
				ShowPlayerDialog(playerid, DM_BUY_MENU, DIALOG_STYLE_LIST, "Shopping Center", DM_BUY_MENU_STRING, "Select", "Exit");
			}
	        if(listitem == 1)
			{
	            if(GetThePlayerMoney(playerid)  <  8000) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You don't have enough money.");
				GiveThePlayerMoney(playerid, -8000);
				DMPlayerInfo[playerid][Wheels] = 1097;
				SendClientMessage(playerid, green1, "Notice:{FFFFFF} Wheels have been purchased.");
				if(DMPlayerInfo[playerid][Alive] == 1)
					AddVehicleComponent(GetPlayerVehicleID(playerid), DMPlayerInfo[playerid][Wheels]);
				ShowPlayerDialog(playerid, DM_BUY_MENU, DIALOG_STYLE_LIST, "Shopping Center", DM_BUY_MENU_STRING, "Select", "Exit");
			}
	        if(listitem == 2)
			{
	            if(GetThePlayerMoney(playerid)  <  8000) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You don't have enough money.");
				GiveThePlayerMoney(playerid, -8000);
				DMPlayerInfo[playerid][Wheels] = 1098;
				SendClientMessage(playerid, green1, "Notice:{FFFFFF} Wheels have been purchased.");
				if(DMPlayerInfo[playerid][Alive] == 1)
					AddVehicleComponent(GetPlayerVehicleID(playerid), DMPlayerInfo[playerid][Wheels]);
				ShowPlayerDialog(playerid, DM_BUY_MENU, DIALOG_STYLE_LIST, "Shopping Center", DM_BUY_MENU_STRING, "Select", "Exit");
			}
	        if(listitem == 3)
			{
	            if(GetThePlayerMoney(playerid)  <  8000) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You don't have enough money.");
				GiveThePlayerMoney(playerid, -8000);
				DMPlayerInfo[playerid][Wheels] = 1073;
				SendClientMessage(playerid, green1, "Notice:{FFFFFF} Wheels have been purchased.");
				if(DMPlayerInfo[playerid][Alive] == 1)
					AddVehicleComponent(GetPlayerVehicleID(playerid), DMPlayerInfo[playerid][Wheels]);
				ShowPlayerDialog(playerid, DM_BUY_MENU, DIALOG_STYLE_LIST, "Shopping Center", DM_BUY_MENU_STRING, "Select", "Exit");
			}
	        if(listitem == 4)
			{
	            if(GetThePlayerMoney(playerid)  <  8000) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You don't have enough money.");
				GiveThePlayerMoney(playerid, -8000);
				DMPlayerInfo[playerid][Wheels] = 1074;
				SendClientMessage(playerid, green1, "Notice:{FFFFFF} Wheels have been purchased.");
				if(DMPlayerInfo[playerid][Alive] == 1)
					AddVehicleComponent(GetPlayerVehicleID(playerid), DMPlayerInfo[playerid][Wheels]);
				ShowPlayerDialog(playerid, DM_BUY_MENU, DIALOG_STYLE_LIST, "Shopping Center", DM_BUY_MENU_STRING, "Select", "Exit");
			}
	        if(listitem == 5)
			{
	            if(GetThePlayerMoney(playerid)  <  8000) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You don't have enough money.");
				GiveThePlayerMoney(playerid, -8000);
				DMPlayerInfo[playerid][Wheels] = 1075;
				SendClientMessage(playerid, green1, "Notice:{FFFFFF} Wheels have been purchased.");
				if(DMPlayerInfo[playerid][Alive] == 1)
					AddVehicleComponent(GetPlayerVehicleID(playerid), DMPlayerInfo[playerid][Wheels]);
				ShowPlayerDialog(playerid, DM_BUY_MENU, DIALOG_STYLE_LIST, "Shopping Center", DM_BUY_MENU_STRING, "Select", "Exit");
			}
	        if(listitem == 6)
			{
	            if(GetThePlayerMoney(playerid)  <  8000) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You don't have enough money.");
				GiveThePlayerMoney(playerid, -8000);
				DMPlayerInfo[playerid][Wheels] = 1076;
				SendClientMessage(playerid, green1, "Notice:{FFFFFF} Wheels have been purchased.");
				if(DMPlayerInfo[playerid][Alive] == 1)
					AddVehicleComponent(GetPlayerVehicleID(playerid), DMPlayerInfo[playerid][Wheels]);
				ShowPlayerDialog(playerid, DM_BUY_MENU, DIALOG_STYLE_LIST, "Shopping Center", DM_BUY_MENU_STRING, "Select", "Exit");
			}
	        if(listitem == 7)
			{
	            if(GetThePlayerMoney(playerid)  <  8000) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You don't have enough money.");
				GiveThePlayerMoney(playerid, -8000);
				DMPlayerInfo[playerid][Wheels] = 1077;
				SendClientMessage(playerid, green1, "Notice:{FFFFFF} Wheels have been purchased.");
				if(DMPlayerInfo[playerid][Alive] == 1)
					AddVehicleComponent(GetPlayerVehicleID(playerid), DMPlayerInfo[playerid][Wheels]);
				ShowPlayerDialog(playerid, DM_BUY_MENU, DIALOG_STYLE_LIST, "Shopping Center", DM_BUY_MENU_STRING, "Select", "Exit");
			}
	        if(listitem == 8)
			{
	            if(GetThePlayerMoney(playerid)  <  8000) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You don't have enough money.");
				GiveThePlayerMoney(playerid, -8000);
				DMPlayerInfo[playerid][Wheels] = 1078;
				SendClientMessage(playerid, green1, "Notice:{FFFFFF} Wheels have been purchased.");
				if(DMPlayerInfo[playerid][Alive] == 1)
					AddVehicleComponent(GetPlayerVehicleID(playerid), DMPlayerInfo[playerid][Wheels]);
				ShowPlayerDialog(playerid, DM_BUY_MENU, DIALOG_STYLE_LIST, "Shopping Center", DM_BUY_MENU_STRING, "Select", "Exit");
			}
	        if(listitem == 9)
			{
	            if(GetThePlayerMoney(playerid)  <  8000) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You don't have enough money.");
				GiveThePlayerMoney(playerid, -8000);
				DMPlayerInfo[playerid][Wheels] = 1079;
				SendClientMessage(playerid, green1, "Notice:{FFFFFF} Wheels have been purchased.");
				if(DMPlayerInfo[playerid][Alive] == 1)
					AddVehicleComponent(GetPlayerVehicleID(playerid), DMPlayerInfo[playerid][Wheels]);
				ShowPlayerDialog(playerid, DM_BUY_MENU, DIALOG_STYLE_LIST, "Shopping Center", DM_BUY_MENU_STRING, "Select", "Exit");
			}
	        if(listitem == 10)
			{
	            if(GetThePlayerMoney(playerid)  <  8000) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You don't have enough money.");
				GiveThePlayerMoney(playerid, -8000);
				DMPlayerInfo[playerid][Wheels] = 1080;
				SendClientMessage(playerid, green1, "Notice:{FFFFFF} Wheels have been purchased.");
				if(DMPlayerInfo[playerid][Alive] == 1)
					AddVehicleComponent(GetPlayerVehicleID(playerid), DMPlayerInfo[playerid][Wheels]);
				ShowPlayerDialog(playerid, DM_BUY_MENU, DIALOG_STYLE_LIST, "Shopping Center", DM_BUY_MENU_STRING, "Select", "Exit");
			}
	        if(listitem == 11)
			{
	            if(GetThePlayerMoney(playerid)  <  8000) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You don't have enough money.");
				GiveThePlayerMoney(playerid, -8000);
				DMPlayerInfo[playerid][Wheels] = 1081;
				SendClientMessage(playerid, green1, "Notice:{FFFFFF} Wheels have been purchased.");
				if(DMPlayerInfo[playerid][Alive] == 1)
					AddVehicleComponent(GetPlayerVehicleID(playerid), DMPlayerInfo[playerid][Wheels]);
				ShowPlayerDialog(playerid, DM_BUY_MENU, DIALOG_STYLE_LIST, "Shopping Center", DM_BUY_MENU_STRING, "Select", "Exit");
			}
	        if(listitem == 12)
			{
	            if(GetThePlayerMoney(playerid)  <  8000) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You don't have enough money.");
				GiveThePlayerMoney(playerid, -8000);
				DMPlayerInfo[playerid][Wheels] = 1082;
				SendClientMessage(playerid, green1, "Notice:{FFFFFF} Wheels have been purchased.");
				if(DMPlayerInfo[playerid][Alive] == 1)
					AddVehicleComponent(GetPlayerVehicleID(playerid), DMPlayerInfo[playerid][Wheels]);
				ShowPlayerDialog(playerid, DM_BUY_MENU, DIALOG_STYLE_LIST, "Shopping Center", DM_BUY_MENU_STRING, "Select", "Exit");
			}
	        if(listitem == 13)
			{
	            if(GetThePlayerMoney(playerid)  <  8000) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You don't have enough money.");
				GiveThePlayerMoney(playerid, -8000);
				DMPlayerInfo[playerid][Wheels] = 1083;
				SendClientMessage(playerid, green1, "Notice:{FFFFFF} Wheels have been purchased.");
				if(DMPlayerInfo[playerid][Alive] == 1)
					AddVehicleComponent(GetPlayerVehicleID(playerid), DMPlayerInfo[playerid][Wheels]);
				ShowPlayerDialog(playerid, DM_BUY_MENU, DIALOG_STYLE_LIST, "Shopping Center", DM_BUY_MENU_STRING, "Select", "Exit");
			}
	        if(listitem == 14)
			{
	            if(GetThePlayerMoney(playerid)  <  8000) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You don't have enough money.");
				GiveThePlayerMoney(playerid, -8000);
				DMPlayerInfo[playerid][Wheels] = 1084;
				SendClientMessage(playerid, green1, "Notice:{FFFFFF} Wheels have been purchased.");
				if(DMPlayerInfo[playerid][Alive] == 1)
					AddVehicleComponent(GetPlayerVehicleID(playerid), DMPlayerInfo[playerid][Wheels]);
				ShowPlayerDialog(playerid, DM_BUY_MENU, DIALOG_STYLE_LIST, "Shopping Center", DM_BUY_MENU_STRING, "Select", "Exit");
			}
	        if(listitem == 15)
			{
	            if(GetThePlayerMoney(playerid)  <  8000) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You don't have enough money.");
				GiveThePlayerMoney(playerid, -8000);
				DMPlayerInfo[playerid][Wheels] = 1085;
				SendClientMessage(playerid, green1, "Notice:{FFFFFF} Wheels have been purchased.");
				if(DMPlayerInfo[playerid][Alive] == 1)
					AddVehicleComponent(GetPlayerVehicleID(playerid), DMPlayerInfo[playerid][Wheels]);
				ShowPlayerDialog(playerid, DM_BUY_MENU, DIALOG_STYLE_LIST, "Shopping Center", DM_BUY_MENU_STRING, "Select", "Exit");
			}
			if(listitem == 16)
			{
				//remove hat
				if(DMPlayerInfo[playerid][Wheels] == 0)return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You don't have wheels.");
				GiveThePlayerMoney(playerid, 6000);
				DMPlayerInfo[playerid][Wheels] = 0;
				SendClientMessage(playerid, green1, "Notice:{FFFFFF} Wheels will be removed on next car/map change.");
				ShowPlayerDialog(playerid, DM_BUY_MENU, DIALOG_STYLE_LIST, "Shopping Center", DM_BUY_MENU_STRING, "Select", "Exit");
	        }
		}
	}

	if(dialogid == DM_BUY_MENU_HATS)
	{
 		if(!response)
 			ShowPlayerDialog(playerid, DM_BUY_MENU, DIALOG_STYLE_LIST, "Shopping Center", DM_BUY_MENU_STRING, "Select", "Exit");
 		else
	    {
			if(listitem == 0)
			{
				//Santa Hat
				if(GetThePlayerMoney(playerid)  <  1500) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You don't have enough money.");
				GiveThePlayerMoney(playerid, -1500);
				DMPlayerInfo[playerid][Hats] = 19065;
				SendClientMessage(playerid, green1, "Notice:{FFFFFF} A Hat has been purchased.");
                if(DMPlayerInfo[playerid][Alive] == 1)
                {
					RemovePlayerAttachedObjectEx(playerid, 3);
					SetPlayerAttachedObjectEx(playerid, 3, DMPlayerInfo[playerid][Hats], 2, 0.120000, 0.040000, -0.003500, 0, 100, 100, 1.4, 1.4, 1.4);
				}
				ShowPlayerDialog(playerid, DM_BUY_MENU, DIALOG_STYLE_LIST, "Shopping Center", DM_BUY_MENU_STRING, "Select", "Exit");
	        }
			if(listitem == 1)
			{
				//Cowboy Hat
				if(GetThePlayerMoney(playerid)  <  1500) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You don't have enough money.");
				GiveThePlayerMoney(playerid, -1500);
				DMPlayerInfo[playerid][Hats] = 18962;
				SendClientMessage(playerid, green1, "Notice:{FFFFFF} A Hat has been purchased.");
				if(DMPlayerInfo[playerid][Alive] == 1)
                {
					RemovePlayerAttachedObjectEx(playerid, 3);
					SetPlayerAttachedObjectEx(playerid, 3, DMPlayerInfo[playerid][Hats], 2, 0.120000, 0.040000, -0.003500, 0, 100, 100, 1.4, 1.4, 1.4);
				}
				ShowPlayerDialog(playerid, DM_BUY_MENU, DIALOG_STYLE_LIST, "Shopping Center", DM_BUY_MENU_STRING, "Select", "Exit");
	        }
			if(listitem == 2)
			{
				//Burger Hat
				if(GetThePlayerMoney(playerid)  <  1500) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You don't have enough money.");
				GiveThePlayerMoney(playerid, -1500);
				DMPlayerInfo[playerid][Hats] = 19094;
				SendClientMessage(playerid, green1, "Notice:{FFFFFF} A Hat has been purchased.");
				if(DMPlayerInfo[playerid][Alive] == 1)
                {
					RemovePlayerAttachedObjectEx(playerid, 3);
					SetPlayerAttachedObjectEx(playerid, 3, DMPlayerInfo[playerid][Hats], 2, 0.120000, 0.040000, -0.003500, 0, 100, 100, 1.4, 1.4, 1.4);
				}
				ShowPlayerDialog(playerid, DM_BUY_MENU, DIALOG_STYLE_LIST, "Shopping Center", DM_BUY_MENU_STRING, "Select", "Exit");
	        }
			if(listitem == 3)
			{
				//Chicken Hat
				if(GetThePlayerMoney(playerid)  <  1500) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You don't have enough money.");
				GiveThePlayerMoney(playerid, -1500);
				DMPlayerInfo[playerid][Hats] = 19137;
				SendClientMessage(playerid, green1, "Notice:{FFFFFF} A Hat has been purchased.");
				if(DMPlayerInfo[playerid][Alive] == 1)
                {
					RemovePlayerAttachedObjectEx(playerid, 3);
					SetPlayerAttachedObjectEx(playerid, 3, DMPlayerInfo[playerid][Hats], 2, 0.120000, 0.040000, -0.003500, 0, 100, 100, 1.4, 1.4, 1.4);
				}
				ShowPlayerDialog(playerid, DM_BUY_MENU, DIALOG_STYLE_LIST, "Shopping Center", DM_BUY_MENU_STRING, "Select", "Exit");
	        }
			if(listitem == 4)
			{
				//Cap (white)
				if(GetThePlayerMoney(playerid)  <  1500) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You don't have enough money.");
				GiveThePlayerMoney(playerid, -1500);
				DMPlayerInfo[playerid][Hats] = 19093;
				SendClientMessage(playerid, green1, "Notice:{FFFFFF} A Hat has been purchased.");
				if(DMPlayerInfo[playerid][Alive] == 1)
                {
					RemovePlayerAttachedObjectEx(playerid, 3);
					SetPlayerAttachedObjectEx(playerid, 3, DMPlayerInfo[playerid][Hats], 2, 0.120000, 0.040000, -0.003500, 0, 100, 100, 1.4, 1.4, 1.4);
				}
				ShowPlayerDialog(playerid, DM_BUY_MENU, DIALOG_STYLE_LIST, "Shopping Center", DM_BUY_MENU_STRING, "Select", "Exit");
	        }
			if(listitem == 5)
			{
				//Cap (yellow)
				if(GetThePlayerMoney(playerid)  <  1500) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You don't have enough money.");
				GiveThePlayerMoney(playerid, -1500);
				DMPlayerInfo[playerid][Hats] = 19160;
				SendClientMessage(playerid, green1, "Notice:{FFFFFF} A Hat has been purchased.");
				if(DMPlayerInfo[playerid][Alive] == 1)
                {
					RemovePlayerAttachedObjectEx(playerid, 3);
					SetPlayerAttachedObjectEx(playerid, 3, DMPlayerInfo[playerid][Hats], 2, 0.120000, 0.040000, -0.003500, 0, 100, 100, 1.4, 1.4, 1.4);
				}
				ShowPlayerDialog(playerid, DM_BUY_MENU, DIALOG_STYLE_LIST, "Shopping Center", DM_BUY_MENU_STRING, "Select", "Exit");
	        }
			if(listitem == 6)
			{
				//remove hat
				if(DMPlayerInfo[playerid][Hats] == 0)return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You don't have a hat.");
				GiveThePlayerMoney(playerid, 1000);
				DMPlayerInfo[playerid][Hats] = 0;
				SendClientMessage(playerid, green1, "Notice:{FFFFFF} A Hat has been removed.");
				if(DMPlayerInfo[playerid][Alive] == 1)
					RemovePlayerAttachedObjectEx(playerid, 3);
				ShowPlayerDialog(playerid, DM_BUY_MENU, DIALOG_STYLE_LIST, "Shopping Center", DM_BUY_MENU_STRING, "Select", "Exit");
	        }
	    }
    }

	if(dialogid == DM_BUY_MENU_GLASSES)
	{
 		if(!response)
 			ShowPlayerDialog(playerid, DM_BUY_MENU, DIALOG_STYLE_LIST, "Shopping Center", DM_BUY_MENU_STRING, "Select", "Exit");
 		else
	    {
			if(listitem == 0)
			{
				//Black
	        	if(GetThePlayerMoney(playerid)  <  1500) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You don't have enough money.");
				new skin = GetPlayerSkin(playerid);
				GiveThePlayerMoney(playerid, -1500);
				DMPlayerInfo[playerid][Glasses] = 19012;
				SendClientMessage(playerid, green1, "Notice:{FFFFFF} Glasses have been purchased.");
                if(DMPlayerInfo[playerid][Alive] == 1)
                {
					RemovePlayerAttachedObjectEx(playerid, 8);
					SetPlayerAttachedObjectEx(playerid, 8, DMPlayerInfo[playerid][Glasses], 2, SkinOffSetGlasses[skin][0], SkinOffSetGlasses[skin][1], SkinOffSetGlasses[skin][2], SkinOffSetGlasses[skin][3], SkinOffSetGlasses[skin][4], SkinOffSetGlasses[skin][5], SkinOffSetGlasses[skin][6], SkinOffSetGlasses[skin][6], SkinOffSetGlasses[skin][6]);
                }
				ShowPlayerDialog(playerid, DM_BUY_MENU, DIALOG_STYLE_LIST, "Shopping Center", DM_BUY_MENU_STRING, "Select", "Exit");
	        }
			if(listitem == 1)
			{
				//Blue
	        	if(GetThePlayerMoney(playerid)  <  1500) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You don't have enough money.");
				new skin = GetPlayerSkin(playerid);
				GiveThePlayerMoney(playerid, -1500);
				DMPlayerInfo[playerid][Glasses] = 19009;
				SendClientMessage(playerid, green1, "Notice:{FFFFFF} Glasses have been purchased.");
                if(DMPlayerInfo[playerid][Alive] == 1)
                {
					RemovePlayerAttachedObjectEx(playerid, 8);
					SetPlayerAttachedObjectEx(playerid, 8, DMPlayerInfo[playerid][Glasses], 2, SkinOffSetGlasses[skin][0], SkinOffSetGlasses[skin][1], SkinOffSetGlasses[skin][2], SkinOffSetGlasses[skin][3], SkinOffSetGlasses[skin][4], SkinOffSetGlasses[skin][5], SkinOffSetGlasses[skin][6], SkinOffSetGlasses[skin][6], SkinOffSetGlasses[skin][6]);
                }
				ShowPlayerDialog(playerid, DM_BUY_MENU, DIALOG_STYLE_LIST, "Shopping Center", DM_BUY_MENU_STRING, "Select", "Exit");
			}
			if(listitem == 2)
			{
				//Purple
	        	if(GetThePlayerMoney(playerid)  <  1500) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You don't have enough money.");
				new skin = GetPlayerSkin(playerid);
				GiveThePlayerMoney(playerid, -1500);
				DMPlayerInfo[playerid][Glasses] = 19024;
				SendClientMessage(playerid, green1, "Notice:{FFFFFF} Glasses have been purchased.");
                if(DMPlayerInfo[playerid][Alive] == 1)
                {
					RemovePlayerAttachedObjectEx(playerid, 8);
					SetPlayerAttachedObjectEx(playerid, 8, DMPlayerInfo[playerid][Glasses], 2, SkinOffSetGlasses[skin][0], SkinOffSetGlasses[skin][1], SkinOffSetGlasses[skin][2], SkinOffSetGlasses[skin][3], SkinOffSetGlasses[skin][4], SkinOffSetGlasses[skin][5], SkinOffSetGlasses[skin][6], SkinOffSetGlasses[skin][6], SkinOffSetGlasses[skin][6]);
                }
				ShowPlayerDialog(playerid, DM_BUY_MENU, DIALOG_STYLE_LIST, "Shopping Center", DM_BUY_MENU_STRING, "Select", "Exit");
			}
			if(listitem == 3)
			{
				//Pink
	        	if(GetThePlayerMoney(playerid)  <  1500) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You don't have enough money.");
				new skin = GetPlayerSkin(playerid);
				GiveThePlayerMoney(playerid, -1500);
				DMPlayerInfo[playerid][Glasses] = 19025;
				SendClientMessage(playerid, green1, "Notice:{FFFFFF} Glasses have been purchased.");
                if(DMPlayerInfo[playerid][Alive] == 1)
                {
					RemovePlayerAttachedObjectEx(playerid, 8);
					SetPlayerAttachedObjectEx(playerid, 8, DMPlayerInfo[playerid][Glasses], 2, SkinOffSetGlasses[skin][0], SkinOffSetGlasses[skin][1], SkinOffSetGlasses[skin][2], SkinOffSetGlasses[skin][3], SkinOffSetGlasses[skin][4], SkinOffSetGlasses[skin][5], SkinOffSetGlasses[skin][6], SkinOffSetGlasses[skin][6], SkinOffSetGlasses[skin][6]);
                }
				ShowPlayerDialog(playerid, DM_BUY_MENU, DIALOG_STYLE_LIST, "Shopping Center", DM_BUY_MENU_STRING, "Select", "Exit");
			}
			if(listitem == 4)
			{
				//Red
	        	if(GetThePlayerMoney(playerid)  <  1500) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You don't have enough money.");
				new skin = GetPlayerSkin(playerid);
				GiveThePlayerMoney(playerid, -1500);
				DMPlayerInfo[playerid][Glasses] = 19019;
				SendClientMessage(playerid, green1, "Notice:{FFFFFF} Glasses have been purchased.");
                if(DMPlayerInfo[playerid][Alive] == 1)
                {
					RemovePlayerAttachedObjectEx(playerid, 8);
					SetPlayerAttachedObjectEx(playerid, 8, DMPlayerInfo[playerid][Glasses], 2, SkinOffSetGlasses[skin][0], SkinOffSetGlasses[skin][1], SkinOffSetGlasses[skin][2], SkinOffSetGlasses[skin][3], SkinOffSetGlasses[skin][4], SkinOffSetGlasses[skin][5], SkinOffSetGlasses[skin][6], SkinOffSetGlasses[skin][6], SkinOffSetGlasses[skin][6]);
                }
				ShowPlayerDialog(playerid, DM_BUY_MENU, DIALOG_STYLE_LIST, "Shopping Center", DM_BUY_MENU_STRING, "Select", "Exit");
			}
			if(listitem == 5)
			{
				//Orange
	        	if(GetThePlayerMoney(playerid)  <  1500) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You don't have enough money.");
				new skin = GetPlayerSkin(playerid);
				GiveThePlayerMoney(playerid, -1500);
				DMPlayerInfo[playerid][Glasses] = 19018;
				SendClientMessage(playerid, green1, "Notice:{FFFFFF} Glasses have been purchased.");
                if(DMPlayerInfo[playerid][Alive] == 1)
                {
					RemovePlayerAttachedObjectEx(playerid, 8);
					SetPlayerAttachedObjectEx(playerid, 8, DMPlayerInfo[playerid][Glasses], 2, SkinOffSetGlasses[skin][0], SkinOffSetGlasses[skin][1], SkinOffSetGlasses[skin][2], SkinOffSetGlasses[skin][3], SkinOffSetGlasses[skin][4], SkinOffSetGlasses[skin][5], SkinOffSetGlasses[skin][6], SkinOffSetGlasses[skin][6], SkinOffSetGlasses[skin][6]);
                }
				ShowPlayerDialog(playerid, DM_BUY_MENU, DIALOG_STYLE_LIST, "Shopping Center", DM_BUY_MENU_STRING, "Select", "Exit");
			}
			if(listitem == 6)
			{
				//Yellow
	        	if(GetThePlayerMoney(playerid)  <  1500) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You don't have enough money.");
				new skin = GetPlayerSkin(playerid);
				GiveThePlayerMoney(playerid, -1500);
				DMPlayerInfo[playerid][Glasses] = 19028;
				SendClientMessage(playerid, green1, "Notice:{FFFFFF} Glasses have been purchased.");
                if(DMPlayerInfo[playerid][Alive] == 1)
                {
					RemovePlayerAttachedObjectEx(playerid, 8);
					SetPlayerAttachedObjectEx(playerid, 8, DMPlayerInfo[playerid][Glasses], 2, SkinOffSetGlasses[skin][0], SkinOffSetGlasses[skin][1], SkinOffSetGlasses[skin][2], SkinOffSetGlasses[skin][3], SkinOffSetGlasses[skin][4], SkinOffSetGlasses[skin][5], SkinOffSetGlasses[skin][6], SkinOffSetGlasses[skin][6], SkinOffSetGlasses[skin][6]);
                }
				ShowPlayerDialog(playerid, DM_BUY_MENU, DIALOG_STYLE_LIST, "Shopping Center", DM_BUY_MENU_STRING, "Select", "Exit");
			}
			if(listitem == 7)
			{
				//Green
	        	if(GetThePlayerMoney(playerid)  <  1500) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You don't have enough money.");
				new skin = GetPlayerSkin(playerid);
				GiveThePlayerMoney(playerid, -1500);
				DMPlayerInfo[playerid][Glasses] = 19029;
				SendClientMessage(playerid, green1, "Notice:{FFFFFF} Glasses have been purchased.");
                if(DMPlayerInfo[playerid][Alive] == 1)
                {
					RemovePlayerAttachedObjectEx(playerid, 8);
					SetPlayerAttachedObjectEx(playerid, 8, DMPlayerInfo[playerid][Glasses], 2, SkinOffSetGlasses[skin][0], SkinOffSetGlasses[skin][1], SkinOffSetGlasses[skin][2], SkinOffSetGlasses[skin][3], SkinOffSetGlasses[skin][4], SkinOffSetGlasses[skin][5], SkinOffSetGlasses[skin][6], SkinOffSetGlasses[skin][6], SkinOffSetGlasses[skin][6]);
                }
				ShowPlayerDialog(playerid, DM_BUY_MENU, DIALOG_STYLE_LIST, "Shopping Center", DM_BUY_MENU_STRING, "Select", "Exit");
			}
			if(listitem == 8)
			{
				//remove glasses
				if(DMPlayerInfo[playerid][Glasses] == 0)return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You don't have glasses.");
				GiveThePlayerMoney(playerid, 1500);
				DMPlayerInfo[playerid][Glasses] = 0;
				SendClientMessage(playerid, green1, "Notice:{FFFFFF} Glasses have been removed.");
                if(DMPlayerInfo[playerid][Alive] == 1)
					RemovePlayerAttachedObjectEx(playerid, 8);
				ShowPlayerDialog(playerid, DM_BUY_MENU, DIALOG_STYLE_LIST, "Shopping Center", DM_BUY_MENU_STRING, "Select", "Exit");
	        }
	    }
    }
	//===========================================
	if(dialogid == ELECTIONMENU)
    {
        if(response)
        {
            if(PlayerInfo[playerid][PlayerMode] != TW)return SendClientMessage( playerid,red1,"{FF0000}Error:{FFFFFF} You must be on TW.");
            if(TWInfo[Election] == 0)return SendClientMessage( playerid,red1,"{FF0000}Error:{FFFFFF} Elections are now over.");
            new voteid=-1;
            forLoop(i, MAX_PLAYERS)
			{
			    if(IsPlayerConnected(i) && !IsPlayerNPC(i))
		 		{
		 		    if(PlayerInfo[i][PlayerMode] == TW && PlayerInfo[i][Spawned] == 1)
			 		{
			 		    if(TWPlayerInfo[i][Nominated][TWPlayerInfo[playerid][Country]] == listitem)voteid=i;
					}
			    }
			}
			if(voteid > -1)
			{
				TWPlayerInfo[voteid][pVotes]++;
	    		format(string,128,"{33FF33}NEWS:{FFFFFF} %s voted for %s(ID:%d) to be leader of %s(Votes: %d)!",PlayerInfo[playerid][Name],PlayerInfo[voteid][Name],voteid,CountryNames[TWPlayerInfo[voteid][Country]],TWPlayerInfo[voteid][pVotes]);
				SendMessageToMode(TW,COLOR_WHITE, string);
			  	format(string, sizeof(string), "[NEWS] %s voted for %s(ID:%d) to be leader of %s(Votes: %d)!",PlayerInfo[playerid][Name],PlayerInfo[voteid][Name],voteid,CountryNames[TWPlayerInfo[voteid][Country]],TWPlayerInfo[voteid][pVotes]);
				db_SaveChat(-1, TW,string);
			}else{
			    SendClientMessage( playerid,red1,"{FF0000}Error: {FFFFFF}Player is no longer a candidate. Vote again");
			    ShowPlayerDialog(playerid, ELECTIONMENU, DIALOG_STYLE_LIST, "Leader Election",string[TWPlayerInfo[playerid][Country]], "Select", "Cancel");
			}
        }
    }
    //==================== radio shit
	if(dialogid ==RADIO_MENU)
	{
	    if(response)
		{
		    if(listitem==0)
            {
				PlayerInfo[playerid][Radio] = 1;
	            StopAudioStreamForPlayer(playerid);
	            PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=40568");
	            ShowPlayerDialog(playerid, RADIO_MENU, DIALOG_STYLE_LIST, "Chose Your Radio Genre", "\nDubstep\nHipHop\nReggae\nJazz\nPOP\nR&B\nRock\nRAP\nTurn radio off", "Select", "Back");
				GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~w~RADIO ~g~ON", 3000, 3);
            }
            if(listitem==1)
            {
				PlayerInfo[playerid][Radio] = 1;
	            StopAudioStreamForPlayer(playerid);
	            PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=8318");
	            ShowPlayerDialog(playerid, RADIO_MENU, DIALOG_STYLE_LIST, "Chose Your Radio Genre", "\nDubstep\nHipHop\nReggae\nJazz\nPOP\nR&B\nRock\nRAP\nTurn radio off", "Select", "Back");
				GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~w~RADIO ~g~ON", 3000, 3);
            }
            if(listitem==2)
            {
				PlayerInfo[playerid][Radio] = 1;
	            StopAudioStreamForPlayer(playerid);
	            PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=5661");
	            ShowPlayerDialog(playerid, RADIO_MENU, DIALOG_STYLE_LIST, "Chose Your Radio Genre", "\nDubstep\nHipHop\nReggae\nJazz\nPOP\nR&B\nRock\nRAP\nTurn radio off", "Select", "Back");
				GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~w~RADIO ~g~ON", 3000, 3);
            }
            if(listitem==3)
            {
				PlayerInfo[playerid][Radio] = 1;
	            StopAudioStreamForPlayer(playerid);
	            PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=172098");
	            ShowPlayerDialog(playerid, RADIO_MENU, DIALOG_STYLE_LIST, "Chose Your Radio Genre", "\nDubstep\nHipHop\nReggae\nJazz\nPOP\nR&B\nRock\nRAP\nTurn radio off", "Select", "Back");
				GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~w~RADIO ~g~ON", 3000, 3);
            }
            if(listitem==4)
            {
				PlayerInfo[playerid][Radio] = 1;
	            StopAudioStreamForPlayer(playerid);
	            PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=333407");
	            ShowPlayerDialog(playerid, RADIO_MENU, DIALOG_STYLE_LIST, "Chose Your Radio Genre", "\nDubstep\nHipHop\nReggae\nJazz\nPOP\nR&B\nRock\nRAP\nTurn radio off", "Select", "Back");
				GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~w~RADIO ~g~ON", 3000, 3);
            }
            if(listitem==5)
            {
				PlayerInfo[playerid][Radio] = 1;
	            StopAudioStreamForPlayer(playerid);
	            PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=31645");
	            ShowPlayerDialog(playerid, RADIO_MENU, DIALOG_STYLE_LIST, "Chose Your Radio Genre", "\nDubstep\nHipHop\nReggae\nJazz\nPOP\nR&B\nRock\nRAP\nTurn radio off", "Select", "Back");
				GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~w~RADIO ~g~ON", 3000, 3);
            }
            if(listitem==6)
            {
				PlayerInfo[playerid][Radio] = 1;
	            StopAudioStreamForPlayer(playerid);
	            PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=131834");
	            ShowPlayerDialog(playerid, RADIO_MENU, DIALOG_STYLE_LIST, "Chose Your Radio Genre", "\nDubstep\nHipHop\nReggae\nJazz\nPOP\nR&B\nRock\nRAP\nTurn radio off", "Select", "Back");
				GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~w~RADIO ~g~ON", 3000, 3);
            }
            if(listitem==7)
            {
				PlayerInfo[playerid][Radio] = 1;
	            StopAudioStreamForPlayer(playerid);
	            PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=105867");
	            ShowPlayerDialog(playerid, RADIO_MENU, DIALOG_STYLE_LIST, "Chose Your Radio Genre", "\nDubstep\nHipHop\nReggae\nJazz\nPOP\nR&B\nRock\nRAP\nTurn radio off", "Select", "Back");
				GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~w~RADIO ~g~ON", 3000, 3);
            }
            if(listitem==8)
            {
	            StopAudioStreamForPlayer(playerid);
				GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~w~RADIO ~r~OFF", 3000, 3);
            }
		}
	}

	///////===================================
    if(dialogid == INEVENTMENU)
    {
        if(response)
        {
            new place[300],pl=0,event,string1[190],string2[700];
	        forLoop(i, maxSFevents)
			{
			    place[i]=-1;
			    if(EventInfo[i][Exists] && EventInfo[i][Started])
				{
					place[i]=pl;
					pl++;
				}
			}
			forLoop(i, maxSFevents)
			{
				if(EventInfo[i][Exists] && EventInfo[i][Started] && place[i] == listitem)
				{
					event=i;
					break;
				}
			}
			if(EventInfo[event][Started] == 0)return SendClientMessage( playerid,red1,"{FF0000}Error:{FFFFFF} The event hasn't started.");
			format(string1,90,"\n{FFFFFF}Event Name: {33FF33}%s",EventInfo[event][eName]);
			strcat(string2,string1);
			format(string1,90,"\n{FFFFFF}ID: {33FF33}%d",EventInfo[event][ID]);
			strcat(string2,string1);
			format(string1,90,"\n{FFFFFF}Created by: {33FF33}%s on %s",EventInfo[event][Author],EventInfo[event][Date]);
			strcat(string2,string1);
			format(string1,90,"\n{FFFFFF}Players:");
			strcat(string2,string1);

			forLoop(i, MAX_PLAYERS)if(IsPlayerConnected(i) && PlayerInfo[i][PlayerMode] == STUNT && SFPlayerInfo[i][Event] == EventInfo[event][ID] && PlayerInfo[i][Spawned] == 1)
			{
			    format(string1,90,"\n{FFFFFF}%s (ID:%d)",PlayerInfo[i][Name],i);
			    strcat(string2,string1);
			}
			ShowPlayerDialog(playerid, 1231, DIALOG_STYLE_MSGBOX, "In Event", string2, "Close", "");
        }
    }
	if(dialogid == EJOINMENU)
	{
	    if(response)
	    {
	        new place[300],pl=0,event;
	        forLoop(i, maxSFevents)
			{
			    place[i]=-1;
			    if(EventInfo[i][Exists] && EventInfo[i][Started] && !EventInfo[i][State])
				{
					place[i]=pl;
					pl++;
				}
			}
			forLoop(i, maxSFevents)
			{
				if(EventInfo[i][Exists] && EventInfo[i][Started] && !EventInfo[i][State] && place[i] == listitem)
				{
					event=i;
					break;
				}
			}
		    if(EventInfo[event][Started] == 0)return SendClientMessage( playerid,red1,"{FF0000}Error:{FFFFFF} The event hasn't started.");
			if(EventInfo[event][Started] == 1 && EventInfo[event][State] == 1)return SendClientMessage( playerid,red1,"{{FF0000}Error:{FFFFFF} The event has already started. Wait for the next one.");
		    if(InEventCount(EventInfo[event][ID]) >= EventInfo[event][MaxPlayers])return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} The current event is full.. Wait for the next one.");
			if(EventInfo[event][NoExitVehs] == 1 && IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} Get off the vehicle to join this event.");
	        JoinEvent(playerid,EventInfo[event][ID]);
	    }
	}
	/*if(dialogid == EVENTMENU)
    {
        if(response)
        {
			if(EventsCount()>=5)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} Max number of events has been reached, try again later.");
			if(PlayerInfo[playerid][PlayerMode] != STUNT)return SendClientMessage( playerid,red1,"{FF0000}Error:{FFFFFF} You must be on Stunt&Fun.");
    		if(GetPlayerVirtualWorld(playerid) != W_STUNT)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be in Stunt&Fun mode.");
            new event=(listitem+1);
            if(EventInfo[event][Started] == 1)return SendClientMessage( playerid,red1,"{FF0000}Error:{FFFFFF} This event has already started, try /ejoin or start another.");
            if(EventInfo[event][NoExitVehs] == 1 && IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} Get off the vehicle to start this event.");
			CreateEvent(playerid,event);
        }
    }*/
	if(dialogid == SELMENU)
    {
        if(!response) // If they clicked 'Cancel' or pressed esc
        {
		    if(PlayerInfo[playerid][SelectMenu] == SQUAD)
		    {
		        SendClientMessage(playerid,red1,"Notice:{FFFFFF} You have denied the Squad invitation.");
				format(string, sizeof(string), "Notice:{FFFFFF} %s has denied the Squad invitation.", PlayerInfo[playerid][Name] );
				SendClientMessage(PlayerInfo[playerid][SelectMenuOption][0],red1,string);
		    }
		    if(PlayerInfo[playerid][SelectMenu] == GANG)
		    {
		        SendClientMessage(playerid,red1,"Notice:{FFFFFF} You have denied the Gang invitation.");
				format(string, sizeof(string), "Notice:{FFFFFF} %s has denied the Gang invitation.", PlayerInfo[playerid][Name] );
				SendClientMessage(PlayerInfo[playerid][SelectMenuOption][0],red1,string);
		    }
			if(PlayerInfo[playerid][SelectMenu] == THE_TW)
			{
			    if(PlayerInfo[playerid][SelectMenuOption][1] == LEADER)
			    {
					format(string,128,"{33FF33}NEWS:{FFFFFF} %s(ID:%d) has denied to become the leader of %s!",PlayerInfo[playerid][Name],playerid,CountryNames[TWPlayerInfo[playerid][Country]]);
					SendMessageToMode(TW,COLOR_WHITE, string);
				  	format(string, sizeof(string), "[NEWS] %s(ID:%d) has denied to become the leader of %s!",PlayerInfo[playerid][Name],playerid,CountryNames[TWPlayerInfo[playerid][Country]]);
					db_SaveChat(-1, TW,string);
				}
		        if(PlayerInfo[playerid][SelectMenuOption][1] == BODYGUARD || PlayerInfo[playerid][SelectMenuOption][1] == VICE || PlayerInfo[playerid][SelectMenuOption][1] == SPY)
			    {
				    SendClientMessage(playerid,red1,"Notice:{FFFFFF} You have denied the offer.");
					format(string, sizeof(string), "Notice:{FFFFFF} %s has denied the offer.", PlayerInfo[playerid][Name] );
					SendClientMessage(PlayerInfo[playerid][SelectMenuOption][0],red1,string);
		        }
			}
	        PlayerInfo[playerid][SelectMenu] = -1;
			forLoop(i, SELECT_MENU_OPTIONS)PlayerInfo[playerid][SelectMenuOption][i] = -1;
        }
        else // Pressed ENTER or clicked 'Accept' button
        {
			if(PlayerInfo[playerid][SelectMenu] == SQUAD)
		    {
				new str2[128];
				new squadlocal = getTWSquadID(TWPlayerInfo[playerid][SquadID]);
		        TWPlayerInfo[playerid][SquadID] = PlayerInfo[playerid][SelectMenuOption][1];
				SendClientMessage(playerid,green1,"Notice:{FFFFFF} You have accepted the Squad invitation.");
				format(string, sizeof(string), "Notice:{FFFFFF} %s has accepted the Squad invitation.", PlayerInfo[playerid][Name] );
				SendClientMessage(PlayerInfo[playerid][SelectMenuOption][0],green1,string);
				SquadInfo[squadlocal][Members]++;
			    format(str2,sizeof str2,"{FFFFFF}***{00EEAD}%s{FFFFFF}***",SquadInfo[squadlocal][sName]);
			    UpdateDynamic3DTextLabelText(PlayerInfo[playerid][TeamLabel], 0xFFFF00AA, str2);
			    format(string, sizeof(string), "Notice:{FFFFFF} You have joined squad %s (ID:%d)!", SquadInfo[squadlocal][sName],TWPlayerInfo[playerid][SquadID]);
				SendClientMessage(playerid,green1,string);

				format(str2, sizeof(str2), "TW_SQUAD_ID = %d",TWPlayerInfo[playerid][SquadID]);
				db_UpdateUserTableValue(toStr(PlayerInfo[playerid][ID]), "USERS", str2);
                forLoop(j, MAX_PLAYERS)
				{
				    if(IsPlayerConnected(j) && playerid != j && PlayerInfo[j][PlayerMode] == TW)
					{
					    if(TWPlayerInfo[playerid][SquadID] == TWPlayerInfo[j][SquadID])
					    {
							format(string, sizeof(string),"Notice:{FFFFFF} %s(ID:%d) has joined your squad!", PlayerInfo[playerid][Name],playerid);
							SendClientMessage(j, green1, string);
						}
					}
				}
				PlayerInfo[playerid][SelectMenu] = -1;
   				forLoop(i, SELECT_MENU_OPTIONS)PlayerInfo[playerid][SelectMenuOption][i] = -1;
				return 0;
		    }
		    if(PlayerInfo[playerid][SelectMenu] == GANG)
		    {
		        new str2[68];
		    	new ganglocal = getFFAGangID(FFAPlayerInfo[playerid][GangID]);
			    FFAPlayerInfo[playerid][GangID] = PlayerInfo[playerid][SelectMenuOption][1];
				SendClientMessage(playerid,green1,"Notice:{FFFFFF} You have accepted the Gang invitation.");
				format(string, sizeof(string), "Notice:{FFFFFF} %s has accepted the Gang invitation.", PlayerInfo[playerid][Name] );
				SendClientMessage(PlayerInfo[playerid][SelectMenuOption][0],green1,string);
				GangInfo[ganglocal][Members]++;
	 			SetPlayerColor(playerid,GangInfo[ganglocal][Color]);
				format(str2,128,"{FFFFFF}***{%s}%s{FFFFFF}***",GangInfo[ganglocal][gColHex],GangInfo[ganglocal][gName]);
			    UpdateDynamic3DTextLabelText(PlayerInfo[playerid][ModeLabel], GangInfo[ganglocal][Color], str2);
			    SetPlayerTeam(playerid,FFAPlayerInfo[playerid][GangID]);
			    format(string, sizeof(string), "Notice:{FFFFFF} You have joined gang %s(ID:%d)!", GangInfo[ganglocal][gName],FFAPlayerInfo[playerid][GangID]);
				SendClientMessage(playerid,green1,string);
	            format(FFAPlayerInfo[playerid][gRank],50,"%s","Member");
			    UpdateDynamic3DTextLabelText(PlayerInfo[playerid][TeamLabel], 0x00EEADAA,"{FFFFFF}*{33FF33}Member{FFFFFF}*");
				format(str2, sizeof(str2), "FFA_GANG_ID = %d",FFAPlayerInfo[playerid][GangID]);
				db_UpdateUserTableValue(toStr(PlayerInfo[playerid][ID]), "USERS", str2);
				forLoop(j, MAX_PLAYERS)
				{
				    if(IsPlayerConnected(j) && playerid != j && PlayerInfo[j][PlayerMode] == FFA)
					{
					    if(FFAPlayerInfo[playerid][GangID] == FFAPlayerInfo[j][GangID])
					    {
							format(string, sizeof(string),"Notice:{FFFFFF} %s(ID:%d) has joined your gang!", PlayerInfo[playerid][Name],playerid);
							SendClientMessage(j, green1, string);
						}
					}
				}
				A_SpawnPlayer(playerid);
		        PlayerInfo[playerid][SelectMenu] = -1;
   				forLoop(i, SELECT_MENU_OPTIONS)PlayerInfo[playerid][SelectMenuOption][i] = -1;
				OtherDeathDisconnect(playerid,1,0);
				return 0;
		    }
			if(PlayerInfo[playerid][SelectMenu] == THE_TW)
			{
			    if(PlayerInfo[playerid][SelectMenuOption][1] == LEADER)
			    {
					if(PlayerCountryLeaderCount(playerid) > 0)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} There is already a leader in your country.");
			    	format(string,128,"{33FF33}NEWS:{FFFFFF} %s(ID:%d) has been elected as the leader of {FF9900}%s!",PlayerInfo[playerid][Name],playerid,CountryNames[TWPlayerInfo[playerid][Country]]);
					SendMessageToMode(TW,COLOR_WHITE, string);
				  	format(string, sizeof(string), "[NEWS] %s(ID:%d) has been elected as the leader of %s!",PlayerInfo[playerid][Name],playerid,CountryNames[TWPlayerInfo[playerid][Country]]);
					db_SaveChat(-1, TW,string);
					TWPlayerInfo[playerid][AsLeader]++;
					LeaderBarState();
				}
				else if(PlayerInfo[playerid][SelectMenuOption][1] == VICE)
			    {
					if(pViceLeeaderCount(playerid) > 0)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} There is already a vice leader in your country.");
			    	format(string,128,"{33FF33}NEWS:{FFFFFF} %s(ID:%d) has been chosen as the vice leader of {FF9900}%s!",PlayerInfo[playerid][Name],playerid,CountryNames[TWPlayerInfo[playerid][Country]]);
					SendMessageToMode(TW,COLOR_WHITE, string);
				  	format(string, sizeof(string), "[NEWS] %s(ID:%d) has been chosen as the vice leader of %s!",PlayerInfo[playerid][Name],playerid,CountryNames[TWPlayerInfo[playerid][Country]]);
					db_SaveChat(-1, TW,string);
				}
		        else if(PlayerInfo[playerid][SelectMenuOption][1] == BODYGUARD)
			    {
				    if(PlayerCountryGuardCount(playerid) >= 8)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} There are eight guards already.");
				    SendClientMessage(playerid,green1,"Notice:{FFFFFF} You have accepted the offer.");
					format(string, sizeof(string), "Notice:{FFFFFF} %s has accepted the offer.", PlayerInfo[playerid][Name] );
					SendClientMessage(PlayerInfo[playerid][SelectMenuOption][0],green1,string);
		        }
		        else if(PlayerInfo[playerid][SelectMenuOption][1] == SPY)
			    {
				    if(PlayerCountrySpyCount(playerid) >= 2)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} There are two spies already.");
				    SendClientMessage(playerid,green1,"Notice:{FFFFFF} You have accepted the offer.");
					format(string, sizeof(string), "Notice:{FFFFFF} %s has accepted the offer.", PlayerInfo[playerid][Name] );
					SendClientMessage(PlayerInfo[playerid][SelectMenuOption][0],green1,string);
		        }
			    TWPlayerInfo[playerid][Class] = PlayerInfo[playerid][SelectMenuOption][1];
		        PlayerInfo[playerid][SelectMenu] = -1;
   				forLoop(i, SELECT_MENU_OPTIONS)PlayerInfo[playerid][SelectMenuOption][i] = -1;
				OtherDeathDisconnect(playerid,1,0);
			 	A_SpawnPlayer(playerid);
				return 0;
			}
			if(PlayerInfo[playerid][SelectMenu] == MODE)
			{
				ResetWeapons(playerid);
				OtherDeathDisconnect(playerid,0,0);
		    	if(ServerInfo[DebugMode] == 1)printf("DIALOG: abtt55.92.3 s");
    			SetPlayerMode(playerid, PlayerInfo[playerid][SelectMenuOption][1], false, true);
		    	if(ServerInfo[DebugMode] == 1)printf("DIALOG: abtt55.92.2 e");
			    if(PlayerInfo[playerid][PlayerMode] == TW)
			    {
					if(AxisCount() == AllyCount())
                    {
                        switch(random(6))
                        {
                            case 0:{TWPlayerInfo[playerid][Country] = GERMANY;PlayerInfo[playerid][pTeam] = AXIS;}
                            case 1:{TWPlayerInfo[playerid][Country] = USA;PlayerInfo[playerid][pTeam] = ALLIES;}
                            case 2:{TWPlayerInfo[playerid][Country] = BALKAN;PlayerInfo[playerid][pTeam] = ALLIES;}
                            case 3:{TWPlayerInfo[playerid][Country] = BRITISH;PlayerInfo[playerid][pTeam] = ALLIES;}
                            case 4:{TWPlayerInfo[playerid][Country] = RUSSIA;PlayerInfo[playerid][pTeam] = ALLIES;}
                            case 5:{TWPlayerInfo[playerid][Country] = JAPAN;PlayerInfo[playerid][pTeam] = AXIS;}
                            case 6:{TWPlayerInfo[playerid][Country] = ITALY;PlayerInfo[playerid][pTeam] = AXIS;}
                        }
					}
					else if(AxisCount() > AllyCount())
					{
						TWPlayerInfo[playerid][Country] = BRITISH;
						PlayerInfo[playerid][pTeam] = ALLIES;
					}
					else if(AxisCount() < AllyCount())
					{
						TWPlayerInfo[playerid][Country] = GERMANY;
						PlayerInfo[playerid][pTeam] = AXIS;
					}
                    TWPlayerInfo[playerid][Class] = SOLDIER;
			    }
			    else if(PlayerInfo[playerid][PlayerMode] == CO)
			    {
			        if(CriminalCountCO() == CopCountCO())
                    {
                        switch(random(2))
                        {
                            case 0:PlayerInfo[playerid][pTeam] = COP;
                            case 1:PlayerInfo[playerid][pTeam] = CRIMINAL;
                        }
					}
					if(CriminalCountCO() > CopCountCO())
						PlayerInfo[playerid][pTeam] = COP;
					if(CriminalCountCO() < CopCountCO())
						PlayerInfo[playerid][pTeam] = CRIMINAL;

			    }
			    else if(PlayerInfo[playerid][PlayerMode] == TL)
			    {
			        if(AxisCountTL() == AllyCountTL())
                    {
                        switch(random(2))
                        {
                            case 0:PlayerInfo[playerid][pTeam] = AXIS;
                            case 1:PlayerInfo[playerid][pTeam] = ALLIES;
                        }
					}
					if(AxisCountTL() > AllyCountTL())
						PlayerInfo[playerid][pTeam] = ALLIES;
					if(AxisCountTL() < AllyCountTL())
						PlayerInfo[playerid][pTeam] = AXIS;

			    }
			    else if(PlayerInfo[playerid][PlayerMode] == CTF)
			    {
			        if (RedCountCTF() == BlueCountCTF())
                    {
                        switch(random(2))
                        {
                            case 0:PlayerInfo[playerid][pTeam] = RED;
                            case 1:PlayerInfo[playerid][pTeam] = BLUE;
                        }
					}
					if (RedCountCTF() > BlueCountCTF())
						PlayerInfo[playerid][pTeam] = BLUE;
					if (RedCountCTF() < BlueCountCTF())
						PlayerInfo[playerid][pTeam] = RED;
			    }
			    else if(PlayerInfo[playerid][PlayerMode] == VW)
			    {
			        if (TeamCountVW(VW_USA) == TeamCountVW(VW_VIETNAM))
                    {
                        switch(random(2))
                        {
                            case 0:PlayerInfo[playerid][pTeam] = VW_USA;
                            case 1:PlayerInfo[playerid][pTeam] = VW_VIETNAM;
                        }
					}
					else if (TeamCountVW(VW_USA) < TeamCountVW(VW_VIETNAM))
						PlayerInfo[playerid][pTeam] = VW_USA;
					else
						PlayerInfo[playerid][pTeam] = VW_VIETNAM;
			    }
			    else if(PlayerInfo[playerid][PlayerMode] == PTP)
			    {
			        PlayerInfo[playerid][pTeam] = NOTEAM;
			        PTPPlayerInfo[playerid][Class] = CIVILIAN;
			    }
				A_SpawnPlayer(playerid);
		        PlayerInfo[playerid][SelectMenu] = -1;
   				forLoop(i, SELECT_MENU_OPTIONS)PlayerInfo[playerid][SelectMenuOption][i] = -1;
				return 0;
			}
			if(PlayerInfo[playerid][SelectMenu] == TW_COUNTRY)
			{
			    if(TWPlayerInfo[playerid][Country] == PlayerInfo[playerid][SelectMenuOption][listitem] && PlayerInfo[playerid][PlayerMode] == TW)
			    {
			    	new str11[420];
					PlayerInfo[playerid][SelectMenu] = TW_COUNTRY;
			        PlayerInfo[playerid][SelectMenuOption][0]= BRITISH;
			        PlayerInfo[playerid][SelectMenuOption][1]= USA;
			        PlayerInfo[playerid][SelectMenuOption][2]= RUSSIA;
			        PlayerInfo[playerid][SelectMenuOption][3]= GERMANY;
			        PlayerInfo[playerid][SelectMenuOption][4]= BALKAN;
			        PlayerInfo[playerid][SelectMenuOption][5]= JAPAN;
			        PlayerInfo[playerid][SelectMenuOption][6]= ITALY;
					strcat(str11, "\n{FFFFFF}Britain  {FFFFFF}({375FFF}ALLIES{FFFFFF}) (/br)  \n{33FF33}USA  {FFFFFF}({375FFF}ALLIES{FFFFFF}) (/usa)  \n{FFFF00}Soviet Union  {FFFFFF}({375FFF}ALLIES{FFFFFF}) (/sv)");
					strcat(str11, "\n{800080}Germany  {FFFFFF}({FF0000}AXIS{FFFFFF}) (/ger) \n{375FFF}Balkan Nations  {FFFFFF}({375FFF}ALLIES{FFFFFF}) (/bk)  \n{FF0000}Japan  {FFFFFF}({FF0000}AXIS{FFFFFF}) (/jap)  \n{FF9900}Italy  {FFFFFF}({FF0000}AXIS{FFFFFF}) (/ita)");
					ShowPlayerDialog(playerid, SELMENU, DIALOG_STYLE_LIST, "Country Selection Menu",str11, "Select", "Cancel");
				  	return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You already are in this country.");
				}
			  	if(PlayerInfo[playerid][VIP] == 0)
			    {
			        if(PlayerInfo[playerid][SelectMenuOption][listitem] == GERMANY || PlayerInfo[playerid][SelectMenuOption][listitem] == ITALY || PlayerInfo[playerid][SelectMenuOption][listitem] == JAPAN)
			        {
			    		if(AxisCount() > AllyCount())
			    		{
			    		    new str11[400];
							PlayerInfo[playerid][SelectMenu] = TW_COUNTRY;
					        PlayerInfo[playerid][SelectMenuOption][0]= BRITISH;
					        PlayerInfo[playerid][SelectMenuOption][1]= USA;
					        PlayerInfo[playerid][SelectMenuOption][2]= RUSSIA;
					        PlayerInfo[playerid][SelectMenuOption][3]= GERMANY;
					        PlayerInfo[playerid][SelectMenuOption][4]= BALKAN;
					        PlayerInfo[playerid][SelectMenuOption][5]= JAPAN;
					        PlayerInfo[playerid][SelectMenuOption][6]= ITALY;
							strcat(str11, "\n{FFFFFF}Britain  {FFFFFF}({375FFF}ALLIES{FFFFFF}) (/br)  \n{33FF33}USA  {FFFFFF}({375FFF}ALLIES{FFFFFF}) (/usa)  \n{FFFF00}Soviet Union  {FFFFFF}({375FFF}ALLIES{FFFFFF}) (/sv)");
							strcat(str11, "\n{800080}Germany  {FFFFFF}({FF0000}AXIS{FFFFFF}) (/ger) \n{375FFF}Balkan Nations  {FFFFFF}({375FFF}ALLIES{FFFFFF}) (/bk)  \n{FF0000}Japan  {FFFFFF}({FF0000}AXIS{FFFFFF}) (/jap)  \n{FF9900}Italy  {FFFFFF}({FF0000}AXIS{FFFFFF}) (/ita)");
							ShowPlayerDialog(playerid, SELMENU, DIALOG_STYLE_LIST, "Country Selection Menu",str11, "Select", "Cancel");
				  			return GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~~r~TEAM IS FULL", 2000, 3);
  						}
	  				}else{
                        if(AxisCount() < AllyCount())
				  		{
				  			new str11[400];
							PlayerInfo[playerid][SelectMenu] = TW_COUNTRY;
					        PlayerInfo[playerid][SelectMenuOption][0]= BRITISH;
					        PlayerInfo[playerid][SelectMenuOption][1]= USA;
					        PlayerInfo[playerid][SelectMenuOption][2]= RUSSIA;
					        PlayerInfo[playerid][SelectMenuOption][3]= GERMANY;
					        PlayerInfo[playerid][SelectMenuOption][4]= BALKAN;
					        PlayerInfo[playerid][SelectMenuOption][5]= JAPAN;
					        PlayerInfo[playerid][SelectMenuOption][6]= ITALY;
							strcat(str11, "\n{FFFFFF}Britain  {FFFFFF}({375FFF}ALLIES{FFFFFF}) (/br)  \n{33FF33}USA  {FFFFFF}({375FFF}ALLIES{FFFFFF}) (/usa)  \n{FFFF00}Soviet Union  {FFFFFF}({375FFF}ALLIES{FFFFFF}) (/sv)");
							strcat(str11, "\n{800080}Germany  {FFFFFF}({FF0000}AXIS{FFFFFF}) (/ger) \n{375FFF}Balkan Nations  {FFFFFF}({375FFF}ALLIES{FFFFFF}) (/bk)  \n{FF0000}Japan  {FFFFFF}({FF0000}AXIS{FFFFFF}) (/jap)  \n{FF9900}Italy  {FFFFFF}({FF0000}AXIS{FFFFFF}) (/ita)");
							ShowPlayerDialog(playerid, SELMENU, DIALOG_STYLE_LIST, "Country Selection Menu",str11, "Select", "Cancel");
				  			return GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~~r~TEAM IS FULL", 2000, 3);
						}
					}
			  	}
				OtherDeathDisconnect(playerid,0,0);
				ResetWeapons(playerid);
	            PlayerInfo[playerid][MainMenu] = 1;
				SetPlayerMode(playerid, TW, false, false);
				ResetWeapons(playerid);
				TWPlayerInfo[playerid][Country] = PlayerInfo[playerid][SelectMenuOption][listitem];
				if(TWPlayerInfo[playerid][Country] == GERMANY || TWPlayerInfo[playerid][Country] == ITALY || TWPlayerInfo[playerid][Country] == JAPAN)
					PlayerInfo[playerid][pTeam] = AXIS;
				else PlayerInfo[playerid][pTeam] = ALLIES;
				DestroyAllPlayerTWBombs(playerid);
				A_SpawnPlayer(playerid);
				new str[128];
		        format(str,128,"{33FF33}WAR NEWS:{FFFFFF} %s(ID:%d) is fighting for %s!",PlayerInfo[playerid][Name],playerid,CountryNames[TWPlayerInfo[playerid][Country]]);
				SendMessageToMode(TW,white, str);
		        format(str, sizeof(str), "[WAR NEWS] %s[%d] is fighting for %s!", PlayerInfo[playerid][Name], playerid,CountryNames[TWPlayerInfo[playerid][Country]]);
				db_SaveChat(-1, TW,str);
				PlayerInfo[playerid][SelectMenu] = -1;
   				forLoop(i, SELECT_MENU_OPTIONS)PlayerInfo[playerid][SelectMenuOption][i] = -1;
				return 0;
			}
			if(PlayerInfo[playerid][SelectMenu] == THE_PTP)
			{
		    	if(ServerInfo[DebugMode] == 1)printf("DIALOG: 5.9a2.1 s");
			    if(PTPPlayerInfo[playerid][Class] == PlayerInfo[playerid][SelectMenuOption][listitem] && PlayerInfo[playerid][PlayerMode] == PTP)
			    {
			    	PlayerInfo[playerid][SelectMenu] = THE_PTP;
			        PlayerInfo[playerid][SelectMenuOption][0]= PRESIDENT;
			        PlayerInfo[playerid][SelectMenuOption][1]= VICE;
			        PlayerInfo[playerid][SelectMenuOption][2]= SECURITY;
			        PlayerInfo[playerid][SelectMenuOption][3]= POLICE;
			        PlayerInfo[playerid][SelectMenuOption][4]= TERRORIST;
			        PlayerInfo[playerid][SelectMenuOption][5]= CIVILIAN;
					ShowPlayerDialog(playerid, SELMENU, DIALOG_STYLE_LIST, "Protect the President Menu","\n{FFFF00}President\nVice President\n{33FF33}Security\n{375FFF}Police\n{FF0000}Terrorist\n{FF9900}Civilian", "Select", "Cancel");
					return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You already are in this class.");
				}
		    	
		    	if(PlayerInfo[playerid][SelectMenuOption][listitem] == PRESIDENT)
				{
					if (ClassCountPTP(PRESIDENT) > 0 || PTPPlayerInfo[playerid][AlreadyLeader] > 0)
					{
		  				PlayerInfo[playerid][SelectMenu] = THE_PTP;
				        PlayerInfo[playerid][SelectMenuOption][0]= PRESIDENT;
				        PlayerInfo[playerid][SelectMenuOption][1]= VICE;
				        PlayerInfo[playerid][SelectMenuOption][2]= SECURITY;
				        PlayerInfo[playerid][SelectMenuOption][3]= POLICE;
				        PlayerInfo[playerid][SelectMenuOption][4]= TERRORIST;
				        PlayerInfo[playerid][SelectMenuOption][5]= CIVILIAN;
						ShowPlayerDialog(playerid, SELMENU, DIALOG_STYLE_LIST, "Protect the President Menu","\n{FFFF00}President\nVice President\n{33FF33}Security\n{375FFF}Police\n{FF0000}Terrorist\n{FF9900}Civilian", "Select", "Cancel");
						return GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~w~CLASS IS UNAVAILABLE", 2000, 3);
					}
				}
		    	if(PlayerInfo[playerid][SelectMenuOption][listitem] == VICE)
				{
					if (ClassCountPTP(VICE) > 0 || PTPPlayerInfo[playerid][AlreadyLeader] > 0)
					{
		  				PlayerInfo[playerid][SelectMenu] = THE_PTP;
				        PlayerInfo[playerid][SelectMenuOption][0]= PRESIDENT;
				        PlayerInfo[playerid][SelectMenuOption][1]= VICE;
				        PlayerInfo[playerid][SelectMenuOption][2]= SECURITY;
				        PlayerInfo[playerid][SelectMenuOption][3]= POLICE;
				        PlayerInfo[playerid][SelectMenuOption][4]= TERRORIST;
				        PlayerInfo[playerid][SelectMenuOption][5]= CIVILIAN;
						ShowPlayerDialog(playerid, SELMENU, DIALOG_STYLE_LIST, "Protect the President Menu","\n{FFFF00}President\nVice President\n{33FF33}Security\n{375FFF}Police\n{FF0000}Terrorist\n{FF9900}Civilian", "Select", "Cancel");
						return GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~w~CLASS IS UNAVAILABLE", 2000, 3);
					}
				}
				if(PlayerInfo[playerid][VIP] == 0)
			    {
			    	if(PlayerInfo[playerid][SelectMenuOption][listitem] == SECURITY)
					{
						if (ClassCountPTP(SECURITY) > 8 || TeamCountPTP(BAD) < TeamCountPTP(GOOD))
						{
			  				PlayerInfo[playerid][SelectMenu] = THE_PTP;
					        PlayerInfo[playerid][SelectMenuOption][0]= PRESIDENT;
					        PlayerInfo[playerid][SelectMenuOption][1]= VICE;
					        PlayerInfo[playerid][SelectMenuOption][2]= SECURITY;
					        PlayerInfo[playerid][SelectMenuOption][3]= POLICE;
					        PlayerInfo[playerid][SelectMenuOption][4]= TERRORIST;
					        PlayerInfo[playerid][SelectMenuOption][5]= CIVILIAN;
							ShowPlayerDialog(playerid, SELMENU, DIALOG_STYLE_LIST, "Protect the President Menu","\n{FFFF00}President\nVice President\n{33FF33}Security\n{375FFF}Police\n{FF0000}Terrorist\n{FF9900}Civilian", "Select", "Cancel");
							return GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~w~CLASS IS UNAVAILABLE", 2000, 3);
						}
					}
					if(PlayerInfo[playerid][SelectMenuOption][listitem] == TERRORIST)
					{
						if (TeamCountPTP(BAD) > TeamCountPTP(GOOD))
						{
			  				PlayerInfo[playerid][SelectMenu] = THE_PTP;
					        PlayerInfo[playerid][SelectMenuOption][0]= PRESIDENT;
					        PlayerInfo[playerid][SelectMenuOption][1]= VICE;
					        PlayerInfo[playerid][SelectMenuOption][2]= SECURITY;
					        PlayerInfo[playerid][SelectMenuOption][3]= POLICE;
					        PlayerInfo[playerid][SelectMenuOption][4]= TERRORIST;
					        PlayerInfo[playerid][SelectMenuOption][5]= CIVILIAN;
							ShowPlayerDialog(playerid, SELMENU, DIALOG_STYLE_LIST, "Protect the President Menu","\n{FFFF00}President\nVice President\n{33FF33}Security\n{375FFF}Police\n{FF0000}Terrorist\n{FF9900}Civilian", "Select", "Cancel");
							return GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~w~TEAM IS FULL", 2000, 3);
						}
					}
					if(PlayerInfo[playerid][SelectMenuOption][listitem] == POLICE)
					{
						if (TeamCountPTP(BAD) < TeamCountPTP(GOOD))
						{
			  				PlayerInfo[playerid][SelectMenu] = THE_PTP;
					        PlayerInfo[playerid][SelectMenuOption][0]= PRESIDENT;
					        PlayerInfo[playerid][SelectMenuOption][1]= VICE;
					        PlayerInfo[playerid][SelectMenuOption][2]= SECURITY;
					        PlayerInfo[playerid][SelectMenuOption][3]= POLICE;
					        PlayerInfo[playerid][SelectMenuOption][4]= TERRORIST;
					        PlayerInfo[playerid][SelectMenuOption][5]= CIVILIAN;
							ShowPlayerDialog(playerid, SELMENU, DIALOG_STYLE_LIST, "Protect the President Menu","\n{FFFF00}President\nVice President\n{33FF33}Security\n{375FFF}Police\n{FF0000}Terrorist\n{FF9900}Civilian", "Select", "Cancel");
							return GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~w~TEAM IS FULL", 2000, 3);
						}
					}
				}
		    	if(ServerInfo[DebugMode] == 1)printf("DIALOG: 5.9a2.1 e");
				OtherDeathDisconnect(playerid,0,0);
				ResetWeapons(playerid);
				SetPlayerMode(playerid, PTP, false, false);
				PlayerInfo[playerid][PlayerOptionSelected] = 1;
	            if(PlayerInfo[playerid][MainMenu] == 0)
	            {
	                PlayerInfo[playerid][MainMenu] = 1;
	                CancelSelectTextDraw(playerid);
	                HideMMTexts(playerid);
	            }
				ResetWeapons(playerid);
				PTPPlayerInfo[playerid][Class] = PlayerInfo[playerid][SelectMenuOption][listitem];
				A_SpawnPlayer(playerid);
				new str[128];
				format(str,128,"{33FF33}NEWS:{FFFFFF} %s(ID:%d) joined PTP as a %s!",PlayerInfo[playerid][Name],playerid,TeamNamesPTP[PTPPlayerInfo[playerid][Class]]);
				SendMessageToMode(PTP,white, str);
		        format(str, sizeof(str), "[NEWS] %s[%d] joined PTP as a %s!",PlayerInfo[playerid][Name],playerid,TeamNamesPTP[PTPPlayerInfo[playerid][Class]]);
				db_SaveChat(-1, PTP,str);

		        PlayerInfo[playerid][SelectMenu] = -1;
   				forLoop(i, SELECT_MENU_OPTIONS)PlayerInfo[playerid][SelectMenuOption][i] = -1;
				return 0;
			}
			if(PlayerInfo[playerid][SelectMenu] == THE_CO)
			{
		    	if(ServerInfo[DebugMode] == 1)printf("DIALOG: 5.9b2.1 s");
			    if(PlayerInfo[playerid][pTeam] == PlayerInfo[playerid][SelectMenuOption][listitem] && PlayerInfo[playerid][PlayerMode] == CO)
			    {
			    	PlayerInfo[playerid][SelectMenu] = THE_CO;
			        PlayerInfo[playerid][SelectMenuOption][0]= COP;
			        PlayerInfo[playerid][SelectMenuOption][1]= CRIMINAL;
					ShowPlayerDialog(playerid, SELMENU, DIALOG_STYLE_LIST, "The Coppers Menu","\n{375FFF}Policeman\n{FF0000}Criminal", "Select", "Cancel");
					return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You already are in this team.");
				}
			  	if(PlayerInfo[playerid][VIP] == 0)
			    {
			        if(PlayerInfo[playerid][SelectMenuOption][listitem] == CRIMINAL)
			        {
			    		if(CriminalCountCO() > CopCountCO())
				  		{
			    		    PlayerInfo[playerid][SelectMenu] = THE_CO;
					        PlayerInfo[playerid][SelectMenuOption][0]= COP;
					        PlayerInfo[playerid][SelectMenuOption][1]= CRIMINAL;
							ShowPlayerDialog(playerid, SELMENU, DIALOG_STYLE_LIST, "The Coppers Menu","\n{375FFF}Policeman\n{FF0000}Criminal", "Select", "Cancel");
							return GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~~r~TEAM IS FULL", 2000, 3);
						}
	  				}else{
                        if(CriminalCountCO() < CopCountCO())
				  		{
			    		    PlayerInfo[playerid][SelectMenu] = THE_CO;
					        PlayerInfo[playerid][SelectMenuOption][0]= COP;
					        PlayerInfo[playerid][SelectMenuOption][1]= CRIMINAL;
							ShowPlayerDialog(playerid, SELMENU, DIALOG_STYLE_LIST, "The Coppers Menu","\n{375FFF}Policeman\n{FF0000}Criminal", "Select", "Cancel");
							return GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~~r~TEAM IS FULL", 2000, 3);
						}
					}
			  	}
		    	if(ServerInfo[DebugMode] == 1)printf("DIALOG: 5.9b2.1 e");
				OtherDeathDisconnect(playerid,0,0);
				ResetWeapons(playerid);
				SetPlayerMode(playerid, CO, false, false);
				PlayerInfo[playerid][PlayerOptionSelected] = 1;
	            if(PlayerInfo[playerid][MainMenu] == 0)
	            {
	                PlayerInfo[playerid][MainMenu] = 1;
	                CancelSelectTextDraw(playerid);
	                HideMMTexts(playerid);
	            }
				ResetWeapons(playerid);
				PlayerInfo[playerid][pTeam] = PlayerInfo[playerid][SelectMenuOption][listitem];
				A_SpawnPlayer(playerid);
				new str[128];
				format(str,128,"{33FF33}NEWS:{FFFFFF} %s(ID:%d) joined the %s side!",PlayerInfo[playerid][Name],playerid,TeamNamesCO[PlayerInfo[playerid][pTeam]]);
				SendMessageToMode(CO,white, str);
		        format(str, sizeof(str), "[NEWS] %s[%d] joined the %s side!",PlayerInfo[playerid][Name],playerid,TeamNamesCO[PlayerInfo[playerid][pTeam]]);
				db_SaveChat(-1, CO,str);

		        PlayerInfo[playerid][SelectMenu] = -1;
   				forLoop(i, SELECT_MENU_OPTIONS)PlayerInfo[playerid][SelectMenuOption][i] = -1;
				return 0;
			}

			if(PlayerInfo[playerid][SelectMenu] == THE_CTF)
			{
			    if(PlayerInfo[playerid][pTeam] == PlayerInfo[playerid][SelectMenuOption][listitem] && PlayerInfo[playerid][PlayerMode] == CTF)
			    {
			    	PlayerInfo[playerid][SelectMenu] = THE_CTF;
			        PlayerInfo[playerid][SelectMenuOption][0]= BLUE;
			        PlayerInfo[playerid][SelectMenuOption][1]= RED;
					ShowPlayerDialog(playerid, SELMENU, DIALOG_STYLE_LIST, "Capture the Flag Menu","\n{375FFF}Blue Team{FFFFFF} (/blue)  \n{FF0000}Red Team{FFFFFF} (/red) ", "Select", "Cancel");
					return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You already are in this team.");
				}
			  	if(PlayerInfo[playerid][VIP] == 0)
			    {
			        if(PlayerInfo[playerid][SelectMenuOption][listitem] == RED)
			        {
			    		if(RedCountCTF() > BlueCountCTF())
				  		{
			    		    PlayerInfo[playerid][SelectMenu] = THE_CTF;
					        PlayerInfo[playerid][SelectMenuOption][0]= BLUE;
					        PlayerInfo[playerid][SelectMenuOption][1]= RED;
							ShowPlayerDialog(playerid, SELMENU, DIALOG_STYLE_LIST, "Capture the Flag Menu","\n{375FFF}Blue Team{FFFFFF} (/blue)  \n{FF0000}Red Team{FFFFFF} (/red) ", "Select", "Cancel");
							return GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~~r~TEAM IS FULL", 2000, 3);
						}
	  				}else{
                        if(RedCountCTF() < BlueCountCTF())
				  		{
			    		    PlayerInfo[playerid][SelectMenu] = THE_CTF;
					        PlayerInfo[playerid][SelectMenuOption][0]= BLUE;
					        PlayerInfo[playerid][SelectMenuOption][1]= RED;
							ShowPlayerDialog(playerid, SELMENU, DIALOG_STYLE_LIST, "Capture the Flag Menu","\n{375FFF}Blue Team{FFFFFF} (/blue)  \n{FF0000}Red Team{FFFFFF} (/red) ", "Select", "Cancel");
							return GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~~r~TEAM IS FULL", 2000, 3);
						}
					}
			  	}
				OtherDeathDisconnect(playerid,0,0);
				ResetWeapons(playerid);
				SetPlayerMode(playerid, CTF, false, false);
				PlayerInfo[playerid][PlayerOptionSelected] = 1;
	            if(PlayerInfo[playerid][MainMenu] == 0)
	            {
	                PlayerInfo[playerid][MainMenu] = 1;
	                CancelSelectTextDraw(playerid);
	                HideMMTexts(playerid);
	            }
				ResetWeapons(playerid);
				PlayerInfo[playerid][pTeam] = PlayerInfo[playerid][SelectMenuOption][listitem];
				A_SpawnPlayer(playerid);
				new str[128];
				format(str,128,"{33FF33}NEWS:{FFFFFF} %s(ID:%d) joined the %s side!",PlayerInfo[playerid][Name],playerid,TeamNamesCTF[PlayerInfo[playerid][pTeam]]);
				SendMessageToMode(CTF,white, str);
		        format(str, sizeof(str), "[NEWS] %s[%d] joined the %s side!",PlayerInfo[playerid][Name],playerid,TeamNamesCTF[PlayerInfo[playerid][pTeam]]);
				db_SaveChat(-1, CTF,str);

		        PlayerInfo[playerid][SelectMenu] = -1;
   				forLoop(i, SELECT_MENU_OPTIONS)PlayerInfo[playerid][SelectMenuOption][i] = -1;
				return 0;
			}

		    if(PlayerInfo[playerid][SelectMenu] == THE_CASH_RP)
			{
			    if(PlayerInfo[playerid][PlayerMode] != TRP)return 0;
			    new player = PlayerInfo[playerid][SelectMenuOption][listitem],
						amount = PlayerInfo[playerid][SelectMenuOption][3];
                new pstring[(RP_MAX_NAME_LEN*6)+12];
			    if(!(IsPlayerConnected(player) && !IsPlayerNPC(player) && PlayerInfo[player][PlayerMode] == TRP &&
					PlayerInfo[player][Spawned] == 1 && GetDistanceBetweenPlayers(playerid, player) < 5))
				{
				    new pstr[(RP_MAX_NAME_LEN*2)+3];
					forLoop(i,3)
					{
					    player = PlayerInfo[playerid][SelectMenuOption][i];
					    if(player == -1)continue;
						format(pstr,sizeof pstr,"\n%s %s",RPPlayerInfo[player][rpfName],RPPlayerInfo[player][rplName]);
						strcat(pstring,pstr);
					}
        			ShowPlayerDialog(playerid, SELMENU, DIALOG_STYLE_LIST, "RP Give Money",pstring, "Select", "Cancel");
					SendClientMessage(playerid,red1,"Error:{FFFFFF} Player isn't around you.");
					return 0;
				}
				GiveThePlayerMoney(playerid, -amount);
				GiveThePlayerMoney(player, amount);
				format(pstring, sizeof(pstring), "Notice:{FFFFFF} %s %s has given you {33FF33}$%d.", RPPlayerInfo[playerid][rpfName],RPPlayerInfo[playerid][rplName],amount);
				SendClientMessage(player,green1,pstring);
				format(pstring, sizeof(pstring), "Notice:{FFFFFF} You gave %s %s {33FF33}$%d.", RPPlayerInfo[player][rpfName],RPPlayerInfo[player][rplName],amount);
				SendClientMessage(playerid,green1,pstring);
		        PlayerInfo[playerid][SelectMenu] = -1;
   				forLoop(i, SELECT_MENU_OPTIONS)PlayerInfo[playerid][SelectMenuOption][i] = -1;
				return 0;
			}
      		if(PlayerInfo[playerid][SelectMenu] == THE_G_BAG_RP)
			{
			    if(listitem == 0)
			    {
					new i = PlayerInfo[playerid][SelectMenuOption][SELECT_MENU_OPTIONS-1];
					PlayerInfo[playerid][SelectMenu] = -1;
					forLoop(a, SELECT_MENU_OPTIONS)PlayerInfo[playerid][SelectMenuOption][a] = -1;
					if(i < 0 || i >= RP_MAX_BAGS)return 0;
					if(RPBags[i][Exists] == 0)return GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~r~BAG HAS BEEN TAKEN", 3000, 3);
					RPPickUpBag(playerid, i);
					GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~w~BAG PICKED UP", 3000, 3);
			    }
			    else
			    {
				    if(!RPGetBackPackItems(playerid))return 0;
					new i = PlayerInfo[playerid][SelectMenuOption][SELECT_MENU_OPTIONS-1],
						id = PlayerInfo[playerid][SelectMenuOption][listitem];
					playerRPPickUpItem(playerid, i, id, RP_ITEM_FROM_BAG);
					GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~w~ITEM PICKED UP", 3000, 3);
        			getRPGroundBagItems(playerid, i);
				}
				return 0;
			}
		    if(PlayerInfo[playerid][SelectMenu] == THE_V_BAG_RP)
			{
			    if(!RPGetBackPackItems(playerid))return 0;
				new i = PlayerInfo[playerid][SelectMenuOption][SELECT_MENU_OPTIONS-1],
					id = PlayerInfo[playerid][SelectMenuOption][listitem];

				playerRPPickUpItem(playerid, i, id, RP_ITEM_FROM_VEH);
				GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~w~ITEM PICKED UP", 3000, 3);
				if(!getRPVehicleItems(playerid, i))
				{
				    PlayerInfo[playerid][SelectMenu] = -1;
   					forLoop(u, SELECT_MENU_OPTIONS)PlayerInfo[playerid][SelectMenuOption][u] = -1;
				    return GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~r~VEHICLE IS EMPTY", 2000, 3);
				}
				return 0;
			}
		    if(PlayerInfo[playerid][SelectMenu] == THE_BAG_RP)
			{
		    	if(PlayerInfo[playerid][SelectMenuOption][SELECT_MENU_OPTIONS-1] == 1)
		    	{
			    	if(listitem == 0)
				    {
						if(RPPlayerInfo[playerid][SelectedItem] == -1)
					    {
						    new slot = GetWeaponSlot(GetPlayerWeapon(playerid));
						    if(GetPlayerWeapon(playerid) != 0 && GetPlayerWeapon(playerid) == RPPlayerInfo[playerid][selWeap][slot])
						    {
								RemovePlayerWeapon(playerid, GetPlayerWeapon(playerid));
								RPPlayerInfo[playerid][selWeap][slot] = -1;
								RPPlayerInfo[playerid][selWeapID][slot] = -1;
						    }
						}

						RPPlayerInfo[playerid][SelectedItem] = -1;
						PlayerTextDrawSetString(playerid,RPPlayerInfo[playerid][selItem], " ");
						RemovePlayerAttachedObjectEx(playerid, RP_ATTACHMENT_INDEX);
						SetPlayerArmedWeapon(playerid, 0);
				    }
				    else if(listitem == 1)
				    {
				        if(IsPlayerInAnyVehicle(playerid) && RPGetVehicleID(GetPlayerVehicleID(playerid)) == -1)
				        	return GameTextForPlayer(playerid, "~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~r~ERROR - NOT RP VEH", 3000, 3);

						if(!(!IsPlayerSwimming(playerid) && !IsPlayerFalling(playerid) && RPIsPlayerNormalState(playerid)))
							return GameTextForPlayer(playerid, "~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~r~ERROR - NOT VALID STATE", 3000, 3);

         				new id, passed = 0;
			    	    if(RPPlayerInfo[playerid][SelectedItem] != -1)
			    	    {
						    id = RPPlayerInfo[playerid][SelectedItem];
				            if(id == -1 || id >= RP_MAX_BAG_ITEMS) return 0;
			        		new mid = GetItemInfoID(RPPlayerInfo[playerid][BagItems][id]);
			        		if(RPItemInfo[mid][Type] == WEAPON) return 0;
						}
						else
						{
						    new slot = GetWeaponSlot(GetPlayerWeapon(playerid));
						    if(GetPlayerWeapon(playerid) != 0 && GetPlayerWeapon(playerid) == RPPlayerInfo[playerid][selWeap][slot])
						    {
						        id = RPPlayerInfo[playerid][selWeapID][slot];
								RemovePlayerWeapon(playerid, GetPlayerWeapon(playerid));
								RPPlayerInfo[playerid][selWeap][slot] = -1;
								RPPlayerInfo[playerid][selWeapID][slot] = -1;
						    }
							else return 0;
						}
			    		if(!IsPlayerInAnyVehicle(playerid))
			    		{
			    		    //if(RPGetCloseItems(playerid, 2) < 3)
			    		    //{
						    new Float:x, Float:y, Float:z;
							GetXYInFrontOfPlayer(playerid, x, y, z, 0.7);
							RPCreateItem(RPPlayerInfo[playerid][BagItems][id], RPPlayerInfo[playerid][BagItemsValue][id], x, y, z-1.0,GetPlayerVirtualWorld(playerid),GetPlayerInterior(playerid));
							GameTextForPlayer(playerid, "~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~w~ITEM DROPPED ON GROUND", 3000, 3);
							RPPlayerInfo[playerid][BagItems][id] = 0;
							RPPlayerInfo[playerid][BagItemsValue][id] = 0;
							passed = 1;
							//}else GameTextForPlayer(playerid, "~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~r~Can't drop here", 3000, 3);
						}
						else
						{
						    if(RPGetVehicleID(GetPlayerVehicleID(playerid)) != -1)
						    {
								new i = RPGetVehicleID(GetPlayerVehicleID(playerid));
						        if(!RPGetVehicleItems(playerid, i))return 0;
						        playerRPPlaceItemInVehicle(playerid, id, i);
								passed = 1;
								GameTextForPlayer(playerid, "~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~w~ITEM DROPPED IN VEHICLE", 3000, 3);
							}else GameTextForPlayer(playerid, "~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~r~ERROR - NOT RP VEH", 3000, 3);
						}
						if(passed == 1)
						{
							RPPlayerInfo[playerid][SelectedItem] = -1;
							PlayerTextDrawSetString(playerid,RPPlayerInfo[playerid][selItem], " ");
							RemovePlayerAttachedObjectEx(playerid, RP_ATTACHMENT_INDEX);
							SetPlayerArmedWeapon(playerid, 0);
							if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
						  		ApplyAnimation(playerid,"PED","CAR_GETIN_RHS",4.1,0,0,0,0,1,1);
		  				}
				    }
				    else
				    {
	           			new oid = PlayerInfo[playerid][SelectMenuOption][listitem];
				        new mid = GetItemInfoID(RPPlayerInfo[playerid][BagItems][oid]);

						//if(IsPlayerInAnyVehicle(playerid) && (RPItemInfo[mid][Type] == GAS_CAN || RPItemInfo[mid][Type] == VEH_REPAIR))
			    		//	return GameTextForPlayer(playerid, "~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~r~CAN'T IN VEHICLE", 3000, 3);
						if(RPItemInfo[mid][Type] == WEAPON && RPPlayerInfo[playerid][BagItemsValue][oid] == 0)
						{
							GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~w~No AMMO", 3000, 3);
							return 0;
						}
		    			if(RPItemInfo[mid][Type] == WEAPON && IsPlayerInAnyVehicle(playerid))
						{
						    SendClientMessage(playerid, red1, "WARNING:{FFFFFF} To avoid bugs, you must exit vehicle to switch weapons.");
							return 0;
						}
						if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
						{
						    SetPlayerArmedWeapon(playerid, 0);
				            ApplyAnimation(playerid,"PED","CAR_GETIN_RHS",4.1,0,0,0,0,1,1);
						}
						RemovePlayerAttachedObjectEx(playerid, RP_ATTACHMENT_INDEX);

						if(RPItemInfo[mid][Type] != WEAPON)
				    	{
				    	    new id = GetItemAttachInfoID(RPItemInfo[mid][Type]);
							SetPlayerAttachedObjectEx(playerid, RP_ATTACHMENT_INDEX, RPItemAttachInfo[id][Model], RPItemAttachInfo[id][Bone],
								RPItemAttachInfo[id][pOX], RPItemAttachInfo[id][pOY], RPItemAttachInfo[id][pOZ],
								RPItemAttachInfo[id][pRX], RPItemAttachInfo[id][pRY], RPItemAttachInfo[id][pRZ],
								RPItemAttachInfo[id][pSX], RPItemAttachInfo[id][pSY], RPItemAttachInfo[id][pSZ]);
						}
		                RPPlayerInfo[playerid][SelectedItem] = oid;
						updateSelItem(playerid, mid, oid);
		                if(RPItemInfo[mid][Type] == WEAPON)
				    	{
				    	    new type = GetWeaponTypeFromID(RPItemInfo[mid][ID]), weap, ammo;
				    	    forLoop(slot, 14)
							{
							    GetPlayerWeaponData(playerid, slot, weap, ammo);
								if(GetWeaponTypeFromID(weap) == type)
								{
									RemovePlayerWeapon(playerid, weap);
								}
							}
							new slot = GetWeaponSlot(RPItemInfo[mid][ID]);
							RPPlayerInfo[playerid][selWeap][slot] = RPItemInfo[mid][ID];
							RPPlayerInfo[playerid][selWeapID][slot] = RPPlayerInfo[playerid][SelectedItem];
							RPPlayerInfo[playerid][SelectedItem] = -1;
				    	    GiveWeapon(playerid,RPItemInfo[mid][ID], RPPlayerInfo[playerid][BagItemsValue][oid]);
				    	}
				    	else
				    	{
				    	    ResetWeapons(playerid);
    						forLoop(a, 14)RPPlayerInfo[playerid][selWeap][a] = -1;
				    	}
				        PlayerInfo[playerid][SelectMenu] = -1;
		   				forLoop(i, SELECT_MENU_OPTIONS)PlayerInfo[playerid][SelectMenuOption][i] = -1;
	   				}
   				}
   				else
   				{
   				    new oid = PlayerInfo[playerid][SelectMenuOption][listitem];
			        new mid = GetItemInfoID(RPPlayerInfo[playerid][BagItems][oid]);

					//if(IsPlayerInAnyVehicle(playerid) && (RPItemInfo[mid][Type] == GAS_CAN || RPItemInfo[mid][Type] == VEH_REPAIR))
		    		//	return GameTextForPlayer(playerid, "~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~r~CAN'T IN VEHICLE", 3000, 3);
					if(RPItemInfo[mid][Type] == WEAPON && RPPlayerInfo[playerid][BagItemsValue][oid] == 0)
					{
						GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~w~No AMMO", 3000, 3);
						return 0;
					}
	    			if(RPItemInfo[mid][Type] == WEAPON && IsPlayerInAnyVehicle(playerid))
					{
					    SendClientMessage(playerid, red1, "WARNING:{FFFFFF} To avoid bugs, you must exit vehicle to switch weapons.");
						return 0;
					}
					if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
					{
					    SetPlayerArmedWeapon(playerid, 0);
			            ApplyAnimation(playerid,"PED","CAR_GETIN_RHS",4.1,0,0,0,0,1,1);
					}
					RemovePlayerAttachedObjectEx(playerid, RP_ATTACHMENT_INDEX);

					if(RPItemInfo[mid][Type] != WEAPON)
			    	{
			    	    new id = GetItemAttachInfoID(RPItemInfo[mid][Type]);
						SetPlayerAttachedObjectEx(playerid, RP_ATTACHMENT_INDEX, RPItemAttachInfo[id][Model], RPItemAttachInfo[id][Bone],
							RPItemAttachInfo[id][pOX], RPItemAttachInfo[id][pOY], RPItemAttachInfo[id][pOZ],
							RPItemAttachInfo[id][pRX], RPItemAttachInfo[id][pRY], RPItemAttachInfo[id][pRZ],
							RPItemAttachInfo[id][pSX], RPItemAttachInfo[id][pSY], RPItemAttachInfo[id][pSZ]);
					}
	                RPPlayerInfo[playerid][SelectedItem] = oid;
					updateSelItem(playerid, mid, oid);
	                if(RPItemInfo[mid][Type] == WEAPON)
			    	{
			    	    new type = GetWeaponTypeFromID(RPItemInfo[mid][ID]), weap, ammo;
			    	    forLoop(slot, 14)
						{
						    GetPlayerWeaponData(playerid, slot, weap, ammo);
							if(GetWeaponTypeFromID(weap) == type)
							{
								RemovePlayerWeapon(playerid, weap);
							}
						}
						new slot = GetWeaponSlot(RPItemInfo[mid][ID]);
						RPPlayerInfo[playerid][selWeap][slot] = RPItemInfo[mid][ID];
						RPPlayerInfo[playerid][selWeapID][slot] = RPPlayerInfo[playerid][SelectedItem];
						RPPlayerInfo[playerid][SelectedItem] = -1;
			    	    GiveWeapon(playerid,RPItemInfo[mid][ID], RPPlayerInfo[playerid][BagItemsValue][oid]);
			    	}
			        PlayerInfo[playerid][SelectMenu] = -1;
	   				forLoop(i, SELECT_MENU_OPTIONS)PlayerInfo[playerid][SelectMenuOption][i] = -1;
   				}
   				return 0;
			}

		    if(PlayerInfo[playerid][SelectMenu] == THE_N_ITEMS_RP)
			{
			    if(!RPGetBackPackItems(playerid))return 0;
				new id = PlayerInfo[playerid][SelectMenuOption][listitem];
				playerRPPickUpItem(playerid, id, -1, RP_ITEM_FROM_GROUND);
				GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~w~ITEM PICKED UP", 3000, 3);
				if(!getRPCloseItems(playerid, 4.0))
				{
				    PlayerInfo[playerid][SelectMenu] = -1;
   					forLoop(u, SELECT_MENU_OPTIONS)PlayerInfo[playerid][SelectMenuOption][u] = -1;
				    return GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~r~NO ITEMS NEAR", 2000, 3);
				}
				return 0;
			}

		    if(PlayerInfo[playerid][SelectMenu] == THE_N_BAGS_RP)
			{
			    if(!RPGetBackPackItems(playerid))return 0;
				new i = PlayerInfo[playerid][SelectMenuOption][listitem];
				forLoop(u, SELECT_MENU_OPTIONS)PlayerInfo[playerid][SelectMenuOption][u] = -1;
			    PlayerInfo[playerid][SelectMenuOption][SELECT_MENU_OPTIONS-1] = i;
			    getRPGroundBagItems(playerid, i);
				return 0;
			}

			if(PlayerInfo[playerid][SelectMenu] == THE_TL)
			{
			    if(PlayerInfo[playerid][pTeam] == PlayerInfo[playerid][SelectMenuOption][listitem] && PlayerInfo[playerid][PlayerMode] == TL)
			    {
			    	PlayerInfo[playerid][SelectMenu] = THE_TL;
			        PlayerInfo[playerid][SelectMenuOption][0]= ALLIES;
			        PlayerInfo[playerid][SelectMenuOption][1]= AXIS;
					ShowPlayerDialog(playerid, SELMENU, DIALOG_STYLE_LIST, "WW2 Timeline Menu","\n{375FFF}Allies{FFFFFF} (/allies)  \n{FF0000}Axis{FFFFFF} (/axis) ", "Select", "Cancel");
					return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You already are in this team.");
				}
			  	if(PlayerInfo[playerid][VIP] == 0)
			    {
			        if(PlayerInfo[playerid][SelectMenuOption][listitem] == AXIS)
			        {
			    		if(AxisCountTL() > AllyCountTL())
				  		{
			    		    PlayerInfo[playerid][SelectMenu] = THE_TL;
					        PlayerInfo[playerid][SelectMenuOption][0]= ALLIES;
					        PlayerInfo[playerid][SelectMenuOption][1]= AXIS;
							ShowPlayerDialog(playerid, SELMENU, DIALOG_STYLE_LIST, "WW2 Timeline Menu","\n{375FFF}Allies{FFFFFF} (/allies)  \n{FF0000}Axis{FFFFFF} (/axis) ", "Select", "Cancel");
							return GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~~r~TEAM IS FULL", 2000, 3);
						}
	  				}else{
                        if(AxisCountTL() < AllyCountTL())
				  		{
			    		    PlayerInfo[playerid][SelectMenu] = THE_TL;
					        PlayerInfo[playerid][SelectMenuOption][0]= ALLIES;
					        PlayerInfo[playerid][SelectMenuOption][1]= AXIS;
							ShowPlayerDialog(playerid, SELMENU, DIALOG_STYLE_LIST, "WW2 Timeline Menu","\n{375FFF}Allies{FFFFFF} (/allies)  \n{FF0000}Axis{FFFFFF} (/axis) ", "Select", "Cancel");
							return GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~~r~TEAM IS FULL", 2000, 3);
						}
					}
			  	}
	            if(PlayerInfo[playerid][MainMenu] == 0)
	            {
	                PlayerInfo[playerid][MainMenu] = 1;
	                CancelSelectTextDraw(playerid);
	                HideMMTexts(playerid);
	            }
				OtherDeathDisconnect(playerid,0,0);
				ResetWeapons(playerid);
				SetPlayerMode(playerid, TL, false, false);
				PlayerInfo[playerid][pTeam] = PlayerInfo[playerid][SelectMenuOption][listitem];
				PlayerInfo[playerid][PlayerOptionSelected] = 1;
				ResetWeapons(playerid);
				A_SpawnPlayer(playerid);

		        new str[128];
				format(str,128,"{33FF33}WAR NEWS:{FFFFFF} %s(ID:%d) is fighting for the %s!",PlayerInfo[playerid][Name],playerid,PowerNames[PlayerInfo[playerid][pTeam]]);
				SendMessageToMode(TL,white, str);
		        format(str, sizeof(str), "[WAR NEWS] %s[%d] is fighting for the %s!",PlayerInfo[playerid][Name],playerid,PowerNames[PlayerInfo[playerid][pTeam]]);
				db_SaveChat(-1, TL,str);

		        PlayerInfo[playerid][SelectMenu] = -1;
   				forLoop(i, SELECT_MENU_OPTIONS)PlayerInfo[playerid][SelectMenuOption][i] = -1;
				return 0;
			}

		    if(PlayerInfo[playerid][SelectMenu] == THE_STATS_MODE_MENU)
		    {
		        ShowPlayerStats(playerid, PlayerInfo[playerid][SelectMenuOption][SELECT_MENU_OPTIONS-1], -1);
		    	return 0;
			}
			if(PlayerInfo[playerid][SelectMenu] == THE_STATS_SELECT_MENU)
			{
				ShowPlayerStats(playerid, PlayerInfo[playerid][SelectMenuOption][SELECT_MENU_OPTIONS-1], PlayerInfo[playerid][SelectMenuOption][listitem]);
				return 0;
			}
        }
        return 1;
    }

	if(dialogid == CMDS_NEXT)
	{
	    if(response)
        {
            new string2[790];
            strcat(string2,"\n>>Server:");
			strcat(string2,"\n/tut- Tutorial of modes");
			strcat(string2,"\n/rules-The server rules");
			strcat(string2,"\n/info-Server info such as website and UCP");
			strcat(string2,"\n/cm-Shows how to change server mode.");
			strcat(string2,"\n/lobby-Go to lobby");
			strcat(string2,"\n>>Players&Gameplay:");
			strcat(string2,"\n/getid-Search for a player's id.");
			strcat(string2,"\n/sound-Change sound settings.");
			strcat(string2,"\n/beforefilming-Hides big textdraws for filming.");
			strcat(string2,"\n/report-Report a rule breaker to an admin.");
			strcat(string2,"\n/pm-Send a personal message.");
			strcat(string2,"\n/(un)blockpms-Block/unblock incoming personal messages.");
			strcat(string2,"\n/sync-Sync player if bugged.");
			strcat(string2,"\n/anims-List of animations.");
			strcat(string2,"\n/fstyle-Change your fight style.");
			strcat(string2,"\n/carcolor-Change your vehicle's color.");
			strcat(string2,"\n>>Player account:");
			strcat(string2,"\n/stats-See your stats or anyone else's.");
			strcat(string2,"\n/changepass-Change your account's password.");
			strcat(string2,"\n/viphelp-Find out more about VIP.");
			if(PlayerInfo[playerid][VIP] == 1)strcat(string2,"\n/vipcmds-VIP commands");
			if(PlayerInfo[playerid][Level] >= 1)strcat(string2,"\n/admincmds-Admin commands");
			ShowPlayerDialog(playerid, 4511, DIALOG_STYLE_MSGBOX,"Commands", string2, "Close", "");
	    }
	}

	if(dialogid == EVENT_PLAYLIST_NEXT)
	{
	    if(response)
        {
            new string5[70],string2[1230];
    	    PlayerInfo[playerid][pListPage]++;
    	    new currentpage=PlayerInfo[playerid][pListPage]*20;
		    format(string2,sizeof string2,"{FFFFFF}");
		    forLoopV(id, currentpage, currentpage+20)
			{
			    if(EventInfo[id][Exists])
			    {
		 	   		if(EventInfo[id][Money] == 0)format(string5,sizeof string5,"\n(ID:%d) - %s",EventInfo[id][ID],EventInfo[id][eName]);
					else format(string5,sizeof string5,"\n(ID:%d) %s | Money: %d",EventInfo[id][ID],EventInfo[id][eName],EventInfo[id][Money]);
					strcat(string2,string5);
			    }
			}
			if((maxSFevents) <= currentpage+20)ShowPlayerDialog(playerid, 1231, DIALOG_STYLE_MSGBOX, "Event list(/estart <id>)", string2, "Close", "");
			if((maxSFevents) > currentpage+20)ShowPlayerDialog(playerid, EVENT_PLAYLIST_NEXT, DIALOG_STYLE_MSGBOX, "Event list(/estart <id>)", string2, "Next page", "Close");
	    }
	}
	if(dialogid == TELE_PLAYLIST_NEXT)
	{
	    if(response)
        {
            new string5[70],string2[1200];
    	    PlayerInfo[playerid][pListPage]++;
    	    new currentpage=PlayerInfo[playerid][pListPage]*20;
	    	format(string2,sizeof string2,"{FFFFFF}");
		    forLoopV(id, currentpage, currentpage+20)
			{
			    if(CmdInfo[id][Exists])
			    {
			        if(CmdInfo[id][Money] == 0)format(string5,sizeof string5,"\n/%s - %s(ID:%d)",CmdInfo[id][cName],CmdInfo[id][Description],id);
					else format(string5,sizeof string5,"\n/%s - %s[$%d](ID:%d)",CmdInfo[id][cName],CmdInfo[id][Description],CmdInfo[id][Money],id);
				    strcat(string2,string5);
			    }
			}
			if((maxSFcmds) <= currentpage+20)ShowPlayerDialog(playerid, TELEMENU, DIALOG_STYLE_MSGBOX, "Teleport list", string2, "Close", "");
			if((maxSFcmds) > currentpage+20)ShowPlayerDialog(playerid, TELE_PLAYLIST_NEXT, DIALOG_STYLE_MSGBOX, "Teleport list", string2, "Next page", "Close");
	    }
	}
    if(dialogid == CHANGEPASSMENU)
    {
        if(response)
        {
			//changing pass
		    if (strlen(inputtext) < 4 || strlen(inputtext) > 30) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} Password length must be more than 4 characters and less than 30.");
			user_ChangePass(playerid,inputtext);
	        SendClientMessage(playerid, blue, "{FF0000}Notice:{FFFFFF} Password has been changed. Remember it!");
        }
        return 1;
    }

    if(dialogid == REGISTERMENU)
    {
        if(response)
        {
            if(strlen(inputtext) < 4 || strlen(inputtext) > 30)
			{
			    format(string,sizeof(string),"{FF0000}Password must be 4-30 characters.\n{FFFFFF}Try again.");
				ShowPlayerDialog(playerid,REGISTERMENU, DIALOG_STYLE_PASSWORD,"Register Menu", string, "Register", "");
				return 1;
			}
		    user_Create(playerid,inputtext);
			GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~g~REGISTERED!!", 2000, 3);
		    hideIntro(playerid);
		    return 1;
        }
        else
        {
		    format(string,sizeof(string),"{FF0000}You must register in order to play!.\n{FFFFFF}Try again.");
			ShowPlayerDialog(playerid,REGISTERMENU, DIALOG_STYLE_PASSWORD,"Register Menu", string, "Register", "");
			GameTextForPlayer(playerid, "~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~r~You must register!", 2000, 3);
        }
        return 1;
    }
    if(dialogid == MODE_PASSWORD)
    {
        if(response)
        {
            if(strfind(ModePass[PlayerInfo[playerid][ModeUnLockSel]], inputtext,false) == 0)
            {
                PlayerInfo[playerid][ModeUnLock][PlayerInfo[playerid][ModeUnLockSel]] = 1;
                if(PlayerInfo[playerid][MainMenu] == 0)
					GameTextForPlayer(playerid, "~n~ ~n~ ~w~MODE Unlocked! PRESS PLAY again!", 3000, 3);
				else
				{
					SendClientMessage(playerid,red1, "{FF0000}Notice:{FFFFFF} Mode is unlocked. Type the command again to join the mode.");
					GameTextForPlayer(playerid, "~n~ ~n~ ~w~MODE Unlocked!", 3000, 3);
				}
            }
            else
            {
            	GameTextForPlayer(playerid, "~w~WRONG PASSWORD!", 3000, 3);
            	ShowPlayerDialog(playerid,MODE_PASSWORD, DIALOG_STYLE_INPUT,"Mode Password Menu", "You must enter the password to enter this mode.", "Enter", "Cancel");
		 	}
        }
        return 1;
    }
    if(dialogid == LOGINMENU)
    {
        if(!response) // If they clicked 'Cancel' or pressed esc
        {
    		format(string,sizeof(string),"{FF0000}You must log in!.\n{FFFFFF}Try again.");
			ShowPlayerDialog(playerid,LOGINMENU, DIALOG_STYLE_PASSWORD,"Login Menu", string, "Login", "");
        }
        else // Pressed ENTER or clicked 'Login' button
        {
            if(user_CheckLogin(playerid,inputtext))
            {
				ActivateRegisteredPlayer(playerid);
				if(PlayerInfo[playerid][Level] > 0)
				{
					format(string, sizeof(string), "[ADMIN JOIN] %s[%d] logged in.", PlayerInfo[playerid][Name], playerid);
					db_SaveForAdminText(string);
				    format(string, sizeof(string),"{33FF33}[ADMIN JOIN]{FFFFFF} %s ID:%d logged in.",PlayerInfo[playerid][Name],playerid);
					MessageToAllAdmins(lightblue,string);
				}
				GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~g~LOGGED IN!!", 2000, 3);
		    	hideIntro(playerid);
            }
            else
            {
				PlayerInfo[playerid][FailLogin]++;
				format(string,sizeof(string),"{FF0000}Login Failed. Attempt (%d/%d)\n{FFFFFF}Try again.",PlayerInfo[playerid][FailLogin],MAX_FAIL_LOGINS);
				if(PlayerInfo[playerid][FailLogin] < MAX_FAIL_LOGINS)
					ShowPlayerDialog(playerid,LOGINMENU, DIALOG_STYLE_PASSWORD,"Login Menu", string, "Login", "");
                if(PlayerInfo[playerid][FailLogin] == MAX_FAIL_LOGINS)
				{
					user_Kick(playerid,-1,"Failing to login", true, true);
				}
            }
        }
        return 1;
    }
    if(dialogid == SOUNDENABLE)
	{
		if(response)
		{
			if(listitem == 0)
			{
				PlayerInfo[playerid][DisableSounds] = 0;
				SendClientMessage( playerid,green1,"Notice:{FFFFFF} Gameplay sounds enabled.");
			}
			if(listitem == 1)
			{
			    PlayerInfo[playerid][DisableSounds] = 1;
				SendClientMessage( playerid,red1,"Notice:{FFFFFF} Gameplay sounds disabled.");
			}
		}
		return 1;
	}
	if(dialogid == REFILLMENU)
	{
		if(response)
		{
			if(listitem == 0)
			{
			    ResetWeapons(playerid);
				RefillWeaps(playerid);
				SendClientMessage(playerid,red1, "{33FF33}Notice:{FFFFFF} Your ammo has been refilled.");
			}
			if(listitem == 1)
			{
				SendClientMessage(playerid,red1, "{33FF33}Notice:{FFFFFF} Your plane bombs have been refilled.");
				forLoop(b, MAX_BOMB_TYPES)
				{
				    if(PlayerInfo[playerid][bombsleft][b] < floatround(gBombID[b][8]))
				    {
		    			PlayerInfo[playerid][bombsleft][b] = floatround(gBombID[b][8]);
		    			TWPlayerInfo[playerid][TWBombsLeft][b] = floatround(gBombID[b][8]);
					}
				}
			}
			if(listitem == 2)
			{
			    ResetWeapons(playerid);
				RefillWeaps(playerid);
				SendClientMessage(playerid,red1, "{33FF33}Notice:{FFFFFF} Your ammo has been refilled.");
				SendClientMessage(playerid,red1, "{33FF33}Notice:{FFFFFF} Your plane bombs have been refilled.");
				forLoop(b, MAX_BOMB_TYPES)
				{
				    if(PlayerInfo[playerid][bombsleft][b] < floatround(gBombID[b][8]))
				    {
		    			PlayerInfo[playerid][bombsleft][b] = floatround(gBombID[b][8]);
		    			TWPlayerInfo[playerid][TWBombsLeft][b] = floatround(gBombID[b][8]);
					}
				}
			}
		}
		return 1;
	}

	if(dialogid == ATOMICMENU)
	{
		if(response)
		{
			if(listitem == 0)
			{
			    if(PlayerInfo[playerid][bombsleft][4] >= 1 || TWPlayerInfo[playerid][TWBombsLeft][4] >= 1) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You already bought the atomic bomb!");
				if(TWPlayerInfo[playerid][AtomicBought] > 0)return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You already bought an atomic bomb, wait at least 15 mins.");
				if(TWPlayerInfo[playerid][AirRank] < 5)return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You need air rank 5 to purchase an atomic bomb.");
				if( GetThePlayerMoney(playerid)  <  TWInfo[AtomPrice]) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You don't have enough money to buy the atomic bomb!");
                PlayerInfo[playerid][bombsleft][4] = 1;
                TWPlayerInfo[playerid][TWBombsLeft][4] = 1;
    			GiveThePlayerMoney(playerid, -TWInfo[AtomPrice]);
    			//new string[128];
    			format(string,sizeof(string),"{33FF33}WAR NEWS:{FFFFFF} %s(ID:%d) has bought the atomic bomb!",PlayerInfo[playerid][Name],playerid);
				SendMessageToMode(TW,red1, string);
			  	format(string, sizeof(string), "[WAR NEWS] %s(ID:%d) has bought the atomic bomb!",PlayerInfo[playerid][Name],playerid);
				db_SaveChat(-1, TW,string);
			}
		}
	}
    if(dialogid == CLASSMENU)
	{
		if(response)
		{
   			if(listitem == 0)
   			{
   			     if(TWPlayerInfo[playerid][Class] == SOLDIER)
			  	 	return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You already are a soldier.");
			  	 TWPlayerInfo[playerid][Class] = SOLDIER;
	 			 A_SpawnPlayer(playerid);
			}
			if(listitem == 1)
   			{
   			     if(TWPlayerInfo[playerid][Class] == PILOT)
			  	  	return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You already are a pilot.");
			  	 TWPlayerInfo[playerid][Class] = PILOT;
	 			 A_SpawnPlayer(playerid);
			}
			if(listitem == 2)
   			{
   			     if(TWPlayerInfo[playerid][Class] == MEDIC)
			  	 	return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You already are a medic.");
			  	 TWPlayerInfo[playerid][Class] = MEDIC;
	 			 A_SpawnPlayer(playerid);
			}
			if(listitem == 3)
   			{
   			     if(TWPlayerInfo[playerid][Class] == ENGINEER)
			  	 return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You already are an engineer.");
			  	 TWPlayerInfo[playerid][Class] = ENGINEER;
	 			 A_SpawnPlayer(playerid);
			}
			if(listitem == 4)
   			{
   			     if(TWPlayerInfo[playerid][Class] == SPY)
			  	 	return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You already are a spy.");
			  	 if(PlayerInfo[playerid][pTeam] == ALLIES && AxisLeeaderCount()==0)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} Spy class not available.");
			  	 if(PlayerInfo[playerid][pTeam] == AXIS && AllyLeeaderCount()==0)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} Spy class not available.");
			  	 if(PlayerInfo[playerid][pTeam] == AXIS && AxisSpyCount() >= 2 && PlayerInfo[playerid][VIP] ==0)
				 {
				    return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} Spy class is full.");
				 }
				 if(PlayerInfo[playerid][pTeam] == ALLIES && AllySpyCount() >= 2 && PlayerInfo[playerid][VIP] ==0)
				 {
				    return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} Spy class is full.");
				 }
   			     TWPlayerInfo[playerid][Class] = SPY;
	 			 A_SpawnPlayer(playerid);
			}
			if(listitem == 5)
   			{
   			     if(TWPlayerInfo[playerid][Class] == BODYGUARD)
			  	 	return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You already are a guard.");
			  	 if(PlayerInfo[playerid][pTeam] == ALLIES && AllyLeeaderCount()==0)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} Guard class not available.");
			  	 if(PlayerInfo[playerid][pTeam] == AXIS && AxisLeeaderCount()==0)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} Guard class not available.");
			  	 if(PlayerInfo[playerid][pTeam] == AXIS && AxisBodyGuardCount() >= 8 && PlayerInfo[playerid][VIP] ==0)
				 {
				    return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} Guard class is full.");
				 }
				 if(PlayerInfo[playerid][pTeam] == ALLIES && AllyBodyGuardCount() >= 8 && PlayerInfo[playerid][VIP] ==0)
				 {
				    return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} Guard class is full.");
				 }
   			     TWPlayerInfo[playerid][Class] = BODYGUARD;
	 			 A_SpawnPlayer(playerid);
			}
		}
		return 1;
	}

    if(dialogid == FIGHTMENU)
	{
		if(response)
		{
			if(listitem == 0)
			{
				SetPlayerFightingStyle (playerid, FIGHT_STYLE_BOXING);
			}
			if(listitem == 1)
			{
				SetPlayerFightingStyle (playerid, FIGHT_STYLE_ELBOW);
			}
			if(listitem == 2)
			{
			    SetPlayerFightingStyle (playerid, FIGHT_STYLE_KNEEHEAD);
			}
			if(listitem == 3)
			{
				SetPlayerFightingStyle (playerid, FIGHT_STYLE_KUNGFU);
			}
			if(listitem == 4)
			{
			    SetPlayerFightingStyle (playerid, FIGHT_STYLE_GRABKICK);
			}
			if(listitem == 5)
			{
				SetPlayerFightingStyle (playerid, FIGHT_STYLE_NORMAL);
			}
		}
	}
    if(dialogid == 20320 && response)
	{
		switch(listitem)
		{
			case 0:
			{
				ShowPlayerDialog(playerid, 20322, DIALOG_STYLE_LIST, "Thrown Weapons", "Grenades $3200\nTear Gas $2600\nMolotov Cocktails $6000\n   			Back", "Buy", "Exit");
			}
			case 1:
			{
				ShowPlayerDialog(playerid, 20323, DIALOG_STYLE_LIST, "Pistols", "9mm  $5000\nSilenced 9mm  $6000\nDesert Eagle  $9000\n   			Back", "Buy", "Exit");
			}
			case 2:
			{
				ShowPlayerDialog(playerid, 20324, DIALOG_STYLE_LIST, "Shotguns", "Normal Shotgun $5000 \n   			Back", "Buy", "Exit");
			}
			case 3:
			{
				ShowPlayerDialog(playerid, 20326, DIALOG_STYLE_LIST, "Rifles", "AK-47 $6000\nM4 $9000\nCountry Rifle $3000\nSniper Rifle $10000\n   			Back", "Buy", "Exit");
			}
			case 4:
			{
				ShowPlayerDialog(playerid, 20329, DIALOG_STYLE_LIST, "Health and Armor", "Health $5000\nArmour $7000\n   			Back", "Buy", "Exit");
			}
			case 5:
			{
				ShowPlayerDialog(playerid, 20529, DIALOG_STYLE_LIST, "Plane bombs", "10 Small bombs(50 kilo) - $5000 \n5 Big bombs(250 kilo) - $10000 \n5 Heavy bombs(500 kilo) - $20000\n3 Supplies - $15000\n1 Gas Bomb - $2000 \n   			Back", "Buy", "Exit");
			}
			case 6:
			{
				ShowPlayerDialog(playerid, 20539, DIALOG_STYLE_LIST, "Items", "Gas mask - $2000 \n   			Back", "Buy", "Exit");
			}
		}
	}
	if(dialogid == 20539 && response)
	{
	    switch(listitem)
		{
			case 0:
			{
			    if(TWPlayerInfo[playerid][GasMask] == 1) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You already have a gas mask.");
			    if( GetThePlayerMoney(playerid)  <  2000) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You don't have enough money.");
				GiveThePlayerMoney(playerid, -2000);
				GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~~w~item purchased", 2000, 3);
                TWPlayerInfo[playerid][GasMask] = 1;
                TWPlayerInfo[playerid][GasMaskOn] = 1;
                SetPlayerAttachedObjectEx(playerid,8,19472,2,0.00,0.11,-0.00,0.00,89.00,87.99,1.00,1.00,1.00);
                ShowPlayerDialog(playerid, 20320, DIALOG_STYLE_LIST, "Weapons", "Thrown Weapons\nPistols\nShotguns\nRifles\nHealth and Armour\nPlane bombs\nItems", "Select", "Exit");
			}
		}
	}
	if(dialogid == 20529 && response)
	{
		switch(listitem)
		{
			case 0:
			{
			    if( GetThePlayerMoney(playerid)  <  5000) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You don't have enough money.");
				GiveThePlayerMoney(playerid, -5000);
				PlayerInfo[playerid][bombsleft][1] += 10; // small bomb
				TWPlayerInfo[playerid][TWBombsLeft][1] += 10;
				GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~~w~bombs purchased", 2000, 3);
				ShowPlayerDialog(playerid, 20529, DIALOG_STYLE_LIST, "Plane bombs", "10 Small bombs(50 kilo) - $5000 \n5 Big bombs(250 kilo) - $10000 \n5 Heavy bombs(500 kilo) - $20000\n3 Supplies - $15000\n1 Gas Bomb - $2000 \n   			Back", "Buy", "Exit");
			}
			case 1:
			{
				if(TWPlayerInfo[playerid][Class] != PILOT) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You must be a pilot to purchase this bomb type.");
				if( GetThePlayerMoney(playerid)  <  10000) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You don't have enough money.");
				GiveThePlayerMoney(playerid, -10000);
				PlayerInfo[playerid][bombsleft][2] += 5; //big
				TWPlayerInfo[playerid][TWBombsLeft][2] += 5;
				GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~~w~bombs purchased", 2000, 3);
				ShowPlayerDialog(playerid, 20529, DIALOG_STYLE_LIST, "Plane bombs", "10 Small bombs(50 kilo) - $5000 \n5 Big bombs(250 kilo) - $10000 \n5 Heavy bombs(500 kilo) - $20000\n3 Supplies - $15000\n1 Gas Bomb - $2000 \n   			Back", "Buy", "Exit");
			}
			case 2:
			{
				if(TWPlayerInfo[playerid][Class] != PILOT) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You must be a pilot to purchase this bomb type.");
				if( GetThePlayerMoney(playerid)  <  20000) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You don't have enough money.");
				GiveThePlayerMoney(playerid, -20000);
				PlayerInfo[playerid][bombsleft][3] += 5; //heavy
				TWPlayerInfo[playerid][TWBombsLeft][3] += 5;
				GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~~w~bombs purchased", 2000, 3);
				ShowPlayerDialog(playerid, 20529, DIALOG_STYLE_LIST, "Plane bombs", "10 Small bombs(50 kilo) - $5000 \n5 Big bombs(250 kilo) - $10000 \n5 Heavy bombs(500 kilo) - $20000\n3 Supplies - $15000\n1 Gas Bomb - $2000 \n   			Back", "Buy", "Exit");
			}
			case 3:
			{
				if(TWPlayerInfo[playerid][Class] != PILOT) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You must be a pilot to purchase this bomb type.");
				if(GetThePlayerMoney(playerid) < 15000) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You don't have enough money.");
				GiveThePlayerMoney(playerid, -15000);
				PlayerInfo[playerid][bombsleft][5] += 3;//supplies
				TWPlayerInfo[playerid][TWBombsLeft][5] += 3;
				GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~~w~supplies purchased", 2000, 3);
				ShowPlayerDialog(playerid, 20529, DIALOG_STYLE_LIST, "Plane bombs", "10 Small bombs(50 kilo) - $5000 \n5 Big bombs(250 kilo) - $10000 \n5 Heavy bombs(500 kilo) - $20000\n3 Supplies - $15000\n1 Gas Bomb - $2000 \n   			Back", "Buy", "Exit");
			}
			case 4:
			{
			    if(TWPlayerInfo[playerid][Class] != PILOT) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You must be a pilot to purchase this bomb type.");
				if(PlayerInfo[playerid][bombsleft][6] >= 1 || TWPlayerInfo[playerid][TWBombsLeft][6] >= 1) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You cannot purchase more of this bomb...");
				if( GetThePlayerMoney(playerid)  <  2000) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You don't have enough money.");
				GiveThePlayerMoney(playerid, -2000);
				PlayerInfo[playerid][bombsleft][6] += 1;//gas bomb
				TWPlayerInfo[playerid][TWBombsLeft][6] += 1;
				GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~~w~bombs purchased", 2000, 3);
				ShowPlayerDialog(playerid, 20529, DIALOG_STYLE_LIST, "Plane bombs", "10 Small bombs(50 kilo) - $5000 \n5 Big bombs(250 kilo) - $10000 \n5 Heavy bombs(500 kilo) - $20000\n3 Supplies - $15000\n1 Gas Bomb - $2000 \n   			Back", "Buy", "Exit");
			}
			case 5:
			{
			    if(PlayerInfo[playerid][PlayerMode] == TW)ShowPlayerDialog(playerid, 20320, DIALOG_STYLE_LIST, "Weapons", "Thrown Weapons\nPistols\nShotguns\nRifles\nHealth and Armour\nPlane Bombs\nItems", "Select", "Exit");
			    if(PlayerInfo[playerid][PlayerMode] == CO || PlayerInfo[playerid][PlayerMode] == ZO || PlayerInfo[playerid][PlayerMode] == PTP || PlayerInfo[playerid][PlayerMode] == GK)
					ShowPlayerDialog(playerid, 20320, DIALOG_STYLE_LIST, "Weapons", "Thrown Weapons\nPistols\nShotguns\nRifles\nHealth and Armour", "Select", "Exit");
			}
		}
	}
    if(dialogid == 20322 && response)
	{
		switch(listitem)
		{
			case 0:
			{
				if( GetThePlayerMoney(playerid)  <  VGrenade) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You don't have enough money.");
				GiveThePlayerMoney(playerid, -VGrenade);
				GiveWeapon(playerid, 16, AGrenade);
				ShowPlayerDialog(playerid, 20322, DIALOG_STYLE_LIST, "Thrown Weapons", "Grenades $3200\nTear Gas $2600\nMolotov Cocktails $6000\n   			Back", "Buy", "Exit");
			}
			case 1:
			{
				if( GetThePlayerMoney(playerid)  <  VTearGas) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You don't have enough money.");
				GiveThePlayerMoney(playerid, -VTearGas);
				GiveWeapon(playerid, 17, ATearGas);
				ShowPlayerDialog(playerid, 20322, DIALOG_STYLE_LIST, "Thrown Weapons", "Grenades $3200\nTear Gas $2600\nMolotov Cocktails $6000\n   			Back", "Buy", "Exit");
			}
			case 2:
			{
				if( GetThePlayerMoney(playerid)  <  VMolotovCocktail) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You don't have enough money.");
				GiveThePlayerMoney(playerid, -VMolotovCocktail);
				GiveWeapon(playerid, 18, AMolotovCocktail);
				ShowPlayerDialog(playerid, 20322, DIALOG_STYLE_LIST, "Thrown Weapons", "Grenades $3200\nTear Gas $2600\nMolotov Cocktails $6000\n   			Back", "Buy", "Exit");
			}
			case 3:
			{
			    if(PlayerInfo[playerid][PlayerMode] == TW)ShowPlayerDialog(playerid, 20320, DIALOG_STYLE_LIST, "Weapons", "Thrown Weapons\nPistols\nShotguns\nRifles\nHealth and Armour\nPlane Bombs\nItems", "Select", "Exit");
			    if(PlayerInfo[playerid][PlayerMode] == CO || PlayerInfo[playerid][PlayerMode] == ZO || PlayerInfo[playerid][PlayerMode] == PTP || PlayerInfo[playerid][PlayerMode] == GK)
					ShowPlayerDialog(playerid, 20320, DIALOG_STYLE_LIST, "Weapons", "Thrown Weapons\nPistols\nShotguns\nRifles\nHealth and Armour", "Select", "Exit");
			}
		}
	}

	if(dialogid == 20323 && response)
	{
		switch(listitem)
		{
			case 0:
			{
				if( GetThePlayerMoney(playerid)  <  V9mm) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You don't have enough money.");
				GiveThePlayerMoney(playerid, -V9mm);
				GiveWeapon(playerid, 22, A9mm);
				ShowPlayerDialog(playerid, 20323, DIALOG_STYLE_LIST, "Pistols", "9mm  $5000\nSilenced 9mm  $6000\nDesert Eagle  $9000\n   		Back", "Buy", "Exit");
			}
			case 1:
			{
				if( GetThePlayerMoney(playerid)  <  VSilenced9mm) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You don't have enough money.");
				GiveThePlayerMoney(playerid, -VSilenced9mm);
				GiveWeapon(playerid, 23, ASilenced9mm);
				ShowPlayerDialog(playerid, 20323, DIALOG_STYLE_LIST, "Pistols", "9mm  $5000\nSilenced 9mm  $6000\nDesert Eagle  $9000\n   		Back", "Buy", "Exit");
			}
			case 2:
			{
				if( GetThePlayerMoney(playerid)  <  VDesertEagle) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You don't have enough money.");
				GiveThePlayerMoney(playerid, -VDesertEagle);
				GiveWeapon(playerid, 24, ADesertEagle);
				ShowPlayerDialog(playerid, 20323, DIALOG_STYLE_LIST, "Pistols", "9mm  $5000\nSilenced 9mm  $6000\nDesert Eagle  $9000\n				Back", "Buy", "Exit");
			}
			case 3:
			{
				if(PlayerInfo[playerid][PlayerMode] == TW)ShowPlayerDialog(playerid, 20320, DIALOG_STYLE_LIST, "Weapons", "Thrown Weapons\nPistols\nShotguns\nRifles\nHealth and Armour\nPlane Bombs\nItems", "Select", "Exit");
			    if(PlayerInfo[playerid][PlayerMode] == CO || PlayerInfo[playerid][PlayerMode] == ZO || PlayerInfo[playerid][PlayerMode] == PTP || PlayerInfo[playerid][PlayerMode] == GK)
					ShowPlayerDialog(playerid, 20320, DIALOG_STYLE_LIST, "Weapons", "Thrown Weapons\nPistols\nShotguns\nRifles\nHealth and Armour", "Select", "Exit");
			}
		}
	}
	if(dialogid == 20324 && response)
	{
		switch(listitem)
		{
			case 0:
			{
				if( GetThePlayerMoney(playerid)  <  VShotgun) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You don't have enough money.");
				GiveThePlayerMoney(playerid, -VShotgun);
				GiveWeapon(playerid, 25, AShotgun);
				ShowPlayerDialog(playerid, 20324, DIALOG_STYLE_LIST, "Shotguns", "Normal Shotgun $5000 \n   			Back", "Buy", "Exit");
			}
			case 1:
			{
				if(PlayerInfo[playerid][PlayerMode] == TW)ShowPlayerDialog(playerid, 20320, DIALOG_STYLE_LIST, "Weapons", "Thrown Weapons\nPistols\nShotguns\nRifles\nHealth and Armour\nPlane Bombs\nItems", "Select", "Exit");
			    if(PlayerInfo[playerid][PlayerMode] == CO || PlayerInfo[playerid][PlayerMode] == ZO || PlayerInfo[playerid][PlayerMode] == PTP || PlayerInfo[playerid][PlayerMode] == GK)
					ShowPlayerDialog(playerid, 20320, DIALOG_STYLE_LIST, "Weapons", "Thrown Weapons\nPistols\nShotguns\nRifles\nHealth and Armour", "Select", "Exit");
			}
		}
	}

	if(dialogid == 20326 && response)
	{
		switch(listitem)
		{
			case 0:
			{
				if( GetThePlayerMoney(playerid)  <  VAK-47) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You don't have enough money.");
				GiveThePlayerMoney(playerid, -VAK-47);
				GiveWeapon(playerid, 30, AAK-47);
				ShowPlayerDialog(playerid, 20326, DIALOG_STYLE_LIST, "Rifles", "AK-47 $6000\nM4 $9000\nCountry Rifle $3000\nSniper Rifle $10000\n   		Back", "Buy", "Exit");
			}
			case 1:
			{
				if( GetThePlayerMoney(playerid)  <  VM4) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You don't have enough money.");
				ShowPlayerDialog(playerid, 20326, DIALOG_STYLE_LIST, "Rifles", "AK-47 $6000\nM4 $9000\nCountry Rifle $3000\nSniper Rifle $10000\n   		Back", "Buy", "Exit");
				GiveThePlayerMoney(playerid, -VM4);
				GiveWeapon(playerid, 31, AM4);
			}
			case 2:
			{
				if( GetThePlayerMoney(playerid)  <  VCountryRifle) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You don't have enough money.");
				ShowPlayerDialog(playerid, 20326, DIALOG_STYLE_LIST, "Rifles", "AK-47 $6000\nM4 $9000\nCountry Rifle $3000\nSniper Rifle $10000\n   		Back", "Buy", "Exit");
				GiveThePlayerMoney(playerid, -VCountryRifle);
				GiveWeapon(playerid, 33, ACountryRifle);
			}
			case 3:
			{
				if( GetThePlayerMoney(playerid)  <  VSniperRifle) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You don't have enough money.");
				GiveThePlayerMoney(playerid, -VSniperRifle);
				GiveWeapon(playerid, 34, ASniperRifle);
				ShowPlayerDialog(playerid, 20326, DIALOG_STYLE_LIST, "Rifles", "AK-47 $6000\nM4 $9000\nCountry Rifle $3000\nSniper Rifle $10000\n   		Back", "Buy", "Exit");
			}
			case 4:
			{
				if(PlayerInfo[playerid][PlayerMode] == TW)ShowPlayerDialog(playerid, 20320, DIALOG_STYLE_LIST, "Weapons", "Thrown Weapons\nPistols\nShotguns\nRifles\nHealth and Armour\nPlane Bombs\nItems", "Select", "Exit");
			    if(PlayerInfo[playerid][PlayerMode] == CO || PlayerInfo[playerid][PlayerMode] == ZO || PlayerInfo[playerid][PlayerMode] == PTP || PlayerInfo[playerid][PlayerMode] == GK)
					ShowPlayerDialog(playerid, 20320, DIALOG_STYLE_LIST, "Weapons", "Thrown Weapons\nPistols\nShotguns\nRifles\nHealth and Armour", "Select", "Exit");
			}
		}
	}

	if(dialogid == 20329 && response)
	{
		switch(listitem)
		{
			case 0:
			{
				if( GetThePlayerMoney(playerid)  <  VTheHealth) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You don't have enough money.");
				GiveThePlayerMoney(playerid, -VTheHealth);
				SetHealth(playerid, 99.0);
				ShowPlayerDialog(playerid, 20329, DIALOG_STYLE_LIST, "Health and Armour", "Health $5000\nArmour $7000\n  		Back", "Buy", "Exit");
			}
			case 1:
			{
				if( GetThePlayerMoney(playerid)  <  VTheArmour) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You don't have enough money.");
				GiveThePlayerMoney(playerid, -VTheArmour);
				SetArmor(playerid, 99.0);
				ShowPlayerDialog(playerid, 20329, DIALOG_STYLE_LIST, "Health and Armour", "Health $5000\nArmour $7000\n   		Back", "Buy", "Exit");
			}
			case 2:
			{
				if(PlayerInfo[playerid][PlayerMode] == TW)ShowPlayerDialog(playerid, 20320, DIALOG_STYLE_LIST, "Weapons", "Thrown Weapons\nPistols\nShotguns\nRifles\nHealth and Armour\nPlane Bombs\nItems", "Select", "Exit");
			    if(PlayerInfo[playerid][PlayerMode] == CO || PlayerInfo[playerid][PlayerMode] == ZO || PlayerInfo[playerid][PlayerMode] == PTP || PlayerInfo[playerid][PlayerMode] == GK)
					ShowPlayerDialog(playerid, 20320, DIALOG_STYLE_LIST, "Weapons", "Thrown Weapons\nPistols\nShotguns\nRifles\nHealth and Armour", "Select", "Exit");
			}
		}
	}

	if(dialogid == DIALOG_ATTACH)
	{
	    if(response)
        {
		    switch(listitem)
		    {
		        case 0:
		        {
		            new string2[228];
			        forLoop(x, MAX_PLAYER_ATTACHED_OBJECTS)
			        {
			            if(IsPlayerAttachedObjectSlotUsed(playerid, x))
						{
						    new slot = 0;
						    forLoop(i, (sizeof(AttachmentObjects)-1))
				    		{
				    		    if(pAttachments[playerid][x][ModelID] == AttachmentObjects[i][attachmodel])
								{
								    slot = i;
									break;
								}
				    		}
					 		format(string2, sizeof(string2), "%s%d-%s\n", string2, x, AttachmentObjects[slot][attachname]);
			            }
						else format(string2, sizeof(string2), "%s%d\n", string2, x);
			        }
			        ShowPlayerDialog(playerid, DIALOG_ATTACH_INDEX_SELECTION, DIALOG_STYLE_LIST, \
			        "Attachments", string2, "Select", "Back");
		        }
		        case 1:
		        {
					forLoop(i, 10)
				    {
						RemovePlayerAttachedObjectEx(playerid, i);
					}
					LoadpAtthachedObjectsFromFile(playerid);
					PlayerInfo[playerid][Attachments][0] = 1;
		        }
		        case 2:
		        {
					forLoop(i, 10)
				    {
						RemovePlayerAttachedObjectEx(playerid, i);
					}
					PlayerInfo[playerid][Attachments][0] = 0;
					PlayerInfo[playerid][Attachments][1] = 0;
		        }
		        case 3:
		        {
					forLoop(i, 10)
				    {
						RemovePlayerAttachedObjectEx(playerid, i);
					}
					LoadpAtthachedObjectsFromFile(playerid);
					PlayerInfo[playerid][Attachments][0] = 1;
					PlayerInfo[playerid][Attachments][1] = 1;
		        }
		    }
		}
	}
    if(dialogid == DIALOG_ATTACH_SEARCH)
    {
        if(response)
        {
	        if(strlen(inputtext) < 2)
	        {
	            ShowPlayerDialog(playerid, DIALOG_ATTACH_SEARCH, DIALOG_STYLE_INPUT,
				"Search for objects", "Enter the name of the object you want to search.\n{FFFFFF}EG: glass, dildo, pool.", "Search", "Back");
				SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} Input text length must be more than 2 characters long.");
	            return true;
	        }
			new ridx, result[72], endresults[74*20];

			forLoop(i, (sizeof(AttachmentObjects)-1))
			{
			    if(strfind(AttachmentObjects[i][attachname], inputtext, true) != -1)
				{
					format(result, sizeof result, "\n%s", AttachmentObjects[i][attachname]);
					strcat(endresults, result, sizeof endresults);
					searchAttachments[ridx] = i;
					ridx++;
				}
				if(ridx >= 19) break;
			}
			if(!ridx)
			{
			    ShowPlayerDialog(playerid, DIALOG_ATTACH_SEARCH, DIALOG_STYLE_INPUT,
				"Search for objects", "{FF0000}There were no results, try again.\n{FFFFFF}EG: glass, dildo, pool.", "Search", "Back");
				SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} There were no results.");
	            return true;
			}
			ShowPlayerDialog(playerid,  DIALOG_ATTACH_MODEL_SELECTION2, DIALOG_STYLE_LIST, "Search results:", endresults, "Select", "Back");
		}
		else
		{
	        new string2[228];
	        forLoop(x, MAX_PLAYER_ATTACHED_OBJECTS)
	        {
	            if(IsPlayerAttachedObjectSlotUsed(playerid, x))
			    {
			        new slot = 0;
				    forLoop(i, (sizeof(AttachmentObjects)-1))
		    		{
		    		    if(pAttachments[playerid][x][ModelID] == AttachmentObjects[i][attachmodel])
						{
						    slot = i;
							break;
						}
		    		}
					format(string2, sizeof(string2), "%s%d-%s\n", string2, x, AttachmentObjects[slot][attachname]);
	            }
				else format(string2, sizeof(string2), "%s%d\n", string2, x);
	        }
	        ShowPlayerDialog(playerid, DIALOG_ATTACH_INDEX_SELECTION, DIALOG_STYLE_LIST, \
	        "Attachments", string2, "Select", "Back");
		}
	}
    if(dialogid == DIALOG_ATTACH_MODEL_SELECTION2)
    {
        if(response)
        {
            SetPVarInt(playerid, "AttachmentModelSel", AttachmentObjects[searchAttachments[listitem]][attachmodel]);
            new string2[256+1];
            forLoop(x, sizeof(AttachmentBones))
            {
                format(string2, sizeof(string2), "%s%s\n", string2, AttachmentBones[x]);
            }
            ShowPlayerDialog(playerid, DIALOG_ATTACH_BONE_SELECTION, DIALOG_STYLE_LIST, \
            "{FF0000}Attachment Modification - Bone Selection", string2, "Select", "Cancel");
        }
        else
		{
			DeletePVar(playerid, "AttachmentIndexSel");
	        new string2[228];
	        forLoop(x, MAX_PLAYER_ATTACHED_OBJECTS)
	        {
	            if(IsPlayerAttachedObjectSlotUsed(playerid, x))
			    {
			        new slot = 0;
				    forLoop(i, (sizeof(AttachmentObjects)-1))
		    		{
		    		    if(pAttachments[playerid][x][ModelID] == AttachmentObjects[i][attachmodel])
						{
						    slot = i;
							break;
						}
		    		}
					format(string2, sizeof(string2), "%s%d-%s\n", string2, x, AttachmentObjects[slot][attachname]);
	            }
				else format(string2, sizeof(string2), "%s%d\n", string2, x);
	        }
	        ShowPlayerDialog(playerid, DIALOG_ATTACH_INDEX_SELECTION, DIALOG_STYLE_LIST, \
	        "Attachments", string2, "Select", "Back");
		}
        return 1;
    }
    if(dialogid == DIALOG_ATTACH_INDEX_SELECTION)
    {
        if(response)
        {
            if(IsPlayerAttachedObjectSlotUsed(playerid, listitem))
            {
                ShowPlayerDialog(playerid, DIALOG_ATTACH_EDITREPLACE, DIALOG_STYLE_MSGBOX, \
                "Attachment Modification", "Do you wish to edit the attachment in that slot, or delete it?", "Edit", "Delete");
            }
            else
            {
                ShowPlayerDialog(playerid, DIALOG_ATTACH_SEARCH, DIALOG_STYLE_INPUT,
					"Search for objects", "Enter the name of the object you want to search.\n{FFFFFF}EG: glass, dildo, pool.", "Search", "Back");
            }
        	SetPVarInt(playerid, "AttachmentIndexSel", listitem);
        }
        else
            ShowPlayerDialog(playerid, DIALOG_ATTACH, DIALOG_STYLE_LIST,"{FF0000}Attachments Menu", "\nAdd/Edit Objects \nLoad objects\nUnload objects\nSpawn with Objects", "Select", "Cancel");
        return 1;
    }
    if(dialogid == DIALOG_ATTACH_EDITREPLACE)
    {
        if(response)
		{
		    PlayerInfo[playerid][EditingAttachments] = -1;
		    EditAttachedObject(playerid, GetPVarInt(playerid, "AttachmentIndexSel"));
		}
        else
		{
	  		RemovePlayerAttachedObjectEx(playerid, GetPVarInt(playerid, "AttachmentIndexSel"));
			pAttachments[playerid][GetPVarInt(playerid, "AttachmentIndexSel")][Exists]=0;
			new string2[228];
	        forLoop(x, MAX_PLAYER_ATTACHED_OBJECTS)
	        {
	            if(IsPlayerAttachedObjectSlotUsed(playerid, x))
				{
				    new slot = 0;
				    forLoop(i, (sizeof(AttachmentObjects)-1))
		    		{
		    		    if(pAttachments[playerid][x][ModelID] == AttachmentObjects[i][attachmodel])
						{
						    slot = i;
							break;
						}
		    		}
			 		format(string2, sizeof(string2), "%s%d-%s\n", string2, x, AttachmentObjects[slot][attachname]);
	            }
				else format(string2, sizeof(string2), "%s%d\n", string2, x);
	        }
	        ShowPlayerDialog(playerid, DIALOG_ATTACH_INDEX_SELECTION, DIALOG_STYLE_LIST, \
	        "Attachments", string2, "Select", "Back");
		}
    	DeletePVar(playerid, "AttachmentIndexSel");
        return 1;
    }
    if(dialogid == DIALOG_ATTACH_MODEL_SELECTION)
    {
        if(response)
        {
            SetPVarInt(playerid, "AttachmentModelSel", AttachmentObjects[listitem][attachmodel]);
            new string2[256+1];
            forLoop(x, sizeof(AttachmentBones))
            {
                format(string2, sizeof(string2), "%s%s\n", string2, AttachmentBones[x]);
            }
            ShowPlayerDialog(playerid, DIALOG_ATTACH_BONE_SELECTION, DIALOG_STYLE_LIST, \
            "{FF0000}Attachment Modification - Bone Selection", string2, "Select", "Cancel");
        }
        else
		{
			DeletePVar(playerid, "AttachmentIndexSel");
	        new string2[228];
	        forLoop(x, MAX_PLAYER_ATTACHED_OBJECTS)
	        {
	            if(IsPlayerAttachedObjectSlotUsed(playerid, x))
			    {
			        new slot = 0;
				    forLoop(i, (sizeof(AttachmentObjects)-1))
		    		{
		    		    if(pAttachments[playerid][x][ModelID] == AttachmentObjects[i][attachmodel])
						{
						    slot = i;
							break;
						}
		    		}
					format(string2, sizeof(string2), "%s%d-%s\n", string2, x, AttachmentObjects[slot][attachname]);
	            }
				else format(string2, sizeof(string2), "%s%d\n", string2, x);
	        }
	        ShowPlayerDialog(playerid, DIALOG_ATTACH_INDEX_SELECTION, DIALOG_STYLE_LIST, \
	        "Attachments", string2, "Select", "Back");
		}
        return 1;
    }
    if(dialogid == DIALOG_ATTACH_BONE_SELECTION)
    {
        if(response)
        {
            PlayerInfo[playerid][EditingAttachments] = GetPVarInt(playerid, "AttachmentIndexSel");
            SetPlayerAttachedObject(playerid, GetPVarInt(playerid, "AttachmentIndexSel"), GetPVarInt(playerid, "AttachmentModelSel"), listitem+1);
		    EditAttachedObject(playerid, GetPVarInt(playerid, "AttachmentIndexSel"));
            SendClientMessage(playerid, 0xFFFFFFFF, "Hint: Use {FFFF00}~k~~PED_SPRINT~{FFFFFF} to look around.");
        }
        DeletePVar(playerid, "AttachmentIndexSel");
        DeletePVar(playerid, "AttachmentModelSel");
        return 1;
    }
    new car = GetPlayerVehicleID(playerid);
	new modelid = GetVehicleModel(car);
	if(dialogid == TUNE_MENU_MAIN)
	{
		if(response)
		{
			if(listitem == 0) //load
			{
			    forLoop(i, 14)
		   	    {
		   	        AddVehicleComponent(car,PlayerInfo[playerid][vComponents][i]);
		   	    }
				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	   			SendClientMessage(playerid,green1,"Info:{FFFFFF} Old Vehicle Components have been loaded!");
			}
			if(listitem == 1)//save
			{
		   	    forLoop(i, 14)
		   	    {
		   	        PlayerInfo[playerid][vComponents][i] = GetVehicleComponentInSlot(car,i);
		   	    }
		   		SendClientMessage(playerid,green1,"Info:{FFFFFF} Vehicle Components have been saved!");
		   		ShowPlayerDialog(playerid, TUNE_MENU_MAIN, DIALOG_STYLE_LIST, "Tune you shitty car",TUNE_MENU_STR, "Select", "Exit");
			}
			if(listitem == 2) //Paintjobs
			{
				ShowPlayerDialog(playerid, TUNE_MENU_PJOB, DIALOG_STYLE_LIST, "Paint job + Hyds", "Paint Job 1\nPaint Job 2\nPaint Job 3\nHydraulics", "Select", "Back");
			}
			if(listitem == 3) //Exhausts
			{
				ShowPlayerDialog(playerid, TUNE_MENU_EXHAUST, DIALOG_STYLE_LIST, "Exhaust", "Wheel Arch Alien Exhaust\nWheel Arch X-Flow Exhaust\nChromer Exhaust\nSlamin Exhaust", "Select", "Back");
			}
			if(listitem == 4) //Front Bumpers
			{
				ShowPlayerDialog(playerid, TUNE_MENU_FBUMPER, DIALOG_STYLE_LIST, "Front Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nChromer bumper\nSlamin bumper", "Select", "Back");
			}
			if(listitem == 5) //Rear Bumpers
			{
				ShowPlayerDialog(playerid, TUNE_MENU_RBUMPER, DIALOG_STYLE_LIST, "Rear Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nChromer bumper\nSlamin bumper", "Select", "Back");
			}
			if(listitem == 6) //Roofs
			{
				ShowPlayerDialog(playerid, TUNE_MENU_ROOF, DIALOG_STYLE_LIST, "Roof", "Wheel Arch Alien Roof Vent\nWheel Arch X-Flow Roof Vent\nHardtop Roof\nSofttop Roof", "Select", "Back");
			}
			if(listitem == 7) //Spoilers
			{
				ShowPlayerDialog(playerid, TUNE_MENU_SPOILER, DIALOG_STYLE_LIST, "Spoiler", "Alien Spoiler\nX-Flow Spoiler", "Select", "Back");
			}
			if(listitem == 8) //SideSkirts
			{
				ShowPlayerDialog(playerid, TUNE_MENU_SSKIRT, DIALOG_STYLE_LIST, "SideSkirt", "Wheel Arch Alien Side Skirts\nWheel Arch X-Flow Side Skirts\nChrome Strip\nChrome Flames\nChrome Arches\nChrome Trim\nWheelcovers", "Select", "Back");
			}
	        if(listitem == 9) //Bullbars
			{
				ShowPlayerDialog(playerid, TUNE_MENU_BAR, DIALOG_STYLE_LIST, "Bullbar", "Chrome Grill\nChrome Bars\nChrome Lights\nChrome Bullbar", "Select", "Back");
			}
			if(listitem == 10) //Wheels
			{
				ShowPlayerDialog(playerid, TUNE_MENU_WHEEL, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar", "Select", "Back");
			}
			if(listitem == 11) //Car stereo
			{
				ShowPlayerDialog(playerid, TUNE_MENU_STEREO, DIALOG_STYLE_LIST, "Car Stereo.", "Bass Boost\nSuper Bass Boost\nUltra Bass Boost\nKing Bass Boost", "Select", "Back");
			}
	   	}
	}

	if(dialogid == TUNE_MENU_PJOB) //Paintjobs
	{
		if(response)
		{
			if(listitem == 0)
			{
               ChangeVehiclePaintjob(car,0);
               PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			   ShowPlayerDialog(playerid, TUNE_MENU_PJOB, DIALOG_STYLE_LIST, "Paint job + Hyds", "Paint Job 1\nPaint Job 2\nPaint Job 3\nHydraulics", "Select", "Back");
			}
			if(listitem == 1)
			{
               ChangeVehiclePaintjob(car,1);
               PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			   ShowPlayerDialog(playerid, TUNE_MENU_PJOB, DIALOG_STYLE_LIST, "Paint job + Hyds", "Paint Job 1\nPaint Job 2\nPaint Job 3\nHydraulics", "Select", "Back");
			}
			if(listitem == 2)
			{
               ChangeVehiclePaintjob(car,2);
               PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			   ShowPlayerDialog(playerid, TUNE_MENU_PJOB, DIALOG_STYLE_LIST, "Paint job + Hyds", "Paint Job 1\nPaint Job 2\nPaint Job 3\nHydraulics", "Select", "Back");
			}
			if(listitem == 3)//Hydraulics
			{
		         AddVehicleComponent(car,1087);
		         PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		         ShowPlayerDialog(playerid, TUNE_MENU_PJOB, DIALOG_STYLE_LIST, "Paint job + Hyds", "Paint Job 1\nPaint Job 2\nPaint Job 3\nHydraulics", "Select", "Back");
			}
	   	}
		else
	        ShowPlayerDialog(playerid, TUNE_MENU_MAIN, DIALOG_STYLE_LIST, "Tune you shitty car",TUNE_MENU_STR, "Select", "Exit");
	}

	if(dialogid == TUNE_MENU_EXHAUST) //Exhausts
	{
		if(response)
		{
			if(listitem == 0)//Wheel Arch Cars Alien Exausts
			{
	            if(modelid == 562)
	            {
	            	AddVehicleComponent(car,1034);
	            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	            	ShowPlayerDialog(playerid, TUNE_MENU_EXHAUST, DIALOG_STYLE_LIST, "Exhaust", "Wheel Arch Alien Exhaust\nWheel Arch X-Flow Exhaust\nChromer Exhaust\nSlamin Exhaust", "Select", "Back");
				}
				else if(modelid == 565)
				{
				    AddVehicleComponent(car,1046);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			     	ShowPlayerDialog(playerid, TUNE_MENU_EXHAUST, DIALOG_STYLE_LIST, "Exhaust", "Wheel Arch Alien Exhaust\nWheel Arch X-Flow Exhaust\nChromer Exhaust\nSlamin Exhaust", "Select", "Back");
				}
				else if(modelid == 559)
				{
				    AddVehicleComponent(car,1065);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_EXHAUST, DIALOG_STYLE_LIST, "Exhaust", "Wheel Arch Alien Exhaust\nWheel Arch X-Flow Exhaust\nChromer Exhaust\nSlamin Exhaust", "Select", "Back");
				}
				else if(modelid == 561)
				{
				    AddVehicleComponent(car,1064);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_EXHAUST, DIALOG_STYLE_LIST, "Exhaust", "Wheel Arch Alien Exhaust\nWheel Arch X-Flow Exhaust\nChromer Exhaust\nSlamin Exhaust", "Select", "Back");
				}
				else if(modelid == 560)
				{
				    AddVehicleComponent(car,1028);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_EXHAUST, DIALOG_STYLE_LIST, "Exhaust", "Wheel Arch Alien Exhaust\nWheel Arch X-Flow Exhaust\nChromer Exhaust\nSlamin Exhaust", "Select", "Back");
				}
				else if(modelid == 558)
				{
				    AddVehicleComponent(car,1089);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			 	    ShowPlayerDialog(playerid, TUNE_MENU_EXHAUST, DIALOG_STYLE_LIST, "Exhaust", "Wheel Arch Alien Exhaust\nWheel Arch X-Flow Exhaust\nChromer Exhaust\nSlamin Exhaust", "Select", "Back");
    			}
				else
				{
				    AddVehicleComponent(car,1089);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			 	    ShowPlayerDialog(playerid, TUNE_MENU_EXHAUST, DIALOG_STYLE_LIST, "Exhaust", "Wheel Arch Alien Exhaust\nWheel Arch X-Flow Exhaust\nChromer Exhaust\nSlamin Exhaust", "Select", "Back");
    			}
	        }
			if(listitem == 1)//Wheel Arch Cars X-Flow Exausts
	        {
		        if(modelid == 562)
		        {
		            AddVehicleComponent(car,1037);
		            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		            ShowPlayerDialog(playerid, TUNE_MENU_EXHAUST, DIALOG_STYLE_LIST, "Exhaust", "Wheel Arch Alien Exhaust\nWheel Arch X-Flow Exhaust\nChromer Exhaust\nSlamin Exhaust", "Select", "Back");
				}
				else if(modelid == 565)
				{
				    AddVehicleComponent(car,1045);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_EXHAUST, DIALOG_STYLE_LIST, "Exhaust", "Wheel Arch Alien Exhaust\nWheel Arch X-Flow Exhaust\nChromer Exhaust\nSlamin Exhaust", "Select", "Back");
				}
				else if(modelid == 559)
				{
				    AddVehicleComponent(car,1066);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_EXHAUST, DIALOG_STYLE_LIST, "Exhaust", "Wheel Arch Alien Exhaust\nWheel Arch X-Flow Exhaust\nChromer Exhaust\nSlamin Exhaust", "Select", "Back");
				}
				else if(modelid == 561)
				{
				    AddVehicleComponent(car,1059);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_EXHAUST, DIALOG_STYLE_LIST, "Exhaust", "Wheel Arch Alien Exhaust\nWheel Arch X-Flow Exhaust\nChromer Exhaust\nSlamin Exhaust", "Select", "Back");
				}
				else if(modelid == 560)
				{
				    AddVehicleComponent(car,1029);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_EXHAUST, DIALOG_STYLE_LIST, "Exhaust", "Wheel Arch Alien Exhaust\nWheel Arch X-Flow Exhaust\nChromer Exhaust\nSlamin Exhaust", "Select", "Back");
				}
				else if(modelid == 558)
				{
				    AddVehicleComponent(car,1092);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_EXHAUST, DIALOG_STYLE_LIST, "Exhaust", "Wheel Arch Alien Exhaust\nWheel Arch X-Flow Exhaust\nChromer Exhaust\nSlamin Exhaust", "Select", "Back");
				}
				else
				{
				    AddVehicleComponent(car,1092);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_EXHAUST, DIALOG_STYLE_LIST, "Exhaust", "Wheel Arch Alien Exhaust\nWheel Arch X-Flow Exhaust\nChromer Exhaust\nSlamin Exhaust", "Select", "Back");
				}
	        }
			if(listitem == 2)//Co. Cars Chromer Exausts
	        {
		        if(modelid == 575)
		        {
		            AddVehicleComponent(car,1044);
		            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	             	ShowPlayerDialog(playerid, TUNE_MENU_EXHAUST, DIALOG_STYLE_LIST, "Exhaust", "Wheel Arch Alien Exhaust\nWheel Arch X-Flow Exhaust\nChromer Exhaust\nSlamin Exhaust", "Select", "Back");
				}
				else if(modelid == 534)
				{
				    AddVehicleComponent(car,1126);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_EXHAUST, DIALOG_STYLE_LIST, "Exhaust", "Wheel Arch Alien Exhaust\nWheel Arch X-Flow Exhaust\nChromer Exhaust\nSlamin Exhaust", "Select", "Back");
				}
				else if(modelid == 567)
				{
				    AddVehicleComponent(car,1129);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
                    ShowPlayerDialog(playerid, TUNE_MENU_EXHAUST, DIALOG_STYLE_LIST, "Exhaust", "Wheel Arch Alien Exhaust\nWheel Arch X-Flow Exhaust\nChromer Exhaust\nSlamin Exhaust", "Select", "Back");
				}
				else if(modelid == 536)
				{
				    AddVehicleComponent(car,1104);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_EXHAUST, DIALOG_STYLE_LIST, "Exhaust", "Wheel Arch Alien Exhaust\nWheel Arch X-Flow Exhaust\nChromer Exhaust\nSlamin Exhaust", "Select", "Back");
				}
				else if(modelid == 535)
				{
				    AddVehicleComponent(car,1113);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_EXHAUST, DIALOG_STYLE_LIST, "Exhaust", "Wheel Arch Alien Exhaust\nWheel Arch X-Flow Exhaust\nChromer Exhaust\nSlamin Exhaust", "Select", "Back");
				}
				else if(modelid == 576)
				{
				    AddVehicleComponent(car,1136);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				   	ShowPlayerDialog(playerid, TUNE_MENU_EXHAUST, DIALOG_STYLE_LIST, "Exhaust", "Wheel Arch Alien Exhaust\nWheel Arch X-Flow Exhaust\nChromer Exhaust\nSlamin Exhaust", "Select", "Back");
				}
				else
				{
				    AddVehicleComponent(car,1136);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				   	ShowPlayerDialog(playerid, TUNE_MENU_EXHAUST, DIALOG_STYLE_LIST, "Exhaust", "Wheel Arch Alien Exhaust\nWheel Arch X-Flow Exhaust\nChromer Exhaust\nSlamin Exhaust", "Select", "Back");
				}
	        }
			if(listitem == 3)//Co. Cars Salmin Exausts
	        {
		        if(modelid == 575)
		        {
		            AddVehicleComponent(car,1043);
		            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		            ShowPlayerDialog(playerid, TUNE_MENU_EXHAUST, DIALOG_STYLE_LIST, "Exhaust", "Wheel Arch Alien Exhaust\nWheel Arch X-Flow Exhaust\nChromer Exhaust\nSlamin Exhaust", "Select", "Back");
				}
				else if(modelid == 534)
				{
				    AddVehicleComponent(car,1127);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_EXHAUST, DIALOG_STYLE_LIST, "Exhaust", "Wheel Arch Alien Exhaust\nWheel Arch X-Flow Exhaust\nChromer Exhaust\nSlamin Exhaust", "Select", "Back");
				}
				else if(modelid == 567)
				{
				    AddVehicleComponent(car,1132);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_EXHAUST, DIALOG_STYLE_LIST, "Exhaust", "Wheel Arch Alien Exhaust\nWheel Arch X-Flow Exhaust\nChromer Exhaust\nSlamin Exhaust", "Select", "Back");
				}
				else if(modelid == 536)
				{
				    AddVehicleComponent(car,1105);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_EXHAUST, DIALOG_STYLE_LIST, "Exhaust", "Wheel Arch Alien Exhaust\nWheel Arch X-Flow Exhaust\nChromer Exhaust\nSlamin Exhaust", "Select", "Back");
				}
				else if(modelid == 535)
				{
				    AddVehicleComponent(car,1114);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_EXHAUST, DIALOG_STYLE_LIST, "Exhaust", "Wheel Arch Alien Exhaust\nWheel Arch X-Flow Exhaust\nChromer Exhaust\nSlamin Exhaust", "Select", "Back");
				}
				else if(modelid == 576)
				{
				    AddVehicleComponent(car,1135);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_EXHAUST, DIALOG_STYLE_LIST, "Exhaust", "Wheel Arch Alien Exhaust\nWheel Arch X-Flow Exhaust\nChromer Exhaust\nSlamin Exhaust", "Select", "Back");
				}
				else
				{
				    AddVehicleComponent(car,1135);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_EXHAUST, DIALOG_STYLE_LIST, "Exhaust", "Wheel Arch Alien Exhaust\nWheel Arch X-Flow Exhaust\nChromer Exhaust\nSlamin Exhaust", "Select", "Back");
				}
	        }
	    }
		else
	        ShowPlayerDialog(playerid, TUNE_MENU_MAIN, DIALOG_STYLE_LIST, "Tune you shitty car",TUNE_MENU_STR, "Select", "Exit");
	}

	if(dialogid == TUNE_MENU_FBUMPER)//Front Bumpers
	{
		if(response)
		{
			if(listitem == 0)//Wheel Arch Cars Alien Front Bumper
			{
	            if(modelid == 562)
	            {
	            	AddVehicleComponent(car,1171);
	            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
              		ShowPlayerDialog(playerid, TUNE_MENU_FBUMPER, DIALOG_STYLE_LIST, "Front Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nChromer bumper\nSlamin bumper", "Select", "Back");
				}
				else if(modelid == 565)
				{
				    AddVehicleComponent(car,1153);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_FBUMPER, DIALOG_STYLE_LIST, "Front Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nChromer bumper\nSlamin bumper", "Select", "Back");
				}
				else if(modelid == 559)
				{
				    AddVehicleComponent(car,1160);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_FBUMPER, DIALOG_STYLE_LIST, "Front Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nChromer bumper\nSlamin bumper", "Select", "Back");
				}
				else if(modelid == 561)
				{
				    AddVehicleComponent(car,1155);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_FBUMPER, DIALOG_STYLE_LIST, "Front Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nChromer bumper\nSlamin bumper", "Select", "Back");
				}
				else if(modelid == 560)
				{
				    AddVehicleComponent(car,1169);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_FBUMPER, DIALOG_STYLE_LIST, "Front Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nChromer bumper\nSlamin bumper", "Select", "Back");
				}
				else if(modelid == 558)
				{
				    AddVehicleComponent(car,1166);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			 	    ShowPlayerDialog(playerid, TUNE_MENU_FBUMPER, DIALOG_STYLE_LIST, "Front Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nChromer bumper\nSlamin bumper", "Select", "Back");
				}
				else
				{
				    AddVehicleComponent(car,1166);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			 	    ShowPlayerDialog(playerid, TUNE_MENU_FBUMPER, DIALOG_STYLE_LIST, "Front Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nChromer bumper\nSlamin bumper", "Select", "Back");
				}
	        }
			if(listitem == 1)//Wheel Arch Cars X-Flow Front Bumper
	        {
		        if(modelid == 562)
		        {
		            AddVehicleComponent(car,1172);
		            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		            ShowPlayerDialog(playerid, TUNE_MENU_FBUMPER, DIALOG_STYLE_LIST, "Front Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nChromer bumper\nSlamin bumper", "Select", "Back");
				}
				else if(modelid == 565)
				{
				    AddVehicleComponent(car,1152);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_FBUMPER, DIALOG_STYLE_LIST, "Front Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nChromer bumper\nSlamin bumper", "Select", "Back");
				}
				else if(modelid == 559)
				{
				    AddVehicleComponent(car,1173);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_FBUMPER, DIALOG_STYLE_LIST, "Front Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nChromer bumper\nSlamin bumper", "Select", "Back");
				}
				else if(modelid == 561)
				{
				    AddVehicleComponent(car,1157);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_FBUMPER, DIALOG_STYLE_LIST, "Front Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nChromer bumper\nSlamin bumper", "Select", "Back");
				}
				else if(modelid == 560)
				{
				    AddVehicleComponent(car,1170);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_FBUMPER, DIALOG_STYLE_LIST, "Front Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nChromer bumper\nSlamin bumper", "Select", "Back");
				}
				else if(modelid == 558)
				{
				    AddVehicleComponent(car,1165);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_FBUMPER, DIALOG_STYLE_LIST, "Front Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nChromer bumper\nSlamin bumper", "Select", "Back");
				}
				else
				{
				    AddVehicleComponent(car,1165);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_FBUMPER, DIALOG_STYLE_LIST, "Front Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nChromer bumper\nSlamin bumper", "Select", "Back");
				}
		    }
			if(listitem == 2)//Co. Car Chromer Front Bumper
	        {
		        if(modelid == 575)
		        {
		            AddVehicleComponent(car,1174);
		            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		            ShowPlayerDialog(playerid, TUNE_MENU_FBUMPER, DIALOG_STYLE_LIST, "Front Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nChromer bumper\nSlamin bumper", "Select", "Back");
				}
				else if(modelid == 534)
				{
				    AddVehicleComponent(car,1179);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_FBUMPER, DIALOG_STYLE_LIST, "Front Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nChromer bumper\nSlamin bumper", "Select", "Back");
				}
				else if(modelid == 567)
				{
				    AddVehicleComponent(car,1189);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_FBUMPER, DIALOG_STYLE_LIST, "Front Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nChromer bumper\nSlamin bumper", "Select", "Back");
				}
				else if(modelid == 536)
				{
				    AddVehicleComponent(car,1182);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_FBUMPER, DIALOG_STYLE_LIST, "Front Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nChromer bumper\nSlamin bumper", "Select", "Back");
				}
				else if(modelid == 535)
				{
				    AddVehicleComponent(car,1115);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_FBUMPER, DIALOG_STYLE_LIST, "Front Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nChromer bumper\nSlamin bumper", "Select", "Back");
				}
				else if(modelid == 576)
				{
				    AddVehicleComponent(car,1191);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_FBUMPER, DIALOG_STYLE_LIST, "Front Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nChromer bumper\nSlamin bumper", "Select", "Back");
				}
				else
				{
				    AddVehicleComponent(car,1191);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_FBUMPER, DIALOG_STYLE_LIST, "Front Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nChromer bumper\nSlamin bumper", "Select", "Back");
				}
			}
			if(listitem == 3)//Co. Salmin Front Bumper
	        {
		        if(modelid == 575)
		        {
		            AddVehicleComponent(car,1175);
		            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		            ShowPlayerDialog(playerid, TUNE_MENU_FBUMPER, DIALOG_STYLE_LIST, "Front Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nChromer bumper\nSlamin bumper", "Select", "Back");
				}
				else if(modelid == 534)
				{
				    AddVehicleComponent(car,1185);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_FBUMPER, DIALOG_STYLE_LIST, "Front Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nChromer bumper\nSlamin bumper", "Select", "Back");
				}
				else if(modelid == 567)
				{
				    AddVehicleComponent(car,1188);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_FBUMPER, DIALOG_STYLE_LIST, "Front Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nChromer bumper\nSlamin bumper", "Select", "Back");
				}
				else if(modelid == 536)
				{
				    AddVehicleComponent(car,1181);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_FBUMPER, DIALOG_STYLE_LIST, "Front Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nChromer bumper\nSlamin bumper", "Select", "Back");
				}
                else if(modelid == 535)
				{
				    AddVehicleComponent(car,1116);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_FBUMPER, DIALOG_STYLE_LIST, "Front Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nChromer bumper\nSlamin bumper", "Select", "Back");
				}
				else if(modelid == 576)
				{
				    AddVehicleComponent(car,1190);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_FBUMPER, DIALOG_STYLE_LIST, "Front Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nChromer bumper\nSlamin bumper", "Select", "Back");
				}
				else
				{
				    AddVehicleComponent(car,1190);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_FBUMPER, DIALOG_STYLE_LIST, "Front Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nChromer bumper\nSlamin bumper", "Select", "Back");
				}
	        }
	    }
		else
	        ShowPlayerDialog(playerid, TUNE_MENU_MAIN, DIALOG_STYLE_LIST, "Tune you shitty car",TUNE_MENU_STR, "Select", "Exit");
	}

	if(dialogid == TUNE_MENU_RBUMPER)//Rear Bumpers
	{
		if(response)
		{
			if(listitem == 0)//Wheel Arch Cars Alien Rear Bumper
			{
	            if(modelid == 562)
	            {
	            	AddVehicleComponent(car,1149);
	            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
              		ShowPlayerDialog(playerid, TUNE_MENU_RBUMPER, DIALOG_STYLE_LIST, "Rear Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nChromer bumper\nSlamin bumper", "Select", "Back");
				}
				else if(modelid == 565)
				{
				    AddVehicleComponent(car,1150);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_RBUMPER, DIALOG_STYLE_LIST, "Rear Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nChromer bumper\nSlamin bumper", "Select", "Back");
				}
				else if(modelid == 559)
				{
				    AddVehicleComponent(car,1159);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_RBUMPER, DIALOG_STYLE_LIST, "Rear Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nChromer bumper\nSlamin bumper", "Select", "Back");
				}
				else if(modelid == 561)
				{
				    AddVehicleComponent(car,1154);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_RBUMPER, DIALOG_STYLE_LIST, "Rear Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nChromer bumper\nSlamin bumper", "Select", "Back");
				}
				else if(modelid == 560)
				{
				    AddVehicleComponent(car,1141);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_RBUMPER, DIALOG_STYLE_LIST, "Rear Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nChromer bumper\nSlamin bumper", "Select", "Back");
				}
				else if(modelid == 558)
				{
				    AddVehicleComponent(car,1168);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			 	    ShowPlayerDialog(playerid, TUNE_MENU_RBUMPER, DIALOG_STYLE_LIST, "Rear Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nChromer bumper\nSlamin bumper", "Select", "Back");
				}
				else
				{
				    AddVehicleComponent(car,1168);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			 	    ShowPlayerDialog(playerid, TUNE_MENU_RBUMPER, DIALOG_STYLE_LIST, "Rear Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nChromer bumper\nSlamin bumper", "Select", "Back");
				}
	        }
			if(listitem == 1)//Wheel Arch Cars X-Flow Rear Bumper
	        {
		        if(modelid == 562)
		        {
		            AddVehicleComponent(car,1148);
		            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		            ShowPlayerDialog(playerid, TUNE_MENU_RBUMPER, DIALOG_STYLE_LIST, "Rear Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nChromer bumper\nSlamin bumper", "Select", "Back");
				}
				else if(modelid == 565)
				{
				    AddVehicleComponent(car,1151);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_RBUMPER, DIALOG_STYLE_LIST, "Rear Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nChromer bumper\nSlamin bumper", "Select", "Back");
				}
				else if(modelid == 559)
				{
				    AddVehicleComponent(car,1161);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_RBUMPER, DIALOG_STYLE_LIST, "Rear Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nChromer bumper\nSlamin bumper", "Select", "Back");
				}
				else if(modelid == 561)
				{
				    AddVehicleComponent(car,1156);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_RBUMPER, DIALOG_STYLE_LIST, "Rear Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nChromer bumper\nSlamin bumper", "Select", "Back");
				}
				else if(modelid == 560)
				{
				    AddVehicleComponent(car,1140);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_RBUMPER, DIALOG_STYLE_LIST, "Rear Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nChromer bumper\nSlamin bumper", "Select", "Back");
				}
				else if(modelid == 558)
				{
				    AddVehicleComponent(car,1167);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_RBUMPER, DIALOG_STYLE_LIST, "Rear Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nChromer bumper\nSlamin bumper", "Select", "Back");
				}
				else
				{
				    AddVehicleComponent(car,1167);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_RBUMPER, DIALOG_STYLE_LIST, "Rear Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nChromer bumper\nSlamin bumper", "Select", "Back");
				}
	        }
			if(listitem == 2)//Co. Cars Chromer Rear Bumper
	        {
		        if(modelid == 575)
		        {
		            AddVehicleComponent(car,1176);
		            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		            ShowPlayerDialog(playerid, TUNE_MENU_RBUMPER, DIALOG_STYLE_LIST, "Rear Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nChromer bumper\nSlamin bumper", "Select", "Back");
				}
				else if(modelid == 534)
				{
				    AddVehicleComponent(car,1180);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_RBUMPER, DIALOG_STYLE_LIST, "Rear Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nChromer bumper\nSlamin bumper", "Select", "Back");
				}
				else if(modelid == 567)
				{
				    AddVehicleComponent(car,1187);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_RBUMPER, DIALOG_STYLE_LIST, "Rear Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nChromer bumper\nSlamin bumper", "Select", "Back");
				}
				else if(modelid == 536)
				{
				    AddVehicleComponent(car,1184);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_RBUMPER, DIALOG_STYLE_LIST, "Rear Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nChromer bumper\nSlamin bumper", "Select", "Back");
				}
				else if(modelid == 535)
				{
				    AddVehicleComponent(car,1109);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_RBUMPER, DIALOG_STYLE_LIST, "Rear Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nChromer bumper\nSlamin bumper", "Select", "Back");
				}
				else if(modelid == 576)
				{
				    AddVehicleComponent(car,1192);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_RBUMPER, DIALOG_STYLE_LIST, "Rear Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nChromer bumper\nSlamin bumper", "Select", "Back");
				}
				else
				{
				    AddVehicleComponent(car,1192);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_RBUMPER, DIALOG_STYLE_LIST, "Rear Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nChromer bumper\nSlamin bumper", "Select", "Back");
				}
	        }
			if(listitem == 3)//Co. Cars Salmin Rear Bumper
	        {
		        if(modelid == 575)
		        {
		            AddVehicleComponent(car,1177);
		            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		            ShowPlayerDialog(playerid, TUNE_MENU_RBUMPER, DIALOG_STYLE_LIST, "Rear Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nChromer bumper\nSlamin bumper", "Select", "Back");
				}
				else if(modelid == 534)
				{
				    AddVehicleComponent(car,1178);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_RBUMPER, DIALOG_STYLE_LIST, "Rear Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nChromer bumper\nSlamin bumper", "Select", "Back");
				}
				else if(modelid == 567)
				{
				    AddVehicleComponent(car,1186);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_RBUMPER, DIALOG_STYLE_LIST, "Rear Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nChromer bumper\nSlamin bumper", "Select", "Back");
				}
				else if(modelid == 536)
				{
				    AddVehicleComponent(car,1183);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_RBUMPER, DIALOG_STYLE_LIST, "Rear Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nChromer bumper\nSlamin bumper", "Select", "Back");
				}
				else if(modelid == 535)
				{
				    AddVehicleComponent(car,1110);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_RBUMPER, DIALOG_STYLE_LIST, "Rear Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nChromer bumper\nSlamin bumper", "Select", "Back");
				}
				else if(modelid == 576)
				{
				    AddVehicleComponent(car,1193);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_RBUMPER, DIALOG_STYLE_LIST, "Rear Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nChromer bumper\nSlamin bumper", "Select", "Back");
				}
				else
				{
				    AddVehicleComponent(car,1193);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_RBUMPER, DIALOG_STYLE_LIST, "Rear Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nChromer bumper\nSlamin bumper", "Select", "Back");
				}
	        }
	    }
		else
	        ShowPlayerDialog(playerid, TUNE_MENU_MAIN, DIALOG_STYLE_LIST, "Tune you shitty car",TUNE_MENU_STR, "Select", "Exit");
	}

	if(dialogid == TUNE_MENU_ROOF)//Roofs
	{
		if(response)
		{
			if(listitem == 0)//Wheel Arch Cars Alien Roof Vent
			{
	            if(modelid == 562)
	            {
	            	AddVehicleComponent(car,1035);
	            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
              		ShowPlayerDialog(playerid, TUNE_MENU_ROOF, DIALOG_STYLE_LIST, "Roof", "Wheel Arch Alien Roof Vent\nWheel Arch X-Flow Roof Vent\nHardtop Roof\nSofttop Roof", "Select", "Back");
				}
				else if(modelid == 565)
				{
				    AddVehicleComponent(car,1054);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_ROOF, DIALOG_STYLE_LIST, "Roof", "Wheel Arch Alien Roof Vent\nWheel Arch X-Flow Roof Vent\nHardtop Roof\nSofttop Roof", "Select", "Back");
				}
				else if(modelid == 559)
				{
				    AddVehicleComponent(car,1067);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_ROOF, DIALOG_STYLE_LIST, "Roof", "Wheel Arch Alien Roof Vent\nWheel Arch X-Flow Roof Vent\nHardtop Roof\nSofttop Roof", "Select", "Back");
				}
				else if(modelid == 561)
				{
				    AddVehicleComponent(car,1055);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_ROOF, DIALOG_STYLE_LIST, "Roof", "Wheel Arch Alien Roof Vent\nWheel Arch X-Flow Roof Vent\nHardtop Roof\nSofttop Roof", "Select", "Back");
				}
				else if(modelid == 560)
				{
				    AddVehicleComponent(car,1032);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_ROOF, DIALOG_STYLE_LIST, "Roof", "Wheel Arch Alien Roof Vent\nWheel Arch X-Flow Roof Vent\nHardtop Roof\nSofttop Roof", "Select", "Back");
				}
				else if(modelid == 558)
				{
				    AddVehicleComponent(car,1088);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			 	    ShowPlayerDialog(playerid, TUNE_MENU_ROOF, DIALOG_STYLE_LIST, "Roof", "Wheel Arch Alien Roof Vent\nWheel Arch X-Flow Roof Vent\nHardtop Roof\nSofttop Roof", "Select", "Back");
				}
				else
				{
				    AddVehicleComponent(car,1088);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			 	    ShowPlayerDialog(playerid, TUNE_MENU_ROOF, DIALOG_STYLE_LIST, "Roof", "Wheel Arch Alien Roof Vent\nWheel Arch X-Flow Roof Vent\nHardtop Roof\nSofttop Roof", "Select", "Back");
				}
	        }
	        if(listitem == 1)//Wheel Arch Cars X-Flow Roof Vent
			{
		        if(modelid == 562)
		        {
		            AddVehicleComponent(car,1035);
		            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		            ShowPlayerDialog(playerid, TUNE_MENU_ROOF, DIALOG_STYLE_LIST, "Roof", "Wheel Arch Alien Roof Vent\nWheel Arch X-Flow Roof Vent\nHardtop Roof\nSofttop Roof", "Select", "Back");
				}
				else if(modelid == 565)
				{
				    AddVehicleComponent(car,1053);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_ROOF, DIALOG_STYLE_LIST, "Roof", "Wheel Arch Alien Roof Vent\nWheel Arch X-Flow Roof Vent\nHardtop Roof\nSofttop Roof", "Select", "Back");
				}
				else if(modelid == 559)
				{
				    AddVehicleComponent(car,1068);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_ROOF, DIALOG_STYLE_LIST, "Roof", "Wheel Arch Alien Roof Vent\nWheel Arch X-Flow Roof Vent\nHardtop Roof\nSofttop Roof", "Select", "Back");
				}
				else if(modelid == 561)
				{
				    AddVehicleComponent(car,1061);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_ROOF, DIALOG_STYLE_LIST, "Roof", "Wheel Arch Alien Roof Vent\nWheel Arch X-Flow Roof Vent\nHardtop Roof\nSofttop Roof", "Select", "Back");
				}
				else if(modelid == 560)
				{
				    AddVehicleComponent(car,1033);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_ROOF, DIALOG_STYLE_LIST, "Roof", "Wheel Arch Alien Roof Vent\nWheel Arch X-Flow Roof Vent\nHardtop Roof\nSofttop Roof", "Select", "Back");
				}
				else if(modelid == 558)
				{
				    AddVehicleComponent(car,1091);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_ROOF, DIALOG_STYLE_LIST, "Roof", "Wheel Arch Alien Roof Vent\nWheel Arch X-Flow Roof Vent\nHardtop Roof\nSofttop Roof", "Select", "Back");
				}
				else
				{
				    AddVehicleComponent(car,1091);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_ROOF, DIALOG_STYLE_LIST, "Roof", "Wheel Arch Alien Roof Vent\nWheel Arch X-Flow Roof Vent\nHardtop Roof\nSofttop Roof", "Select", "Back");
				}
			}
			if(listitem == 2)//Co. Cars Hardtop Roof
			{
		        if(modelid == 567)
		        {
		            AddVehicleComponent(car,1130);
		            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		            ShowPlayerDialog(playerid, TUNE_MENU_ROOF, DIALOG_STYLE_LIST, "Roof", "Wheel Arch Alien Roof Vent\nWheel Arch X-Flow Roof Vent\nHardtop Roof\nSofttop Roof", "Select", "Back");
				}
   				else if(modelid == 536)
				{
				    AddVehicleComponent(car,1128);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_ROOF, DIALOG_STYLE_LIST, "Roof", "Wheel Arch Alien Roof Vent\nWheel Arch X-Flow Roof Vent\nHardtop Roof\nSofttop Roof", "Select", "Back");
				}
   				else
				{
				    AddVehicleComponent(car,1128);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_ROOF, DIALOG_STYLE_LIST, "Roof", "Wheel Arch Alien Roof Vent\nWheel Arch X-Flow Roof Vent\nHardtop Roof\nSofttop Roof", "Select", "Back");
				}
	        }
		    if(listitem == 3)//Co. Cars Softtop Roof
			{
		        if(modelid == 567)
		        {
		            AddVehicleComponent(car,1131);
		            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		            ShowPlayerDialog(playerid, TUNE_MENU_ROOF, DIALOG_STYLE_LIST, "Roof", "Wheel Arch Alien Roof Vent\nWheel Arch X-Flow Roof Vent\nHardtop Roof\nSofttop Roof", "Select", "Back");
				}
   				else if(modelid == 536)
				{
				    AddVehicleComponent(car,1103);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_ROOF, DIALOG_STYLE_LIST, "Roof", "Wheel Arch Alien Roof Vent\nWheel Arch X-Flow Roof Vent\nHardtop Roof\nSofttop Roof", "Select", "Back");
				}
   				else
				{
				    AddVehicleComponent(car,1103);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_ROOF, DIALOG_STYLE_LIST, "Roof", "Wheel Arch Alien Roof Vent\nWheel Arch X-Flow Roof Vent\nHardtop Roof\nSofttop Roof", "Select", "Back");
				}
	    	}
	   	}
		else
	        ShowPlayerDialog(playerid, TUNE_MENU_MAIN, DIALOG_STYLE_LIST, "Tune you shitty car",TUNE_MENU_STR, "Select", "Exit");
	}

	if(dialogid == TUNE_MENU_SPOILER)//Spoilers
   	{
		if(response)
		{
			if(listitem == 0)//Wheel Arch Cars Alien Spoilers
			{
	            if(modelid == 562)
	            {
	            	AddVehicleComponent(car,1147);
	            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
              		ShowPlayerDialog(playerid, TUNE_MENU_SPOILER, DIALOG_STYLE_LIST, "Spoiler", "Alien Spoiler\nX-Flow Spoiler", "Select", "Back");
				}
				else if(modelid == 565)
				{
				    AddVehicleComponent(car,1049);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_SPOILER, DIALOG_STYLE_LIST, "Spoiler", "Alien Spoiler\nX-Flow Spoiler", "Select", "Back");
				}
				else if(modelid == 559)
				{
				    AddVehicleComponent(car,1162);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_SPOILER, DIALOG_STYLE_LIST, "Spoiler", "Alien Spoiler\nX-Flow Spoiler", "Select", "Back");
				}
				else if(modelid == 561)
				{
				    AddVehicleComponent(car,1158);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_SPOILER, DIALOG_STYLE_LIST, "Spoiler", "Alien Spoiler\nX-Flow Spoiler", "Select", "Back");
				}
				else if(modelid == 560)
				{
				    AddVehicleComponent(car,1138);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_SPOILER, DIALOG_STYLE_LIST, "Spoiler", "Alien Spoiler\nX-Flow Spoiler", "Select", "Back");
				}
				else if(modelid == 558)
				{
				    AddVehicleComponent(car,1164);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			 	    ShowPlayerDialog(playerid, TUNE_MENU_SPOILER, DIALOG_STYLE_LIST, "Spoiler", "Alien Spoiler\nX-Flow Spoiler", "Select", "Back");
				}
				else
				{
				    AddVehicleComponent(car,1164);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			 	    ShowPlayerDialog(playerid, TUNE_MENU_SPOILER, DIALOG_STYLE_LIST, "Spoiler", "Alien Spoiler\nX-Flow Spoiler", "Select", "Back");
				}
    	    }
            if(listitem == 1)//Wheel Arch Cars X-Flow Spoilers
			{
			 	if(modelid == 562)
		        {
		            AddVehicleComponent(car,1146);
		            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		            ShowPlayerDialog(playerid, TUNE_MENU_SPOILER, DIALOG_STYLE_LIST, "Spoiler", "Alien Spoiler\nX-Flow Spoiler", "Select", "Back");
				}
				else if(modelid == 565)
				{
				    AddVehicleComponent(car,1150);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_SPOILER, DIALOG_STYLE_LIST, "Spoiler", "Alien Spoiler\nX-Flow Spoiler", "Select", "Back");
				}
				else if(modelid == 559)
				{
				    AddVehicleComponent(car,1158);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_SPOILER, DIALOG_STYLE_LIST, "Spoiler", "Alien Spoiler\nX-Flow Spoiler", "Select", "Back");
				}
				else if(modelid == 561)
				{
				    AddVehicleComponent(car,1060);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_SPOILER, DIALOG_STYLE_LIST, "Spoiler", "Alien Spoiler\nX-Flow Spoiler", "Select", "Back");
				}
				else if(modelid == 560)
				{
				    AddVehicleComponent(car,1139);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_SPOILER, DIALOG_STYLE_LIST, "Spoiler", "Alien Spoiler\nX-Flow Spoiler", "Select", "Back");
				}
				else if(modelid == 558)
				{
				    AddVehicleComponent(car,1163);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_SPOILER, DIALOG_STYLE_LIST, "Spoiler", "Alien Spoiler\nX-Flow Spoiler", "Select", "Back");
				}
				else
				{
				    AddVehicleComponent(car,1163);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_SPOILER, DIALOG_STYLE_LIST, "Spoiler", "Alien Spoiler\nX-Flow Spoiler", "Select", "Back");
				}
            }
	   	}
		else
            ShowPlayerDialog(playerid, TUNE_MENU_MAIN, DIALOG_STYLE_LIST, "Tune you shitty car",TUNE_MENU_STR, "Select", "Exit");
   	}

   	if(dialogid == TUNE_MENU_SSKIRT)//Sideskirts
	{
		if(response)
		{
			if(listitem == 0)//Wheel Arch Cars Alien Sideskirts
			{
	            if(modelid == 562)
	            {
	            	AddVehicleComponent(car,1036);
	            	AddVehicleComponent(car,1040);
	            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
              		ShowPlayerDialog(playerid, TUNE_MENU_SSKIRT, DIALOG_STYLE_LIST, "SideSkirt", "Wheel Arch Alien Side Skirts\nWheel Arch X-Flow Side Skirts\nChrome Strip\nChrome Flames\nChrome Arches\nChrome Trim\nWheelcovers", "Select", "Back");
				}
				else if(modelid == 565)
				{
				    AddVehicleComponent(car,1047);
				    AddVehicleComponent(car,1051);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_SSKIRT, DIALOG_STYLE_LIST, "SideSkirt", "Wheel Arch Alien Side Skirts\nWheel Arch X-Flow Side Skirts\nChrome Strip\nChrome Flames\nChrome Arches\nChrome Trim\nWheelcovers", "Select", "Back");
				}
				else if(modelid == 559)
				{
				    AddVehicleComponent(car,1069);
				    AddVehicleComponent(car,1071);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_SSKIRT, DIALOG_STYLE_LIST, "SideSkirt", "Wheel Arch Alien Side Skirts\nWheel Arch X-Flow Side Skirts\nChrome Strip\nChrome Flames\nChrome Arches\nChrome Trim\nWheelcovers", "Select", "Back");
				}
				else if(modelid == 561)
				{
				    AddVehicleComponent(car,1056);
				    AddVehicleComponent(car,1062);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_SSKIRT, DIALOG_STYLE_LIST, "SideSkirt", "Wheel Arch Alien Side Skirts\nWheel Arch X-Flow Side Skirts\nChrome Strip\nChrome Flames\nChrome Arches\nChrome Trim\nWheelcovers", "Select", "Back");
				}
				else if(modelid == 560)
				{
				    AddVehicleComponent(car,1026);
				    AddVehicleComponent(car,1027);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_SSKIRT, DIALOG_STYLE_LIST, "SideSkirt", "Wheel Arch Alien Side Skirts\nWheel Arch X-Flow Side Skirts\nChrome Strip\nChrome Flames\nChrome Arches\nChrome Trim\nWheelcovers", "Select", "Back");
				}
				else if(modelid == 558)
				{
				    AddVehicleComponent(car,1090);
				    AddVehicleComponent(car,1094);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			 	    ShowPlayerDialog(playerid, TUNE_MENU_SSKIRT, DIALOG_STYLE_LIST, "SideSkirt", "Wheel Arch Alien Side Skirts\nWheel Arch X-Flow Side Skirts\nChrome Strip\nChrome Flames\nChrome Arches\nChrome Trim\nWheelcovers", "Select", "Back");
				}
				else
				{
				    AddVehicleComponent(car,1090);
				    AddVehicleComponent(car,1094);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			 	    ShowPlayerDialog(playerid, TUNE_MENU_SSKIRT, DIALOG_STYLE_LIST, "SideSkirt", "Wheel Arch Alien Side Skirts\nWheel Arch X-Flow Side Skirts\nChrome Strip\nChrome Flames\nChrome Arches\nChrome Trim\nWheelcovers", "Select", "Back");
				}
		    }
	   	    if(listitem == 1)//Wheel Arch Cars X-Flow Sideskirts
			{
		        if(modelid == 562)
		        {
		            AddVehicleComponent(car,1039);
		            AddVehicleComponent(car,1041);
		            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		            ShowPlayerDialog(playerid, TUNE_MENU_SSKIRT, DIALOG_STYLE_LIST, "SideSkirt", "Wheel Arch Alien Side Skirts\nWheel Arch X-Flow Side Skirts\nChrome Strip\nChrome Flames\nChrome Arches\nChrome Trim\nWheelcovers", "Select", "Back");
				}
				else if(modelid == 565)
				{
				    AddVehicleComponent(car,1048);
				    AddVehicleComponent(car,1052);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_SSKIRT, DIALOG_STYLE_LIST, "SideSkirt", "Wheel Arch Alien Side Skirts\nWheel Arch X-Flow Side Skirts\nChrome Strip\nChrome Flames\nChrome Arches\nChrome Trim\nWheelcovers", "Select", "Back");
				}
				else if(modelid == 559)
				{
				    AddVehicleComponent(car,1070);
				    AddVehicleComponent(car,1072);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_SSKIRT, DIALOG_STYLE_LIST, "SideSkirt", "Wheel Arch Alien Side Skirts\nWheel Arch X-Flow Side Skirts\nChrome Strip\nChrome Flames\nChrome Arches\nChrome Trim\nWheelcovers", "Select", "Back");
				}
				else if(modelid == 561)
				{
				    AddVehicleComponent(car,1057);
				    AddVehicleComponent(car,1063);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_SSKIRT, DIALOG_STYLE_LIST, "SideSkirt", "Wheel Arch Alien Side Skirts\nWheel Arch X-Flow Side Skirts\nChrome Strip\nChrome Flames\nChrome Arches\nChrome Trim\nWheelcovers", "Select", "Back");
				}
				else if(modelid == 560)
				{
				    AddVehicleComponent(car,1031);
				    AddVehicleComponent(car,1030);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_SSKIRT, DIALOG_STYLE_LIST, "SideSkirt", "Wheel Arch Alien Side Skirts\nWheel Arch X-Flow Side Skirts\nChrome Strip\nChrome Flames\nChrome Arches\nChrome Trim\nWheelcovers", "Select", "Back");
				}
				else if(modelid == 558)
				{
				    AddVehicleComponent(car,1093);
				    AddVehicleComponent(car,1095);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_SSKIRT, DIALOG_STYLE_LIST, "SideSkirt", "Wheel Arch Alien Side Skirts\nWheel Arch X-Flow Side Skirts\nChrome Strip\nChrome Flames\nChrome Arches\nChrome Trim\nWheelcovers", "Select", "Back");
				}
				else
				{
				    AddVehicleComponent(car,1093);
				    AddVehicleComponent(car,1095);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_SSKIRT, DIALOG_STYLE_LIST, "SideSkirt", "Wheel Arch Alien Side Skirts\nWheel Arch X-Flow Side Skirts\nChrome Strip\nChrome Flames\nChrome Arches\nChrome Trim\nWheelcovers", "Select", "Back");
				}
		    }
		    if(listitem == 2)//Co. Cars Chrome Strip Sideskirts
			{
		        if(modelid == 575)
		        {
       		        AddVehicleComponent(car,1042);
       		        AddVehicleComponent(car,1099);
       		        PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		            ShowPlayerDialog(playerid, TUNE_MENU_SSKIRT, DIALOG_STYLE_LIST, "SideSkirt", "Wheel Arch Alien Side Skirts\nWheel Arch X-Flow Side Skirts\nChrome Strip\nChrome Flames\nChrome Arches\nChrome Trim\nWheelcovers", "Select", "Back");
				}
   				else if(modelid == 567)
				{
				    AddVehicleComponent(car,1102);
				    AddVehicleComponent(car,1133);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_SSKIRT, DIALOG_STYLE_LIST, "SideSkirt", "Wheel Arch Alien Side Skirts\nWheel Arch X-Flow Side Skirts\nChrome Strip\nChrome Flames\nChrome Arches\nChrome Trim\nWheelcovers", "Select", "Back");
                }
                else if(modelid == 576)
				{
				    AddVehicleComponent(car,1134);
				    AddVehicleComponent(car,1137);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_SSKIRT, DIALOG_STYLE_LIST, "SideSkirt", "Wheel Arch Alien Side Skirts\nWheel Arch X-Flow Side Skirts\nChrome Strip\nChrome Flames\nChrome Arches\nChrome Trim\nWheelcovers", "Select", "Back");
                }
                else if(modelid == 536)
				{
				    AddVehicleComponent(car,1108);
				    AddVehicleComponent(car,1107);
				    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				    ShowPlayerDialog(playerid, TUNE_MENU_SSKIRT, DIALOG_STYLE_LIST, "SideSkirt", "Wheel Arch Alien Side Skirts\nWheel Arch X-Flow Side Skirts\nChrome Strip\nChrome Flames\nChrome Arches\nChrome Trim\nWheelcovers", "Select", "Back");
                }
				else
				{
				    AddVehicleComponent(car,1042);
       		        AddVehicleComponent(car,1099);
       		        PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		            ShowPlayerDialog(playerid, TUNE_MENU_SSKIRT, DIALOG_STYLE_LIST, "SideSkirt", "Wheel Arch Alien Side Skirts\nWheel Arch X-Flow Side Skirts\nChrome Strip\nChrome Flames\nChrome Arches\nChrome Trim\nWheelcovers", "Select", "Back");
				}
	        }
	  	    if(listitem == 3)//Co. Cars Chrome Flames Sideskirts
			{
	            AddVehicleComponent(car,1122);
	            AddVehicleComponent(car,1101);
	            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	            ShowPlayerDialog(playerid, TUNE_MENU_SSKIRT, DIALOG_STYLE_LIST, "SideSkirt", "Wheel Arch Alien Side Skirts\nWheel Arch X-Flow Side Skirts\nChrome Strip\nChrome Flames\nChrome Arches\nChrome Trim\nWheelcovers", "Select", "Back");
			}
			if(listitem == 4)//Co. Cars Chrome Arches Sideskirts
			{
	            AddVehicleComponent(car,1106);
	            AddVehicleComponent(car,1124);
	            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	            ShowPlayerDialog(playerid, TUNE_MENU_SSKIRT, DIALOG_STYLE_LIST, "SideSkirt", "Wheel Arch Alien Side Skirts\nWheel Arch X-Flow Side Skirts\nChrome Strip\nChrome Flames\nChrome Arches\nChrome Trim\nWheelcovers", "Select", "Back");
			}
			if(listitem == 5)//Co. Cars Chrome Trim Sideskirts
			{
	            AddVehicleComponent(car,1118);
	            AddVehicleComponent(car,1120);
	            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	            ShowPlayerDialog(playerid, TUNE_MENU_SSKIRT, DIALOG_STYLE_LIST, "SideSkirt", "Wheel Arch Alien Side Skirts\nWheel Arch X-Flow Side Skirts\nChrome Strip\nChrome Flames\nChrome Arches\nChrome Trim\nWheelcovers", "Select", "Back");
			}
			if(listitem == 6)//Co. Cars Chrome Wheelcovers Sideskirts
			{
	            AddVehicleComponent(car,1119);
	            AddVehicleComponent(car,1121);
	            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	            ShowPlayerDialog(playerid, TUNE_MENU_SSKIRT, DIALOG_STYLE_LIST, "SideSkirt", "Wheel Arch Alien Side Skirts\nWheel Arch X-Flow Side Skirts\nChrome Strip\nChrome Flames\nChrome Arches\nChrome Trim\nWheelcovers", "Select", "Back");
			}
        }
		else
            ShowPlayerDialog(playerid, TUNE_MENU_MAIN, DIALOG_STYLE_LIST, "Tune you shitty car",TUNE_MENU_STR, "Select", "Exit");
   	}
   	if(dialogid == TUNE_MENU_BAR)//Bullbars
   	{
		if(response)
		{
			if(listitem == 0)//Co. Cars Chrome Grill
			{
	            AddVehicleComponent(car,1100);
	            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	            ShowPlayerDialog(playerid, TUNE_MENU_BAR, DIALOG_STYLE_LIST, "Bullbar", "Chrome Grill\nChrome Bars\nChrome Lights\nChrome Bullbar", "Select", "Back");
			 }
			if(listitem == 1)//Co. Cars Chrome Bars
			{
	            AddVehicleComponent(car,1123);
	            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	            ShowPlayerDialog(playerid, TUNE_MENU_BAR, DIALOG_STYLE_LIST, "Bullbar", "Chrome Grill\nChrome Bars\nChrome Lights\nChrome Bullbar", "Select", "Back");
			}
			if(listitem == 2)//Co. Cars Chrome Lights
			{
	            AddVehicleComponent(car,1125);
	            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	            ShowPlayerDialog(playerid, TUNE_MENU_BAR, DIALOG_STYLE_LIST, "Bullbar", "Chrome Grill\nChrome Bars\nChrome Lights\nChrome Bullbar", "Select", "Back");
			}
			if(listitem == 3)//Co. Cars Chrome Bullbar
			{
	            AddVehicleComponent(car,1117);
	            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	            ShowPlayerDialog(playerid, TUNE_MENU_BAR, DIALOG_STYLE_LIST, "Bullbar", "Chrome Grill\nChrome Bars\nChrome Lights\nChrome Bullbar", "Select", "Back");
			}
       	}
		else
            ShowPlayerDialog(playerid, TUNE_MENU_MAIN, DIALOG_STYLE_LIST, "Tune you shitty car",TUNE_MENU_STR, "Select", "Exit");
   	}

   	if(dialogid == TUNE_MENU_WHEEL)//Wheels
   	{
		if(response)
		{
			if(listitem == 0)//Offroad
			{
		         AddVehicleComponent(car,1025);
		         PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
                 ShowPlayerDialog(playerid, TUNE_MENU_WHEEL, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar", "Select", "Back");
	        }
            if(listitem == 1)//Mega
			{
			     AddVehicleComponent(car,1074);
			     PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			     ShowPlayerDialog(playerid, TUNE_MENU_WHEEL, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar", "Select", "Back");
			}
            if(listitem == 2)//Wires
			{
	             AddVehicleComponent(car,1076);
			     PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		         ShowPlayerDialog(playerid, TUNE_MENU_WHEEL, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar", "Select", "Back");
			}
	        if(listitem == 3)//Twist
			{
			     AddVehicleComponent(car,1078);
			     PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		         ShowPlayerDialog(playerid, TUNE_MENU_WHEEL, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar", "Select", "Back");
			}
			if(listitem == 4)//Groove
			{
			     AddVehicleComponent(car,1081);
			     PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		         ShowPlayerDialog(playerid, TUNE_MENU_WHEEL, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar", "Select", "Back");
			}
			if(listitem == 5)//Import
			{
                 AddVehicleComponent(car,1082);
                 PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		         ShowPlayerDialog(playerid, TUNE_MENU_WHEEL, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar", "Select", "Back");
			}
			if(listitem == 6)//Atomic
			{
			     AddVehicleComponent(car,1085);
			     PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		         ShowPlayerDialog(playerid, TUNE_MENU_WHEEL, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar", "Select", "Back");
			}
			if(listitem == 7)//Ahab
			{
			     AddVehicleComponent(car,1096);
			     PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		         ShowPlayerDialog(playerid, TUNE_MENU_WHEEL, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar", "Select", "Back");
			}
			if(listitem == 8)//Virtual
			{
                 AddVehicleComponent(car,1097);
                 PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		         ShowPlayerDialog(playerid, TUNE_MENU_WHEEL, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar", "Select", "Back");
			}
			if(listitem == 9)//Access
			{
			     AddVehicleComponent(car,1098);
			     PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		         ShowPlayerDialog(playerid, TUNE_MENU_WHEEL, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar", "Select", "Back");
			}
		    if(listitem == 10)//Trance
            {
		         AddVehicleComponent(car,1084);
		         PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		         ShowPlayerDialog(playerid, TUNE_MENU_WHEEL, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar", "Select", "Back");
            }
            if(listitem == 11)//Shadow
            {
		         AddVehicleComponent(car,1073);
		         PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		         ShowPlayerDialog(playerid, TUNE_MENU_WHEEL, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar", "Select", "Back");
            }
            if(listitem == 12)//Rimshine
            {
		         AddVehicleComponent(car,1075);
		         PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		         ShowPlayerDialog(playerid, TUNE_MENU_WHEEL, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar", "Select", "Back");
            }
            if(listitem == 13)//Classic
            {
		         AddVehicleComponent(car,1077);
		         PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		         ShowPlayerDialog(playerid, TUNE_MENU_WHEEL, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar", "Select", "Back");
            }
            if(listitem == 14)//Cutter
            {
		         AddVehicleComponent(car,1079);
		         PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		         ShowPlayerDialog(playerid, TUNE_MENU_WHEEL, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar", "Select", "Back");
            }
            if(listitem == 15)//Switch
            {
		         AddVehicleComponent(car,1080);
		         PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		         ShowPlayerDialog(playerid, TUNE_MENU_WHEEL, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar", "Select", "Back");
            }
            if(listitem == 16)//Dollar
            {
		         AddVehicleComponent(car,1083);
		         PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		         ShowPlayerDialog(playerid, TUNE_MENU_WHEEL, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar", "Select", "Back");
            }
		}
		else
            ShowPlayerDialog(playerid, TUNE_MENU_MAIN, DIALOG_STYLE_LIST, "Tune you shitty car",TUNE_MENU_STR, "Select", "Exit");
   	}

   	if(dialogid == TUNE_MENU_STEREO)//Car Stereo
   	{
		if(response)
		{
			if(listitem == 0)//Bass Boost
			{
		         AddVehicleComponent(car,1086);
		         PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		         ShowPlayerDialog(playerid, TUNE_MENU_STEREO, DIALOG_STYLE_LIST, "Car Stereo.", "Bass Boost\nSuper Bass Boost\nUltra Bass Boost\nKing Bass Boost", "Select", "Back");
			}
			if(listitem == 1)//Super Bass Boost
			{
		         AddVehicleComponent(car,1086);
		         PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		         ShowPlayerDialog(playerid, TUNE_MENU_STEREO, DIALOG_STYLE_LIST, "Car Stereo.", "Bass Boost\nSuper Bass Boost\nUltra Bass Boost\nKing Bass Boost", "Select", "Back");
			}
			if(listitem == 2)//Ultra Bass Boost
			{
		         AddVehicleComponent(car,1086);
                 PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		         ShowPlayerDialog(playerid, TUNE_MENU_STEREO, DIALOG_STYLE_LIST, "Car Stereo.", "Bass Boost\nSuper Bass Boost\nUltra Bass Boost\nKing Bass Boost", "Select", "Back");
			}
			if(listitem == 3)//King Bass Boost
			{
		         AddVehicleComponent(car,1086);
		         PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		         ShowPlayerDialog(playerid, TUNE_MENU_STEREO, DIALOG_STYLE_LIST, "Car Stereo.", "Bass Boost\nSuper Bass Boost\nUltra Bass Boost\nKing Bass Boost", "Select", "Back");
			}
		}
		else
            ShowPlayerDialog(playerid, TUNE_MENU_MAIN, DIALOG_STYLE_LIST, "Tune you shitty car",TUNE_MENU_STR, "Select", "Exit");
   	}
	return 0;
}
forward RandomMessages();
public RandomMessages()
{
	if(WConnectedPlayers()>0)
	{
		//printf("DEBUG CFONTROL RandomMessages 1");
		new rand= 0;
		rand = random(sizeof(RandomMessageALL));
		SendMessageToAll(false, green1, RandomMessageALL[rand]);
		db_SaveChat(-1, -1, RandomMessageForOnline[rand]);
		//printf("DEBUG CFONTROL RandomMessages 2");
	}
}
forward RandomMessagesModes();
public RandomMessagesModes()
{
	if(WConnectedPlayers()>0)
	{
		//printf("DEBUG CFONTROL RandomMessagesModes 1");
		new rand= 0;
		rand = random(sizeof(RandomMessageFFA));
		SendMessageToMode(FFA,green1, RandomMessageFFA[rand]);
		db_SaveChat(-1, FFA, RandomMessageFFAOnline[rand]);

		rand = random(sizeof(RandomMessageSTUNT));
		SendMessageToMode(STUNT,green1, RandomMessageSTUNT[rand]);
		db_SaveChat(-1, STUNT, RandomMessageSTUNTOnline[rand]);

		rand = random(sizeof(RandomMessageTW));
		SendMessageToMode(TW,green1, RandomMessageTW[rand]);
		db_SaveChat(-1, TW, RandomMessageTWOnline[rand]);

		rand = random(sizeof(RandomMessagePTP));
		SendMessageToMode(PTP,green1, RandomMessagePTP[rand]);
		db_SaveChat(-1, PTP, RandomMessagePTPOnline[rand]);
		//printf("DEBUG CFONTROL RandomMessagesModes 2");
	}
}
stock CameraPos(i)
{
	//printf("DEBUG CFONTROL CameraPos 1");
    switch(random(6))
	{
      case 0:{SetPlayerCameraPos(i,-2504.6458,2078.7188,10.4171); SetPlayerCameraLookAt(i,-2663.5652,1797.7147,68.3303);}
      case 1:{SetPlayerCameraPos(i,-845.2932,-1974.5867,16.3582);SetPlayerCameraLookAt(i,-752.7336,-1948.2988,39.8510);}
      case 2:{SetPlayerCameraPos(i,1407.5577,-883.2033,94.1341); SetPlayerCameraLookAt(i,1407.2810,-810.6062,74.7867);}
      case 3:{SetPlayerCameraPos(i,2089.1892,1189.4946,10.6719); SetPlayerCameraLookAt(i,2158.7698,1135.3748,62.6939);}
      case 4:{SetPlayerCameraPos(i,2106.1650,1283.5676,67.3023); SetPlayerCameraLookAt(i,2198.3311,1285.7233,72.5828);}
      case 5:{SetPlayerCameraPos(i,2028.9314,1522.0455,35.1800); SetPlayerCameraLookAt(i,2028.6833,1550.6572,26.0496);}
	}
	//printf("DEBUG CFONTROL CameraPos 2");
}

stock GetDistanceToPoint(playerid,Float:x2,Float:y2,Float:z2)
{
	//printf("DEBUG CFONTROL GetDistanceToPoint 1");
	new Float:x1,Float:y1,Float:z1;
	new Float:tmpdis;
	GetPlayerPos(playerid,x1,y1,z1);
	tmpdis = floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2)+floatpower(floatabs(floatsub(y2,y1)),2)+floatpower(floatabs(floatsub(z2,z1)),2));
	//printf("DEBUG CFONTROL GetDistanceToPoint 2");
	return floatround(tmpdis);
}

stock GetDistanceBetweenPlayers(playerid,playerid2)
{
	//printf("DEBUG CFONTROL GetDistanceBetweenPlayers 1");
	new Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2;
	new Float:tmpdis;
	GetPlayerPos(playerid,x1,y1,z1);
	GetPlayerPos(playerid2,x2,y2,z2);
	tmpdis = floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2)+floatpower(floatabs(floatsub(y2,y1)),2)+floatpower(floatabs(floatsub(z2,z1)),2));
	//printf("DEBUG CFONTROL GetDistanceBetweenPlayers 2");
	return floatround(tmpdis);
}
forward ReduceSpam();
public ReduceSpam()
{
	forLoop(i, MAX_PLAYERS)
	{
		if(PlayerInfo[i][Messages]!=0)PlayerInfo[i][Messages]--;
		if(PlayerInfo[i][Commands]!=0)PlayerInfo[i][Commands]--;
		if(PlayerInfo[i][DeathFlood]!=0)PlayerInfo[i][DeathFlood]--;
	}
	return 1;
}

public OnPlayerText(playerid, text[])
{
	//printf("DEBUG CFONTROL OnPlayerText pid %d",playerid);
	if(!PlayerInfo[playerid][MainMenu] || !PlayerInfo[playerid][PlayerOptionSelected] || (GetPlayerMode(playerid) == -1 && !PlayerInfo[playerid][Level]))
    {
        SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You must spawn before talking.");
        return 0;
	}
 	if(PlayerInfo[playerid][LoggedIn] == 0)
	{
	   SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You must login before talking.");
	   return 0;
	}
    if(PlayerInfo[playerid][PlayerMode] != PJ && PlayerInfo[playerid][PlayerMode] != DM && GetPlayerState(playerid) == PLAYER_STATE_SPECTATING && text[0] != '#' && PlayerInfo[playerid][SpecID] > -1 && PlayerInfo[playerid][Level] > 0)
	{
	   SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You can't talk now, you are spectating. Use '#' for admin chat.");
	   return 0;
	}
    if(PlayerInfo[playerid][Level] == 0 && ServerInfo[DisableChat] == 1)
	{
		SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You many not talk at this moment. The server chat is disabled.");
	 	return 0;
	}
    if(PlayerInfo[playerid][Muted] > 0)
	{
	    SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You are muted, you can not talk at this moment.");
		return 0;
	}
	if(PlayerInfo[playerid][Spawned] == 0 && GetPlayerState(playerid) != PLAYER_STATE_SPECTATING && PlayerInfo[playerid][Level] == 0)
	{
	    SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You must spawn before talking.");
	    return 0;
	}

    PlayerInfo[playerid][Messages]++;
	if(!PlayerInfo[playerid][Level])
	{
	    if(PlayerInfo[playerid][Messages] >= 15)
	    {
			user_Ban(playerid,-1,"Exessive spam",true,true,0);
			return 0;
        }
        if(PlayerInfo[playerid][Messages] >= 4)
	    {
	        new string[128];
            format(string,sizeof(string),"{FF0000}[MUTE]{FFFFFF} %s ID:%d was auto muted for 30 seconds. Reason: Spam.",PlayerInfo[playerid][Name],playerid);
			SendMessageToAll(false, red1, string);
			PlayerInfo[playerid][Muted] = 30;
			format(string, sizeof(string), "[MUTE] %s ID:%d was auto muted for 30 seconds. Reason: Spam.",PlayerInfo[playerid][Name],playerid);
			db_SaveForAdminText(string);
			db_SaveChat(-1, -1, string);
			return 0;
        }
    }
    if(ServerInfo[AdvCheck] == 1)
    {
		if((AdvertCheck(text) || CheckIP(text)) && PlayerInfo[playerid][Level] == 0)
		{
			SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} Message couldn't be sent. Reason: Possible Advertising.");
		    return 0;
		}
	}
    if(returnTextLen(text) >= 1)
		db_SaveChat(playerid, PlayerInfo[playerid][PlayerMode], text);

    if(TextLenCheck(text,2))
	{
		if(text[0] == '#' && PlayerInfo[playerid][Level] >= 1) {
			new string[150];
			format(string,sizeof(string),"{FFFFFF}[Admin Chat] {FF0000}%s(ID:%d): {FFFFFF}%s",PlayerInfo[playerid][Name],playerid,text[1]);
			MessageToAllAdmins(red1,string);
			return 0;
		}
		if(text[0] == '&' && (PlayerInfo[playerid][Level] >= 1 || PlayerInfo[playerid][VIP] > 0) && GetPlayerMode(playerid) != TRP)
		{
	        new string[150];
		    if(PlayerInfo[playerid][Level] >= 1 && PlayerInfo[playerid][VIP] > 0)
		    	format(string,sizeof(string),"[Admin|VIP Chat]{FF0000}Staff %s[ID:%d]:{FFFFFF} %s",PlayerInfo[playerid][Name],playerid,text[1]);
			else if(PlayerInfo[playerid][Level] >= 1 && PlayerInfo[playerid][VIP] == 0)
		    	format(string,sizeof(string),"[Admin|VIP Chat]{FF0000}Staff %s[ID:%d]:{FFFFFF} %s",PlayerInfo[playerid][Name],playerid,text[1]);
			else if(PlayerInfo[playerid][Level] == 0 && PlayerInfo[playerid][VIP] == 1)
		    	format(string,sizeof(string),"[Admin|VIP Chat]{FF0000}VIP %s[ID:%d]:{FFFFFF} %s",PlayerInfo[playerid][Name],playerid,text[1]);
			MessageToAdminsVips(white,string);
			return 0;
		}
		if(text[0] == '@')
		{
		    new string[150];
	  		if(GetPlayerMode(playerid) == TW)
	 		{
		  		format(string,sizeof(string),"[Team] {%s}%s {67F6F6}%s[%d]: {FFFFFF}%s",CountryChatColor[TWPlayerInfo[playerid][Country]],CountryClassNames[TWPlayerInfo[playerid][Country]][TWPlayerInfo[playerid][Class]],PlayerInfo[playerid][Name],playerid,text[1]);
				if(PlayerInfo[playerid][pTeam] == ALLIES)SendMessageToAllies(yellow, string);
		        if(PlayerInfo[playerid][pTeam] == AXIS)SendMessageToAxis(yellow, string);
		        return 0;
			}
			if(GetPlayerMode(playerid) == FFA && FFAPlayerInfo[playerid][GangID] > 0)
			{
	 		    format(string,sizeof(string),"%s radio,{FF9900} %s {67F6F6}%s[%d]: {FFFFFF}%s",GangInfo[getFFAGangID(FFAPlayerInfo[playerid][GangID])][gName],FFAPlayerInfo[playerid][gRank],PlayerInfo[playerid][Name],playerid,text[1]);
	         	SendMessageToGang(playerid,yellow, string);
	        	return 0;
			}
			if(GetPlayerMode(playerid) == TL)
	 		{
			    format(string,sizeof(string),"[Team] {67F6F6}%s[%d]: {FFFFFF}%s",PlayerInfo[playerid][Name],playerid,text[1]);
		  		if(PlayerInfo[playerid][pTeam] == ALLIES)SendMessageToAlliesTL(yellow, string);
		        if(PlayerInfo[playerid][pTeam] == AXIS)SendMessageToAxisTL(yellow, string);
		        return 0;
			}
			if(GetPlayerMode(playerid) == CO)
	 		{
			    format(string,sizeof(string),"[Team] {67F6F6}%s[%d]: {FFFFFF}%s",PlayerInfo[playerid][Name],playerid,text[1]);
		  		if(PlayerInfo[playerid][pTeam] == COP)SendMessageToCopsCO(yellow, string);
		        if(PlayerInfo[playerid][pTeam] == CRIMINAL)SendMessageToCriminalsCO(yellow, string);
		        return 0;
			}
			if(GetPlayerMode(playerid) == PTP)
	 		{
			    if(PTPPlayerInfo[playerid][Class] == PRESIDENT)format(string,sizeof(string),"President ");
			    else if(PTPPlayerInfo[playerid][Class] == VICE)format(string,sizeof(string),"Vice President ");
			    else if(PTPPlayerInfo[playerid][Class] != CIVILIAN)format(string,sizeof(string),"%s ",ThePTPRanks[PTPPlayerInfo[playerid][Rank]]);
				else format(string,sizeof(string),"");
			    format(string,sizeof(string),"[Team] {FFFFFF}%s{67F6F6}%s[%d]: {FFFFFF}%s",string,PlayerInfo[playerid][Name],playerid,text[1]);
		  		SendMessageToTeamPTP(PlayerInfo[playerid][pTeam],yellow, string);
		        return 0;
			}
			if(GetPlayerMode(playerid) == VW)
	 		{
			    format(string,sizeof(string),"[Team] {67F6F6}%s[%d]: {FFFFFF}%s",PlayerInfo[playerid][Name],playerid,text[1]);
		  		SendMessageToTeamVW(PlayerInfo[playerid][pTeam], yellow, string);
		        return 0;
			}
			if(GetPlayerMode(playerid) == CTF)
	 		{
			    format(string,sizeof(string),"[Team] {67F6F6}%s[%d]: {FFFFFF}%s",PlayerInfo[playerid][Name],playerid,text[1]);
		  		if(PlayerInfo[playerid][pTeam] == BLUE)SendMessageToBluesCTF(yellow, string);
		        if(PlayerInfo[playerid][pTeam] == RED)SendMessageToRedsCTF(yellow, string);
		        return 0;
			}
			if(GetPlayerMode(playerid) == ZO)
	 		{
			    format(string,sizeof(string),"[Team] {67F6F6}%s[%d]: {FFFFFF}%s",PlayerInfo[playerid][Name],playerid,text[1]);
		  		if(PlayerInfo[playerid][pTeam] == HUMAN)SendMessageToHumansZO(yellow, string);
		        if(PlayerInfo[playerid][pTeam] == ZOMBIE)SendMessageToZombiesZO(yellow, string);
		        return 0;
			}
		}
		if(GetPlayerMode(playerid) == TRP)
    	{
    	    if(text[0] == '!')
			{
			    TalkMessage(60.0, playerid, "shouts", text[1]);
				return 0;
			}
			if(text[0] == '@')
			{
			    TalkMessage(5.0, playerid, "whispers", text[1]);
				return 0;
			}
    	}
	}
	else
	{
	    if(text[0] == '#' && PlayerInfo[playerid][Level] >= 1)return 0;
		if(text[0] == '&'  && (PlayerInfo[playerid][Level] >= 1 || PlayerInfo[playerid][VIP])) return 0;
	    if(text[0] == '!' || text[0] == '@')return 0;
	}
	if(TextLenCheck(text,1))
	{
		new string[150];
	    if(GetPlayerMode(playerid) == TRP)
	    {
	        TalkMessage(30.0, playerid, "says", text);
	        return 0;
	    }
	    if(GetPlayerMode(playerid) == TW)
	 	{
	 		format(string,sizeof(string),"{%s}%s{00EEAD}[%d]: {FFFFFF}%s",CountryChatColor[TWPlayerInfo[playerid][Country]],PlayerInfo[playerid][Name],playerid,text[0]);
			SendMessageToMode(TW,lightblue,string);
		}
		if(GetPlayerMode(playerid) == FFA)
	 	{
	 		format(string,sizeof(string),"%s{00EEAD}[%d]:{FFFFFF} %s",PlayerInfo[playerid][Name],playerid,text[0]);
			SendMessageToMode(FFA,GetPlayerColor(playerid),string);
		}
		if(GetPlayerMode(playerid) == TL)
	 	{
	 		if(PlayerInfo[playerid][pTeam] == AXIS)format(string,sizeof(string),"{FF0000}%s{00EEAD}[%d]: {FFFFFF}%s",PlayerInfo[playerid][Name],playerid,text[0]);
            if(PlayerInfo[playerid][pTeam] == ALLIES)format(string,sizeof(string),"{375FFF}%s{00EEAD}[%d]: {FFFFFF}%s",PlayerInfo[playerid][Name],playerid,text[0]);
			SendMessageToMode(TL,white, string);
		}
		if(GetPlayerMode(playerid) == STUNT)
	 	{
	 		format(string,sizeof(string),"%s{00EEAD}[%d]:{FFFFFF} %s",PlayerInfo[playerid][Name],playerid,text[0]);
			SendMessageToMode(STUNT,GetPlayerColor(playerid), string);
			
			format(string,sizeof(string),"%s [%d]: %s",PlayerInfo[playerid][Name],playerid,text[0]);
			SetPlayerChatBubble(playerid, text[0], 0xEEEEEEFF, 10.0, 6000);//for 6 secs
		}
		if(GetPlayerMode(playerid) == DM)
	 	{
	 		format(string,sizeof(string),"%s{00EEAD}[%d]:{FFFFFF} %s",PlayerInfo[playerid][Name],playerid,text[0]);
			SendMessageToMode(DM,GetPlayerColor(playerid), string);
		}
		if(GetPlayerMode(playerid) == PJ)
	 	{
	 		format(string,sizeof(string),"%s{00EEAD}[%d]:{FFFFFF} %s",PlayerInfo[playerid][Name],playerid,text[0]);
			SendMessageToMode(PJ,GetPlayerColor(playerid), string);
		}
		if(GetPlayerMode(playerid) == CO)
	 	{
	 		format(string,sizeof(string),"%s{00EEAD}[%d]:{FFFFFF} %s",PlayerInfo[playerid][Name],playerid,text[0]);
			SendMessageToMode(CO,GetPlayerColor(playerid), string);
		}
		if(GetPlayerMode(playerid) == PTP)
	 	{
		    if(PTPPlayerInfo[playerid][Class] == PRESIDENT)format(string,sizeof(string),"{FFFF00}President {FFFFFF}");
		    else if(PTPPlayerInfo[playerid][Class] == VICE)format(string,sizeof(string),"Vice {FFFFFF}");
		    else format(string,sizeof(string),"");

	 		format(string,sizeof(string),"%s%s{00EEAD}[%d]:{FFFFFF} %s",string,PlayerInfo[playerid][Name],playerid,text[0]);
			SendMessageToMode(PTP,GetPlayerColor(playerid), string);
		}
		if(GetPlayerMode(playerid) == ZO)
	 	{
	 		format(string,sizeof(string),"%s{00EEAD}[%d]:{FFFFFF} %s",PlayerInfo[playerid][Name],playerid,text[0]);
			SendMessageToMode(ZO,GetPlayerColor(playerid), string);
		}
		if(GetPlayerMode(playerid) == GK)
	 	{
	 	    if(GKPlayerInfo[playerid][Holding] == 0)
	 			format(string,sizeof(string),"%s{00EEAD}[%d]:{FFFFFF} %s",PlayerInfo[playerid][Name],playerid,text[0]);
			else
	 			format(string,sizeof(string),"(B){FFFFFF}%s{00EEAD}[%d]:{FFFFFF} %s",PlayerInfo[playerid][Name],playerid,text[0]);
			SendMessageToMode(GK,GetPlayerColor(playerid), string);
		}
		if(GetPlayerMode(playerid) == VW)
	 	{
	 		format(string,sizeof(string),"%s{00EEAD}[%d]:{FFFFFF} %s",PlayerInfo[playerid][Name],playerid,text[0]);
			SendMessageToMode(VW,GetPlayerColor(playerid), string);
		}
		if(GetPlayerMode(playerid) == CTF)
	 	{
	 		format(string,sizeof(string),"%s{00EEAD}[%d]:{FFFFFF} %s",PlayerInfo[playerid][Name],playerid,text[0]);
			SendMessageToMode(CTF,GetPlayerColor(playerid), string);
		}
		if(GetPlayerMode(playerid) == MOVIES)
	 	{
	 		format(string,sizeof(string),"%s{00EEAD}[%d]:{FFFFFF} %s",PlayerInfo[playerid][Name],playerid,text[0]);
			SendMessageToMode(MOVIES,GetPlayerColor(playerid), string);
		}
		SendGlobalMSG(playerid,text);//checking to see if a global chat is off, and send msg to all modes and their ircs
	}
    return 0;
}

forward LeaderLight(playerid);
public LeaderLight(playerid)
{
	if(PlayerInfo[playerid][Spawned] == 1 && PlayerInfo[playerid][PlayerMode] == TW && TWPlayerInfo[playerid][Class] == LEADER)
	{
		//printf("DEBUG CFONTROL LeaderLight 1");
	    if(TWPlayerInfo[playerid][LeadersKilled] < 1000 && TWPlayerInfo[playerid][Survives] < 200)
	    {
			if(TWPlayerInfo[playerid][Blip] == 0)
			{
				SetPlayerColor(playerid, TWPlayerInfo[playerid][LeaderColor]);
				TWPlayerInfo[playerid][Blip] = 1;
			}
			else
			{
			    SetPlayerColor(playerid, 0x000000AA);
                TWPlayerInfo[playerid][Blip] = 0;
			}
		}
		//printf("DEBUG CFONTROL LeaderLight 2");
	}
}

//===================== [ DCMD Commands ]=======================================
CMD:admincmds(playerid) {
	if(PlayerInfo[playerid][Level] == 0)return 0;
    new string2[3200];
	if(PlayerInfo[playerid][Level] == 1)
	{
        strcat(string2,"\n{FFFFFF}/ping /ann /goto /warn /kick /miniguns /rthem /notk /nosk /jail");
		strcat(string2,"\n{FFFFFF}/unjail /jailed /weaps /reports /gotoplace /saveplace");
    }
    if(PlayerInfo[playerid][Level] == 2)
	{
		strcat(string2,"\n{FFFFFF}/ping /ann /goto /warn /kick /notk /beright /donate /bsay /rthem /nosk /miniguns /jail");
		strcat(string2,"\n{FFFFFF}/unjail /jailed /weaps /reports /gotoplace /saveplace");
		strcat(string2,"\n{FFFFFF}/spawn /ann2 /slap /mute /unmute /muted /spec /specoff");
	}
	if(PlayerInfo[playerid][Level] == 3)
	{
		strcat(string2,"\n{FFFFFF}/ping /ann /goto /warn /notk /bsay /rthem /beright /donate /nosk /kick /miniguns /jail");
		strcat(string2,"\n{FFFFFF}/unjail /jailed /weaps /reports /gotoplace /saveplace");
		strcat(string2,"\n{FFFFFF}/spawn /ann2 /slap /mute /unmute /muted /spec /specoff /spycmds");
		strcat(string2,"\n{FFFFFF}/eject /disarm /jetpack /pgoto /get /ban /movepos");
		strcat(string2,"\n{FFFFFF}/explode /disablechat /clearchat /setteam ");
	}
	if(PlayerInfo[playerid][Level] == 4)
	{
		strcat(string2,"\n{FFFFFF}/ping /ann /goto /warn /notk /bsay /rthem /beright /donate /nosk /kick /miniguns /jail");
		strcat(string2,"\n{FFFFFF}/unjail /jailed /weaps /reports /gotoplace /saveplace");
		strcat(string2,"\n{FFFFFF}/spawn /ann2 /slap /mute /unmute /muted /spec /specoff");
		strcat(string2,"\n{FFFFFF}/eject /disarm /jetpack /pgoto /get /ban /movepos");
		strcat(string2,"\n{FFFFFF}/giveweapon /sethealth /setteam /setarmour /givecash /ip");
		strcat(string2,"\n{FFFFFF}/ubound(remove world bounds) /getinfo /fix /unbantheip /car /carhealth /god /godcar");
		strcat(string2,"\n{FFFFFF}/serverinfo /flip /teleplayer /vgoto");
		strcat(string2,"\n{FFFFFF}/vget /givecar /freeze /unfreeze /frozen /akill");
  		strcat(string2,"\n{FFFFFF}/explode /disablechat /clearchat");
	}
	if(PlayerInfo[playerid][Level] >= 5)
	{
	    strcat(string2,"\n{FFFFFF}/ping /ann  /goto /warn /notk /bsay /rthem /beright /donate /nosk /kick /miniguns /jail");
		strcat(string2,"\n{FFFFFF}/unjail /jailed /weaps /reports /gotoplace /saveplace");
		strcat(string2,"\n{FFFFFF}/spawn /ann2 /slap /mute /unmute /muted /spec /specoff");
		strcat(string2,"\n{FFFFFF}/force /eject /disarm /jetpack /pgoto /get /ban /movepos");
		strcat(string2,"\n{FFFFFF}/giveweapon /sethealth /setarmour /givecash /ip");
		strcat(string2,"\n{FFFFFF}/ubound /getinfo /fix /car /carhealth /god /godcar");
		strcat(string2,"\n{FFFFFF}/serverinfo /flip /teleplayer /vgoto");
		strcat(string2,"\n{FFFFFF}/vget /givecar /freeze /unfreeze /setteam /frozen /akill");
  		strcat(string2,"\n{FFFFFF}/explode /disablechat /clearchat");
		strcat(string2,"\n{FFFFFF}/setname /setcolour /setvip /setweather /settime /setworld /setinterior");
		strcat(string2,"\n{FFFFFF}/destroycar /rban /aka /setlevel /botcheck");
		strcat(string2,"\n{FFFFFF}/spawnall /getall /healall /armourall /killall /freezeall /unfreezeall");
		strcat(string2,"\n{FFFFFF}/kickall /slapall /disarmall /ejectall /setallskin");
		strcat(string2,"\n{FFFFFF}/setllworld /setallcash /giveallcash /giveallweapon /setskin");
	}
	ShowPlayerDialog(playerid, 4511, DIALOG_STYLE_MSGBOX,"Admin CMDs List", string2, "Close", "");
	return 1;
}


CMD:oadmins(playerid) {
    if(PlayerInfo[playerid][Level] == 0) return 0;
    if(!AdminCount())return SendClientMessage(playerid,red1, "{FF0000}Notice: {FFFFFF}There are no admins.");
	new string5[190],string2[3200];
	forLoop(i, MAX_PLAYERS) if(IsPlayerConnected(i))
	{
		if(PlayerInfo[i][Level] > 0 && PlayerInfo[i][HideAdmin] == 0 && PlayerInfo[i][Registered] && PlayerInfo[i][LoggedIn])
		{
		    format(string5,190,"\n{FFFFFF}%s(ID:%d) Level: %d",PlayerInfo[i][Name],i,PlayerInfo[i][Level]);
			strcat(string2,string5);
		}
	}
	ShowPlayerDialog(playerid, 4511, DIALOG_STYLE_MSGBOX,"Admins List", string2, "Close", "");
	return 1;
}

CMD:removeweapon(playerid,params[]) {
	if(PlayerInfo[playerid][Level] >= 4) {
	    new player1,weap,theweap[32], string[128];
    	if (sscanf(params, "ds[32]", player1,theweap))return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /removeweapon <playerid> <weapon id/weapon name>");
		if(IsNumericForID(theweap))weap=strval(theweap);else weap = GetWeaponIDFromName(theweap);
		if(IsPlayerConnected(player1) && player1 != INVALID_PLAYER_ID) {
        	if(!IsValidWeapon(weap)) return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Invalid weapon ID");
			GetWeaponName(weap,theweap,32);
			if(weap == 18) theweap = "Molotov";
			format(string, sizeof(string), "Notice:{FFFFFF} You have removed %s's  %s (%d).", PlayerInfo[player1][Name], theweap, weap); SendClientMessage(playerid,blue,string);
            RemovePlayerWeapon(playerid, weap);
			return 1;
	    } else return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Player is not connected");
	} else return 0;
}
CMD:giveweapon(playerid,params[]) {
	if(PlayerInfo[playerid][Level] >= 4) {
	    new player1,weap,theweap[32],ammo, string[128];
    	if (sscanf(params, "ds[32]d", player1,theweap,ammo))return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /giveweapon <playerid> <weapon id/weapon name> <ammo>");
		if(IsNumericForID(theweap))weap=strval(theweap);else weap = GetWeaponIDFromName(theweap);
		if(ammo == 0) ammo = 50;
        if(IsPlayerConnected(player1) && player1 != INVALID_PLAYER_ID) {
        	if(!IsValidWeapon(weap)) return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Invalid weapon ID");
			GetWeaponName(weap,theweap,32);
			if(weap == 18) theweap = "Molotov";
			format(string, sizeof(string), "Notice:{FFFFFF} You have given %s a %s (%d) with %d rounds of ammo", PlayerInfo[player1][Name], theweap, weap, ammo); SendClientMessage(playerid,blue,string);
   			return GiveWeapon(player1, weap, ammo);
	    } else return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Player is not connected");
	} else return 0;
}
//===================================[Other commands]============================================

stock BodyGuardLeaderDisconnects(playerid)
{
	//printf("DEBUG CFONTROL BodyGuardLeaderDisconnects 1");
    forLoop(i, MAX_PLAYERS) if(IsPlayerConnected(i) && playerid != i)
	{
	    if(PlayerInfo[i][PlayerMode] == TW && PlayerInfo[i][Spawned] == 1 && TWPlayerInfo[i][Country] == TWPlayerInfo[playerid][Country])
	    {
	        if(TWPlayerInfo[i][Class] == BODYGUARD || TWPlayerInfo[i][Class] == SPY)
	        {
				SendClientMessage(playerid,red1, "{FF0000}Notice:{FFFFFF} Your leader has disconnected.");
		        TWPlayerInfo[i][Class] = SOLDIER;
				A_SpawnPlayer(i);
			}
	    }
	}
	//printf("DEBUG CFONTROL BodyGuardLeaderDisconnects 2");
}
stock BodyGuardLeaderSurvives(playerid)
{
	//printf("DEBUG CFONTROL BodyGuardLeaderSurvives 1");
    forLoop(i, MAX_PLAYERS) if(IsPlayerConnected(i) && playerid != i)
	{
	    if(PlayerInfo[i][PlayerMode] == TW && PlayerInfo[i][Spawned] == 1 && TWPlayerInfo[i][Class] == BODYGUARD && TWPlayerInfo[i][Country] == TWPlayerInfo[playerid][Country])
	    {
	        GiveThePlayerMoney(i,5000);
	        SendClientMessage(playerid,red1, "{33FF33}Notice:{FFFFFF} Your leader has survived! You earned 5,000 dollars!");
	        TWPlayerInfo[i][Class] = SOLDIER;
			A_SpawnPlayer(i);
	    }
	}
	//printf("DEBUG CFONTROL BodyGuardLeaderSurvives 2");
}
stock OtherLeaderSurvives(playerid)
{
	//printf("DEBUG CFONTROL OtherLeaderSurvives 1");
    forLoop(i, MAX_PLAYERS) if(IsPlayerConnected(i) && playerid != i)
	{
	    if(PlayerInfo[i][PlayerMode] == TW && PlayerInfo[i][Spawned] == 1 && TWPlayerInfo[i][Class] != BODYGUARD && TWPlayerInfo[i][Class] != VICE && TWPlayerInfo[i][Class] != LEADER && TWPlayerInfo[i][Country] == TWPlayerInfo[playerid][Country])
	    {
	        GiveThePlayerMoney(i,2000);
	        SendClientMessage(playerid,red1, "{33FF33}Notice:{FFFFFF} Your leader has survived! You earned 2,000 dollars!");
			A_SpawnPlayer(i);
	    }
	}
	//printf("DEBUG CFONTROL OtherLeaderSurvives 2");
}
stock ViceLeaderDisconnects(playerid)
{
	new str[128];
	//printf("DEBUG CFONTROL ViceLeaderDisconnects 1");
    forLoop(i, MAX_PLAYERS) if(IsPlayerConnected(i) && playerid != i)
	{
	    if(PlayerInfo[i][PlayerMode] == TW && PlayerInfo[i][Spawned] == 1 && TWPlayerInfo[i][Class] == VICE && TWPlayerInfo[i][Country] == TWPlayerInfo[playerid][Country])
	    {
	        format(str,128,"WAR NEWS:{FFFFFF} He has been replaced by %s(ID:%d)",PlayerInfo[i][Name],i);
	        SendMessageToMode(TW,green1,str);
		  	format(str, sizeof(str), "[WAR NEWS] He has been replaced by %s(ID:%d)",PlayerInfo[i][Name],i);
			db_SaveChat(-1, TW,str);
	        TWPlayerInfo[i][Class] = LEADER;
			TWPlayerInfo[i][AsLeader]++;
			A_SpawnPlayer(i);
	    }
	}
	//printf("DEBUG CFONTROL ViceLeaderDisconnects 2");
}
stock ViceLeaderDies(playerid)
{
	new str[128];
	//printf("DEBUG CFONTROL ViceLeaderDies 1");
    forLoop(i, MAX_PLAYERS) if(IsPlayerConnected(i) && playerid != i)
	{
	    if(PlayerInfo[i][PlayerMode] == TW && PlayerInfo[i][Spawned] == 1 && TWPlayerInfo[i][Class] == VICE && TWPlayerInfo[i][Country] == TWPlayerInfo[playerid][Country])
	    {
	        format(str,128,"WAR NEWS:{FFFFFF} He has been replaced by %s(ID:%d)",PlayerInfo[i][Name],i);
	        SendMessageToMode(TW,green1,str);
		  	format(str, sizeof(str), "[WAR NEWS] He has been replaced by %s(ID:%d)",PlayerInfo[i][Name],i);
			db_SaveChat(-1, TW,str);
			TWPlayerInfo[i][Class] = LEADER;
			TWPlayerInfo[i][AsLeader]++;
			A_SpawnPlayer(i);
		}
	}
	//printf("DEBUG CFONTROL ViceLeaderDies 2");
}
stock BodyGuardLeaderDies(playerid)
{
	//printf("DEBUG CFONTROL BodyGuardLeaderDies 1");
    forLoop(i, MAX_PLAYERS) if(IsPlayerConnected(i) && playerid != i)
	{
	    if(PlayerInfo[i][PlayerMode] == TW && PlayerInfo[i][Spawned] == 1 && TWPlayerInfo[i][Country] == TWPlayerInfo[playerid][Country])
	    {
	        if(TWPlayerInfo[i][Class] == BODYGUARD || TWPlayerInfo[i][Class] == SPY)
	        {
				SendClientMessage(playerid,red1, "{33FF33}Notice:{FFFFFF} Your leader has died. You failed to protect him.");
		        TWPlayerInfo[i][Class] = SOLDIER;
				A_SpawnPlayer(i);
			}
	    }
	}
	//printf("DEBUG CFONTROL BodyGuardLeaderDies 2");
}

stock Float:GetXDistanceFromPlayerToShip(playerid,id)
{
	new Float:x1,Float:y1,Float:z1,Float:x2=ShipInfo[id][sX];
	GetPlayerPos(playerid,x1,y1,z1);
	//printf("DEBUG CFONTROL GetXDistanceFromPlayerToShip");
	return floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2));
}
stock Float:GetYDistanceFromPlayerToShip(playerid,id)
{
	new Float:x1,Float:y1,Float:z1,Float:y2=ShipInfo[id][sY];
	GetPlayerPos(playerid,x1,y1,z1);
	//printf("DEBUG CFONTROL GetYDistanceFromPlayerToShip");
	return floatsqroot(floatpower(floatabs(floatsub(y2,y1)),2));
}

stock Float:GetZDistanceFromPlayerToShip(playerid,id)
{
	new Float:x1,Float:y1,Float:z1,Float:z2=ShipInfo[id][sZ];
	GetPlayerPos(playerid,x1,y1,z1);
	//printf("DEBUG CFONTROL GetZDistanceFromPlayerToShip");
	return floatsqroot(floatpower(floatabs(floatsub(z2,z1)),2));
}
forward StuntBoost(playerid);
public StuntBoost(playerid)
{
	if(GetPlayerMode(playerid) == STUNT && IsPlayerInAnyVehicle(playerid))
	{
	    //if(AC_GetPlayerSpeed(playerid,true) < 900)
		{
		    new k, ud,lr;
			GetPlayerKeys(playerid,k,ud,lr);
			if(k & KEY_NO)
			{
			    new Float:currspeed[3], Float:direction[3], Float:total;
				GetVehicleVelocity(GetPlayerVehicleID(playerid), currspeed[0], currspeed[1], currspeed[2]);
				total = floatsqroot((currspeed[0] * currspeed[0]) + (currspeed[1] * currspeed[1]) + (currspeed[2] * currspeed[2]));
				total += 0.2;
				new Float:invector[3] = {0.0, -1.0, 0.0};
				RotatePointVehicleRotation(GetPlayerVehicleID(playerid), invector, direction[0], direction[1], direction[2]);
				SetVehicleVelocity(GetPlayerVehicleID(playerid), direction[0] * total, direction[1] * total, direction[2] * total);
			}
		}
	}
	return 1;
}

forward MedicHeal(playerid);
public MedicHeal(playerid)
{
	if(TWPlayerInfo[playerid][Healing] > -1 && GetPlayerMode(playerid) == TW && GetPlayerMode(TWPlayerInfo[playerid][Healing]) == TW && TWPlayerInfo[playerid][Class] == MEDIC)
	{
	    new Float:ph;
		GetPlayerHealth(TWPlayerInfo[playerid][Healing],ph);
		if(PlayerInfo[playerid][pTeam] == PlayerInfo[TWPlayerInfo[playerid][Healing]][pTeam])
		{
			if(ph < 100)
			{
			    if(GetDistanceBetweenPlayers(playerid,TWPlayerInfo[playerid][Healing]) > 5 || IsPlayerInAnyVehicle(TWPlayerInfo[playerid][Healing]))
		        {
		            GameTextForPlayer(playerid, "~n~ ~n~ ~n~ ~n~ ~r~Healing failed..", 2000, 3);
		            GameTextForPlayer(TWPlayerInfo[playerid][Healing], "~n~ ~n~ ~n~ ~n~ ~r~Healing failed..", 2000, 3);
		            TWPlayerInfo[TWPlayerInfo[playerid][Healing]][pHealing] = -1;
			        TWPlayerInfo[playerid][Healing] = -1;
			        KillTimer(TWPlayerInfo[playerid][kscTimer]);
				    return 0;
		        }
		        GameTextForPlayer(playerid, "~n~ ~n~ ~n~ ~n~ ~w~Healing..", 2000, 3);
	            GameTextForPlayer(TWPlayerInfo[playerid][Healing], "~n~ ~n~ ~n~ ~n~ ~w~Healing..", 2000, 3);
	            GiveThePlayerMoney(playerid, 40);
				ChangeModeScore(playerid, 3);
				KillTimer(TWPlayerInfo[playerid][kscTimer]);
			    TWPlayerInfo[playerid][kscTimer] = SetTimerEx("MedicHeal",900,0,"d",playerid);
			    SetHealth(TWPlayerInfo[playerid][Healing], ph+3);
		    	return 0;
		    }
		    else if(ph >= 99)
		    {
		        SetHealth(TWPlayerInfo[playerid][Healing],99.0);
		        GameTextForPlayer(playerid, "~n~ ~n~ ~n~ ~n~ ~g~Fully Healed!", 2000, 3);
		        GameTextForPlayer(TWPlayerInfo[playerid][Healing], "~n~ ~n~ ~n~ ~n~ ~g~Fully Healed!", 2000, 3);
		        if(TWPlayerInfo[TWPlayerInfo[playerid][Healing]][Class] != LEADER)RefoundMedic(playerid);
		        else RefoundMedicForLeader(playerid);
		        TWPlayerInfo[TWPlayerInfo[playerid][Healing]][pHealing] = -1;
		        TWPlayerInfo[playerid][Healing] = -1;
				KillTimer(TWPlayerInfo[playerid][kscTimer]);
			    return 0;
		    }
	    }
	    else
	    {
	        if(ph > 0)
			{
			    if(GetDistanceBetweenPlayers(playerid,TWPlayerInfo[playerid][Healing]) > 5 || IsPlayerInAnyVehicle(TWPlayerInfo[playerid][Healing]))
		        {
		            GameTextForPlayer(playerid, "~n~ ~n~ ~n~ ~n~ ~r~Poisoning failed..", 2000, 3);
		            GameTextForPlayer(TWPlayerInfo[playerid][Healing], "~n~ ~n~ ~n~ ~n~ ~r~Poisoning failed..", 2000, 3);
		            TWPlayerInfo[TWPlayerInfo[playerid][Healing]][pHealing] = -1;
			        TWPlayerInfo[playerid][Healing] = -1;
				    return 0;
		        }
		        GameTextForPlayer(playerid, "~n~ ~n~ ~n~ ~n~ ~w~Poisoning..", 2000, 3);
	            GameTextForPlayer(TWPlayerInfo[playerid][Healing], "~n~ ~n~ ~n~ ~n~ ~r~Poisoning..", 2000, 3);
	            GiveThePlayerMoney(playerid, 40);
				ChangeModeScore(playerid, 3);
				KillTimer(TWPlayerInfo[playerid][kscTimer]);
			    TWPlayerInfo[playerid][kscTimer] = SetTimerEx("MedicHeal",900,0,"d",playerid);
		    	SetHealth(TWPlayerInfo[playerid][Healing], ph-5);
		    	if(ph <= 5)
		    	{
		    	    SetPVarInt(TWPlayerInfo[playerid][Healing], "ExpDamager", playerid+1);
				    SetPVarInt(TWPlayerInfo[playerid][Healing], "ExpReason", 59);
				    ResetCustomDeathTimer(TWPlayerInfo[playerid][Healing], 4000);
		    	}
		    	return 0;
		    }
		    else if(ph <= 0)
		    {
		        GameTextForPlayer(playerid, "~n~ ~n~ ~n~ ~n~ ~g~Fully Poisoned!", 2000, 3);
		        GameTextForPlayer(TWPlayerInfo[playerid][Healing], "~n~ ~n~ ~n~ ~n~ ~r~Fully Poisoned!", 2000, 3);
		        if(TWPlayerInfo[TWPlayerInfo[playerid][Healing]][Class] != LEADER)RefoundMedicPoison(playerid);
		        else RefoundMedicPoisonForLeader(playerid);
		        TWPlayerInfo[TWPlayerInfo[playerid][Healing]][pHealing] = -1;
		        TWPlayerInfo[playerid][Healing] = -1;
				KillTimer(TWPlayerInfo[playerid][kscTimer]);
			    return 0;
		    }
	    }
    }
    return 0;
}

forward PlayerRepairSync(playerid, type, id, time);
public PlayerRepairSync(playerid, type, id, time)
{
    if(GetPlayerMode(playerid) == TW && TWPlayerInfo[playerid][Class] == ENGINEER && TWPlayerBomb[playerid][rRepairing])
	{
	    time--;
	    if(time <= 0)
	    {
			if(type == 0)
			{
			    ClearAnimations(playerid);
				Sync(playerid);
			    if(!TWPlayerBomb[playerid][bSurfing])
				{
				    new Float:x, Float:y, Float:z;
					GetVehiclePos(id,x,y,z);
				    if(!IsPlayerInRangeOfPoint(playerid, 2,TWPlayerBomb[playerid][bpX],TWPlayerBomb[playerid][bpY],TWPlayerBomb[playerid][bpZ])
					|| ( floatround(floatabs(floatsub(x,TWPlayerBomb[playerid][bvX]))) > 2 ||  floatround(floatabs(floatsub(y,TWPlayerBomb[playerid][bvY]))) > 2 ||  floatround(floatabs(floatsub(z,TWPlayerBomb[playerid][bvZ]))) > 2))
					return 0;
				}
				else
				{
				    if(TWPlayerBomb[playerid][bSurfing] != -1)
				    {
				    	if(TWPlayerBomb[playerid][bSurfing] != GetPlayerSurfingVehicleID(playerid))
				    	{
						    return 0;
				    	}
					}
				}

				if(TWPlayerBomb[playerid][bSurfing] == -1)
				{
				    if(!IsPlayerInRangeOfPoint(playerid, 2,TWPlayerBomb[playerid][bpX],TWPlayerBomb[playerid][bpY],TWPlayerBomb[playerid][bpZ]))
						return 0;
				}
		    	RepairVehicle(id);
		    	TWPlayerBomb[playerid][rRepairing] = 0;
				GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~w~Vehicle repaired", 2000, 3);
		    	return 0;
			}
		}
		else
		{
		    if(type == 0)//car
			{
			    if(!TWPlayerBomb[playerid][bSurfing])
				{
				    new Float:x, Float:y, Float:z;
					GetVehiclePos(id,x,y,z);
				    if(!IsPlayerInRangeOfPoint(playerid, 2,TWPlayerBomb[playerid][bpX],TWPlayerBomb[playerid][bpY],TWPlayerBomb[playerid][bpZ])
					|| ( floatround(floatabs(floatsub(x,TWPlayerBomb[playerid][bvX]))) > 2 ||  floatround(floatabs(floatsub(y,TWPlayerBomb[playerid][bvY]))) > 2 ||  floatround(floatabs(floatsub(z,TWPlayerBomb[playerid][bvZ]))) > 2))
					{
	                    TWPlayerBomb[playerid][rRepairing] = 0;
					    ClearAnimations(playerid);
					    Sync(playerid);
						GameTextForPlayer(playerid, " ",2000,3);
					    return 0;
					}
				}
				else
				{
				    if(TWPlayerBomb[playerid][bSurfing] != -1)
				    {
				    	if(TWPlayerBomb[playerid][bSurfing] != GetPlayerSurfingVehicleID(playerid))
				    	{
				    	    TWPlayerBomb[playerid][rRepairing] = 0;
						    ClearAnimations(playerid);
						    Sync(playerid);
							GameTextForPlayer(playerid, " ",2000,3);
						    return 0;
				    	}
					}
				}
				if(TWPlayerBomb[playerid][bSurfing] == -1)
				{
				    if(!IsPlayerInRangeOfPoint(playerid, 2,TWPlayerBomb[playerid][bpX],TWPlayerBomb[playerid][bpY],TWPlayerBomb[playerid][bpZ]))
					{
	                    TWPlayerBomb[playerid][rRepairing] = 0;
					    ClearAnimations(playerid);
					    Sync(playerid);
						GameTextForPlayer(playerid, " ",2000,3);
					    return 0;
					}
				}
				new text[40];
				format(text,sizeof(text)," ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~w~ %d",time);
				GameTextForPlayer(playerid, text,2000,3);
			}
			if(type == 1)
			{
			    if(!IsPlayerInRangeOfPoint(playerid, 2,TWPlayerBomb[playerid][bpX],TWPlayerBomb[playerid][bpY],TWPlayerBomb[playerid][bpZ]))
			    {
                    TWPlayerBomb[playerid][rRepairing] = 0;
				    ClearAnimations(playerid);
				    Sync(playerid);
					GameTextForPlayer(playerid, " ",2000,3);
				    return 0;
				}
				if(ShipInfo[id][sHP] <= 0)
                {
                    ClearAnimations(playerid);
					Sync(playerid);
					TWPlayerBomb[playerid][rRepairing] = 0;
					GameTextForPlayer(playerid, " ",2000,3);
					for (new i = 0; i < MAX_PLAYERS; i++)
					{
		      		 	if(GetPlayerMode(i) == TW && TWPlayerBomb[i][rRepairing])
		      		 	{
	                        if(TWPlayerBomb[i][rShip] == TWPlayerBomb[playerid][rShip])
	                        {
	                            ClearAnimations(i);
								Sync(i);
								RefoundRepair(i);
								TWPlayerBomb[i][rRepairing] = 0;
								GameTextForPlayer(i, " ",2000,3);
								return 0;
	                        }
						}
					}
					return 0;
                }
				if(ShipInfo[id][sHP] >= 100)
                {
                    ShipInfo[id][sHP] = 100;
     				UpdateShipHealthText(id);
					new players=0;
			    	for (new i = 0; i < MAX_PLAYERS; i++)
					{
		      		 	if(GetPlayerMode(i) == TW && i != playerid && TWPlayerBomb[i][rRepairing])
		      		 	{
	                        if(TWPlayerBomb[i][rShip] == TWPlayerBomb[playerid][rShip])
	                        {
	                            players++;
	                        }
						}
					}
					if(!players)
					{
					    ClearAnimations(playerid);
						Sync(playerid);
						RefoundRepair(playerid);
						TWPlayerBomb[playerid][rRepairing] = 0;
						new string[128];
					    format(string,128,"{33FF33}WAR NEWS:{FFFFFF} The %s, has been fully repaired by an engineer, %s.",ShipInfo[id][NameFull], PlayerInfo[playerid][Name]);
						SendMessageToMode(TW,white,string);
					  	format(string, sizeof(string), "[WAR NEWS] The %s, has been fully repaired by an engineer, %s.",ShipInfo[id][NameFull], PlayerInfo[playerid][Name]);
						db_SaveChat(-1, TW,string);
						GameTextForPlayer(playerid, " ",2000,3);
						return 0;
			    	}
			    	else
			    	{
			    	    for (new i = 0; i < MAX_PLAYERS; i++)
						{
			      		 	if(GetPlayerMode(i) == TW && TWPlayerBomb[i][rRepairing])
			      		 	{
		                        if(TWPlayerBomb[i][rShip] == TWPlayerBomb[playerid][rShip])
		                        {
		                            ClearAnimations(i);
									Sync(i);
									RefoundRepair(i);
									TWPlayerBomb[i][rRepairing] = 0;
									new string[128];
								    format(string,128,"{33FF33}WAR NEWS:{FFFFFF} The %s, has been fully repaired by engineers.",ShipInfo[id][NameFull]);
									SendMessageToMode(TW,white,string);
								  	format(string, sizeof(string), "[WAR NEWS] The %s, has been fully repaired by engineers.",ShipInfo[id][NameFull]);
									db_SaveChat(-1, TW,string);
									GameTextForPlayer(i, " ",2000,3);
									return 0;
		                        }
							}
						}
			    	}
                }
				if(ShipInfo[id][sHP] < 100)
				{
					if(ShipInfo[id][RepairTime]==1)
					{
					    ShipInfo[id][sHP]+=2;
		                UpdateShipHealthText(id);
						SetTimerEx("CallForRepair", 20000, 0, "i", id);
						
						if(ShipInfo[id][CallForIt] == 1)
						{
						    new players=0;
					    	for (new i = 0; i < MAX_PLAYERS; i++)
							{
				      		 	if(GetPlayerMode(i) == TW && i != playerid && TWPlayerBomb[i][rRepairing])
				      		 	{
			                        if(TWPlayerBomb[i][rShip] == TWPlayerBomb[playerid][rShip])
			                        {
			                            players++;
			                        }
								}
							}
							if(!players)
							{
							    new string[128];
							    format(string,128,"{33FF33}WAR NEWS:{FFFFFF} The %s, is being repaired by an engineer.",ShipInfo[id][NameFull]);
								SendMessageToMode(TW,white,string);
							  	format(string, sizeof(string), "[WAR NEWS] The %s, is being repaired by an engineer.",ShipInfo[id][NameFull]);
								db_SaveChat(-1, TW,string);
							}
							else
   							{
   							    new string[128];
							    format(string,128,"{33FF33}WAR NEWS:{FFFFFF} The %s, is being repaired by engineers.",ShipInfo[id][NameFull]);
								SendMessageToMode(TW,white,string);
							  	format(string, sizeof(string), "[WAR NEWS] The %s, is being repaired by engineers.",ShipInfo[id][NameFull]);
								db_SaveChat(-1, TW,string);
   							}
							SetTimerEx("CallForAttack", 45000, 0, "i", id);
						}
					    ShipInfo[id][CallForIt]=0;
					}
				    ShipInfo[id][RepairTime]=0;
			    }
			    time+=2;
				GameTextForPlayer(playerid, "~n~ ~n~ ~n~ ~n~ ~w~Repairing ship...",2000,3);
			}
			SetPlayerArmedWeapon(playerid, 0);
    		KillTimer(TWPlayerInfo[playerid][kscTimer]);
			TWPlayerInfo[playerid][kscTimer] = SetTimerEx("PlayerRepairSync",900,0,"dddd",playerid, type, id, time);
		}
	}
	return 0;
}

stock FixTWVehicleFromMine(vehicleid, type)
{
    if(GetVehicleVirtualWorld(vehicleid) == W_TW)
	{
		//printf("DEBUG CFONTROL FixTWVehicleFromMine 1");
	    new fEngine, fLights, fAlarm, fDoors, fBonnet, fBoot, fObjective;
		GetVehicleParamsEx(vehicleid, fEngine, fLights, fAlarm, fDoors, fBonnet, fBoot, fObjective);
		SetVehicleParamsEx(vehicleid, fEngine, fLights, fAlarm, fDoors, fBonnet, fBoot, 0);
		if(type == 0)
		{
		    forLoop(i, MAX_PLAYERS)
			{
		    	if(IsPlayerConnected(i) && GetPlayerMode(i) == TW)
		    	{
					forLoop(v, MAX_ENGI_BOMBS)
				 	{
				 	    if(vehicleid == TWPlayerBomb[i][bCar][v])
				 		{
				 		    if(TWPlayerBomb[i][bcObject][v]>-1)DestroyTheDynamicObject(TWPlayerBomb[i][bcObject][v]);
		 					TWPlayerBomb[i][bcObject][v] = -1;
		                    TWPlayerBomb[i][bCar][v] = -1;
		                    TWPlayerBomb[i][bAmount]--;
		                    if(TWPlayerBomb[i][bAmount] <= 0 && SearchForWeapon(i,40))RemovePlayerWeapon(i, 40);
				 		}
					}
				}
			}
		}
		if(type == 1)
		{
			forLoop(i, MAX_PLAYERS)
			{
		    	if(IsPlayerConnected(i) && GetPlayerMode(i) == TW)
		    	{
					forLoop(v, MAX_ENGI_BOMBS)
				 	{
				 	    if(vehicleid == TWPlayerBomb[i][bCar][v])
				 		{
				 		    SetVehicleParamsForPlayer(vehicleid,i,1,0);
				 		}
					}
				}
			}
		}
		//printf("DEBUG CFONTROL FixTWVehicleFromMine 2");
	}
}
forward PlayerDefuseSync(playerid,player,slot,time);
public PlayerDefuseSync(playerid,player,slot,time)
{
	if(GetPlayerMode(playerid) == TW && TWPlayerInfo[playerid][Class] == ENGINEER && TWPlayerBomb[playerid][bDefusing])
	{
		time--;
	    if(time <= 0)
	    {
			//printf("DEBUG CFONTROL PlayerDefuseSync 1");
			ClearAnimations(playerid);
		    Sync(playerid);
	 	    TWPlayerBomb[playerid][bDefusing] = 0;
			GameTextForPlayer(playerid, " ",2000,3);
	 	    if(TWPlayerBomb[player][bcObject][slot] > -1)
			{
			    if(GetPlayerVirtualWorld(playerid) == TWPlayerBomb[player][cWorldID][slot] && IsPlayerInRangeOfPoint(playerid, 2,TWPlayerBomb[player][bcX][slot],TWPlayerBomb[player][bcY][slot],TWPlayerBomb[player][bcZ][slot]))
			 	{
			 	    if(!IsPlayerInRangeOfPoint(playerid, 2,TWPlayerBomb[playerid][bpX],TWPlayerBomb[playerid][bpY],TWPlayerBomb[playerid][bpZ]))
						return 0;
	 	    		DestroyTheDynamicObject(TWPlayerBomb[player][bcObject][slot]);
			 	    TWPlayerBomb[player][bcObject][slot] = -1;
					TWPlayerBomb[player][bCar][slot] = -1;
	                TWPlayerBomb[player][bAmount]--;
	                if(TWPlayerBomb[player][bAmount] <= 0 && SearchForWeapon(player,40))RemovePlayerWeapon(player, 40);
	                GameTextForPlayer(playerid, "~n~ ~n~ ~n~ ~n~ ~w~Mine defused", 2000, 3);
				    return 0;
				}
			}
	 	    if(TWPlayerBomb[player][bCar][slot] > -1 && GetPlayerVirtualWorld(playerid) == GetVehicleVirtualWorld(TWPlayerBomb[player][bCar][slot]))
	 		{
				if((GetClosestVehicle(playerid) == TWPlayerBomb[player][bCar][slot] && PlayerToVehicle(playerid, TWPlayerBomb[player][bCar][slot], 4.0)))
			    {
					new vehid = TWPlayerBomb[player][bCar][slot];
					if(!TWPlayerBomb[playerid][bSurfing])
					{
					    new Float:x, Float:y, Float:z;
						GetVehiclePos(vehid,x,y,z);
					    if(!IsPlayerInRangeOfPoint(playerid, 2,TWPlayerBomb[playerid][bpX],TWPlayerBomb[playerid][bpY],TWPlayerBomb[playerid][bpZ])
						|| ( floatround(floatabs(floatsub(x,TWPlayerBomb[playerid][bvX]))) > 2 ||  floatround(floatabs(floatsub(y,TWPlayerBomb[playerid][bvY]))) > 2 ||  floatround(floatabs(floatsub(z,TWPlayerBomb[playerid][bvZ]))) > 2))
						return 0;
					}
					else
					{
					    if(TWPlayerBomb[playerid][bSurfing] != -1)
					    {
					    	if(TWPlayerBomb[playerid][bSurfing] != GetPlayerSurfingVehicleID(playerid))
					    	{
					    	    return 0;
					    	}
						}
					}
					TWPlayerBomb[player][bCar][slot] = -1;
					FixTWVehicleFromMine(vehid, 1);
	                TWPlayerBomb[player][bAmount]--;
	                if(TWPlayerBomb[player][bAmount] <= 0 && SearchForWeapon(player,40))RemovePlayerWeapon(player, 40);
	                GameTextForPlayer(playerid, "~n~ ~n~ ~n~ ~n~ ~w~Mine defused", 2000, 3);
				    return 0;
				}
			}
			if(TWPlayerBomb[player][bShip][slot] > -1)
			{
			    if(GetPlayerVirtualWorld(playerid) == TWPlayerBomb[player][sWorldID][slot] && IsPlayerInRangeOfPoint(playerid, 2,TWPlayerBomb[player][bsX][slot],TWPlayerBomb[player][bsY][slot],TWPlayerBomb[player][bsZ][slot]))
			 	{
			 	    if(!IsPlayerInRangeOfPoint(playerid, 2,TWPlayerBomb[playerid][bpX],TWPlayerBomb[playerid][bpY],TWPlayerBomb[playerid][bpZ]))
						return 0;
                    GameTextForPlayer(playerid, "~n~ ~n~ ~n~ ~n~ ~w~Mine defused", 2000, 3);
					DestroyTheDynamicObject(TWPlayerBomb[player][bsObject][slot]);
					TWPlayerBomb[player][bShip][slot] = -1;
			 	    TWPlayerBomb[player][bsObject][slot] = -1;
	                TWPlayerBomb[player][bAmount]--;
	                if(TWPlayerBomb[player][bAmount] <= 0 && SearchForWeapon(player,40))RemovePlayerWeapon(player, 40);
	                return 0;
			    }
			}
			if(TWPlayerBomb[player][bObject][slot] > -1)
			{
		 	    if(GetPlayerVirtualWorld(playerid) == TWPlayerBomb[player][WorldID][slot] && IsPlayerInRangeOfPoint(playerid, 2,TWPlayerBomb[player][bX][slot],TWPlayerBomb[player][bY][slot],TWPlayerBomb[player][bZ][slot]))
			 	{
			 	    if(!IsPlayerInRangeOfPoint(playerid, 2,TWPlayerBomb[playerid][bpX],TWPlayerBomb[playerid][bpY],TWPlayerBomb[playerid][bpZ]))
						return 0;
                    GameTextForPlayer(playerid, "~n~ ~n~ ~n~ ~n~ ~w~Mine defused", 2000, 3);
					DestroyTheDynamicObject(TWPlayerBomb[player][bObject][slot]);
			 	    TWPlayerBomb[player][bObject][slot] = -1;
	                TWPlayerBomb[player][bAmount]--;
	                if(TWPlayerBomb[player][bAmount] <= 0 && SearchForWeapon(player,40))RemovePlayerWeapon(player, 40);
	                return 0;
			    }
			}
			//printf("DEBUG CFONTROL PlayerDefuseSync 2");
		}
		else
		{
		    if(!TWPlayerBomb[playerid][bSurfing] && TWPlayerBomb[player][bCar][slot] > -1)
			{
			    new Float:x, Float:y, Float:z;
				GetVehiclePos(TWPlayerBomb[player][bCar][slot],x,y,z);
			    if(!IsPlayerInRangeOfPoint(playerid, 2,TWPlayerBomb[playerid][bpX],TWPlayerBomb[playerid][bpY],TWPlayerBomb[playerid][bpZ])
				|| ( floatround(floatabs(floatsub(x,TWPlayerBomb[playerid][bvX]))) > 2 ||  floatround(floatabs(floatsub(y,TWPlayerBomb[playerid][bvY]))) > 2 ||  floatround(floatabs(floatsub(z,TWPlayerBomb[playerid][bvZ]))) > 2))
				{
                    TWPlayerBomb[playerid][bDefusing] = 0;
				    ClearAnimations(playerid);
				    Sync(playerid);
				    GameTextForPlayer(playerid, " ",2000,3);
				    return 0;
				}
			}
			else
			{
			    if(TWPlayerBomb[playerid][bSurfing] != -1)
			    {
			    	if(TWPlayerBomb[playerid][bSurfing] != GetPlayerSurfingVehicleID(playerid))
			    	{
			    	    TWPlayerBomb[playerid][bDefusing] = 0;
					    ClearAnimations(playerid);
					    Sync(playerid);
						GameTextForPlayer(playerid, " ",2000,3);
					    return 0;
			    	}
				}
			}
			if(TWPlayerBomb[playerid][bSurfing] == -1)
			{
			    if(!IsPlayerInRangeOfPoint(playerid, 2,TWPlayerBomb[playerid][bpX],TWPlayerBomb[playerid][bpY],TWPlayerBomb[playerid][bpZ]))
				{
                    TWPlayerBomb[playerid][bDefusing] = 0;
				    ClearAnimations(playerid);
				    Sync(playerid);
				    GameTextForPlayer(playerid, " ",2000,3);
				    return 0;
				}
			}
			SetPlayerArmedWeapon(playerid, 0);
			new text[40];
			format(text,sizeof(text)," ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~w~ %d",time);
			GameTextForPlayer(playerid, text,2000,3);
			KillTimer(TWPlayerInfo[playerid][kscTimer]);
			TWPlayerInfo[playerid][kscTimer] = SetTimerEx("PlayerDefuseSync",900,0,"dddd",playerid,player,slot,time);
		}
    }
	return 0;
}
stock VehicleIsBombedFromPlayer(playerid,vehicleid)
{
    forLoop(v, MAX_ENGI_BOMBS)
	{
	    if(vehicleid == TWPlayerBomb[playerid][bCar][v])
		{
			//printf("DEBUG CFONTROL VehicleIsBombedFromPlayer");
	        return true;
		}
	}
	return false;
}
stock ShipGroundIsBombedFromPlayer(playerid)
{
    forLoop(i, MAX_PLAYERS)
	{
    	if(IsPlayerConnected(i) && GetPlayerMode(i) == TW)
    	{
		    forLoop(v, MAX_ENGI_BOMBS)
			{
			    if(TWPlayerBomb[i][bShip][v] > -1)
				{
			 	    if(GetPlayerVirtualWorld(playerid) == TWPlayerBomb[i][sWorldID][v] && IsPlayerInRangeOfPoint(playerid, 2,TWPlayerBomb[i][bsX][v],TWPlayerBomb[i][bsY][v],TWPlayerBomb[i][bsZ][v]))
				 	{
						//printf("DEBUG CFONTROL ShipGroundIsBombedFromPlayer");
				 	    return true;
				 	}
				}
			}
		}
	}
	return false;
}
stock GroundIsBombedFromPlayer(playerid)
{
    forLoop(i, MAX_PLAYERS)
	{
    	if(IsPlayerConnected(i) && GetPlayerMode(i) == TW)
    	{
		    forLoop(v, MAX_ENGI_BOMBS)
			{
			    if(TWPlayerBomb[i][bObject][v] > -1)
				{
			 	    if(GetPlayerVirtualWorld(playerid) == TWPlayerBomb[i][WorldID][v] && IsPlayerInRangeOfPoint(playerid, 2,TWPlayerBomb[i][bX][v],TWPlayerBomb[i][bY][v],TWPlayerBomb[i][bZ][v]))
				 	{
						//printf("DEBUG CFONTROL GroundIsBombedFromPlayer");
				 	    return true;
				 	}
				}
			}
		}
	}
	return false;
}
stock ExplodeGroundMinesFromPlaneBomb(Float:x, Float:y,Float:z, radius=5)
{
    forLoop(i, MAX_PLAYERS)
	{
    	if(IsPlayerConnected(i) && GetPlayerMode(i) == TW)
    	{
		    forLoop(v, MAX_ENGI_BOMBS)
			{
			    if(TWPlayerBomb[i][bObject][v] > -1)
				{
			 	    if(floatround(floatabs(floatsub(TWPlayerBomb[i][bX][v],x))) <= radius &&
						floatround(floatabs(floatsub(TWPlayerBomb[i][bY][v],y))) <= radius &&
						floatround(floatabs(floatsub(TWPlayerBomb[i][bZ][v],z))) <= radius)
				 	{
						//printf("DEBUG CFONTROL ExplodeGroundMinesFromPlaneBomb 1");
				 	    CreateExplosionEx(TWPlayerBomb[i][WorldID][v], TWPlayerBomb[i][bX][v],TWPlayerBomb[i][bY][v],TWPlayerBomb[i][bZ][v], 10, 20, 57, true,i);
					    if(TWPlayerBomb[i][bObject][v]>-1)DestroyTheDynamicObject(TWPlayerBomb[i][bObject][v]);
				 	    TWPlayerBomb[i][bObject][v] = -1;
				 	    TWPlayerBomb[i][bAmount]--;
		                if(TWPlayerBomb[i][bAmount] <= 0 && SearchForWeapon(i,40))RemovePlayerWeapon(i, 40);
	 	    			ExplodeGroundMinesFromPlaneBomb(TWPlayerBomb[i][bX][v],TWPlayerBomb[i][bY][v],TWPlayerBomb[i][bZ][v], radius);
						//printf("DEBUG CFONTROL ExplodeGroundMinesFromPlaneBomb 2");
				 	}
				}
			}
		}
	}
	return false;
}
stock ExplodeGroundMinesFromPlayer(playerid, slot)
{
    forLoop(i, MAX_PLAYERS)
	{
    	if(IsPlayerConnected(i) && GetPlayerMode(i) == TW)
    	{
		    forLoop(v, MAX_ENGI_BOMBS)
			{
			    if(TWPlayerBomb[i][bObject][v] > -1)
				{
			 	    if(TWPlayerBomb[playerid][WorldID][slot] == TWPlayerBomb[i][WorldID][v] &&
					 		floatround(floatabs(floatsub(TWPlayerBomb[i][bX][v],TWPlayerBomb[playerid][bX][slot]))) <= 4 &&
							floatround(floatabs(floatsub(TWPlayerBomb[i][bY][v],TWPlayerBomb[playerid][bY][slot]))) <= 4 &&
							floatround(floatabs(floatsub(TWPlayerBomb[i][bZ][v],TWPlayerBomb[playerid][bZ][slot]))) <= 4)
				 	{
						//printf("DEBUG CFONTROL ExplodeGroundMinesFromPlayer 1");
				 	    CreateExplosionEx(TWPlayerBomb[i][WorldID][v], TWPlayerBomb[i][bX][v],TWPlayerBomb[i][bY][v],TWPlayerBomb[i][bZ][v], 10, 20, 57, true,i);
					    if(TWPlayerBomb[i][bObject][v]>-1)DestroyTheDynamicObject(TWPlayerBomb[i][bObject][v]);
				 	    TWPlayerBomb[i][bObject][v] = -1;
				 	    TWPlayerBomb[i][bAmount]--;
		                if(TWPlayerBomb[i][bAmount] <= 0 && SearchForWeapon(i,40))RemovePlayerWeapon(i, 40);
	 	    			ExplodeGroundMinesFromPlayer(i, v);
						//printf("DEBUG CFONTROL ExplodeGroundMinesFromPlayer 2");
				 	}
				}
			}
		}
	}
	return false;
}
stock ExplodeShipMinesFromPlayer(playerid, slot)
{
    forLoop(i, MAX_PLAYERS)
	{
    	if(IsPlayerConnected(i) && GetPlayerMode(i) == TW && playerid != i)
    	{
		    forLoop(v, MAX_ENGI_BOMBS)
			{
			    if(TWPlayerBomb[i][bShip][v] == TWPlayerBomb[playerid][bShip][slot] && TWPlayerBomb[i][bsObject][v] > -1)
				{
				    if(TWPlayerBomb[playerid][sWorldID][slot] == TWPlayerBomb[i][sWorldID][v] &&
						floatround(floatabs(floatsub(TWPlayerBomb[playerid][bsX][slot],TWPlayerBomb[i][bsX]))) <= 4
						 && floatround(floatabs(floatsub(TWPlayerBomb[playerid][bsY][slot],TWPlayerBomb[i][bsY]))) <= 4
						  && floatround(floatabs(floatsub(TWPlayerBomb[playerid][bsZ][slot],TWPlayerBomb[i][bsZ]))) <= 4)
			 	    {
						//printf("DEBUG CFONTROL ExplodeShipMinesFromPlayer 1");
				 		CreateExplosionEx(TWPlayerBomb[i][sWorldID][v], TWPlayerBomb[i][bsX][v],TWPlayerBomb[i][bsY][v],TWPlayerBomb[i][bsZ][v], 10, 20, 57, true,i);
				 	    if(TWPlayerBomb[i][bsObject][v]>-1)DestroyTheDynamicObject(TWPlayerBomb[i][bsObject][v]);
				 	    TWPlayerBomb[i][bsObject][v] = -1;
				 	    ShipStateFromEngieMine(i,TWPlayerBomb[i][bShip][v]);
				 	    TWPlayerBomb[i][bAmount]--;
				    	TWPlayerBomb[i][bShip][v] = -1;
		                if(TWPlayerBomb[i][bAmount] <= 0 && SearchForWeapon(i,40))RemovePlayerWeapon(i, 40);
				    	ExplodeShipMinesFromPlayer(i, v);
						//printf("DEBUG CFONTROL ExplodeShipMinesFromPlayer 2");
				 	}
				}
			}
		}
	}
	return false;
}
stock ExplodeShipMinesFromPlaneBomb(shipid, Float:x, Float:y, radius=5)
{
    forLoop(i, MAX_PLAYERS)
	{
    	if(IsPlayerConnected(i) && GetPlayerMode(i) == TW)
    	{
		    forLoop(v, MAX_ENGI_BOMBS)
			{
			    if(TWPlayerBomb[i][bShip][v] == shipid)
				{
				    if(floatround(floatabs(floatsub(x,TWPlayerBomb[i][bsX]))) <= radius && floatround(floatabs(floatsub(y,TWPlayerBomb[i][bsY]))) <= radius)
			 	    {
			 	        //printf("DEBUG CFONTROL ExplodeShipMinesFromPlaneBomb 1");
				 	    CreateExplosionEx(TWPlayerBomb[i][sWorldID][v], TWPlayerBomb[i][bsX][v],TWPlayerBomb[i][bsY][v],TWPlayerBomb[i][bsZ][v], 10, 20, 57, true,i);
				 	    if(TWPlayerBomb[i][bsObject][v]>-1)DestroyTheDynamicObject(TWPlayerBomb[i][bsObject][v]);
				 	    TWPlayerBomb[i][bsObject][v] = -1;
				 	    ShipStateFromEngieMine(i,TWPlayerBomb[i][bShip][v]);
				 	    TWPlayerBomb[i][bAmount]--;
		                TWPlayerBomb[i][bShip][v] = -1;
				    	if(TWPlayerBomb[i][bAmount] <= 0 && SearchForWeapon(i,40))RemovePlayerWeapon(i, 40);
		                ExplodeShipMinesFromPlaneBomb(shipid, TWPlayerBomb[i][bsX][v],TWPlayerBomb[i][bsY][v], radius);
						//printf("DEBUG CFONTROL ExplodeShipMinesFromPlaneBomb 2");
				    }
				}
			}
		}
	}
	return false;
}

forward RespawnVehicle(car);
public RespawnVehicle(car)
{
	//printf("DEBUG CFONTROL RespawnVehicle 1");
    SetVehicleToRespawn(car);
	//printf("DEBUG CFONTROL RespawnVehicle 2");
}
stock GetXYInFrontOfPlayer(playerid, &Float:x, &Float:y, &Float:z, Float:distance)
{
	//printf("DEBUG CFONTROL GetXYInFrontOfPlayer 1");
    new Float:a;

    GetPlayerPos(playerid, x, y, z);
    GetPlayerFacingAngle(playerid, a);

    if (GetPlayerVehicleID(playerid)) {
        GetVehicleZAngle(GetPlayerVehicleID(playerid), a);
    }

    x += (distance * floatsin(-a, degrees));
    y += (distance * floatcos(-a, degrees));
	//printf("DEBUG CFONTROL GetXYInFrontOfPlayer 2");
}
stock DestroyAllPlayerTWBombs(playerid)
{
	//printf("DEBUG CFONTROL DestroyAllPlayerTWBombs 1");
    forLoop(v, MAX_ENGI_BOMBS)
 	{
 	    if(TWPlayerBomb[playerid][bObject][v]>-1)DestroyTheDynamicObject(TWPlayerBomb[playerid][bObject][v]);
 	    if(TWPlayerBomb[playerid][bcObject][v]>-1)DestroyTheDynamicObject(TWPlayerBomb[playerid][bcObject][v]);
        if(TWPlayerBomb[playerid][bsObject][v]>-1)DestroyTheDynamicObject(TWPlayerBomb[playerid][bsObject][v]);
	 	TWPlayerBomb[playerid][bsObject][v] = -1;
	 	TWPlayerBomb[playerid][bObject][v] = -1;
    	TWPlayerBomb[playerid][bcObject][v] = -1;
    	TWPlayerBomb[playerid][bCar][v] = -1;
    	TWPlayerBomb[playerid][bShip][v] = -1;
	}
	TWPlayerBomb[playerid][bAmount] = 0;
	TWPlayerBomb[playerid][bPlanting] = 0;
	TWPlayerBomb[playerid][bDefusing] = 0;
	TWPlayerBomb[playerid][rRepairing] = 0;
	if(SearchForWeapon(playerid,40))RemovePlayerWeapon(playerid, 40);
	//printf("DEBUG CFONTROL DestroyAllPlayerTWBombs 2");
}
stock ExplodeAllPlayerTWBombsForShip(playerid, ship)
{
	//printf("DEBUG CFONTROL ExplodeAllPlayerTWBombsForShip 1");
    forLoop(v, MAX_ENGI_BOMBS)
 	{
 	    if(TWPlayerBomb[playerid][bShip][v] == ship)
 	    {
	    	CreateExplosionEx(TWPlayerBomb[playerid][sWorldID][v], TWPlayerBomb[playerid][bsX][v],TWPlayerBomb[playerid][bsY][v],TWPlayerBomb[playerid][bsZ][v], 10, 20, 57, true,playerid);
	 	    if(TWPlayerBomb[playerid][bsObject][v]>-1)DestroyTheDynamicObject(TWPlayerBomb[playerid][bsObject][v]);
	 	    TWPlayerBomb[playerid][bsObject][v] = -1;
	    	TWPlayerBomb[playerid][bShip][v] = -1;
			TWPlayerBomb[playerid][bAmount]--;
			if(TWPlayerBomb[playerid][bAmount] <= 0 && SearchForWeapon(playerid,40))RemovePlayerWeapon(playerid, 40);
		}
	}
	//printf("DEBUG CFONTROL ExplodeAllPlayerTWBombsForShip 2");
}
stock DestroyAllPlayerTWBombsForShip(playerid, ship)
{
	//printf("DEBUG CFONTROL DestroyAllPlayerTWBombsForShip 1");
    forLoop(v, MAX_ENGI_BOMBS)
 	{
 	    if(TWPlayerBomb[playerid][bShip][v] == ship)
 	    {
	 	    if(TWPlayerBomb[playerid][bsObject][v]>-1)DestroyTheDynamicObject(TWPlayerBomb[playerid][bsObject][v]);
	 	    TWPlayerBomb[playerid][bsObject][v] = -1;
	    	TWPlayerBomb[playerid][bShip][v] = -1;
			TWPlayerBomb[playerid][bAmount]--;
			if(TWPlayerBomb[playerid][bAmount] <= 0 && SearchForWeapon(playerid,40))RemovePlayerWeapon(playerid, 40);
	    }
	}
	//printf("DEBUG CFONTROL DestroyAllPlayerTWBombsForShip 2");
}

stock ExplodeAllPlayerTWBombs(playerid)
{
	//printf("DEBUG CFONTROL ExplodeAllPlayerTWBombs 1");
	forLoop(v, MAX_ENGI_BOMBS)
 	{
 	    if(TWPlayerBomb[playerid][bCar][v] > -1)
 	    {
	 	    new Float:x,Float:y,Float:z;
			GetVehiclePos(TWPlayerBomb[playerid][bCar][v],x,y,z);
			SetVehicleHealth(TWPlayerBomb[playerid][bCar][v],230);
		 	CreateExplosionEx(W_TW, x,y,z, 10, 20, 57, true,playerid);
			SetTimerEx("RespawnVehicle",21000,0,"d",TWPlayerBomb[playerid][bCar][v]);
			
			if(TWPlayerBomb[playerid][bcObject][v]>-1)
			{
			    CreateExplosionEx(TWPlayerBomb[playerid][cWorldID][v], TWPlayerBomb[playerid][bcX][v],TWPlayerBomb[playerid][bcY][v],TWPlayerBomb[playerid][bcZ][v], 10, 20, 57, true,playerid);
				DestroyTheDynamicObject(TWPlayerBomb[playerid][bcObject][v]);
			}
	 	    TWPlayerBomb[playerid][bcObject][v] = -1;
	    	forLoop(u, MAX_PLAYERS)
            {
				if(IsPlayerConnected(u) && playerid != u)
				{
			        if(IsPlayerInAnyVehicle(u) && GetPlayerVehicleID(u) == TWPlayerBomb[playerid][bCar][v])
					{
				        SetPVarInt(u, "ExpDamager", playerid+1);
					    SetPVarInt(u, "ExpReason", 57);
					    ResetCustomDeathTimer(u, 6000);
				    }
					if(PlayerInfo[u][InNevada] == TWPlayerBomb[playerid][bCar][v])
					{
					    new Float:burnx, Float:burny, Float:burnz;
						GetPlayerPos(u,burnx, burny, burnz);
						CreateExplosionEx(GetPlayerVirtualWorld(u), burnx, burny , burnz, 10.0, 50, 57, true,playerid);
					    SetHealth(u, 0.0);
					    PlayerInfo[u][InNevada] = -1;
						SendClientMessage(u,red1,"{FF0000}Notice:{FFFFFF} The plane has exploded, and everyone inside has died.");
					}
					if(PlayerInfo[u][InTank] == TWPlayerBomb[playerid][bCar][v])
					{
					    new Float:burnx, Float:burny, Float:burnz;
						GetPlayerPos(u,burnx, burny, burnz);
						CreateExplosionEx(GetPlayerVirtualWorld(u), burnx, burny , burnz, 10.0, 50, 57, true,playerid);
					    SetHealth(u, 0.0);
					    PlayerInfo[u][InTank] = -1;
						SendClientMessage(u,red1,"{FF0000}Notice:{FFFFFF} The tank has exploded, and everyone inside has died.");
					}
				}
			}
			FixTWVehicleFromMine(TWPlayerBomb[playerid][bCar][v], 0);
			TWPlayerBomb[playerid][bCar][v] = -1;
		}
 	    if(TWPlayerBomb[playerid][bShip][v] > -1)
 	    {
 	        CreateExplosionEx(TWPlayerBomb[playerid][sWorldID][v], TWPlayerBomb[playerid][bsX][v],TWPlayerBomb[playerid][bsY][v],TWPlayerBomb[playerid][bsZ][v], 10, 20, 57, true,playerid);
	 	    if(TWPlayerBomb[playerid][bsObject][v]>-1)DestroyTheDynamicObject(TWPlayerBomb[playerid][bsObject][v]);
	 	    TWPlayerBomb[playerid][bsObject][v] = -1;
	 	    ShipStateFromEngieMine(playerid,TWPlayerBomb[playerid][bShip][v]);
	 	    //ExplodeShipMinesFromPlayer(playerid,v);
	    	TWPlayerBomb[playerid][bShip][v] = -1;
		}
		if(TWPlayerBomb[playerid][bObject][v]>-1)
		{
		    CreateExplosionEx(TWPlayerBomb[playerid][WorldID][v], TWPlayerBomb[playerid][bX][v],TWPlayerBomb[playerid][bY][v],TWPlayerBomb[playerid][bZ][v], 10, 20, 57, true,playerid);
		    if(TWPlayerBomb[playerid][bObject][v]>-1)DestroyTheDynamicObject(TWPlayerBomb[playerid][bObject][v]);
	 	    TWPlayerBomb[playerid][bObject][v] = -1;
	 	    //ExplodeGroundMinesFromPlayer(playerid, v);
		}
	}
	DestroyAllPlayerTWBombs(playerid);
	//printf("DEBUG CFONTROL ExplodeAllPlayerTWBombs 2");
}
stock ShipStateFromEngieMine(playerid, id)
{
	//printf("DEBUG CFONTROL ShipStateFromEngieMine 1");
    if(ShipInfo[id][sHP] > 0)
    {
		new string[228];
	    if(ShipInfo[id][CallForIt]==1)
		{
		    format(string,128,"{33FF33}WAR NEWS:{FFFFFF} The {FF9900}%s{FFFFFF}, is being bombed by an engineer.",ShipInfo[id][NameFull]);
			SendMessageToMode(TW,white,string);
		  	format(string, sizeof(string), "[WAR NEWS] The %s, is being bombed by an engineer.",ShipInfo[id][NameFull]);
			db_SaveChat(-1, TW,string);
			SetTimerEx("CallForAttack", 45000, 0, "i", id);
		}
	    ShipInfo[id][CallForIt]=0;
		ShipInfo[id][sHP]-=2;
		if(ShipInfo[id][Type] == SUB)
			CreateExplosionEx(W_TW, ShipInfo[id][sX], ShipInfo[id][sY] , ShipInfo[id][sZ], 10.0, 50, 57, true,playerid);

		CheckShipToSink(id, 2, playerid);
		UpdateShipHealthText(id);
		//CheckUnSunkShips();
	}
	//printf("DEBUG CFONTROL ShipStateFromEngieMine 2");
}

forward PlayerBombSync(playerid,type,id,createobject,time);
public PlayerBombSync(playerid,type,id,createobject,time)
{
	if(GetPlayerMode(playerid) == TW && TWPlayerInfo[playerid][Class] == ENGINEER && TWPlayerBomb[playerid][bPlanting])
	{
	    time--;
	    if(time <= 0)
	    {
			//printf("DEBUG CFONTROL PlayerBombSync 1");
	    	TWPlayerBomb[playerid][bPlanting] = 0;
		    ClearAnimations(playerid);
		    Sync(playerid);
			GameTextForPlayer(playerid, " ",2000,3);
			RemovePlayerAttachedObjectEx(playerid, 6);
			if(type == 0)//car
			{
			    if(!TWPlayerBomb[playerid][bSurfing])
				{
				    new Float:x, Float:y, Float:z;
					GetVehiclePos(id,x,y,z);
				    if(!IsPlayerInRangeOfPoint(playerid, 2,TWPlayerBomb[playerid][bpX],TWPlayerBomb[playerid][bpY],TWPlayerBomb[playerid][bpZ])
					|| ( floatround(floatabs(floatsub(x,TWPlayerBomb[playerid][bvX]))) > 2 ||  floatround(floatabs(floatsub(y,TWPlayerBomb[playerid][bvY]))) > 2 ||  floatround(floatabs(floatsub(z,TWPlayerBomb[playerid][bvZ]))) > 2))
					return 0;
				}
				else
				{
				    if(TWPlayerBomb[playerid][bSurfing] != -1)
				    {
				    	if(TWPlayerBomb[playerid][bSurfing] != GetPlayerSurfingVehicleID(playerid))
				    	{
				    	    return 0;
				    	}
					}
				}

				if(TWPlayerBomb[playerid][bSurfing] == -1)
				{
				    if(!IsPlayerInRangeOfPoint(playerid, 2,TWPlayerBomb[playerid][bpX],TWPlayerBomb[playerid][bpY],TWPlayerBomb[playerid][bpZ]))
						return 0;
				}
				forLoop(v, MAX_ENGI_BOMBS)
				{
					if(TWPlayerBomb[playerid][bCar][v] == -1)
					{
						TWPlayerBomb[playerid][bCar][v] = id;
						if(createobject==1)
						{
					        new Float:x, Float:y, Float:z;
							GetXYInFrontOfPlayer(playerid, x, y, z, 0.7);
							if(TWPlayerBomb[playerid][bcObject][v] == -1)
							{
							    TWPlayerBomb[playerid][bcX][v] = x;
								TWPlayerBomb[playerid][bcY][v] = y;
								TWPlayerBomb[playerid][bcZ][v] = z;
								TWPlayerBomb[playerid][cWorldID][v] = GetPlayerVirtualWorld(playerid);
				        		TWPlayerBomb[playerid][bcObject][v] = CreateTheDynamicObject(363,TWPlayerBomb[playerid][bcX][v],TWPlayerBomb[playerid][bcY][v],TWPlayerBomb[playerid][bcZ][v]-0.67,0.0,0.0,0.0,GetPlayerVirtualWorld(playerid));
				        		forLoop(i, MAX_PLAYERS)
							    {
									if(IsPlayerConnected(i) && GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid) && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][PlayerMode] == TW)
									{
									    if(IsPlayerInRangeOfPoint(i, 50 ,x, y, z))
									    {
								    		Streamer_Update(i);
										}
							    	}
						        }
							}
						}
						break;
					}
				}
				SetVehicleParamsForPlayer(id,playerid,1,0);
				GameTextForPlayer(playerid, "~n~ ~n~ ~n~ ~n~ ~w~Mine Planted", 2000, 3);
			}
			if(type == 1)//ship or submarine
			{
			    if(!IsPlayerInRangeOfPoint(playerid, 2,TWPlayerBomb[playerid][bpX],TWPlayerBomb[playerid][bpY],TWPlayerBomb[playerid][bpZ]))
			        return 0;
			    forLoop(v, MAX_ENGI_BOMBS)
				{
					if(TWPlayerBomb[playerid][bShip][v] == -1)
					{
						TWPlayerBomb[playerid][bShip][v] = id;
						new Float:x, Float:y, Float:z;
						GetXYInFrontOfPlayer(playerid, x, y, z, 0.7);
						TWPlayerBomb[playerid][bsX][v] = x;
						TWPlayerBomb[playerid][bsY][v] = y;
						TWPlayerBomb[playerid][bsZ][v] = z;
						TWPlayerBomb[playerid][sWorldID][v] = GetPlayerVirtualWorld(playerid);
		        		TWPlayerBomb[playerid][bsObject][v] = CreateTheDynamicObject(363,TWPlayerBomb[playerid][bsX][v],TWPlayerBomb[playerid][bsY][v],TWPlayerBomb[playerid][bsZ][v]-0.67,0.0,0.0,0.0,GetPlayerVirtualWorld(playerid));
		        		forLoop(i, MAX_PLAYERS)
					    {
							if(IsPlayerConnected(i) && GetPlayerVirtualWorld(i) == W_TW && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][PlayerMode] == TW)
							{
							    if(IsPlayerInRangeOfPoint(i, 50 ,x, y, z))
							    {
						    		Streamer_Update(i);
								}
					    	}
				        }
						break;
					}
				}
			}
		    if(type == 2)//ground
			{
			    if(!IsPlayerInRangeOfPoint(playerid, 2,TWPlayerBomb[playerid][bpX],TWPlayerBomb[playerid][bpY],TWPlayerBomb[playerid][bpZ]))
			        return 0;
			    new Float:x, Float:y, Float:z;
				GetXYInFrontOfPlayer(playerid, x, y, z, 0.7);
				forLoop(v, MAX_ENGI_BOMBS)
				{
					if(TWPlayerBomb[playerid][bObject][v] == -1)
					{
					    TWPlayerBomb[playerid][bX][v] = x;
						TWPlayerBomb[playerid][bY][v] = y;
						TWPlayerBomb[playerid][bZ][v] = z;
						TWPlayerBomb[playerid][WorldID][v] = GetPlayerVirtualWorld(playerid);
		        		TWPlayerBomb[playerid][bObject][v] = CreateTheDynamicObject(363,TWPlayerBomb[playerid][bX][v],TWPlayerBomb[playerid][bY][v],TWPlayerBomb[playerid][bZ][v]-0.67,0.0,0.0,0.0,GetPlayerVirtualWorld(playerid));
		        		forLoop(i, MAX_PLAYERS)
					    {
							if(IsPlayerConnected(i) && GetPlayerVirtualWorld(i) == W_TW && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][PlayerMode] == TW)
							{
							    if(IsPlayerInRangeOfPoint(i, 50 ,x, y, z))
							    {
						    		Streamer_Update(i);
								}
					    	}
				        }
						break;
					}
				}
				GameTextForPlayer(playerid, "~n~ ~n~ ~n~ ~n~ ~w~Mine Planted", 2000, 3);
			}
		    GiveWeapon(playerid,40,1);
			TWPlayerBomb[playerid][bAmount]++;
			if(TWPlayerBomb[playerid][bAmount] >= MAX_ENGI_BOMBS) RemovePlayerAttachedObjectEx(playerid, 7);
			//printf("DEBUG CFONTROL PlayerBombSync 2");
			return 0;
		}
		else
		{
		    if(type == 0)//car
			{
			    if(!TWPlayerBomb[playerid][bSurfing])
				{
				    new Float:x, Float:y, Float:z;
					GetVehiclePos(id,x,y,z);
				    if(!IsPlayerInRangeOfPoint(playerid, 2,TWPlayerBomb[playerid][bpX],TWPlayerBomb[playerid][bpY],TWPlayerBomb[playerid][bpZ])
					|| ( floatround(floatabs(floatsub(x,TWPlayerBomb[playerid][bvX]))) > 2 ||  floatround(floatabs(floatsub(y,TWPlayerBomb[playerid][bvY]))) > 2 ||  floatround(floatabs(floatsub(z,TWPlayerBomb[playerid][bvZ]))) > 2))
					{
	                    TWPlayerBomb[playerid][bPlanting] = 0;
					    ClearAnimations(playerid);
					    Sync(playerid);
						GameTextForPlayer(playerid, " ",2000,3);
					    return 0;
					}
				}
				else
				{
				    if(TWPlayerBomb[playerid][bSurfing] != -1)
				    {
				    	if(TWPlayerBomb[playerid][bSurfing] != GetPlayerSurfingVehicleID(playerid))
				    	{
				    	    TWPlayerBomb[playerid][bPlanting] = 0;
						    ClearAnimations(playerid);
						    Sync(playerid);
							GameTextForPlayer(playerid, " ",2000,3);
						    return 0;
				    	}
					}
				}
				if(TWPlayerBomb[playerid][bSurfing] == -1)
				{
				    if(!IsPlayerInRangeOfPoint(playerid, 2,TWPlayerBomb[playerid][bpX],TWPlayerBomb[playerid][bpY],TWPlayerBomb[playerid][bpZ]))
					{
	                    TWPlayerBomb[playerid][bPlanting] = 0;
					    ClearAnimations(playerid);
					    Sync(playerid);
						GameTextForPlayer(playerid, " ",2000,3);
					    return 0;
					}
				}
			}
			if(type == 1 || type == 2)
			{
			    if(!IsPlayerInRangeOfPoint(playerid, 2,TWPlayerBomb[playerid][bpX],TWPlayerBomb[playerid][bpY],TWPlayerBomb[playerid][bpZ]))
			    {
			        RemovePlayerAttachedObjectEx(playerid, 6);
                    TWPlayerBomb[playerid][bPlanting] = 0;
				    ClearAnimations(playerid);
				    Sync(playerid);
					GameTextForPlayer(playerid, " ",2000,3);
				    return 0;
				}
			}
			SetPlayerArmedWeapon(playerid, 0);
			new text[40];
			format(text,sizeof(text)," ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~w~ %d",time);
			GameTextForPlayer(playerid, text,2000,3);
			KillTimer(TWPlayerInfo[playerid][kscTimer]);
			TWPlayerInfo[playerid][kscTimer] = SetTimerEx("PlayerBombSync",900,0,"ddddd",playerid,type,id,createobject,time);
		}
    }
    return 0;
}

stock PlayerToCar(playerid, carid, Float:radius)
{
    if(!IsPlayerConnected(playerid)) return -1; // Checks if player is connected
    {
        new Float:X, Float:Y, Float:Z; // Base x, y, z values
        new Float:px, Float:py, Float:pz; //px, py, pz used to express
        GetPlayerPos(playerid, X, Y, Z); //
        GetVehiclePos(carid,px, py, pz); //
        X = floatsub(X, px);
        Y = floatsub(Y, py);
        Z = floatsub(Z, pz);
		//printf("DEBUG CFONTROL PlayerToCar");
        if( ( radius > X && X > -radius ) &&
        ( radius > Y && Y > -radius ) &&
        ( radius > Z && Z > -radius ) ) return 1;
    }
    return 0;
}
stock SetPlayerPosEx(playerid, Float:X, Float:Y, Float:Z, Float:ANG)
{
    SetPlayerPos(playerid, X, Y, Z);
    SetPlayerFacingAngle(playerid, ANG);
	SetCameraBehindPlayer(playerid);
}


stock SearchForWeapon(playerid, weapid)
{
	new spweap,spammo;
    forLoop(slot, 14)
	{
		GetPlayerWeaponData(playerid, slot, spweap, spammo);
		if(spweap == weapid && spammo > 0)return true;
	}
	return false;
}
stock GetWeaponAmmo(playerid, weapid)
{
	new spweap,spammo, retammo;
    forLoop(slot, 14)
	{
		GetPlayerWeaponData(playerid, slot, spweap, spammo);
		if(spweap == weapid)
		{
			retammo = spammo;
			break;
		}
	}
	return retammo;
}


stock RemovePlayerWeapon(playerid, weapid)
{
    if(SearchForWeapon(playerid,weapid))
    {
	    new spweap[14],spammo[14];
	    forLoop(slot, 14)
		{
			GetPlayerWeaponData(playerid, slot, spweap[slot], spammo[slot]);
		}

		ResetWeapons(playerid);
		forLoop(slot, 14)
		{
		    if(spweap[slot] != weapid)
				GiveWeapon(playerid,spweap[slot], spammo[slot]);
		}
		SetPlayerArmedWeapon(playerid, 0);
	}
}
stock ResetWeapons(playerid)
{
    forLoop(slot, 70)
		PlayerInfo[playerid][gWeap][slot] = 0;
    PlayerInfo[playerid][wCheck] = 0;
    ResetPlayerWeapons(playerid);
	return 1;
}
stock GiveWeapon(playerid,weapon,ammo)
{
	if(PlayerInfo[playerid][wCheck] == 0)
		PlayerInfo[playerid][wCheck] = SetTimerEx("givePlayerWeaponTimer", 900, false, "d", playerid);
		
	PlayerInfo[playerid][gWeap][weapon] = 1;
	GivePlayerWeapon(playerid,weapon,ammo);
	return 1;
}
forward givePlayerWeaponTimer(playerid);
public givePlayerWeaponTimer(playerid)
{
	PlayerInfo[playerid][wCheck] = 0;
	return 1;
}
/**
true if weapon is OK, false if hacking
*/
stock CheckLegalWeapon(playerid,wapp)
{
	return PlayerInfo[playerid][gWeap][wapp];
}

stock SetHealth(playerid,Float:amount)
{
	PlayerInfo[playerid][gHP] = amount;
    SetPlayerHealth(playerid, amount);
	return 1;
}
stock SetArmor(playerid,Float:amount)
{
	PlayerInfo[playerid][gArmor] = amount;
    SetPlayerArmour(playerid, amount);
	return 1;
}
stock GetWeaponSlot(weaponid)
{
	new slot;
	switch(weaponid)
	{
		case 0,1: slot = 0;
		case 2 .. 9: slot = 1;
		case 10 .. 15: slot = 10;
		case 16 .. 18, 39: slot = 8;
		case 22 .. 24: slot =2;
		case 25 .. 27: slot = 3;
		case 28, 29, 32: slot = 4;
		case 30, 31: slot = 5;
		case 33, 34: slot = 6;
		case 35 .. 38: slot = 7;
		case 40: slot = 12;
		case 41 .. 43: slot = 9;
		case 44 .. 46: slot = 11;
	}
	return slot;
}

CMD:sethealth(playerid,params[])
{
	if(PlayerInfo[playerid][Level] >= 4)
	{
	    new player1,health, string[128];
   		if (sscanf(params, "dd", player1,health)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /sethealth <playerid> <health>");
        if((health < 0 || health > 100) && PlayerInfo[playerid][Level] != 6) return SendClientMessage(playerid, red, "{FF0000}Error:{FFFFFF} Invaild health amount");
		if(IsPlayerConnected(player1) && player1 != INVALID_PLAYER_ID) {
			if(PlayerInfo[player1][Level] > PlayerInfo[playerid][Level]) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} It is not necessary for this player.");
        	if(GetPlayerState(player1) == PLAYER_STATE_SPECTATING || GetPlayerState(player1) == PLAYER_STATE_WASTED)return SendClientMessage(playerid,blue,"{FF0000}Error:{FFFFFF} You cannot use this command on the player now.");
			format(string, sizeof(string), "Notice:{FFFFFF} You have set %s's health to '%d", PlayerInfo[player1][Name], health); SendClientMessage(playerid,blue,string);
   			return SetHealth(player1, health);
	    } else return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Player is not connected");
	} else return 0;
}

CMD:setarmour(playerid,params[]) {
	if(PlayerInfo[playerid][Level] >= 4) {
	    new player1,armour, string[128];
   		if (sscanf(params, "dd", player1,armour)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /setarmour <playerid> <armour>");
        if((armour < 0 || armour > 100) && PlayerInfo[playerid][Level] != 6) return SendClientMessage(playerid, red, "{FF0000}Error:{FFFFFF} Invaild armor amount");
		if(IsPlayerConnected(player1) && player1 != INVALID_PLAYER_ID) {
			if(PlayerInfo[player1][Level] > PlayerInfo[playerid][Level]) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} It is not necessary for this player.");
			if(GetPlayerState(player1) == PLAYER_STATE_SPECTATING || GetPlayerState(player1) == PLAYER_STATE_WASTED)return SendClientMessage(playerid,blue,"{FF0000}Error:{FFFFFF} You cannot use this command on the player now.");
			format(string, sizeof(string), "Notice:{FFFFFF} You have set %s's armour to '%d", PlayerInfo[player1][Name], armour); SendClientMessage(playerid,blue,string);
   			return SetArmor(player1, armour);
	    } else return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Player is not connected");
	} else return 0;
}

CMD:givecash(playerid,params[]) {
	if(PlayerInfo[playerid][Level] >= 4) {
	    new player1,cash, string[128];
   		if (sscanf(params, "dd", player1,cash)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /givecash <playerid> <cash>");
        if(IsPlayerConnected(player1) && player1 != INVALID_PLAYER_ID) {
			if(PlayerInfo[player1][Level] > PlayerInfo[playerid][Level]) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} It is not necessary for this player.");
			format(string, sizeof(string), "Notice:{FFFFFF} You have given %s $%d", PlayerInfo[player1][Name], cash); SendClientMessage(playerid,blue,string);
   			return GiveThePlayerMoney(player1, cash);
	    } else return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Player is not connected");
	} else return 0;
}

CMD:givecredit(playerid,params[]) {
	if(PlayerInfo[playerid][Level] > 5) {
	    new player1,score, string[128];
   		if (sscanf(params, "dd", player1,score)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /givecredit <playerid> <amount>");
        if(IsPlayerConnected(player1) && player1 != INVALID_PLAYER_ID) {
			if(PlayerInfo[player1][Level] > PlayerInfo[playerid][Level]) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} It is not necessary for this player.");
			format(string, sizeof(string), "Notice:{FFFFFF} You have given %s %d credits ", PlayerInfo[player1][Name], score);
			SendClientMessage(playerid,blue,string);
			format(string, sizeof(string), "Notice:{FFFFFF} Admin has given you %d server credits", score);
			SendClientMessage(player1,blue,string);
            PlayerInfo[player1][Credits] += score;
			format(string,sizeof(string),"CREDITS = %d", PlayerInfo[player1][Credits]);
			db_UpdateUserTableValue(toStr(PlayerInfo[player1][ID]), "USERS", string);
			return 1;
	    } else return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Player is not connected");
	} else return 0;
}
CMD:setskin(playerid,params[]) {
	if(PlayerInfo[playerid][Level] > 4) {
	    new player1,skin, string[128];
   		if (sscanf(params, "dd", player1,skin)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /setskin <playerid> <skin>");
        if(skin > 299 || skin <0) return SendClientMessage(playerid, red, "{FF0000}Error:{FFFFFF} Invaild Skin ID");
		if(IsPlayerConnected(player1) && player1 != INVALID_PLAYER_ID) {
			if(PlayerInfo[player1][Level] > PlayerInfo[playerid][Level]) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} It is not necessary for this player.");
        	format(string, sizeof(string), "Notice:{FFFFFF} You have set %s's skin to '%d", PlayerInfo[player1][Name], skin); SendClientMessage(playerid,blue,string);
			return SetPlayerSkin(player1, skin);
	    } else return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Player is not connected");
	} else return 0;
}

CMD:mycolor(playerid,params[]) {
	if(PlayerInfo[playerid][Level] >= 5) {
		new color;
   		if (sscanf(params, "x", color)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /mycolor [color]");
  	 	SetPlayerColor(playerid,color);
		return 1;
	} else return 0;
}

CMD:setname(playerid,params[]) {
	if(PlayerInfo[playerid][Level] > 4) {
	    new player1,tname[50], string[128];
   		if (sscanf(params, "ds[50]", player1,tname)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /setname <playerid> <name>");
        if(IsPlayerConnected(player1) && player1 != INVALID_PLAYER_ID) {
			if(PlayerInfo[player1][Level] > PlayerInfo[playerid][Level]) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} It is not necessary for this player.");

			format(string, sizeof(string), "Notice:{FFFFFF} You have set %s's name to %s.", PlayerInfo[player1][Name], tname);
			SendClientMessage(playerid,blue,string);
 			format(PlayerInfo[player1][Name],60,"%s",tname);
 			fixPlayerName(playerid, true);
			if(PlayerInfo[player1][Registered] == 1)
 			{
				mysql_format(ServerInfo[DataBase], string, sizeof(string), "NAME='%e'", PlayerInfo[player1][Name]);
				db_UpdateUserTableValue(toStr(PlayerInfo[player1][ID]), "USERS", string);
			    forLoop(i, MAX_FFA_PROPERTIES)
				{
					if(FFAPropertyInfo[i][Exists] && FFAPropertyInfo[i][OwnerType] == FFA_OWNER_PLAYER && FFAPropertyInfo[i][OwnerID] == PlayerInfo[playerid][ID])
					{
			    		format(FFAPropertyInfo[i][Owner], 50,"%s",tname);
			    		UpdateFFAPropertyText(i, false);
					}
				}
				if(FFAPlayerInfo[player1][GangID] > 0)
				{
				    new ganglocal = getFFAGangID(FFAPlayerInfo[player1][GangID]);
					if(GangInfo[ganglocal][gLeaderID] == PlayerInfo[player1][ID])
					{
				    	format(GangInfo[ganglocal][gLeader],50,"%s",PlayerInfo[player1][Name]);
				    	UpdateFFAGangText(ganglocal,false);
					}
					if(GangInfo[ganglocal][gViceID] == PlayerInfo[player1][ID])
				    	format(GangInfo[ganglocal][gVice],50,"%s",PlayerInfo[player1][Name]);
	            }
			    if(TWPlayerInfo[player1][SquadID] > 0)
			    {
					new sid = getTWSquadID(TWPlayerInfo[player1][SquadID]);
					if(SquadInfo[sid][LeaderID] == PlayerInfo[player1][ID])
			    		format(SquadInfo[sid][Leader],50,"%s",PlayerInfo[player1][Name]);
				}
			}
   			return 1;
	    } else return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Player is not connected");
	} else return 0;
}

CMD:pm(playerid,params[])
{
    if(PlayerInfo[playerid][PlayerMode] == TRP)return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command in this mode..");
	new player[50],player1,msg[120], string[128];
	if(PlayerInfo[playerid][Muted] > 0)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You are muted, you can not talk at this moment.");
	if (sscanf(params, "s[50]s[120]", player,msg)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /pm <playerid/name> <msg>");
	if(!IsNumericForID(player))  player1 = ReturnPlayerID(player); else player1 = strval(player);
	if(ServerInfo[AdvCheck] == 1 && (CheckIP(msg) || AdvertCheck(msg))) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} Message couldn't be sent. Reason: Possible Advertising.");
    if(IsPlayerConnected(player1) && player1 != INVALID_PLAYER_ID  && player1 != playerid)
	{
	    if(PlayerInfo[player1][LoggedIn] == 0)return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} This person isn't logged in yet.");
		if(PlayerInfo[player1][PlayerMode] == TRP)return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} Player must not be in RP mode.");
		if(PlayerInfo[player1][BlockPM] == 1)return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} This person has blocked incoming PMs.");
		format(string, sizeof(string), "PM to {67F6F6}%s [ID:%d]: {FFFFFF}%s", PlayerInfo[player1][Name],player1,msg);
		SendClientMessage(playerid,yellow,string);
		format(string, sizeof(string), "PM from {67F6F6}%s [ID:%d]: {FFFFFF}%s", PlayerInfo[playerid][Name],playerid,msg);
		SendClientMessage(player1,yellow,string);
		format(string, sizeof(string), ">*PM to %s [%d] from %s[%d] : %s", PlayerInfo[player1][Name],player1, PlayerInfo[playerid][Name],playerid,msg);
		forLoop(i, MAX_PLAYERS) if(IsPlayerConnected(i) && playerid != i && player1 != i && PlayerInfo[i][Spypms] == 1 && PlayerInfo[playerid][Level] < 3 && PlayerInfo[player1][Level] < 3)
		{
		    SendClientMessage(i,yellow,string);
		}
		db_SavePM(PlayerInfo[player1][ID], PlayerInfo[playerid][ID], msg);
		//db_SaveForAdminText(string);
		return 1;
    } else return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} The player is not connected or it is yourself.");
}
CMD:setcolour(playerid,params[]) {
	if(PlayerInfo[playerid][Level] > 4) {
	    new player1,color, string[128];
   		if (sscanf(params, "dx", player1,color))
  			return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /setcolour <playerid> <Color (HEX)>");
		if(IsPlayerConnected(player1) && player1 != INVALID_PLAYER_ID)
		{
		    if(PlayerInfo[player1][Level] > PlayerInfo[playerid][Level]) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} It is not necessary for this player.");
			SetPlayerColor(player1,color);
			format(string, sizeof(string), "Notice:{FFFFFF} You have changed %s's color.", PlayerInfo[player1][Name]);
   			return SendClientMessage(playerid,blue,string);
	    } else return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Player is not connected");
	} else return 0;
}

CMD:setteam(playerid,params[]) {
	if(PlayerInfo[playerid][Level] >= 3) {
	    new player1,Colour, string[128], colour[24];
   		if (sscanf(params, "dd", player1,Colour))
  		{
			SendClientMessage(playerid, red1, "Usage:{FFFFFF} /setteam <playerid> <team/mode>");
			SendClientMessage(playerid, red, "Team ids: TW(0=Germany 1=ITALY 2=JAPAN 3=Britain 4=BALKAN 5=USA 6=RUSSIA) TL(7=AXIS 8=ALLIES) 9=Mafia 10=Stunt 11=FFA 12=MS");
			SendClientMessage(playerid, red, "Other Team ids:  CO(13=Police 14=Criminal) CTF(15=blue 16=red) 17= DM 18= ZO 19= PJ");
			SendClientMessage(playerid, red, "Other Team ids:  PTP(20=President 21=Vice 22=Sec 23=Pol 24=Terro 25=Civ) 26= RP 27= GK");
			SendClientMessage(playerid, red, "Other Team ids:  VW(28=USA 29=Vietn)");
			return 1;
		}
		if(Colour > 29 || Colour < 0){
			SendClientMessage(playerid, red1, "Usage:{FFFFFF} /setteam <playerid> <team/mode>");
			SendClientMessage(playerid, red, "Team ids: TW(0=Germany 1=ITALY 2=JAPAN 3=Britain 4=BALKAN 5=USA 6=RUSSIA) TL(7=AXIS 8=ALLIES) 9=Mafia 10=Stunt 11=FFA 12=MS");
			SendClientMessage(playerid, red, "Other Team ids:  CO(13=Police 14=Criminal) CTF(15=blue 16=red) 17= DM 18= ZO 19= PJ");
			SendClientMessage(playerid, red, "Other Team ids:  PTP(20=President 21=Vice 22=Sec 23=Pol 24=Terro 25=Civ) 26= RP 27= GK");
			SendClientMessage(playerid, red, "Other Team ids:  VW(28=USA 29=Vietn)");
			return 1;
		}
		if(IsPlayerConnected(player1) && player1 != INVALID_PLAYER_ID) {
			if(PlayerInfo[player1][Level] > PlayerInfo[playerid][Level]) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} It is not necessary for this player.");
			switch (Colour)
			{
			    case 0:
				{
					TWPlayerInfo[player1][Country] = GERMANY;
					DestroyAllPlayerTWBombs(player1);
					SetPlayerMode(player1, TW, true, false);
					colour = "Germany IN TW";
				}
				case 1:
				{
					TWPlayerInfo[player1][Country] = ITALY;
					DestroyAllPlayerTWBombs(player1);
					SetPlayerMode(player1, TW, true, false);
					colour = "Italy IN TW";
				}
				case 2:
				{
					TWPlayerInfo[player1][Country] = JAPAN;
					DestroyAllPlayerTWBombs(player1);
					SetPlayerMode(player1, TW, true, false);
					colour = "JAPAN IN TW";
				}
			    case 3:
				{
					TWPlayerInfo[player1][Country] = BRITISH;
					DestroyAllPlayerTWBombs(player1);
					SetPlayerMode(player1, TW, true, false);
					colour = "Britain IN TW";
				}
				case 4:
				{
					TWPlayerInfo[player1][Country] = BALKAN;
					DestroyAllPlayerTWBombs(player1);
					SetPlayerMode(player1, TW, true, false);
					colour = "BALKAN IN TW";
				}
				case 5:
				{
					TWPlayerInfo[player1][Country] = USA;
					DestroyAllPlayerTWBombs(player1);
					SetPlayerMode(player1, TW, true, false);
					colour = "USA IN TW";
				}
				case 6:
				{
					TWPlayerInfo[player1][Country] = RUSSIA;
					DestroyAllPlayerTWBombs(player1);
					SetPlayerMode(player1, TW, true, false);
					colour = "RUSSIA IN TW";
				}

				case 7:
				{
					PlayerInfo[player1][pTeam]=AXIS;
					SetPlayerMode(player1, TL, true, false);
					colour = "AXIS IN TL";
				}
			    case 8:
				{
					PlayerInfo[player1][pTeam] = ALLIES;
					SetPlayerMode(player1, TL, true, false);
					colour = "ALLIES IN TL";
				}

				case 9:
				{
					SetPlayerMode(player1, TRP, true, false);
					colour = "TRP";
				}
				case 10:
				{
					SetPlayerMode(player1, STUNT, true, false);
					colour = "Stunt&fun";
				}
				case 11:
				{
					SetPlayerMode(player1, FFA, true, false);
					colour = "Free for all";
				}
				case 12:
				{
					SetPlayerMode(player1, MOVIES, true, false);
					colour = "Movie Record Mode";
				}
			    case 13:
				{
					PlayerInfo[player1][pTeam] = COP;
					SetPlayerMode(player1,CO, true, false);
					colour = "POLICE IN CO";
				}
				case 14:
				{
					PlayerInfo[player1][pTeam]=CRIMINAL;
					SetPlayerMode(player1,CO, true, false);
					colour = "CRIMINAL IN CO";
				}
			    case 15:
				{
					PlayerInfo[player1][pTeam] = BLUE;
					SetPlayerMode(player1,CTF, true, false);
					colour = "BLUE IN CTF";
				}
				case 16:
				{
					PlayerInfo[player1][pTeam]=RED;
					SetPlayerMode(player1,CTF, true, false);
					colour = "RED IN CTF";
				}
				case 17:
				{
					SetPlayerMode(player1, DM, true, false);
					colour = "Death Match";
				}
				case 18:
				{
					SetPlayerMode(player1, ZO, true, false);
					colour = "ZOMBIESS";
				}
				case 19:
				{
					SetPlayerMode(player1, PJ, true, false);
					colour = "PARA JUMP";
				}
				case 20:
				{
					PTPPlayerInfo[player1][Class]=PRESIDENT;
					SetPlayerMode(player1, PTP, true, false);
					colour = "PRESI IN PTP";
				}
				case 21:
				{
					PTPPlayerInfo[player1][Class]=VICE;
					SetPlayerMode(player1, PTP, true, false);
					colour = "VICE IN PTP";
				}
				case 22:
				{
					PTPPlayerInfo[player1][Class]=SECURITY;
					SetPlayerMode(player1, PTP, true, false);
					colour = "SECURITY IN PTP";
				}
				case 23:
				{
					PTPPlayerInfo[player1][Class]=POLICE;
					SetPlayerMode(player1, PTP, true, false);
					colour = "POLICE IN PTP";
				}
				case 24:
				{
					PTPPlayerInfo[player1][Class]=TERRORIST;
					SetPlayerMode(player1, PTP, true, false);
					colour = "TERRORIST IN PTP";
				}
				case 25:
				{
					PTPPlayerInfo[player1][Class]=CIVILIAN;
					SetPlayerMode(player1, PTP, true, false);
					colour = "CIVILIAN IN PTP";
				}
				case 26:
				{
					SetPlayerMode(player1, TRP, true, false);
					colour = "RP";
				}
				case 27:
				{
					SetPlayerMode(player1, GK, true, false);
					colour = "GRAB & KILL";
				}
			    case 28:
				{
					PlayerInfo[player1][pTeam] = VW_USA;
					SetPlayerMode(player1, VW, true, false);
					colour = "USA IN VW";
				}
				case 29:
				{
					PlayerInfo[player1][pTeam] = VW_VIETNAM;
					SetPlayerMode(player1,VW, true, false);
					colour = "VIETNAM IN VW";
				}
			}
			format(string,128,"*Admin:{FFFFFF}%s has forced %s(ID:%d)'s team/mode to %s",PlayerInfo[playerid][Name],PlayerInfo[player1][Name],player1,colour);
   			return MessageToAllAdmins(lightblue,string);
	    } else return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Player is not connected");
	} else return 0;
}
CMD:setclass(playerid,params[]) {
	if(PlayerInfo[playerid][Level] >= 3) {
		new player1,Colour, string[128], colour[24];
   		if (sscanf(params, "dd", player1,Colour))
  		{
			SendClientMessage(playerid, red1, "Usage:{FFFFFF} /setclass <playerid> <id>");
			return SendClientMessage(playerid, red, "Class ids ONLY FOR TW: 0=Leader 1=General 2=Guard 3=Soldier 4=Pilot 5=Medic 6=Engineer 7=Spy");
		}
		if(Colour > 7 || Colour < 0) return SendClientMessage(playerid, red, "Class ids: 0=Leader 1=General 2=Guard 3=Soldier 4=Pilot 5=Medic 6=Engineer 7=Spy");
		if(PlayerInfo[player1][PlayerMode] != TW)return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} Player is not in TW.");
		if(IsPlayerConnected(player1) && player1 != INVALID_PLAYER_ID) {
			if(PlayerInfo[player1][Level] > PlayerInfo[playerid][Level]) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} It is not necessary for this player.");
        	switch (Colour)
			{

			    case 0:
				{
				    TWPlayerInfo[player1][Class] = LEADER;
					A_SpawnPlayer(player1);
					colour = "Leader";
				}
			    case 1:
				{
				    TWPlayerInfo[player1][Class] = VICE;
					A_SpawnPlayer(player1);
					colour = "General";
				}
				case 2:
				{
				    TWPlayerInfo[player1][Class] = BODYGUARD;
					A_SpawnPlayer(player1);
					colour = "Guard";
				}
				case 3:
				{
				    TWPlayerInfo[player1][Class] = SOLDIER;
					A_SpawnPlayer(player1);
					colour = "Soldier";
				}
				case 4:
				{
				    TWPlayerInfo[player1][Class] = PILOT;
					A_SpawnPlayer(player1);
					colour = "Pilot";
				}
				case 5:
				{
				    TWPlayerInfo[player1][Class] = MEDIC;
					A_SpawnPlayer(player1);
					colour = "Medic";
				}
				case 6:
				{
				    TWPlayerInfo[player1][Class] = ENGINEER;
					A_SpawnPlayer(player1);
					colour = "Engineer";
				}
                case 7:
				{
				    TWPlayerInfo[player1][Class] = SPY;
					A_SpawnPlayer(player1);
					colour = "Spy";
				}
			}
			format(string,128,"*Admin:{FFFFFF}%s has forced %s(ID:%d)'s class to %s.",PlayerInfo[playerid][Name],PlayerInfo[player1][Name],player1,colour);
   			return MessageToAllAdmins(lightblue,string);
	    } else return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Player is not connected");
	} else return 0;
}

CMD:rinfo(playerid,params[]) {
	if(PlayerInfo[playerid][Level] > 4) {
	    new player1,type, string[128];
   		if (sscanf(params, "dd", player1,type))
  		{
			SendClientMessage(playerid, red1, "Usage:{FFFFFF} /rinfo <playerid> <typeid>");
			return SendClientMessage(playerid, red, "Type 0 = Allowed to report | Type 1 = Not allowed");
		}
		if(type < 0 || type > 1) return SendClientMessage(playerid, red, "Do you see those numbers on the list? Dumb Fuck.");
		if(IsPlayerConnected(player1) && player1 != INVALID_PLAYER_ID) {
			if(PlayerInfo[player1][Level] > PlayerInfo[playerid][Level]) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} It is not necessary for this player.");
			PlayerInfo[player1][NoReport] = type;
			format(string, sizeof(string), "Notice:{FFFFFF} You have set %s's report status to %d ", PlayerInfo[player1][Name],type);SendClientMessage(playerid,blue,string);
			return 1;
	    } else return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Player is not connected");
	} else return 0;
}
CMD:cmdinfo(playerid,params[]) {
	if(PlayerInfo[playerid][Level] > 4) {
	    new player1,type, string[128];
   		if (sscanf(params, "dd", player1,type))
  		{
			return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /cmdinfo <playerid> <mins>");
		}
		if(IsPlayerConnected(player1) && player1 != INVALID_PLAYER_ID) {
			if(PlayerInfo[player1][Level] > PlayerInfo[playerid][Level]) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} It is not necessary for this player.");
			PlayerInfo[player1][NoCMD] = type*60;
			format(string, sizeof(string), "Notice:{FFFFFF} You have set %s's cmd status to %d ", PlayerInfo[player1][Name],type);SendClientMessage(playerid,blue,string);
			return 1;
	    } else return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Player is not connected");
	} else return 0;
}


CMD:setvip(playerid,params[]) {
	if(PlayerInfo[playerid][Level] > 5) {
		new player1,type, string[128], thetype[24];
   		if (sscanf(params, "dd", player1,type))
  		{
			SendClientMessage(playerid, red1, "Usage:{FFFFFF} /setvip <playerid> <typeid>");
			return SendClientMessage(playerid, red, "Type 0 = No VIP | Type 1 = VIP");
		}
		if(IsPlayerConnected(player1) && player1 != INVALID_PLAYER_ID)
		{
			switch (type)
			{
                case 0: { PlayerInfo[player1][VIP] = 0;thetype = "No VIP";}
			    case 1: { PlayerInfo[player1][VIP] = 1;thetype = "VIP"; }
			}
			format(string,sizeof(string),"VIP = %d", type);
			db_UpdateUserTableValue(toStr(PlayerInfo[player1][ID]), "USERS", string);
			format(string, sizeof(string), "Notice:{FFFFFF} You have set %s's vip status type to '%s' ", PlayerInfo[player1][Name], thetype);
			SendClientMessage(playerid,blue,string);
			format(string, sizeof(string), "Notice:{FFFFFF} Your vip status has been changed by %s to '%s' ", PlayerInfo[playerid][Name], thetype);
   			return SendClientMessage(player1,blue,string);
	    } else return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Player is not connected");
	} else return 0;
}

CMD:setworld(playerid,params[]) {
	if(PlayerInfo[playerid][Level] > 3) {
	    new player1,time, string[128];
   		if (sscanf(params, "dd", player1,time)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /setworld <playerid> <virtual world>");
		if(IsPlayerConnected(player1) && player1 != INVALID_PLAYER_ID) {
			if(PlayerInfo[player1][Level] > PlayerInfo[playerid][Level]) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} It is not necessary for this player.");
			format(string, sizeof(string), "Notice:{FFFFFF} You have set %s's virtual world to '%d'", PlayerInfo[player1][Name], time); SendClientMessage(playerid,blue,string);
			PlayerPlaySound(player1,1057,0.0,0.0,0.0);
   			return SetPlayerVirtualWorld(player1, time);
	    } else return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Player is not connected");
	} else return 0;
}

CMD:setinterior(playerid,params[]) {
	if(PlayerInfo[playerid][Level] > 3) {
	    new player1,time, string[128];
   		if (sscanf(params, "dd", player1,time)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /setint <playerid> <interior>");
		if(IsPlayerConnected(player1) && player1 != INVALID_PLAYER_ID) {
			if(PlayerInfo[player1][Level] > PlayerInfo[playerid][Level]) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} It is not necessary for this player.");
			format(string, sizeof(string), "Notice:{FFFFFF} You have set %s's interior to '%d' ", PlayerInfo[player1][Name], time); SendClientMessage(playerid,blue,string);
			PlayerPlaySound(player1,1057,0.0,0.0,0.0);
   			return SetPlayerInterior(player1, time);
	    } else return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Player is not connected");
	} else return 0;
}

CMD:eject(playerid,params[]) {
	if(PlayerInfo[playerid][Level] >= 3) {
	    new player1,string[128],Float:x, Float:y, Float:z;
   		if (sscanf(params, "d", player1)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /eject <playerid>");
		if(IsPlayerConnected(player1) && player1 != INVALID_PLAYER_ID) {
			if(IsPlayerInAnyVehicle(player1)) {
				if(PlayerInfo[player1][Level] > PlayerInfo[playerid][Level]) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} It is not necessary for this player.");
				if(GetPlayerState(player1) == PLAYER_STATE_SPECTATING || GetPlayerState(player1) == PLAYER_STATE_WASTED)return SendClientMessage(playerid,blue,"{FF0000}Error:{FFFFFF} You cannot use this command on the player now.");
				format(string,sizeof(string),"Notice:{FFFFFF} You have ejected %s from his/her vehicle", PlayerInfo[player1][Name]); SendClientMessage(playerid,blue,string);
    		   	GetPlayerPos(player1,x,y,z);
				return SetPlayerPos(player1,x,y,z+3);
			} else return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Player is not in a vehicle");
	    } else return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Player is not connected");
	} else return 0;
}
/*
CMD:lockcar(playerid) {

	    if(IsPlayerInAnyVehicle(playerid)) {
		 	forLoop(i, MAX_PLAYERS)
			{
				if(IsPlayerConnected(i) && i != playerid)
				{
					SetVehicleParamsForPlayer(GetPlayerVehicleID(playerid),i,false,true);
				}
			}
			return SendClientMessage(playerid,blue,"Notice:{FFFFFF} You have locked your car");
		} else return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} You need to be in a vehicle to lock the doors");
}

CMD:unlockcar(playerid) {

	if(IsPlayerInAnyVehicle(playerid)) {
		forLoop(i, MAX_PLAYERS) SetVehicleParamsForPlayer(GetPlayerVehicleID(playerid),i,false,false);
		return SendClientMessage(playerid,blue,"Notice:{FFFFFF} You have unlocked your car");
		} else return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} You need to be in a vehicle to unlock the doors");
}*/

CMD:destroycar(playerid,params[]) {
	if(PlayerInfo[playerid][Level] >= 3) {
	    new car1,string[128];
   		if (sscanf(params, "d", car1)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /destroycar <carid>");
		format(string, sizeof(string), "Notice:{FFFFFF} You have destroyed car %d ", car1);
  		CarDeleter(car1);
		return SendClientMessage(playerid,blue,string);
	} else return 0;
}

CMD:spawncar(playerid,params[]) {
	if(PlayerInfo[playerid][Level] >= 3) {
	    new car1,string[128];
   		if (sscanf(params, "d", car1)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /spawncar <carid>");
		format(string, sizeof(string), "Notice:{FFFFFF} You have spawned car %d ", car1);
  		SetVehicleToRespawn(car1);
		return SendClientMessage(playerid,blue,string);
	} else return 0;
}
CMD:carhp(playerid,params[]) {
	if(PlayerInfo[playerid][Level] >= 3) {
	    new car1,health,string[128];
   		if (sscanf(params, "dd", car1,health)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /carhp <carid> <hp>");
		format(string, sizeof(string), "Notice:{FFFFFF} You have set car %d's hp to %d", car1,health);
  		SetVehicleHealth(car1, health);
		return SendClientMessage(playerid,blue,string);
	} else return 0;
}

CMD:spawn(playerid,params[]) {
	if(PlayerInfo[playerid][Level] >= 2) {
	    new player1,string[128];
   		if (sscanf(params, "d",player1)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /spawn <playerid>");
		if(IsPlayerConnected(player1) && player1 != INVALID_PLAYER_ID) {
			if(PlayerInfo[player1][Level] > PlayerInfo[playerid][Level]) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} It is not necessary for this player.");
			format(string, sizeof(string), "Notice:{FFFFFF} You have spawned %s ", PlayerInfo[player1][Name]);
            FixBeforeSpawn(player1);
            ToggleThePlayerSpectating(player1, 0);
			SpawnPlayer(player1);
			return SendClientMessage(playerid,blue,string);
	    } else return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Player is not connected");
	} else return 0;
}

CMD:disarm(playerid,params[]) {
	if(PlayerInfo[playerid][Level] >= 3) {
	    new player1,string[128];
   		if (sscanf(params, "d",player1)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /disarm <playerid>");
		if(IsPlayerConnected(player1) && player1 != INVALID_PLAYER_ID) {
			if(PlayerInfo[player1][Level] > PlayerInfo[playerid][Level]) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} It is not necessary for this player.");
			format(string, sizeof(string), "Notice:{FFFFFF} You have disarmed %s.", PlayerInfo[player1][Name]); SendClientMessage(playerid,blue,string);
			ResetWeapons(player1);
			return 1;
	    } else return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Player is not connected");
	} else return 0;
}

CMD:ip(playerid,params[]) {
	if(PlayerInfo[playerid][Level] >= 4) {
	    new player1,string[128];
   		if (sscanf(params, "d",player1)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /ip <playerid>");
		if(IsPlayerConnected(player1) && player1 != INVALID_PLAYER_ID && player1 != playerid )
        {
			if(PlayerInfo[player1][Level] > PlayerInfo[playerid][Level]) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} It is not necessary for this player.");
			format(string,sizeof(string),"%s's ip is '%s'", PlayerInfo[player1][Name], getThePlayerIP(player1));
			return SendClientMessage(playerid,blue,string);
	    } else return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Player is not connected.");
	} else return 0;
}


CMD:fixpj(playerid, params[])
{
    if(PlayerInfo[playerid][Level] < 2) return 0;
    SendClientMessage(playerid,0xFFFFFFAA,"Starting...");
	PJMAPInfo[TimeLeft] = 592;
    ChangePJMapMap("a");
    SendClientMessage(playerid,0xFFFFFFAA,"Done.");
	SendMessageToMode(PJ,COLOR_WHITE, "{33FF33}PJ Mode{FFFFFF}has been restarted by admin!");
	return 1;
}
CMD:changepjmap(playerid, params[])
{
    if(PlayerInfo[playerid][Level] < 3) return 0;
    new map[100], id = -1;
    if (sscanf(params, "s[100]",map)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /changePJmap <mapname>");
    id = SearchForMapNamePJ(map);
	if(id == -1)
		return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Map name doesn't exist, try again.");
	PJMAPInfo[dStarted] = 0;
	PJMAPInfo[TimeLeft] = 604;//+4 for if(PJMAPInfo[TimeLeft] >= 595)return 0;
	forLoop(i, MAX_PLAYERS)
	{
		if(IsPlayerConnected(i) && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][PlayerMode] == PJ && !IsPlayerNPC(i))
		{
			SetPVarInt(i, "MapRatePJ", 1);
			ResetWeapons(i);
			PJPlayerInfo[i][Alive] = 1;
			PJPlayerInfo[i][Asked] = 0;
			PJPlayerInfo[i][rRespawn] = 0;
			PJPlayerInfo[i][Respawning] = 0;
			TextDrawHideForPlayer(i,PJTXTD[mInfo]);
			HidePJAliveText(i);
			PJPlayerInfo[i][Camper] = 0;
			TogglePlayerControllable(i,false);
			ShowNewMapTextsDM(i);
			if(GetPlayerState(i) != PLAYER_STATE_WASTED)
			{
				PJ_StopSpectate(i);
				#if defined PJ_SPAWN_DEADS
				SpawnPlayerTimer(i, 1000);
				#endif
			}
            #if !defined PJ_SPAWN_DEADS
            SpawnPlayerTimer(i, PJ_SPAWN_PLAYERS_TIME);
			#endif
		}
	}
	KillTimer(PJMAPInfo[DuelTimer]);
	LoadPJMap(id);
	KillTimer(PJMAPInfo[Timer]);
	PJMAPInfo[Timer] = SetTimer("StartPJMap", PJ_START_GAME_TIME, false);
	SendMessageToMode(PJ,COLOR_WHITE, "{33FF33}PJ {FFFFFF}Map has been changed!");
	return 1;
}
CMD:funweatherpj(playerid, params[])
{
    if(PlayerInfo[playerid][Level] < 2) return 0;
    if(PlayerInfo[playerid][PlayerMode] != PJ)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be in the PJ mode to use this command.");
	if(ModeTime[PJ] > 11)return SendMessageToMode(PJ,COLOR_WHITE, "{FF0000}Error: {FFFFFF}Fun weather can't be started in this map.");
	if(PJMAPInfo[fWeather] == 1)
	{
		PJMAPInfo[fWeather] = 0;
    	SendMessageToMode(PJ,COLOR_WHITE, "{33FF33}Fun Weather {FFFFFF}has been stoped!");
	}
    else
	{
		PJMAPInfo[fWeather] = 1;
    	FunWeatherForPJ();
    	SendMessageToMode(PJ,COLOR_WHITE, "{33FF33}Fun Weather {FFFFFF}has been initiated! Have fun!");
	}
	return 1;
}
forward FunWeatherForPJ();
public FunWeatherForPJ()
{
	if(PJMAPInfo[dStarted] != 1 || PJMAPInfo[fWeather] == 0)return 0;
	new id;
	switch(random(11))
	{
		case 0: id=41;
		case 1: id=6;
		case 2: id=12;
		case 3: id=17;
		case 4: id=30;
		case 5: id=29;
		case 6: id=33;
		case 7: id=40;
		case 8: id=46;
		case 9: id=57;
		case 10: id=79;
	}
	forLoop(i, MAX_PLAYERS)
	{
		if(IsPlayerConnected(i) && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][PlayerMode] == PJ && !IsPlayerNPC(i))
		{
			SetPlayerWeather(i, id);
		}
	}
	SetTimer("FunWeatherForPJ",500,false);
	return 1;
}
CMD:dontusepj(playerid, params[])
{
    if(PlayerInfo[playerid][Level] < 3) return 0;
    new map[100], path[100], path1[150], path2[150], string[128], id = -1;
    if (sscanf(params, "s[100]",map)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /dontuse <full mapname>");
    id = SearchForMapNamePJ(map);
	if(id == -1)
		return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Map name doesn't exist, try again.");
    format(path, sizeof path, "%s",PJMapsInfo[id][pathName]);
    format(path1, sizeof path1, "scriptfiles/pangea/PJ/%s",PJMapsInfo[id][pathName]);
	format(path2, sizeof path2, "scriptfiles/pangea/PJ/DONT USE - %s",PJMapsInfo[id][pathName]);
	drename(path1, path2);
	if(strfind(PJMAPInfo[pathName],path, true) != -1)
    {
		PJMAPInfo[TimeLeft] = 592;
	    ChangePJMapMap("a");
		SendMessageToMode(PJ,COLOR_WHITE, "{33FF33}PJ Mode{FFFFFF} has been restarted by admin!");
    }
    format(string, sizeof string, "Map: %s(dir) has been put to DONT USE list.",path);
	SendClientMessage(playerid, red1, string);
	return 1;
}


CMD:fixdddm(playerid, params[])
{
    if(PlayerInfo[playerid][Level] < 2) return 0;
    SendClientMessage(playerid,0xFFFFFFAA,"Starting...");
	DMMAPInfo[TimeLeft] = 892;
    ChangeDMMapMap("a");
    SendClientMessage(playerid,0xFFFFFFAA,"Done.");
	SendMessageToMode(DM,COLOR_WHITE, "{33FF33}DD/DM Mode{FFFFFF}has been restarted by admin!");
	return 1;
}


CMD:dontusedm(playerid, params[])
{
    if(PlayerInfo[playerid][Level] < 3) return 0;
    new map[100], path[100], path1[150], path2[150], string[128], id = -1;
    if (sscanf(params, "s[100]",map)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /dontuse <mapname>");
	id = SearchForMapNameDM(map);
	if(id == -1)
		return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Map name doesn't exist, try again.");
    format(path, sizeof path, "%s",DMMapsInfo[id][pathName]);
    format(path1, sizeof path1, "scriptfiles/pangea/DDDM/%s",DMMapsInfo[id][pathName]);
	format(path2, sizeof path2, "scriptfiles/pangea/DDDM/DONT USE - %s",DMMapsInfo[id][pathName]);
	drename(path1, path2);
	if(strfind(DMMAPInfo[pathName],path, true) != -1)
    {
	    DMMAPInfo[TimeLeft] = 892;
	    ChangeDMMapMap("a");
		SendMessageToMode(DM,COLOR_WHITE, "{33FF33}DD/DM Mode{FFFFFF} has been restarted by admin!");
    }
    format(string, sizeof string, "Map: %s(dir) has been put to DONT USE list.",path);
	SendClientMessage(playerid, red1, string);
	return 1;
}

CMD:changedddmmap(playerid, params[])
{
    if(PlayerInfo[playerid][Level] < 3) return 0;
    new map[50],id = -1;
    if (sscanf(params, "s[50]",map)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /changedddmmap <mapname>");
    id = SearchForMapNameDM(map);
	if(id == -1)
		return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Map name doesn't exist, try again.");
	DMMAPInfo[dStarted] = 0;
	DMMAPInfo[TimeLeft] = 904;//+4 for if(DMMAPInfo[TimeLeft] >= 895)return 0;
	forLoop(i, MAX_PLAYERS)
	{
		if(IsPlayerConnected(i) && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][PlayerMode] == DM && !IsPlayerNPC(i))
		{
		    if(PlayerInfo[i][Vehicle] != -1) DestroyVehicle(PlayerInfo[i][Vehicle]);
			PlayerInfo[i][Vehicle]=-1;
			SetPVarInt(i, "MapRateDM", 1);
			DMPlayerInfo[i][Alive] = 1;
			DMPlayerInfo[i][Asked] = 0;
			DMPlayerInfo[i][rRespawn] = 0;
			TextDrawHideForPlayer(i,DMTXTD[mInfo]);
			HideDMAliveText(i);
			DMPlayerInfo[i][Camper] = 0;
			HideDMDDTexts(i);
			TogglePlayerControllable(i,false);
			ShowNewMapTextsDM(i);
			if(GetPlayerState(i) != PLAYER_STATE_WASTED)
			{
				DM_StopSpectate(i);
				#if defined DM_SPAWN_DEADS
				SpawnPlayerTimer(i, 1000);
				#endif
			}
            #if !defined DM_SPAWN_DEADS
            SpawnPlayerTimer(i, DM_SPAWN_PLAYERS_TIME);
			#endif
		}
	}
	LoadDMMap(id);
	KillTimer(DMMAPInfo[Timer]);
	KillTimer(DMMAPInfo[AllWorldTimer]);
	DMMAPInfo[Timer] = SetTimer("StartDDMap", DM_START_GAME_TIME, false);
	SendMessageToMode(DM,COLOR_WHITE, "{33FF33}DD/DM {FFFFFF}Map has been changed!");
	return 1;
}
CMD:funweatherdm(playerid, params[])
{
    if(PlayerInfo[playerid][Level] < 2) return 0;
    if(PlayerInfo[playerid][PlayerMode] != DM)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be in the DM mode to use this command.");
	if(ModeTime[DM] > 11)return SendMessageToMode(DM,COLOR_WHITE, "{FF0000}Error: {FFFFFF}Fun weather can't be started in this map.");
	if(DMMAPInfo[fWeather] == 1)
	{
		DMMAPInfo[fWeather] = 0;
    	SendMessageToMode(DM,COLOR_WHITE, "{33FF33}Fun Weather {FFFFFF}has been stoped!");
	}
    else
	{
		DMMAPInfo[fWeather] = 1;
		FunWeatherForDDDM();
    	SendMessageToMode(DM,COLOR_WHITE, "{33FF33}Fun Weather {FFFFFF}has been initiated! Have fun!");
	}
	return 1;
}
forward FunWeatherForDDDM();
public FunWeatherForDDDM()
{
	if(DMMAPInfo[dStarted] != 1 || DMMAPInfo[fWeather] == 0)return 0;
	new id;
	switch(random(11))
	{
		case 0: id=41;
		case 1: id=6;
		case 2: id=12;
		case 3: id=17;
		case 4: id=30;
		case 5: id=29;
		case 6: id=33;
		case 7: id=40;
		case 8: id=46;
		case 9: id=57;
		case 10: id=79;
	}
	forLoop(i, MAX_PLAYERS)
	{
		if(IsPlayerConnected(i) && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][PlayerMode] == DM && !IsPlayerNPC(i))
		{
			SetPlayerWeather(i, id);
		}
	}
	SetTimer("FunWeatherForDDDM",500,false);
	return 1;
}
CMD:funcolorsdm(playerid, params[])
{
    if(PlayerInfo[playerid][Level] < 2) return 0;
    if(PlayerInfo[playerid][PlayerMode] != DM)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be in the DM mode to use this command.");
	if(DMMAPInfo[fColor] == 1)
	{
		DMMAPInfo[fColor] = 0;
    	SendMessageToMode(DM,COLOR_WHITE, "{33FF33}Fun Colors {FFFFFF}have been stoped!");
	}
    else
	{
		DMMAPInfo[fColor] = 1;
		FunColorsForDDDM();
    	SendMessageToMode(DM,COLOR_WHITE, "{33FF33}Fun Colors {FFFFFF}have been initiated! Have fun!");
	}
	return 1;
}
forward FunColorsForDDDM();
public FunColorsForDDDM()
{
	if(DMMAPInfo[dStarted] != 1 || DMMAPInfo[fColor] == 0)return 0;
	forLoop(i, MAX_PLAYERS)
	{
		if(IsPlayerConnected(i) && IsPlayerInAnyVehicle(i) && DMPlayerInfo[i][Alive] == 1 && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][PlayerMode] == DM && !IsPlayerNPC(i))
		{
		    ChangeVehicleColor(GetPlayerVehicleID(i), random(333),random(333));
		}
	}
	SetTimer("FunColorsForDDDM",500,false);
	return 1;
}



CMD:plate(playerid, params[])
{
    if(PlayerInfo[playerid][PlayerMode] != DM || PlayerInfo[playerid][Spawned] != 1 || DMPlayerInfo[playerid][Alive] != 1)
    	return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} You must be in DD/DM mode and alive.");
	if(DMMAPInfo[dStarted] != 1)
		return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Wait for the current map to start.");
    new plate[20], string[180];
    if (sscanf(params, "s[9]",plate)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /plate <name>");
    if(strlen(plate) > 9)return SendClientMessage(playerid, red1, "Error:{FFFFFF} Character length mustn't be more than 9.");
    format(DMPlayerInfo[playerid][sPlate], 20, plate);
	format(string, sizeof(string), "{33FF33}Notice: {FFFFFF} Plate number changes to %s on next vehicle/map change.",plate);
	SendClientMessage(playerid,COLOR_WHITE, string);
	return 1;
}


CMD:flash(playerid, params[])
{
    if(PlayerInfo[playerid][PlayerMode] != DM || PlayerInfo[playerid][Spawned] != 1 || DMPlayerInfo[playerid][Alive] != 1)
    	return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} You must be in DD/DM mode and alive.");
	if(DMMAPInfo[dStarted] != 1)
		return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Wait for the current map to start.");
    if(DMPlayerInfo[playerid][Flash] == 0)
    	return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} You don't have a Flash. Use /shop to purchase one");
    if(DMPlayerInfo[playerid][Flash] == 1)
	{
		DMPlayerInfo[playerid][Flash] = 2;
    	SendClientMessage(playerid,COLOR_WHITE, "{33FF33}Notice: {FFFFFF}Flash has been enabled. Use /flash to disable it.");
	}
    else
	{
		DMPlayerInfo[playerid][Flash] = 1;
    	SendClientMessage(playerid,COLOR_WHITE, "{33FF33}Notice: {FFFFFF}Flash has been disabled. Use /flash to enable it.");
	}
	return 1;
}

CMD:givemoney(playerid,params[])
{
    if(!(PlayerInfo[playerid][PlayerMode] == TW || PlayerInfo[playerid][PlayerMode] == CO || PlayerInfo[playerid][PlayerMode] == PJ  || PlayerInfo[playerid][PlayerMode] == DM || PlayerInfo[playerid][PlayerMode] == ZO
	 || PlayerInfo[playerid][PlayerMode] == FFA || PlayerInfo[playerid][PlayerMode] == STUNT || PlayerInfo[playerid][PlayerMode] == PTP || PlayerInfo[playerid][PlayerMode] == TRP || PlayerInfo[playerid][PlayerMode] == GK))
	 	return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You cannot use this command in this mode.");
	if(PlayerInfo[playerid][PlayerMode] != TRP)
	{
		new player, amount, string[128];
	    if (sscanf(params, "dd", player, amount))return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /givemoney <playerid> <amount>");
	    if(IsPlayerConnected(player) && player != playerid && player != INVALID_PLAYER_ID)
		{
		    if(PlayerInfo[player][Spawned] == 0)return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} The player is not spawned.");
		    if(PlayerInfo[playerid][PlayerMode] != PlayerInfo[player][PlayerMode])return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} Player must be in the same mode as you are.");
			if(PlayerInfo[playerid][PlayerMode] != STUNT)
			{
				if(amount < 1)return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Amount of money must be more than $1.");
				if(GetThePlayerMoney(playerid) < amount)
					return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} You don't have enough money..");
		        GiveThePlayerMoney(playerid, -amount);
				GiveThePlayerMoney(player, amount);
				format(string, sizeof(string), "Notice:{FFFFFF} %s has given you {33FF33}$%d.", PlayerInfo[playerid][Name],amount);
				SendClientMessage(player,green1,string);
				format(string, sizeof(string), "Notice:{FFFFFF} You gave %s {33FF33}$%d.", PlayerInfo[player][Name],amount);
				SendClientMessage(playerid,green1,string);
			}
			return 1;
		}else return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} The player is not connected.");
	}
	else
	{
	    new players, amount;
   		forLoop(i, SELECT_MENU_OPTIONS)PlayerInfo[playerid][SelectMenuOption][i] = -1;
	    forLoop(i, MAX_PLAYERS)
		{
			if(IsPlayerConnected(i) && !IsPlayerNPC(i) && PlayerInfo[i][PlayerMode] == TRP &&
				PlayerInfo[i][Spawned] == 1 && players < 3 && playerid != i)
			{
				new skip = 0;
			    forLoop(sel,3)
				{
				    if(PlayerInfo[playerid][SelectMenuOption][sel] == i)
				    {
				        skip = 1;
				        break;
				    }
				}
				if(skip == 1)continue;
			    if(GetDistanceBetweenPlayers(playerid, i) < 5)
			    {
			        PlayerInfo[playerid][SelectMenuOption][players] = i;
			    	players++;
				}
			}
		}
	    if(players == 0)
		{
			return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} There are no players near you.");
		}
		if(sscanf(params, "d",amount))return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /givemoney <amount>");
	    if(amount < 1)return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Amount of money must be more than $1.");
		if(GetThePlayerMoney(playerid) < amount) return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} You don't have enough money..");
		new string[(RP_MAX_NAME_LEN*6)+12], pstr[(RP_MAX_NAME_LEN*2)+3];
		forLoop(i,3)
		{
		    new player = PlayerInfo[playerid][SelectMenuOption][i];
		    if(player == -1)continue;
			format(pstr,sizeof pstr,"\n%s %s",RPPlayerInfo[player][rpfName],RPPlayerInfo[player][rplName]);
			strcat(string,pstr);
		}
		PlayerInfo[playerid][SelectMenu] = THE_CASH_RP;
        PlayerInfo[playerid][SelectMenuOption][3] = amount;
        ShowPlayerDialog(playerid, SELMENU, DIALOG_STYLE_LIST, "RP Give Money",string, "Select", "Cancel");
		return 1;
	}
}
CMD:world(playerid,params[])
{
    if(PlayerInfo[playerid][PlayerMode] != DM)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be in the DM mode to use this command.");
	if(DMPlayerInfo[playerid][Alive] != 1 || !IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be spawned to use this command.");
    if(DMMAPInfo[Type] == DM_TYPE_RACE || DMMAPInfo[Type] == DM_TYPE_DD)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You cannot switch world IDs in Race or DD.");
	if(AC_PlayerInfo[playerid][AC_pFreezed] == true)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} Wait for map to start.");
	new worldid, string[80], notallowed=0;
    forLoop(i, MAX_PLAYERS)
	{
		if(IsPlayerConnected(i) && DMMAPInfo[dStarted] == 1 && DMPlayerInfo[i][Alive] == 1 && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][PlayerMode] == DM && !IsPlayerNPC(i))
		{
		    if(GetVehicleModel(GetPlayerVehicleID(i)) == 425 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 520)
		    {
				notallowed = 1;
				break;
			}
		}
	}
    if(notallowed == 1)return SendClientMessage(playerid, red1, "Error: {FFFFFF}Can't switch world ids now.");
	if (sscanf(params, "d",worldid)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /world <worldid>");
	if(worldid < W_DM || worldid >= (W_DM+DM_MAX_SPOTS))
	{
		format(string,sizeof string,"Error: {FFFFFF}World ID must be between %d - %d.",W_DM+1,(W_DM+DM_MAX_SPOTS));
		return SendClientMessage(playerid, red1, string);
	}
	new vehid = GetPlayerVehicleID(playerid);
	SetVehicleVirtualWorld(vehid,worldid);
	SetPlayerVirtualWorld(playerid,worldid);
	PlacePlayerInVehicle(playerid,vehid,0);
    format(string,sizeof string,"Notice: {FFFFFF}World ID changed to %d.",worldid);
	SendClientMessage(playerid,green1,string);
	/*if(PlayerInfo[playerid][DisbleSpeedo] == 0)
	{
		if(PlayerInfo[playerid][SpeedoObject] != -1)DestroyTheDynamicObject(PlayerInfo[playerid][SpeedoObject]);
	    if(PlayerInfo[playerid][RacePlaceObject] != -1)DestroyTheDynamicObject(PlayerInfo[playerid][RacePlaceObject]);
	    PlayerInfo[playerid][SpeedoObject] = CreateDynamicObject(19483, 202.14845, 1755.43835, -17.83983,   0, 0, 0.00000, -1, -1, playerid);
	    PlayerInfo[playerid][SpeedoReset] = 1;
    }*/
    forLoop(u, MAX_PLAYERS)
	{
	    if(IsPlayerConnected(u) && PlayerInfo[u][Spawned] == 1 && PlayerInfo[u][PlayerMode] == DM && !IsPlayerNPC(u) && GetPlayerState(u) == PLAYER_STATE_SPECTATING && DMPlayerInfo[u][SpecID] == playerid) {
	       DM_StartSpectate(u, playerid);
		}
	}
	return 1;
}
CMD:respawn(playerid,params[])
{
    if(!(PlayerInfo[playerid][PlayerMode] == PJ  || PlayerInfo[playerid][PlayerMode] == DM))return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You cannot use this command in this mode.");
	if(PlayerInfo[playerid][PlayerMode] == DM)
	{
		if(!(DMPlayerInfo[playerid][Alive] == 0 && GetPlayerState(playerid) == PLAYER_STATE_SPECTATING))return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be spectating to use this command.");
		if(DMMAPInfo[dStarted] != 1) return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Wait for the current map to start.");
	    if(DMMAPInfo[Type] != DM_TYPE_RACE)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You can use this command only in RACE maps.");
		if(DMMapAlivePlayers() < 2)return SendClientMessage(playerid, red1, "Error: {FFFFFF}Can't re-spawn right now, only one player is alive.");
		if(DMMAPInfo[TimeLeft] > 882)return SendClientMessage(playerid, red1, "Error: {FFFFFF}Can't re-spawn right now, it is too early.");
	    if(DMMAPInfo[TimeLeft] < 30)return SendClientMessage(playerid, red1, "Error: {FFFFFF}Can't re-spawn right now, it is too late.");
	    DM_StopSpectate(playerid);
	    DMPlayerInfo[playerid][rRespawn] = 1;
	    A_SpawnPlayer(playerid);
    }
	if(PlayerInfo[playerid][PlayerMode] == PJ)
	{
	    if(!(PJPlayerInfo[playerid][Alive] == 0 && GetPlayerState(playerid) == PLAYER_STATE_SPECTATING))return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be spectating to use this command.");
        if(PJMAPInfo[dStarted] != 1) return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Wait for the current map to start.");
	    if(PJMapAlivePlayers() < 2)return SendClientMessage(playerid, red1, "Error: {FFFFFF}Can't re-spawn right now, only one player is alive.");
		if(PJMAPInfo[TimeLeft] > 590)return SendClientMessage(playerid, red1, "Error: {FFFFFF}Can't re-spawn right now, it is too early.");
	    if(PJMAPInfo[TimeLeft] < 30)return SendClientMessage(playerid, red1, "Error: {FFFFFF}Can't re-spawn right now, it is too late.");
        new duelers=0;
	    forLoop(i, MAX_PLAYERS)
		{
			if(IsPlayerConnected(i) && PJMAPInfo[dStarted] == 1 && PJPlayerInfo[i][Alive] == 1 && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][PlayerMode] == PJ && !IsPlayerNPC(i))
			{
			    if(PJPlayerInfo[i][InDuel] == 1)
			    {
					duelers++;
				}
			}
		}
		if(duelers != 0)return SendClientMessage(playerid, red1, "Error: {FFFFFF}Can't re-spawn right now, duel has started.");
		PJ_StopSpectate(playerid);
	    PJPlayerInfo[playerid][rRespawn] = 1;
		PJPlayerInfo[playerid][Respawning] = 5;
	    A_SpawnPlayer(playerid);
	}
	return 1;
}
CMD:rate(playerid,params[])
{
    if(!(PlayerInfo[playerid][PlayerMode] == PJ  || PlayerInfo[playerid][PlayerMode] == DM))return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You cannot use this command in this mode.");
	if(PlayerInfo[playerid][PlayerMode] == DM)
	{
	    if(GetPVarInt(playerid,"MapRateDM") == 2)return SendClientMessage(playerid, red1, "Error:{FFFFFF} You already rated this map.");
		new rating, string[180];
		if (sscanf(params, "d",rating)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /rate <rating>");
		if(rating > 10 || rating < 0)return SendClientMessage(playerid, red1, "Error:{FFFFFF} Rating must be between 0-10.");
	    SetPVarInt(playerid, "MapRateDM", 2);
		DMMAPInfo[Rating] = floatround((DMMAPInfo[Rating] + rating) / 2);
		format(string, sizeof(string), "Notice:{FFFFFF} %s has given the current map a %d/10. Map rating: %d/10", PlayerInfo[playerid][Name], rating,DMMAPInfo[Rating]);
		SendMessageToMode(DM,green1, string);
		format(string, sizeof(string), "Notice: %s has given the current map a %d/10. Map rating: %d/10", PlayerInfo[playerid][Name], rating,DMMAPInfo[Rating]);
		db_SaveChat(-1, DM,string);
	}
	if(PlayerInfo[playerid][PlayerMode] == PJ)
	{
	    if(GetPVarInt(playerid,"MapRatePJ") == 2)return SendClientMessage(playerid, red1, "Error:{FFFFFF} You already rated this map.");
		new rating, string[180];
		if (sscanf(params, "d",rating)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /rate <rating>");
		if(rating > 10 || rating < 0)return SendClientMessage(playerid, red1, "Error:{FFFFFF} Rating must be between 0-10.");
	    SetPVarInt(playerid, "MapRatePJ", 2);
		PJMAPInfo[Rating] = floatround((PJMAPInfo[Rating] + rating) / 2);
		format(string, sizeof(string), "Notice:{FFFFFF} %s has given the current map a %d/10. Map rating: %d/10", PlayerInfo[playerid][Name], rating,PJMAPInfo[Rating]);
		SendMessageToMode(PJ,green1, string);
		format(string, sizeof(string), "Notice: %s has given the current map a %d/10. Map rating: %d/10", PlayerInfo[playerid][Name], rating,PJMAPInfo[Rating]);
		db_SaveChat(-1, PJ,string);
	}
	return 1;
}

CMD:searchmap(playerid, params[])
{
    if(!(PlayerInfo[playerid][PlayerMode] == PJ  || PlayerInfo[playerid][PlayerMode] == DM))return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You cannot use this command in this mode.");
    if(PlayerInfo[playerid][PlayerMode] == DM)
	{
		new mapname[50];
	   	if(sscanf(params, "s[50]",mapname)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /searchmap <mapname>");
		if(strlen(mapname) < 2) return SendClientMessage(playerid, red1, "ERROR:{FFFFFF} Map name should contain at least 2 characters.");

	    new str[58],string[520], results;
	    forLoop(i, MAX_DM_MAPS)
	    {
	    	if(DMMapsInfo[i][Exists] == 1)
	    	{
	    	    if(strfind(DMMapsInfo[i][mName], mapname, true) != -1)
				{
					if(++results > 10)break;
				    format(str,sizeof(str),"\n%d) %s",results,DMMapsInfo[i][mName]);
					strcat(string, str);
				}
	    	}
	    }
	    if(results != 0)
			ShowPlayerDialog(playerid, 4521, DIALOG_STYLE_MSGBOX, "DM Search Maps", string, "Close", "");
	    else
			ShowPlayerDialog(playerid, 4521, DIALOG_STYLE_MSGBOX, "DM Search Maps", "{FF0000}No maps under that name, try again.", "Close", "");
	}
	if(PlayerInfo[playerid][PlayerMode] == PJ)
	{
		new mapname[50];
	   	if (sscanf(params, "s[50]",mapname)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /searchmap <mapname>");
		if(strlen(mapname) < 2) return SendClientMessage(playerid, red1, "ERROR:{FFFFFF} Map name should contain at least 2 characters.");

        new str[58],string[520], results;
	    forLoop(i, MAX_PJ_MAPS)
	    {
	    	if(PJMapsInfo[i][Exists] == 1)
	    	{
	    	    if(strfind(PJMapsInfo[i][mName], mapname, true) != -1)
				{
					if(++results > 10)break;
				    format(str,sizeof(str),"\n%d) %s",results,PJMapsInfo[i][mName]);
					strcat(string, str);
				}
	    	}
	    }
	    if(results != 0)
			ShowPlayerDialog(playerid, 4521, DIALOG_STYLE_MSGBOX, "PJ Search Maps", string, "Close", "");
	    else
			ShowPlayerDialog(playerid, 4521, DIALOG_STYLE_MSGBOX, "PJ Search Maps", "{FF0000}No maps under that name, try again.", "Close", "");
	}
	return 1;
}

CMD:resettt(playerid, params[])
{
    if(!(PlayerInfo[playerid][PlayerMode] == PJ  || PlayerInfo[playerid][PlayerMode] == DM))return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You cannot use this command in this mode.");
    if(PlayerInfo[playerid][PlayerMode] == DM)
	{
		if(DMMAPInfo[dStarted] != 1)
			return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Wait for the current map to start.");
        if(DMMAPInfo[Type] == DM_TYPE_DD)
			return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} This is a DD map, no Top Times here...");
        forLoop(i, MAX_DM_BEST_LINES)
		{
	        format(DMBest[i][Name],100,"-");
	        DMBest[i][bMins] = 0;
	        DMBest[i][bSecs] = 0;
	        DMBest[i][bMils] = 0;
        }
		UpdateDMTTText();
        forLoop(i, MAX_PLAYERS)
		{
			if(IsPlayerConnected(i) && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][PlayerMode] == DM && !IsPlayerNPC(i))
			{
				ShowDMTTText(i);
			}
		}
		new string[148];
		format(string, sizeof(string), "{33FF33}DD/DM{FFFFFF} Admin %s has reset this map's top times.",PlayerInfo[playerid][Name]);
		SendMessageToMode(DM,COLOR_WHITE, string);
	}
	if(PlayerInfo[playerid][PlayerMode] == PJ)
	{
		if(PJMAPInfo[dStarted] != 1)
			return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Wait for the current map to start.");
        forLoop(i, MAX_PJ_BEST_LINES)
		{
	        format(PJBest[i][Name],100,"-");
	        PJBest[i][bMins] = 0;
	        PJBest[i][bSecs] = 0;
	        PJBest[i][bMils] = 0;
        }
        UpdatePJTTText();
        forLoop(i, MAX_PLAYERS)
		{
			if(IsPlayerConnected(i) && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][PlayerMode] == PJ && !IsPlayerNPC(i))
			{
				ShowPJTTText(i);
			}
		}
		new string[148];
		format(string, sizeof(string), "{33FF33}PJ{FFFFFF} Admin %s has reset this map's top times.",PlayerInfo[playerid][Name]);
		SendMessageToMode(PJ,COLOR_WHITE, string);
	}
	return 1;
}
CMD:nextmap(playerid, params[])
{
    if(!(PlayerInfo[playerid][PlayerMode] == PJ  || PlayerInfo[playerid][PlayerMode] == DM))return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You cannot use this command in this mode.");
    if(PlayerInfo[playerid][PlayerMode] == DM)
	{
		if(DMMAPInfo[dStarted] != 1)
			return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Wait for the current map to start.");
	    if(DMMAPInfo[MapBought] != -1)
	    	return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} A next map is already set. Try next round.");
		new mapname[50], string[148], id = -1;
	   	if(sscanf(params, "s[50]",mapname)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /nextmap <mapname>  (use /searchmap)");
		if(strlen(mapname) < 2) return SendClientMessage(playerid, red1, "ERROR:{FFFFFF} Map name should contain at least 2 characters.");
        id = SearchForMapNameDM(mapname);
		if(id != -1)
		{
		    if(strcmp(DMMAPInfo[pathName],DMMapsInfo[id][pathName], true) == 0)
		    {
		        DMMAPInfo[MapBought] = -1;
		        return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Map repetitions aren't allowed...");
		    }
		  	DMMAPInfo[MapBought] = id;
		   	format(string, sizeof string, "Map: ~w~%s~n~~g~Next Map: ~w~%s",FixpInfoString(DMMAPInfo[mName], 0) ,FixpInfoString(DMMapsInfo[id][mName], 0));
		    TextDrawSetString(DMTXTD[mInfo], string);
			format(string, sizeof(string), "{33FF33}DD/DM{FFFFFF} %s set next map to %s.",PlayerInfo[playerid][Name],DMMapsInfo[id][mName]);
			SendMessageToMode(DM,COLOR_WHITE, string);
		}else SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Map name doesn't exist, try again.  (use /searchmap)");
	}
	if(PlayerInfo[playerid][PlayerMode] == PJ)
	{
		if(PJMAPInfo[dStarted] != 1)
			return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Wait for the current map to start.");
	    if(PJMAPInfo[MapBought] != -1)
	    	return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} A next map is already set. Try next round.");
		new mapname[50],string[148], id = -1;
	   	if (sscanf(params, "s[50]",mapname)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /nextmap <mapname>  (use /searchmap)");
		if(strlen(mapname) < 2) return SendClientMessage(playerid, red1, "ERROR:{FFFFFF} Map name should contain at least 2 characters.");
		id = SearchForMapNamePJ(mapname);
		if(id != -1)
		{
		    if(strcmp(PJMAPInfo[pathName],PJMapsInfo[id][pathName], true) == 0)
		    {
		        PJMAPInfo[MapBought] = -1;
		        return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Map repetitions aren't allowed...");
		    }
		  	PJMAPInfo[MapBought] = id;
		   	format(string, sizeof string, "Map: ~w~%s~n~~g~Next Map: ~w~%s",FixpInfoString(PJMAPInfo[mName], 0) ,FixpInfoString(PJMapsInfo[id][mName], 0));
		    TextDrawSetString(PJTXTD[mInfo], string);
			format(string, sizeof(string), "{33FF33}PJ{FFFFFF} %s set next map to %s.",PlayerInfo[playerid][Name],PJMapsInfo[id][mName]);
			SendMessageToMode(PJ,COLOR_WHITE, string);
		}else SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Map name doesn't exist, try again.  (use /searchmap)");
	}
	return 1;
}

CMD:weather(playerid, params[])
{
    if(!(PlayerInfo[playerid][PlayerMode] == PJ  || PlayerInfo[playerid][PlayerMode] == DM))return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You cannot use this command in this mode.");
    if(PlayerInfo[playerid][PlayerMode] == DM)
    {
		if(DMPlayerInfo[playerid][Alive] != 1)
	    	return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} You must be in DD/DM mode and alive.");
		if(DMPlayerInfo[playerid][dWeather] == -2)
	    	return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} You must first /shop a weather changer.");
	    new var;
	    if (sscanf(params, "d",var)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /weather <id> (use -1 to disable)");
	    DMPlayerInfo[playerid][dWeather] = var;
	    if(var != -1)SetPlayerWeather(playerid, DMPlayerInfo[playerid][dWeather]);
	    else
	    {
	        SetPlayerWeather(playerid, ModeWeather[PlayerInfo[playerid][PlayerMode]]);
			SendClientMessage(playerid,COLOR_WHITE, "{33FF33}Notice: {FFFFFF} Weather has been disabled, use /weather to enable it again.");
	    }
    }
    if(PlayerInfo[playerid][PlayerMode] == PJ)
    {
		if(PJPlayerInfo[playerid][Alive] != 1)
	    	return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} You must be in PJ mode and alive.");
		if(PJPlayerInfo[playerid][dWeather] == -2)
	    	return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} You must first /shop a weather changer.");
	    new var;
	    if (sscanf(params, "d",var)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /weather <id> (use -1 to disable)");
	    PJPlayerInfo[playerid][dWeather] = var;
	    if(var != -1)SetPlayerWeather(playerid, PJPlayerInfo[playerid][dWeather]);
	    else
	    {
	        SetPlayerWeather(playerid, ModeWeather[PlayerInfo[playerid][PlayerMode]]);
			SendClientMessage(playerid,COLOR_WHITE, "{33FF33}Notice: {FFFFFF} Weather has been disabled, use /weather to enable it again.");
	    }
    }
	return 1;
}
CMD:time(playerid, params[])
{
    if(!(PlayerInfo[playerid][PlayerMode] == PJ  || PlayerInfo[playerid][PlayerMode] == DM))return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You cannot use this command in this mode.");
    if(PlayerInfo[playerid][PlayerMode] == DM)
    {
		if(DMPlayerInfo[playerid][Alive] != 1)
			return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} You must be in DD/DM mode and alive.");
		if(DMPlayerInfo[playerid][dTime] == -2)
			return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} You must first /shop a time changer.");
		new hour;
		if (sscanf(params, "d",hour)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /time <hour> (use -1 to disable)");
		if(hour > 24 || hour < -1)return SendClientMessage(playerid, red1, "Error:{FFFFFF} Hour must be between -1(disable) and 24.");
		DMPlayerInfo[playerid][dTime] = hour;
		if(hour != -1)SetPlayerTime(playerid, DMPlayerInfo[playerid][dTime], 0);
		else
		{
		    SetPlayerTime(playerid, ModeTime[PlayerInfo[playerid][PlayerMode]], 0);
			SendClientMessage(playerid,COLOR_WHITE, "{33FF33}Notice: {FFFFFF} Time has been disabled, use /time to enable it again.");
		}
	}
	if(PlayerInfo[playerid][PlayerMode] == PJ)
    {
		if(PJPlayerInfo[playerid][Alive] != 1)
			return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} You must be in PJ mode and alive.");
		if(PJPlayerInfo[playerid][dTime] == -2)
			return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} You must first /shop a time changer.");
		new hour;
		if (sscanf(params, "d",hour)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /time <hour> (use -1 to disable)");
		if(hour > 24 || hour < -1)return SendClientMessage(playerid, red1, "Error:{FFFFFF} Hour must be between -1(disable) and 24.");
		PJPlayerInfo[playerid][dTime] = hour;
		if(hour != -1)SetPlayerTime(playerid, PJPlayerInfo[playerid][dTime], 0);
		else
		{
		    SetPlayerTime(playerid, ModeTime[PlayerInfo[playerid][PlayerMode]], 0);
			SendClientMessage(playerid,COLOR_WHITE, "{33FF33}Notice: {FFFFFF} Time has been disabled, use /time to enable it again.");
		}
	}
	return 1;
}

CMD:apvp(playerid, params[])
{
    if(!(PlayerInfo[playerid][PlayerMode] == PJ  || PlayerInfo[playerid][PlayerMode] == DM))return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You cannot use this command in this mode.");
	if(PlayerInfo[playerid][PlayerMode] == DM)
    {
		new string[220];
	    if(DMPlayerInfo[playerid][Alive] != 1)
	    	return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} You must be in DD/DM mode and alive.");
	    if(DMPlayerInfo[playerid][PVPRequest][0] == -1)
		    return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} You have no PVP invitations.");
	    new pid = DMPlayerInfo[playerid][PVPRequest][0];
	    if(DMPlayerInfo[pid][PVPID] == -1)
	    {
			DMPlayerInfo[playerid][PVPID] = DMPlayerInfo[playerid][PVPRequest][0];
	        DMPlayerInfo[playerid][PVPRounds] = DMPlayerInfo[playerid][PVPRequest][1];
	        DMPlayerInfo[playerid][PVPAmount] = DMPlayerInfo[playerid][PVPRequest][2];
	        DMPlayerInfo[playerid][PVPWins] = 0;
	        DMPlayerInfo[playerid][PVPChecked] = 0;
	        DMPlayerInfo[playerid][PVPTime][0] = 99;
	        DMPlayerInfo[playerid][PVPTime][1] = 99;
	        DMPlayerInfo[playerid][PVPTime][2] = 99;

	        DMPlayerInfo[pid][PVPID] = DMPlayerInfo[pid][PVPRequest][0];
	        DMPlayerInfo[pid][PVPRounds] = DMPlayerInfo[pid][PVPRequest][1];
	        DMPlayerInfo[pid][PVPAmount] = DMPlayerInfo[pid][PVPRequest][2];
	        DMPlayerInfo[pid][PVPWins] = 0;
	        DMPlayerInfo[pid][PVPChecked] = 0;
	        DMPlayerInfo[pid][PVPTime][0] = 99;
	        DMPlayerInfo[pid][PVPTime][1] = 99;
	        DMPlayerInfo[pid][PVPTime][2] = 99;

	        DMPlayerInfo[playerid][PVPRequest][0] = -1;
	        DMPlayerInfo[pid][PVPRequest][0] = -1;
	        SendClientMessage(playerid,red1,"Notice:{FFFFFF} You have accepted the PVP invitation.");
			format(string, sizeof(string), "Notice:{FFFFFF} %s has the accepted PVP invitation.", PlayerInfo[playerid][Name] );
			SendClientMessage(pid,red1,string);

			format(string, sizeof(string), "{33FF33}[PVP]{FFFFFF} %s has challenged {33FF33}%s for %d round(s) for $%d.", PlayerInfo[pid][Name], PlayerInfo[playerid][Name],DMPlayerInfo[playerid][PVPRounds],DMPlayerInfo[playerid][PVPAmount]);
			SendMessageToMode(DM,COLOR_WHITE, string);
		}
		else
		{
		    DMPlayerInfo[playerid][PVPRequest][0] = -1;
			SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Player is already are on a PVP.");
		}
	}
	if(PlayerInfo[playerid][PlayerMode] == PJ)
    {
		new string[220];
	    if(PJPlayerInfo[playerid][Alive] != 1)
	    	return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} You must be in PJ mode and alive.");
	    if(PJPlayerInfo[playerid][PVPRequest][0] == -1)
		    return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} You have no PVP invitations.");
	    new pid = PJPlayerInfo[playerid][PVPRequest][0];
	    if(PJPlayerInfo[pid][PVPID] == -1)
	    {
			PJPlayerInfo[playerid][PVPID] = PJPlayerInfo[playerid][PVPRequest][0];
	        PJPlayerInfo[playerid][PVPRounds] = PJPlayerInfo[playerid][PVPRequest][1];
	        PJPlayerInfo[playerid][PVPAmount] = PJPlayerInfo[playerid][PVPRequest][2];
	        PJPlayerInfo[playerid][PVPWins] = 0;
	        PJPlayerInfo[playerid][PVPChecked] = 0;
	        PJPlayerInfo[playerid][PVPTime][0] = 99;
	        PJPlayerInfo[playerid][PVPTime][1] = 99;
	        PJPlayerInfo[playerid][PVPTime][2] = 99;

	        PJPlayerInfo[pid][PVPID] = PJPlayerInfo[pid][PVPRequest][0];
	        PJPlayerInfo[pid][PVPRounds] = PJPlayerInfo[pid][PVPRequest][1];
	        PJPlayerInfo[pid][PVPAmount] = PJPlayerInfo[pid][PVPRequest][2];
	        PJPlayerInfo[pid][PVPWins] = 0;
	        PJPlayerInfo[pid][PVPChecked] = 0;
	        PJPlayerInfo[pid][PVPTime][0] = 99;
	        PJPlayerInfo[pid][PVPTime][1] = 99;
	        PJPlayerInfo[pid][PVPTime][2] = 99;

	        PJPlayerInfo[playerid][PVPRequest][0] = -1;
	        PJPlayerInfo[pid][PVPRequest][0] = -1;
	        SendClientMessage(playerid,red1,"Notice:{FFFFFF} You have accepted the PVP invitation.");
			format(string, sizeof(string), "Notice:{FFFFFF} %s has the accepted PVP invitation.", PlayerInfo[playerid][Name] );
			SendClientMessage(pid,red1,string);

			format(string, sizeof(string), "{33FF33}[PVP]{FFFFFF} %s has challenged {33FF33}%s for %d round(s) for $%d.", PlayerInfo[pid][Name], PlayerInfo[playerid][Name],PJPlayerInfo[playerid][PVPRounds],PJPlayerInfo[playerid][PVPAmount]);
			SendMessageToMode(PJ,COLOR_WHITE, string);
		}
		else
		{
		    PJPlayerInfo[playerid][PVPRequest][0] = -1;
			SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Player is already are on a PVP.");
		}
	}
	return 1;
}

CMD:dpvp(playerid, params[])
{
    if(!(PlayerInfo[playerid][PlayerMode] == PJ  || PlayerInfo[playerid][PlayerMode] == DM))return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You cannot use this command in this mode.");
	if(PlayerInfo[playerid][PlayerMode] == DM)
    {
		new string[220];
	    if(DMPlayerInfo[playerid][Alive] != 1)
	    	return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} You must be in DD/DM mode and alive.");
	    if(DMPlayerInfo[playerid][PVPRequest][0] == -1)
		    return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} You have no PVP invitations.");
	    new pid = DMPlayerInfo[playerid][PVPRequest][0];
	    if(DMPlayerInfo[pid][PVPID] == -1)
	    {
	        DMPlayerInfo[playerid][PVPRequest][0] = -1;
	        DMPlayerInfo[pid][PVPRequest][0] = -1;

	        SendClientMessage(playerid,red1,"Notice:{FFFFFF} You have denied the PVP invitation.");
			format(string, sizeof(string), "Notice:{FFFFFF} %s has denied the PVP invitation.", PlayerInfo[playerid][Name] );
			SendClientMessage(pid,red1,string);

			format(string, sizeof(string), "{33FF33}[PVP]{FFFFFF} %s has denied a challenge from {33FF33}%s for %d round(s) for $%d.", PlayerInfo[playerid][Name], PlayerInfo[pid][Name],DMPlayerInfo[playerid][PVPRounds],DMPlayerInfo[playerid][PVPAmount]);
			SendMessageToMode(DM,COLOR_WHITE, string);
	    }
	    else
	    {
	        DMPlayerInfo[playerid][PVPRequest][0] = -1;
			SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Player is already are on a PVP.");
	    }
    }
    if(PlayerInfo[playerid][PlayerMode] == PJ)
    {
		new string[220];
	    if(PJPlayerInfo[playerid][Alive] != 1)
	    	return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} You must be in PJ mode and alive.");
	    if(PJPlayerInfo[playerid][PVPRequest][0] == -1)
		    return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} You have no PVP invitations.");
	    new pid = PJPlayerInfo[playerid][PVPRequest][0];
	    if(PJPlayerInfo[pid][PVPID] == -1)
	    {
	        PJPlayerInfo[playerid][PVPRequest][0] = -1;
	        PJPlayerInfo[pid][PVPRequest][0] = -1;

	        SendClientMessage(playerid,red1,"Notice:{FFFFFF} You have denied the PVP invitation.");
			format(string, sizeof(string), "Notice:{FFFFFF} %s has denied the PVP invitation.", PlayerInfo[playerid][Name] );
			SendClientMessage(pid,red1,string);

			format(string, sizeof(string), "{33FF33}[PVP]{FFFFFF} %s has denied a challenge from {33FF33}%s for %d round(s) for $%d.", PlayerInfo[playerid][Name], PlayerInfo[pid][Name],PJPlayerInfo[playerid][PVPRounds],PJPlayerInfo[playerid][PVPAmount]);
			SendMessageToMode(PJ,COLOR_WHITE, string);
	    }
	    else
	    {
	        PJPlayerInfo[playerid][PVPRequest][0] = -1;
			SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Player is already are on a PVP.");
	    }
    }
	return 1;
}
CMD:pvp(playerid, params[])
{
    if(!(PlayerInfo[playerid][PlayerMode] == PJ  || PlayerInfo[playerid][PlayerMode] == DM))return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You cannot use this command in this mode.");
    if(PlayerInfo[playerid][PlayerMode] == DM)
    {
		new rounds, id, amount, string[220];
	    if(DMPlayerInfo[playerid][Alive] != 1)
	    	return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} You must be in DD/DM mode and alive.");
	   // if(DMMAPInfo[dStarted] == 1)
	//		return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} The current map has started. Try again before a map starts.");
	    if (sscanf(params, "ddd",id, rounds, amount)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /pvp <playerid> <rounds> <amount>");
	    if(IsPlayerConnected(id) && id != INVALID_PLAYER_ID && id != playerid)
		{
		    if(PlayerInfo[id][PlayerMode] != DM || PlayerInfo[id][Spawned] != 1 || DMPlayerInfo[id][Alive] != 1)
				return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} The player must be in DD/DM mode and alive.");
			if(DMMAPInfo[Type] == DM_TYPE_RACE)
				return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} You cannot start a PVP in a Race map.");
			if(DMPlayerInfo[playerid][PVPID] > -1 || DMPlayerInfo[playerid][PVPRequest][0] > -1)
		    	return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} You already are on a PVP.");
			if(DMPlayerInfo[id][PVPID] > -1 || DMPlayerInfo[id][PVPRequest][0] > -1)
		    	return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Player is already are on a PVP.");
			if(amount < 1)return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Amount of money must be more than $1.");
			if(GetThePlayerMoney(playerid) < amount)
				return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} You don't have enough money..");
	        if(GetThePlayerMoney(id) < amount)
				return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} The player doesn't have enough money..");
			if(rounds > 20 || rounds < 1)
				return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Invalid round amount. (Min: 1 | Max: 20)");

			DMPlayerInfo[playerid][PVPRequest][0] = id;
			DMPlayerInfo[playerid][PVPRequest][1] = rounds;
			DMPlayerInfo[playerid][PVPRequest][2] = amount;
			DMPlayerInfo[id][PVPRequest][0] = playerid;
			DMPlayerInfo[id][PVPRequest][1] = rounds;
			DMPlayerInfo[id][PVPRequest][2] = amount;
	    	DMPlayerInfo[playerid][PVPID] = -1;
	    	DMPlayerInfo[id][PVPID] = -1;
			format(string, sizeof(string), "{33FF33}[PVP]{FFFFFF}You challenged %s for %d round(s) for $%d. (10 seconds untill cancelation)", PlayerInfo[id][Name], rounds, amount);
	        SendClientMessage(playerid,red,string);

			format(string, sizeof(string), "{33FF33}[PVP]{FFFFFF}%s challenges you for %d round(s) for $%d. (/apvp to accept | /dpvp to deny)", PlayerInfo[playerid][Name], rounds, amount);
	        SendClientMessage(id,red,string);
			GameTextForPlayer(id, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~r~ PVP INVITATION",2000,3);
			SetTimerEx("EndDMPVP", 10000, false, "i", playerid);
		}else return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Player is not connected or is yourself.");
	}
	if(PlayerInfo[playerid][PlayerMode] == PJ)
    {
		new rounds, id, amount, string[220];
	    if(PJPlayerInfo[playerid][Alive] != 1)
	    	return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} You must be in PJ mode and alive.");
	   // if(PJMAPInfo[dStarted] == 1)
	//		return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} The current map has started. Try again before a map starts.");
	    if (sscanf(params, "ddd",id, rounds, amount)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /pvp <playerid> <rounds> <amount>");
	    if(IsPlayerConnected(id) && id != INVALID_PLAYER_ID && id != playerid)
		{
		    if(PlayerInfo[id][PlayerMode] != PJ || PlayerInfo[id][Spawned] != 1 || PJPlayerInfo[id][Alive] != 1)
				return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} The player must be in PJ mode and alive.");
	        if(PJPlayerInfo[playerid][PVPID] > -1 || PJPlayerInfo[playerid][PVPRequest][0] > -1)
		    	return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} You already are on a PVP.");
			if(PJPlayerInfo[id][PVPID] > -1 || PJPlayerInfo[id][PVPRequest][0] > -1)
		    	return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Player is already are on a PVP.");
			if(amount < 1)return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Amount of money must be more than $1.");
			if(GetThePlayerMoney(playerid) < amount)
				return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} You don't have enough money..");
	        if(GetThePlayerMoney(id) < amount)
				return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} The player doesn't have enough money..");
			if(rounds > 20 || rounds < 1)
				return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Invalid round amount. (Min: 1 | Max: 20)");

			PJPlayerInfo[playerid][PVPRequest][0] = id;
			PJPlayerInfo[playerid][PVPRequest][1] = rounds;
			PJPlayerInfo[playerid][PVPRequest][2] = amount;
			PJPlayerInfo[id][PVPRequest][0] = playerid;
			PJPlayerInfo[id][PVPRequest][1] = rounds;
			PJPlayerInfo[id][PVPRequest][2] = amount;
	    	PJPlayerInfo[playerid][PVPID] = -1;
	    	PJPlayerInfo[id][PVPID] = -1;
			format(string, sizeof(string), "{33FF33}[PVP]{FFFFFF}You challenged %s for %d round(s) for $%d. (10 seconds untill cancelation)", PlayerInfo[id][Name], rounds, amount);
	        SendClientMessage(playerid,red,string);

			format(string, sizeof(string), "{33FF33}[PVP]{FFFFFF}%s challenges you for %d round(s) for $%d. (/apvp to accept | /dpvp to deny)", PlayerInfo[playerid][Name], rounds, amount);
	        SendClientMessage(id,red,string);
			GameTextForPlayer(id, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~r~ PVP INVITATION",2000,3);
			SetTimerEx("EndPJPVP", 10000, false, "i", playerid);
		}else return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Player is not connected or is yourself.");
	}
	return 1;
}
forward EndPJPVP(playerid);
public EndPJPVP(playerid)
{
	if(PJPlayerInfo[playerid][PVPRequest][0] == -1)return 0;
	new id = PJPlayerInfo[playerid][PVPRequest][0], string[220];
	PJPlayerInfo[playerid][PVPRequest][0] = -1;
    PJPlayerInfo[id][PVPRequest][0] = -1;
    format(string, sizeof(string), "{33FF33}[PVP]{FFFFFF} Invitation to %s has been canceled, no response.", PlayerInfo[id][Name]);
    SendClientMessage(playerid,red,string);
    format(string, sizeof(string), "{33FF33}[PVP]{FFFFFF} Invitation from %s has been canceled, no response.", PlayerInfo[playerid][Name]);
    SendClientMessage(id,red,string);
	return 1;
}
forward EndDMPVP(playerid);
public EndDMPVP(playerid)
{
	if(DMPlayerInfo[playerid][PVPRequest][0] == -1)return 0;
	new id = DMPlayerInfo[playerid][PVPRequest][0], string[220];
	DMPlayerInfo[playerid][PVPRequest][0] = -1;
    DMPlayerInfo[id][PVPRequest][0] = -1;
    format(string, sizeof(string), "{33FF33}[PVP]{FFFFFF} Invitation to %s has been canceled, no response.", PlayerInfo[id][Name]);
    SendClientMessage(playerid,red,string);
    format(string, sizeof(string), "{33FF33}[PVP]{FFFFFF} Invitation from %s has been canceled, no response.", PlayerInfo[playerid][Name]);
    SendClientMessage(id,red,string);
	return 1;
}
/*forward MovePlayer(playerid, Float: move_X, Float: move_Y, Float: move_Z, Float: speed_X, Float: speed_Y, Float: speed_Z);
public MovePlayer(playerid, Float: move_X, Float: move_Y, Float: move_Z, Float: speed_X, Float: speed_Y, Float: speed_Z)
{
	if(SFPlayerInfo[playerid][Spiderman] == 0 || PlayerInfo[playerid][PlayerMode] != STUNT ||
		PlayerInfo[playerid][Spawned] == 0)
	{
		KillTimer(GetPVarInt(playerid, "pv_MoveTimer"));
		return 0;
	}
	static Float: pPos[3];
	if(GetPlayerPos(playerid, pPos[0], pPos[1], pPos[2]))
	{
		static Float: distLeft;
		pPos[0] -= move_X;
		pPos[1] -= move_Y;
		pPos[2] -= move_Z;

		distLeft = floatpower((pPos[0] * pPos[0]) + (pPos[1] * pPos[1]) + (pPos[2] * pPos[2]), 0.5);

		if(GetPVarFloat(playerid, "pv_OldDist") < distLeft)
		{
			SetPlayerVelocity(playerid, 0.0, 0.0, 0.0);
			KillTimer(GetPVarInt(playerid, "pv_MoveTimer"));

			SetPVarInt(playerid, "pv_IsMoving", false);
		}
		else
		{
			static
				Float: mapPos_Z
			;
			pPos[0] += move_X;
			pPos[1] += move_Y;
			pPos[2] += move_Z;

			GetPointZPos(pPos[0], pPos[1], mapPos_Z);

			SetPlayerVelocity(playerid, speed_X, speed_Y, floatabs(pPos[2] - mapPos_Z) < 1.1 ? speed_Z + 0.05 : speed_Z);
			SetPVarFloat(playerid, "pv_OldDist", distLeft);

			ApplyAnimation(playerid, "SHOP", "SHP_Duck_Aim", 4.0, 0, 0, 0, 0, 0);
			SetPVarInt(playerid, "pv_IsMoving", true);
		}
	}
	return 1;
}*/
stock UpdateSupermanMode(playerid)
{
    if(SFPlayerInfo[playerid][Superman] == 1 && PlayerInfo[playerid][PlayerMode] == STUNT)
	{
	    if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
		    SetHealth(playerid,100000);
		    new k, ud,lr;
			GetPlayerKeys(playerid,k,ud,lr);
			new Float:v_x,Float:v_y,Float:v_z,
				Float:x,Float:y,Float:z;
			if(ud < 0)	// forward
			{
				GetPlayerCameraFrontVector(playerid,x,y,z);
				v_x = x+0.1;
				v_y = y+0.1;
			}
			if(k & KEY_CROUCH)	// down
				v_z = -0.2;
			else if(k & KEY_JUMP)	// up
				v_z = 0.4;
			if(k & KEY_WALK)	// slow
			{
				v_x /=5.0;
				v_y /=5.0;
				v_z /=5.0;
			}
			if(k & KEY_SPRINT)	// fast
			{
				v_x *=4.0;
				v_y *=4.0;
				v_z *=4.0;
			}
			if(v_z == 0.0)
				v_z = 0.025;
			SetPlayerVelocity(playerid,v_x,v_y,v_z);
			if(v_x == 0 && v_y == 0)
			{
				if(GetPlayerAnimationIndex(playerid) == 959)
					ApplyAnimation(playerid,"PARACHUTE","PARA_steerR",6.1,1,1,1,1,0,1);
			}
			else
			{
				GetPlayerCameraFrontVector(playerid,v_x,v_y,v_z);
				GetPlayerCameraPos(playerid,x,y,z);
				SetPlayerLookAt(playerid,v_x*500.0+x,v_y*500.0+y);
				if(GetPlayerAnimationIndex(playerid) != 959)
					ApplyAnimation(playerid,"PARACHUTE","FALL_SkyDive_Accel",6.1,1,1,1,1,0,1);
			}

		}
	}
}
stock SetPlayerLookAt(playerid,Float:x,Float:y)
{
	new Float:Px, Float:Py, Float: Pa;
	GetPlayerPos(playerid, Px, Py, Pa);
	Pa = floatabs(atan((y-Py)/(x-Px)));
	if (x <= Px && y >= Py) 		Pa = floatsub(180.0, Pa);
	else if (x < Px && y < Py) 		Pa = floatadd(Pa, 180.0);
	else if (x >= Px && y <= Py)	Pa = floatsub(360.0, Pa);
	Pa = floatsub(Pa, 90.0);
	if (Pa >= 360.0)
		Pa = floatsub(Pa, 360.0);
	SetPlayerFacingAngle(playerid, Pa);
	return;
}
forward UpdateSpeedoTXT(playerid);
public UpdateSpeedoTXT(playerid)
{
    //forLoop(playerid, MAX_PLAYERS)
	{
	    if(!IsPlayerConnected(playerid) || IsPlayerNPC(playerid) || !PlayerInfo[playerid][Spawned] || !PlayerInfo[playerid][MainMenu] || !PlayerInfo[playerid][PlayerOptionSelected]) return 0;
		if(PlayerInfo[playerid][PlayerMode] != DM)
		{
		    if(!IsPlayerInAnyVehicle(playerid))return 0;
		}
		else if(!(IsPlayerInAnyVehicle(playerid) || GetPlayerState(playerid) == PLAYER_STATE_SPECTATING))return 0;

        
		if(PlayerInfo[playerid][DisbleSpeedo] == 0)
		{
		    new theplayer, string[150], hp[2][20], Float: health, Float:rz, Float:offX, Float:rz_p, Float:offX_p;
			theplayer = playerid;
			if(PlayerInfo[playerid][PlayerMode] == DM && GetPlayerState(playerid) == PLAYER_STATE_SPECTATING && DMPlayerInfo[playerid][SpecID] > -1)
				theplayer = DMPlayerInfo[playerid][SpecID];
				
			if(GetVehicleModel(GetPlayerVehicleID(theplayer)) >= 400)
			{
			    if(!IsPlayerOnBicycle(theplayer))
				{
					GetVehicleHealth(GetPlayerVehicleID(theplayer), health);
	                forLoop(i, floatround(health/100)) strcat(hp[0],"|");
		            forLoopR(i, 10, floatround(health/100)) strcat(hp[1],"|");
	            }
	            if(PlayerInfo[playerid][SpeedoType] == 0)
	            	format(string, sizeof string, "%d {FFFFFF}km/h",AC_GetPlayerSpeed(theplayer,true));
	            else
	            	format(string, sizeof string, "%d {FFFFFF}mph",floatround(AC_GetPlayerSpeed(theplayer,true)*0.621371));

	            if(PlayerInfo[playerid][SpeedoSide] == 0)
	            {
	                rz = -60.680038;
	                offX = -SpeedoOffSet[GetVehicleModel(GetPlayerVehicleID(theplayer))-400][1];
					if(!IsPlayerOnBicycle(theplayer))
					{
						if(health>450)format(string, sizeof string, "{%s}%s\n{FFFFFF}|{%s}%s{FFFFFF}%s|",PlayerInfo[playerid][SpeedoCol],string,PlayerInfo[playerid][SpeedoCol],hp[0],hp[1]);
					    else format(string, sizeof string, "{FF0000}%s\n{FFFFFF}|{FF0000}%s{FFFFFF}%s|",string,hp[0],hp[1]);
					}
					else format(string, sizeof string, "{%s}%s",PlayerInfo[playerid][SpeedoCol],string);
					SetDynamicObjectMaterialText(PlayerInfo[playerid][SpeedoObject], 0, string, OBJECT_MATERIAL_SIZE_256x128,
					"Arial", floatround(SpeedoOffSet[GetVehicleModel(GetPlayerVehicleID(theplayer))-400][0]), 0, 0xFFFF8200, 0, OBJECT_MATERIAL_TEXT_ALIGN_LEFT);
                    if(PlayerInfo[theplayer][PlayerMode] == TRP && RPGetVehicleID(GetPlayerVehicleID(theplayer)) != -1 && !IsPlayerOnBicycle(theplayer))
					{
						new v = RPGetVehicleID(GetPlayerVehicleID(theplayer));
						format(hp[0],20,"");
						format(hp[1],20,"");
		                forLoop(i, floatround(RPVehicles[v][Fuel]/10)) strcat(hp[0],"|");
			            forLoopR(i, 10, floatround(RPVehicles[v][Fuel]/10)) strcat(hp[1],"|");
	                	rz_p = -120.680038;
	                	offX_p = SpeedoOffSet[GetVehicleModel(GetPlayerVehicleID(theplayer))-400][1];
						if(floatround(RPVehicles[v][Fuel])>30)format(string, sizeof string, "{%s}Fuel\n{FFFFFF}|%s{%s}%s{FFFFFF}|",PlayerInfo[playerid][SpeedoCol],hp[1],PlayerInfo[playerid][SpeedoCol],hp[0]);
				    	else format(string, sizeof string, "{FF0000}Fuel\n{FFFFFF}|%s{FF0000}%s{FFFFFF}|",hp[1],hp[0]);
						SetDynamicObjectMaterialText(PlayerInfo[playerid][RacePlaceObject], 0, string, OBJECT_MATERIAL_SIZE_256x128,
							"Arial", floatround(SpeedoOffSet[GetVehicleModel(GetPlayerVehicleID(theplayer))-400][0]), 0, 0xFFFF8200, 0, OBJECT_MATERIAL_TEXT_ALIGN_RIGHT);
					}
					if(PlayerInfo[theplayer][PlayerMode] == DM && DMMAPInfo[Type] == DM_TYPE_RACE)
					{
	                	new raceplace, maxCps,rplace[10];
	                    if(DMMapAlivePlayers() == 1)
	                        DMPlayerInfo[theplayer][cRacePos] = 1;
	                    raceplace = DMPlayerInfo[theplayer][cRacePos];
	                    
					    forLoopR(c,MAX_DM_CP-1,-1)
						{
						    if(DMMAPInfo[cExists][c] == 1)
						    {
	                            maxCps = c;
	                            break;
							}
						}
						format(rplace, sizeof rplace, "%d",raceplace);
						forLoopR(j,(strlen(rplace)-1),-1)
						{
						    if(rplace[j] == '1' && raceplace != 11)
						    {
						        format(string, sizeof string, "%dst place",raceplace);
						        break;
						    }
						    else if(rplace[j] == '2' && raceplace != 12)
						    {
						        format(string, sizeof string, "%dnd place",raceplace);
						        break;
						    }
						    else if(rplace[j] == '3' && raceplace != 13)
						    {
						        format(string, sizeof string, "%drd place",raceplace);
						        break;
						    }
						    else
						    {
						        format(string, sizeof string, "%dth place",raceplace);
						        break;
						    }
						}

						maxCps +=1;
	                	rz_p = -120.680038;
	                	offX_p = SpeedoOffSet[GetVehicleModel(GetPlayerVehicleID(theplayer))-400][1];
	                    if(DMPlayerInfo[theplayer][rFinished] == 0)
	                    {
							if(DMPlayerInfo[theplayer][cRaceCP] < MAX_DM_CP)
								format(string, sizeof string, "{%s}%s\n{FFFFFF}%d/%d",PlayerInfo[playerid][SpeedoCol],string,DMPlayerInfo[theplayer][cRaceCP],maxCps);
					    	else //last cp
								format(string, sizeof string, "{%s}%s\n{FFFFFF}%d/%d",PlayerInfo[playerid][SpeedoCol],string,maxCps-1,maxCps);
						}
						else
							format(string, sizeof string, "{%s}Finished",PlayerInfo[playerid][SpeedoCol]);
				    	SetDynamicObjectMaterialText(PlayerInfo[playerid][RacePlaceObject], 0, string, OBJECT_MATERIAL_SIZE_256x128,
							"Arial", floatround(SpeedoOffSet[GetVehicleModel(GetPlayerVehicleID(theplayer))-400][0]), 0, 0xFFFF8200, 0, OBJECT_MATERIAL_TEXT_ALIGN_RIGHT);
					}
				}
				else
				{
				    rz = -120.680038;
	                rz_p = -60.680038;
	                offX = SpeedoOffSet[GetVehicleModel(GetPlayerVehicleID(theplayer))-400][1];
	                offX_p = -SpeedoOffSet[GetVehicleModel(GetPlayerVehicleID(theplayer))-400][1];
                    if(!IsPlayerOnBicycle(theplayer))
					{
						if(health>450)format(string, sizeof string, "{%s}%s\n{FFFFFF}|%s{%s}%s{FFFFFF}|",PlayerInfo[playerid][SpeedoCol],string,hp[1],PlayerInfo[playerid][SpeedoCol],hp[0]);
				    	else format(string, sizeof string, "{FF0000}%s\n{FFFFFF}|%s{FF0000}%s{FFFFFF}|",string,hp[1],hp[0]);
					}
					else format(string, sizeof string, "{%s}%s",PlayerInfo[playerid][SpeedoCol],string);

					SetDynamicObjectMaterialText(PlayerInfo[playerid][SpeedoObject], 0, string, OBJECT_MATERIAL_SIZE_256x128,
					"Arial", floatround(SpeedoOffSet[GetVehicleModel(GetPlayerVehicleID(theplayer))-400][0]), 0, 0xFFFF8200, 0, OBJECT_MATERIAL_TEXT_ALIGN_RIGHT);
                    if(PlayerInfo[theplayer][PlayerMode] == TRP && RPGetVehicleID(GetPlayerVehicleID(theplayer)) != -1 && !IsPlayerOnBicycle(theplayer))
					{
						new v = RPGetVehicleID(GetPlayerVehicleID(theplayer));
						format(hp[0],20,"");
						format(hp[1],20,"");
		                forLoop(i, floatround(RPVehicles[v][Fuel]/10)) strcat(hp[0],"|");
			            forLoopR(i, 10, floatround(RPVehicles[v][Fuel]/10)) strcat(hp[1],"|");
	                	rz_p = -60.680038;
	                	offX_p = -SpeedoOffSet[GetVehicleModel(GetPlayerVehicleID(theplayer))-400][1];
						if(floatround(RPVehicles[v][Fuel])>30)format(string, sizeof string, "{%s}Fuel\n{FFFFFF}|{%s}%s{FFFFFF}%s|",PlayerInfo[playerid][SpeedoCol],PlayerInfo[playerid][SpeedoCol],hp[0],hp[1]);
						else format(string, sizeof string, "{FF0000}Fuel\n{FFFFFF}|{FF0000}%s{FFFFFF}%s|",hp[0],hp[1]);
				    	SetDynamicObjectMaterialText(PlayerInfo[playerid][RacePlaceObject], 0, string, OBJECT_MATERIAL_SIZE_256x128,
							"Arial", floatround(SpeedoOffSet[GetVehicleModel(GetPlayerVehicleID(theplayer))-400][0]), 0, 0xFFFF8200, 0, OBJECT_MATERIAL_TEXT_ALIGN_LEFT);
					}
					if(PlayerInfo[theplayer][PlayerMode] == DM && DMMAPInfo[Type] == DM_TYPE_RACE)
					{
					    new raceplace, maxCps, rplace[10];
	                    if(DMMapAlivePlayers() == 1)
	                        DMPlayerInfo[theplayer][cRacePos] = 1;
	                    raceplace = DMPlayerInfo[theplayer][cRacePos];
					    forLoopR(c,MAX_DM_CP-1,-1)
						{
						    if(DMMAPInfo[cExists][c] == 1)
						    {
	                            maxCps = c;
	                            break;
							}
						}
						format(rplace, sizeof rplace, "%d",raceplace);
						forLoopR(j,(strlen(rplace)-1),-1)
						{
						    if(rplace[j] == '1' && raceplace != 11)
						    {
						        format(string, sizeof string, "%dst place",raceplace);
						        break;
						    }
						    else if(rplace[j] == '2' && raceplace != 12)
						    {
						        format(string, sizeof string, "%dnd place",raceplace);
						        break;
						    }
						    else if(rplace[j] == '3' && raceplace != 13)
						    {
						        format(string, sizeof string, "%drd place",raceplace);
						        break;
						    }
						    else
						    {
						        format(string, sizeof string, "%dth place",raceplace);
						        break;
						    }
						}
						maxCps +=1;
	                	rz_p = -60.680038;
	                	offX_p = -SpeedoOffSet[GetVehicleModel(GetPlayerVehicleID(theplayer))-400][1];
	                    if(DMPlayerInfo[theplayer][rFinished] == 0)
	                    {
							if(DMPlayerInfo[theplayer][cRaceCP] < MAX_DM_CP)
								format(string, sizeof string, "{%s}%s\n{FFFFFF}%d/%d",PlayerInfo[playerid][SpeedoCol],string,DMPlayerInfo[theplayer][cRaceCP],maxCps);
					    	else
								format(string, sizeof string, "{%s}%s\n{FFFFFF}%d/%d",PlayerInfo[playerid][SpeedoCol],string,maxCps-1,maxCps);
						}
						else
							format(string, sizeof string, "{%s}Finished",PlayerInfo[playerid][SpeedoCol]);
				    	SetDynamicObjectMaterialText(PlayerInfo[playerid][RacePlaceObject], 0, string, OBJECT_MATERIAL_SIZE_256x128,
							"Arial", floatround(SpeedoOffSet[GetVehicleModel(GetPlayerVehicleID(theplayer))-400][0]), 0, 0xFFFF8200, 0, OBJECT_MATERIAL_TEXT_ALIGN_LEFT);
					}
				}
				if(PlayerInfo[playerid][SpeedoReset] == 1)
				{
					AttachDynamicObjectToVehicle(
						PlayerInfo[playerid][SpeedoObject],
						GetPlayerVehicleID(theplayer),
						offX,
					    SpeedoOffSet[GetVehicleModel(GetPlayerVehicleID(theplayer))-400][2],
					    SpeedoOffSet[GetVehicleModel(GetPlayerVehicleID(theplayer))-400][3],
					    SpeedoOffSet[GetVehicleModel(GetPlayerVehicleID(theplayer))-400][4],
					    SpeedoOffSet[GetVehicleModel(GetPlayerVehicleID(theplayer))-400][5],
					    rz);
	                if((PlayerInfo[theplayer][PlayerMode] == DM && DMMAPInfo[Type] == DM_TYPE_RACE) || PlayerInfo[theplayer][PlayerMode] == TRP)
					{
					    AttachDynamicObjectToVehicle(
							PlayerInfo[playerid][RacePlaceObject],
							GetPlayerVehicleID(theplayer),
							offX_p,
						    SpeedoOffSet[GetVehicleModel(GetPlayerVehicleID(theplayer))-400][2],
						    SpeedoOffSet[GetVehicleModel(GetPlayerVehicleID(theplayer))-400][3],
						    SpeedoOffSet[GetVehicleModel(GetPlayerVehicleID(theplayer))-400][4],
						    SpeedoOffSet[GetVehicleModel(GetPlayerVehicleID(theplayer))-400][5],
						    rz_p);
					}
	                PlayerInfo[playerid][SpeedoReset] = 0;
				}
			}
		}
	}
	return 1;
}
forward CheckRacePositions();
public CheckRacePositions()
{
    if(DMMAPInfo[dStarted] == 1 && DMMAPInfo[Type] == DM_TYPE_RACE && DMMapAlivePlayers() > 0)
	{
	    if(DMMapAlivePlayers() > 1)
		{
		    #if defined RACE_CHECK_DISTANCE
		    new maxCPID;
		    forLoopR(c,MAX_DM_CP-1,-1)
			{
			    if(DMMAPInfo[cExists][c] == 1)
			    {
		            maxCPID = c;
		            break;
				}
			}
			#endif
			forLoop(u, MAX_PLAYERS)
			{
		    	RACE_highCP[u] = 0;
		    	RACE_highCPID[u] = -1;
		    	#if defined RACE_CHECK_DISTANCE
		    	forLoop(i, MAX_DM_CP)
				{
				    RACE_lowDis[i][u]=9999999;
				    RACE_lowDisID[i][u]=-1;
				}
				#endif
			}
			#if defined RACE_CHECK_DISTANCE
			forLoop(i, MAX_PLAYERS)
			{
				DMPlayerInfo[i][cPSame] = -1;
			}
			#endif
			forLoop(i, MAX_PLAYERS)
			{
				if(IsPlayerConnected(i) && DMPlayerInfo[i][Alive] == 1 &&
					PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][PlayerMode] == DM && !IsPlayerNPC(i))
				{
				    new playercp = DMPlayerInfo[i][cRaceCP];
					forLoop(u, MAX_PLAYERS)
					{
					    if(playercp >= RACE_highCP[u])
					    {
                            forLoopR(y,MAX_PLAYERS-1,u)
					        {
					            RACE_highCP[y] = RACE_highCP[y-1];
					            RACE_highCPID[y] = RACE_highCPID[y-1];
					        }
					        RACE_highCP[u] = playercp;
					        RACE_highCPID[u] = i;
					        playercp=-1;
					    }
					    if(playercp == RACE_highCP[u] && u < MAX_PLAYERS-1)
					    {
					        forLoopR(y,MAX_PLAYERS-1,u)
					        {
					            RACE_highCP[y] = RACE_highCP[y-1];
					            RACE_highCPID[y] = RACE_highCPID[y-1];//getting p id of the previous
					        }
					        RACE_highCP[u+1] = playercp;
					        RACE_highCPID[u+1] = i;//storing the playerid
					        playercp=-1;
					    }
					}
				}
			}
			forLoop(i, MAX_PLAYERS)
			{
			    if(IsPlayerConnected(i) && DMPlayerInfo[i][Alive] == 1 &&
					PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][PlayerMode] == DM && !IsPlayerNPC(i))
				{
					//assigning the postion to player
				    forLoop(u, MAX_PLAYERS)
					{
				    	if(i == RACE_highCPID[u])
				    	{
			                DMPlayerInfo[i][cRacePos] = u+1;
				    	    break;
				    	}
					}
					#if defined RACE_CHECK_DISTANCE
					//cheking if player is in the same CP
					if(DMPlayerInfo[i][rFinished] == 0)
					{
						forLoop(u, MAX_PLAYERS)
						{
						    if(IsPlayerConnected(u) && u != i && DMPlayerInfo[u][Alive] == 1 &&
								PlayerInfo[u][Spawned] == 1 && DMPlayerInfo[u][rFinished] == 0 && PlayerInfo[u][PlayerMode] == DM && !IsPlayerNPC(u))
							{
						    	if(DMPlayerInfo[i][cRaceCP] == DMPlayerInfo[u][cRaceCP])
						    	{
					                DMPlayerInfo[i][cPSame] = DMPlayerInfo[i][cRaceCP];
						    	    break;
						    	}
					    	}
						}
					}
					#endif
				}
			}
			#if defined RACE_CHECK_DISTANCE
			forLoop(i, MAX_PLAYERS)
			{
			    if(IsPlayerConnected(i) && DMPlayerInfo[i][Alive] == 1 &&
					PlayerInfo[i][Spawned] == 1 && DMPlayerInfo[i][rFinished] == 0 && PlayerInfo[i][PlayerMode] == DM && !IsPlayerNPC(i))
				{
				    if(DMPlayerInfo[i][cPSame] != -1)
				    {
				        new cid = DMPlayerInfo[i][cRaceCP];
				        if(cid >= MAX_DM_CP) cid = maxCPID;

					    new playerdis = GetDistanceToPoint(i,DMMAPInfo[cX][cid], DMMAPInfo[cY][cid], DMMAPInfo[cZ][cid]);
					    forLoop(u, MAX_PLAYERS)//players??
						{
						    if(playerdis <= RACE_lowDis[cid][u])
						    {
						        forLoopR(y,MAX_PLAYERS-1,u)
						        {
						            RACE_lowDis[cid][y] = RACE_lowDis[cid][y-1];
						            RACE_lowDisID[cid][y] = RACE_lowDisID[cid][y-1];
						        }
						        RACE_lowDis[cid][u] = playerdis;
						        RACE_lowDisID[cid][u] = i;
						        playerdis=99999999;
						    }
						    if(playerdis == RACE_lowDis[cid][u] && u < MAX_PLAYERS-1)
						    {
						        forLoopR(y,MAX_PLAYERS-1,u)
						        {
						            RACE_lowDis[cid][y] = RACE_lowDis[cid][y-1];
						            RACE_lowDisID[cid][y] = RACE_lowDisID[cid][y-1];//getting p id of the previous
							    }
						        RACE_lowDis[cid][u+1] = playerdis;
						        RACE_lowDisID[cid][u+1] = i;//storing the playerid
						        playerdis=99999999;
						    }
						}
					}
				}
			}
			forLoop(i, MAX_PLAYERS)
			{
			    if(IsPlayerConnected(i) && DMPlayerInfo[i][Alive] == 1 &&
					PlayerInfo[i][Spawned] == 1 && DMPlayerInfo[i][rFinished] == 0 && PlayerInfo[i][PlayerMode] == DM && !IsPlayerNPC(i))
				{
					//assigning the postion to player
					new cid = DMPlayerInfo[i][cPSame], rpos;
					if(cid != -1)
				    {
						forLoop(u, MAX_PLAYERS)
						{
						    if(IsPlayerConnected(u) && u != i && DMPlayerInfo[u][Alive] == 1 &&
								PlayerInfo[u][Spawned] == 1 && PlayerInfo[u][PlayerMode] == DM && !IsPlayerNPC(u))
							{
						    	if(DMPlayerInfo[i][cRaceCP] < DMPlayerInfo[u][cRaceCP])
						    	{
						    	    rpos++;
						    	}
							}
						}
						forLoop(u, MAX_PLAYERS)
						{
					    	if(i == RACE_lowDisID[cid][u])
					    	{
				                DMPlayerInfo[i][cRacePos] = rpos+u+1;
					    	    break;
					    	}
						}
					}
				}
			}
			#endif
		}
	    UpdateDeathBoardDM(0);
	}
}

CMD:speedo(playerid) {
    if(!PlayerInfo[playerid][Spawned] || !PlayerInfo[playerid][MainMenu] || !PlayerInfo[playerid][PlayerOptionSelected])return SendClientMessage(playerid,blue,"{FF0000}Error:{FFFFFF} You cannot use this comamnd now.");
    ShowPlayerDialog(playerid, SP_MENU, DIALOG_STYLE_LIST, "Speedoo", SP_MENU_STRING, "Select", "Exit");
	return 1;
}
CMD:tt(playerid) {
    if(!PlayerInfo[playerid][Spawned] || !PlayerInfo[playerid][MainMenu] || !PlayerInfo[playerid][PlayerOptionSelected])return SendClientMessage(playerid,blue,"{FF0000}Error:{FFFFFF} You cannot use this comamnd now.");
    if(!(PlayerInfo[playerid][PlayerMode] == PJ  || PlayerInfo[playerid][PlayerMode] == DM))return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You cannot use this command in this mode.");
    if(PlayerInfo[playerid][PlayerMode] == DM)
	{
	    if(DMMAPInfo[Type] == DM_TYPE_DD)
	        return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You cannot use this command on DD maps.");
		ShowHideDMTopTimes(playerid);
	}
    if(PlayerInfo[playerid][PlayerMode] == PJ)	ShowHidePJTopTimes(playerid);
	return 1;
}
CMD:db(playerid) {
    if(!PlayerInfo[playerid][Spawned] || !PlayerInfo[playerid][MainMenu] || !PlayerInfo[playerid][PlayerOptionSelected])return SendClientMessage(playerid,blue,"{FF0000}Error:{FFFFFF} You cannot use this comamnd now.");
    if(!(PlayerInfo[playerid][PlayerMode] == PJ  || PlayerInfo[playerid][PlayerMode] == DM))return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You cannot use this command in this mode.");
    if(PlayerInfo[playerid][PlayerMode] == DM)
	{
        //if(DMMAPInfo[Type] == DM_TYPE_RACE)
        //    return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} There is no death board in a Race map.");
		ShowHideDMDeathBoard(playerid);
	}
	return 1;
}
CMD:pinfo(playerid)
{
	if(ServerInfo[pInfoState] == 0)return SendClientMessage(playerid,blue,"{FF0000}Error:{FFFFFF} This comamnd has been disabled for now.");
    if(!PlayerInfo[playerid][Spawned] || !PlayerInfo[playerid][MainMenu] || !PlayerInfo[playerid][PlayerOptionSelected])
		return SendClientMessage(playerid,blue,"{FF0000}Error:{FFFFFF} You cannot use this comamnd now.");
    ShowHidepInfo(playerid);
	return 1;
}
CMD:ks(playerid) {
    if(!PlayerInfo[playerid][Spawned] || !PlayerInfo[playerid][MainMenu] || !PlayerInfo[playerid][PlayerOptionSelected])return SendClientMessage(playerid,blue,"{FF0000}Error:{FFFFFF} You cannot use this comamnd now.");
    ShowHidekSpree(playerid);
	return 1;
}

CMD:kill(playerid)
{
    if(!isAllowedToChangeMode(playerid, false))return 1;
    if(IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,blue,"{FF0000}Error:{FFFFFF} You cannot use this comamnd in any vehicle");
    SetHealth(playerid,0.0);
	return 1;
}

CMD:ubound(playerid,params[]) {
 	if(PlayerInfo[playerid][Level] >= 4) {
		new player1,string[128];
   		if (sscanf(params, "d",player1)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /ubound <playerid>");

	 	if(IsPlayerConnected(player1) && player1 != INVALID_PLAYER_ID) {
			SetPlayerWorldBounds(player1, 20000.0000, -20000.0000, 20000.0000, -20000.0000);
			format(string,sizeof(string),"Notice:{FFFFFF} You have removed %s's world boundaries", PlayerInfo[player1][Name]);
			return SendClientMessage(playerid,blue,string);
		} else return SendClientMessage(playerid, red, "{FF0000}Error:{FFFFFF} Player is not connected");
	} else return 0;
}
CMD:notk(playerid) {
 	if(PlayerInfo[playerid][Level] == 0)return 0;
	SendMessageToAll(false, red1,"{FFFFFF}[HELPER]{FF0000} No team killing or you get jailed/kicked.");
	return 1;
}
CMD:rthem(playerid) {
	if(PlayerInfo[playerid][Level] == 0)return 0;
	SendMessageToAll(true, red1,"{FFFFFF}[HELPER]{FF0000} Use '/report <id> <reason>' to report team attackers/cheaters/abusers/hackers.");
	return 1;
}
CMD:beright(playerid) {
 	if(PlayerInfo[playerid][Level] == 0)return 0;
	SendMessageToAll(true, red1,"{FFFFFF}[HELPER]{FF0000} When using /report, use a legit reason.");
	return 1;
}

CMD:nosk(playerid) {
 	if(PlayerInfo[playerid][Level] == 0)return 0;
	SendMessageToAll(false, red1,"{FFFFFF}[HELPER]{FF0000} No spawn killing/shooting or you get jailed/kicked.");
	return 1;
}

CMD:getinfo(playerid,params[]) {
    if(PlayerInfo[playerid][Level] >= 4) {
	    new player1,string[128],finalstring[1500];
   		if (sscanf(params, "d",player1)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /getinfo <playerid>");
		if(IsPlayerConnected(player1) && player1 != INVALID_PLAYER_ID) {
		    if(PlayerInfo[player1][Level] > PlayerInfo[playerid][Level]) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} It is not necessary for this player.");
			new Float:player1health, Float:player1armour, tmp2[50], Float:x, Float:y, Float:z,
				year, month, day, P1Jailed[4], P1Frozen[4], P1Logged[4], P1Register[4], RegDate[56], TimesOn;

			GetPlayerHealth(player1,player1health);
			GetPlayerArmour(player1,player1armour);
	    	GetPlayerPos(player1,x,y,z);
			getdate(year, month, day);

			if(PlayerInfo[player1][Jailed] > 0) P1Jailed = "Yes"; else P1Jailed = "No";
			if(PlayerInfo[player1][Frozen] > 0) P1Frozen = "Yes"; else P1Frozen = "No";
			if(PlayerInfo[player1][LoggedIn]) P1Logged = "Yes"; else P1Logged = "No";
			if(PlayerInfo[player1][Registered])
			{
				P1Register = "Yes";
				format(RegDate,50,"%s",PlayerInfo[playerid][RegisterDate]);
			}
			else
			{
				P1Register = "No";
			    tmp2 = "Never";
			    RegDate = "N/A";
			}
			TimesOn = PlayerInfo[playerid][TimesOnServer];

		    new Sum, Average, w;
			new loop_breaker;
			while (w < PING_MAX_EXCEEDS)
			{
				//printf("loop at getinfo, counter val %d",loop_breaker);
				if(breakLoop(++loop_breaker, "getinfo"))break;
				Sum += PlayerInfo[player1][pPing][w];
				w++;
			}
			Average = (Sum / PING_MAX_EXCEEDS);
	  		format(string, sizeof(string),"{FFFFFF}Name: %s  ID: %d", PlayerInfo[player1][Name], player1);
			strcat(finalstring,string);
		  	format(string, sizeof(string),"\nHealth: %d  Armour: %d  Cash: %d  Skin: %d  IP: %s  \nPing: %d  Average Ping: %d",floatround(player1health),floatround(player1armour),
			GetThePlayerMoney(player1),GetPlayerSkin(player1),getThePlayerIP(player1),GetPlayerPing(player1), Average );
			strcat(finalstring,string);
		  	format(string, sizeof(string),"\nWarnings: %d Interior: %d  Virtual World: %d  X: %0.1f  Y: %0.1f  Z: %0.1f",PlayerInfo[player1][Warnings], GetPlayerInterior(player1), GetPlayerVirtualWorld(player1),Float:x,Float:y,Float:z);
			strcat(finalstring,string);
		  	format(string, sizeof(string),"\nTimes On Server: %d AdminLevel: %d VIP: %s \nMoney: $%d Time: %s", TimesOn, PlayerInfo[player1][Level],YesNo[PlayerInfo[player1][VIP]],GetThePlayerMoney(player1), returnPlayerTime(player1));
			strcat(finalstring,string);
		  	format(string, sizeof(string),"\nRegistered: %s  Logged In: %s  In Jail: %s  Frozen: %s", P1Register, P1Logged, P1Jailed, P1Frozen );
			strcat(finalstring,string);
		  	format(string, sizeof(string),"\nRegister Date: %s  Todays Date: %d/%d/%d", RegDate, day,month,year );
			strcat(finalstring,string);
		  	if(IsPlayerInAnyVehicle(player1)) {
				new Float:VHealth, carid = GetPlayerVehicleID(player1); GetVehicleHealth(carid,VHealth);
				format(string, sizeof(string),"\nVehicle Info: ID: %d  Model: %d  Vehicle Name: %s  Vehicle Health: %d",carid, GetVehicleModel(carid), VehicleNames[GetVehicleModel(carid)-400], floatround(VHealth) );
    			strcat(finalstring,string);
			}else strcat(finalstring,"\nVehicle Info: Player is on foot.");

			new slot, ammo, weap, Count, WeapName[24], WeapSTR[128], p; WeapSTR = "\nWeapons: ";
			for (slot = 0; slot < 14; slot++) {	GetPlayerWeaponData(player1, slot, weap, ammo); if( ammo != 0 && weap != 0) Count++; }
			if(Count < 1) strcat(finalstring,"\nWeapons: Player has no weapons");
			else {
				for (slot = 0; slot < 14; slot++)
				{
					GetPlayerWeaponData(player1, slot, weap, ammo);
					if (ammo > 0 && weap > 0)
					{
						GetWeaponName(weap, WeapName, sizeof(WeapName) );
						if(weap == 18) WeapName = "Molotov";
						if (ammo == 65535 || ammo == 1) format(WeapSTR,sizeof(WeapSTR),"%s%s (1)",WeapSTR, WeapName);
						else format(WeapSTR,sizeof(WeapSTR),"%s%s (%d)",WeapSTR, WeapName, ammo);
						p++;
						if(p >= 5) { strcat(finalstring,WeapSTR); format(WeapSTR, sizeof(WeapSTR), "\n"); p = 0;
						} else format(WeapSTR, sizeof(WeapSTR), "%s,  ", WeapSTR);
					}
				}
				if(p <= 4 && p > 0) {
					string[strlen(string)-3] = '.';
				    strcat(finalstring,WeapSTR);
				}
			}
			ShowPlayerDialog(playerid, 4511, DIALOG_STYLE_MSGBOX,"INFO MSG", finalstring, "OK", "");
			return 1;
		} else return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Player is not connected");
	} else return 0;
}


CMD:vipcmds(playerid) {
	if(PlayerInfo[playerid][VIP] == 0)return 0;
    new string2[120];
	strcat(string2,"\n{33FF33} /vfix /healme /vipsay /skin /vweaps - '& vip chat'");
	ShowPlayerDialog(playerid, 4511, DIALOG_STYLE_MSGBOX,"VIP CMDs List", string2, "Close", "");
	return 1;
}
CMD:vweaps(playerid) {
	if(PlayerInfo[playerid][VIP] == 0)return 0;
    if(PlayerInfo[playerid][PlayerMode] == TRP)return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command in this mode..");
    new string2[200];
	strcat(string2,"\n{FFFFFF}/vgolf /vbrass /vknife /vbat /vshovel /vpoolstick");
	strcat(string2,"\n/vkatana /vsaw /dildo /vflower /vcane /vsniper /vshotgun /vspraycan");
	strcat(string2,"\n/vcamera /para /vsilenced /vteargass /vfextinguisher");
	ShowPlayerDialog(playerid, 4511, DIALOG_STYLE_MSGBOX,"VIP CMDs List", string2, "Close", "");
	return 1;
}

CMD:vgolf(playerid) {
	if(PlayerInfo[playerid][VIP] == 0)return 0;
	if(PlayerInfo[playerid][PlayerMode] == TRP)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You cannot use this command in this mode..");
	GiveWeapon(playerid,2,1);
	return 1;
}
CMD:vfextinguisher(playerid) {
	if(PlayerInfo[playerid][VIP] == 0)return 0;
	if(PlayerInfo[playerid][PlayerMode] == TRP)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You cannot use this command in this mode..");
    GiveWeapon(playerid,42,150);
	return 1;
}
CMD:vspraycan(playerid) {
	if(PlayerInfo[playerid][VIP] == 0)return 0;
	if(PlayerInfo[playerid][PlayerMode] == TRP)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You cannot use this command in this mode..");
    GiveWeapon(playerid,41,150);
	return 1;
}
CMD:vbrass(playerid) {
	if(PlayerInfo[playerid][VIP] == 0)return 0;
	if(PlayerInfo[playerid][PlayerMode] == TRP)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You cannot use this command in this mode..");
    GiveWeapon(playerid,1,1);
	return 1;
}
CMD:vknife(playerid) {
	if(PlayerInfo[playerid][VIP] == 0)return 0;
	if(PlayerInfo[playerid][PlayerMode] == TRP)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You cannot use this command in this mode..");
    GiveWeapon(playerid,4,1);
	return 1;
}
CMD:vbat(playerid) {
	if(PlayerInfo[playerid][VIP] == 0)return 0;
	if(PlayerInfo[playerid][PlayerMode] == TRP)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You cannot use this command in this mode..");
    GiveWeapon(playerid,5,1);
	return 1;
}
CMD:vshovel(playerid) {
	if(PlayerInfo[playerid][VIP] == 0)return 0;
	if(PlayerInfo[playerid][PlayerMode] == TRP)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You cannot use this command in this mode..");
    GiveWeapon(playerid,6,1);
	return 1;
}
CMD:vpoolstick(playerid) {
	if(PlayerInfo[playerid][VIP] == 0)return 0;
	if(PlayerInfo[playerid][PlayerMode] == TRP)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You cannot use this command in this mode..");
    GiveWeapon(playerid,7,1);
	return 1;
}
CMD:vkatana(playerid) {
	if(PlayerInfo[playerid][VIP] == 0)return 0;
	if(PlayerInfo[playerid][PlayerMode] == TRP)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You cannot use this command in this mode..");
    GiveWeapon(playerid,8,1);
	return 1;
}
CMD:vsaw(playerid) {
	if(PlayerInfo[playerid][VIP] == 0)return 0;
	if(PlayerInfo[playerid][PlayerMode] == TRP)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You cannot use this command in this mode..");
    GiveWeapon(playerid,9,1);
	return 1;
}
CMD:dildo(playerid) {
	if(PlayerInfo[playerid][VIP] == 0)return 0;
	if(PlayerInfo[playerid][PlayerMode] == TRP)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You cannot use this command in this mode..");
    GiveWeapon(playerid,10,1);
	return 1;
}
CMD:vflower(playerid) {
	if(PlayerInfo[playerid][VIP] == 0)return 0;
	if(PlayerInfo[playerid][PlayerMode] == TRP)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You cannot use this command in this mode..");
    GiveWeapon(playerid,14,1);
	return 1;
}
CMD:vcane(playerid) {
	if(PlayerInfo[playerid][VIP] == 0)return 0;
	if(PlayerInfo[playerid][PlayerMode] == TRP)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You cannot use this command in this mode..");
    GiveWeapon(playerid,15,1);
	return 1;
}
CMD:vsniper(playerid) {
	if(PlayerInfo[playerid][VIP] == 0)return 0;
	if(PlayerInfo[playerid][PlayerMode] == TRP)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You cannot use this command in this mode..");
    GiveWeapon(playerid,34,100);
	return 1;
}
CMD:vshotgun(playerid) {
	if(PlayerInfo[playerid][VIP] == 0)return 0;
	if(PlayerInfo[playerid][PlayerMode] == TRP)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You cannot use this command in this mode..");
    GiveWeapon(playerid,25,100);
	return 1;
}
CMD:vcamera(playerid) {
	if(PlayerInfo[playerid][VIP] == 0)return 0;
	if(PlayerInfo[playerid][PlayerMode] == TRP)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You cannot use this command in this mode..");
    GiveWeapon(playerid,43,100);
	return 1;
}
CMD:vsilenced(playerid) {
	if(PlayerInfo[playerid][VIP] == 0)return 0;
	if(PlayerInfo[playerid][PlayerMode] == TRP)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You cannot use this command in this mode..");
    GiveWeapon(playerid,23,100);
	return 1;
}
CMD:vteargass(playerid) {
	if(PlayerInfo[playerid][VIP] == 0)return 0;
	if(PlayerInfo[playerid][PlayerMode] == TRP)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You cannot use this command in this mode..");
    GiveWeapon(playerid,17,10);
	return 1;
}

CMD:fix(playerid,params[]) {

	if(PlayerInfo[playerid][Level] >= 4)
	{
	    new string[128],player1,name[50];
	    sscanf(params, "s[50]",name);
		if(!strlen(name)) player1 = playerid;
		else
		{
		    if(!IsNumericForID(name))  player1 = ReturnPlayerID(name); else player1 = strval(name);
		}
	    if(player1 == playerid)return RepairVehicle(GetPlayerVehicleID(player1));
	    if(IsPlayerConnected(player1) && player1 != INVALID_PLAYER_ID && player1 != playerid) {
			if (IsPlayerInAnyVehicle(player1)) {
				RepairVehicle(GetPlayerVehicleID(player1));
				format(string,sizeof(string),"Notice:{FFFFFF} You have fixed %s's vehicle", PlayerInfo[player1][Name]);
				return SendClientMessage(playerid, blue,string);
			} else return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} This player isn't in a vehicle");
		} else return SendClientMessage(playerid, red, "{FF0000}Error:{FFFFFF} Player is not connected");
	} else return 0;
}
CMD:nos(playerid)
{
    if(PlayerInfo[playerid][PlayerMode] != STUNT)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be in Stunt&Fun mode to use this command.");
	if(SFPlayerInfo[playerid][Event] > 0 && PlayerInfo[playerid][PlayerMode] == STUNT) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command at this moment. You are in an event.");
	if(!IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,blue,"{FF0000}Error:{FFFFFF} You cannot use this comamnd on foot.");
	if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING || GetPlayerState(playerid) == PLAYER_STATE_WASTED)return SendClientMessage(playerid,blue,"{FF0000}Error:{FFFFFF} You cannot use this comamnd now.");
	AddVehicleComponent(GetPlayerVehicleID(playerid), 1010);
	PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
	return 1;
}
CMD:tunecar(playerid,params[]) {
    if(PlayerInfo[playerid][Jailed] > 0) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command in jail");
    if(PlayerInfo[playerid][Spawned] == 0) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command at this moment");
	if(PlayerInfo[playerid][PlayerMode] == STUNT && SFPlayerInfo[playerid][Event] > 0) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command at this moment. You are in an event.");
	if(!(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)) return SendClientMessage( playerid,red1,"{FF0000}Error:{FFFFFF} You must be in a vehicle(driver) to use this command.");
	if(PlayerInfo[playerid][PlayerMode] == FFA || PlayerInfo[playerid][PlayerMode] == STUNT )
    {
        if(SFPlayerInfo[playerid][Spiderman] == 1 && PlayerInfo[playerid][PlayerMode] == STUNT) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command at this moment. Disable /spiderman first.");
		if(SFPlayerInfo[playerid][Superman] == 1 && PlayerInfo[playerid][PlayerMode] == STUNT) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command at this moment. Disable /superman first.");
		if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING || GetPlayerState(playerid) == PLAYER_STATE_WASTED)return SendClientMessage(playerid,blue,"{FF0000}Error:{FFFFFF} You cannot use this comamnd now.");
		//if(!IsModCar(playerid)) return SendClientMessage( playerid,red1,"{FF0000}Error:{FFFFFF} This vehicle cannot be tuned.");
        ShowPlayerDialog(playerid, TUNE_MENU_MAIN, DIALOG_STYLE_LIST, "Tune you shitty car",TUNE_MENU_STR, "Select", "Exit");
	}else return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be in Stunt&Fun, or FFA mode.");
	return 1;
}

CMD:skins(playerid,params[]) {
    if(PlayerInfo[playerid][Jailed] > 0) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command in jail");
    if(PlayerInfo[playerid][Spawned] == 0) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command at this moment");
	if(PlayerInfo[playerid][PlayerMode] == STUNT && SFPlayerInfo[playerid][Event] > 0) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command at this moment. You are in an event.");
	if(GetPlayerInterior(playerid) > 0)return SendClientMessage(playerid,blue,"{FF0000}Error:{FFFFFF} You cannot use this comamnd in an interior");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage( playerid,red1,"{FF0000}Error:{FFFFFF} You cannot change skin inside a car.");
	if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING || GetPlayerState(playerid) == PLAYER_STATE_WASTED)return SendClientMessage(playerid,blue,"{FF0000}Error:{FFFFFF} You cannot use this comamnd now.");
	if(PlayerInfo[playerid][PlayerMode] == FFA || PlayerInfo[playerid][PlayerMode] == STUNT )
    {
        if(SFPlayerInfo[playerid][Spiderman] == 1 && PlayerInfo[playerid][PlayerMode] == STUNT) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command at this moment. Disable /spiderman first.");
		if(SFPlayerInfo[playerid][Superman] == 1 && PlayerInfo[playerid][PlayerMode] == STUNT) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command at this moment. Disable /superman first.");
		OtherDeathDisconnect(playerid,1,0);
        new Float:x,Float:y,Float:z,Float:ang;
		GetPlayerPos(playerid,x,y,z);
		GetPlayerFacingAngle(playerid,ang);
        PlayerInfo[playerid][SkinsCMD][0] = 1;
		PlayerInfo[playerid][SkinsCMD][1] = floatround(x);
		PlayerInfo[playerid][SkinsCMD][2] = floatround(y);
		PlayerInfo[playerid][SkinsCMD][3] = floatround(z);
		PlayerInfo[playerid][SkinsCMD][4] = floatround(ang);
        HideTDs(playerid);
		PlayerInfo[playerid][MainMenu] = 1;
		PlayerInfo[playerid][Option] = GetPlayerSkin(playerid);
		PlayerInfo[playerid][Spawned] = 0;
		PlayerInfo[playerid][PlayerOptionSelected] = 0;
		TogglePlayerControllable(playerid,false);
		TextDrawShowForPlayer(playerid,ServerInfo[Left_TD]);
		TextDrawShowForPlayer(playerid,ServerInfo[Right_TD]);
		TextDrawShowForPlayer(playerid,ServerInfo[Spawn_TD]);
		SelectTextDraw(playerid, SELECT_TEXT_SKIN_CAR_DRAW);
		PlayerTextDrawShow(playerid,PlayerInfo[playerid][InfoText]);
		OptionSelectionSetup(playerid);
	}else return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be in Stunt&Fun, or FFA mode.");
	return 1;
}
CMD:skin(playerid,params[]) {
    if(PlayerInfo[playerid][Jailed] > 0) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command in jail");
    if(PlayerInfo[playerid][Spawned] == 0) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command at this moment");
	//if((!PlayerInfo[playerid][VIP] && PlayerInfo[playerid][PlayerMode] == TW) || (!PlayerInfo[playerid][VIP] && PlayerInfo[playerid][PlayerMode] == TL))return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command at this moment.");
	if(PlayerInfo[playerid][PlayerMode] == STUNT && SFPlayerInfo[playerid][Event] > 0) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command at this moment. You are in an event.");
	if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING || GetPlayerState(playerid) == PLAYER_STATE_WASTED)return SendClientMessage(playerid,blue,"{FF0000}Error:{FFFFFF} You cannot use this comamnd now.");
	if(IsPlayerInAnyVehicle(playerid) && PlayerInfo[playerid][PlayerMode] != DM) return SendClientMessage( playerid,red1,"{FF0000}Error:{FFFFFF} You cannot change skin inside a car.");
	new var;
	if(sscanf(params, "d",var))return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /skin <skinid>");
	if(PlayerInfo[playerid][PlayerMode] == FFA || PlayerInfo[playerid][PlayerMode] == STUNT || PlayerInfo[playerid][PlayerMode] == MOVIES || PlayerInfo[playerid][PlayerMode] == CO || PlayerInfo[playerid][PlayerMode] == CTF
		|| PlayerInfo[playerid][PlayerMode] == PJ || PlayerInfo[playerid][PlayerMode] == DM  || PlayerInfo[playerid][PlayerMode] == GK ||(PlayerInfo[playerid][VIP] && PlayerInfo[playerid][PlayerMode] == TW) ||
			(PlayerInfo[playerid][VIP] && PlayerInfo[playerid][PlayerMode] == TL) || PlayerInfo[playerid][Level] >= 1)
    {
		if(TWPlayerInfo[playerid][Class] == LEADER && PlayerInfo[playerid][PlayerMode] == TW)return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You are a leader, you cannot use this command.");
		if(var == 217 || var == 211|| var > 299 || var <0) return SendClientMessage(playerid, red, "{FF0000}Error:{FFFFFF} Invaild Skin ID");
		if(PlayerInfo[playerid][PlayerMode] == CO)
		{
		    if(PlayerInfo[playerid][pTeam] == COP)
		    {
		        if(!(var >= 163 && var <= 166) && !(var >= 265 && var <= 267) && !(var >= 274 && var <= 288))
					return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} Choose a cop skin.");
		    }
		    if(PlayerInfo[playerid][pTeam] == CRIMINAL)
		    {
		        if((var >= 163 && var <= 166) || (var >= 265 && var <= 267) ||
		    	(var >= 274 && var <= 288)) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} Choose another skin.");
		    }
		}
		if(PlayerInfo[playerid][PlayerMode] == PJ)PJPlayerInfo[playerid][Skin] = var;
		if(PlayerInfo[playerid][PlayerMode] == DM)
		{
	        DMPlayerInfo[playerid][Skin] = var;
			SendClientMessage(playerid, green1, "Notice:{FFFFFF} New skin will be set next map.");
		}
		else SetPlayerSkin(playerid,var);
		PlayerInfo[playerid][SelectedSkin] = var;
	}else return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You cannot use this command in this mode.");
	return 1;
}

CMD:flare(playerid,params[]) {
    if(PlayerInfo[playerid][PlayerMode] != PJ) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command in this mode.");
	if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING || GetPlayerState(playerid) == PLAYER_STATE_WASTED)return SendClientMessage(playerid,blue,"{FF0000}Error:{FFFFFF} You cannot use this comamnd now.");
	if(GetPVarInt(playerid, "PJFlare") != 1)
    {
        SetPVarInt(playerid, "PJFlare", 1);
		SetPlayerAttachedObjectEx(playerid, 5, 18728,1,-0.730000,1.504000,-0.117998,82.900054,1.599998,0.000000,0.467999,0.621000,0.809000);
	}
	else
	{
	    SetPVarInt(playerid, "PJFlare", 2);
	    RemovePlayerAttachedObjectEx(playerid, 5);
	}
	return 1;
}

CMD:car(playerid,params[])
{
    if(PlayerInfo[playerid][Jailed] > 0) return
		SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command in jail");
	if(PlayerInfo[playerid][Spawned] == 0) return
		SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command in this moment");
	if(PlayerInfo[playerid][PlayerMode] == STUNT && SFPlayerInfo[playerid][Event] > 0) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command at this moment. You are in an event.");
	if(IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,blue,"{FF0000}Error:{FFFFFF} You cannot use this comamnd in any vehicle");
    if(GetPlayerInterior(playerid) > 0)return SendClientMessage(playerid,blue,"{FF0000}Error:{FFFFFF} You cannot use this comamnd in an interior");
	if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING || GetPlayerState(playerid) == PLAYER_STATE_WASTED)return SendClientMessage(playerid,blue,"{FF0000}Error:{FFFFFF} You cannot use this comamnd now.");
	if(PlayerInfo[playerid][PlayerMode] == FFA || PlayerInfo[playerid][PlayerMode] == STUNT)
    {
		if(SFPlayerInfo[playerid][Spiderman] == 1 && PlayerInfo[playerid][PlayerMode] == STUNT) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command at this moment. Disable /spiderman first.");
		if(SFPlayerInfo[playerid][Superman] == 1 && PlayerInfo[playerid][PlayerMode] == STUNT) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command at this moment. Disable /superman first.");
		new model[50],color[2],carid;
   		if (sscanf(params, "s[50]",model)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /car <model id/name> or use /cars");
		if(!IsNumericForID(model)) carid = GetVehicleModelIDFromName(model); else carid = strval(model);
		if(carid < 400 || carid > 611) return  SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} Invalid Vehicle ID");
		color[0] = random(126);color[1] = random(126);
	    if(PlayerInfo[playerid][PlayerMode] == STUNT)
		{
			if(carid == 435 || carid == 449 || carid == 450 || carid == 464 ||  carid == 537|| carid == 538||
			carid == 569|| carid == 570|| carid == 584|| carid == 591|| carid == 590 || carid == 476||carid == 432||carid == 425||carid == 520||carid == 447||carid == 430)
			return  SendClientMessage(playerid, red, "{FF0000}Error:{FFFFFF} Vehicle not allowed.");
		}
		if(PlayerInfo[playerid][PlayerMode] == FFA)
		{
			if(carid == 606 || carid == 607|| carid == 608|| carid == 610||carid == 611 || carid == 449 ||  carid == 537|| carid == 538||
				carid == 569|| carid == 570|| carid == 590 || carid == 501 || carid == 564 || carid == 594 || carid == 441 || carid == 464 || carid == 465)
					return  SendClientMessage(playerid, red, "{FF0000}Error:{FFFFFF} Vehicle not allowed.");
		}
		if(PlayerInfo[playerid][Vehicle] != -1) CarDeleter(PlayerInfo[playerid][Vehicle]);
	    PlayerInfo[playerid][Vehicle]=-1;
		new VehicleID,Float:X,Float:Y,Float:Z, Float:Angle,int1;	GetPlayerPos(playerid, X,Y,Z);	GetPlayerFacingAngle(playerid,Angle);   int1 = GetPlayerInterior(playerid);
		VehicleID = AddStaticVehicleEx(carid, X,Y,Z, Angle, color[0], color[1],999999999999999);
		SetVehicleVirtualWorld(VehicleID,GetPlayerVirtualWorld(playerid));
		SetVehicleNumberPlate(VehicleID, ServerInfo[lPlate]);
		PlacePlayerInVehicle(playerid,VehicleID,0);
		LinkVehicleToInterior(VehicleID,int1);
		PlayerInfo[playerid][Vehicle] = VehicleID;
		AddVehicleComponent(VehicleID, 1010);
		new string[128];
		format(string, sizeof(string), "Notice:{FFFFFF} You have spawned a %s (Model:%d) [Col: %d]  [Col2: %d] + NOS ", VehicleNames[carid-400], carid,color[0], color[1]);
		SendClientMessage(playerid,green1, string);
	}else return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be in Stunt&Fun or FFA mode to use this command.");
	return 1;
}

CMD:acar(playerid,params[]) {
	if(PlayerInfo[playerid][Level] >= 4) {
	    new model[50],color[2],car;
	    color[0]=-1,color[1]=-1;
   		if (sscanf(params, "s[50]",model)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /car <model id/name>");
		if(!IsNumericForID(model)) car = GetVehicleModelIDFromName(model); else car = strval(model);
		if(car < 400 || car > 611) return  SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} Invalid Vehicle ID");
		if(color[0] == -1) color[0] = random(126);
		if(color[1] == -1) color[1] = random(126);
	    new VehicleID,Float:X,Float:Y,Float:Z, Float:Angle,int1;	GetPlayerPos(playerid, X,Y,Z);	GetPlayerFacingAngle(playerid,Angle);   int1 = GetPlayerInterior(playerid);
		if(car == 538 || car == 537)VehicleID = AddStaticVehicleEx(car, X,Y,Z, Angle, color[0], color[1],999999999999999);
		else VehicleID = AddStaticVehicleEx(car, X,Y,Z, Angle, color[0], color[1],999999999999999);
		SetVehicleVirtualWorld(VehicleID,GetPlayerVirtualWorld(playerid));
		PlacePlayerInVehicle(playerid,VehicleID,0);
		LinkVehicleToInterior(VehicleID,int1);
		PlayerInfo[playerid][Vehicle] = VehicleID;
		PlayerInfo[playerid][SpeedoReset] = 1;
		return 1;
	} else return 0;
}

stock CarSelection(playerid)
{
	//printf("DEBUG CFONTROL CarSelection 1");
    PlayerInfo[playerid][cVehModel]=400;
    PlayerInfo[playerid][cSelVeh]=-1;
    PlayerInfo[playerid][Vehicle] = -1;
    SetPlayerInterior(playerid,0);
    PlayerInfo[playerid][Spawned] = 0;
    SetPlayerVirtualWorld(playerid, 1330+playerid);
    PlayerInfo[playerid][HasSelectedVeh] = 0;
    TogglePlayerControllable(playerid,false);
    HideTDs(playerid);
	TextDrawShowForPlayer(playerid,ServerInfo[Left_TD]);
	TextDrawShowForPlayer(playerid,ServerInfo[Right_TD]);
	TextDrawShowForPlayer(playerid,ServerInfo[Spawn_TD]);
	SelectTextDraw(playerid, SELECT_TEXT_SKIN_CAR_DRAW);
	PlayerTextDrawShow(playerid,PlayerInfo[playerid][InfoText]);
	SetupSelectedcar(playerid);
	//printf("DEBUG CFONTROL CarSelection 2");
}
stock SetupSelectedcar(playerid)
{
	//printf("DEBUG CFONTROL SetupSelectedcar 1");
    DestroyVehicle(PlayerInfo[playerid][cSelVeh]);
	PlayerInfo[playerid][cSelVeh]=AddStaticVehicleEx(PlayerInfo[playerid][cVehModel],1947.5392,-2311.7139,13.2747,146.4599,random(120),random(120),999999999999999);
    SetVehicleNumberPlate(PlayerInfo[playerid][cSelVeh], ServerInfo[lPlate]);
	SetVehicleVirtualWorld(PlayerInfo[playerid][cSelVeh],GetPlayerVirtualWorld(playerid));
    LinkVehicleToInterior(PlayerInfo[playerid][cSelVeh],0);
    PlacePlayerInVehicle(playerid,PlayerInfo[playerid][cSelVeh],0);
    AddVehicleComponent(PlayerInfo[playerid][cSelVeh], 1010);
	new str[164];
	format(str,164,"%s - %d",VehicleNames[PlayerInfo[playerid][cVehModel]-400],PlayerInfo[playerid][cVehModel]);
	PlayerTextDrawSetString(playerid, PlayerInfo[playerid][InfoText], str);
    SetPlayerCameraPos(playerid, 1947.7147,-2329.1738,14.5469);
	SetPlayerCameraLookAt(playerid, 1947.5392,-2311.7139,13.2747);
	//printf("DEBUG CFONTROL SetupSelectedcar 2");
}

SwitchToNextCar(playerid)
{
    if(++PlayerInfo[playerid][cVehModel] > 611)
		PlayerInfo[playerid][cVehModel]=400;

	new model = PlayerInfo[playerid][cVehModel];
	if(PlayerInfo[playerid][PlayerMode] == FFA)
	{
	    if(model == 577 || model == 592 || model == 460)model++;
		if(model == 449 || model == 590 || model == 594 || model == 564  ||
			model == 501 || model == 441 || model == 464)model++;
	    if(model == 537|| model == 538)model=539;
		if(model == 569|| model == 570)model=571;
		if(model == 464|| model == 465)model=467;
	    if(model == 606|| model == 607|| model == 608)model=609;
	    if(model == 610||model == 611)model=400;
	}
	if(PlayerInfo[playerid][PlayerMode] == STUNT)
	{
	    if(model == 577 || model == 592 || model == 460 || model == 430)model++;
	    if(model == 449 || model == 590 || model == 564 ||
			model == 501 || model == 441 || model == 464)model++;
	    if(model == 537|| model == 538)model=539;
		if(model == 569|| model == 570)model=571;
	    if(model == 591|| model == 590)model=592;
	    if(model == 435 || model == 441 || model == 584||
 			model == 553||model == 476||model == 432||model == 425||model == 520||model == 447)model++;
		if(model == 464|| model == 465)model=467;
	}
	PlayerPlaySound(playerid,1052,0.0,0.0,0.0);
	PlayerInfo[playerid][cVehModel] = model;
	SetupSelectedcar(playerid);
}

SwitchToPreviousCar(playerid)
{
    if(--PlayerInfo[playerid][cVehModel] < 400)
		PlayerInfo[playerid][cVehModel]=611;

	new model = PlayerInfo[playerid][cVehModel];
	if(PlayerInfo[playerid][PlayerMode] == FFA)
	{
	    if(model == 577 || model == 592 || model == 460)model--;
		if(model == 449 || model == 590 || model == 594 || model == 564 ||
			model == 501 || model == 441 || model == 464)model--;
	    if(model == 537|| model == 538)model=536;
		if(model == 569|| model == 570)model=568;
		if(model == 464|| model == 465)model=463;
	    if(model == 606|| model == 607|| model == 608)model=605;
	    if(model == 610||model == 611)model=609;

	}
	if(PlayerInfo[playerid][PlayerMode] == STUNT)
	{
        if(model == 577 || model == 592 || model == 460 || model == 430)model--;
		if(model == 449 || model == 590 || model == 564 ||
			model == 501 || model == 441 || model == 464)model--;
	    if(model == 537|| model == 538)model=536;
		if(model == 569|| model == 570)model=568;
		if(model == 591|| model == 590)model=589;
	    if(model == 435 || model == 441 || model == 584 ||
 			model == 553||model == 476||model == 432||model == 425||model == 520||model == 447)model--;
		if(model == 464|| model == 465)model=463;
	}
	PlayerPlaySound(playerid,1053,0.0,0.0,0.0);
	PlayerInfo[playerid][cVehModel] = model;
	SetupSelectedcar(playerid);
}

CMD:tele(playerid,params[]) {
    	new player[50],player1;
   		if (sscanf(params, "s[50]",player)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /tele <playerid/name>");
		if(!IsNumericForID(player))  player1 = ReturnPlayerID(player); else player1 = strval(player);
		if(player1 == INVALID_PLAYER_ID || !IsPlayerConnected(player1))
			return SendClientMessage(playerid, red, "{FF0000}Error:{FFFFFF} Player is not connected or is yourself");
	   	if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING || GetPlayerState(playerid) == PLAYER_STATE_WASTED)return SendClientMessage(playerid,blue,"{FF0000}Error:{FFFFFF} You cannot use this comamnd now.");
		if(PlayerInfo[playerid][Jailed] > 0) return
	    	SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command in jail");
	 	if(PlayerInfo[playerid][PlayerMode] != STUNT)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be in Stunt&Fun mode to use this command.");
		if(SFPlayerInfo[playerid][Event] > 0) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command at this moment. You are in an event.");
        //if(SFPlayerInfo[playerid][Superman] == 1) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command at this moment. Disable /superman first.");
		if(PlayerInfo[player1][PlayerMode] != STUNT)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} Player must be in Stunt&Fun mode.");
		if(SFPlayerInfo[player1][Event] > 0) return SendClientMessage(playerid,red1,"{FF0000}Error: {FFFFFF}Player is in an event.");
		if(SFPlayerInfo[player1][BlockTele] == 1) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} Player has blocked teleports to his position.");
        if(GetPlayerInterior(player1) > 0) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} Player is in an interior, cannot teleport to his position.");
        if(PlayerInfo[player1][Jailed] > 0 || !PlayerInfo[player1][MainMenu] || !PlayerInfo[player1][PlayerOptionSelected] || !PlayerInfo[player1][HasSelectedVeh] || PlayerInfo[player1][SkinsCMD][0])
	 		return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} Can't teleport to this player at this moment.");
    	if(IsPlayerConnected(player1) && player1 != INVALID_PLAYER_ID && player1 != playerid)
		{
		    if(GetPlayerState(player1) == PLAYER_STATE_SPECTATING)return SendClientMessage(playerid,blue,"{FF0000}Error:{FFFFFF} You cannot teleport to this player now.");
			ResetWeapons(playerid);
			if(SFPlayerInfo[playerid][Spiderman] == 1)
				GiveWeapon(playerid, 11, 1);
			new Float:x, Float:y, Float:z;	GetPlayerPos(player1,x,y,z); SetPlayerInterior(playerid,GetPlayerInterior(player1));
			SetPlayerVirtualWorld(playerid,GetPlayerVirtualWorld(player1));
			if(GetPlayerState(playerid) == 2) {
				SetVehiclePos(GetPlayerVehicleID(playerid),x,y,z+1);	LinkVehicleToInterior(GetPlayerVehicleID(playerid),GetPlayerInterior(player1));
				SetVehicleVirtualWorld(GetPlayerVehicleID(playerid),GetPlayerVirtualWorld(player1));
			} else SetPlayerPos(playerid,x,y,z+1);
			new string[128];
			format(string,sizeof(string),"Notice:{FFFFFF} You have teleported to %s(ID: %d)", PlayerInfo[player1][Name],player1);
			SendClientMessage(playerid,yellow,string);
			format(string,sizeof(string),"Notice:{FFFFFF} %s(ID: %d) has teleported to your position", PlayerInfo[playerid][Name],playerid);
			SendClientMessage(player1,yellow,string);
			return 1;
		} else return SendClientMessage(playerid, red, "{FF0000}Error:{FFFFFF} Player is not connected or is yourself");
}

CMD:l(playerid) {
    if(PlayerInfo[playerid][Jailed] > 0) return
		SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command in jail");
	if(PlayerInfo[playerid][PlayerMode] != STUNT)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be in Stunt&Fun mode to use this command.");
	if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING || GetPlayerState(playerid) == PLAYER_STATE_WASTED)return SendClientMessage(playerid,blue,"{FF0000}Error:{FFFFFF} You cannot use this comamnd now.");
	if(SFPlayerInfo[playerid][Event] > 0 && PlayerInfo[playerid][PlayerMode] == STUNT) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command at this moment. You are in an event.");
    if(PlayerInfo[playerid][SFSavedPos]==0)return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} Use /s first.");
    PutAtSPos(playerid);
    return 1;
}

CMD:s(playerid) {
    if(PlayerInfo[playerid][Spawned] == 0)return 0;
    if(PlayerInfo[playerid][Jailed] > 0) return
		SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command in jail");
	if(PlayerInfo[playerid][PlayerMode] != STUNT)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be in Stunt&Fun mode to use this command.");
	//if(GetPlayerInterior(playerid) > 0)return SendClientMessage(playerid,blue,"{FF0000}Error:{FFFFFF} You cannot use this comamnd in an interior");
	if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING || GetPlayerState(playerid) == PLAYER_STATE_WASTED)return SendClientMessage(playerid,blue,"{FF0000}Error:{FFFFFF} You cannot use this comamnd now.");
	if(SFPlayerInfo[playerid][Event] > 0 && PlayerInfo[playerid][PlayerMode] == STUNT) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command at this moment. You are in an event.");
	new Float:x,Float:y,Float:z,Float:Ang;
	GetPlayerPos(playerid,x,y,z);
	if(IsPlayerInAnyVehicle(playerid))
		GetVehicleZAngle(GetPlayerVehicleID(playerid), Ang);
	else GetPlayerFacingAngle(playerid, Ang);

	PlayerInfo[playerid][SFSavedPos] = 1;
	PlayerInfo[playerid][SFPosX] = floatround(x);
	PlayerInfo[playerid][SFPosY] = floatround(y);
	PlayerInfo[playerid][SFPosZ] = floatround(z);
	PlayerInfo[playerid][SFPosAng] = floatround(Ang);
	PlayerInfo[playerid][SFPosInt] = GetPlayerInterior(playerid);
	PlayerInfo[playerid][SFPosWorld] = GetPlayerVirtualWorld(playerid);
	SendClientMessage(playerid,yellow,"Notice:{FFFFFF} You have saved these coordinates. Now you can use /l");
	return 1;
}

CMD:ssp(playerid) {
    if(PlayerInfo[playerid][Spawned] == 0)return 0;
    if(PlayerInfo[playerid][Jailed] > 0) return
		SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command in jail");
	if(PlayerInfo[playerid][PlayerMode] != STUNT)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be in Stunt&Fun mode to use this command.");
	//if(GetPlayerInterior(playerid) > 0)return SendClientMessage(playerid,blue,"{FF0000}Error:{FFFFFF} You cannot use this comamnd in an interior");
	if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING || GetPlayerState(playerid) == PLAYER_STATE_WASTED)return SendClientMessage(playerid,blue,"{FF0000}Error:{FFFFFF} You cannot use this comamnd now.");
	if(SFPlayerInfo[playerid][Event] > 0 && PlayerInfo[playerid][PlayerMode] == STUNT) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command at this moment. You are in an event.");
	new Float:x,Float:y,Float:z,Float:Ang;
	GetPlayerPos(playerid,x,y,z);
	if(IsPlayerInAnyVehicle(playerid))
		GetVehicleZAngle(GetPlayerVehicleID(playerid), Ang);
	else GetPlayerFacingAngle(playerid, Ang);
	
	PlayerInfo[playerid][SFSP_SavedPos] = 1;
	PlayerInfo[playerid][SFSP_PosX] = floatround(x);
	PlayerInfo[playerid][SFSP_PosY] = floatround(y);
	PlayerInfo[playerid][SFSP_PosZ] = floatround(z);
	PlayerInfo[playerid][SFSP_PosAng] = floatround(Ang);
	PlayerInfo[playerid][SFSP_PosInt] = GetPlayerInterior(playerid);
	PlayerInfo[playerid][SFSP_PosWorld] = GetPlayerVirtualWorld(playerid);
	SendClientMessage(playerid,yellow,"Notice:{FFFFFF} You have saved these coordinates as your spawn place. Use /sspoff to disable it.");
	return 1;
}

CMD:sspoff(playerid) {
    if(PlayerInfo[playerid][Spawned] == 0)return 0;
    if(PlayerInfo[playerid][Jailed] > 0) return
		SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command in jail");
	if(PlayerInfo[playerid][PlayerMode] != STUNT)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be in Stunt&Fun mode to use this command.");
	//if(GetPlayerInterior(playerid) > 0)return SendClientMessage(playerid,blue,"{FF0000}Error:{FFFFFF} You cannot use this comamnd in an interior");
	PlayerInfo[playerid][SFSP_SavedPos] = 0;
	SendClientMessage(playerid,yellow,"Notice:{FFFFFF} You have disabled the saved spawn. You will spawn at the original location.");
	return 1;
}

CMD:fcar(playerid)
{
    if(PlayerInfo[playerid][PlayerMode] != STUNT)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be in Stunt&Fun mode to use this command.");
	if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING || GetPlayerState(playerid) == PLAYER_STATE_WASTED)return SendClientMessage(playerid,blue,"{FF0000}Error:{FFFFFF} You cannot use this comamnd now.");
	if(SFPlayerInfo[playerid][Event] > 0) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command at this moment. You are in an event.");
	if(!IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,blue,"{FF0000}Error:{FFFFFF} You cannot use this comamnd on foot.");
	new VehicleID, Float:X, Float:Y, Float:Z, Float:Angle;
	new Float:x,Float:y,Float:z;
	GetVehicleVelocity(GetPlayerVehicleID(playerid),x,y,z);
	GetPlayerPos(playerid, X, Y, Z);
	VehicleID = GetPlayerVehicleID(playerid);
	GetVehicleZAngle(VehicleID, Angle);
	SetVehiclePos(VehicleID, X, Y, Z);
	SetVehicleZAngle(VehicleID, Angle);
	SetVehicleHealth(VehicleID,1000.0);
	SetVehicleVelocity(GetPlayerVehicleID(playerid),x,y,z);
	PlayerPlaySound(playerid,1190,0.0,0.0,0.0);
	return 1;
}

CMD:createsquad(playerid,params[]) {
    new name[50],string[128];
	if(TWSquadCount() >= MAX_TW_SQUADS)return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You can't create a squad, no more squad spots left.");
	if(returnPlayerHours(playerid) < 3)return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You must play at least for 3 hours to create a squad.");
	if(TWPlayerInfo[playerid][SquadID] > 0)return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You are in a squad already.");
	if(sscanf(params, "s[50]",name))return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /createsquad <name>");
	if(strlen(name) >= 30)return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} Squad name is too long, 30 characters max.");
	if(isIllegalChar(name))
		return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} Illegal characters used, try again. Only: aA-zZ 0-9 [ ] ) ( ");
	forLoop(i, MAX_TW_SQUADS)
	{
	    if( SquadInfo[i][Exists] && strfind( SquadInfo[i][sName], name,false) != -1 ) return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Squad name is already in use. Choose another name.");
	}
    new squad;
	forLoopV(i,1, MAX_TW_SQUADS)
	{
		if(!SquadInfo[i][Exists])
		{
			squad = i;
			break;
		}
	}
    SquadInfo[squad][Exists] = 1;
    SquadInfo[squad][Members] = 1;
	SquadInfo[squad][LeaderID] = PlayerInfo[playerid][ID];
    format(SquadInfo[squad][sName],50,"%s",name);
	SaveTWSquad(squad);
    TWPlayerInfo[playerid][SquadID] = SquadInfo[squad][ID];
    
    format(SquadInfo[squad][Leader],50,"%s",PlayerInfo[playerid][Name]);
    format(string, sizeof(string), "Notice:{FFFFFF} You have created the '%s' squad(ID:%d). Use /cmds for squad cmds.",name,SquadInfo[squad][ID]);
	SendClientMessage(playerid,green1,string);
    format(string,128,"{FFFFFF}***{00EEAD}%s{FFFFFF}***",name);
    UpdateDynamic3DTextLabelText(PlayerInfo[playerid][TeamLabel],0xFFFF00AA,string);
	format(string, sizeof(string), "TW_SQUAD_ID = %d",SquadInfo[squad][ID]);
	db_UpdateUserTableValue(toStr(PlayerInfo[playerid][ID]), "USERS", string);
	return 1;
}
CMD:destroysquad(playerid,params[]) {
	if(PlayerInfo[playerid][PlayerMode] != TW)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be in the TW mode to use this command.");
	if(TWPlayerInfo[playerid][SquadID] > 0)
	{
		new sid = getTWSquadID(TWPlayerInfo[playerid][SquadID]);
	    if(SquadInfo[sid][LeaderID] == PlayerInfo[playerid][ID])
		{
		    new string[128];
		    if(!SquadInfo[sid][Exists]) return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Squad id doesn't exits.");
		    SquadInfo[sid][Exists]=0;
			SaveTWSquad(sid);
		    
		    forLoop(j,MAX_PLAYERS)
			{
			    if(IsPlayerConnected(j))
				{
				    if(TWPlayerInfo[j][SquadID] == SquadInfo[sid][ID])
				    {
						format(string, sizeof(string),"{FF0000}Notice:{FFFFFF} Leader of squad, %s ,has destroyed your squad.", PlayerInfo[playerid][Name]);
						ShowPlayerDialog(j, 4511, DIALOG_STYLE_MSGBOX,"Squad Info", string, "Close", "");
						TWPlayerInfo[j][SquadID] = 0;
						UpdateDynamic3DTextLabelText(PlayerInfo[j][TeamLabel], 0xFFFFFFAA, " ");
						db_UpdateUserTableValue(toStr(PlayerInfo[j][ID]), "USERS", "TW_SQUAD_ID = 0");
					}
				}
			}
			SendClientMessage(playerid,red1,"Notice:{FFFFFF} You have just destroyed your squad.");
		}else return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You are not the commander of this squad.");
	}else return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You don`t belong in any squad.");
	return 1;
}

CMD:screate(playerid,params[]) {
	if(PlayerInfo[playerid][Level] > 3) {
	    new name[50],player1,string[128];
		if(TWSquadCount() >= MAX_TW_SQUADS)return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You can't create a squad, no more squad spots left.");
		if (sscanf(params, "ds[50]",player1,name))return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /screate <playerid> <name>");
		if(isIllegalChar(name))
			return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} Illegal characters used, try again. Only: aA-zZ 0-9 [ ] ) ( ");
		if(IsPlayerConnected(player1) && player1 != INVALID_PLAYER_ID)
		{
			if(TWPlayerInfo[player1][SquadID] == 0)
			{
			    forLoop(i, MAX_TW_SQUADS)
				{
				    if( SquadInfo[i][Exists] && strfind( SquadInfo[i][sName], name,false) != -1 ) return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Squad name is already in use. Choose another name.");
				}
			    new squad;
				forLoopV(i,1, MAX_TW_SQUADS)
				{
					if(!SquadInfo[i][Exists])
					{
						squad = i;
						break;
					}
				}
			    SquadInfo[squad][Exists] = 1;
			    SquadInfo[squad][Members] = 1;
			    format(SquadInfo[squad][sName],50,"%s",name);
			    SquadInfo[squad][LeaderID] = PlayerInfo[player1][ID];
			    format(SquadInfo[squad][Leader],50,"%s",PlayerInfo[player1][Name]);
				SaveTWSquad(squad);
			    TWPlayerInfo[player1][SquadID] = SquadInfo[squad][ID];

			    format(string, sizeof(string), "Notice:{FFFFFF} You have created the '%s' squad(ID:%d) for %s(ID:%d).",name,SquadInfo[squad][ID],PlayerInfo[player1][Name],player1);
				SendClientMessage(playerid,green1,string);
				format(string, sizeof(string), "**Admin has just created the '%s' squad(ID:%d) for you. Use /cmds for cmds.",name,SquadInfo[squad][ID]);
				SendClientMessage(player1,green1,string);
			    format(string,128,"{FFFFFF}***{00EEAD}%s{FFFFFF}***",name);
			    UpdateDynamic3DTextLabelText(PlayerInfo[player1][TeamLabel],0xFFFF00AA,string);
				format(string, sizeof(string), "TW_SQUAD_ID = %d",SquadInfo[squad][ID]);
				db_UpdateUserTableValue(toStr(PlayerInfo[player1][ID]), "USERS", string);
				return 1;
			}else return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} The player is in a squad already.");
		} else return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} The player is not connected.");
	} else return 0;
}

CMD:skick(playerid,params[]) {
    if(PlayerInfo[playerid][PlayerMode] != TW)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be in the TW mode to use this command.");
	if(TWPlayerInfo[playerid][SquadID] > 0)
	{
	    new squadlocal = getTWSquadID(TWPlayerInfo[playerid][SquadID]);
        if(SquadInfo[squadlocal][LeaderID] == PlayerInfo[playerid][ID])
		{
		    new player1, string[128];
			if (sscanf(params, "d",player1)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /skick <playerid> - player must be online");
		    if(IsPlayerConnected(player1) && player1 != INVALID_PLAYER_ID && player1!=playerid)
			{
			    if(TWPlayerInfo[playerid][SquadID] == TWPlayerInfo[player1][SquadID])
				{
                    SendClientMessage(player1,red1,"Notice:{FFFFFF} You have been kicked from your squad.");
					forLoop(j,MAX_PLAYERS)
					{
					    if(IsPlayerConnected(j) && player1 != j && GetPlayerMode(j) == TW)
						{
						    if(TWPlayerInfo[playerid][SquadID] == TWPlayerInfo[j][SquadID])
						    {
								format(string, sizeof(string),"Notice:{FFFFFF} %s(ID:%d) has been kicked from your squad!", PlayerInfo[player1][Name],player1);
								SendClientMessage(j, red1, string);
							}
						}
					}
					UpdateDynamic3DTextLabelText(PlayerInfo[player1][TeamLabel], 0xFFFFFFAA, " ");
					TWPlayerInfo[player1][SquadID] = 0;
					db_UpdateUserTableValue(toStr(PlayerInfo[player1][ID]), "USERS", "TW_SQUAD_ID = 0");
			    	SquadInfo[squadlocal][Members]--;
					SaveTWSquad(squadlocal);
                }else return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} The player is not in your squad.");
			}else return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} The player is not connected.");
		}else return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You are not the commander of this squad.");
	}else return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You don`t belong in any squad.");
	return 1;
}

CMD:ssetname(playerid,params[])
{
	if(PlayerInfo[playerid][Level] > 3) {
	    new id,name[50],string[129], player=-1;
		if (sscanf(params, "ds[50]",id,name)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /ssetname <gid> <name>");
		new squadlocal = getTWSquadID(id);
        if(!SquadInfo[squadlocal][Exists]) return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Squad id doesn't exits.");

		forLoop(j,MAX_PLAYERS)
		{
		    if(IsPlayerConnected(j))
			{
			    if(TWPlayerInfo[j][SquadID] == SquadInfo[squadlocal][ID])
			    {
			        if(PlayerInfo[j][Spawned] && PlayerInfo[j][PlayerMode] == TW)
				    {
				        new strk[60];
						format(strk,60,"{FFFFFF}***{00EEAD}%s{FFFFFF}***", name);
			    		UpdateDynamic3DTextLabelText(PlayerInfo[player][TeamLabel], 0xFFFF00AA,strk);
					}
			    }
			}
   		}
		format(SquadInfo[squadlocal][sName], 50, "%s",name);
		SaveTWSquad(squadlocal);
		format(string, sizeof(string), "Notice:{FFFFFF} You have just changed the name of the '%s' squad(ID:%d).",SquadInfo[squadlocal][sName],id);
		SendClientMessage(playerid,red1,string);
		return 1;
	} else return 0;
}


CMD:sdestroy(playerid,params[]) {
	if(PlayerInfo[playerid][Level] > 3) {
	    new sid,reason[50], string[128];
		if (sscanf(params, "ds[50]",sid,reason)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /sdestroy <squad name/id> <reason> ");
        if(!SquadInfo[getTWSquadID(sid)][Exists]) return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Squad id doesn't exits.");
		sid = getTWSquadID(sid);
	    forLoop(j,MAX_PLAYERS)
		{
		    if(IsPlayerConnected(j))
			{
			    if(TWPlayerInfo[j][SquadID] == SquadInfo[sid][ID])
			    {
					format(string, sizeof(string),"{FF0000}Notice:{FFFFFF} Admin %s has destroyed your squad. \n{FF0000}Reason: {FFFFFF}%s!", PlayerInfo[playerid][Name],reason);
					ShowPlayerDialog(j, 4511, DIALOG_STYLE_MSGBOX,"Squad Info", string, "Close", "");
					TWPlayerInfo[j][SquadID] = 0;
					UpdateDynamic3DTextLabelText(PlayerInfo[j][TeamLabel], 0xFFFFFFAA, " ");
				}
			}
		}
		SquadInfo[sid][Exists]=0;
		SaveTWSquad(sid);
		format(string, sizeof(string), "Notice:{FFFFFF} You have just destroyed the '%s' squad(ID:%d). Reason: %s",SquadInfo[sid][sName],SquadInfo[sid][ID], reason);
		SendClientMessage(playerid,red1,string);
		return 1;
	} else return 0;
}

CMD:sinfo(playerid,params[])
{
	if(PlayerInfo[playerid][PlayerMode] != TW)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be in the TW mode to use this command.");
	new string[258],string1[128],name[50];
	if (sscanf(params, "s[50]",name)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /sinfo <squad name/id>");
	new found=0;
	if(IsNumericForID(name))
	{
	    if(strval(name) >= MAX_TW_SQUADS || strval(name) < 0) return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Squad id doesn't exits, try typing the gang name.");
		new sid = getTWSquadID(strval(name));
	    if(!SquadInfo[sid][Exists]) return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Squad id doesn't exits, try typing the gang name.");
	    found=sid;
	}
    else
	{
        forLoop(i, MAX_TW_SQUADS)
		{
		    if(SquadInfo[i][Exists])
			{
		    	if( strfind( SquadInfo[i][sName], name,true) != -1 )
				{
					found=i;
					break;
				}
		    }
		}
		if(found==0)return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Squad name doesn't exits.");
	}

	format(string1,128,"{FFFFFF}Squad name:  {33FF33}%s",SquadInfo[found][sName]);
	strcat(string,string1);
	format(string1,128,"\n{FFFFFF}ID: {33FF33}%d",SquadInfo[found][ID]);
    strcat(string,string1);
	format(string1,128,"\n{FFFFFF}Commander:  {33FF33}%s",SquadInfo[found][Leader]);
	strcat(string,string1);
	format(string1,128,"\n{FFFFFF}Members:  {33FF33}%d",SquadInfo[found][Members]);
	strcat(string,string1);
	ShowPlayerDialog(playerid, 4521, DIALOG_STYLE_MSGBOX, "WW2 Squad info", string, "Close", "");
	return 1;
}
CMD:sinvite(playerid,params[])
{
    if(PlayerInfo[playerid][PlayerMode] != TW)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be in the TW mode to use this command.");
	if(TWPlayerInfo[playerid][SquadID] > 0)
	{
		new sid = getTWSquadID(TWPlayerInfo[playerid][SquadID]);
	    if(SquadInfo[sid][LeaderID] == PlayerInfo[playerid][ID])
	    {
		    new player, string[128],string2[600];
			if (sscanf(params, "d",player)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /sinvite <playerid>");
			if(IsPlayerConnected(player) && player != INVALID_PLAYER_ID && player != playerid)
			{
			    if(PlayerInfo[player][Registered] == 0)return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} The player is not registered.");
			    if(PlayerInfo[player][Spawned] == 0)return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} The player is not spawned.");
			    if(PlayerInfo[player][PlayerMode] != TW)return SendClientMessage(playerid,red1, "{FF0000}Error: {FFFFFF}Player must be in the TW mode.");
				if(TWPlayerInfo[player][SquadID] == 0)
				{
				    PlayerInfo[player][SelectMenu] = SQUAD;
				    PlayerInfo[player][SelectMenuOption][0]= playerid;
				    PlayerInfo[player][SelectMenuOption][1]= TWPlayerInfo[playerid][SquadID];
				    format(string, sizeof(string), "Notice:{FFFFFF} You have just sent %s an invitation to your squad.", PlayerInfo[player][Name]);
					SendClientMessage(playerid,green1,string);
					format(string, sizeof(string), "{33FF33} %s invites to join his squad.", PlayerInfo[playerid][Name]);
					strcat(string2,string);
                    format(string,128,"\nSquad name: %s(ID:%d)",SquadInfo[sid][sName],SquadInfo[sid][ID]);
					strcat(string2,string);
					format(string,128,"\nCommander: %s",SquadInfo[sid][Leader]);
					strcat(string2,string);
					format(string,128,"\nMembers: %d",SquadInfo[sid][Members]);
					strcat(string2,string);
					ShowPlayerDialog(player,SELMENU, DIALOG_STYLE_MSGBOX,"WW2 Squad Invite", string2, "Accept", "Deny");
					return 1;
				}else return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} The player is in a squad already.");
			}else return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} The player is not connected.");
		}else return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You are not the commander of this squad.");
	}else return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You don`t even have a squad.");
}

CMD:squit(playerid)
{
    if(PlayerInfo[playerid][PlayerMode] != TW)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be in the TW mode to use this command.");
	new string[128];
    if(TWPlayerInfo[playerid][SquadID] > 0)
	{
	    new sid=getTWSquadID(TWPlayerInfo[playerid][SquadID]);
		if(SquadInfo[sid][LeaderID] == PlayerInfo[playerid][ID])
			return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You are the commander of this squad, use /destroysquad to destroy your squad.");
        format(string, sizeof(string), "Notice:{FFFFFF} You have quit squad %s.", SquadInfo[sid][sName]);
		SendClientMessage(playerid,red1,string);
		forLoop(j, MAX_PLAYERS)
		{
		    if(IsPlayerConnected(j) && playerid != j)
			{
			    if(TWPlayerInfo[j][SquadID] == TWPlayerInfo[playerid][SquadID])
			    {
					format(string, sizeof(string),"Notice:{FFFFFF} %s(ID:%d) has quit your squad!", PlayerInfo[playerid][Name],playerid);
					SendClientMessage(j, red1, string);
				}
			}
		}
        UpdateDynamic3DTextLabelText(PlayerInfo[playerid][TeamLabel], 0xFFFF00AA, " ");
		TWPlayerInfo[playerid][SquadID] = 0;
		SquadInfo[sid][Members]--;
		SaveTWSquad(sid);
	}else return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You don`t belong in any squad.");
	return 1;
}

CMD:gcreate(playerid,params[])
{
	if(PlayerInfo[playerid][Level] > 3)
	{
	    new name[50],player1,mapicon,color, string[228],scolor[10];
		if(FFAGangCount() >= MAX_FFA_GANGS)return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You can't create a gang, no more gangs left.");
		if (sscanf(params, "p<|>ddxs[10]s[50]",player1,mapicon,color,scolor,name))
		{
			return SendClientMessage(playerid, red1, "Usage:{FFFFFF}/gcreate <playerid>|<mapicon>|<color hex>|<color str>|<name>");
		}
        if(IsPlayerConnected(player1) && player1 != INVALID_PLAYER_ID)
		{
			if(FFAPlayerInfo[player1][GangID] == 0)
			{
			    forLoop(i, MAX_FFA_GANGS)
				{
				    if( GangInfo[i][Exists] && (strfind( GangInfo[i][gName], name,false) != -1) ) return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Gang name is already in use. Choose another name.");
				}
			    new gang = -1;
				forLoopV(i,1, MAX_FFA_GANGS)
				{
					if(!GangInfo[i][Exists])
					{
						gang = i;
						break;
					}
				}
				if(gang != -1)
				{
				    new Float:x,Float:y,Float:z;
					GetPlayerPos(playerid,x,y,z);
				    GangInfo[gang][Exists] = 1;
				    GangInfo[gang][gLeaderID] = PlayerInfo[player1][ID];
				    GangInfo[gang][gViceID] = 0;
				    format(GangInfo[gang][gName],50,"%s",name);
				    format(GangInfo[gang][gLeader],50,"%s",PlayerInfo[player1][Name]);
				    format(GangInfo[gang][gVice],50,"%s","No one");
				    format(GangInfo[gang][gColHex],20,"%s",scolor);
				    GangInfo[gang][Members] = 1;
				    GangInfo[gang][gSpawnX] = floatround(x);
				    GangInfo[gang][gSpawnY] = floatround(y);
				    GangInfo[gang][gSpawnZ] = floatround(z);
				    GangInfo[gang][gOutWorld] = GetPlayerVirtualWorld(playerid);
				    GangInfo[gang][gOutInterior] = GetPlayerInterior(playerid);
				    GangInfo[gang][Money] = 0;
				    GangInfo[gang][Locked] = 0;
				    GangInfo[gang][AllowedIn] = 0;
				    GangInfo[gang][AllowedOut] = 0;
				    GangInfo[gang][PicksAllowed] = 0;
				    GangInfo[gang][MapIcon] = mapicon;
				    SetPlayerTeam(player1,FFAPlayerInfo[player1][GangID]);
				    GangInfo[gang][Color] = color;
					GangInfo[gang][gZone]=GangZoneCreate(x-100, y-100, x+100, y+100);
	        		GangZoneShowFor(FFA,GangInfo[gang][gZone],GangInfo[gang][Color]);
				    SetPlayerColor(player1,GangInfo[gang][Color]);
					SaveFFAGang(gang);

	    			FFAPlayerInfo[player1][GangID] = GangInfo[gang][ID];

					format(string, sizeof(string), "FFA_GANG_ID = %d",GangInfo[gang][ID]);
					db_UpdateUserTableValue(toStr(PlayerInfo[player1][ID]), "USERS", string);

					DestroyTheDynamic3DTextLabel(GangInfo[gang][gSpawnLabel]);
	        		format(string,sizeof(string),"{%s}%s {FFFFFF}Head Quarters\nOperated by: {%s}%s\n{FFFFFF}Members: {%s}%d\n{FFFFFF}Zones: {%s}%d\n{FFFFFF}Properties: {%s}0\n{FFFFFF}Money: {%s}$%d"
						,GangInfo[gang][gColHex],GangInfo[gang][gName],GangInfo[gang][gColHex],GangInfo[gang][gLeader],GangInfo[gang][gColHex],GangInfo[gang][Members],GangInfo[gang][gColHex],0
						,GangInfo[gang][gColHex],GangInfo[gang][gColHex],GangInfo[gang][Money]);
					GangInfo[gang][gSpawnLabel] = CreateDynamic3DTextLabel(string,0xFFFFFFAA,x,y,z+7, 80, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, GangInfo[gang][gOutWorld], -1, -1, 100);
					format(string,128,"{FFFFFF}***{%s}%s{FFFFFF}***",GangInfo[gang][gColHex],GangInfo[gang][gName]);
				    UpdateDynamic3DTextLabelText(PlayerInfo[player1][ModeLabel],GangInfo[gang][Color],string);
					format(FFAPlayerInfo[player1][gRank],50,"%s","Boss");
					UpdateDynamic3DTextLabelText(PlayerInfo[player1][TeamLabel], 0x00EEADAA,"{FFFFFF}*{33FF33}Boss{FFFFFF}*");
				    format(string, sizeof(string), "Notice:{FFFFFF} You have created the '%s' gang,(ID:%d) for %s(ID:%d).",GangInfo[gang][gName],GangInfo[gang][ID],PlayerInfo[player1][Name],player1);
					SendClientMessage(playerid,green1,string);
					format(string, sizeof(string), "**Admin has just created the '%s' gang,(ID:%d) for you.",GangInfo[gang][gName],GangInfo[gang][ID]);
					SendClientMessage(player1,green1,string);
					A_SpawnPlayer(player1);
					forLoop(j, MAX_PLAYERS)
					{
					    if(IsPlayerConnected(j) && PlayerInfo[j][Spawned] && PlayerInfo[j][PlayerMode] == FFA)
						{
						    DeleteMapIcons(j);
						    for (new i = 0; i != 50; i++)
							{
					   			if(GangInfo[i][Exists])
								{
									GangZoneShowForPlayer(j,GangInfo[i][gZone],GangInfo[i][Color]);
									SetPlayerMapIcon(j,i+1,GangInfo[i][gSpawnX],GangInfo[i][gSpawnY],GangInfo[i][gSpawnZ],GangInfo[i][MapIcon],GangInfo[i][Color],1);
								}
							}
						}
					}
				}
				return 1;
			}else return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} The player is in a gang already.");
		} else return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} The player is not connected.");
	} else return 0;
}
CMD:ganggivemoney(playerid,params[])
{
	if(PlayerInfo[playerid][PlayerMode] != FFA)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be in the FFA mode to use this command.");
	if(FFAPlayerInfo[playerid][GangID] > 0)
	{
	   	new ganglocal = getFFAGangID(FFAPlayerInfo[playerid][GangID]);
	    if(GangInfo[ganglocal][gLeaderID] == PlayerInfo[playerid][ID])
		{
		    new amount, type, id, string[138];
		    if (sscanf(params, "ddd",type, id,amount))return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /ggivemoney <0 = to player/1 = to other gang> <id> <amount>");
            if(amount < 1)return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Amount of money must be more than $1.");
			if(GangInfo[ganglocal][Money] < amount)
				return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Your gang doesn't have enough money..");
	        if(type == 0)
			{
			    if(IsPlayerConnected(id) && id != INVALID_PLAYER_ID)
				{
				    if(PlayerInfo[id][PlayerMode] != FFA || PlayerInfo[id][Spawned] == 0)
						return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} Player must be in FFA.");
					GiveThePlayerMoney(id, amount);
					forLoop(j, MAX_PLAYERS)
					{
					    if(IsPlayerConnected(j) && GetPlayerMode(j) == FFA && j != id)
						{
						    if(FFAPlayerInfo[playerid][GangID] == FFAPlayerInfo[j][GangID])
						    {
								format(string, sizeof(string),"Notice:{FFFFFF} Leader of your gang, %s(ID:%d), has given $%d dollars to %s!", PlayerInfo[playerid][Name],playerid, amount, PlayerInfo[id][Name]);
								SendClientMessage(j, green1, string);
							}
						}
					}
					format(string, sizeof(string),"Notice:{FFFFFF} Leader of %s, %s(ID:%d), has given you $%d dollars.", GangInfo[ganglocal][gName], PlayerInfo[playerid][Name],playerid, amount);
					SendClientMessage(id, green1, string);
				}
			}
			else if(type == 1)
			{
				id = getFFAGangID(id);
				if(!GangInfo[id][Exists]) return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Gang id doesn't exits.");
                if(GangInfo[id][ID] == FFAPlayerInfo[playerid][GangID])
					return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Gang id can't be your gang.");
                if(GangInfo[id][Money]+amount >= 1147483647)
		            GangInfo[id][Money] = 1147483640;
				else GangInfo[id][Money]+= amount;
				UpdateFFAGangText(id);
				forLoop(j, MAX_PLAYERS)
				{
				    if(IsPlayerConnected(j) && GetPlayerMode(j) == FFA)
					{
					    if(FFAPlayerInfo[playerid][GangID] == FFAPlayerInfo[j][GangID])
					    {
							format(string, sizeof(string),"Notice:{FFFFFF} Leader of your gang, %s(ID:%d), has given $%d dollars to %s!", PlayerInfo[playerid][Name],playerid, amount, GangInfo[id][gName]);
							SendClientMessage(j, green1, string);
						}
					    if(FFAPlayerInfo[j][GangID] == GangInfo[id][ID])
					    {
							format(string, sizeof(string),"Notice:{FFFFFF} Leader of %s, %s(ID:%d), has given your gang $%d dollars.", GangInfo[ganglocal][gName], PlayerInfo[playerid][Name],playerid, amount);
							SendClientMessage(j, green1, string);
						}
					}
				}
			}
			GangInfo[ganglocal][Money]-=amount;
			UpdateFFAGangText(ganglocal);
		}else return SendClientMessage(playerid,red1,"Notice:{FFFFFF} You aren't the leader of this gang.");
	}else return SendClientMessage(playerid,red1,"Notice:{FFFFFF} You don`t belong in any gang.");
	return 1;
}
CMD:ggivemoney(playerid,params[])
{
	if(PlayerInfo[playerid][PlayerMode] != FFA)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be in the FFA mode to use this command.");
	if(FFAPlayerInfo[playerid][GangID] > 0)
	{
	    new amount, string[138];
	    if (sscanf(params, "d",amount))return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /ggivemoney <amount>");
        if(amount < 1)return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Amount of money must be more than $1.");
		if(GetThePlayerMoney(playerid) < amount)
			return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} You don't have enough money..");
	   	new ganglocal = getFFAGangID(FFAPlayerInfo[playerid][GangID]);
        if(GangInfo[ganglocal][Money]+amount >= 1147483647)
            GangInfo[ganglocal][Money] = 1147483640;
		else GangInfo[ganglocal][Money]+= amount;
		UpdateFFAGangText(ganglocal);
		GiveThePlayerMoney(playerid, -amount);
		forLoop(j, MAX_PLAYERS)
		{
		    if(IsPlayerConnected(j) && GetPlayerMode(j) == FFA)
			{
			    if(FFAPlayerInfo[playerid][GangID] == FFAPlayerInfo[j][GangID])
			    {
					format(string, sizeof(string),"Notice:{FFFFFF} %s(ID:%d) has given $%d dollars to the gang!", PlayerInfo[playerid][Name],playerid, amount);
					SendClientMessage(j, green1, string);
				}
			}
		}
	}else return SendClientMessage(playerid,red1,"Notice:{FFFFFF} You don`t belong in any gang.");
	return 1;
}
CMD:grank(playerid,params[])
{
	if(PlayerInfo[playerid][PlayerMode] != FFA)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be in the FFA mode to use this command.");
	if(FFAPlayerInfo[playerid][GangID] > 0)
	{
	   	new ganglocal = getFFAGangID(FFAPlayerInfo[playerid][GangID]);
	    if(GangInfo[ganglocal][gLeaderID] == PlayerInfo[playerid][ID] || GangInfo[ganglocal][gViceID] == PlayerInfo[playerid][ID])
		{
			new player1,name[50],string[68];
			if (sscanf(params, "ds[50]",player1,name))return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /grank <playerid> <rank name>");
			if(PlayerInfo[player1][PlayerMode] != FFA)return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF}The player must be in FFA.");
			if(FFAPlayerInfo[player1][GangID] != FFAPlayerInfo[playerid][GangID])return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF}The player must be part of your gang.");
			if(strlen(name)>=25)return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF}Rank name can't be more than 25 characters..");
			format(FFAPlayerInfo[player1][gRank],50,"%s",name);
			format(string,68,"{FFFFFF}*{33FF33}%s{FFFFFF}*",name);
		    UpdateDynamic3DTextLabelText(PlayerInfo[player1][TeamLabel], 0x00EEADAA,string);
			SendClientMessage(playerid,green1,"Notice:{FFFFFF} Rank has been set...");
			mysql_format(ServerInfo[DataBase], string, sizeof(string), "FFA_G_RANK='%e'",name);
			db_UpdateUserTableValue(toStr(PlayerInfo[player1][ID]), "USERS", string);
        }else return SendClientMessage(playerid,red1,"Notice:{FFFFFF} You are not the leader of this gang.");
	}else return SendClientMessage(playerid,red1,"Notice:{FFFFFF} You don`t belong in any gang.");
	return 1;
}

CMD:gkick(playerid,params[]) {
    if(PlayerInfo[playerid][PlayerMode] != FFA)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be in the FFA mode to use this command.");
	if(FFAPlayerInfo[playerid][GangID] > 0)
	{
	   	new ganglocal = getFFAGangID(FFAPlayerInfo[playerid][GangID]);
	    if(GangInfo[ganglocal][gLeaderID] == PlayerInfo[playerid][ID])
		{
		    new player1,string[128];
			if (sscanf(params, "d",player1))return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /gkick <playerid> - player must be online");
		    if(IsPlayerConnected(player1) && player1 != INVALID_PLAYER_ID && player1!=playerid)
			{
			    if(FFAPlayerInfo[playerid][GangID] == FFAPlayerInfo[player1][GangID])
				{
				    if(GangInfo[ganglocal][gLeaderID] == PlayerInfo[player1][ID])
						return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You cannot kick the leader.");
                    GangInfo[ganglocal][Members]--;
					format(string, sizeof(string), "Notice:{FFFFFF} You have been kicked from your gang.");
					SendClientMessage(player1,red1,string);
					forLoop(j, MAX_PLAYERS)
					{
					    if(IsPlayerConnected(j) && player1 != j && GetPlayerMode(j) == FFA)
						{
						    if(FFAPlayerInfo[j][GangID] == FFAPlayerInfo[playerid][GangID])
						    {
								format(string, sizeof(string),"Notice:{FFFFFF} %s(ID:%d) has been kicked from your gang!", PlayerInfo[player1][Name],player1);
								SendClientMessage(j, red1, string);
							}
						}
					}
					if(GangInfo[ganglocal][gViceID] == PlayerInfo[player1][ID])
					{
						format(GangInfo[ganglocal][gVice],50,"%s","No one");
		    			GangInfo[ganglocal][gViceID] = 0;
					}
					UpdateDynamic3DTextLabelText(PlayerInfo[player1][ModeLabel], 0xFFFFFFAA, " ");
					UpdateDynamic3DTextLabelText(PlayerInfo[player1][TeamLabel], 0xFFFFFFAA, " ");
					FFAPlayerInfo[player1][GangID] = 0;
					A_SpawnPlayer(player1);
					UpdateFFAGangText(ganglocal, false);
					db_UpdateUserTableValue(toStr(PlayerInfo[player1][ID]), "USERS", "FFA_GANG_ID = 0");
                }else return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} The player is not in your gang.");
			}else return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} The player is not connected.");
		}else return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You are not the leader of this gang.");
	}else return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You don`t belong in any gang.");
	return 1;
}


CMD:gdestroy(playerid,params[]) {
	if(PlayerInfo[playerid][Level] > 3) {
	    new id, reason[90],string[228];
		if (sscanf(params, "ds[50]",id, reason)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /gdestroy <id> <reason>");
        id = getFFAGangID(id);
		if(!GangInfo[id][Exists]) return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Gang id doesn't exits.");
        GangInfo[id][Exists]=0;
		GangZoneDestroy(GangInfo[id][gZone]);
		DestroyTheDynamic3DTextLabel(GangInfo[id][gSpawnLabel]);
		DestroyTheDynamic3DTextLabel(GangInfo[id][gOutLabel]);
		DestroyTheDynamic3DTextLabel(GangInfo[id][gInLabel]);
		DestroyTheDynamicPickup(GangInfo[id][OutPickup]);
		DestroyTheDynamicPickup(GangInfo[id][InPickup]);
		GangInfo[id][gZone]=-1;
		GangInfo[id][OutPickup]=-1;
		GangInfo[id][InPickup]=-1;
		if(GangInfo[id][PicksAllowed]==1)DestroyFFApicks(id);
		GangInfo[id][PicksAllowed]=0;

		forLoop(j, MAX_PLAYERS)
		{
		    if(IsPlayerConnected(j))
			{
			    if(FFAPlayerInfo[j][GangID] == GangInfo[id][ID])
			    {
					format(string, sizeof(string),"{FF0000}Notice:{FFFFFF} Admin %s has destroyed your FFA Gang. \n{FF0000}Reason: {FFFFFF}%s!", PlayerInfo[playerid][Name],reason);
					ShowPlayerDialog(j, 4511, DIALOG_STYLE_MSGBOX,"Gang Info", string, "Close", "");
					FFAPlayerInfo[j][GangID] = 0;
					UpdateDynamic3DTextLabelText(PlayerInfo[j][ModeLabel], 0xFFFFFFAA, " ");
					UpdateDynamic3DTextLabelText(PlayerInfo[j][TeamLabel], 0xFFFFFFAA, " ");
					db_UpdateUserTableValue(toStr(PlayerInfo[j][ID]), "USERS", "FFA_GANG_ID = 0");
					if(PlayerInfo[j][Spawned] && PlayerInfo[j][PlayerMode] == FFA)
					{
						A_SpawnPlayer(j);
					}
				}
			}

		}
  		forLoop(i, MAX_FFA_ZONES)
		{
			if(FFAGangZones[i][Exists])
			{
			    if(FFAGangZones[i][Captured] == GangInfo[id][ID])
			    {
	 				FFAGangZones[i][Captured] = 0;
	 				FFAGangZoneNormalize(i);
	 				FFAGangZoneShow(i);
                    UpdateFFAGangZoneText(i, false);
			    }
			}
		}
		forLoop(pid, MAX_FFA_PROPERTIES)
		{
		    if(FFAPropertyInfo[pid][Exists])
		    {
		        if(FFAPropertyInfo[pid][OwnerType] == FFA_OWNER_GANG && FFAPropertyInfo[pid][OwnerID] == GangInfo[id][ID])
		        {
					FFAPropertyInfo[pid][OwnerID] = 0;
					format(FFAPropertyInfo[pid][Owner], 50,"No One");
					FFAPropertyInfo[pid][OwnerType] = FFA_OWNER_NOTHING;
					UpdateFFAPropertyText(pid);
		        }
			}
		}
		format(string, sizeof(string), "Notice:{FFFFFF} You have just destroyed the '%s' gang(ID:%d). Reason: %s",GangInfo[id][gName], GangInfo[id][ID], reason);
		SendClientMessage(playerid,red1,string);
		SaveFFAGang(id);
		forLoop(j, MAX_PLAYERS)
		{
		    if(IsPlayerConnected(j) && PlayerInfo[j][Spawned] && PlayerInfo[j][PlayerMode] == FFA)
			{
			    DeleteMapIcons(j);
			    forLoop(i, MAX_FFA_GANGS)
				{
		   			if(GangInfo[i][Exists])
					{
						GangZoneShowForPlayer(j,GangInfo[i][gZone],GangInfo[i][Color]);
						SetPlayerMapIcon(j,i+1,GangInfo[i][gSpawnX],GangInfo[i][gSpawnY],GangInfo[i][gSpawnZ],GangInfo[i][MapIcon],GangInfo[i][Color],1);
					}
				}
			}
		}
		return 1;
	} else return 0;
}

CMD:gpm(playerid,params[]) {
    if(PlayerInfo[playerid][PlayerMode] != FFA)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be in the FFA mode to use this command.");
	if(PlayerInfo[playerid][Muted] > 0)return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You are muted, you cant use this command.");
    if(FFAPlayerInfo[playerid][GangID] == 0)return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You have no gang.");
	new id,msg[90],string[129];
	if (sscanf(params, "ds[90]",id,msg))return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /gpm <gang id> <msg>");
	id = getFFAGangID(id);
	if(!GangInfo[id][Exists])return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} Gang id doesn't exist. Use /ginfo to get the gang ID.");
	if(GangInfo[id][ID] == FFAPlayerInfo[playerid][GangID])return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot PM your own gang.");
    format(string,sizeof(string),"%s %s,{FF9900}%s{67F6F6} to %s: {FFFFFF}%s",GangInfo[getFFAGangID(FFAPlayerInfo[playerid][GangID])][gName],FFAPlayerInfo[playerid][gRank],PlayerInfo[playerid][Name],GangInfo[id][gName],msg);
	SendMessageToGangID(GangInfo[id][ID],yellow, string);
	SendMessageToGang(playerid,yellow, string);
	return 1;
}

CMD:ginfo(playerid,params[])
{
	if(PlayerInfo[playerid][PlayerMode] != FFA)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be in the FFA mode to use this command.");
	new string[128],string2[298],name[50];
	if (sscanf(params, "s[50]",name)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /ginfo <gang name/id>");
	new found=0,zones=0, properties = 0;
	if(IsNumericForID(name))
	{
	   	new ganglocal = getFFAGangID(strval(name));
	    if(!GangInfo[ganglocal][Exists]) return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Gang id doesn't exits, try typing the gang name.");
	    found=ganglocal;
	}
    else
	{
        forLoop(i, MAX_FFA_GANGS)
		{
		    if(GangInfo[i][Exists])
			{
		    	if( strfind( GangInfo[i][gName], name,true) != -1 )
				{
					found=i;
					break;
				}
		    }
		}
		if(found==0)return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Gang name doesn't exits.");
	}
    forLoop(i, MAX_FFA_ZONES)
	{
		if(FFAGangZones[i][Exists])
		{
		    if(FFAGangZones[i][Captured] == GangInfo[found][ID])
				zones++;
		}
	}
	properties = getFFAGangProperties(GangInfo[found][ID]);
    format(string,128,"{FFFFFF}Gang name: {33FF33}%s",GangInfo[found][gName]);
    strcat(string2,string);
	format(string,128,"\n{FFFFFF}ID: {33FF33}%d",GangInfo[found][ID]);
    strcat(string2,string);
	format(string,128,"\n{FFFFFF}Leader: {33FF33}%s",GangInfo[found][gLeader]);
    strcat(string2,string);
	format(string,128,"\n{FFFFFF}Vice Leader: {33FF33}%s",GangInfo[found][gVice]);
    strcat(string2,string);
	format(string,128,"\n{FFFFFF}Members: {33FF33}%d",GangInfo[found][Members]);
    strcat(string2,string);
	format(string,128,"\n{FFFFFF}Money: {33FF33}$%d",GangInfo[found][Money]);
    strcat(string2,string);
	format(string,128,"\n{FFFFFF}Properties: {33FF33}%d",properties);
    strcat(string2,string);
    format(string,128,"\n{FFFFFF}Captured zones: {33FF33}%d | {FFFFFF}%0.2f percent of the map",zones,(Float:zones/Float:(maxFFAzones-1))*100);
    strcat(string2,string);
	ShowPlayerDialog(playerid, 4521, DIALOG_STYLE_MSGBOX, "FFA Gang info", string2, "Close", "");
	return 1;
}

CMD:gmakevice(playerid,params[])
{
    if(PlayerInfo[playerid][PlayerMode] != FFA)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be in the FFA mode to use this command.");
	if(FFAPlayerInfo[playerid][GangID] > 0)
	{
	   	new ganglocal = getFFAGangID(FFAPlayerInfo[playerid][GangID]);
	    if(GangInfo[ganglocal][gLeaderID] == PlayerInfo[playerid][ID])
	    {
			if(GangInfo[ganglocal][gViceID] > 0)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You already have 1 vice.");
		    new player,string[129];
			if (sscanf(params, "d",player)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /gmakevice <playerid>");
			if(IsPlayerConnected(player) && player != INVALID_PLAYER_ID && player != playerid)
			{
			    if(PlayerInfo[player][Registered] == 0)return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} The player is not registered.");
			    if(PlayerInfo[player][Spawned] == 0)return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} The player is not spawned.");
			    if(PlayerInfo[player][PlayerMode] != FFA)return SendClientMessage(playerid,red1, "{FF0000}Error: {FFFFFF}Player must be in the FFA mode.");
				if(FFAPlayerInfo[player][GangID] == FFAPlayerInfo[playerid][GangID])
				{
				    format(string, sizeof(string), "Notice:{FFFFFF} You have just made %s Vice leader of your gang.", PlayerInfo[player][Name]);
					SendClientMessage(playerid,green1,string);
					format(string, sizeof(string), "{FFFFFF}NEWS:{33FF33} You have been made Vice leader of %s by %s.(Use /cmds)",GangInfo[ganglocal][gName],PlayerInfo[playerid][Name]);
					SendClientMessage(player,green1,string);
					format(GangInfo[ganglocal][gVice],50,"%s",PlayerInfo[player][Name]);
					GangInfo[ganglocal][gViceID]=PlayerInfo[player][ID];
					SaveFFAGang(ganglocal);
					return 1;
				}else return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} The player is not in your gang.");
			}else return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} The player is not connected.");
		}else return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You are not the leader of this gang.");
	}else return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You don`t even have a gang.");
}
CMD:gunmakevice(playerid,params[])
{
    if(PlayerInfo[playerid][PlayerMode] != FFA)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be in the FFA mode to use this command.");
	if(FFAPlayerInfo[playerid][GangID] > 0)
	{
	   	new ganglocal = getFFAGangID(FFAPlayerInfo[playerid][GangID]);
	    if(GangInfo[ganglocal][gLeaderID] == PlayerInfo[playerid][ID])
	    {
		    if(GangInfo[ganglocal][gViceID] == 0)
				return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} There is no vice in your gang.");
			SendClientMessage(playerid,red1,"Notice:{FFFFFF} You have just removed the Vice leader of your gang.");
			GangInfo[ganglocal][gViceID]=0;
			format(GangInfo[ganglocal][gVice],50,"No one");
			SaveFFAGang(ganglocal);
			return 1;
		}else return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You are not the leader of this gang.");
	}else return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You don`t even have a gang.");
}
CMD:ginvite(playerid,params[])
{
    if(PlayerInfo[playerid][PlayerMode] != FFA)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be in the FFA mode to use this command.");
	if(FFAPlayerInfo[playerid][GangID] > 0)
	{
	   	new ganglocal = getFFAGangID(FFAPlayerInfo[playerid][GangID]);
	    if(GangInfo[ganglocal][gLeaderID] == PlayerInfo[playerid][ID] ||
			GangInfo[ganglocal][gViceID] == PlayerInfo[playerid][ID])
	    {
		    new player,string[129],string2[600];
			if (sscanf(params, "d",player)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /ginvite <playerid>");
			if(IsPlayerConnected(player) && player != INVALID_PLAYER_ID && player != playerid)
			{
			    if(PlayerInfo[player][Registered] == 0)return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} The player is not registered.");
			    if(PlayerInfo[player][Spawned] == 0)return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} The player is not spawned.");
			    if(PlayerInfo[player][PlayerMode] != FFA)return SendClientMessage(playerid,red1, "{FF0000}Error: {FFFFFF}Player must be in the FFA mode.");
				if(FFAPlayerInfo[player][GangID] == 0)
				{
				    PlayerInfo[player][SelectMenu] = GANG;
				    PlayerInfo[player][SelectMenuOption][0]= playerid;
				    PlayerInfo[player][SelectMenuOption][1]= FFAPlayerInfo[playerid][GangID];
					format(string, sizeof(string), "Notice:{FFFFFF} You have just sent %s an invitation to join your gang.", PlayerInfo[player][Name]);
					SendClientMessage(playerid,green1,string);
					format(string, sizeof(string), "{33FF33} %s invites to join his gang.", PlayerInfo[playerid][Name]);
					strcat(string2,string);
					format(string,128,"{FFFFFF}\nGang name: %s(ID:%d)",GangInfo[ganglocal][gName],FFAPlayerInfo[playerid][GangID]);
				    strcat(string2,string);
					format(string,128,"\nLeader: %s",GangInfo[ganglocal][gLeader]);
				    strcat(string2,string);
					format(string,128,"\nVice Leader: %s",GangInfo[ganglocal][gVice]);
				    strcat(string2,string);
					format(string,128,"\nMembers: %d",GangInfo[ganglocal][Members]);
				    strcat(string2,string);
					ShowPlayerDialog(player,SELMENU, DIALOG_STYLE_MSGBOX,"FFA Gang Invite", string2, "Accept", "Deny");
					return 1;
				}else return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} The player is in a gang already.");
			}else return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} The player is not connected.");
		}else return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You are not the leader of this gang.");
	}else return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You don`t even have a gang.");
}

CMD:gquit(playerid)
{
    if(PlayerInfo[playerid][PlayerMode] != FFA)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be in the FFA mode to use this command.");
	new string[128];
    if(FFAPlayerInfo[playerid][GangID] > 0)
	{
	   	new ganglocal = getFFAGangID(FFAPlayerInfo[playerid][GangID]);
	    if(GangInfo[ganglocal][gLeaderID] == PlayerInfo[playerid][ID])
			return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You are the leader of this gang, you can't quit. Ask admin to destroy it.");
		else
		{
            GangInfo[ganglocal][Members]--;
            if(GangInfo[ganglocal][gViceID] == PlayerInfo[playerid][ID])
            {
				GangInfo[ganglocal][gViceID]=0;
				format(GangInfo[ganglocal][gVice],50,"%s","No one");
            }
			format(string, sizeof(string), "Notice:{FFFFFF} You have quit gang %s.", GangInfo[ganglocal][gName]);
			SendClientMessage(playerid,red1,string);
			forLoop(j, MAX_PLAYERS)
			{
			    if(IsPlayerConnected(j) && playerid != j)
				{
				    if(FFAPlayerInfo[playerid][GangID] == FFAPlayerInfo[j][GangID])
				    {
						format(string, sizeof(string),"Notice:{FFFFFF} %s(ID:%d) has quit your gang!", PlayerInfo[playerid][Name],playerid);
						SendClientMessage(j, red1, string);
					}
				}
			}
            UpdateDynamic3DTextLabelText(PlayerInfo[playerid][ModeLabel], 0xFFFF00AA, " ");
            UpdateDynamic3DTextLabelText(PlayerInfo[playerid][TeamLabel], 0xFFFF00AA, " ");
            UpdateFFAGangText(ganglocal, false);
			FFAPlayerInfo[playerid][GangID] = 0;
			A_SpawnPlayer(playerid);
		}
	}else return SendClientMessage(playerid,red1,"Error:{FF0000} You don`t belong in any gang.");
	return 1;
}
CMD:gsetmapicon(playerid,params[]) {
	if(PlayerInfo[playerid][Level] > 3) {
	    new id,d,string[129];
		if (sscanf(params, "dd",id,d)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /gsetmapicon <gid> <mapicon>");
        id = getFFAGangID(id);
		if(!GangInfo[id][Exists]) return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Gang id doesn't exits.");
		GangInfo[id][MapIcon] = d;
	    format(string, sizeof(string), "Notice:{FFFFFF} You have just changed the '%s' Gang(ID:%d) map icon.",GangInfo[id][gName],GangInfo[id][ID]);
		SendClientMessage(playerid,red1,string);
	    SaveExtraFFAGangs(id);
		forLoop(j, MAX_PLAYERS)
		{
		    if(IsPlayerConnected(j) && PlayerInfo[j][Spawned] && PlayerInfo[j][PlayerMode] == FFA)
			{
			    DeleteMapIcons(j);
			    forLoop(i, MAX_FFA_GANGS)
				{
		   			if(GangInfo[i][Exists])
					{
						GangZoneShowForPlayer(j,GangInfo[i][gZone],GangInfo[i][Color]);
						SetPlayerMapIcon(j,i+1,GangInfo[i][gSpawnX],GangInfo[i][gSpawnY],GangInfo[i][gSpawnZ],GangInfo[i][MapIcon],GangInfo[i][Color],1);
					}
				}
			}
		}
		return 1;
	} else return 0;
}
CMD:gsetcolor(playerid,params[]) {
	if(PlayerInfo[playerid][Level] > 3) {
	    new id,color,string[129],scolor[10];
		if (sscanf(params, "p<|>dxs[10]",id,color,scolor)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /gsetcolor <gid>|<color hex>|<color str>");
		id = getFFAGangID(id);
		if(!GangInfo[id][Exists]) return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Gang id doesn't exits.");
		GangInfo[id][Color] = color;
		format(GangInfo[id][gColHex],20,"%s",scolor);
	    format(string, sizeof(string), "Notice:{FFFFFF} You have just changed the '%s' Gang(ID:%d) color.",GangInfo[id][gName],GangInfo[id][ID]);
		SendClientMessage(playerid,red1,string);
        GangZoneShowFor(FFA,GangInfo[id][gZone],GangInfo[id][Color]);
		UpdateFFAGangText(id,false);
	    SaveExtraFFAGangs(id);
		forLoop(j, MAX_PLAYERS)
		{
		    if(IsPlayerConnected(j) && PlayerInfo[j][Spawned] && PlayerInfo[j][PlayerMode] == FFA)
			{
			    if(FFAPlayerInfo[j][GangID] == GangInfo[id][ID])
			    {
	    			new strk[60];
		    		format(strk,60,"{FFFFFF}***{%s}%s{FFFFFF}***", GangInfo[id][gColHex], GangInfo[id][gName]);
				    UpdateDynamic3DTextLabelText(PlayerInfo[j][ModeLabel], GangInfo[id][Color],strk);
				    SetPlayerColor(j,GangInfo[id][Color]);
				}
			}
		}
		forLoop(i, MAX_FFA_ZONES)
		{
			if(FFAGangZones[i][Exists])
			{
			    if(FFAGangZones[i][Captured] == GangInfo[id][ID])
			    {
	 				FFAGangZoneNormalize(i);
	 				FFAGangZoneShow(i);
                    UpdateFFAGangZoneText(i, false);
			    }
			}
		}
		return 1;
	} else return 0;
}

CMD:gsetname(playerid,params[]) {
	if(PlayerInfo[playerid][Level] > 3) {
	    new id,name[50],string[129],player=-1;
		if (sscanf(params, "ds[50]",id,name)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /gsetname <gid> <name>");
		id = getFFAGangID(id);
		if(!GangInfo[id][Exists]) return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Gang id doesn't exits.");
        forLoop(i, MAX_FFA_GANGS)
		{
		    if( GangInfo[i][Exists] && (strfind( GangInfo[i][gName], name,false) != -1) )
				return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Gang name is already in use. Choose another name.");
		}
		forLoop(p, MAX_PLAYERS)
		{
			if(IsPlayerConnected(p) && !IsPlayerNPC(p))
			{
				if(FFAPlayerInfo[player][GangID] == GangInfo[id][ID])
			    {
					if(PlayerInfo[player][Spawned] && PlayerInfo[player][PlayerMode] == FFA)
					{
					    new strk[60];
			    		format(strk,60,"{FFFFFF}***{%s}%s{FFFFFF}***", GangInfo[id][gColHex], name);
					    UpdateDynamic3DTextLabelText(PlayerInfo[player][ModeLabel], GangInfo[id][Color],strk);
					}
				}
			}
		}
   		format(GangInfo[id][gName],50,"%s",name);
  		forLoop(z, MAX_FFA_ZONES)
		{
			if(FFAGangZones[z][Exists])
			{
			    if(FFAGangZones[z][Captured] == GangInfo[id][ID])
			    {
                    UpdateFFAGangZoneText(z, false);
			    }
			}
		}
		UpdateFFAGangText(id,false);
		SaveExtraFFAGangs(id);
	    format(string, sizeof(string), "Notice:{FFFFFF} You have just changed the '%s' Gang(ID:%d) name.",GangInfo[id][gName],GangInfo[id][ID]);
		SendClientMessage(playerid,red1,string);
		return 1;
	} else return 0;
}
CMD:gsetspawn(playerid,params[]) {
	if(PlayerInfo[playerid][Level] > 3) {
	    new id,string[129];
		if (sscanf(params, "d",id)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /gsetspawn <gid>");
		id = getFFAGangID(id);
		if(!GangInfo[id][Exists]) return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Gang id doesn't exits.");
		new Float:x,Float:y,Float:z;
		GetPlayerPos(playerid,x,y,z);
	    GangInfo[id][gSpawnX] = floatround(x);
	    GangInfo[id][gSpawnY] = floatround(y);
	    GangInfo[id][gSpawnZ] = floatround(z);
	    GangInfo[id][gOutWorld] = GetPlayerVirtualWorld(playerid);
	    GangInfo[id][gOutInterior] = GetPlayerInterior(playerid);
	    format(string, sizeof(string), "Notice:{FFFFFF} You have just changed the '%s' Gang(ID:%d) spawning.",GangInfo[id][gName],GangInfo[id][ID]);
		SendClientMessage(playerid,red1,string);
		forLoop(j, MAX_PLAYERS)
		{
		    if(IsPlayerConnected(j) && PlayerInfo[j][Spawned] && PlayerInfo[j][PlayerMode] == FFA)
			{
			    DeleteMapIcons(j);
			    forLoop(i, MAX_FFA_GANGS)
				{
		   			if(GangInfo[i][Exists])
					{
						GangZoneShowForPlayer(j,GangInfo[i][gZone],GangInfo[i][Color]);
						SetPlayerMapIcon(j,i+1,GangInfo[i][gSpawnX],GangInfo[i][gSpawnY],GangInfo[i][gSpawnZ],GangInfo[i][MapIcon],GangInfo[i][Color],1);
					}
				}
			}
		}
		GangZoneDestroy(GangInfo[id][gZone]);
		GangInfo[id][gZone]=GangZoneCreate(x-50, y-50, x+50, y+50);
        GangZoneShowFor(FFA,GangInfo[id][gZone],GangInfo[id][Color]);

		DestroyTheDynamic3DTextLabel(GangInfo[id][gSpawnLabel]);
		GangInfo[id][gSpawnLabel] = CreateDynamic3DTextLabel("ggg",0xFFFFFFAA,GangInfo[id][gSpawnX],GangInfo[id][gSpawnY],GangInfo[id][gSpawnZ]+7, 80, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, GangInfo[id][gOutWorld], -1, -1, 100);
		UpdateFFAGangText(id,false);
	    SaveExtraFFAGangs(id);
		return 1;
	} else return 0;
}
CMD:gsetout(playerid,params[]) {
	if(PlayerInfo[playerid][Level] > 3) {
	    new gid,string[129];
		if (sscanf(params, "d",gid)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /gsetin <gid>");
		gid = getFFAGangID(gid);
		if(!GangInfo[gid][Exists]) return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Gang id doesn't exits.");
		new Float:x,Float:y,Float:z;
		GetPlayerPos(playerid,x,y,z);
		GangInfo[gid][OutInterior]=GetPlayerInterior(playerid);
		GangInfo[gid][OutWorld]=GetPlayerVirtualWorld(playerid);
	    if(!GangInfo[gid][AllowedOut])
		{
			GangInfo[gid][AllowedOut]=1;
			GangInfo[gid][OutPickup]=CreateDynamicPickup(1273, 23,x,y,z,GangInfo[gid][OutWorld]);
	    }
		else
		{
			DestroyTheDynamic3DTextLabel(GangInfo[gid][gOutLabel]);
		    DestroyTheDynamicPickup(GangInfo[gid][InPickup]);
		    GangInfo[gid][OutPickup]=CreateDynamicPickup(1273, 23,x,y,z, GangInfo[gid][OutWorld]);
	    }
	    GangInfo[gid][gOutX]=floatround(x);
	    GangInfo[gid][gOutY]=floatround(y);
	    GangInfo[gid][gOutZ]=floatround(z);
	    
	    SaveExtraFFAGangs(gid);
	    GangInfo[gid][gOutLabel] = CreateDynamic3DTextLabel("{CCCCCC}Press '{33FF33}ENTER{CCCCCC}' to enter", 0xCCCCCCAA,GangInfo[gid][gOutX],GangInfo[gid][gOutY],GangInfo[gid][gOutZ]+1, 30, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, GangInfo[gid][OutWorld], -1, -1, 100);
	    format(string, sizeof(string), "Notice:{FFFFFF} You have just changed the '%s' gang(ID:%d) exterior.",GangInfo[gid][gName],GangInfo[gid][ID]);
		SendClientMessage(playerid,red1,string);
		return 1;
	} else return 0;
}

CMD:gsetin(playerid,params[]) {
	if(PlayerInfo[playerid][Level] > 3) {
     	new gid,string[129];
		if (sscanf(params, "d",gid)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /gsetin <gid>");
		gid = getFFAGangID(gid);
		if(!GangInfo[gid][Exists]) return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Gang id doesn't exits.");
		new Float:x,Float:y,Float:z;
		GetPlayerPos(playerid,x,y,z);
		GangInfo[gid][InInterior]=GetPlayerInterior(playerid);
		GangInfo[gid][InWorld]=(gid+20)*30;
	    if(!GangInfo[gid][AllowedIn])
		{
			GangInfo[gid][AllowedIn]=1;
			GangInfo[gid][InPickup]=CreateDynamicPickup(1273, 23,x,y,z,GangInfo[gid][InWorld]);
	    }
		else
		{
			DestroyTheDynamic3DTextLabel(GangInfo[gid][gInLabel]);
		    DestroyTheDynamicPickup(GangInfo[gid][InPickup]);
		    GangInfo[gid][InPickup]=CreateDynamicPickup(1273, 23,x,y,z, GangInfo[gid][InWorld]);
	    }
	    GangInfo[gid][gInX]=floatround(x);
	    GangInfo[gid][gInY]=floatround(y);
	    GangInfo[gid][gInZ]=floatround(z);
	    
	    SaveExtraFFAGangs(gid);
	    GangInfo[gid][gInLabel] = CreateDynamic3DTextLabel("{CCCCCC}Press '{33FF33}ENTER{CCCCCC}' to exit", 0xCCCCCCAA,GangInfo[gid][gInX],GangInfo[gid][gInY],GangInfo[gid][gInZ]+1, 30, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, GangInfo[gid][InWorld], -1, -1, 100);
	    format(string, sizeof(string), "Notice:{FFFFFF} You have just changed the '%s' gang(ID:%d) interior.",GangInfo[gid][gName],GangInfo[gid][ID]);
		SendClientMessage(playerid,red1,string);
		return 1;
	} else return 0;
}
CMD:gsetpicks(playerid,params[]) {
	if(PlayerInfo[playerid][Level] > 3) {
	    new gid;
		if (sscanf(params, "d",gid)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /gsetpicks <gid>");
		gid = getFFAGangID(gid);
		if(!GangInfo[gid][Exists]) return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Gang id doesn't exits.");
		new Float:x,Float:y,Float:z;
		GetPlayerPos(playerid,x,y,z);
		GangInfo[gid][gPicksX]=floatround(x);
		GangInfo[gid][gPicksY]=floatround(y);
	    if(GangInfo[gid][PicksAllowed]==1) DestroyFFApicks(gid);
	    GangInfo[gid][PicksAllowed] = 1;
	    CreateFFApicks(gid,x,y);
	    SaveExtraFFAGangs(gid);
	    return 1;
	} else return 0;
}
CMD:gunsetpicks(playerid,params[]) {
	if(PlayerInfo[playerid][Level] > 3) {
	    new gid;
		if (sscanf(params, "d",gid)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /gunsetpicks <gid>");
		gid = getFFAGangID(gid);
		if(!GangInfo[gid][Exists]) return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Gang id doesn't exits.");
		if(GangInfo[gid][PicksAllowed]!=1) return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Gang id no weaps.");
	    DestroyFFApicks(gid);
		GangInfo[gid][PicksAllowed]=0;
	    SaveExtraFFAGangs(gid);
	    return 1;
	} else return 0;
}
CMD:glock(playerid) {
    if(PlayerInfo[playerid][PlayerMode] != FFA)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be in the FFA mode to use this command.");
	if(FFAPlayerInfo[playerid][GangID] > 0)
	{
	    new ganglocal = getFFAGangID(FFAPlayerInfo[playerid][GangID]);
	    if(GangInfo[ganglocal][gLeaderID] == PlayerInfo[playerid][ID] || GangInfo[ganglocal][gViceID] == PlayerInfo[playerid][ID])
		{
		    new found=0;
			forLoop(i, MAX_FFA_GANGS)
			{
			  	if(found == 0)
			    {
					if(GangInfo[i][Exists] && GangInfo[i][ID] == FFAPlayerInfo[playerid][GangID])
					{
						if(IsPlayerInRangeOfPoint(playerid, 3,GangInfo[i][gOutX],GangInfo[i][gOutY],GangInfo[i][gOutZ]))
						{
							found=i;
							break;
						}
					}
				}
			}
			if(found == 0)return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} You are not close to the HQ enterance.");
            GangInfo[ganglocal][Locked]=1;
			SendClientMessage(playerid, green1, "Notice:{FFFFFF} You just locked your HQ enterance.");
		}else return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You are not the leader of this gang.");
	}else return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You don`t belong in any gang.");
	return 1;
}
CMD:gunlock(playerid) {
    if(PlayerInfo[playerid][PlayerMode] != FFA)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be in the FFA mode to use this command.");
	if(FFAPlayerInfo[playerid][GangID] > 0)
	{
	    new ganglocal = getFFAGangID(FFAPlayerInfo[playerid][GangID]);
	    if(GangInfo[ganglocal][gLeaderID] == PlayerInfo[playerid][ID] || GangInfo[ganglocal][gViceID] == PlayerInfo[playerid][ID])
		{
		    new found=0;
			forLoop(i, MAX_FFA_GANGS)
			{
			  	if(found == 0)
			    {
					if(GangInfo[i][Exists] && GangInfo[i][ID] == FFAPlayerInfo[playerid][GangID])
					{
						if(IsPlayerInRangeOfPoint(playerid, 3,GangInfo[i][gOutX],GangInfo[i][gOutY],GangInfo[i][gOutZ]))
						{
							found=i;
							break;
						}
					}
				}
			}
			if(found == 0)return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} You are not close to the HQ enterance.");
            GangInfo[ganglocal][Locked]=0;
			SendClientMessage(playerid, red1, "Notice:{FFFFFF} You just unlocked your HQ enterance.");
		}else return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You are not the leader of this gang.");
	}else return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You don`t belong in any gang.");
	return 1;
}

CMD:exit(playerid)
{
	if(PlayerInfo[playerid][PlayerMode] == FFA && PlayerInfo[playerid][Spawned] == 1)
	{
		if(!IsPlayerInAnyVehicle(playerid))
		{
			new found=0;
			forLoop(i, MAX_FFA_GANGS)
			{
			    if(found == 0)
			    {
					if(GangInfo[i][Exists])
					{
						if(IsPlayerInRangeOfPoint(playerid, 3,GangInfo[i][gInX],GangInfo[i][gInY],GangInfo[i][gInZ]) && GetPlayerVirtualWorld(playerid) == GangInfo[i][InWorld])
						{
							found=i;
							break;
						}
					}
				}
			}
			if(found > 0)
			{
			    SetPlayerPos(playerid,GangInfo[found][gOutX],GangInfo[found][gOutY],GangInfo[found][gOutZ]);
				SetPlayerInterior(playerid,GangInfo[found][OutInterior]);
				SetPlayerVirtualWorld(playerid,GangInfo[found][OutWorld]);
				SetCameraBehindPlayer(playerid);
				return 1;
			}
			else
			{
			    forLoop(i, MAX_FFA_PROPERTIES)
				{
				    if(found == 0)
				    {
						if(FFAPropertyInfo[i][Exists])
						{
							if(IsPlayerInRangeOfPoint(playerid, 3,FFAPropertyInfo[i][gInX],FFAPropertyInfo[i][gInY],FFAPropertyInfo[i][gInZ]) && GetPlayerInterior(playerid) == FFAPropertyInfo[i][InInterior] && GetPlayerVirtualWorld(playerid) == ((i+21)*31))
							{
								found=i;
								break;
							}
						}
					}
				}
				if(found > 0)
				{
				    SetPlayerPosEx(playerid,FFAPropertyInfo[found][gOutX],FFAPropertyInfo[found][gOutY],FFAPropertyInfo[found][gOutZ],FFAPropertyInfo[found][gOutAng]);
					SetPlayerInterior(playerid, 0);
					SetPlayerVirtualWorld(playerid,W_FFA);
					return 1;
				}
			}
		}
	}else return 0;
	return 1;
}
CMD:enter(playerid)
{
    if(PlayerInfo[playerid][PlayerMode] == FFA && PlayerInfo[playerid][Spawned] == 1)
	{
	    if (!IsPlayerInAnyVehicle(playerid))
		{
			new found=0;
			forLoop(i, MAX_FFA_GANGS)
			{
			    if(found == 0)
			    {
					if(GangInfo[i][Exists])
					{
						if(IsPlayerInRangeOfPoint(playerid, 3,GangInfo[i][gOutX],GangInfo[i][gOutY],GangInfo[i][gOutZ]))
						{
							found=i;
							break;
						}
					}
				}
			}
			if(found > 0)
			{
			    if(FFAPlayerInfo[playerid][GangID] != GangInfo[found][ID] && GangInfo[found][Locked] == 1)
					return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} The door has been locked.");
		        if(GangInfo[found][AllowedIn]==0)return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Gang doesn't have an entrance.");
				SetPlayerPos(playerid,GangInfo[found][gInX],GangInfo[found][gInY],GangInfo[found][gInZ]);
				SetPlayerInterior(playerid,GangInfo[found][InInterior]);
				SetPlayerVirtualWorld(playerid,GangInfo[found][InWorld]);
				SetCameraBehindPlayer(playerid);
				FreezeBeforeObjects(playerid);
				return 1;
			}
			else
			{
			    forLoop(i, MAX_FFA_PROPERTIES)
				{
				    if(found == 0)
				    {
						if(FFAPropertyInfo[i][Exists])
						{
							if(IsPlayerInRangeOfPoint(playerid, 3,FFAPropertyInfo[i][gOutX],FFAPropertyInfo[i][gOutY],FFAPropertyInfo[i][gOutZ]))
							{
								found=i;
								break;
							}
						}
					}
				}
				if(found > 0)
				{
				    if(FFAPropertyInfo[found][AllowedIn]==0)return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Property doesn't have an entrance.");
					if(FFAPropertyInfo[found][Locked] == 1)
				    {
						if((FFAPropertyInfo[found][OwnerType] == FFA_OWNER_PLAYER && FFAPropertyInfo[found][OwnerID] != PlayerInfo[playerid][ID])
							|| (FFAPropertyInfo[found][OwnerType] == FFA_OWNER_GANG && FFAPlayerInfo[playerid][GangID] > 0 && FFAPropertyInfo[found][OwnerID] != FFAPlayerInfo[playerid][GangID]))
							return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} The door has been locked.");
					}
			        SetPlayerPosEx(playerid,FFAPropertyInfo[found][gInX],FFAPropertyInfo[found][gInY],FFAPropertyInfo[found][gInZ],FFAPropertyInfo[found][gInAng]);
					SetPlayerInterior(playerid,FFAPropertyInfo[found][InInterior]);
					SetPlayerVirtualWorld(playerid,(found+21)*31);
					FreezeBeforeObjects(playerid);
					return 1;
				}
			}
		}
	}else return 0;
	return 1;
}

CMD:pbuy(playerid, params[])
{
	if(PlayerInfo[playerid][PlayerMode] == FFA && PlayerInfo[playerid][Spawned] == 1)
	{
	    if(PlayerInfo[playerid][Registered] == 0)
	        return SendClientMessage(playerid,red1,"{FF0000}ERROR:{FFFFFF} You must be registered to buy a property.");
	    if(IsPlayerInAnyVehicle(playerid))
	        return SendClientMessage(playerid,red1,"{FF0000}ERROR:{FFFFFF} You cannot use this command in a vehicle.");
		new found=0, type = 0;
		if(FFAPlayerInfo[playerid][GangID] > 0 &&
			GangInfo[getFFAGangID(FFAPlayerInfo[playerid][GangID])][gLeaderID] == PlayerInfo[playerid][ID])
		{
		    if (sscanf(params, "d",type))
				return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /pbuy <0 = you / 1 = gang>");
			if(type < 0 || type > 1)
				return SendClientMessage(playerid, red1, "ERROR:{FFFFFF} Dumbfuck, either type 0 (you buy this property) or type 1 (gang buys this property).");
		}
		forLoop(i, MAX_FFA_PROPERTIES)
		{
		    if(found == 0)
		    {
				if(FFAPropertyInfo[i][Exists])
				{
					if(IsPlayerInRangeOfPoint(playerid, 3,FFAPropertyInfo[i][gOutX],FFAPropertyInfo[i][gOutY],FFAPropertyInfo[i][gOutZ]))
					{
						found=i;
						break;
					}
				}
			}
		}
		if(found > 0)
		{
		    if(FFAPropertyInfo[found][OwnerID] > 0)
		        return SendClientMessage(playerid,red1,"{FF0000}ERROR:{FFFFFF} You cannot buy this building, it is owned by someone else.");
			BuyFFAProperty(playerid, found, type);
		}
		else return SendClientMessage(playerid,red1,"{FF0000}ERROR:{FFFFFF} You must be at the entrance and the building must be for sale.");
	}else return SendClientMessage(playerid,red1,"{FF0000}ERROR:{FFFFFF} You must be in FFA.");
	return 1;
}
CMD:psell(playerid)
{
    if(PlayerInfo[playerid][PlayerMode] == FFA && PlayerInfo[playerid][Spawned] == 1)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	        return SendClientMessage(playerid,red1,"{FF0000}ERROR:{FFFFFF} You cannot use this command in a vehicle.");
		if(FFAPlayerInfo[playerid][Properties] == 0 && FFAPlayerInfo[playerid][GangID] == 0)
	    	return SendClientMessage(playerid,red1,"{FF0000}ERROR:{FFFFFF} You don't own any buildings.");
		if(FFAPlayerInfo[playerid][Properties] == 0 && FFAPlayerInfo[playerid][GangID] > 0 && getFFAGangProperties(FFAPlayerInfo[playerid][GangID]) == 0)
	    	return SendClientMessage(playerid,red1,"{FF0000}ERROR:{FFFFFF} You or your gang doesn't own any buildings.");
		new found=0;
		forLoop(i, MAX_FFA_PROPERTIES)
		{
		    if(found == 0)
		    {
				if(FFAPropertyInfo[i][Exists])
				{
					if(IsPlayerInRangeOfPoint(playerid, 3,FFAPropertyInfo[i][gOutX],FFAPropertyInfo[i][gOutY],FFAPropertyInfo[i][gOutZ]))
					{
						found=i;
						break;
					}
				}
			}
		}
		if(found > 0)
		{
		    if(FFAPropertyInfo[found][OwnerType] == FFA_OWNER_PLAYER && FFAPropertyInfo[found][OwnerID] != PlayerInfo[playerid][ID])
		        return SendClientMessage(playerid,red1,"{FF0000}ERROR:{FFFFFF} You do not own this building.");

			if(FFAPropertyInfo[found][OwnerType] == FFA_OWNER_GANG && FFAPlayerInfo[playerid][GangID] > 0 && FFAPropertyInfo[found][OwnerID] != FFAPlayerInfo[playerid][GangID])
				return SendClientMessage(playerid,red1,"{FF0000}ERROR:{FFFFFF} You do not own this building, your gang doesn't own this building.");

			if(FFAPropertyInfo[found][OwnerType] == FFA_OWNER_GANG && FFAPlayerInfo[playerid][GangID] > 0 && FFAPropertyInfo[found][OwnerID] == FFAPlayerInfo[playerid][GangID]
				&& GangInfo[getFFAGangID(FFAPlayerInfo[playerid][GangID])][gLeaderID] != PlayerInfo[playerid][ID])
		        return SendClientMessage(playerid,red1,"{FF0000}ERROR:{FFFFFF} You do not own this building, you're not the leader of the gang.");

            if(FFAPropertyInfo[found][OwnerType] == FFA_OWNER_GANG && FFAPlayerInfo[playerid][GangID] > 0 && FFAPropertyInfo[found][OwnerID] == FFAPlayerInfo[playerid][GangID]
				&& GangInfo[getFFAGangID(FFAPlayerInfo[playerid][GangID])][gLeaderID] == PlayerInfo[playerid][ID])
		        	SellFFAProperty(playerid, found, 1);
			else SellFFAProperty(playerid, found, 0);
		}
		else return SendClientMessage(playerid,red1,"{FF0000}ERROR:{FFFFFF} You must be at the entrance and own the building.");
	}else return SendClientMessage(playerid,red1,"{FF0000}ERROR:{FFFFFF} You must be in FFA.");
	return 1;
}

CMD:plock(playerid)
{
    if(PlayerInfo[playerid][PlayerMode] == FFA && PlayerInfo[playerid][Spawned] == 1)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	        return SendClientMessage(playerid,red1,"{FF0000}ERROR:{FFFFFF} You cannot use this command in a vehicle.");
	    if(FFAPlayerInfo[playerid][Properties] == 0 && FFAPlayerInfo[playerid][GangID] == 0)
	    	return SendClientMessage(playerid,red1,"{FF0000}ERROR:{FFFFFF} You don't own any buildings.");
		if(FFAPlayerInfo[playerid][Properties] == 0 && FFAPlayerInfo[playerid][GangID] > 0 && getFFAGangProperties(FFAPlayerInfo[playerid][GangID]) == 0)
	    	return SendClientMessage(playerid,red1,"{FF0000}ERROR:{FFFFFF} You or your gang doesn't own any buildings.");
		new found=0;
		forLoop(i, MAX_FFA_PROPERTIES)
		{
		    if(found == 0)
		    {
				if(FFAPropertyInfo[i][Exists])
				{
					if(IsPlayerInRangeOfPoint(playerid, 3,FFAPropertyInfo[i][gOutX],FFAPropertyInfo[i][gOutY],FFAPropertyInfo[i][gOutZ]))
					{
						found=i;
						break;
					}
					if(IsPlayerInRangeOfPoint(playerid, 3,FFAPropertyInfo[i][gInX],FFAPropertyInfo[i][gInY],FFAPropertyInfo[i][gInZ]) && GetPlayerInterior(playerid) == FFAPropertyInfo[i][InInterior] && GetPlayerVirtualWorld(playerid) == ((i+21)*31))
					{
						found=i;
						break;
					}
				}
			}
		}
		if(found > 0)
		{
		    if(FFAPropertyInfo[found][AllowedIn] == 0)
		        return SendClientMessage(playerid,red1,"{FF0000}ERROR:{FFFFFF} The building must have an entrance, you cannot lock/unlock this.");
            if(FFAPropertyInfo[found][OwnerType] == FFA_OWNER_PLAYER && FFAPropertyInfo[found][OwnerID] != PlayerInfo[playerid][ID])
		        return SendClientMessage(playerid,red1,"{FF0000}ERROR:{FFFFFF} You do not own this building.");

			if(FFAPropertyInfo[found][OwnerType] == FFA_OWNER_GANG && FFAPlayerInfo[playerid][GangID] > 0 && FFAPropertyInfo[found][OwnerID] != FFAPlayerInfo[playerid][GangID])
				return SendClientMessage(playerid,red1,"{FF0000}ERROR:{FFFFFF} You do not own this building, your gang doesn't own this building.");

			if(FFAPropertyInfo[found][OwnerType] == FFA_OWNER_GANG && FFAPlayerInfo[playerid][GangID] > 0 && FFAPropertyInfo[found][OwnerID] == FFAPlayerInfo[playerid][GangID]
				&& GangInfo[getFFAGangID(FFAPlayerInfo[playerid][GangID])][gLeaderID] != PlayerInfo[playerid][ID])
		        return SendClientMessage(playerid,red1,"{FF0000}ERROR:{FFFFFF} You do not own this building, you're not the leader of the gang.");
			LockFFAProperty(playerid, found);
		}
		else return SendClientMessage(playerid,red1,"{FF0000}ERROR:{FFFFFF} You must be at the entrance or inside and own the building.");
	}else return SendClientMessage(playerid,red1,"{FF0000}ERROR:{FFFFFF} You must be in FFA.");
	return 1;
}


CMD:changeffaspawn(playerid)
{
    if(PlayerInfo[playerid][PlayerMode] == FFA && PlayerInfo[playerid][Spawned] == 1)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	        return SendClientMessage(playerid,red1,"{FF0000}ERROR:{FFFFFF} You cannot use this command in a vehicle.");
	    if(FFAPlayerInfo[playerid][Properties] == 0 && FFAPlayerInfo[playerid][GangID] == 0)
	    	return SendClientMessage(playerid,red1,"{FF0000}ERROR:{FFFFFF} You don't own any buildings.");
		if(FFAPlayerInfo[playerid][Properties] == 0 && FFAPlayerInfo[playerid][GangID] > 0 && getFFAGangProperties(FFAPlayerInfo[playerid][GangID]) == 0)
	    	return SendClientMessage(playerid,red1,"{FF0000}ERROR:{FFFFFF} You or your gang doesn't own any buildings.");
		new found=0;
		forLoop(i, MAX_FFA_PROPERTIES)
		{
		    if(found == 0)
		    {
				if(FFAPropertyInfo[i][Exists] && FFAPropertyInfo[i][AllowedIn])
				{
					if(IsPlayerInRangeOfPoint(playerid, 3,FFAPropertyInfo[i][gInX],FFAPropertyInfo[i][gInY],FFAPropertyInfo[i][gInZ]) && GetPlayerInterior(playerid) == FFAPropertyInfo[i][InInterior] && GetPlayerVirtualWorld(playerid) == ((i+21)*31))
					{
						found=i;
						break;
					}
					if(IsPlayerInRangeOfPoint(playerid, 3,FFAPropertyInfo[i][gOutX],FFAPropertyInfo[i][gOutY],FFAPropertyInfo[i][gOutZ]))
					{
						found=i;
						break;
					}
				}
			}
		}
        SpawnInFFAProperty(playerid, found);
	}else return SendClientMessage(playerid,red1,"{FF0000}ERROR:{FFFFFF} You must be in FFA.");
	return 1;
}

CMD:ffatk(playerid,params[])
{
	if(PlayerInfo[playerid][PlayerMode] != FFA)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be in the FFA mode to use this command.");
	if(FFAPlayerInfo[playerid][GangID] == 0)
	    return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be in a gang to use this command.");
	
	if(FFAPlayerInfo[playerid][DisableTK] == 0)
	{
		SetPlayerTeam(playerid,playerid+MAX_FFA_GANGS);
		FFAPlayerInfo[playerid][DisableTK] = 1;
		SendClientMessage(playerid,green1,"Notice:{FFFFFF} Team kill is now enabled.");
	}
	else
	{
		FFAPlayerInfo[playerid][DisableTK] = 0;
		SetPlayerTeam(playerid, FFAPlayerInfo[playerid][GangID]);
		SendClientMessage(playerid,red1,"Notice:{FFFFFF} Team kill is now disabled.");
	}
	return 1;
}
CMD:ffapcreate(playerid,params[])
{
	if(PlayerInfo[playerid][Level] > 3)
	{
	    new name[50], price,string[228];
		if(FFAPropertyCount() >= MAX_FFA_PROPERTIES)return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You can't create a gang, no more gangs left.");
		if (sscanf(params, "p<|>s[50]d",name,price))
		{
			return SendClientMessage(playerid, red1, "Usage:{FFFFFF}/ffapcreate <name>|<price>");
		}
	    new pid;
		forLoop(i, MAX_FFA_PROPERTIES)
		{
			if(!FFAPropertyInfo[i][Exists])
			{
				pid = i;
				break;
			}
		}
	    new Float:x,Float:y,Float:z,Float:Ang;
		GetPlayerPos(playerid,x,y,z);
    	GetPlayerFacingAngle(playerid, Ang);
	    FFAPropertyInfo[pid][Exists] = 1;
	    FFAPropertyInfo[pid][ID] = 0;
	    FFAPropertyInfo[pid][OwnerID] = 0;
	    FFAPropertyInfo[pid][OwnerType] = FFA_OWNER_NOTHING;
	    format(FFAPropertyInfo[pid][gName],50,"%s",name);
	    format(FFAPropertyInfo[pid][Owner], 50,"No One");
	    FFAPropertyInfo[pid][gOutX] = floatround(x);
	    FFAPropertyInfo[pid][gOutY] = floatround(y);
	    FFAPropertyInfo[pid][gOutZ] = floatround(z);
	    FFAPropertyInfo[pid][gOutAng] = floatround(Ang);
	    FFAPropertyInfo[pid][Locked] = 0;
	    FFAPropertyInfo[pid][AllowedIn] = 0;
	    FFAPropertyInfo[pid][Price] = price;
		UpdateFFAPropertyText(pid);
        
	    DestroyTheDynamic3DTextLabel(FFAPropertyInfo[pid][gOutLabel]);
		DestroyTheDynamic3DTextLabel(FFAPropertyInfo[pid][gInLabel]);
		DestroyTheDynamicPickup(FFAPropertyInfo[pid][OutPickup]);
		DestroyTheDynamicPickup(FFAPropertyInfo[pid][InPickup]);
		DestroyTheDynamicMapIcon(FFAPropertyInfo[pid][MapIcon]);

	    FFAPropertyInfo[pid][gOutLabel] = CreateDynamic3DTextLabel("lele",0xFFFFFFAA,x,y,z+1, 15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, W_FFA, -1, -1, 100);
		FFAPropertyInfo[pid][MapIcon] = CreateDynamicMapIcon(FFAPropertyInfo[pid][gOutX],FFAPropertyInfo[pid][gOutY],FFAPropertyInfo[pid][gOutZ], 31, 1 , W_FFA, -1, -1, 100.0);
 		FFAPropertyInfo[pid][OutPickup]=CreateDynamicPickup(1273, 23,FFAPropertyInfo[pid][gOutX],FFAPropertyInfo[pid][gOutY],FFAPropertyInfo[pid][gOutZ], W_FFA);
        format(string, sizeof string, "{FF0000}Notice:{FFFFFF} Property '%s'(id: %d) - is created by %s",FFAPropertyInfo[pid][gName],FFAPropertyInfo[pid][ID],PlayerInfo[playerid][Name]);
		MessageToAllAdmins(red1,string);
		return 1;
	} else return 0;
}
CMD:ffapdestroy(playerid,params[])
{
	if(PlayerInfo[playerid][Level] > 3)
	{
	    new pid,string[228];
		if (sscanf(params, "s[50]d",pid))
		{
			return SendClientMessage(playerid, red1, "Usage:{FFFFFF}/ffapdestroy <property id>");
		}
		pid = getFFAPropertyID(pid);
	    if(FFAPropertyInfo[pid][Exists] == 0)
		    return SendClientMessage(playerid, red1, "ERROR:{FFFFFF} Property doesn't exist, shithead.");
	    DestroyFFAProperty(pid);
		format(string, sizeof string, "{FF0000}Notice:{FFFFFF} Property '%s'(id: %d) - is destroyed by %s",FFAPropertyInfo[pid][gName],FFAPropertyInfo[pid][ID],PlayerInfo[playerid][Name]);
		MessageToAllAdmins(red1,string);
		if(FFAPropertyInfo[pid][OwnerID] > 0)
		{
            if(FFAPropertyInfo[pid][OwnerType] == FFA_OWNER_PLAYER)
            {
				forLoop(p, MAX_PLAYERS)
				{
					if(IsPlayerConnected(p) && !IsPlayerNPC(p))
					{
					    if(FFAPropertyInfo[pid][OwnerID] == PlayerInfo[p][ID])
							FFAPlayerInfo[p][Properties]--;
					}
				}
			}
			else
			{
			    UpdateFFAGangText(getFFAGangID(FFAPropertyInfo[pid][OwnerID]),false);
			}
		}
		SaveFFAProperty(pid);
		return 1;
	} else return 0;
}
CMD:ffapname(playerid,params[])
{
	if(PlayerInfo[playerid][Level] > 3)
	{
	    new name[50],pid,string[228];
		if (sscanf(params, "p<|>ds[50]",pid,name))
		{
			return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /ffapname <property id>|<new name>");
		}
		pid = getFFAPropertyID(pid);
	    if(FFAPropertyInfo[pid][Exists] == 0)
		    return SendClientMessage(playerid, red1, "ERROR:{FFFFFF} Property doesn't exist, shithead.");

		format(string, sizeof string, "{FF0000}Notice:{FFFFFF} Property's name has been changed from '%s' to '%s'(id: %d) - by %s",FFAPropertyInfo[pid][gName],name,FFAPropertyInfo[pid][ID],PlayerInfo[playerid][Name]);
		MessageToAllAdmins(red1,string);
	    format(FFAPropertyInfo[pid][gName],50,"%s",name);
	    UpdateFFAPropertyText(pid,false);
        SaveExtraFFAProperties(pid);
		return 1;
	} else return 0;
}
CMD:ffapprice(playerid,params[])
{
	if(PlayerInfo[playerid][Level] > 3)
	{
	    new price,pid,string[228];
		if (sscanf(params, "p<|>dd",pid,price))
		{
			return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /ffapprice <property id>|<new price>");
		}
		pid = getFFAPropertyID(pid);
	    if(FFAPropertyInfo[pid][Exists] == 0)
		    return SendClientMessage(playerid, red1, "ERROR:{FFFFFF} Property doesn't exist, shithead.");

		format(string, sizeof string, "{FF0000}Notice:{FFFFFF} Property's price has been changed from '%d' to '%d'(%s id: %d) - by %s",FFAPropertyInfo[pid][Price],price,FFAPropertyInfo[pid][gName],FFAPropertyInfo[pid][Exists],PlayerInfo[playerid][Name]);
		MessageToAllAdmins(red1,string);
	    FFAPropertyInfo[pid][Price] = price;
	    UpdateFFAPropertyText(pid);
		return 1;
	} else return 0;
}

CMD:ffapsetout(playerid,params[])
{
	if(PlayerInfo[playerid][Level] > 3)
	{
	    new pid,string[228];
		if (sscanf(params, "d",pid))
		{
			return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /ffapsetout <property id>");
		}
		pid = getFFAPropertyID(pid);
	    if(FFAPropertyInfo[pid][Exists] == 0)
		    return SendClientMessage(playerid, red1, "ERROR:{FFFFFF} Property doesn't exist, shithead.");
	    new Float:x,Float:y,Float:z,Float:Ang;
		GetPlayerPos(playerid,x,y,z);
    	GetPlayerFacingAngle(playerid, Ang);
	    FFAPropertyInfo[pid][gOutX] = floatround(x);
	    FFAPropertyInfo[pid][gOutY] = floatround(y);
	    FFAPropertyInfo[pid][gOutZ] = floatround(z);
	    FFAPropertyInfo[pid][gOutAng] = floatround(Ang);

	    DestroyTheDynamic3DTextLabel(FFAPropertyInfo[pid][gOutLabel]);
		DestroyTheDynamicPickup(FFAPropertyInfo[pid][OutPickup]);
		DestroyTheDynamicMapIcon(FFAPropertyInfo[pid][MapIcon]);

	    FFAPropertyInfo[pid][gOutLabel] = CreateDynamic3DTextLabel("aa",0xFFFFFFAA,x,y,z+1, 15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, W_FFA, -1, -1, 100);
		FFAPropertyInfo[pid][OutPickup]=CreateDynamicPickup(1273, 23,FFAPropertyInfo[pid][gOutX],FFAPropertyInfo[pid][gOutY],FFAPropertyInfo[pid][gOutZ], W_FFA);

        if(FFAPropertyInfo[pid][OwnerID] == 0)
			FFAPropertyInfo[pid][MapIcon] = CreateDynamicMapIcon(FFAPropertyInfo[pid][gOutX],FFAPropertyInfo[pid][gOutY],FFAPropertyInfo[pid][gOutZ], 31, 1 , W_FFA, -1, -1, 100.0);
		else
			FFAPropertyInfo[pid][MapIcon] = CreateDynamicMapIcon(FFAPropertyInfo[pid][gOutX],FFAPropertyInfo[pid][gOutY],FFAPropertyInfo[pid][gOutZ], 32, 1 , W_FFA, -1, -1, 100.0);
		
		format(string, sizeof string, "{FF0000}Notice:{FFFFFF} Property '%s'(id: %d) - is created by %s",FFAPropertyInfo[pid][gName],FFAPropertyInfo[pid][Exists],PlayerInfo[playerid][Name]);
		MessageToAllAdmins(red1,string);
		UpdateFFAPropertyText(pid,false);
        SaveExtraFFAProperties(pid);
		format(string, sizeof string, "{FF0000}Notice:{FFFFFF} Property's exterior has been changed (%s id: %d) - by %s",FFAPropertyInfo[pid][gName],FFAPropertyInfo[pid][Exists],PlayerInfo[playerid][Name]);
		MessageToAllAdmins(red1,string);
		return 1;
	} else return 0;
}

CMD:ffapsetin(playerid,params[])
{
	if(PlayerInfo[playerid][Level] > 3)
	{
	    new pid,string[228];
		if (sscanf(params, "d",pid))
		{
			return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /ffapsetin <property id>");
		}
		pid = getFFAPropertyID(pid);
	    if(FFAPropertyInfo[pid][Exists] == 0)
		    return SendClientMessage(playerid, red1, "ERROR:{FFFFFF} Property doesn't exist, shithead.");

	    DestroyTheDynamic3DTextLabel(FFAPropertyInfo[pid][gInLabel]);
		DestroyTheDynamicPickup(FFAPropertyInfo[pid][InPickup]);

	    new Float:x,Float:y,Float:z,Float:Ang;
		GetPlayerPos(playerid,x,y,z);
    	GetPlayerFacingAngle(playerid, Ang);
		new inworld = (pid+21)*31;
	    FFAPropertyInfo[pid][gInX] = floatround(x);
	    FFAPropertyInfo[pid][gInY] = floatround(y);
	    FFAPropertyInfo[pid][gInZ] = floatround(z);
	    FFAPropertyInfo[pid][gInAng] = floatround(Ang);
		FFAPropertyInfo[pid][AllowedIn] = 1;
		FFAPropertyInfo[pid][InPickup] = CreateDynamicPickup(1273, 23,FFAPropertyInfo[pid][gInX],FFAPropertyInfo[pid][gInY],FFAPropertyInfo[pid][gInZ], inworld);
	    FFAPropertyInfo[pid][gInLabel] = CreateDynamic3DTextLabel("{CCCCCC}Press '{33FF33}ENTER{CCCCCC}' to exit", 0xCCCCCCAA,FFAPropertyInfo[pid][gInX],FFAPropertyInfo[pid][gInY],FFAPropertyInfo[pid][gInZ]+1, 15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, inworld, -1, -1, 100);

		format(string, sizeof string, "{FF0000}Notice:{FFFFFF} Property's interior has been changed (%s id: %d) - by %s",FFAPropertyInfo[pid][gName],FFAPropertyInfo[pid][Exists],PlayerInfo[playerid][Name]);
		MessageToAllAdmins(red1,string);
        SaveExtraFFAProperties(pid);
		return 1;
	} else return 0;
}

CMD:ffapdestroyin(playerid,params[])
{
	if(PlayerInfo[playerid][Level] > 3)
	{
	    new pid,string[228];
		if (sscanf(params, "d",pid))
		{
			return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /ffapdestroyin <property id>");
		}
		pid = getFFAPropertyID(pid);
	    if(FFAPropertyInfo[pid][Exists] == 0)
		    return SendClientMessage(playerid, red1, "ERROR:{FFFFFF} Property doesn't exist, shithead.");
		if(FFAPropertyInfo[pid][AllowedIn] == 0)
		    return SendClientMessage(playerid, red1, "ERROR:{FFFFFF} Property doesn't have an entrance.");
	    DestroyTheDynamic3DTextLabel(FFAPropertyInfo[pid][gInLabel]);
		DestroyTheDynamicPickup(FFAPropertyInfo[pid][InPickup]);

		FFAPropertyInfo[pid][AllowedIn] = 0;
		format(string, sizeof string, "{FF0000}Notice:{FFFFFF} Property's interior has been destroyed (%s id: %d) - by %s",FFAPropertyInfo[pid][gName],FFAPropertyInfo[pid][Exists],PlayerInfo[playerid][Name]);
		MessageToAllAdmins(red1,string);
        SaveExtraFFAProperties(pid);
		return 1;
	} else return 0;
}

CMD:ffapresetowner(playerid,params[])
{
	if(PlayerInfo[playerid][Level] > 3)
	{
	    new pid, owner[50],string[228];
		if (sscanf(params, "d",pid))
		{
			return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /ffapresetowner <property id>");
		}
		pid = getFFAPropertyID(pid);
	    if(FFAPropertyInfo[pid][Exists] == 0)
		    return SendClientMessage(playerid, red1, "ERROR:{FFFFFF} Property doesn't exist, shithead.");

		if(FFAPropertyInfo[pid][OwnerID] == 0)
	        return SendClientMessage(playerid, red1, "ERROR:{FFFFFF} Property isn't owned by anyone.");
        format(owner, 50,"%s",FFAPropertyInfo[pid][Owner]);
		format(FFAPropertyInfo[pid][Owner], 50,"No one");

 	    if(FFAPropertyInfo[pid][OwnerType] == FFA_OWNER_PLAYER)
			format(string, sizeof string, "{FF0000}Notice:{FFFFFF} Player %s has lost property '%s' (id %d) - by %s",owner,FFAPropertyInfo[pid][gName],FFAPropertyInfo[pid][ID],PlayerInfo[playerid][Name]);
		else
		{
		    format(string, sizeof string, "{FF0000}Notice:{FFFFFF} Gang %s has lost property '%s' (id %d) - by %s",owner,FFAPropertyInfo[pid][gName],FFAPropertyInfo[pid][ID],PlayerInfo[playerid][Name]);
		    UpdateFFAGangText(getFFAGangID(FFAPropertyInfo[pid][OwnerID]),false);
        }
		FFAPropertyInfo[pid][OwnerID] = 0;
	    FFAPropertyInfo[pid][Locked] = 0;
		format(FFAPropertyInfo[pid][Owner], 50,"No One");
		FFAPropertyInfo[pid][OwnerType] = FFA_OWNER_NOTHING;
		UpdateFFAPropertyText(pid);
		MessageToAllAdmins(red1,string);
		return 1;
	} else return 0;
}

CMD:ffagzonecreate(playerid,params[])
{
	if(PlayerInfo[playerid][Level] >= 3)
	{
	    new name[50], id = -1;
        if (sscanf(params, "s[50]",name)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /ffagzonecreate <name>");
    	new Float:x,Float:y,Float:z;
		GetPlayerPos(playerid,x,y,z);
		id = FFACreateGangZone(name, 0, 0, floatround(x), floatround(y), floatround(z));
		if(id != -1)
		{
			UpdateFFAGangZoneText(id);
	    	SendClientMessage(playerid, red1, "Notice:{FFFFFF} You created a gang zone.");
  		}
  		else SendClientMessage(playerid, red1, "Notice:{FFFFFF} Gang zone can't be created.");
		return 1;
	} else return 0;
}
CMD:ffagzonename(playerid,params[])
{
	if(PlayerInfo[playerid][Level] >= 3)
	{
	    new name[50],i;
        if (sscanf(params, "ds[50]",i,name)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /ffagzonename <id> <name>");
        i = getTheZoneID(i);
    	if(!FFAGangZones[i][Exists]) return SendClientMessage(playerid, red1, "No such zone id.");
		format(FFAGangZones[i][Name],50,"%s",name);
		UpdateFFAGangZoneText(i);
	    SendClientMessage(playerid, red1, "Notice:{FFFFFF} You edited a gang zone.");
		return 1;
	} else return 0;
}
CMD:ffagzonedel(playerid,params[])
{
	if(PlayerInfo[playerid][Level] >= 3)
	{
	    new i;
        if (sscanf(params, "d",i)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /ffagzonedel <id>");
        i = getTheZoneID(i);
	    FFAGangZones[i][Exists] = 0;
        if(FFAGangZones[i][Captured] > 0)
			UpdateFFAGangText(getFFAGangID(FFAGangZones[i][Captured]));
        SaveFFAZone(i);
        FFADestroyGangZone(i);
    	SendClientMessage(playerid, red1, "Notice:{FFFFFF} You deleted a gang zone.");
		return 1;
	} else return 0;
}


CMD:carhealth(playerid,params[]) {
	if(PlayerInfo[playerid][Level] >= 4) {
	    new player1,health,string[128];
		if (sscanf(params, "dd",player1,health)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /carhealth <playerid> <amount>");
		if(IsPlayerConnected(player1) && player1 != INVALID_PLAYER_ID) {
            if(IsPlayerInAnyVehicle(player1)) {
				if(PlayerInfo[player1][Level] > PlayerInfo[playerid][Level]) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} It is not necessary for this player.");
				format(string, sizeof(string), "Notice:{FFFFFF} You have set %s's vehicle health to %d", PlayerInfo[player1][Name], health); SendClientMessage(playerid,blue,string);
				return SetVehicleHealth(GetPlayerVehicleID(player1), health);
			} else return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Player is not in a vehicle");
	    } else return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Player is not connected");
	} else return 0;
}
CMD:carcolor(playerid,params[])
{
	if(PlayerInfo[playerid][PlayerMode] == TRP)return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command in this mode..");
	new color[2];
	if (sscanf(params, "dd",color[0],color[1])) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /carcolor <col id> <col id>");
	if(PlayerInfo[playerid][PlayerMode] == TRP && PlayerInfo[playerid][Level] < 2)return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command in this mode..");
	if(!(GetPlayerState(playerid) == PLAYER_STATE_DRIVER))return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You must be in a vehicle(driver) in order to use this cmd.");
	ChangeVehicleColor(GetPlayerVehicleID(playerid), color[0],color[1]);
	return 1;
}

CMD:god(playerid) {
	if(PlayerInfo[playerid][Level] >= 4) {
    	if(PlayerInfo[playerid][God] == 0)	{
   	    	PlayerInfo[playerid][God] = 1;
    	    SetHealth(playerid,100000);
           	SendClientMessage(playerid,red1,"Notice:{FFFFFF} God mode is on.");
			return 1;
		} else {
   	        PlayerInfo[playerid][God] = 0;
       	    SendClientMessage(playerid,green1,"Notice:{FFFFFF} God mode is off.");
		} return SetHealth(playerid, 99.0);
	} else return 0;
}

CMD:godcar(playerid) {
	if(PlayerInfo[playerid][Level] >= 4) {
		if(IsPlayerInAnyVehicle(playerid)) {
	    	if(PlayerInfo[playerid][GodCar] == 0) {
        		PlayerInfo[playerid][GodCar] = 1;
            	return SendClientMessage(playerid,red1,"Notice:{FFFFFF} Vehicle god mode is on.");
			} else {
	            PlayerInfo[playerid][GodCar] = 0;
    	        return SendClientMessage(playerid,green1,"Notice:{FFFFFF} Vehicle god mode is off."); }
		} else return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} You need to be in a car to use this command");
	} else return 0;
}

CMD:getid(playerid,params[]) {
	if(PlayerInfo[playerid][PlayerMode] == TRP)return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command in this mode..");
	new found, string[128],name[50];
	if (sscanf(params, "s[50]",name)) return SendClientMessage(playerid,blue,"Usage: /getid <nickname>");
	format(string,sizeof(string),"Notice:{FFFFFF} Searched for: %s ",name);
	SendClientMessage(playerid,blue,string);
	forLoop(i, MAX_PLAYERS)
	{
		if(IsPlayerConnected(i))
		{
	  		new namelen = strlen(PlayerInfo[i][Name]);
			new bool:searched=false;
			forLoop(pos, namelen)
			{
				if(searched != true)
				{
					if(strfind(PlayerInfo[i][Name],name,true) == pos)
					{
		                found++;
						format(string,sizeof(string),"%d. %s (ID %d)",found,PlayerInfo[i][Name],i);
						SendClientMessage(playerid, green1 ,string);
						searched = true;
					}
				}
			}
		}
	}
	if(found == 0) SendClientMessage(playerid,red1, "Error:{FFFFFF} No players have this in their nick");
	return 1;
}

CMD:bsay(playerid,params[]) {
	if(PlayerInfo[playerid][Level] > 2)
	{
		new msg[90],type,string[128];
		if (sscanf(params, "ds[90]",type,msg)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /bsay <0=mode/1=global> <text>");
		format(string, sizeof(string), "Llama Bot: {FFFFFF}%s",msg);
	    if(type == 0)
		{
			SendMessageToPlayerMode(playerid, red1, string);
			format(string, sizeof(string), "[Llama Bot]: %s",msg);
			db_SaveChat(-1, PlayerInfo[playerid][PlayerMode],string);
		}
		else
		{
			SendMessageToAll(true, red1,string);
			format(string, sizeof(string), "[Llama Bot]: %s",msg);
			db_SaveChat(-1, -1, string);
		}
  	}
	else return 0;
	return 1;
}


CMD:g(playerid,params[]) {
    if(ServerInfo[GlobalChat] == 0)return 0;
	if(PlayerInfo[playerid][PlayerMode] == TRP)return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command in this mode..");
	new msg[90],mode,string[228];
	if(PlayerInfo[playerid][Muted] > 0)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You are muted, you can not talk at this moment.");
	if (sscanf(params, "ds[90]",mode,msg)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /g <0=ALL/1=TW/2=STUNT/3=FFA/4=TL/5=CO/6=CTF/7=DM/8=ZO/9=PJ/10=PTP/11=GK/12=GK> <text>");
	if(mode < 0 || mode > 12) return SendClientMessage(playerid, red1, "Error:{FFFFFF} Wrong mode id.");
	if(mode == 0)
	{
	    format(string,sizeof(string),"[To ALL from %s] {FFFFFF}%s{67F6F6}[%d]:{FFFFFF} %s",PlayerModeNamesABV[PlayerInfo[playerid][PlayerMode]],PlayerInfo[playerid][Name],playerid,msg);
		SendMessageToAll(false, red1,string);
		format(string, sizeof(string), "[To ALL from %s] %s[%d]: %s",PlayerModeNamesABV[PlayerInfo[playerid][PlayerMode]],PlayerInfo[playerid][Name],playerid, msg);
		db_SaveChat(-1, -1, string);
		return 1;
	}
	else if(mode == 1)
	{
	    if(GetPlayerMode(playerid) == TW) return SendClientMessage(playerid, red1, "Error:{FFFFFF} Wrong mode id.");
		format(string,sizeof(string),"[To TW from %s] {FFFFFF}%s{67F6F6}[%d]:{FFFFFF} %s",PlayerModeNamesABV[PlayerInfo[playerid][PlayerMode]],PlayerInfo[playerid][Name],playerid,msg);
		SendMessageToPlayerMode(playerid, red1, string);
		SendMessageToMode(TW, red1, string);
		format(string, sizeof(string), "[To TW from %s] %s[%d]: %s",PlayerModeNamesABV[PlayerInfo[playerid][PlayerMode]],PlayerInfo[playerid][Name],playerid, msg);
		db_SaveChat(-1, PlayerInfo[playerid][PlayerMode],string);
		db_SaveChat(-1, TW,string);
		return 1;
	}
	else if(mode == 2)
	{
		if(GetPlayerMode(playerid) == STUNT) return SendClientMessage(playerid, red1, "Error:{FFFFFF} Wrong mode id.");
		format(string,sizeof(string),"[To STUNT from %s] {FFFFFF}%s{67F6F6}[%d]:{FFFFFF} %s",PlayerModeNamesABV[PlayerInfo[playerid][PlayerMode]],PlayerInfo[playerid][Name],playerid,msg);
		SendMessageToPlayerMode(playerid, red1, string);
		SendMessageToMode(STUNT, red1, string);
		format(string, sizeof(string), "[To STUNT from %s] %s[%d]: %s",PlayerModeNamesABV[PlayerInfo[playerid][PlayerMode]],PlayerInfo[playerid][Name],playerid, msg);
		db_SaveChat(-1, PlayerInfo[playerid][PlayerMode],string);
		db_SaveChat(-1, STUNT,string);
		return 1;
	}
	else if(mode == 3)
	{
		if(GetPlayerMode(playerid) == FFA) return SendClientMessage(playerid, red1, "Error:{FFFFFF} Wrong mode id.");
		format(string,sizeof(string),"[To FFA from %s] {FFFFFF}%s{67F6F6}[%d]:{FFFFFF} %s",PlayerModeNamesABV[PlayerInfo[playerid][PlayerMode]],PlayerInfo[playerid][Name],playerid,msg);
		SendMessageToPlayerMode(playerid, red1, string);
		SendMessageToMode(FFA, red1, string);
		format(string, sizeof(string), "[To FFA from %s] %s[%d]: %s",PlayerModeNamesABV[PlayerInfo[playerid][PlayerMode]],PlayerInfo[playerid][Name],playerid, msg);
		db_SaveChat(-1, PlayerInfo[playerid][PlayerMode],string);
		db_SaveChat(-1, FFA,string);
		return 1;
	}
	else if(mode == 4)
	{
		if(GetPlayerMode(playerid) == TL) return SendClientMessage(playerid, red1, "Error:{FFFFFF} Wrong mode id.");
		format(string,sizeof(string),"[To TL from %s] {FFFFFF}%s{67F6F6}[%d]:{FFFFFF} %s",PlayerModeNamesABV[PlayerInfo[playerid][PlayerMode]],PlayerInfo[playerid][Name],playerid,msg);
		SendMessageToPlayerMode(playerid, red1, string);
		SendMessageToMode(TL, red1, string);
		format(string, sizeof(string), "[To TL from %s] %s[%d]: %s",PlayerModeNamesABV[PlayerInfo[playerid][PlayerMode]],PlayerInfo[playerid][Name],playerid, msg);
		db_SaveChat(-1, PlayerInfo[playerid][PlayerMode],string);
		db_SaveChat(-1, TL,string);
		return 1;
	}
	else if(mode == 5)
	{
		if(GetPlayerMode(playerid) == CO) return SendClientMessage(playerid, red1, "Error:{FFFFFF} Wrong mode id.");
		format(string,sizeof(string),"[To CO from %s] {FFFFFF}%s{67F6F6}[%d]:{FFFFFF} %s",PlayerModeNamesABV[PlayerInfo[playerid][PlayerMode]],PlayerInfo[playerid][Name],playerid,msg);
		SendMessageToPlayerMode(playerid, red1, string);
		SendMessageToMode(CO, red1, string);
		format(string, sizeof(string), "[To CO from %s] %s[%d]: %s",PlayerModeNamesABV[PlayerInfo[playerid][PlayerMode]],PlayerInfo[playerid][Name],playerid, msg);
		db_SaveChat(-1, PlayerInfo[playerid][PlayerMode],string);
		db_SaveChat(-1, CO,string);
		return 1;
	}
	else if(mode == 6)
	{
		if(GetPlayerMode(playerid) == CTF) return SendClientMessage(playerid, red1, "Error:{FFFFFF} Wrong mode id.");
		format(string,sizeof(string),"[To CTF from %s] {FFFFFF}%s{67F6F6}[%d]:{FFFFFF} %s",PlayerModeNamesABV[PlayerInfo[playerid][PlayerMode]],PlayerInfo[playerid][Name],playerid,msg);
		SendMessageToPlayerMode(playerid, red1, string);
		SendMessageToMode(CTF, red1, string);
		format(string, sizeof(string), "[To CTF from %s] %s[%d]: %s",PlayerModeNamesABV[PlayerInfo[playerid][PlayerMode]],PlayerInfo[playerid][Name],playerid, msg);
		db_SaveChat(-1, PlayerInfo[playerid][PlayerMode],string);
		db_SaveChat(-1, CTF,string);
		return 1;
	}
	else if(mode == 7)
	{
		if(GetPlayerMode(playerid) == DM) return SendClientMessage(playerid, red1, "Error:{FFFFFF} Wrong mode id.");
		format(string,sizeof(string),"[To DM from %s] {FFFFFF}%s{67F6F6}[%d]:{FFFFFF} %s",PlayerModeNamesABV[PlayerInfo[playerid][PlayerMode]],PlayerInfo[playerid][Name],playerid,msg);
		SendMessageToPlayerMode(playerid, red1, string);
		SendMessageToMode(DM, red1, string);
		format(string, sizeof(string), "[To DM from %s] %s[%d]: %s",PlayerModeNamesABV[PlayerInfo[playerid][PlayerMode]],PlayerInfo[playerid][Name],playerid, msg);
		db_SaveChat(-1, PlayerInfo[playerid][PlayerMode],string);
		db_SaveChat(-1, DM,string);
		return 1;
	}
	else if(mode == 8)
	{
		if(GetPlayerMode(playerid) == ZO) return SendClientMessage(playerid, red1, "Error:{FFFFFF} Wrong mode id.");
		format(string,sizeof(string),"[To ZO from %s] {FFFFFF}%s{67F6F6}[%d]:{FFFFFF} %s",PlayerModeNamesABV[PlayerInfo[playerid][PlayerMode]],PlayerInfo[playerid][Name],playerid,msg);
		SendMessageToPlayerMode(playerid, red1, string);
		SendMessageToMode(ZO, red1, string);
		format(string, sizeof(string), "[To ZO from %s] %s[%d]: %s",PlayerModeNamesABV[PlayerInfo[playerid][PlayerMode]],PlayerInfo[playerid][Name],playerid, msg);
		db_SaveChat(-1, PlayerInfo[playerid][PlayerMode],string);
		db_SaveChat(-1, ZO,string);
		return 1;
	}
	else if(mode == 9)
	{
		if(GetPlayerMode(playerid) == PJ) return SendClientMessage(playerid, red1, "Error:{FFFFFF} Wrong mode id.");
		format(string,sizeof(string),"[To PJ from %s] {FFFFFF}%s{67F6F6}[%d]:{FFFFFF} %s",PlayerModeNamesABV[PlayerInfo[playerid][PlayerMode]],PlayerInfo[playerid][Name],playerid,msg);
		SendMessageToPlayerMode(playerid, red1, string);
		SendMessageToMode(PJ, red1, string);
		format(string, sizeof(string), "[To PJ from %s] %s[%d]: %s",PlayerModeNamesABV[PlayerInfo[playerid][PlayerMode]],PlayerInfo[playerid][Name],playerid, msg);
		db_SaveChat(-1, PlayerInfo[playerid][PlayerMode],string);
		db_SaveChat(-1, PJ,string);
		return 1;
	}
	else if(mode == 10)
	{
		if(GetPlayerMode(playerid) == PTP) return SendClientMessage(playerid, red1, "Error:{FFFFFF} Wrong mode id.");
		format(string,sizeof(string),"[To PTP from %s] {FFFFFF}%s{67F6F6}[%d]:{FFFFFF} %s",PlayerModeNamesABV[PlayerInfo[playerid][PlayerMode]],PlayerInfo[playerid][Name],playerid,msg);
		SendMessageToPlayerMode(playerid, red1, string);
		SendMessageToMode(PTP, red1, string);
		format(string, sizeof(string), "[To PTP from %s] %s[%d]: %s",PlayerModeNamesABV[PlayerInfo[playerid][PlayerMode]],PlayerInfo[playerid][Name],playerid, msg);
		db_SaveChat(-1, PlayerInfo[playerid][PlayerMode],string);
		db_SaveChat(-1, PTP,string);
		return 1;
	}
	else if(mode == 11)
	{
		if(GetPlayerMode(playerid) == GK) return SendClientMessage(playerid, red1, "Error:{FFFFFF} Wrong mode id.");
		format(string,sizeof(string),"[To GK from %s] {FFFFFF}%s{67F6F6}[%d]:{FFFFFF} %s",PlayerModeNamesABV[PlayerInfo[playerid][PlayerMode]],PlayerInfo[playerid][Name],playerid,msg);
		SendMessageToPlayerMode(playerid, red1, string);
		SendMessageToMode(GK, red1, string);
		format(string, sizeof(string), "[To GK from %s] %s[%d]: %s",PlayerModeNamesABV[PlayerInfo[playerid][PlayerMode]],PlayerInfo[playerid][Name],playerid, msg);
		db_SaveChat(-1, PlayerInfo[playerid][PlayerMode],string);
		db_SaveChat(-1, GK,string);
		return 1;
	}
	else if(mode == 12)
	{
		if(GetPlayerMode(playerid) == VW) return SendClientMessage(playerid, red1, "Error:{FFFFFF} Wrong mode id.");
		format(string,sizeof(string),"[To VW from %s] {FFFFFF}%s{67F6F6}[%d]:{FFFFFF} %s",PlayerModeNamesABV[PlayerInfo[playerid][PlayerMode]],PlayerInfo[playerid][Name],playerid,msg);
		SendMessageToPlayerMode(playerid, red1, string);
		SendMessageToMode(VW, red1, string);
		format(string, sizeof(string), "[To VW from %s] %s[%d]: %s",PlayerModeNamesABV[PlayerInfo[playerid][PlayerMode]],PlayerInfo[playerid][Name],playerid, msg);
		db_SaveChat(-1, PlayerInfo[playerid][PlayerMode],string);
		db_SaveChat(-1, VW,string);
		return 1;
	}
	return 1;
}
CMD:a(playerid,params[])
{
	if(!PlayerInfo[playerid][Level])return 0;
    new string[290],msg[220];
	if(PlayerInfo[playerid][Muted] > 0)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You are muted, you can not talk at this moment.");
	if (sscanf(params, "s[220]",msg)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /a <text>");
	format(string,sizeof(string),"{FFFFFF}[Admin Chat] {FF0000}%s(ID:%d): {FFFFFF}%s",PlayerInfo[playerid][Name],playerid,msg);
	MessageToAllAdmins(red1,string);
	format(string, sizeof(string), "[Admin chat] %s[ID:%d]: %s",PlayerInfo[playerid][Name],playerid,msg);
	db_SaveForAdminText(string);
	return 1;
}
CMD:asay(playerid,params[]) {
	if(!PlayerInfo[playerid][Level])return 0;
    new msg[90],type,string[128];
	if(PlayerInfo[playerid][Muted] > 0)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You are muted, you can not talk at this moment.");
	if (sscanf(params, "ds[90]",type,msg)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /asay <0=mode/1=global> <text>");
	if(PlayerInfo[playerid][Level] == 1)format(string, sizeof(string), "[Test Admin] %s: {FFFFFF}%s", PlayerInfo[playerid][Name],msg);
	if(PlayerInfo[playerid][Level] == 2)format(string, sizeof(string), "[Moderator] %s: {FFFFFF}%s", PlayerInfo[playerid][Name], msg );
	if(PlayerInfo[playerid][Level] == 3)format(string, sizeof(string), "[Admin] %s: {FFFFFF}%s", PlayerInfo[playerid][Name], msg);
    if(PlayerInfo[playerid][Level] == 4)format(string, sizeof(string), "[Lead Admin] %s: {FFFFFF}%s", PlayerInfo[playerid][Name], msg);
    if(PlayerInfo[playerid][Level] == 5)format(string, sizeof(string), "[Head Admin] %s: {FFFFFF}%s", PlayerInfo[playerid][Name], msg);
    if(PlayerInfo[playerid][Level] > 5)format(string, sizeof(string), "[Master] %s: {FFFFFF}%s", PlayerInfo[playerid][Name],msg);

	if(type == 0)
	{
		SendMessageToPlayerMode(playerid, red1, string);
		format(string, sizeof(string), "[Admin %s]: %s", PlayerInfo[playerid][Name],msg);
		db_SaveChat(-1, PlayerInfo[playerid][PlayerMode],string);
	}
	else
	{
		SendMessageToAll(true, red1,string);
		format(string, sizeof(string), "[Admin %s]: %s", PlayerInfo[playerid][Name],msg);
		db_SaveChat(-1, -1, string);
	}

	return 1;
}

CMD:vipsay(playerid,params[]) {
	if(!PlayerInfo[playerid][VIP])return 0;
	if(PlayerInfo[playerid][Muted] > 0)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You are muted, you can not talk at this moment.");
	if(PlayerInfo[playerid][PlayerMode] == TRP)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You cannot use this command in this mode..");
	new msg[90],string[128];
	if (sscanf(params, "s[90]",msg))return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /vipsay <text>");
	format(string, sizeof(string), "**VIP** %s: {FFFFFF}%s", PlayerInfo[playerid][Name], msg);
    SendMessageToPlayerMode(playerid, red1, string);
	return 1;
}

CMD:ping(playerid,params[]) {
	if(PlayerInfo[playerid][Level] >= 1) {
	    new player1, string[128];
        if (sscanf(params, "d",player1)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /ping <playerid>");
		if(IsPlayerConnected(player1) && player1 != INVALID_PLAYER_ID) {
		    new Sum, Average, x;
			new loop_breaker;
			while (x < PING_MAX_EXCEEDS)
			{
				//printf("loop at CMD:ping, counter val %d",loop_breaker);
				if(breakLoop(++loop_breaker, "CMD:ping"))break;
				Sum += PlayerInfo[player1][pPing][x];
				x++;
			}
			Average = (Sum / PING_MAX_EXCEEDS);
			format(string, sizeof(string), "%s (id %d) Average Ping: %d   (Last ping readings: %d, %d, %d, %d)", PlayerInfo[player1][Name], player1, Average, PlayerInfo[player1][pPing][0], PlayerInfo[player1][pPing][1], PlayerInfo[player1][pPing][2], PlayerInfo[player1][pPing][3] );
			return SendClientMessage(playerid,blue,string);
		} else return SendClientMessage(playerid, red, "{FF0000}Error: {FFFFFF}Player is not connected");
	} else return 0;
}

CMD:serverinfo(playerid) {
	if(PlayerInfo[playerid][Level] > 5) {
	    new TotalVehicles = AddStaticVehicle(411, 0, 0, 0, 0, 0, 0);    CarDeleter(TotalVehicles);
		new numo = CreateTheDynamicObject(1245,0,0,1000,0,0,0);	DestroyDynamicObject(numo);
		new nump = CreatePickup(371,2,0,0,1000);	DestroyPickup(nump);
		new gz = GangZoneCreate(3,3,5,5);	GangZoneDestroy(gz);
		new model[250], nummodel;
		forLoopV(i,1,TotalVehicles)model[GetVehicleModel(i)-400]++;
		forLoop(i, 250)	if(model[i]!=0)	nummodel++;
        new string[256];
		format(string,sizeof(string),"Server Info: [ Players Connected: %d || Maximum Players: %d ] [Ratio %0.2f ]",WConnectedPlayers(),GetMaxPlayers(),Float:WConnectedPlayers() / Float:GetMaxPlayers() );
		SendClientMessage(playerid,green,string);
		format(string,sizeof(string)," [ Vehicles: %d || Models %d || Players In Vehicle: %d || InCar %d / OnBike %d ]",TotalVehicles-1,nummodel, InVehCount(),InCarCount(),OnBikeCount() );
		SendClientMessage(playerid,green,string);
		format(string,sizeof(string)," [ Objects: %d || Pickups %d || Gangzones %d ]",numo-1,nump, gz);
		SendClientMessage(playerid,green,string);
		format(string,sizeof(string)," [ Players In Jail %d || Players Frozen %d || Muted %d ]",JailedPlayers(),FrozenPlayers(), MutedPlayers() );
		return SendClientMessage(playerid,green,string);
	}else return 0;
}
CMD:fixtw(playerid) {
	if(PlayerInfo[playerid][Level] > 3) {
	    ChangeTheGame();
	    return 1;
	}else return 0;
}
CMD:fixgk(playerid) {
	if(PlayerInfo[playerid][Level] > 3)
	{
	    new str[128];
		GKCreateCase(-204.4581,-32.0017,3.1172);
	    format(str, sizeof str,"{33FF33}NEWS:{FFFFFF} Admin %s has respawned the bag!",PlayerInfo[playerid][Name]);
		SendMessageToMode(GK,white, str);
	    format(str, sizeof str,"[NEWS] Admin %s has respawned the bag!",PlayerInfo[playerid][Name]);
		db_SaveChat(-1,GK,str);
	    return 1;
	}else return 0;
}
CMD:fixzo(playerid, params[])
{
    if(PlayerInfo[playerid][Level] < 2) return 0;
	ZOInfo[TimeLeft] = 5000;
    forLoop(y, MAX_PLAYERS)
	{
		if(!IsPlayerConnected(y) || IsPlayerNPC(y))continue;
 		if(PlayerInfo[y][PlayerMode] == ZO && PlayerInfo[y][Spawned] == 1)
		{
 			ZOPlayerInfo[y][Chosen] = 0;
		 	SetHealth(y,99.9);
			TogglePlayerControllable(y,false);
			SetPlayerWorldBounds(y, 20000.0000, -20000.0000, 20000.0000, -20000.0000 );
 			GameTextForPlayer(y," ",1000,6);
 			hideZOTexts(y);
			if(GetPlayerState(y) != PLAYER_STATE_WASTED)
			{
				SpawnPlayerTimer(y, 1000);
			}
		}
	}
	SendMessageToMode(ZO,white, "{33FF33}ZO Mode{FFFFFF} has been restarted by admin!");
	ChangeMapZO();
	return 1;
}
CMD:fixptp(playerid) {
	if(PlayerInfo[playerid][Level] > 3)
	{
     	forLoop(y, MAX_PLAYERS)
		{
			if(!IsPlayerConnected(y) || IsPlayerNPC(y))continue;
     		if(PlayerInfo[y][PlayerMode] == PTP && PlayerInfo[y][Spawned] == 1)
			{
				SetPlayerWorldBounds(y, 20000.0000, -20000.0000, 20000.0000, -20000.0000 );
				if(PTPPlayerInfo[y][Class] == PRESIDENT || PTPPlayerInfo[y][Class] == VICE || PTPPlayerInfo[y][Class] == SECURITY)
			    {
			        PTPPlayerInfo[y][Class] = CIVILIAN;
			    }
				if(GetPlayerState(y) != PLAYER_STATE_WASTED)
				{
					SpawnPlayerTimer(y, 1000);
				}
			}
		}
	    ChangeMapPTP();
	    return 1;
	}else return 0;
}

CMD:fixco(playerid) {
	if(PlayerInfo[playerid][Level] > 3) {
     	forLoop(y, MAX_PLAYERS)
		{
			if(!IsPlayerConnected(y) || IsPlayerNPC(y))continue;
     		if(PlayerInfo[y][PlayerMode] == CO && PlayerInfo[y][Spawned] == 1)
			{
			    PlayerInfo[y][EnteredZone] = -1;
		 		PlayerInfo[y][ZoneDead] = 1;
		 		COPlayerInfo[y][InJail] = 0;
		 		PlayerInfo[y][lCountDown]=-1;
				SetPlayerWorldBounds(y, 20000.0000, -20000.0000, 20000.0000, -20000.0000 );
				if(GetPlayerState(y) != PLAYER_STATE_WASTED)
				{
					SpawnPlayerTimer(y, 1000);
				}
			}
		}
		COInfo[BeingReleased]=0;
	    ChangeMapCO();
	    return 1;
	}else return 0;
}

CMD:fixvw(playerid)
{
	if(PlayerInfo[playerid][Level] > 3)
	{
     	forLoop(y, MAX_PLAYERS)
		{
			if(!IsPlayerConnected(y) || IsPlayerNPC(y))continue;
     		if(PlayerInfo[y][PlayerMode] == VW && PlayerInfo[y][Spawned] == 1)
			{
			    VWPlayerInfo[y][Deployed] = 0;

				SetPlayerWorldBounds(y, 20000.0000, -20000.0000, 20000.0000, -20000.0000 );
				if(GetPlayerState(y) != PLAYER_STATE_WASTED)
				{
					SpawnPlayerTimer(y, 1000);
				}
			}
		}
	    VWChangeMap();
	    return 1;
	}else return 0;
}
CMD:fixctf(playerid) {
	if(PlayerInfo[playerid][Level] > 3) {
     	forLoop(y, MAX_PLAYERS)
		{
			if(!IsPlayerConnected(y) || IsPlayerNPC(y))continue;
     		if(PlayerInfo[y][PlayerMode] == CTF && PlayerInfo[y][Spawned] == 1)
			{
				CTFPlayerInfo[y][Capturing] = 0;
				RemovePlayerAttachedObject(y, 8);
				SetPlayerWorldBounds(y, 20000.0000, -20000.0000, 20000.0000, -20000.0000 );
				if(GetPlayerState(y) != PLAYER_STATE_WASTED)
				{
					SpawnPlayerTimer(y, 1000);
				}
			}
		}
	    ChangeMapCTF();
	    return 1;
	}else return 0;
}
CMD:fixtl(playerid) {
	if(PlayerInfo[playerid][Level] > 3) {
	    ChangeMapTL();
     	forLoop(y, MAX_PLAYERS)
		{
			if(!IsPlayerConnected(y) || IsPlayerNPC(y))continue;
     		if(PlayerInfo[y][PlayerMode] == TL && PlayerInfo[y][Spawned] == 1)
			{
				SetPlayerWorldBounds(y, 20000.0000, -20000.0000, 20000.0000, -20000.0000 );
				if(GetPlayerState(y) != PLAYER_STATE_WASTED)
				{
					SpawnPlayerTimer(y, 1000);
				}
			}
		}
	    return 1;
	}else return 0;
}


CMD:ann(playerid,params[]) {
    if(PlayerInfo[playerid][Level] >= 1) {
    	new msg[90],type;
		if (sscanf(params, "ds[90]",type,msg))return SendClientMessage(playerid,red1,"Usage: {FFFFFF} /announce <0=mode/1=global> <text>");
		if(type == 0)
		{
		    if(PlayerInfo[playerid][Spawned] == 0)return SendClientMessage(playerid,red1,"Error: {FFFFFF} You must be spawned to use type 0");
		 	GameTextForMode(PlayerInfo[playerid][PlayerMode], msg,5000, 3);
		}
		else
            GameTextForAll(msg,5000,3);
		return 1;
    } else return 0;
}

CMD:ann2(playerid,params[]) {
    if(PlayerInfo[playerid][Level] >= 2)
	{
        new style,time,text[90],type;
        if (sscanf(params, "ddds[90]",type,style,time,text))return SendClientMessage(playerid,red1,"Usage: /ann2{FFFFFF} <0=mode/1=global> <style> <time(seconds)> <text>");
		if((style <= 0 && style > 6) || style == 2)	return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Invalid gametext style. Range: 0 - 6");
        if(type == 0)
		{
		    if(PlayerInfo[playerid][Spawned] == 0)return SendClientMessage(playerid,red1,"Error: {FFFFFF} You must be spawned to use type 0");
		 	GameTextForMode(PlayerInfo[playerid][PlayerMode], text, time*1000, style);
		}
		else
            GameTextForAll(text, time*1000, style);
		return 1;
    } else return 0;
}

CMD:jetpack(playerid,params[]) {
    if(PlayerInfo[playerid][Level] >= 3)
	{
	    new string[128],player1,name[50];
	    sscanf(params, "s[50]",name);
		if(!strlen(name)) player1 = playerid;
		else
		{
		    if(!IsNumericForID(name))  player1 = ReturnPlayerID(name); else player1 = strval(name);
		}
		if(player1 == playerid)return SetPlayerSpecialAction(player1, 2);
	  	else if(IsPlayerConnected(player1) && player1 != INVALID_PLAYER_ID)
		{
			format(string,sizeof(string),"Notice:{FFFFFF} You have given %s a jetpack", PlayerInfo[player1][Name]);
			SetPlayerSpecialAction(player1, 2);
			return 1;
		} else return SendClientMessage(playerid, red, "{FF0000}Error:{FFFFFF} Player is not connected.");
	}
    if(PlayerInfo[playerid][PlayerMode] == STUNT && PlayerInfo[playerid][Spawned] && PlayerInfo[playerid][Level] < 3)
    {
        if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING || GetPlayerState(playerid) == PLAYER_STATE_WASTED)return SendClientMessage(playerid,blue,"{FF0000}Error:{FFFFFF} You cannot use this comamnd now.");
		if(SFPlayerInfo[playerid][Spiderman] == 1 && PlayerInfo[playerid][PlayerMode] == STUNT) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command at this moment. Disable /spiderman first.");
		if(SFPlayerInfo[playerid][Superman] == 1 && PlayerInfo[playerid][PlayerMode] == STUNT) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command at this moment. Disable /superman first.");
		if(PlayerInfo[playerid][Jailed] > 0) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command in jail");
	    if(SFPlayerInfo[playerid][Event] > 0) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command at this moment. You are in an event.");
		if(IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,blue,"{FF0000}Error:{FFFFFF} You cannot use this comamnd in a vehicle.");
		return SetPlayerSpecialAction(playerid, 2);
    }else return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be in Stunt&Fun mode to use this command.");
}

CMD:flip(playerid,params[])
{
    if(PlayerInfo[playerid][Level] >= 3)
	{
	    new name[50];
	    sscanf(params, "s[50]",name);
		if(!strlen(name)) {
		    if(IsPlayerInAnyVehicle(playerid)) {
			new VehicleID, Float:X, Float:Y, Float:Z, Float:Angle; GetPlayerPos(playerid, X, Y, Z); VehicleID = GetPlayerVehicleID(playerid);
			GetVehicleZAngle(VehicleID, Angle);	SetVehiclePos(VehicleID, X, Y, Z); SetVehicleZAngle(VehicleID, Angle); SetVehicleHealth(VehicleID,1000.0);
			return SendClientMessage(playerid, blue,"Vehicle Flipped. You can also do /flip <playerid>");
			} else return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} You are not in a vehicle. You can also do /flip <playerid>");
		}
	    new player1, string[128];
        if(!IsNumericForID(name))  player1 = ReturnPlayerID(name); else player1 = strval(name);

	 	if(IsPlayerConnected(player1) && player1 != INVALID_PLAYER_ID && player1 != playerid) {
			if (IsPlayerInAnyVehicle(player1)) {
				new VehicleID, Float:X, Float:Y, Float:Z, Float:Angle; GetPlayerPos(player1, X, Y, Z); VehicleID = GetPlayerVehicleID(player1);
				GetVehicleZAngle(VehicleID, Angle);	SetVehiclePos(VehicleID, X, Y, Z); SetVehicleZAngle(VehicleID, Angle); SetVehicleHealth(VehicleID,1000.0);
				format(string,sizeof(string),"Notice:{FFFFFF} You have flipped %s's vehicle", PlayerInfo[player1][Name]);
				return SendClientMessage(playerid, blue,string);
			} else return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} This player isn't in a vehicle");
		} else return SendClientMessage(playerid, red, "{FF0000}Error:{FFFFFF} Player is not connected or is yourself");
	} else return 0;
}

CMD:teleplayer(playerid,params[]) {
    if(PlayerInfo[playerid][Level] >= 4) {
	    new player1, player2, Float:plocx,Float:plocy,Float:plocz, string[128];
        if (sscanf(params, "dd",player1,player2)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /teleplayer <playerid> to <playerid>");
		if(IsPlayerConnected(player1) && player1 != INVALID_PLAYER_ID) {
 		 	if(IsPlayerConnected(player2) && player2 != INVALID_PLAYER_ID) {
				if(PlayerInfo[player1][Level] > PlayerInfo[playerid][Level]) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} It is not necessary for this player.");
				if(GetPlayerState(player1) == PLAYER_STATE_SPECTATING || GetPlayerState(player2) == PLAYER_STATE_SPECTATING)return SendClientMessage(playerid,blue,"{FF0000}Error:{FFFFFF} You cannot use this command on the player now.");
				GetPlayerPos(player2, plocx, plocy, plocz);
				new intid = GetPlayerInterior(player2);	SetPlayerInterior(player1,intid);
				SetPlayerVirtualWorld(player1,GetPlayerVirtualWorld(player2));
				if (GetPlayerState(player1) == PLAYER_STATE_DRIVER)
				{
					new VehicleID = GetPlayerVehicleID(player1);
					SetVehiclePos(VehicleID, plocx, plocy+4, plocz); LinkVehicleToInterior(VehicleID,intid);
					SetVehicleVirtualWorld(VehicleID, GetPlayerVirtualWorld(player2) );
				}
				else SetPlayerPos(player1,plocx,plocy, plocz+2);
				SendClientMessage(player1,blue,string); SendClientMessage(player2,blue,string);
				format(string,sizeof(string),"Notice:{FFFFFF} You have teleported %s to %s's location", PlayerInfo[player1][Name], PlayerInfo[player2][Name]);
 		 	    return SendClientMessage(playerid,blue,string);
 		 	} else return SendClientMessage(playerid, red, "{FF0000}Error: {FFFFFF}Player2 is not connected");
		} else return SendClientMessage(playerid, red, "{FF0000}Error: {FFFFFF}Player1 is not connected");
	} else return 0;
}

CMD:goto(playerid,params[]) {
    if(PlayerInfo[playerid][Level] >= 1) {
	    if(PlayerInfo[playerid][Jailed] > 0) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command in jail");
	 	new name[50],player1,string[128];
	    if (sscanf(params, "s[50]",name))return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /goto <playerid/name>");
    	if(!IsNumericForID(name)) player1 = ReturnPlayerID(name); else player1 = strval(name);
	   	if(IsPlayerConnected(player1) && player1 != INVALID_PLAYER_ID && player1 != playerid) {
			new Float:x, Float:y, Float:z;	GetPlayerPos(player1,x,y,z); SetPlayerInterior(playerid,GetPlayerInterior(player1));
			SetPlayerVirtualWorld(playerid,GetPlayerVirtualWorld(player1));
			if(GetPlayerState(playerid) == 2) {
				SetVehiclePos(GetPlayerVehicleID(playerid),x,y,z+1);	LinkVehicleToInterior(GetPlayerVehicleID(playerid),GetPlayerInterior(player1));
				SetVehicleVirtualWorld(GetPlayerVehicleID(playerid),GetPlayerVirtualWorld(player1));
			} else SetPlayerPos(playerid,x,y,z+1);
			format(string,sizeof(string),"Notice:{FFFFFF} You have teleported to %s", PlayerInfo[player1][Name]);
			return SendClientMessage(playerid,blue,string);
		} else return SendClientMessage(playerid, red, "{FF0000}Error: {FFFFFF}Player is not connected or is yourself");
	} else return 0;
}

CMD:vgoto(playerid,params[]) {
    if(PlayerInfo[playerid][Level] >= 3) {
        new vehid, string[128],Float:x, Float:y, Float:z;
	    if (sscanf(params, "d",vehid))return SendClientMessage(playerid,red,"Usage: /vgoto <vehicleid>");
	    GetVehiclePos(vehid,x,y,z);
		SetPlayerVirtualWorld(playerid,GetVehicleVirtualWorld(vehid));
		if(GetPlayerState(playerid) == 2) {
			SetVehiclePos(GetPlayerVehicleID(playerid),x+3,y,z);
			SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), GetVehicleVirtualWorld(vehid) );
		} else SetPlayerPos(playerid,x+2,y,z);
		format(string,sizeof(string),"Notice:{FFFFFF} You have teleported to vehicle id %d", vehid);
		return SendClientMessage(playerid,blue,string);
	} else return 0;
}

CMD:vget(playerid,params[]) {
    if(PlayerInfo[playerid][Level] >= 3) {
	    new vehid, string[128],Float:x, Float:y, Float:z;
	    if (sscanf(params, "d",vehid))return SendClientMessage(playerid,red,"Usage: /vget <vehicleid>");
	    GetPlayerPos(playerid,x,y,z);
		SetVehiclePos(vehid,x+3,y,z);
		SetVehicleVirtualWorld(vehid,GetPlayerVirtualWorld(playerid));
		format(string,sizeof(string),"Notice:{FFFFFF} You have brough vehicle id %d to your location", vehid);
		return SendClientMessage(playerid,blue,string);
	} else return 0;
}

CMD:pgoto(playerid,params[]) {
    if(PlayerInfo[playerid][Level] >= 3) {
		new Float:x, Float:y, Float:z,string[128];
		if(strfind(params,",",true)!=-1)
		{
	 		if(sscanf(params, "p<,>fff",x,y,z)) return SendClientMessage(playerid,red1,"Usage: /pgoto <x> <y> <z>");
		}
		else
		{
		    if(sscanf(params, "fff",x,y,z)) return SendClientMessage(playerid,red1,"Usage: /pgoto <x> <y> <z>");
		}
	    if(GetPlayerState(playerid) == 2) SetVehiclePos(GetPlayerVehicleID(playerid),x,y,z);
		else SetPlayerPos(playerid,x,y,z);
		format(string,sizeof(string),"Notice:{FFFFFF} You have teleported to %f, %f, %f", x,y,z); return SendClientMessage(playerid,blue,string);
	} else return 0;
}

CMD:get(playerid,params[]) {
    if(PlayerInfo[playerid][Level] >= 3) {
		new name[50],player1,string[128];
	    if (sscanf(params, "s[50]",name))return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /get <playerid/name>");
    	if(!IsNumericForID(name)) player1 = ReturnPlayerID(name); else player1 = strval(name);
	   	if(IsPlayerConnected(player1) && player1 != INVALID_PLAYER_ID && player1 != playerid) {
	   	    if(PlayerInfo[player1][Level] > PlayerInfo[playerid][Level]) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} It is not necessary for this player.");
			if(GetPlayerState(player1) == PLAYER_STATE_SPECTATING || GetPlayerState(player1) == PLAYER_STATE_WASTED)return SendClientMessage(playerid,blue,"{FF0000}Error:{FFFFFF} You cannot teleport the player now.");
			new Float:x, Float:y, Float:z;	GetPlayerPos(playerid,x,y,z); SetPlayerInterior(player1,GetPlayerInterior(playerid));
			SetPlayerVirtualWorld(player1,GetPlayerVirtualWorld(playerid));
			if(GetPlayerState(player1) == 2)	{
			    new VehicleID = GetPlayerVehicleID(player1);
				SetVehiclePos(VehicleID,x+1,y,z);   LinkVehicleToInterior(VehicleID,GetPlayerInterior(playerid));
				SetVehicleVirtualWorld(GetPlayerVehicleID(player1),GetPlayerVirtualWorld(playerid));
			} else SetPlayerPos(player1,x,y,z+1);
			format(string,sizeof(string),"Notice:{FFFFFF} You have teleported %s to you..", PlayerInfo[player1][Name]);
			return SendClientMessage(playerid,blue,string);
		} else return SendClientMessage(playerid, red, "{FF0000}Error:{FFFFFF} Player is not connected or is yourself");
	} else return 0;
}
CMD:einfo(playerid,params[])
{
    if(PlayerInfo[playerid][PlayerMode] != STUNT)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be in Stunt&Fun mode to use this command.");
	if(PlayerInfo[playerid][Spawned] == 0)return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You have to be spawned in order to use this command.");
	new id;
	if(sscanf(params, "d",id)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /einfo <id>");
	id = getTheEventID(id);
	if(!EventInfo[id][Exists])return SendClientMessage( playerid,red1,"{FF0000}Error:{FFFFFF} This event doesn't exist, try another.");
    new string2[850],string[100];
	format(string,90,"\n{FFFFFF}Name: {33FF33}%s",EventInfo[id][eName]);
    strcat(string2,string);
	format(string,90,"\n{FFFFFF}ID: {33FF33}%d",EventInfo[id][ID]);
    strcat(string2,string);
    format(string,90,"\n{FFFFFF}Created by: {33FF33}%s ",EventInfo[id][Author]);
    strcat(string2,string);
    format(string,90,"\n{FFFFFF}Date Created: {33FF33}%s ",EventInfo[id][Date]);
    strcat(string2,string);
    format(string,90,"\n{FFFFFF}Popularity: {33FF33}%d ",EventInfo[id][Popularity]);
    strcat(string2,string);
	if(EventInfo[id][OnFoot] == 1)
    	format(string,90,"\n{FFFFFF}Type: {33FF33}%s, on foot",EventType[EventInfo[id][Type]]);
	else
    	format(string,90,"\n{FFFFFF}Type: {33FF33}%s, using vehicles",EventType[EventInfo[id][Type]]);
    strcat(string2,string);
	if(EventInfo[id][eSkin] == 0)
    	format(string,90,"\n{FFFFFF}Custom Skin: {33FF33}No");
	else
    	format(string,90,"\n{FFFFFF}Custom Skin: {33FF33}Yes");
    strcat(string2,string);
    format(string,90,"\n{FFFFFF}Money Cost: {33FF33}%d", EventInfo[id][Money]);
    strcat(string2,string);
    format(string,90,"\n{FFFFFF}Health: {33FF33}%d",EventInfo[id][Health]);
    strcat(string2,string);
    format(string,90,"\n{FFFFFF}Armor: {33FF33}%d",EventInfo[id][Armor]);
    strcat(string2,string);
    format(string,90,"\n{FFFFFF}Interior: {33FF33}%d",EventInfo[id][Interior]);
    strcat(string2,string);
    format(string,90,"\n{FFFFFF}World: {33FF33}%d",EventInfo[id][World]);
    strcat(string2,string);
    format(string,90,"\n{FFFFFF}World Boundaries: {33FF33}%s",YesNo[EventInfo[id][WorldBounds]]);
    strcat(string2,string);
    format(string,90,"\n{FFFFFF}Checkpoint: {33FF33}%s",YesNo[EventInfo[id][Checkpoint]]);
    strcat(string2,string);
    format(string,90,"\n{FFFFFF}Speed boost: {33FF33}%s",YesNo[EventInfo[id][SpeedBoost]]);
    strcat(string2,string);
    format(string,90,"\n{FFFFFF}No vehicle exits: {33FF33}%s",YesNo[EventInfo[id][NoExitVehs]]);
    strcat(string2,string);
    ShowPlayerDialog(playerid, 1231, DIALOG_STYLE_MSGBOX, "Event info(/estart <id>)", string2, "Close", "");
	return 1;
}


CMD:watch(playerid,params[]) {
    if(PlayerInfo[playerid][PlayerMode] != STUNT)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be in Stunt&Fun mode to use this command.");
	if(SFPlayerInfo[playerid][Event] != 0)return SendClientMessage( playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command in an event.");
	if(SFPlayerInfo[playerid][Spiderman] == 1 && PlayerInfo[playerid][PlayerMode] == STUNT) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command at this moment. Disable /spiderman first.");
	if(SFPlayerInfo[playerid][Superman] == 1) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command at this moment. Disable /superman first.");
	if(EventsCount()==0)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} There are no started events, try again later.");
    new player1;
	if(sscanf(params, "d",player1)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /watch <playerid>");
    if(IsPlayerConnected(player1) && player1 != INVALID_PLAYER_ID && player1 != playerid && !IsPlayerNPC(player1))
	{
        if(PlayerInfo[player1][Spawned] == 0)return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} The player is not spawned.");
		if(PlayerInfo[player1][PlayerMode] != STUNT)
       		return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} The player must be in SF mode.");
		if(SFPlayerInfo[player1][Event] == 0)
       	    return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} The player must be in an event.");

		SF_StartSpectate(playerid, player1);
		SendClientMessage(playerid, red1, "SF WATCH:{FFFFFF} You stared SF spectating. Use /stopwatch to stop.");
	} else return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} The player is not connected or is yourself.");
	return 1;
}

CMD:stopwatch(playerid,params[]) {
    if(PlayerInfo[playerid][PlayerMode] != STUNT)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be in Stunt&Fun mode to use this command.");
	if(SFPlayerInfo[playerid][Event] > 0)return SendClientMessage( playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command in an event.");
	if(SFPlayerInfo[playerid][SpecID] == -1)return SendClientMessage( playerid,red1,"{FF0000}Error:{FFFFFF} You aren't spectating anyone...");
	SF_StopSpectate(playerid);
	return 1;
}
stock SF_StartSpectate(playerid, player1)
{
	//printf("DEBUG CFONTROL SF_StartSpectate 1");
	forLoop(x, MAX_PLAYERS)
	{
	    if(GetPlayerState(x) == PLAYER_STATE_SPECTATING && PlayerInfo[x][Level] > 0 && PlayerInfo[x][SpecID] == playerid)
		{
	       AdvanceSpectate(x);
		}
	}
	
    ShowSpecTexts(playerid, player1);
	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(player1));
	SetPlayerInterior(playerid,GetPlayerInterior(player1));
	ToggleThePlayerSpectating(playerid, 1);
	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(player1));
	if(IsPlayerInAnyVehicle(player1))
		PlayerSpectateVehicle(playerid, GetPlayerVehicleID(player1));
	else
	 	PlayerSpectatePlayer(playerid, player1);
    SFPlayerInfo[playerid][SpecID] = player1;

    SFPlayerInfo[playerid][SpecIDEvent] = SFPlayerInfo[player1][Event];
	//printf("DEBUG CFONTROL SF_StartSpectate 2");
	return 1;
}
stock ShowSpecTexts(playerid, specid)
{
	new string[100];
	format(string,sizeof string,"%s",PlayerInfo[specid][Name]);
	forLoop(i, strlen(string))
    {
	    if (string[i] == ']')string[i] = ')';
	    if (string[i] == '[')string[i] = '(';
	    if (string[i] == '_')string[i] = '-';
	}
	
	format(string,sizeof string,"~w~SPECTATING: %s~n~~h~~y~(~g~MOUSE~h~~y~)~w~ CYCLE TARGETS",string);
    PlayerTextDrawShow(playerid, PlayerInfo[playerid][pSpec]);
	PlayerTextDrawSetString(playerid, PlayerInfo[playerid][pSpec], string);
    PlayerTextDrawShow(playerid, PlayerInfo[playerid][pSpec]);
}

stock HideSpecTexts(playerid)
{
    PlayerTextDrawHide(playerid, PlayerInfo[playerid][pSpec]);
}

stock SF_StopSpectate(playerid)
{
	if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING && SFPlayerInfo[playerid][SpecID] > -1)
	{
		ToggleThePlayerSpectating(playerid, 0);
		SFPlayerInfo[playerid][SpecID] = -1;
		SFPlayerInfo[playerid][SpecIDEvent] = 0;
		HideTDs(playerid);
		HideSpecTexts(playerid);
		SpawnPlayer(playerid);
	}
	return 1;
}
stock SF_AdvanceSpectate(playerid)
{
	if(InEventCount(SFPlayerInfo[playerid][SpecIDEvent]) == 0)return SF_StopSpectate(playerid);
    if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING && SFPlayerInfo[playerid][SpecID] > -1 && PlayerInfo[playerid][PlayerMode] == STUNT)
	{
	    printf("DEBUG CFONTROL SF_AdvanceSpectate 1 pid %d sid %d",playerid,SFPlayerInfo[playerid][SpecID]);
	    
	    new player = -1;
		forLoop(x, MAX_PLAYERS)
		{
	        if(IsPlayerConnected(x) && x != playerid && SFPlayerInfo[x][Event] == SFPlayerInfo[playerid][SpecIDEvent] && PlayerInfo[x][Spawned] == 1 && PlayerInfo[x][PlayerMode] == STUNT && !IsPlayerNPC(x) && x > SFPlayerInfo[playerid][SpecID])
			{
				if(GetPlayerState(x) == PLAYER_STATE_SPECTATING || (GetPlayerState(x) != 1 && GetPlayerState(x) != 2 && GetPlayerState(x) != 3))
				 	continue;
                player = x;
				break;
			}
		}
		if(player == -1)
		{
		 	forLoop(x, MAX_PLAYERS)
			{
		        if(IsPlayerConnected(x) && x != playerid && SFPlayerInfo[x][Event] == SFPlayerInfo[playerid][SpecIDEvent] && PlayerInfo[x][Spawned] == 1 && PlayerInfo[x][PlayerMode] == STUNT && !IsPlayerNPC(x))
				{
					if(GetPlayerState(x) == PLAYER_STATE_SPECTATING || (GetPlayerState(x) != 1 && GetPlayerState(x) != 2 && GetPlayerState(x) != 3))
						continue;
		            player = x;
					break;
				}
			}
		}
		if(player != -1 && IsPlayerConnected(player))
			SF_StartSpectate(playerid, player);

		printf("DEBUG CFONTROL SF_AdvanceSpectate 2 pid %d sid %d",playerid,SFPlayerInfo[playerid][SpecID]);
	}
	return 1;

}

stock SF_ReverseSpectate(playerid)
{
	if(InEventCount(SFPlayerInfo[playerid][SpecIDEvent]) == 0)return SF_StopSpectate(playerid);
	if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING && SFPlayerInfo[playerid][SpecID] > -1 && PlayerInfo[playerid][PlayerMode] == STUNT)
	{
     	printf("DEBUG CFONTROL SF_ReverseSpectate 1 pid %d sid %d",playerid,SFPlayerInfo[playerid][SpecID]);

        new player = -1;
		forLoopR(x,MAX_PLAYERS-1,-1)
		{
	        if(IsPlayerConnected(x) && x != playerid && SFPlayerInfo[x][Event] == SFPlayerInfo[playerid][SpecIDEvent] && PlayerInfo[x][Spawned] == 1 && PlayerInfo[x][PlayerMode] == STUNT && !IsPlayerNPC(x) && x < SFPlayerInfo[playerid][SpecID])
			{
				if(GetPlayerState(x) == PLAYER_STATE_SPECTATING || (GetPlayerState(x) != 1 && GetPlayerState(x) != 2 && GetPlayerState(x) != 3))
				 	continue;
                player = x;
				break;
			}
		}
		if(player == -1)
		{
			forLoopR(x,MAX_PLAYERS-1,-1)
			{
		        if(IsPlayerConnected(x) && x != playerid && SFPlayerInfo[x][Event] == SFPlayerInfo[playerid][SpecIDEvent] && PlayerInfo[x][Spawned] == 1 && PlayerInfo[x][PlayerMode] == STUNT && !IsPlayerNPC(x))
				{
					if(GetPlayerState(x) == PLAYER_STATE_SPECTATING || (GetPlayerState(x) != 1 && GetPlayerState(x) != 2 && GetPlayerState(x) != 3))
						continue;
		            player = x;
					break;
				}
			}
		}
		if(player != -1 && IsPlayerConnected(player))
			SF_StartSpectate(playerid, player);
			
		printf("DEBUG CFONTROL SF_ReverseSpectate 2 pid %d sid %d",playerid,SFPlayerInfo[playerid][SpecID]);
	}
	return 1;
}

CMD:inevent(playerid,params[]) {
    if(PlayerInfo[playerid][PlayerMode] != STUNT)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be in Stunt&Fun mode to use this command.");
	if(PlayerInfo[playerid][Spawned] == 0)return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You have to be spawned in order to use this command.");
    if(EventsCount()==0)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} There are no started events, try again later.");
	new event,string[70],string2[400];
	if(EventsCount() > 1)
 	{
		//forward to dialog list..
	    forLoop(i, maxSFevents)
		{
		    if(EventInfo[i][Exists] && EventInfo[i][Started])
		    {
		        format(string,90,"\n%s(ID:%d) - %d Players",EventInfo[i][eName],EventInfo[i][ID],InEventCount(EventInfo[i][ID]));
				strcat(string2,string);
		    }
		}
		return ShowPlayerDialog(playerid, INEVENTMENU, DIALOG_STYLE_LIST, "In Event Selection Menu",string2, "Select", "Cancel");
    }
    else
    {
		forLoop(i, maxSFevents)
		{
		    if(EventInfo[i][Exists] && EventInfo[i][Started])event=i;
		}
		format(string,90,"\n{FFFFFF}Event Name: {33FF33}%s",EventInfo[event][eName]);
		strcat(string2,string);
		format(string,90,"\n{FFFFFF}ID: {33FF33}%d",EventInfo[event][ID]);
		strcat(string2,string);
		format(string,90,"\n{FFFFFF}Created by: {33FF33}%s on %s",EventInfo[event][Author],EventInfo[event][Date]);
		strcat(string2,string);
		format(string,90,"\n{FFFFFF}Players:");
		strcat(string2,string);

		forLoop(i, MAX_PLAYERS)if(IsPlayerConnected(i) && PlayerInfo[i][PlayerMode] == STUNT && SFPlayerInfo[i][Event] == EventInfo[event][ID] && PlayerInfo[i][Spawned] == 1)
		{
		    format(string,90,"\n{FFFFFF}%s (ID:%d)",PlayerInfo[i][Name],i);
		    strcat(string2,string);
		}
		ShowPlayerDialog(playerid, 1231, DIALOG_STYLE_MSGBOX, "In Event", string2, "Close", "");
	}
	return 1;
}
CMD:bet(playerid,params[])
{
    if(PlayerInfo[playerid][PlayerMode] != STUNT)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be in Stunt&Fun mode to use this command.");
    if(PlayerInfo[playerid][Spawned] == 0)return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You have to be spawned in order to use this command.");
    if(SFPlayerInfo[playerid][Event] == 0)return SendClientMessage( playerid,red1,"{FF0000}Error:{FFFFFF} You must join an event.");
	if(EventInfo[getTheEventID(SFPlayerInfo[playerid][Event])][Started] == 1 && EventInfo[getTheEventID(SFPlayerInfo[playerid][Event])][State] == 1)return SendClientMessage( playerid,red1,"The event has already started.");
	if(InEventCount(SFPlayerInfo[playerid][Event]) < 3)return SendClientMessage( playerid,red1,"{FF0000}Error:{FFFFFF} There must be at least 3 players in the event!");
	if(SFPlayerInfo[playerid][BetpID][getTheEventID(SFPlayerInfo[playerid][Event])] > -1)return SendClientMessage( playerid,red1,"{FF0000}Error:{FFFFFF} You can only bet on one player.");
	new name[50],amount,string[228],player1;
    if(sscanf(params, "s[50]d",name,amount)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /bet <playerid/name> <amount>");
    if(!IsNumericForID(name))  player1 = ReturnPlayerID(name); else player1 = strval(name);
	if(IsPlayerConnected(player1) && player1 != INVALID_PLAYER_ID && !IsPlayerNPC(player1))
    {
        if(PlayerInfo[player1][PlayerMode] != STUNT)
       		return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} The player must be in SF mode.");
		if(SFPlayerInfo[playerid][Event] != SFPlayerInfo[player1][Event])
       	    return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} The player must be in the same event as you.");
		if(amount < 1)return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Amount of money must be more than $1.");
		if(GetThePlayerMoney(playerid) < amount) return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} You don't have enough money..");
		SFPlayerInfo[playerid][BetpID][getTheEventID(SFPlayerInfo[playerid][Event])] = player1,
		SFPlayerInfo[playerid][BetAmount][getTheEventID(SFPlayerInfo[playerid][Event])] = amount;
		SFPlayerInfo[playerid][Bets]++;
	    format(string,sizeof(string),"BET:{FFFFFF} %s(ID:%d)has bet $%d on %s(ID:%d) to win!",PlayerInfo[playerid][Name],playerid,amount,PlayerInfo[player1][Name],player1);
	 	SendMessageToMode(STUNT,green1, string);
		format(string, sizeof(string), "[BET] %s[%d] has bet $%d on %s(ID:%d) to win!",PlayerInfo[playerid][Name],playerid,amount,PlayerInfo[player1][Name],player1);
		db_SaveChat(-1, STUNT,string);
 	}else return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} The player isn't connected.");
	return 1;
}
CMD:estart(playerid,params[])
{
    if(PlayerInfo[playerid][PlayerMode] != STUNT)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be in Stunt&Fun mode to use this command.");
    if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING || GetPlayerState(playerid) == PLAYER_STATE_WASTED)return SendClientMessage(playerid,blue,"{FF0000}Error:{FFFFFF} You cannot use this comamnd now.");
	if(SFPlayerInfo[playerid][Spiderman] == 1) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command at this moment. Disable /spiderman first.");
	if(SFPlayerInfo[playerid][Superman] == 1) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command at this moment. Disable /superman first.");
	if(EventsCount()>=5)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} Max number of events has been reached, try again later.");
	if(SFPlayerInfo[playerid][Event] > 0)return SendClientMessage( playerid,red1,"{FF0000}Error:{FFFFFF} You are in an event..");
	new event;
	if(sscanf(params, "d",event)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /estart <id>");
	event = getTheEventID(event);
   	if(EventInfo[event][Exists] == 0)return SendClientMessage( playerid,red1,"{FF0000}Error:{FFFFFF} This event doesn't exist, try another.");
    if(EventInfo[event][Started] == 1)return SendClientMessage( playerid,red1,"{FF0000}Error:{FFFFFF} This event has already started, try /ejoin or start another.");
    if(EventInfo[event][NoExitVehs] == 1 && IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} Get off the vehicle to start this event.");
	CreateEvent(playerid,EventInfo[event][ID]);
	return 1;
}

CMD:events(playerid,params[])
{
    if(PlayerInfo[playerid][Jailed] > 0) return
		SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command in jail");
    if(PlayerInfo[playerid][PlayerMode] != STUNT)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be in Stunt&Fun mode to use this command.");
	if(PlayerInfo[playerid][Spawned] == 0)return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You have to be spawned in order to use this command.");
    if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING || GetPlayerState(playerid) == PLAYER_STATE_WASTED)return SendClientMessage(playerid,blue,"{FF0000}Error:{FFFFFF} You cannot use this comamnd now.");

    new string5[70],string2[1230];
    PlayerInfo[playerid][pListPage]=0;
    format(string2,sizeof string2,"{FFFFFF}");
    forLoop(id, 20)
	{
	    if(EventInfo[id][Exists])
	    {
 	   		if(EventInfo[id][Money] == 0)format(string5,sizeof string5,"\n(ID:%d) - %s",EventInfo[id][ID],EventInfo[id][eName]);
			else format(string5,sizeof string5,"\n(ID:%d) %s | Money: %d",EventInfo[id][ID],EventInfo[id][eName],EventInfo[id][Money]);
			strcat(string2,string5);
	    }
	}
	ShowPlayerDialog(playerid, EVENT_PLAYLIST_NEXT, DIALOG_STYLE_MSGBOX, "Event list(/estart <id>)", string2, "Next page", "Close");
	return 1;
}
/*CMD:events(playerid,params[])
{
    if(PlayerInfo[playerid][Jailed] > 0) return
		SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command in jail");
    if(PlayerInfo[playerid][PlayerMode] != STUNT)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be in Stunt&Fun mode to use this command.");
    if(PlayerInfo[playerid][Spawned] == 0)return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You have to be spawned in order to use this command.");
	if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING || GetPlayerState(playerid) == PLAYER_STATE_WASTED)return SendClientMessage(playerid,blue,"{FF0000}Error:{FFFFFF} You cannot use this comamnd now.");
	if(SFPlayerInfo[playerid][Event] > 0)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You cannot use this command now. You are in an event.");
    if(SFPlayerInfo[playerid][Spiderman] == 1) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command at this moment. Disable /spiderman first.");
	if(SFPlayerInfo[playerid][Superman] == 1) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command at this moment. Disable /superman first.");
	new string1[190],string2[7200];
	forLoop(id, maxSFevents)
	{
	    if(EventInfo[id][Exists])
	    {
		    if(EventInfo[id][Money] == 0)format(string1,190,"\n%s",EventInfo[id][eName]);
			else format(string1,190,"\n%s-[$ %d]",EventInfo[id][eName],EventInfo[id][Money]);
			strcat(string2,string1);
	    }
	}
	ShowPlayerDialog(playerid, EVENTMENU, DIALOG_STYLE_LIST, "Event Selection Menu",string2, "Select", "Cancel");
	return 1;
}*/

CMD:ejoin(playerid,params[])
{
    if(PlayerInfo[playerid][Jailed] > 0) return
		SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command in jail");
	if(PlayerInfo[playerid][Spawned] == 0)return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You have to be spawned in order to use this command.");
    if(PlayerInfo[playerid][PlayerMode] != STUNT)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be in Stunt&Fun mode to use this command.");
	if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING || GetPlayerState(playerid) == PLAYER_STATE_WASTED)return SendClientMessage(playerid,blue,"{FF0000}Error:{FFFFFF} You cannot use this comamnd now.");
	if(SFPlayerInfo[playerid][Spiderman] == 1) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command at this moment. Disable /spiderman first.");
	if(SFPlayerInfo[playerid][Superman] == 1) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command at this moment. Disable /superman first.");
	if(SFPlayerInfo[playerid][Event] > 0)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You cannot use this command now. You are in an event.");
	if(EventsCount()==0)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} There are no started events, try again later.");
	new event=0,string[70],string2[400];
	if(nStartedEventsCount() > 1)
 	{
		forLoop(i, maxSFevents)
		{
		    if(EventInfo[i][Exists] && EventInfo[i][Started] && !EventInfo[i][State])
		    {
		        format(string,90,"\n%s - %d Players",EventInfo[i][eName],InEventCount(EventInfo[i][ID]));
				strcat(string2,string);
		    }
		}
		return ShowPlayerDialog(playerid, EJOINMENU, DIALOG_STYLE_LIST, "Join Event Selection Menu",string2, "Select", "Cancel");
    }
    else
    {
		forLoop(i, maxSFevents)
		{
		    if(EventInfo[i][Exists] && EventInfo[i][Started] && !EventInfo[i][State])event=i;
		}
		if(event == 0)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} The event has already started, try again later.");
  		if(EventInfo[event][NoExitVehs] == 1 && IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} Get off the vehicle to join this event.");
  		JoinEvent(playerid,EventInfo[event][ID]);
	}
	return 1;
}
CMD:equit(playerid)
{
    if(PlayerInfo[playerid][Jailed] > 0) return
		SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command in jail");
	if(PlayerInfo[playerid][Spawned] == 0)return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You have to be spawned in order to use this command.");
	if(PlayerInfo[playerid][PlayerMode] != STUNT)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be in Stunt&Fun mode to use this command.");
	if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING || GetPlayerState(playerid) == PLAYER_STATE_WASTED)return SendClientMessage(playerid,blue,"{FF0000}Error:{FFFFFF} You cannot use this comamnd now.");
	if(SFPlayerInfo[playerid][Event] == 0)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You aren't in any event.");
    QuitEvent(playerid,0);
 	A_SpawnPlayer(playerid);
	return 1;
}
stock QuitEvent(playerid,reason)
{
    if(SFPlayerInfo[playerid][Event] > 0)
	{
		new string[228],id=getTheEventID(SFPlayerInfo[playerid][Event]);
		SFPlayerInfo[playerid][Event]=0;
		PlayerInfo[playerid][Spree]=0;
		GiveThePlayerMoney(playerid, -300);
		CalculatekSpree(PlayerInfo[playerid][PlayerMode]);
		if(reason == 0)
			format(string,sizeof(string),"{FF0000}MINIGAME:{FFFFFF} %s(ID:%d) has quit the %s(ID:%d) event. Players in event: %d.",PlayerInfo[playerid][Name],playerid,EventInfo[id][eName],EventInfo[id][ID],InEventCount(EventInfo[id][ID]));
		else
			format(string,sizeof(string),"{FF0000}MINIGAME:{FFFFFF} %s(ID:%d) has been disqualified from the %s(ID:%d) event. Players in event: %d.",PlayerInfo[playerid][Name],playerid,EventInfo[id][eName],EventInfo[id][ID],InEventCount(EventInfo[id][ID]));
		SendMessageToMode(STUNT,red1, string);
        if(reason == 0)
			format(string, sizeof(string), "[MINIGAME] %s[%d] has quit the '%s' event! Players in event: %d.",PlayerInfo[playerid][Name],playerid,EventInfo[id][eName],InEventCount(EventInfo[id][ID]));
		else
			format(string, sizeof(string), "[MINIGAME] %s[%d] has been disqualified from the '%s' event! Players in event: %d.",PlayerInfo[playerid][Name],playerid,EventInfo[id][eName],InEventCount(EventInfo[id][ID]));
		db_SaveChat(-1, STUNT,string);
		if(EventInfo[id][State] == 0) EventInfo[id][PlaceTaken][SFPlayerInfo[playerid][EventSpot]]=0;
		if(reason == 0)//quit or disconnect , reason 1 = death
		{
			if(SFPlayerInfo[playerid][BetpID][id]>-1)
			{
			    GiveThePlayerMoney(playerid, -SFPlayerInfo[playerid][BetAmount][id]);
			    format(string,sizeof(string),"BET:{FFFFFF} %s(ID:%d) has lost $%d on his bet.",PlayerInfo[playerid][Name],playerid,SFPlayerInfo[playerid][BetAmount][id]);
				SendMessageToMode(STUNT,red1, string);
				format(string, sizeof(string), "[BET] %s[%d] has lost $%d on his bet.",PlayerInfo[playerid][Name],playerid,SFPlayerInfo[playerid][BetAmount][id]);
				db_SaveChat(-1, STUNT,string);
			    SFPlayerInfo[playerid][BetpID][id]=-1;
			    SFPlayerInfo[playerid][BetAmount][id]=0;
			    SFPlayerInfo[playerid][BetsLost]++;
			}
		}
		forLoop(i, MAX_PLAYERS)
		{
			if(IsPlayerConnected(i) && PlayerInfo[i][PlayerMode] == STUNT && SFPlayerInfo[i][BetpID][id] == playerid)
			{
			    GiveThePlayerMoney(i, -SFPlayerInfo[i][BetAmount][id]);
			    format(string,sizeof(string),"BET:{FFFFFF} %s(ID:%d) has lost $%d on his bet.",PlayerInfo[i][Name],i,SFPlayerInfo[i][BetAmount][id]);
				SendMessageToMode(STUNT,red1, string);
				format(string, sizeof(string), "[BET] %s[%d] has lost $%d on his bet.",PlayerInfo[i][Name],i,SFPlayerInfo[i][BetAmount][id]);
				db_SaveChat(-1, STUNT,string);
			    SFPlayerInfo[i][BetpID][id]=-1;
			    SFPlayerInfo[i][BetAmount][id]=0;
			    SFPlayerInfo[i][BetsLost]++;
			}
			if(IsPlayerConnected(i) && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][PlayerMode] == STUNT && !IsPlayerNPC(i) && GetPlayerState(i) == PLAYER_STATE_SPECTATING && SFPlayerInfo[i][SpecID] == playerid)
			{
                SF_AdvanceSpectate(i);
			}
		}
		EventCheckForPlayers(id);
	}
}
CMD:superman(playerid,params[])
{
    if(PlayerInfo[playerid][Jailed] > 0) return
		SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command in jail");
    if(PlayerInfo[playerid][PlayerMode] != STUNT)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be in Stunt&Fun mode to use this command.");
    if(PlayerInfo[playerid][Spawned] == 0)return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You have to be spawned in order to use this command.");
	if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING || GetPlayerState(playerid) == PLAYER_STATE_WASTED || GetPlayerVirtualWorld(playerid) != W_STUNT || GetPlayerInterior(playerid) > 0)return SendClientMessage(playerid,blue,"{FF0000}Error:{FFFFFF} You cannot use this comamnd now.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage( playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command inside a car.");
	if(SFPlayerInfo[playerid][Event] > 0)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You cannot use this command now. You are in an event.");
    if(SFPlayerInfo[playerid][Spiderman] == 1) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command at this moment. Disable /spiderman first.");
	if(SFPlayerInfo[playerid][Superman] == 1)
    {
        SetHealth(playerid,99.0);
        SFPlayerInfo[playerid][Superman] = 0;
        TogglePlayerControllable(playerid, false);
        TogglePlayerControllable(playerid, true);
        SendClientMessage(playerid,red1, "{FF0000}SUPERMAN:{FFFFFF} Superman mode has been disabled!");
    }
    else
    {
        SFPlayerInfo[playerid][Superman] = 1;
        //TogglePlayerControllable(playerid, false);
        SendClientMessage(playerid,red1, "{33FF33}SUPERMAN:{FFFFFF} Press W|JUMP|SPRINT|CROUCH|LBM|ALT keys to fly. (/superman to disable)");
    }
	return 1;
}


CMD:spiderman(playerid,params[])
{
    return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} This command has been disabled for now.");
    /*if(PlayerInfo[playerid][Jailed] > 0) return
		SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command in jail");
    if(PlayerInfo[playerid][PlayerMode] != STUNT)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be in Stunt&Fun mode to use this command.");
    if(PlayerInfo[playerid][Spawned] == 0)return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You have to be spawned in order to use this command.");
	if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING || GetPlayerState(playerid) == PLAYER_STATE_WASTED || GetPlayerVirtualWorld(playerid) != W_STUNT || GetPlayerInterior(playerid) > 0)return SendClientMessage(playerid,blue,"{FF0000}Error:{FFFFFF} You cannot use this comamnd now.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage( playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command inside a car.");
	if(SFPlayerInfo[playerid][Event] > 0)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You cannot use this command now. You are in an event.");
    if(SFPlayerInfo[playerid][Superman] == 1) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command at this moment. Disable /superman first.");
	if(SFPlayerInfo[playerid][Spiderman] == 1)
    {
        SetHealth(playerid,99.0);
        SFPlayerInfo[playerid][Spiderman] = 0;
        TogglePlayerControllable(playerid, false);
        TogglePlayerControllable(playerid, true);
        RemovePlayerWeapon(playerid, 11);
        SendClientMessage(playerid,red1, "{FF0000}SPIDERMAN:{FFFFFF} Spiderman mode has been disabled!");
    }
    else
    {
        SFPlayerInfo[playerid][Spiderman] = 1;
		GiveWeapon(playerid, 11, 1);
        //TogglePlayerControllable(playerid, false);
        SendClientMessage(playerid,red1, "{33FF33}SPIDERMAN:{FFFFFF} AIM and SHOOT to fly. (/spiderman to disable)");
    }
	return 1;*/
}

CMD:warn(playerid,params[]) {
    if(PlayerInfo[playerid][Level] >= 1) {
        new warned,reason[50], str[128];
		if(sscanf(params, "ds[50]",warned,reason)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /warn <playerid> <reason>");
    	if(IsPlayerConnected(warned) && warned != INVALID_PLAYER_ID) {
 	    	if(PlayerInfo[warned][Level] > PlayerInfo[playerid][Level]) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} It is not necessary for this player.");
			if(warned != playerid) {
				PlayerInfo[warned][Warnings]++;
				if( PlayerInfo[warned][Warnings] == MAX_WARNINGS) {
					PlayerInfo[warned][Warnings] = 0;
					user_Kick(warned,-1,"Receiving 3 warnings",true,true);
					return 1;
				} else {
					format(str, sizeof (str), "{FF0000}You have received a warning.\n{FFFFFF}Reason: {FF0000}%s\n{FFFFFF}Warnings: {FF0000}%d/%d\n{FFFFFF}(%d warnings = kick)",reason, PlayerInfo[warned][Warnings], MAX_WARNINGS, MAX_WARNINGS);
					ShowPlayerDialog(warned, 4511, DIALOG_STYLE_MSGBOX,"Warning MSG", str, "OK", "");
					format(str,128,"*Admin:{FFFFFF}%s has warned %s(ID:%d) for %s, %d/%d(%d warnings = kick)",PlayerInfo[playerid][Name],PlayerInfo[warned][Name],warned,reason,PlayerInfo[warned][Warnings], MAX_WARNINGS, MAX_WARNINGS);
					MessageToAllAdmins(lightblue,str);
					return 1;
				}
			} else return SendClientMessage(playerid, red, "{FF0000}Error:{FFFFFF} You cannot warn yourself");
		} else return SendClientMessage(playerid, red, "{FF0000}Error:{FFFFFF} Player is not connected");
	} else return 0;
}

CMD:kick(playerid,params[]) {
    if(PlayerInfo[playerid][Level] >= 1) {
	    new player1,reason[50];
		if(sscanf(params, "ds[50]",player1, reason)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /kick <playerid> <reason>");
    	if(IsPlayerConnected(player1) && player1 != INVALID_PLAYER_ID && player1 != playerid)
		{
		    if(PlayerInfo[player1][Level] > PlayerInfo[playerid][Level])
				return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} It is not necessary for this player.");
			user_Kick(player1,playerid,reason, true, true);
			return 1;
		} else return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF}The player is not connected.");
	} else return 0;
}

CMD:isreg(playerid, params[])
{
    if(PlayerInfo[playerid][Level] < 5)return 0;
	new name[50],string[128];
    if (sscanf(params, "s[50]",name))return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /isreg <name>");
	if(user_Exists(name) > 0)format(string,128,"Info: {FFFFFF}Nickname '%s' is registered.",name);
	else format(string,128,"Info: {FFFFFF}Nickname '%s' is not registered.",name);
	SendClientMessage(playerid, red1, string);
	return 1;
}
CMD:deleteuser(playerid, params[])
{
    if(PlayerInfo[playerid][Level] <= 5)return 0;
	new name[50],string[128];
    if (sscanf(params, "s[50]",name))return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /deleteuser <name>");
	if(user_Exists(name) > 0)
	{
	    format(string,128,"Info: {FFFFFF}Nickname '%s' has been deleted.",name);
	    user_Remove(name);
	}
	else format(string,128,"Info: {FFFFFF}Nickname '%s' is not registered.",name);
	SendClientMessage(playerid, red1, string);
	return 1;
}

CMD:isbanned(playerid,params[]) {
	if(PlayerInfo[playerid][Level] >= 4) {
        new name[50];
        if (sscanf(params, "s[50]",name))return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /isbanned <name>");
		if(!db_IsNameBanned(name, "fuckfakeser", false))
			return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} Nick name isn't banned.");
		db_GetBannedInfoByName(name, playerid, true);
		return 1;
	} else return 0;
}

CMD:unban(playerid,params[]) {
	if(PlayerInfo[playerid][Level] >= 4) {
	    new name[50],reason[50];
	    if(sscanf(params, "s[50]s[50]",name,reason)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /unban <name> <reason>");
		if(!db_IsNameBanned(name, "fuckfakeser", false))
			return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} Nick name isn't banned.");
		user_Unban(playerid, name, reason);
    	SendClientMessage(playerid,0xFFFFFFAA,"Done.");
        return 1;
	} else return 0;
}

CMD:ban(playerid,params[]) {
	if(PlayerInfo[playerid][Level] >= 3) {
	    new player1,reason[50];
	    if(sscanf(params, "ds[50]",player1,reason)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /ban <playerid> <reason>");
		if(IsPlayerConnected(player1) && player1 != INVALID_PLAYER_ID && player1 != playerid && !IsPlayerNPC(player1)) {
			if(PlayerInfo[player1][Level] > PlayerInfo[playerid][Level]) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} It is not necessary for this player.");
	 		user_Ban(player1,playerid,reason,true,true,0);
			return 1;
		} else return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} The player is not connected.");
	} else return 0;
}


CMD:rban(playerid,params[]) {
	if(PlayerInfo[playerid][Level] > 3) {
	    new player1,reason[50];
	    if(sscanf(params, "ds[50]",player1,reason)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /rban <playerid> <reason>");
		if(IsPlayerConnected(player1) && player1 != INVALID_PLAYER_ID) {
			if(PlayerInfo[player1][Level] > PlayerInfo[playerid][Level]) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} It is not necessary for this player.");
			user_Ban(player1,playerid,reason,true,true,1);
			return 1;
		} else return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} The player is not connected.");
	} else return 0;
}

CMD:slap(playerid,params[]) {
	if(PlayerInfo[playerid][Level] >= 2) {
	    new player1 ,string[128];
	    if(sscanf(params, "d",player1)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /slap <playerid>");
    	if(IsPlayerConnected(player1) && player1 != INVALID_PLAYER_ID) {
			if(PlayerInfo[player1][Level] > PlayerInfo[playerid][Level]) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} It is not necessary for this player.");
            if(GetPlayerState(player1) == PLAYER_STATE_SPECTATING || GetPlayerState(player1) == PLAYER_STATE_WASTED)return SendClientMessage(playerid,blue,"{FF0000}Error:{FFFFFF} You cannot slap the player now.");
			new Float:x, Float:y, Float:z;
			GetPlayerPos(player1,x,y,z); SetPlayerPos(player1,x,y,z+15);
			format(string,sizeof(string),"Notice:{FFFFFF} You have slapped %s",PlayerInfo[player1][Name]);
			return SendClientMessage(playerid,blue,string);
		} else return SendClientMessage(playerid, red1, "{FF0000}Error: {FFFFFF}Player is not connected.");
	} else return 0;
}



CMD:movepos(playerid,params[]) {
	if(PlayerInfo[playerid][Level] >= 3) {
	    new player1,posx,posy,posz, string[128];
	    if(sscanf(params, "dddd",player1,posx,posy,posz)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /movepos <playerid> <x> <y> <z>");
    	if(IsPlayerConnected(player1) && player1 != INVALID_PLAYER_ID) {
			if(PlayerInfo[player1][Level] > PlayerInfo[playerid][Level]) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} It is not necessary for this player.");
	 		if(GetPlayerState(player1) == PLAYER_STATE_SPECTATING || GetPlayerState(player1) == PLAYER_STATE_WASTED)return SendClientMessage(playerid,blue,"{FF0000}Error:{FFFFFF} You cannot use this command on the player now.");
			new Float:x, Float:y, Float:z;
			GetPlayerPos(player1,x,y,z);
			if(GetPlayerState(player1) == 2)	{
		    new VehicleID = GetPlayerVehicleID(player1);
			SetVehiclePos(VehicleID,x+posx,y+posy,z+posz);
			} else SetPlayerPos(player1,x+posx,y+posy,z+posz);
			format(string,sizeof(string),"Notice:{FFFFFF} You have moved %s",PlayerInfo[player1][Name]);
			return SendClientMessage(playerid,blue,string);
		} else return SendClientMessage(playerid, red1, "{FF0000}Error: {FFFFFF}Player is not connected.");
	} else return 0;
}



CMD:explode(playerid,params[]) {
	if(PlayerInfo[playerid][Level] >= 3) {
	    new player1, string[128];
		if(sscanf(params, "d",player1)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /explode <playerid>");
    	if(IsPlayerConnected(player1) && player1 != INVALID_PLAYER_ID) {
			if(PlayerInfo[player1][Level] > PlayerInfo[playerid][Level]) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} It is not necessary for this player.");
	 		if(GetPlayerState(player1) == PLAYER_STATE_SPECTATING || GetPlayerState(player1) == PLAYER_STATE_WASTED)return SendClientMessage(playerid,blue,"{FF0000}Error:{FFFFFF} You cannot use this comamnd on this player now.");
			new Float:burnx, Float:burny, Float:burnz; GetPlayerPos(player1,burnx, burny, burnz);
			CreateExplosionEx(GetPlayerVirtualWorld(player1), burnx, burny , burnz, 10.0, 50, 51, true,-1);
			format(string,sizeof(string),"Notice:{FFFFFF} You have exploded %s", PlayerInfo[player1][Name]);
			return SendClientMessage(playerid,blue,string);
		} else return SendClientMessage(playerid, red1, "{FF0000}Error: {FFFFFF}Player is not connected.");
	} else return 0;
}

CMD:jail(playerid,params[]) {
	if(PlayerInfo[playerid][Level] >= 1) {
	    new player1,jtime,reason[50], string[128];
		if(sscanf(params, "dds[50]",player1,jtime,reason))return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /jail <playerid> <minutes> <reason>");
    	if(IsPlayerConnected(player1) && player1 != INVALID_PLAYER_ID)
	 	{
			if(PlayerInfo[player1][Jailed] == 0)
			{
				if(PlayerInfo[player1][Level] > PlayerInfo[playerid][Level]) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} It is not necessary for this player.");
	 			if(GetPlayerState(player1) == PLAYER_STATE_SPECTATING || GetPlayerState(player1) == PLAYER_STATE_WASTED)return SendClientMessage(playerid,blue,"{FF0000}Error:{FFFFFF} You cannot use this comamnd on this player now.");
				if(jtime == 0) jtime = 1;
				if(!(PlayerInfo[player1][PlayerMode] == STUNT || PlayerInfo[player1][PlayerMode] == FFA))
				{
				    OtherDeathDisconnect(player1,0,0);
					SetPlayerMode(player1, STUNT, false, false);
				}
				PlayerInfo[player1][Jailed] = jtime*60;
				JailPlayer(player1);
				format(string,sizeof(string),"{FF0000}[JAIL]{FFFFFF} %s(ID:%d) has been jailed for %d minute(s) for: %s.", PlayerInfo[player1][Name],player1, jtime, reason);
                SendMessageToAll(false, red1, string);
				format(string,128,"*Admin:{FFFFFF} %s has jailed %s(ID:%d) for %d minute(s) for: %s.",PlayerInfo[playerid][Name],PlayerInfo[player1][Name],player1, jtime, reason);
				MessageToAllAdmins(lightblue,string);
				format(string, sizeof(string), "[JAIL] %s(ID:%d) has been jailed for %d minute(s) for %s by %s.",PlayerInfo[player1][Name], player1,jtime, reason,PlayerInfo[playerid][Name]);
				db_SaveForAdminText(string);
				format(string, sizeof(string), "[JAIL] %s(ID:%d) has been jailed for %d minute(s) for %s.",PlayerInfo[player1][Name],player1, jtime, reason);
				db_SaveChat(-1, PlayerInfo[player1][PlayerMode],string);
                format(string, sizeof (string), "{FF0000}You have been jailed for %d minutes.\n{FFFFFF}Reason: {FF0000}%s", jtime,reason);
				ShowPlayerDialog(player1, 4511, DIALOG_STYLE_MSGBOX,"Warning MSG", string, "OK", "");
    			return 1;
			} else return SendClientMessage(playerid, red, "{FF0000}Error: {FFFFFF}Player is already in jail");
		} else return SendClientMessage(playerid, red1, "{FF0000}Error: {FFFFFF}Player is not connected.");
	} else return 0;
}

CMD:unjail(playerid,params[]) {
	if(PlayerInfo[playerid][Level] >= 1) {
	    new player1,string[128];
		if(sscanf(params, "d",player1))return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /unjail <playerid>");
    	if(IsPlayerConnected(player1) && player1 != INVALID_PLAYER_ID) {
			if(PlayerInfo[player1][Jailed] > 0) {
				if(PlayerInfo[player1][Level] > PlayerInfo[playerid][Level]) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} It is not necessary for this player.");
	 			format(string,sizeof(string),"{FF0000}[UNJAIL]{FFFFFF} %s(ID:%d) has been unjailed.", PlayerInfo[player1][Name],player1);
                PlayerInfo[player1][Jailed] = 0;
				SetPlayerInterior(player1,0);
				A_SpawnPlayer(player1);
				SendMessageToAll(false, red1, string);
				format(string, sizeof(string), "[UNJAIL] %s(ID:%d) has been unjailed by %s.",PlayerInfo[player1][Name],player1, PlayerInfo[playerid][Name]);
				db_SaveForAdminText(string);
				format(string, sizeof(string), "[UNJAIL] %s(ID:%d) has been unjailed.",PlayerInfo[player1][Name],player1);
				db_SaveChat(-1, PlayerInfo[player1][PlayerMode],string);
				format(string,sizeof(string),"*Admin:{FFFFFF} %s has unjailed %s.",PlayerInfo[playerid][Name],PlayerInfo[player1][Name]);
				MessageToAllAdmins(lightblue,string);
				return 1;
			} else return SendClientMessage(playerid, red, "{FF0000}Error: {FFFFFF}Player is not in jail");
		} else return SendClientMessage(playerid, red1, "{FF0000}Error: {FFFFFF}Player is not connected.");
	} else return 0;
}

CMD:jailed(playerid) {
	if(PlayerInfo[playerid][Level] >= 1) {
 		new Count = 0;
	    forLoop(i, MAX_PLAYERS) if(IsPlayerConnected(i) && PlayerInfo[i][Jailed]) Count++;
		if(Count == 0) return SendClientMessage(playerid,red1, "{FF0000}Error: {FFFFFF}No players are jailed.");

        new string5[190],string2[3200];
	    forLoop(i, MAX_PLAYERS)
	    {
			if(IsPlayerConnected(i) && PlayerInfo[i][Jailed] > 0)
			{
			    format(string5,190,"\n{FF0000}%s{FFFFFF}(ID:%d){33FF33} Time left: {FFFFFF}%s",PlayerInfo[i][Name],i,TimeConverter(PlayerInfo[i][Jailed]));
			    strcat(string2,string5);
			}
		}
		ShowPlayerDialog(playerid, 4511, DIALOG_STYLE_MSGBOX,"Jailed Players List", string2, "Close", "");
	    return 1;
	} else return 0;
}

CMD:freeze(playerid,params[]) {
	if(PlayerInfo[playerid][Level] >= 4) {
	    new player1,ftime,reason[50], string[128];
		if(sscanf(params, "dds[50]",player1,ftime,reason))return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /freeze <playerid> <minutes> <reason>");
	 	if(IsPlayerConnected(player1) && player1 != INVALID_PLAYER_ID) {
			if(PlayerInfo[player1][Frozen] == 0) {
				if(GetPlayerState(player1) == PLAYER_STATE_SPECTATING || GetPlayerState(player1) == PLAYER_STATE_WASTED)return SendClientMessage(playerid,blue,"{FF0000}Error:{FFFFFF} You cannot use this comamnd on this player now.");
				if(ftime == 0) ftime = 1;
				TogglePlayerControllable(player1,false);
				PlayerInfo[player1][Frozen] = ftime*60;
				PlayerPlaySound(player1,1057,0.0,0.0,0.0);
				format(string,sizeof(string),"{FF0000}[FREEZE]{FFFFFF} %s has been frozen for %d minute(s). Reason: %s",PlayerInfo[player1][Name], ftime, reason);
                SendMessageToAll(false, red1, string);
				format(string,128,"*Admin:{FFFFFF} %s has frozen %s(ID:%d) for %d minute(s). Reason: %s",PlayerInfo[playerid][Name],PlayerInfo[player1][Name],player1, ftime, reason);
				MessageToAllAdmins(lightblue,string);
				format(string, sizeof(string), "[FREEZE] %s(ID:%d) has been frozen for %d minute(s) for %s by %s.",PlayerInfo[player1][Name],player1, ftime, reason,PlayerInfo[playerid][Name]);
				db_SaveForAdminText(string);
				format(string, sizeof(string), "[FREEZE] %s(ID:%d) has been frozen for %d minute(s) for %s.",PlayerInfo[player1][Name],player1, ftime, reason);
				db_SaveChat(-1, PlayerInfo[player1][PlayerMode],string);
                format(string, sizeof (string), "{FF0000}You have been frozen for %d minutes.\n{FFFFFF}Reason: {FF0000}%s", ftime,reason);
				ShowPlayerDialog(player1, 4511, DIALOG_STYLE_MSGBOX,"Freeze MSG", string, "OK", "");
				return 1;
			} else return SendClientMessage(playerid, red, "{FF0000}Error: {FFFFFF}Player is already frozen");
		} else return SendClientMessage(playerid, red1, "{FF0000}Error: {FFFFFF}Player is not connected.");
	} else return 0;
}

CMD:unfreeze(playerid,params[]) {
    if(PlayerInfo[playerid][Level] >= 4|| IsPlayerAdmin(playerid)) {
	    new player1, string[128];
		if(sscanf(params, "d",player1))return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /unfreeze <playerid>");
    	if(IsPlayerConnected(player1) && player1 != INVALID_PLAYER_ID) {
	 	    if(PlayerInfo[player1][Frozen] > 0) {
				TogglePlayerControllable(player1,true);
				PlayerInfo[player1][Frozen] = 0;
				format(string,sizeof(string),"{FF0000}[UNFREEZE]{FFFFFF} %s has been unfrozen.", PlayerInfo[player1][Name]);
				SendMessageToAll(false, red1, string);
				format(string, sizeof(string), "[UNFREEZE] %s(ID:%d) has been unfrozen by %s.",PlayerInfo[player1][Name],player1, PlayerInfo[playerid][Name]);
				db_SaveForAdminText(string);
				format(string, sizeof(string), "[UNFREEZE] %s(ID:%d) has been unfrozen.",PlayerInfo[player1][Name],player1);
				db_SaveChat(-1, PlayerInfo[player1][PlayerMode],string);
				format(string,sizeof(string),"*Admin:{FFFFFF} %s has unfrozen %s.",PlayerInfo[playerid][Name],PlayerInfo[player1][Name]);
				MessageToAllAdmins(lightblue,string);
				return 1;
			} else return SendClientMessage(playerid, red, "{FF0000}Error: {FFFFFF}Player is not frozen");
		} else return SendClientMessage(playerid,red1,"{FF0000}Error: {FFFFFF}Player is not connected");
	} else return 0;
}

CMD:frozen(playerid) {
	if(PlayerInfo[playerid][Level] >= 4) {
 		new Count = 0;
	    forLoop(i, MAX_PLAYERS) if(IsPlayerConnected(i) && PlayerInfo[i][Frozen]) Count++;
		if(Count == 0) return SendClientMessage(playerid,red1, "{FF0000}Error: {FFFFFF}No players are frozen");

        new string5[190],string2[3200];
	    forLoop(i, MAX_PLAYERS)
	    {
			if(IsPlayerConnected(i) && PlayerInfo[i][Frozen] > 0)
			{
			    format(string5,190,"\n{FF0000}%s{FFFFFF}(ID:%d){33FF33} Time left: {FFFFFF}%s",PlayerInfo[i][Name],i,TimeConverter(PlayerInfo[i][Frozen]));
			    strcat(string2,string5);
			}
		}
		ShowPlayerDialog(playerid, 4511, DIALOG_STYLE_MSGBOX,"Frozen Players List", string2, "Close", "");
	    return 1;
	} else return 0;
}
CMD:mute(playerid,params[]) {
	if(PlayerInfo[playerid][Level] >= 1) {
	    new player1,mtime,reason[60], string[128];
		if (sscanf(params, "dds[60]", player1,mtime,reason)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /mute <playerid> <minutes> <reason>");
        if(IsPlayerConnected(player1) && player1 != INVALID_PLAYER_ID && !IsPlayerNPC(player1)) {
	 	    if(PlayerInfo[player1][Muted] == 0)
			{
				if(PlayerInfo[player1][Level] > PlayerInfo[playerid][Level]) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} It is not necessary for this player.");
	 			if(mtime == 0) mtime = 1;
				PlayerInfo[player1][Muted] = mtime*60;
				format(string,128,"*Admin:{FFFFFF} %s has muted %s(ID:%d) for %d minute(s). Reason: %s.",PlayerInfo[playerid][Name],PlayerInfo[player1][Name],player1, mtime, reason);
				MessageToAllAdmins(lightblue,string);
				format(string, sizeof(string), "[MUTE] %s(ID:%d) has been muted by %s for %d minute(s). Reason: %s.",PlayerInfo[player1][Name],player1,PlayerInfo[playerid][Name], mtime, reason);
				db_SaveForAdminText(string);
				format(string, sizeof(string), "[MUTE] %s(ID:%d) has been muted.",PlayerInfo[player1][Name],player1);
				db_SaveChat(-1, PlayerInfo[player1][PlayerMode],string);
				format(string,sizeof(string),"{FF0000}[MUTE]{FFFFFF} %s has been muted for %d minute(s). Reason: %s.", PlayerInfo[player1][Name], mtime, reason);
                SendMessageToAll(false, red1, string);
                format(string, sizeof (string), "{FF0000}You have been muted for %d minutes.\n{FFFFFF}Reason: {FF0000}%s", mtime,reason);
				ShowPlayerDialog(player1, 4511, DIALOG_STYLE_MSGBOX,"Mute MSG", string, "OK", "");
				return 1;
			} else return SendClientMessage(playerid, red, "{FF0000}Error: {FFFFFF}Player is already muted");
		} else return SendClientMessage(playerid, red1, "{FF0000}Error: {FFFFFF}Player is not connected.");
	} else return 0;
}

CMD:unmute(playerid,params[]) {
	if(PlayerInfo[playerid][Level] >= 2) {
	    new player1, string[128];
		if (sscanf(params, "d", player1)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /unmute <playerid>");
    	if(IsPlayerConnected(player1) && player1 != INVALID_PLAYER_ID) {
	 	    if(PlayerInfo[player1][Muted] > 0) {
				if(PlayerInfo[player1][Level] > PlayerInfo[playerid][Level]) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} It is not necessary for this player.");
	 			PlayerPlaySound(player1,1057,0.0,0.0,0.0);
				PlayerInfo[player1][Muted] = 0;
				format(string, sizeof(string), "[UNMUTE] %s(ID:%d) has been unmuted.",PlayerInfo[player1][Name],player1);
				db_SaveChat(-1, PlayerInfo[player1][PlayerMode],string);
				format(string, sizeof(string), "[UNMUTE] %s(ID:%d) has been unmuted by %s.",PlayerInfo[player1][Name],player1,PlayerInfo[playerid][Name]);
				db_SaveForAdminText(string);
				format(string,sizeof(string),"{FF0000}[UNMUTE]{FFFFFF} %s has been voiced", PlayerInfo[player1][Name]);
				SendMessageToAll(false, red1, string);
				format(string,sizeof(string),"*Admin:{FFFFFF} %s has unmuted %s.",PlayerInfo[playerid][Name],PlayerInfo[player1][Name]);
				MessageToAllAdmins(lightblue,string);
				return 1;
			} else return SendClientMessage(playerid, red1, "{FF0000}Error: {FFFFFF}Player is not muted");
		} else return SendClientMessage(playerid,red1,"{FF0000}Error: {FFFFFF}Player is not connected");
	} else return 0;
}

CMD:muted(playerid) {
	if(PlayerInfo[playerid][Level] >= 2) {
 		new Count = 0;
 		forLoop(i, MAX_PLAYERS) if(IsPlayerConnected(i) && PlayerInfo[i][Muted] > 0) Count++;
		if(Count == 0) return SendClientMessage(playerid,red1, "{FF0000}Error: {FFFFFF}No players are muted");

	    new string5[190],string2[3200];
	    forLoop(i, MAX_PLAYERS)
	    {
			if(IsPlayerConnected(i) && PlayerInfo[i][Muted] > 0)
			{
			    format(string5,190,"\n{FF0000}%s{FFFFFF}(ID:%d){33FF33} Time left: {FFFFFF}%s",PlayerInfo[i][Name],i,TimeConverter(PlayerInfo[i][Muted]));
			    strcat(string2,string5);
			}
		}
		ShowPlayerDialog(playerid, 4511, DIALOG_STYLE_MSGBOX,"Muted Players List", string2, "Close", "");
	    return 1;
	} else return 0;
}
CMD:akill(playerid,params[]) {
    if(PlayerInfo[playerid][Level] >= 4|| IsPlayerAdmin(playerid)) {
	    new player1, string[128];
		if (sscanf(params, "d", player1)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /akill <playerid>");
    	if(IsPlayerConnected(player1) && player1 != INVALID_PLAYER_ID) {
		if(PlayerInfo[player1][Level] > PlayerInfo[playerid][Level]) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} It is not necessary for this player.");
		if(GetPlayerState(player1) == PLAYER_STATE_SPECTATING || GetPlayerState(player1) == PLAYER_STATE_WASTED)return SendClientMessage(playerid,blue,"{FF0000}Error:{FFFFFF} You cannot use this command on the player now.");
		format(string,sizeof(string),"Notice:{FFFFFF} You have been assassinated by God.");	SendClientMessage(player1,blue,string);
		format(string,sizeof(string),"Notice:{FFFFFF} You have killed %s",PlayerInfo[player1][Name]); SendClientMessage(playerid,blue,string);
		return SetHealth(player1,0.0);
		} else return SendClientMessage(playerid, red1, "{FF0000}Error: {FFFFFF}Player is not connected");
	} else return 0;
}

CMD:weaps(playerid,params[]) {
    if(PlayerInfo[playerid][Level] >= 1) {
	    new player1, string[128];
		if (sscanf(params, "d", player1)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /weaps <playerid>");
    	new string2[64], WeapName[24], slot, weap, ammo, Count, x;
		if(IsPlayerConnected(player1) && player1 != INVALID_PLAYER_ID) {
			format(string2,sizeof(string2),"[>> %s Weapons (id:%d) <<]", PlayerInfo[player1][Name], player1);
			SendClientMessage(playerid,blue,string2);
			for (slot = 0; slot < 14; slot++) {	GetPlayerWeaponData(player1, slot, weap, ammo); if( ammo != 0 && weap != 0) Count++; }
			if(Count < 1) return SendClientMessage(playerid,blue,"{FF0000}Error: {FFFFFF}Player has no weapons");

			if(Count >= 1)
			{
				for (slot = 0; slot < 14; slot++)
				{
					GetPlayerWeaponData(player1, slot, weap, ammo);
					if( ammo != 0 && weap != 0)
					{
						GetWeaponName(weap, WeapName, sizeof(WeapName) );
						if(weap == 18) WeapName = "Molotov";
						if(ammo == 65535 || ammo == 1) format(string,sizeof(string),"%s%s(1)",string, WeapName );
						else format(string,sizeof(string),"%s%s(%d)",string, WeapName, ammo );
						x++;
						if(x >= 5)
						{
						    SendClientMessage(playerid, blue, string);
						    x = 0;
							format(string, sizeof(string), "");
						}
						else format(string, sizeof(string), "%s,  ", string);
					}
			    }
				if(x <= 4 && x > 0) {
					string[strlen(string)-3] = '.';
				    SendClientMessage(playerid, blue, string);
				}
		    }
		    return 1;
		} else return SendClientMessage(playerid, red, "{FF0000}Error: {FFFFFF}Player is not connected");
	} else return 0;
}

CMD:aka(playerid,params[]) {
    if(PlayerInfo[playerid][Level] > 2) {
	    new player1, str[128];
		if (sscanf(params, "d", player1)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /aka <playerid>");
    	if(IsPlayerConnected(player1) && player1 != INVALID_PLAYER_ID) {
			if(PlayerInfo[player1][Level] > PlayerInfo[playerid][Level]) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} It is not necessary for this player.");
	 		format(str,sizeof(str),"[AKA]{FFFFFF} %s(ID:%d|IP:%s) AKA: %s", PlayerInfo[player1][Name], player1, getThePlayerIP(player1), db_GetAKAByIP(getThePlayerIP(player1)));
			return SendClientMessage(playerid,lightblue,str);
		} else return SendClientMessage(playerid,red1,"{FF0000}Error: {FFFFFF}Player is not connected");
	} else return 0;
}
CMD:setofflevel(playerid,params[]) {
	if(PlayerInfo[playerid][Level] > 4) {
	    new name[50],string[128],level;
		if (sscanf(params, "ds[50]",level,name))return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /setofflevel <level> <player full nickname>");
        forLoop(i, MAX_PLAYERS)
		{
			if(IsPlayerConnected(i) && !IsPlayerNPC(i))
			{
				if(!strcmp(PlayerInfo[i][Name], name,false))
				{
					return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} The player is online, use /setlevel.");
				}
			}
		}
		if(user_Exists(name) == 0)return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} The player is not registered.");
		new levelid = db_ReturnStatsInt(name, "USERS", "LEVEL");
		if(levelid > PlayerInfo[playerid][Level]) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} It is not necessary for this player.");
		if(level == levelid) return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Player is already this level");
       	format(string,sizeof(string),"LEVEL = %d", level);
		db_UpdateUserTableValue(name, "USERS", string);
		new year,month,day;   getdate(year, month, day);
  		new hour,minute,second; gettime(hour,minute,second);
		format(string,sizeof(string),"Notice:{FFFFFF} You have made %s Level %d on %d/%d/%d at %d:%d:%d", name, level, day, month, year, hour, minute, second);
		SendClientMessage(playerid,blue,string);
		format(string,sizeof(string),"Admin %s has made %s(offline) Level %d on %d/%d/%d at %d:%d:%d",PlayerInfo[playerid][Name], name, level, day, month, year, hour, minute, second);
		db_SaveForAdminText(string);
		return 1;
	} else return 0;
}

CMD:setlevel(playerid,params[]) {
	if(PlayerInfo[playerid][Level] > 4) {
	    new player1, level, string[128];
		if (sscanf(params, "dd", player1,level)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /setlevel <playerid> <level>");
  		if(IsPlayerConnected(player1) && player1 != INVALID_PLAYER_ID)
		{
  			if(PlayerInfo[player1][Level] > PlayerInfo[playerid][Level]) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} It is not necessary for this player.");
	 		if(PlayerInfo[player1][LoggedIn] == 1) {
				if(level == PlayerInfo[player1][Level]) return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Player is already this level");
		       	new year,month,day;   getdate(year, month, day); new hour,minute,second; gettime(hour,minute,second);

				if(level > 0) format(string,sizeof(string),"Admin %s has set you to admin level %d",PlayerInfo[playerid][Name], level);
				else format(string,sizeof(string),"Admin %s has demoted you to admin level %d",PlayerInfo[playerid][Name], level);
				SendClientMessage(player1,blue,string);

				format(string,sizeof(string),"Notice:{FFFFFF} You have made %s Level %d on %d/%d/%d at %d:%d:%d", PlayerInfo[player1][Name], level, day, month, year, hour, minute, second);
				SendClientMessage(playerid,blue,string);
				format(string,sizeof(string),"Admin %s has made %s Level %d on %d/%d/%d at %d:%d:%d",PlayerInfo[playerid][Name], PlayerInfo[player1][Name], level, day, month, year, hour, minute, second);
				db_SaveForAdminText(string);
				PlayerInfo[player1][Level] = level;
				format(string,sizeof(string),"LEVEL = %d", level);
				db_UpdateUserTableValue(toStr(PlayerInfo[player1][ID]), "USERS", string);
				return PlayerPlaySound(player1,1057,0.0,0.0,0.0);
			} else return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Player must be registered and logged in to be admin");
  		} else return SendClientMessage(playerid, red, "{FF0000}Error: {FFFFFF}Player is not connected");
	} else return 0;
}

CMD:namesoff(playerid, params[])
{
    if(PlayerInfo[playerid][Level] < 3)return 0;
    if(PlayerInfo[playerid][TagState] == 1)
	{
	    forLoop(i, MAX_PLAYERS)
	    {
	        if(IsPlayerConnected(i))
	        {
	            ShowPlayerNameTagForPlayer(playerid, i, true);
	        }
		}
		PlayerInfo[playerid][TagState] = 0;
		SendClientMessage(playerid,red,"{FF0000}Notice:{FFFFFF} Names not hidden.");
	}
	else
	{
	    forLoop(i, MAX_PLAYERS)
	    {
	        if(IsPlayerConnected(i))
	        {
	            ShowPlayerNameTagForPlayer(playerid, i, false);
	        }
		}
		PlayerInfo[playerid][TagState] = 1;
		SendClientMessage(playerid,red,"{FF0000}Notice:{FFFFFF} Names hidden.");
	}
	return 1;
}
public OnPlayerStreamIn(playerid, forplayerid)
{
    if(PlayerInfo[forplayerid][TagState] == 1)ShowPlayerNameTagForPlayer(forplayerid, playerid, false);
	return 1;
}
stock FixTagState(playerid)
{
	if(PlayerInfo[playerid][TagState] == 1)
	{
	    forLoop(i, MAX_PLAYERS)
	    {
	        if(IsPlayerConnected(i))
	        {
	            ShowPlayerNameTagForPlayer(playerid, i, true);
	        }
		}
		PlayerInfo[playerid][TagState] = 0;
	}
}
CMD:thercon(playerid,params[])
{
	if(PlayerInfo[playerid][Level] > 5)
	{
	    new cmd[80],string[129];
	    if (sscanf(params, "s[80]",cmd)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /rcon <cmd>");
		format(string,sizeof(string),">>rcon cmd: '%s' has been executed",cmd);
		SendRconCommand(cmd);
		SendClientMessage(playerid,white,string);
		return 1;
	} else return 0;
}



CMD:shop(playerid,params[])
{
    if(!(PlayerInfo[playerid][PlayerMode] == PJ || PlayerInfo[playerid][PlayerMode] == DM || PlayerInfo[playerid][PlayerMode] == ZO || PlayerInfo[playerid][PlayerMode] == CO || PlayerInfo[playerid][PlayerMode] == PTP || PlayerInfo[playerid][PlayerMode] == GK))
		return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You cannot use this command in this mode.");
    if(PlayerInfo[playerid][PlayerMode] == ZO && PlayerInfo[playerid][pTeam] == ZOMBIE)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} Only humans can use this command.");
    if(PlayerInfo[playerid][PlayerMode] == PTP && PTPPlayerInfo[playerid][Class] == PRESIDENT)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You cannot use this command.");
    if(PlayerInfo[playerid][PlayerMode] == CO && COPlayerInfo[playerid][InJail] == 1)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You cannot use this command now.");
    
    if(PlayerInfo[playerid][PlayerMode] == DM)
    	ShowPlayerDialog(playerid, DM_BUY_MENU, DIALOG_STYLE_LIST, "Shopping Center", DM_BUY_MENU_STRING, "Select", "Exit");
    else if(PlayerInfo[playerid][PlayerMode] == PJ)
    	ShowPlayerDialog(playerid, PJ_BUY_MENU, DIALOG_STYLE_LIST, "Shopping Center", PJ_BUY_MENU_STRING, "Select", "Exit");
	else
		ShowPlayerDialog(playerid, 20320, DIALOG_STYLE_LIST, "Weapons", "Thrown Weapons\nPistols\nShotguns\nRifles\nHealth and Armour", "Select", "Exit");
	return 1;
}

CMD:updatedmmaps(playerid) {
	if(PlayerInfo[playerid][Level] < 5)return 0;
    UpdateDMMaps();
    SendClientMessage(playerid,white,"Done.");
	return 1;
}
CMD:updatepjmaps(playerid) {
	if(PlayerInfo[playerid][Level] < 5)return 0;
    UpdatePJMaps();
    SendClientMessage(playerid,white,"Done.");
	return 1;
}
CMD:updateconfig(playerid) {
	if(PlayerInfo[playerid][Level] < 5)return 0;
    UpdateConfig();
    SendClientMessage(playerid,white,"Done.");
	return 1;
}
CMD:savefilestuff(playerid,params[]) {
	if(PlayerInfo[playerid][Level] < 5)return 0;
	SaveFileStuff();
	SendClientMessage(playerid,white,"Done.");
	return 1;
}
CMD:reloadsfevents(playerid,params[]) {
	if(PlayerInfo[playerid][Level] < 5)return 0;
	SaveSFEvents();
	LoadSFEvents();
	SendClientMessage(playerid,white,"Done.");
	return 1;
}

CMD:createsfcmd(playerid, params[]) {
    if(PlayerInfo[playerid][Level] < 4)return 0;
	new scmd[50], des[50],id,onfoot, money,cweaps[4],cammo[4];
	if (sscanf(params, "p<|>s[50]dddddddddds[50]",scmd,onfoot,money,cweaps[0],cammo[0],cweaps[1],cammo[1],cweaps[2],cammo[2],cweaps[3],cammo[3],des))
	return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /createsfcmd <name>|<on foot>|<money>|<weap1>|<ammo1>|<w2>|<a2>|<w3>|<a3>|<w4>|<a4>|<description>");

    forLoop(i, MAX_SF_CMDS)
	{
		if(!CmdInfo[i][Exists])
		{
			id = i;
			break;
		}
	}
	format(CmdInfo[id][cName],50,"%s",scmd);
	format(CmdInfo[id][Description],50,"%s",des);
 	new Float:x,Float:y,Float:z,Float:ang;
	GetPlayerPos(playerid,x,y,z);
	GetPlayerFacingAngle(playerid,ang);
	CmdInfo[id][Exists] = 1;
 	CmdInfo[id][cSpawnX] = floatround(x);
 	CmdInfo[id][cSpawnY] = floatround(y);
 	CmdInfo[id][cSpawnZ] = floatround(z);
 	CmdInfo[id][cAngle] = floatround(ang);
  	CmdInfo[id][OnFoot] = onfoot;
 	CmdInfo[id][Interior] = GetPlayerInterior(playerid);
 	CmdInfo[id][Money] = money;
 	CmdInfo[id][Weap1] = cweaps[0];
 	CmdInfo[id][Ammo1] = cammo[0];
 	CmdInfo[id][Weap2] = cweaps[1];
 	CmdInfo[id][Ammo2] = cammo[1];
 	CmdInfo[id][Weap3] = cweaps[2];
 	CmdInfo[id][Ammo3] = cammo[2];
 	CmdInfo[id][Weap4] = cweaps[3];
 	CmdInfo[id][Ammo4] = cammo[3];
	SaveSFCMDS();
	LoadSFCMDS();
	SendClientMessage(playerid,white,"Done.");
	return 1;
}
CMD:editsfcmd(playerid, params[]) {
    if(PlayerInfo[playerid][Level] < 4)return 0;
	new scmd[50], des[50],id,onfoot, money,cweaps[4],cammo[4];
	if (sscanf(params, "p<|>ds[50]dddddddddds[50]",id,scmd,onfoot, money,cweaps[0],cammo[0],cweaps[1],cammo[1],cweaps[2],cammo[2],cweaps[3],cammo[3],des))
	return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /editsfcmd <id>|<name>|<on foot>|<money>|<weap1>|<ammo1>|<w2>|<a2>|<w3>|<a3>|<w4>|<a4>|<description>");
 	if(id >= MAX_SF_CMDS || id <= 0)return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} Cmd doesn't exist.");
    if(!CmdInfo[id][Exists])return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} Cmd doesn't exist.");
	format(CmdInfo[id][cName],50,"%s",scmd);
	format(CmdInfo[id][Description],50,"%s",des);
	new Float:x,Float:y,Float:z,Float:ang;
	GetPlayerPos(playerid,x,y,z);
	GetPlayerFacingAngle(playerid,ang);
	CmdInfo[id][Exists] = 1;
 	CmdInfo[id][cSpawnX] = floatround(x);
 	CmdInfo[id][cSpawnY] = floatround(y);
 	CmdInfo[id][cSpawnZ] = floatround(z);
 	CmdInfo[id][cAngle] = floatround(ang);
  	CmdInfo[id][OnFoot] = onfoot;
 	CmdInfo[id][Interior] = GetPlayerInterior(playerid);
 	CmdInfo[id][Money] = money;
 	CmdInfo[id][Weap1] = cweaps[0];
 	CmdInfo[id][Ammo1] = cammo[0];
 	CmdInfo[id][Weap2] = cweaps[1];
 	CmdInfo[id][Ammo2] = cammo[1];
 	CmdInfo[id][Weap3] = cweaps[2];
 	CmdInfo[id][Ammo3] = cammo[2];
 	CmdInfo[id][Weap4] = cweaps[3];
 	CmdInfo[id][Ammo4] = cammo[3];
	SaveSFCMDS();
	LoadSFCMDS();
	SendClientMessage(playerid,white,"Done.");
	return 1;
}
CMD:destroysfcmd(playerid, params[]) {
    if(PlayerInfo[playerid][Level] < 4)return 0;
	new id;
	if (sscanf(params, "d",id))return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /destroysfcmd <id>");
	if(id >= MAX_SF_CMDS || id <= 0)return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} Cmd doesn't exist.");
    if(!CmdInfo[id][Exists])return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} Cmd doesn't exist.");
	CmdInfo[id][Exists] = 0;
	SaveSFCMDS();
	LoadSFCMDS();
	SendClientMessage(playerid,white,"Done.");
	return 1;
}
CMD:reloadsfcmds(playerid,params[]) {
	if(PlayerInfo[playerid][Level] < 5)return 0;
	LoadSFCMDS();
	SendClientMessage(playerid,white,"Done.");
	return 1;
}

CMD:rpreport(playerid,params[]) {
    if(PlayerInfo[playerid][NoReport] == 1)return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command.");
	if(PlayerInfo[playerid][PlayerMode] != TRP)return 0;
	new player[60],  reported = -1, reason[50], name[58];
	if (sscanf(params, "p<|>s[60]s[50]",player,reason)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /rpreport first last|reason");
 	if(IsNumericForID(player))return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Invalid RP name");
 	forLoop(i, MAX_PLAYERS)
 	{
		if(IsPlayerConnected(i) && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][PlayerMode] == TRP && !IsPlayerNPC(i))
		{
            format(name,sizeof name,"%s %s",RPPlayerInfo[i][rpfName],RPPlayerInfo[i][rplName]);
            if(strfind(name, player, true) == 0)
            {
                reported = i;
                break;
            }
		}
	}
	if(reported == -1) return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Name doesn't exist.");
	if(IsPlayerConnected(reported) && reported != INVALID_PLAYER_ID && !IsPlayerNPC(reported))
 	{
		if(playerid == reported) return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} You cannot report yourself");
		if(strlen(reason) <= 2)return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} The reason must be valid.");
		if(PlayerInfo[reported][PlayerMode] != TRP || PlayerInfo[reported][Spawned] == 0)
		    return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} The reported player isn't in RP.");
        db_GiveReport(playerid, reported, reason);
		return 1;
	} else return SendClientMessage(playerid, red, "{FF0000}Error: {FFFFFF}Player is not connected.");
}

CMD:report(playerid,params[]) {
    if(PlayerInfo[playerid][NoReport] == 1)return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command.");
    if(PlayerInfo[playerid][PlayerMode] == TRP)return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} Use /rpreport <name> to report a player.");
	new reported, reason[50];
	if (sscanf(params, "ds[50]",reported,reason)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /report <playerid> <reason>");
 	if(IsPlayerConnected(reported) && reported != INVALID_PLAYER_ID && !IsPlayerNPC(reported))
	{
		//if(playerid == reported) return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} You cannot report yourself");
		if(strlen(reason) <= 2)return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} The reason must be valid.");
	    db_GiveReport(playerid, reported, reason);
		return 1;
	} else return SendClientMessage(playerid, red, "{FF0000}Error: {FFFFFF}Player is not connected.");
}

CMD:reports(playerid) {
    if(PlayerInfo[playerid][Level] >= 1) {
        db_GetReports(playerid);
    } else return 0;
	return 1;
}


CMD:miniguns(playerid) {
    if(PlayerInfo[playerid][Level] >= 1) {
		new bool:First2 = false, Count, string[128], weap, ammo;
		forLoop(i, MAX_PLAYERS) {
			if(IsPlayerConnected(i)) {
				forLoop(slot, 14)
				{
					GetPlayerWeaponData(i, slot, weap, ammo);
					if(ammo != 0 && weap == 38) {
					    Count++;
						if(!First2) { format(string, sizeof(string), "Minigun: (%d)%s(ammo%d)", i, PlayerInfo[i][Name], ammo); First2 = true; }
				        else format(string,sizeof(string),"%s, (%d)%s(ammo%d) ",string, i, PlayerInfo[i][Name], ammo);
					}
				}
    	    }
		}
		if(Count == 0) return SendClientMessage(playerid,COLOR_WHITE,"No players have a minigun"); else return SendClientMessage(playerid,COLOR_WHITE,string);
	} else return 0;
}

CMD:botcheck(playerid) {
	if(PlayerInfo[playerid][Level] > 4) {
		forLoop(i, MAX_PLAYERS) BotCheck(i);
		PlayerPlaySound(playerid,1057,0.0,0.0,0.0);
		return 1;
	} else return 0;
}



//==========================[ Spectate Commands ]===============================

CMD:spec(playerid,params[]) {
    if(PlayerInfo[playerid][Level] >= 2) {
	    if(PlayerInfo[playerid][PlayerMode] == TRP)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You cannot use this in RP.");
	    new specplayerid;
		if (sscanf(params, "d",specplayerid)) return  SendClientMessage(playerid, red1, "Usage:{FFFFFF} /spec <playerid>");
		//if(!isAllowedToChangeMode(playerid, true))return 1;
		if(IsPlayerConnected(specplayerid) && specplayerid != INVALID_PLAYER_ID) {
			if(specplayerid == playerid) return SendClientMessage(playerid, red, "{FF0000}Error:{FFFFFF} You cannot spectate yourself");
			if(GetPlayerState(specplayerid) == PLAYER_STATE_SPECTATING && PlayerInfo[specplayerid][SpecID] > -1) return SendClientMessage(playerid, red, "Spectate: Player spectating someone else");
			if(GetPlayerState(specplayerid) != 1 && GetPlayerState(specplayerid) != 2 && GetPlayerState(specplayerid) != 3) return SendClientMessage(playerid, red, "Spectate: Player not spawned");
			if(PlayerInfo[specplayerid][Level] < PlayerInfo[playerid][Level])
			{
				OtherDeathDisconnect(playerid,0,0);
				if(!(PlayerInfo[playerid][PlayerMode] == STUNT || PlayerInfo[playerid][PlayerMode] == FFA))
				{
					SetPlayerMode(playerid, STUNT, false, false);
				}
				SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(specplayerid));
				StartSpectate(playerid, specplayerid);
				HideTDs(playerid);
				PlayerInfo[playerid][Spawned] = 0;
				if(PlayerInfo[playerid][Level] < 6)
				{
					new string[128];
					format(string,sizeof(string),"*Admin:{FFFFFF} %s is spying on %s(ID:%d)",PlayerInfo[playerid][Name],PlayerInfo[specplayerid][Name],specplayerid);
					MessageToAllAdmins(lightblue,string);
					format(string, sizeof(string), "[SPECTATE] %s is spying on %s(ID:%d)",PlayerInfo[playerid][Name],PlayerInfo[specplayerid][Name],specplayerid);
					db_SaveForAdminText(string);
				}
				return SendClientMessage(playerid,blue,"Now Spectating");
			} else return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} It is not necessary for this player.");
		} else return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Player is not connected");
	} else return 0;
}

CMD:specoff(playerid) {
    if(PlayerInfo[playerid][Level] >= 2) {
        if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING)
		{
			StopSpectate(playerid);
			if(PlayerInfo[playerid][Level] < 6)
			{
				new string[128];
				format(string,sizeof(string),"*Admin:{FFFFFF} %s has stopped spectating.",PlayerInfo[playerid][Name]);
				MessageToAllAdmins(lightblue,string);
				format(string, sizeof(string), "[SPECTATE] %s has stopped spectating.",PlayerInfo[playerid][Name]);
				db_SaveForAdminText(string);
			}
			return 1;
		} else return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} You are not spectating");
	} else return 0;
}

//==========================[ CHAT COMMANDS ]===================================

CMD:disablechat(playerid,params[]) {
	if(PlayerInfo[playerid][Level] >= 3) {
		new string[128];
		if(ServerInfo[DisableChat] == 0) {
			ServerInfo[DisableChat] = 1;
			format(string,sizeof(string),"Notice:{FFFFFF} Chat has been disabled", PlayerInfo[playerid][Name] );
		} else {
			ServerInfo[DisableChat] = 0;
			format(string,sizeof(string),"Notice:{FFFFFF} Chat has been enabled", PlayerInfo[playerid][Name] );
		}
		SendMessageToAll(true, red1,string);
		return 1;
 	} else return 0;
}

CMD:clearchat(playerid,params[]) {
	if(PlayerInfo[playerid][Level] >= 3) {
		new type;
		if(sscanf(params, "d",type))return  SendClientMessage(playerid, red1, "Usage:{FFFFFF} /clearchat <0=mode/1=all>");
		if(type == 0)
		{
			forLoop(i,101) SendMessageToPlayerMode(playerid, green," ");
        	SendMessageToPlayerMode(playerid, red1,"----AUTO CHAT CLEARING----");
		}
        if(type == 1)
		{
			forLoop(i,101) SendMessageToAll(true, green," ");
        	SendMessageToAll(true, red1,"----AUTO CHAT CLEARING----");
		}
		return 1;
 	} else return 0;
}
CMD:fakechat(playerid,params[]) {
    if(PlayerInfo[playerid][Level] >= 5) {
    	new player1,text[50];
	    if (sscanf(params, "ds[50]",player1,text)) return  SendClientMessage(playerid, red1, "Usage:{FFFFFF} /fakechat <playerid> <text>");
		if(IsPlayerConnected(player1) && player1 != INVALID_PLAYER_ID) {
			if(PlayerInfo[player1][Level] > PlayerInfo[playerid][Level]) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} It is not necessary for this player.");
			OnPlayerText(player1, text);
			return SendClientMessage(playerid,blue,"Notice:{FFFFFF}Fake message was sent");
	    } else return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Player is not connected");
	} else return 0;
}

CMD:fakecmd(playerid,params[]) {
    if(PlayerInfo[playerid][Level] >= 5) {
	    new player1,text[50];
	    if (sscanf(params, "ds[50]",player1,text)) return  SendClientMessage(playerid, red1, "Usage:{FFFFFF} /fakecmd <playerid> <text>");
		if(IsPlayerConnected(player1) && player1 != INVALID_PLAYER_ID) {
			if(PlayerInfo[player1][Level] > PlayerInfo[playerid][Level]) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} It is not necessary for this player.");
			OnPlayerCommandText(player1, text);
			return SendClientMessage(playerid,blue,"Fake cmd was sent");
	    } else return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Player is not connected");
	} else return 0;
}
//===================[ all ]===================================================
CMD:spawnallcars(playerid,params[]) {
	if(PlayerInfo[playerid][Level] >= 3)
	{
	    new mode;
		if (sscanf(params, "d",mode)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /spawnall <-1=ALL/0=TW/1=RP/2=STUNT/3=FFA/4=TL/5=CO/6=MS/7=CTF/8=DM/9=ZO/10=PJ/11=PTP/12=GK/13=VW>");
		if(mode < -1 || mode >= MAX_MODES) return SendClientMessage(playerid, red1, "Error:{FFFFFF} Wrong mode id.");
		if(mode == -1)
    	{
    	    forLoopV(car, 1, MAX_VEHICLES)
    	    {
		        SetVehicleToRespawn(car);
			}
		}
		else
    	{
			forLoopV(car, 1, MAX_VEHICLES)
    	    {
		        if(GetVehicleVirtualWorld(car) == mode)
					SetVehicleToRespawn(car);
			}
		}
		SendClientMessage(playerid, white, "Done.");
		return 1;
	} else return 0;
}
CMD:spawnall(playerid,params[]) {
	if(PlayerInfo[playerid][Level] > 4)
	{
	    new mode;
		if (sscanf(params, "d",mode)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /spawnall <-1=ALL/0=TW/1=RP/2=STUNT/3=FFA/4=TL/5=CO/6=MS/7=CTF/8=DM/9=ZO/10=PJ/11=PTP/12=GK/13=VW>");
		if(mode < -1 || mode >= MAX_MODES) return SendClientMessage(playerid, red1, "Error:{FFFFFF} Wrong mode id.");
		if(mode == -1)
    	{
		   	forLoop(i, MAX_PLAYERS)
		   	{
				if(IsPlayerConnected(i) && (i != playerid) && PlayerInfo[i][Spawned])
				{
				    FixBeforeSpawn(i);
			 		SpawnPlayer(i);
				}
			}
		}
		else
    	{
		   	forLoop(i, MAX_PLAYERS)
		   	{
				if(IsPlayerConnected(i) && (i != playerid) && PlayerInfo[i][Spawned] && PlayerInfo[i][PlayerMode] == mode)
				{
				    FixBeforeSpawn(i);
					SpawnPlayer(i);
				}
			}
		}
		SendClientMessage(playerid, white, "Done.");
		return 1;
	} else return 0;
}


CMD:getall(playerid,params[]) {
	if(PlayerInfo[playerid][Level] > 4)
	{
		new mode;
		if (sscanf(params, "d",mode)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /getall <-1=ALL/0=TW/1=RP/2=STUNT/3=FFA/4=TL/5=CO/6=MS/7=CTF/8=DM/9=ZO/10=PJ/11=PTP/12=GK/13=VW>");
		if(mode < -1 || mode >= MAX_MODES) return SendClientMessage(playerid, red1, "Error:{FFFFFF} Wrong mode id.");
		new Float:x,Float:y,Float:z, interior = GetPlayerInterior(playerid);
    	GetPlayerPos(playerid,x,y,z);
    	if(mode == -1)
    	{
		   	forLoop(i, MAX_PLAYERS)
		   	{
				if(IsPlayerConnected(i) && (i != playerid) && PlayerInfo[i][Spawned] && GetPlayerState(i) != PLAYER_STATE_SPECTATING)
				{
					 SetPlayerPos(i,x+1,y+1,z);
					 SetPlayerInterior(i,interior);
					 SetPlayerVirtualWorld(i,GetPlayerVirtualWorld(playerid));
				}
			}
		}
		else
    	{
		   	forLoop(i, MAX_PLAYERS)
		   	{
				if(IsPlayerConnected(i) && (i != playerid) && PlayerInfo[i][Spawned] && PlayerInfo[i][PlayerMode] == mode && GetPlayerState(i) != PLAYER_STATE_SPECTATING)
				{
					 SetPlayerPos(i,x+1,y+1,z);
					 SetPlayerInterior(i,interior);
					 SetPlayerVirtualWorld(i,GetPlayerVirtualWorld(playerid));
				}
			}
		}
		SendClientMessage(playerid, white, "Done.");
		return 1;
	} else return 0;
}

CMD:healall(playerid,params[]) {
	if(PlayerInfo[playerid][Level] > 4)
	{
	    new mode;
		if (sscanf(params, "d",mode)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /healall <-1=ALL/0=TW/1=RP/2=STUNT/3=FFA/4=TL/5=CO/6=MS/7=CTF/8=DM/9=ZO/10=PJ/11=PTP/12=GK/13=VW>");
		if(mode < -1 || mode >= MAX_MODES) return SendClientMessage(playerid, red1, "Error:{FFFFFF} Wrong mode id.");
    	if(mode == -1)
    	{
		   	forLoop(i, MAX_PLAYERS)
		   	{
				if(IsPlayerConnected(i) && (i != playerid) && PlayerInfo[i][Spawned] && GetPlayerState(i) != PLAYER_STATE_SPECTATING)
				{
					SetHealth(i,99.0);
			 		new string[128];
					format(string,sizeof(string),"Notice: {FFFFFF}Online Admin %s (ID:%d) has given everyone full health!",PlayerInfo[playerid][Name],playerid);
					SendClientMessage(i,blue, string);
				}
			}
		}
		else
    	{
		   	forLoop(i, MAX_PLAYERS)
		   	{
				if(IsPlayerConnected(i) && (i != playerid) && PlayerInfo[i][Spawned] && PlayerInfo[i][PlayerMode] == mode && GetPlayerState(i) != PLAYER_STATE_SPECTATING)
				{
					SetHealth(i,99.0);
			 		new string[128];
					format(string,sizeof(string),"Notice: {FFFFFF}Online Admin %s (ID:%d) has given everyone full health!",PlayerInfo[playerid][Name],playerid);
					SendClientMessage(i,blue, string);
				}
			}
		}
		SendClientMessage(playerid, white, "Done.");
		return 1;
	} else return 0;
}

CMD:armorall(playerid,params[]) {
	if(PlayerInfo[playerid][Level] > 4)
	{
	    new mode;
		if (sscanf(params, "d",mode)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /armorall <-1=ALL/0=TW/1=RP/2=STUNT/3=FFA/4=TL/5=CO/6=MS/7=CTF/8=DM/9=ZO/10=PJ/11=PTP/12=GK/13=VW>");
		if(mode < -1 || mode >= MAX_MODES) return SendClientMessage(playerid, red1, "Error:{FFFFFF} Wrong mode id.");
    	if(mode == -1)
    	{
		   	forLoop(i, MAX_PLAYERS)
		   	{
				if(IsPlayerConnected(i) && (i != playerid) && PlayerInfo[i][Spawned] && GetPlayerState(i) != PLAYER_STATE_SPECTATING)
				{
			 		SetArmor(i,99.0);
			 		new string[128];
					format(string,sizeof(string),"Notice: {FFFFFF}Online Admin %s (ID:%d) has given everyone full armor!",PlayerInfo[playerid][Name],playerid);
					SendClientMessage(i,blue, string);
				}
			}
		}
		else
    	{
		   	forLoop(i, MAX_PLAYERS)
		   	{
				if(IsPlayerConnected(i) && (i != playerid) && PlayerInfo[i][Spawned] && PlayerInfo[i][PlayerMode] == mode && GetPlayerState(i) != PLAYER_STATE_SPECTATING)
				{
			 		SetArmor(i,99.0);
			 		new string[128];
					format(string,sizeof(string),"Notice: {FFFFFF}Online Admin %s (ID:%d) has given everyone full armor!",PlayerInfo[playerid][Name],playerid);
					SendClientMessage(i,blue, string);
				}
			}
		}
		SendClientMessage(playerid, white, "Done.");
		return 1;
	} else return 0;
}

CMD:killall(playerid,params[]) {
	if(PlayerInfo[playerid][Level] > 4) {
	   	forLoop(i, MAX_PLAYERS) {
			if(IsPlayerConnected(i) && i != playerid && GetPlayerState(i) != PLAYER_STATE_SPECTATING) {
				 SetHealth(i,0.0);
			}
		}
		return 1;
	} else return 0;
}

CMD:freezeall(playerid,params[]) {
	if(PlayerInfo[playerid][Level] > 4)
	{
	    new mode;
		if (sscanf(params, "d",mode)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /freezeall <-1=ALL/0=TW/1=RP/2=STUNT/3=FFA/4=TL/5=CO/6=MS/7=CTF/8=DM/9=ZO/10=PJ/11=PTP/12=GK/13=VW>");
		if(mode < -1 || mode >= MAX_MODES) return SendClientMessage(playerid, red1, "Error:{FFFFFF} Wrong mode id.");
    	if(mode == -1)
    	{
		   	forLoop(i, MAX_PLAYERS)
		   	{
				if(IsPlayerConnected(i) && (i != playerid) && PlayerInfo[i][Spawned] && GetPlayerState(i) != PLAYER_STATE_SPECTATING)
				{
					 TogglePlayerControllable(i,false);
					 PlayerInfo[i][Frozen] = 9999999;
				}
			}
		}
		else
    	{
		   	forLoop(i, MAX_PLAYERS)
		   	{
				if(IsPlayerConnected(i) && (i != playerid) && PlayerInfo[i][Spawned] && PlayerInfo[i][PlayerMode] == mode && GetPlayerState(i) != PLAYER_STATE_SPECTATING)
				{
					 TogglePlayerControllable(i,false);
					 PlayerInfo[i][Frozen] = 9999999;
				}
			}
		}
		SendClientMessage(playerid, white, "Done.");
		return 1;
	} else return 0;
}

CMD:unfreezeall(playerid,params[]) {
	if(PlayerInfo[playerid][Level] > 4) {
	   	new mode;
		if (sscanf(params, "d",mode)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /unfreezeall <-1=ALL/0=TW/1=RP/2=STUNT/3=FFA/4=TL/5=CO/6=MS/7=CTF/8=DM/9=ZO/10=PJ/11=PTP/12=GK/13=VW>");
		if(mode < -1 || mode >= MAX_MODES) return SendClientMessage(playerid, red1, "Error:{FFFFFF} Wrong mode id.");
    	if(mode == -1)
    	{
		   	forLoop(i, MAX_PLAYERS)
		   	{
				if(IsPlayerConnected(i) && (i != playerid) && PlayerInfo[i][Spawned])
				{
					 TogglePlayerControllable(i,true);
					 PlayerInfo[i][Frozen] = 0;
				}
			}
		}
		else
    	{
		   	forLoop(i, MAX_PLAYERS)
		   	{
				if(IsPlayerConnected(i) && (i != playerid) && PlayerInfo[i][Spawned] && PlayerInfo[i][PlayerMode] == mode)
				{
					 TogglePlayerControllable(i,true);
					 PlayerInfo[i][Frozen] = 0;
				}
			}
		}
		SendClientMessage(playerid, white, "Done.");
		return 1;
	} else return 0;
}

CMD:kickall(playerid,params[]) {
	if(PlayerInfo[playerid][Level] > 4)
	{
	   	forLoop(i, MAX_PLAYERS) {
			if(IsPlayerConnected(i) && (i != playerid))
			{
			    Kick(i);
			}
		}
		return 1;
	} else return 0;
}

CMD:slapall(playerid,params[]) {
	if(PlayerInfo[playerid][Level] > 4)
	{
	    new mode;
		if (sscanf(params, "d",mode)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /slapall <-1=ALL/0=TW/1=RP/2=STUNT/3=FFA/4=TL/5=CO/6=MS/7=CTF/8=DM/9=ZO/10=PJ/11=PTP/12=GK/13=VW>");
		if(mode < -1 || mode >= MAX_MODES) return SendClientMessage(playerid, red1, "Error:{FFFFFF} Wrong mode id.");
    	if(mode == -1)
    	{
		   	forLoop(i, MAX_PLAYERS)
		   	{
				if(IsPlayerConnected(i) && (i != playerid) && PlayerInfo[i][Spawned] && GetPlayerState(i) != PLAYER_STATE_SPECTATING)
				{
				    new Float:x, Float:y, Float:z;
					GetPlayerPos(i,x,y,z);
					SetPlayerPos(i,x,y,z+14);
				}
			}
		}
		else
    	{
		   	forLoop(i, MAX_PLAYERS)
		   	{
				if(IsPlayerConnected(i) && (i != playerid) && PlayerInfo[i][Spawned] && PlayerInfo[i][PlayerMode] == mode && GetPlayerState(i) != PLAYER_STATE_SPECTATING)
				{
				    new Float:x, Float:y, Float:z;
					GetPlayerPos(i,x,y,z);
					SetPlayerPos(i,x,y,z+14);
				}
			}
		}
		SendClientMessage(playerid, white, "Done.");
		return 1;
	} else return 0;
}

CMD:disarmall(playerid,params[]) {
	if(PlayerInfo[playerid][Level] > 4)
	{
	    new mode;
		if (sscanf(params, "d",mode)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /disarmall <-1=ALL/0=TW/1=RP/2=STUNT/3=FFA/4=TL/5=CO/6=MS/7=CTF/8=DM/9=ZO/10=PJ/11=PTP/12=GK/13=VW>");
		if(mode < -1 || mode >= MAX_MODES) return SendClientMessage(playerid, red1, "Error:{FFFFFF} Wrong mode id.");
    	if(mode == -1)
    	{
		   	forLoop(i, MAX_PLAYERS)
		   	{
				if(IsPlayerConnected(i) && (i != playerid) && PlayerInfo[i][Spawned] && GetPlayerState(i) != PLAYER_STATE_SPECTATING)
				{
				    ResetWeapons(i);
				}
			}
		}
		else
    	{
		   	forLoop(i, MAX_PLAYERS)
		   	{
				if(IsPlayerConnected(i) && (i != playerid) && PlayerInfo[i][Spawned] && PlayerInfo[i][PlayerMode] == mode && GetPlayerState(i) != PLAYER_STATE_SPECTATING)
				{
				    ResetWeapons(i);
				}
			}
		}
		SendClientMessage(playerid, white, "Done.");
		return 1;
	} else return 0;
}

CMD:ejectall(playerid,params[]) {
	if(PlayerInfo[playerid][Level] >4) {
        new mode;
		if (sscanf(params, "d",mode)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /ejectall <-1=ALL/0=TW/1=RP/2=STUNT/3=FFA/4=TL/5=CO/6=MS/7=CTF/8=DM/9=ZO/10=PJ/11=PTP/12=GK/13=VW>");
		if(mode < -1 || mode >= MAX_MODES) return SendClientMessage(playerid, red1, "Error:{FFFFFF} Wrong mode id.");
    	if(mode == -1)
    	{
		   	forLoop(i, MAX_PLAYERS)
		   	{
				if(IsPlayerConnected(i) && (i != playerid) && PlayerInfo[i][Spawned] && GetPlayerState(i) != PLAYER_STATE_SPECTATING)
				{
				    new Float:x, Float:y, Float:z;
					GetPlayerPos(i,x,y,z);
					SetPlayerPos(i,x,y,z+4);
				}
			}
		}
		else
    	{
		   	forLoop(i, MAX_PLAYERS)
		   	{
				if(IsPlayerConnected(i) && (i != playerid) && PlayerInfo[i][Spawned] && PlayerInfo[i][PlayerMode] == mode && GetPlayerState(i) != PLAYER_STATE_SPECTATING)
				{
				    new Float:x, Float:y, Float:z;
					GetPlayerPos(i,x,y,z);
					SetPlayerPos(i,x,y,z+4);
				}
			}
		}
		SendClientMessage(playerid, white, "Done.");
		return 1;
	} else return 0;
}

//-------------==== Set All Commands ====-------------//

CMD:setallskin(playerid,params[]) {
	if(PlayerInfo[playerid][Level] > 4) {
	    new mode,var;
		if (sscanf(params, "dd",mode,var)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /setallskin <-1=ALL/0=TW/1=RP/2=STUNT/3=FFA/4=TL/5=CO/6=MS/7=CTF/8=DM/9=ZO/10=PJ/11=PTP/12=GK/13=VW> <id>");
		if(mode < -1 || mode >= MAX_MODES) return SendClientMessage(playerid, red1, "Error:{FFFFFF} Wrong mode id.");
    	if(mode == -1)
    	{
		   	forLoop(i, MAX_PLAYERS)
		   	{
				if(IsPlayerConnected(i) && (i != playerid) && PlayerInfo[i][Spawned] && GetPlayerState(i) != PLAYER_STATE_SPECTATING)
				{
				    SetPlayerSkin(i,var);
				}
			}
		}
		else
    	{
		   	forLoop(i, MAX_PLAYERS)
		   	{
				if(IsPlayerConnected(i) && (i != playerid) && PlayerInfo[i][Spawned] && PlayerInfo[i][PlayerMode] == mode && GetPlayerState(i) != PLAYER_STATE_SPECTATING)
				{
				    SetPlayerSkin(i,var);
				}
			}
		}
		SendClientMessage(playerid, white, "Done.");
		return 1;
	} else return 0;
}

CMD:lockmode(playerid,params[]) {
	if(PlayerInfo[playerid][Level] >= 3) {
	    new mode,pass[20], string[128];
		if (sscanf(params, "ds[20]",mode,pass))
		{
		    SendClientMessage(playerid, red1, "Mode ids: <0=TW/1=RP/2=STUNT/3=FFA/4=TL/5=CO/7=CTF/8=DM/9=ZO/10=PJ/11=PTP/12=GK/13=VW>");
	 		return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /lockmode <mode> <password>");
		}
		if(mode < 0 || mode >= MAX_MODES || mode == 6) return SendClientMessage(playerid, red1, "Error:{FFFFFF} Wrong mode id.");
    	if(strlen(pass) < 3 || strlen(pass) > 20) return SendClientMessage(playerid, red, "{FF0000}Error:{FFFFFF} Min password chars: 3 | Max: 20");
		format(ModePass[mode], 20, "%s",pass);
		format(string, sizeof string, "INFO: {FFFFFF}Mode: %s - Pass: %s (/unlockmode to unlock)",PlayerModeNames[mode],pass);
		SendClientMessage(playerid, red1, string);
		forLoop(i, MAX_PLAYERS)
		{
			PlayerInfo[i][ModeUnLock][mode] = 0;
		}
		return 1;
	} else return 0;
}

CMD:unlockmode(playerid,params[]) {
	if(PlayerInfo[playerid][Level] >= 3) {
	    new mode, string[128];
		if (sscanf(params, "d",mode))
		{
		    SendClientMessage(playerid, red1, "Mode ids: <-1=ALL/0=TW/1=RP/2=STUNT/3=FFA/4=TL/5=CO/7=CTF/8=DM/9=ZO/10=PJ/11=PTP/12=GK/13=VW>");
	 		return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /unlockmode <mode>");
		}
		if(mode < -1 || mode >= MAX_MODES || mode == 6) return SendClientMessage(playerid, red1, "Error:{FFFFFF} Wrong mode id.");
		if(mode == -1)
		{
			forLoop(i, MAX_MODES) format(ModePass[i], 20, "a");
			SendClientMessage(playerid, red1, "INFO: {FFFFFF}All modes have been unlocked.");
		}
		else
		{
		    if(strlen(ModePass[mode]) < 3)return SendClientMessage(playerid, red1, "Error:{FFFFFF} mode isn't locked.");
			format(ModePass[mode], 20, "%s","a");
			format(string, sizeof string, "INFO: {FFFFFF}Mode: %s has been unlocked.",PlayerModeNames[mode]);
			SendClientMessage(playerid, red1, string);
		}
		return 1;
	} else return 0;
}

CMD:setmodeweather(playerid,params[]) {
	if(PlayerInfo[playerid][Level] > 3) {
		new mode,weather;
		if (sscanf(params, "dd",mode,weather))
		{
	 		SendClientMessage(playerid, red1, "Mode ids: <0=TW/1=RP/2=STUNT/3=FFA/4=TL/5=CO/6=MS/7=CTF/8=DM/9=ZO/10=PJ/11=PTP/12=GK/13=VW>");
	 		return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /setmodeweather <mode> <weather ID>");
		}
		if(mode < 0 || mode >= MAX_MODES) return SendClientMessage(playerid, red1, "Error:{FFFFFF} Wrong mode id.");
    	forLoop(i, MAX_PLAYERS)
		{
			if(IsPlayerConnected(i))
			{
				if(PlayerInfo[i][PlayerMode] == mode && PlayerInfo[i][Spawned] == 1)
				{
				    SetPlayerWeather(i,weather);
				    ModeWeather[mode]=weather;
				}
			}
		}
		return 1;
	} else return 0;
}

CMD:setmodetime(playerid,params[]) {
	if(PlayerInfo[playerid][Level] > 3) {
	    new mode,time;
		if (sscanf(params, "dd",mode,time))
		{
		    SendClientMessage(playerid, red1, "Mode ids: <0=TW/1=RP/2=STUNT/3=FFA/4=TL/5=CO/6=MS/7=CTF/8=DM/9=ZO/10=PJ/11=PTP/12=GK/13=VW>");
	 		return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /setmodetime <mode> <hour>");
		}
		if(mode < 0 || mode >= MAX_MODES) return SendClientMessage(playerid, red1, "Error:{FFFFFF} Wrong mode id.");
    	if(time > 24) return SendClientMessage(playerid, red, "{FF0000}Error:{FFFFFF} Invalid hour");
		forLoop(i, MAX_PLAYERS)
		{
			if(IsPlayerConnected(i))
			{
				if(PlayerInfo[i][PlayerMode] == mode && PlayerInfo[i][Spawned] == 1)
				{
				    SetPlayerTime(i, time, 0);
				    ModeTime[mode]=time;
				}
			}
		}
		return 1;
	} else return 0;
}
CMD:setweather(playerid,params[]) {
	if(PlayerInfo[playerid][Level] > 3) {
	    new var;
	    if (sscanf(params, "d",var)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /setweather <weather ID>");
		SetWeather(var);
		return 1;
	} else return 0;
}

CMD:settime(playerid,params[]) {
	if(PlayerInfo[playerid][Level] > 3) {
	    new var;
	    if (sscanf(params, "d",var)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /settime <hour>");
		if(var > 24 || var < 0) return SendClientMessage(playerid, red, "{FF0000}Error:{FFFFFF} Invalid hour");
  		SetWorldTime(var);
		return 1;
	} else return 0;
}

CMD:giveallcredit(playerid,params[]) {
	if(PlayerInfo[playerid][Level] > 5)
	{
	    new mode,var;
		if (sscanf(params, "dd",mode,var)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /giveallcredit <-1=ALL/0=TW/1=RP/2=STUNT/3=FFA/4=TL/5=CO/6=MS/7=CTF/8=DM/9=ZO/10=PJ/11=PTP/12=GK/13=VW> <amount>");
		if(mode < -1 || mode >= MAX_MODES) return SendClientMessage(playerid, red1, "Error:{FFFFFF} Wrong mode id.");
    	if(mode == -1)
    	{
		   	forLoop(i, MAX_PLAYERS)
		   	{
				if(IsPlayerConnected(i) && (i != playerid) && PlayerInfo[i][Spawned])
				{
				    new string[128];
			        PlayerInfo[i][Credits] += var;
					format(string,sizeof(string),"Notice: {FFFFFF}Online Admin %s (ID:%d) has given everyone %d server credits!",PlayerInfo[playerid][Name],playerid,var);
					SendClientMessage(i,blue, string);
				}
			}
		}
		else
    	{
		   	forLoop(i, MAX_PLAYERS)
		   	{
				if(IsPlayerConnected(i) && (i != playerid) && PlayerInfo[i][Spawned] && PlayerInfo[i][PlayerMode] == mode)
				{
				    new string[128];
			        PlayerInfo[i][Credits] += var;
					format(string,sizeof(string),"Notice: {FFFFFF}Online Admin %s (ID:%d) has given everyone %d server credits!",PlayerInfo[playerid][Name],playerid,var);
					SendClientMessage(i,blue, string);
				}
			}
		}
		SendClientMessage(playerid, white, "Done.");
		return 1;
	} else return 0;
}


CMD:setallworld(playerid,params[]) {
	if(PlayerInfo[playerid][Level] > 5)
	{
	    new mode,var;
		if (sscanf(params, "dd",mode,var)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /setallworld <-1=ALL/0=TW/1=RP/2=STUNT/3=FFA/4=TL/5=CO/6=MS/7=CTF/8=DM/9=ZO/10=PJ/11=PTP/12=GK/13=VW> <id>");
		if(mode < -1 || mode >= MAX_MODES) return SendClientMessage(playerid, red1, "Error:{FFFFFF} Wrong mode id.");
    	if(mode == -1)
    	{
		   	forLoop(i, MAX_PLAYERS)
		   	{
				if(IsPlayerConnected(i) && (i != playerid) && PlayerInfo[i][Spawned])
				{
				    SetPlayerVirtualWorld(i,var);
				}
			}
		}
		else
    	{
		   	forLoop(i, MAX_PLAYERS)
		   	{
				if(IsPlayerConnected(i) && (i != playerid) && PlayerInfo[i][Spawned] && PlayerInfo[i][PlayerMode] == mode)
				{
				    SetPlayerVirtualWorld(i,var);
				}
			}
		}
		SendClientMessage(playerid, white, "Done.");
		return 1;
	} else return 0;
}
CMD:setallinterior(playerid,params[]) {
	if(PlayerInfo[playerid][Level] > 5) {
        new mode,var;
		if (sscanf(params, "dd",mode,var)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /setallinterior <-1=ALL/0=TW/1=RP/2=STUNT/3=FFA/4=TL/5=CO/6=MS/7=CTF/8=DM/9=ZO/10=PJ/11=PTP/12=GK/13=VW> <id>");
		if(mode < -1 || mode >= MAX_MODES) return SendClientMessage(playerid, red1, "Error:{FFFFFF} Wrong mode id.");
    	if(mode == -1)
    	{
		   	forLoop(i, MAX_PLAYERS)
		   	{
				if(IsPlayerConnected(i) && (i != playerid) && PlayerInfo[i][Spawned])
				{
				    SetPlayerInterior(i,var);
				}
			}
		}
		else
    	{
		   	forLoop(i, MAX_PLAYERS)
		   	{
				if(IsPlayerConnected(i) && (i != playerid) && PlayerInfo[i][Spawned] && PlayerInfo[i][PlayerMode] == mode)
				{
				    SetPlayerInterior(i,var);
				}
			}
		}
		SendClientMessage(playerid, white, "Done.");
		return 1;
	} else return 0;
}
CMD:setallhp(playerid,params[]) {
	if(PlayerInfo[playerid][Level] > 4) {
        new mode,var;
		if (sscanf(params, "dd",mode,var)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /setallhp <-1=ALL/0=TW/1=RP/2=STUNT/3=FFA/4=TL/5=CO/6=MS/7=CTF/8=DM/9=ZO/10=PJ/11=PTP/12=GK/13=VW> <amount>");
		if(mode < -1 || mode >= MAX_MODES) return SendClientMessage(playerid, red1, "Error:{FFFFFF} Wrong mode id.");
    	if(mode == -1)
    	{
		   	forLoop(i, MAX_PLAYERS)
		   	{
				if(IsPlayerConnected(i) && (i != playerid) && PlayerInfo[i][Spawned] && GetPlayerState(i) != PLAYER_STATE_SPECTATING)
				{
				    SetHealth(i,var);
				}
			}
		}
		else
    	{
		   	forLoop(i, MAX_PLAYERS)
		   	{
				if(IsPlayerConnected(i) && (i != playerid) && PlayerInfo[i][Spawned] && PlayerInfo[i][PlayerMode] == mode && GetPlayerState(i) != PLAYER_STATE_SPECTATING)
				{
				    SetHealth(i,var);
				}
			}
		}
		SendClientMessage(playerid, white, "Done.");
		return 1;
	} else return 0;
}
CMD:setallar(playerid,params[]) {
	if(PlayerInfo[playerid][Level] > 4) {
        new mode,var;
		if (sscanf(params, "dd",mode,var)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /setallar <-1=ALL/0=TW/1=RP/2=STUNT/3=FFA/4=TL/5=CO/6=MS/7=CTF/8=DM/9=ZO/10=PJ/11=PTP/12=GK/13=VW> <amount>");
		if(mode < -1 || mode >= MAX_MODES) return SendClientMessage(playerid, red1, "Error:{FFFFFF} Wrong mode id.");
    	if(mode == -1)
    	{
		   	forLoop(i, MAX_PLAYERS)
		   	{
				if(IsPlayerConnected(i) && (i != playerid) && PlayerInfo[i][Spawned] && GetPlayerState(i) != PLAYER_STATE_SPECTATING)
				{
				    SetArmor(i,var);
				}
			}
		}
		else
    	{
		   	forLoop(i, MAX_PLAYERS)
		   	{
				if(IsPlayerConnected(i) && (i != playerid) && PlayerInfo[i][Spawned] && PlayerInfo[i][PlayerMode] == mode && GetPlayerState(i) != PLAYER_STATE_SPECTATING)
				{
				    SetArmor(i,var);
				}
			}
		}
		SendClientMessage(playerid, white, "Done.");
		return 1;
	} else return 0;
}
CMD:giveallcash(playerid,params[]) {
	if(PlayerInfo[playerid][Level] > 4) {
        new mode,var;
		if (sscanf(params, "dd",mode,var)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /giveallcash <-1=ALL/0=TW/1=RP/2=STUNT/3=FFA/4=TL/5=CO/6=MS/7=CTF/8=DM/9=ZO/10=PJ/11=PTP/12=GK/13=VW> <amount>");
		if(mode < -1 || mode >= MAX_MODES) return SendClientMessage(playerid, red1, "Error:{FFFFFF} Wrong mode id.");
    	if(mode == -1)
    	{
		   	forLoop(i, MAX_PLAYERS)
		   	{
				if(IsPlayerConnected(i) && PlayerInfo[i][Spawned])
				{
				    GiveThePlayerMoney(i,var);
					new string[128];
					format(string,sizeof(string),"Notice: {FFFFFF}Online Admin %s (ID:%d) has given everyone %d dollars!",PlayerInfo[playerid][Name],playerid,var );
					SendClientMessage(i,blue, string);
				}
			}
		}
		else
    	{
		   	forLoop(i, MAX_PLAYERS)
		   	{
				if(IsPlayerConnected(i) && PlayerInfo[i][Spawned] && PlayerInfo[i][PlayerMode] == mode)
				{
				    GiveThePlayerMoney(i,var);
					new string[128];
					format(string,sizeof(string),"Notice: {FFFFFF}Online Admin %s (ID:%d) has given everyone %d dollars!",PlayerInfo[playerid][Name],playerid,var );
					SendClientMessage(i,blue, string);
				}
			}
		}
		SendClientMessage(playerid, white, "Done.");
		return 1;
	} else return 0;
}

CMD:giveallweapon(playerid,params[]) {
	if(PlayerInfo[playerid][Level] > 4)
	{
	    new mode, ammo, weap, WeapName[32];
	    if (sscanf(params, "ds[32]d",mode,WeapName,ammo)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /giveallweapon <-1=ALL/0=TW/1=RP/2=STUNT/3=FFA/4=TL/5=CO/6=MS/7=CTF/8=DM/9=ZO/10=PJ/11=PTP/12=GK/13=VW> <weapon id/name> <ammo>");
		if(mode < -1 || mode >= MAX_MODES) return SendClientMessage(playerid, red1, "Error:{FFFFFF} Wrong mode id.");
		if(ammo == 0) ammo = 100;
		if(!IsNumericForID(WeapName)) weap = GetWeaponIDFromName(WeapName); else weap = strval(WeapName);
	  	if(!IsValidWeapon(weap)) return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Invalid weapon ID");
    	if(mode == -1)
    	{
		   	forLoop(i, MAX_PLAYERS)
		   	{
				if(IsPlayerConnected(i) && (i != playerid) && PlayerInfo[i][Spawned] && GetPlayerState(i) != PLAYER_STATE_SPECTATING)
				{
				    GiveWeapon(i,weap,ammo);
				}
			}
		}
		else
    	{
		   	forLoop(i, MAX_PLAYERS)
		   	{
				if(IsPlayerConnected(i) && (i != playerid) && PlayerInfo[i][Spawned] && PlayerInfo[i][PlayerMode] == mode && GetPlayerState(i) != PLAYER_STATE_SPECTATING)
				{
				    GiveWeapon(i,weap,ammo);
				}
			}
		}
		SendClientMessage(playerid, white, "Done.");
	}else return 0;
	return 1;
}


//----------------------===== Place & Skin Saving =====-------------------------
CMD:gotoplace(playerid) {
	if(PlayerInfo[playerid][Level] >= 1 )	{
	    if (PlayerInfo[playerid][SavedPos]==0)return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} You must save a place before you can teleport to it");
		PutAtPos(playerid);
		return SendClientMessage(playerid,yellow,"Notice:{FFFFFF} You have successfully teleported to your saved place");
	} else return 0;
}

CMD:saveplace(playerid) {
	if(PlayerInfo[playerid][Level] >= 1)	{
		new Float:x,Float:y,Float:z;
		GetPlayerPos(playerid,x,y,z);
		PlayerInfo[playerid][SavedPos] = 1;
		PlayerInfo[playerid][PosX] = floatround(x);
		PlayerInfo[playerid][PosY] = floatround(y);
		PlayerInfo[playerid][PosZ] = floatround(z);
		PlayerInfo[playerid][PosInt] = GetPlayerInterior(playerid);
		PlayerInfo[playerid][PosWorld] = GetPlayerVirtualWorld(playerid);
		return SendClientMessage(playerid,yellow,"Notice:{FFFFFF} You have successfully saved these coordinates");
	} else return 0;
}

CMD:changepass(playerid,params[]) {
	if(PlayerInfo[playerid][LoggedIn] == 0)return SendClientMessage(playerid,red, "{FF0000}Error:{FFFFFF} You must have an account and must be logged in to use this command");
	ShowPlayerDialog(playerid,CHANGEPASSMENU, DIALOG_STYLE_PASSWORD,"Account Menu", "Enter a password(4-30 characters):", "Change pass", "Cancel");
	return 1;
}

CMD:stats(playerid,params[]) {
 	new name[50],player1;
 	sscanf(params, "s[50]",name);
	if(!strlen(name)) player1 = playerid;
	else
	{
	    if(!IsNumericForID(name))  player1 = ReturnPlayerID(name); else player1 = strval(name);
	}
	if(!IsPlayerConnected(player1) || PlayerInfo[player1][LoggedIn] == 0)return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} Player is not connected or logged in.");
    ShowPlayerStats(playerid, player1, -1);
	if(PlayerInfo[playerid][Level] < 5)
	{
		if(playerid != player1)
		{
		    new string[128];
			format(string, sizeof string, "Notice:{FFFFFF} Your stats are beening checked by {FFFFFF}%s(ID:%d).",PlayerInfo[playerid][Name],playerid );
    		SendClientMessage(player1, lightblue, string);
		}
	}
	return 1;
}

stock ShowPlayerStats(playerid, player1, mode)
{
	//printf("DEBUG CFONTROL ShowPlayerStats 1 pid %d",playerid);
 	new string[128],string2[750], pDeaths;
 	if(mode == TW)
 	{
		if(TWPlayerInfo[player1][Deaths] == 0) pDeaths = 1; else pDeaths = TWPlayerInfo[player1][Deaths];

	    format(string, sizeof string, " {FFFFFF}>>{FF9900}WW2 Total War{FFFFFF}<<");
	    strcat(string2,string);
		format(string, sizeof string, "\n\nAs leader: {33FF33}%d\n{FFFFFF}Survives: {33FF33}%d\n{FFFFFF}Money: {33FF33}$%d",TWPlayerInfo[player1][AsLeader],TWPlayerInfo[player1][Survives],TWPlayerInfo[player1][Money]);
		strcat(string2,string);
		format(string, sizeof string, "\n{FFFFFF}Leaders killed: {33FF33}%d\n{FFFFFF}Wins: {33FF33}%d\n{FFFFFF}Losses: {33FF33}%d",TWPlayerInfo[player1][LeadersKilled],TWPlayerInfo[player1][GamesWon],TWPlayerInfo[player1][GamesLost]);
		strcat(string2,string);
		format(string, sizeof string, "\n{FFFFFF}Lands: {33FF33}%d\n{FFFFFF}Ships: {33FF33}%d\n{FFFFFF}Players healed: {33FF33}%d",TWPlayerInfo[player1][TookOver],TWPlayerInfo[player1][BombedShips],TWPlayerInfo[player1][PeopleSaved]);
		strcat(string2,string);
		format(string, sizeof string, "\n{FFFFFF}Weapon Rank: {33FF33}%d\n{FFFFFF}Army Rank: {33FF33}%s",TWPlayerInfo[player1][WeapRank],TheArmyRanks[TWPlayerInfo[player1][ArmyRank]]);
	    strcat(string2,string);
		format(string, sizeof string, "\n{FFFFFF}Airforce Rank: {33FF33}%s\n{FFFFFF}Medic Rank: {33FF33}%s",TheAirRanks[TWPlayerInfo[player1][AirRank]],TheMedicRanks[TWPlayerInfo[player1][MedicRank]]);
		strcat(string2,string);
		format(string, sizeof string, "\n{FFFFFF}Score: {33FF33}%d\n{FFFFFF}Kills: {33FF33}%d\n{FFFFFF}Deaths: {33FF33}%d",TWPlayerInfo[player1][Score],  TWPlayerInfo[player1][Kills], TWPlayerInfo[player1][Deaths]);
		strcat(string2,string);
		format(string, sizeof string, "\n{FFFFFF}Atomic Bombs Dropped: {33FF33}%d\n{FFFFFF}K/D Ratio: {33FF33}%0.2f",TWPlayerInfo[player1][ABombsDropped], Float:TWPlayerInfo[player1][Kills]/Float:pDeaths);
		strcat(string2,string);
		if(TWPlayerInfo[player1][SquadID] > 0)
		{
	    	new squadlocal = getTWSquadID(TWPlayerInfo[player1][SquadID]);
			format(string, sizeof string, "\n\n{FFFFFF}Squad: {33FF33}%s\n{FFFFFF}Members: {33FF33}%d\n\n",SquadInfo[squadlocal][sName],SquadInfo[squadlocal][Members]);
		}
		else format(string, sizeof string, "\n{FFFFFF}Squad: {33FF33}No squad\n\n");
	    strcat(string2,string);
    }
	else if(mode == TL)
	{
		format(string, sizeof string, " {FFFFFF}>>{FF9900}WW2 Time line missions{FFFFFF}<<");
		strcat(string2,string);
		format(string, sizeof string, "\n\nWins: {33FF33}%d\n{FFFFFF}Losses: {33FF33}%d\n{FFFFFF}Objectives: {33FF33}%d",TLPlayerInfo[player1][RoundsWon],TLPlayerInfo[player1][RoundsLost],TLPlayerInfo[player1][Objective]);
	    strcat(string2,string);
	    format(string, sizeof string, "\n{FFFFFF}Score: {33FF33}%d\n{FFFFFF}Kills:{33FF33} %d\n{FFFFFF}Deaths: {33FF33}%d\n\n",TLPlayerInfo[player1][Score],TLPlayerInfo[player1][Kills],TLPlayerInfo[player1][Deaths]);
	    strcat(string2,string);
    }
	else if(mode == CTF)
	{
	    format(string, sizeof string, " {FFFFFF}>>{FF9900}Capture The Flag{FFFFFF}<<");
		strcat(string2,string);
		format(string, sizeof string, "\n\nWins:{33FF33} %d\n{FFFFFF}Losses: {33FF33}%d\n{FFFFFF}Captures: {33FF33}%d",CTFPlayerInfo[player1][RoundsWon],CTFPlayerInfo[player1][RoundsLost],CTFPlayerInfo[player1][Captures]);
		strcat(string2,string);
	    format(string, sizeof string, "\n{FFFFFF}Score: {33FF33}%d\n{FFFFFF}Kills:{33FF33} %d\n{FFFFFF}Deaths: {33FF33}%d\n\n",CTFPlayerInfo[player1][Score],CTFPlayerInfo[player1][Kills],CTFPlayerInfo[player1][Deaths]);
		strcat(string2,string);
	}
	else if(mode == VW)
	{
	    pDeaths = (VWPlayerInfo[player1][Deaths] == 0)?1:VWPlayerInfo[player1][Deaths];
	    format(string, sizeof string, " {FFFFFF}>>{FF9900}Capture The Flag{FFFFFF}<<");
		strcat(string2,string);
		format(string, sizeof string, "\n\nWins:{33FF33} %d\n{FFFFFF}Losses: {33FF33}%d\n{FFFFFF}Score: {33FF33}%d\n{FFFFFF}Rank: {33FF33}%s",VWPlayerInfo[player1][RoundsWon],VWPlayerInfo[player1][RoundsLost],VWPlayerInfo[player1][Score], VWRankNames[VWPlayerInfo[player1][Rank]]);
		strcat(string2,string);
	    format(string, sizeof string, "\n{FFFFFF}Kills:{33FF33} %d\n{FFFFFF}Deaths: {33FF33}%d\n{FFFFFF}K/D Ratio: {33FF33}%0.2f\n\n",VWPlayerInfo[player1][Kills],VWPlayerInfo[player1][Deaths], Float:VWPlayerInfo[player1][Kills]/Float:pDeaths);
		strcat(string2,string);
	}
	else if(mode == DM)
	{
		format(string, sizeof string, " {FFFFFF}>>{FF9900}DM/DD {FFFFFF}<<");
		strcat(string2,string);
		format(string, sizeof string, "\n\nWins:{33FF33} %d\n{FFFFFF}Hunters: {33FF33}%d\n{FFFFFF}Money: {33FF33}$%d",DMPlayerInfo[player1][Wins], DMPlayerInfo[player1][Hunters], DMPlayerInfo[player1][Money]);
		strcat(string2,string);
		format(string, sizeof string, "\n{FFFFFF}Score: {33FF33}%d\n{FFFFFF}PvP Wins:{33FF33} %d\n{FFFFFF}Run-ups: {33FF33}%d\n\n", DMPlayerInfo[player1][Score],DMPlayerInfo[player1][PVP], DMPlayerInfo[player1][RunUps]);
		strcat(string2,string);
	}
	else if(mode == PJ)
	{
		format(string, sizeof string, " {FFFFFF}>>{FF9900}Para Jump {FFFFFF}<<");
		strcat(string2,string);
		format(string, sizeof string, "\n\nWins:{33FF33} %d\n{FFFFFF}Duels: {33FF33}%d\n{FFFFFF}Money: {33FF33}$%d",PJPlayerInfo[player1][Wins], PJPlayerInfo[player1][Finishes], PJPlayerInfo[player1][Money]);
		strcat(string2,string);
		format(string, sizeof string, "\n{FFFFFF}Score: {33FF33}%d\n{FFFFFF}PvP Wins:{33FF33} %d\n{FFFFFF}Run-ups: {33FF33}%d\n\n", PJPlayerInfo[player1][Score],PJPlayerInfo[player1][PVP], PJPlayerInfo[player1][RunUps]);
		strcat(string2,string);
	}
	else if(mode == CO)
	{
		format(string, sizeof string, " {FFFFFF}>>{FF9900}Cops and Criminals{FFFFFF}<<");
		strcat(string2,string);
		format(string, sizeof string, "\n\nWins:{33FF33} %d\n{FFFFFF}Losses: {33FF33}%d\n{FFFFFF}Arrests: {33FF33}%d",COPlayerInfo[player1][RoundsWon],COPlayerInfo[player1][RoundsLost],COPlayerInfo[player1][Arrests]);
		strcat(string2,string);
	    format(string, sizeof string, "\n{FFFFFF}Money: {33FF33}$%d\n{FFFFFF}Releases: {33FF33}%d\n{FFFFFF}Score: {33FF33}%d",COPlayerInfo[player1][Money],COPlayerInfo[player1][Releases],COPlayerInfo[player1][Score]);
		strcat(string2,string);
		format(string, sizeof string, "\n{FFFFFF}Kills:{33FF33} %d\n{FFFFFF}Deaths: {33FF33}%d\n{FFFFFF}Criminal Rank: {33FF33}%s",COPlayerInfo[player1][Kills],COPlayerInfo[player1][Deaths],CONamesCriminal[COPlayerInfo[player1][CriminalRank]]);
		strcat(string2,string);
		format(string, sizeof string, "\n{FFFFFF}Cop Rank: {33FF33}%s\n{FFFFFF}Kill Rank:{33FF33} %s\n\n",CONamesCop[COPlayerInfo[player1][PoliceRank]],CONamesKills[COPlayerInfo[player1][KillsRank]]);
		strcat(string2,string);
	}
	else if(mode == PTP)
	{
		format(string, sizeof string, " {FFFFFF}>>{FF9900}Protect the President{FFFFFF}<<");
		strcat(string2,string);
		format(string, sizeof string, "\n\nWins: {33FF33}%d\n{FFFFFF}Losses: {33FF33}%d\n{FFFFFF}Kills:{33FF33} %d",PTPPlayerInfo[player1][RoundsWon],PTPPlayerInfo[player1][RoundsLost],PTPPlayerInfo[player1][Kills]);
		strcat(string2,string);
		format(string, sizeof string, "\n{FFFFFF}Deaths: {33FF33}%d\n{FFFFFF}Score: {33FF33}%d",PTPPlayerInfo[player1][Deaths],PTPPlayerInfo[player1][Score]);
		strcat(string2,string);
	    format(string, sizeof string, "\n{FFFFFF}As President: {33FF33}%d times\n{FFFFFF}Survives:{33FF33} %d",PTPPlayerInfo[player1][TimesAsPres],PTPPlayerInfo[player1][Survives]);
		strcat(string2,string);
	    format(string, sizeof string, "\n{FFFFFF}Leaders Killed:{33FF33} %d\n{FFFFFF}Money: {33FF33}$%d",PTPPlayerInfo[player1][LeadersKilled],PTPPlayerInfo[player1][Money]);
		strcat(string2,string);
	    format(string, sizeof string, "\n{FFFFFF}Rank: {33FF33}%s\n\n",ThePTPRanks[PTPPlayerInfo[player1][Rank]]);
		strcat(string2,string);
	}
	else if(mode == ZO)
	{
		format(string, sizeof string, " {FFFFFF}>>{FF9900}Zombie Survival{FFFFFF}<<");
		strcat(string2,string);
		format(string, sizeof string, "\n\nWins:{33FF33} %d\n{FFFFFF}Losses: {33FF33}%d\n{FFFFFF}Money: {33FF33}$%d",ZOPlayerInfo[player1][RoundsWon],ZOPlayerInfo[player1][RoundsLost],ZOPlayerInfo[player1][Money]);
		strcat(string2,string);
	    format(string, sizeof string, "\n{FFFFFF}Score: {33FF33}%d\n{FFFFFF}Kills:{33FF33} %d\n{FFFFFF}Deaths: {33FF33}%d\n\n",ZOPlayerInfo[player1][Score],ZOPlayerInfo[player1][Kills],ZOPlayerInfo[player1][Deaths]);
		strcat(string2,string);
	}
	else if(mode == STUNT)
	{
		format(string, sizeof string, " {FFFFFF}>>{FF9900}Stunt&Minigames{FFFFFF}<<");
		strcat(string2,string);
		format(string, sizeof string, "\n\nEvents won: {33FF33}%d\n{FFFFFF}Event Rank: {33FF33}%s\n{FFFFFF}Money: {33FF33}%d",SFPlayerInfo[player1][EventsWon],EventRankNames[SFPlayerInfo[player1][EventRank]],SFPlayerInfo[player1][Money]);
		strcat(string2,string);
		format(string, sizeof string, "\n{FFFFFF}Bet {33FF33}%d time(s)\n{FFFFFF}Bets won: {33FF33}%d\n{FFFFFF}Bets lost: {33FF33}%d\n\n",SFPlayerInfo[player1][Bets],SFPlayerInfo[player1][BetsWon],SFPlayerInfo[player1][BetsLost]);
		strcat(string2,string);
	}
	else if(mode == FFA)
	{
		format(string, sizeof string, " {FFFFFF}>>{FF9900}Free for all{FFFFFF}<<");
		strcat(string2,string);
		format(string, sizeof string, "\n\nTreasures found: {33FF33}%d\n{FFFFFF}Captures: {33FF33}%d\n{FFFFFF}Score: {33FF33}%d",FFAPlayerInfo[player1][Treasures],FFAPlayerInfo[player1][Captures],FFAPlayerInfo[player1][Score]);
		strcat(string2,string);
		format(string, sizeof string, "\n{FFFFFF}Money: {33FF33}$%d\n{FFFFFF}Kills: {33FF33}%d\n{FFFFFF}Deaths: {33FF33}%d",FFAPlayerInfo[player1][Money],FFAPlayerInfo[player1][Kills], FFAPlayerInfo[player1][Deaths]);
		strcat(string2,string);
	    format(string, sizeof string, "\n{FFFFFF}Properties: {33FF33}%d\n{FFFFFF}Treasure Rank: {33FF33}%s\n{FFFFFF}Capture Rank: {33FF33}%s",FFAPlayerInfo[player1][Properties],FFARankNamesTreasure[FFAPlayerInfo[player1][TreasureRank]]);
		strcat(string2,string);
	    format(string, sizeof string, "\n{FFFFFF}Treasure Rank: {33FF33}%s",FFARankNamesTreasure[FFAPlayerInfo[player1][TreasureRank]]);
		strcat(string2,string);
	    format(string, sizeof string, "\n{FFFFFF}Kills Rank: {33FF33}%s",FFARankNamesKills[FFAPlayerInfo[player1][KillsRank]]);
		strcat(string2,string);
	   	if(FFAPlayerInfo[player1][GangID] > 0)
	   	{
	    	new ganglocal = getFFAGangID(FFAPlayerInfo[player1][GangID]);
	   	  	format(string, sizeof string, "\n\n{FFFFFF}Gang: {33FF33}%s(ID:%d)",GangInfo[ganglocal][gName],FFAPlayerInfo[player1][GangID]);
			strcat(string2,string);
	   	  	format(string, sizeof string, "\n{FFFFFF}Members: {33FF33}%d\n{FFFFFF}Player Rank: {33FF33}%s\n\n",GangInfo[ganglocal][Members],FFAPlayerInfo[player1][gRank]);
			strcat(string2,string);
		}
		else
		{
			format(string, sizeof string, "\n{FFFFFF}Gang: {33FF33}No gang\n\n");
			strcat(string2,string);
		}
	}
	else if(mode == GK)
	{
		format(string, sizeof string, " {FFFFFF}>>{FF9900}Grab and Kill{FFFFFF}<<");
		strcat(string2,string);
		format(string, sizeof string, "\n\nWon:{33FF33} %d\n{FFFFFF}Money: {33FF33}$%d",GKPlayerInfo[player1][RoundsWon],GKPlayerInfo[player1][Money]);
		strcat(string2,string);
	    format(string, sizeof string, "\n{FFFFFF}Score: {33FF33}%d\n{FFFFFF}Kills:{33FF33} %d\n{FFFFFF}Deaths: {33FF33}%d\n\n",GKPlayerInfo[player1][Score],GKPlayerInfo[player1][Kills],GKPlayerInfo[player1][Deaths]);
		strcat(string2,string);
	}
	else if(mode == -2)
	{
		format(string, sizeof string, " {FFFFFF}>>{FF9900}Server{FFFFFF}<<");
		strcat(string2,string);
		format(string, sizeof string, "\n\nPlayer since: {33FF33}%s\n{FFFFFF}Time Online: {33FF33}%s\n{FFFFFF}VIP: {33FF33}%s", PlayerInfo[player1][RegisterDate], returnPlayerTime(player1),YesNo[PlayerInfo[player1][VIP]]);
		strcat(string2,string);
	    format(string, sizeof string, "\n{FFFFFF}Headshots: {33FF33}%d\n{FFFFFF}Server Credits: {33FF33}%d\n\n",PlayerInfo[player1][HeadShots],PlayerInfo[player1][Credits]);
		strcat(string2,string);
	}
	
	if(mode == -1)
	{
	    PlayerInfo[playerid][SelectMenu] = THE_STATS_SELECT_MENU;
	    
	    PlayerInfo[playerid][SelectMenuOption][0] = -2;
	    PlayerInfo[playerid][SelectMenuOption][1] = TW;
	    PlayerInfo[playerid][SelectMenuOption][2] = FFA;
	    PlayerInfo[playerid][SelectMenuOption][3] = STUNT;
	    PlayerInfo[playerid][SelectMenuOption][4] = CO;
	    PlayerInfo[playerid][SelectMenuOption][5] = CTF;
	    PlayerInfo[playerid][SelectMenuOption][6] = DM;
	    PlayerInfo[playerid][SelectMenuOption][7] = ZO;
	    PlayerInfo[playerid][SelectMenuOption][8] = PJ;
	    PlayerInfo[playerid][SelectMenuOption][9] = PTP;
	    PlayerInfo[playerid][SelectMenuOption][10] = GK;
	    PlayerInfo[playerid][SelectMenuOption][11] = TL;
	    PlayerInfo[playerid][SelectMenuOption][12] = VW;
	    

		if(PlayerInfo[player1][Spawned] == 0)format(string, sizeof string, "{FF9900}%s{FFFFFF}'s Stats, not playing",PlayerInfo[player1][Name]);
	    else
		{
			if(PlayerInfo[player1][PlayerMode] == TW)format(string, sizeof string, "{FF9900}%s{FFFFFF}'s Stats, at %s as %s",PlayerInfo[player1][Name],PlayerModeNames[PlayerInfo[player1][PlayerMode]],CountryClassNames[TWPlayerInfo[player1][Country]][TWPlayerInfo[player1][Class]]);
			else if(PlayerInfo[player1][PlayerMode] == TL)format(string, sizeof string, "{FF9900}%s{FFFFFF}'s Stats, at %s as %s",PlayerInfo[player1][Name],PlayerModeNames[PlayerInfo[player1][PlayerMode]],PowerNames[PlayerInfo[player1][pTeam]]);
			else if(PlayerInfo[player1][PlayerMode] == CO)format(string, sizeof string, "{FF9900}%s{FFFFFF}'s Stats, at %s as %s",PlayerInfo[player1][Name],PlayerModeNames[PlayerInfo[player1][PlayerMode]],TeamNamesCO[PlayerInfo[player1][pTeam]]);
			else if(PlayerInfo[player1][PlayerMode] == CTF)format(string, sizeof string, "{FF9900}%s{FFFFFF}'s Stats, at %s as %s",PlayerInfo[player1][Name],PlayerModeNames[PlayerInfo[player1][PlayerMode]],TeamNamesCTF[PlayerInfo[player1][pTeam]]);
			else if(PlayerInfo[player1][PlayerMode] == VW)format(string, sizeof string, "{FF9900}%s{FFFFFF}'s Stats, at %s as %s",PlayerInfo[player1][Name],PlayerModeNames[PlayerInfo[player1][PlayerMode]],TeamNamesVW[PlayerInfo[player1][pTeam]]);
			else if(PlayerInfo[player1][PlayerMode] == ZO)format(string, sizeof string, "{FF9900}%s{FFFFFF}'s Stats, at %s as %s",PlayerInfo[player1][Name],PlayerModeNames[PlayerInfo[player1][PlayerMode]],TeamNamesZO[PlayerInfo[player1][pTeam]]);
			else if(PlayerInfo[player1][PlayerMode] == PTP)format(string, sizeof string, "{FF9900}%s{FFFFFF}'s Stats, at %s as %s",PlayerInfo[player1][Name],PlayerModeNames[PlayerInfo[player1][PlayerMode]],TeamNamesPTP[PTPPlayerInfo[player1][Class]]);
			else format(string, sizeof string, "{FF9900}%s{FFFFFF}'s Stats, playing at %s",PlayerInfo[player1][Name],PlayerModeNames[PlayerInfo[player1][PlayerMode]]);
		}
		format(string2, sizeof string2, "\nServer\nWorld War Two TW\nFree For All\nStunt and Minigames\nCops and Criminals\nCapture the Flag\nRace and Derby\nZombie Survival\nParachute Jumping\nProtect the President\nGrab and Kill\nWW2 Missions\nVietnam War");
		ShowPlayerDialog(playerid, SELMENU, DIALOG_STYLE_LIST, string, string2, "Select", "Close");
	}
	else
	{
	    PlayerInfo[playerid][SelectMenu] = THE_STATS_MODE_MENU;
		ShowPlayerDialog(playerid, SELMENU, DIALOG_STYLE_MSGBOX, "Player Stats", string2, "Back", "Close");
	}
	PlayerInfo[playerid][SelectMenuOption][SELECT_MENU_OPTIONS-1] = player1;
	//printf("DEBUG CFONTROL ShowPlayerStats 2 pid %d",playerid);
    return 1;
}

//==============================================================================
public OnPlayerCommandText(playerid, cmdtext[])
{
	//printf("DEBUG CFONTROL OnPlayerCommandText cmd %s", cmdtext);
	if(!PlayerInfo[playerid][MainMenu] || !PlayerInfo[playerid][PlayerOptionSelected] || (GetPlayerMode(playerid) == -1 && !PlayerInfo[playerid][Level]))
    	return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You must spawn before using any command.");
 	if(PlayerInfo[playerid][LoggedIn] == 0)
	{
	   SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must must login to type a command.");
	   return 0;
	}
	if(PlayerInfo[playerid][HasSelectedVeh] == 0)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must get out of the car menu.");
	if(PlayerInfo[playerid][NoCMD] > 0 || PlayerInfo[playerid][Jailed] > 0 || (PlayerInfo[playerid][Spawned] == 0 && GetPlayerState(playerid) != PLAYER_STATE_SPECTATING))return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use commands.");
	PlayerInfo[playerid][Commands]++;
    if(PlayerInfo[playerid][Level]==0)
	{
	    if(PlayerInfo[playerid][Commands] >= 15)
	    {
			user_Ban(playerid,-1,"Exessive command spam",true,true,0);
			return 0;
        }
        if(PlayerInfo[playerid][Commands] >= 4)
	    {
	        PlayerInfo[playerid][NoCMD] = 30;
	        new string[128];
	        format(string,sizeof(string),"{FF0000}[NO CMD]{FFFFFF} %s ID:%d can't use CMDs for 30 seconds. Reason: Command spam.",PlayerInfo[playerid][Name],playerid);
			SendMessageToAll(false, red1, string);
			format(string, sizeof(string), "[NO CMD] %s ID:%d can't use CMDs for 30 seconds. Reason: Command spam.",PlayerInfo[playerid][Name],playerid);
			db_SaveForAdminText(string);
			db_SaveChat(-1, -1, string);
			return 0;
        }
    }
	new string[128];
    /*forLoop(i, MAX_PLAYERS)
	{
		if(IsPlayerConnected(i) && PlayerInfo[i][Level] >=6 && PlayerInfo[i][LoggedIn])
		{
			if(i != playerid)
			{
			    format(string, sizeof(string), "[CMD]-%s (ID:%d) has typed: %s", PlayerInfo[playerid][Name],playerid,cmdtext);
				SendClientMessage(i, COLOR_SEAGREEN, string);
			}
		}
	}*/


	if(PlayerInfo[playerid][Level] < 6)
	{
		db_SaveCommands(playerid, cmdtext);
	}

    //================ [ Read Comamands ] ===========================//

	forLoop(i, MAX_PLAYERS)
	{
		if(IsPlayerConnected(i))
		{
			if( (PlayerInfo[i][Level] > PlayerInfo[playerid][Level]) && (PlayerInfo[i][Spycmds] == 1) && (i != playerid) && PlayerInfo[i][Registered] && PlayerInfo[i][LoggedIn])
			{
			    format(string, sizeof(string), "[CMD]-%s (ID:%d) has typed: %s", PlayerInfo[playerid][Name],playerid,cmdtext);
				SendClientMessage(i, COLOR_SEAGREEN, string);
			}
		}
	}

    if ((strcmp(cmdtext, "/tut", true) == 0)||(strcmp(cmdtext, "/tutorial", true) == 0)||(strcmp(cmdtext, "/help", true) == 0))
	{
	    //ShowPlayerTut(playerid);
	    if(PlayerInfo[playerid][Spawned] == 0) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command at this moment.");
		new string2[594];
        ShowPlayerDialog(playerid, 4511, DIALOG_STYLE_MSGBOX,"Loading Mode Tutorial", "Loading...", "Close", "");
		if(PlayerInfo[playerid][PlayerMode] == TW)
		{
			strcat(string2,"\n{FFFFFF}>>{FF9900}World War Two Total War{FFFFFF}(TW)");
			strcat(string2,"\nThere are seven(7) countries{33FF33}({FFFFFF}Britain {800080}Germany {33FF33}USA {FFFF00}Soviet Union {FF9900}Italy {FF0000}Japan {375FFF}Balkan Nations{33FF33})");
			strcat(string2,"\n{FFFFFF}which are devided into two(2) Powers{33FF33}({375FFF}Allies {FF0000}Axis{33FF33}).{FFFFFF} Both powers must take");
			strcat(string2,"\ndown all the enemy ships/submarines, conquer all enemy land, and kill any enemy Leader");
			strcat(string2,"\nin order for them to win the war. There are eight(8) different classes(Leader, Vice leader, Guard,");
			strcat(string2,"\nSoldier, Pilot, Medic, Engineer, Spy) in each country. Use '/myduty'.");
            ShowPlayerDialog(playerid, 4001, DIALOG_STYLE_MSGBOX,"{375FFF}TW {FFFFFF}Tutorial", string2, "Close", "");
		}
		if(PlayerInfo[playerid][PlayerMode] == STUNT)
		{
			strcat(string2,"\n{FFFFFF}>>{FF9900}Stunt & Fun{FFFFFF}(SF)");
			strcat(string2,"\nIn this mode you can either create your own minigame or stunt around the map.");
			strcat(string2,"\nThere is no deathmatching in this mode, only fun! You can also use the");
			strcat(string2,"\nboost feature to make your vehicle fly or go as fast as the speed of light.");
			strcat(string2,"\nHold N to boost, press Horn to hop, 2 flip car, and Y to enable/disable boost.");
            ShowPlayerDialog(playerid, 4001, DIALOG_STYLE_MSGBOX,"{375FFF}SF {FFFFFF}Tutorial", string2, "Close", "");
        }
        if(PlayerInfo[playerid][PlayerMode] == FFA)
		{
			strcat(string2,"\n{FFFFFF}>>{FF9900}Free For All{FFFFFF}(FFA)");
			strcat(string2,"\nThe possibilities in this mode are limitless. You can either join a gang or fight anyone alone.");
			strcat(string2,"\nYou can spawn any vehicle you desire. You can kill anyone you want.");
			strcat(string2,"\nFor more adventures, there are 101 treasures hidden in the map.");
			strcat(string2,"\nYou can win prizes if all of them are found!");
            ShowPlayerDialog(playerid, 4001, DIALOG_STYLE_MSGBOX,"{375FFF}FFA {FFFFFF}Tutorial", string2, "Close", "");
        }
        if(PlayerInfo[playerid][PlayerMode] == CO)
		{
			strcat(string2,"\n{FFFFFF}>>{FF9900}The Coppers{FFFFFF}(CO)");
			strcat(string2,"\nThere are two(2) Teams{33FF33}({375FFF}Police {FF0000}Criminal{33FF33}). {375FFF}Policemen{FFFFFF}");
			strcat(string2,"\nmust jail or kill all {FF0000}Criminals{FFFFFF} before the time runs out using N. If all are jailed, the Police wins");
			strcat(string2,"\notherwise, the Criminals win the round. The round then restarts to another map.");
            ShowPlayerDialog(playerid, 4001, DIALOG_STYLE_MSGBOX,"{375FFF}CO {FFFFFF}Tutorial", string2, "Close", "");
		}
        if(PlayerInfo[playerid][PlayerMode] == TL)
		{
			strcat(string2,"\n{FFFFFF}>>{FF9900}World War Two Time Line{FFFFFF}(TL)");
			strcat(string2,"\nThere are two(2) Powers{33FF33}({375FFF}Allies {FF0000}Axis{33FF33}). {FFFFFF}The game takes place in");
			strcat(string2,"\nthe most important and historic WW2 battles such as: Pearl Harbor, D-day, Battle of Stalingrad etc..");
			strcat(string2,"\nIn each battle, both powers have different missions. The must either protect or attack the other team.");
            ShowPlayerDialog(playerid, 4001, DIALOG_STYLE_MSGBOX,"{375FFF}TL {FFFFFF}Tutorial", string2, "Close", "");
		}
        if(PlayerInfo[playerid][PlayerMode] == PTP)
		{
		    strcat(string2,"\n{FFFFFF}There are two(2) oposing teams, the Good and the Bad. The Good have to protect the president, while");
		    strcat(string2,"\nthe Bad have to assasinate him. There is an extra team, Civilians, to create balance between those two teams.");
		    strcat(string2,"\nCivilians power can either protect or kill the president. There is no team for the civilians. (/leaders)");
		    strcat(string2,"\nRemember: no team killing, jacking, cheating, bugging or any other things you might gain advantage on.");
            ShowPlayerDialog(playerid, 4001, DIALOG_STYLE_MSGBOX,"{375FFF}PTP {FFFFFF}Tutorial", string2, "Close", "");
		}
        if(PlayerInfo[playerid][PlayerMode] == CTF)
		{
			strcat(string2,"\n{FFFFFF}There are two(2) Teams{33FF33}({375FFF}BLUE {FF0000}RED{33FF33}).");
            strcat(string2,"\n{FFFFFF}Each team must protect their flag and capture the enemy flag.");
            strcat(string2,"\nFirst team to score 5 times wins the round. A player can use /red or /blue");
            strcat(string2,"\nto switch teams. A player can press N to drop a flag. If the flag is dropped");
            strcat(string2,"\nthat flag will respawn in 15 seconds. No team killing/shooting. Have fun!");
            ShowPlayerDialog(playerid, 4001, DIALOG_STYLE_MSGBOX,"{375FFF}CTF {FFFFFF}Tutorial", string2, "Close", "");
		}
        if(PlayerInfo[playerid][PlayerMode] == ZO)
		{
			strcat(string2,"\n{FFFFFF}There are two(2) Teams{33FF33}({33AA33}HUMANS {FF9900}ZOMBIES{33FF33}).");
            strcat(string2,"\n{FFFFFF}Humans must survive the zombie outbreak until support comes for help.");
            strcat(string2,"\nIf a human dies, that human is infected and will become a zombie.");
            strcat(string2,"\nIf all humans are turned into zomibes, the zombies win the round...");
            strcat(string2,"\nHumans can use /shop to buy items. No team killing/shooting. Have fun!");
            ShowPlayerDialog(playerid, 4001, DIALOG_STYLE_MSGBOX,"{375FFF}ZO {FFFFFF}Tutorial", string2, "Close", "");
		}
        if(PlayerInfo[playerid][PlayerMode] == TRP)
		{
			strcat(string2,"\n{FFFFFF}Type: !<text> to shout and @<text> to whisper.");
            strcat(string2,"\nPress ENTER to enter/exit interiors.");
            strcat(string2,"\n/givemoney <amount> to give cash");
            strcat(string2,"\n/rpr <name> to report a player");
            strcat(string2,"\nPress ALT to look/pick up item");
            strcat(string2,"\nPress Y to access your backpack.");
            strcat(string2,"\nPress N  to use items");
            strcat(string2,"\nHold N near fuel place to fill up your gas can");
            strcat(string2,"\nHold N near vehicle to fill up your car with fuel");
            strcat(string2,"\nPress N while swimming to fill up your bottle");
            strcat(string2,"\nUse /rpnote to leave a note on the ground, /r for radio, /rchan for channel");
            ShowPlayerDialog(playerid, 4001, DIALOG_STYLE_MSGBOX,"{375FFF}RP {FFFFFF}Tutorial", string2, "Close", "");
		}
        if(PlayerInfo[playerid][PlayerMode] == DM)
		{
			strcat(string2,"\n{FFFFFF}There are two types of maps in this mode, DD and DM.");
            if(DMMAPInfo[Type] == DM_TYPE_DD)
				strcat(string2,"\n{FFFFFF}This current map is a DD map, therefore raming one another is allowed.");
			else if(DMMAPInfo[Type] == DM_TYPE_DM)
			{
                strcat(string2,"\n{FFFFFF}This current map is a DM map, therefore raming one another is NOT allowed.");
                strcat(string2,"\n{FFFFFF}In this kind of map you can use /world to change your world ID.");
			}
			else
			{
			    strcat(string2,"\n{FFFFFF}This current map is a RACE map, therefore raming one another is NOT allowed.");
                strcat(string2,"\n{FFFFFF}In this kind of map you can use /world to change your world ID.");
			}
			strcat(string2,"\nYou can also use /rate to rate the current map. Fake rating isn't allowed.");
			strcat(string2,"\nUse /tt to toggle Top Times, use /db to toggle death board. Use /shop for shopping.");
			strcat(string2,"\nUse /pvp to challenge someone on a player vs player mode..");
			strcat(string2,"\nThe last one alive wins the map and the maps alternate.");
            ShowPlayerDialog(playerid, 4001, DIALOG_STYLE_MSGBOX,"{375FFF}DM/DD {FFFFFF}Tutorial", string2, "Close", "");
		}
        if(PlayerInfo[playerid][PlayerMode] == PJ)
		{
			strcat(string2,"\n{FFFFFF}In this mode you must pick up a parachute and jump.");
			strcat(string2,"\nYou must evade all obstacles and try to reach the end, where you will");
			strcat(string2,"\ngo to a dueling mode to fight the other survivors..");
			strcat(string2,"\nThe last one alive wins the map and the maps alternate.");
			strcat(string2,"\nYou can also use /rate to rate the current map. Fake rating isn't allowed.");
			strcat(string2,"\nUse /tt to toggle Top Times, /shop to shop, /flare for smoke");
			strcat(string2,"\nUse /pvp to challenge someone on a player vs player mode..");
            ShowPlayerDialog(playerid, 4001, DIALOG_STYLE_MSGBOX,"{375FFF}PJ {FFFFFF}Tutorial", string2, "Close", "");
		}
		if(PlayerInfo[playerid][PlayerMode] == GK)
		{
			strcat(string2,"\n{FFFFFF}>>{FF9900}Grab & Kill{FFFFFF}(GK)");
			strcat(string2,"\nIn this mode your only duty is to grab the bag and kill anyone around you.");
			strcat(string2,"\nThe player with the longest bag holding time wins the round.");
            ShowPlayerDialog(playerid, 4001, DIALOG_STYLE_MSGBOX,"{375FFF}GK {FFFFFF}Tutorial", string2, "Close", "");
        }
		if(PlayerInfo[playerid][PlayerMode] == VW)
		{
			strcat(string2,"\n{FFFFFF}>>{FF9900}Vietnam War{FFFFFF}(VW)");
			strcat(string2,"\nThis mode is about the Vietnam War, USA vs Vietnam. At the");
			strcat(string2,"\nbeginning of a round, both teams have a certain score. If the score");
			strcat(string2,"\nof one team reaches zero before the other, it will result in a loss.");
			strcat(string2,"\nThe more objectives the teams control, the slower the score decreses.");
			strcat(string2,"\nMedics and Engineers can press ALT to activate");
			strcat(string2,"\ntheir selected actions. No team killing/shooting. Have fun!");
            ShowPlayerDialog(playerid, 4001, DIALOG_STYLE_MSGBOX,"{375FFF}VW {FFFFFF}Tutorial", string2, "Close", "");
        }
	 	return 1;
	}
    if ((strcmp(cmdtext, "/viphelp", true) == 0))
	{
	    new string2[391];
	    strcat(string2,"\n{FFFFFF}VIP Help:");
		strcat(string2,"\nIn order to become VIP on this server, you must purchase it.");
		strcat(string2,"\nYou can find the price on the VIP section of the forums.");
		strcat(string2,"\nBeing a VIP doesn't mean you are part of the staff.");
		strcat(string2,"\nIt only gives you a few privilages and it shows to us that");
		strcat(string2,"\nyou are contributing and helping us. You also get a few");
		strcat(string2,"\nspecial commands throughout the entire server.");
		strcat(string2,"\nFor more info, check our website(/info)");
		ShowPlayerDialog(playerid, 4001, DIALOG_STYLE_MSGBOX,"{375FFF}Server{FFFFFF} Rules", string2, "Close", "");
	 	return 1;
	}
    if ((strcmp(cmdtext, "/rules", true) == 0))
	{
	    new string2[997];
	    ShowPlayerDialog(playerid, 4511, DIALOG_STYLE_MSGBOX,"Loading Rules", "Loading...", "Close", "");
        strcat(string2,"\n{FF0000}Rules:");
		strcat(string2,"\nNo advertising.");
		strcat(string2,"\nNo cheating, moding that give you advantages.");
		strcat(string2,"\nNo bugging and glitching.");
		strcat(string2,"\nNo spamming.");
		strcat(string2,"\nNo Racism and sexual harrastment.");
		strcat(string2,"\nNo on this list will be tolerated. If you are seen doing");
		strcat(string2,"\nany of these, you will be permanently banned.");
        if(PlayerInfo[playerid][Level] > 1)
		{
	        strcat(string2,"\n\n{FFFFFF}>>Admin rules/help:");
        	strcat(string2,"\nDO NOT ABUSE commands for any reason there is. If so, you will be demoted.");
	        strcat(string2,"\nCheck /reports for recent reports. Before anything, spectate(/spec) the players first.");
	        strcat(string2,"\nDo not be stupid and act childish. You have to act mature and responsible for what happens in-game.");
	        strcat(string2,"\nFor team shooting(doing damage to the player): Jail the player for 1 min, unless it is repeated");
	        strcat(string2,"\njail the player for 2-5 mins. In extreme cases, just kick the player.");
	        strcat(string2,"\nIf you cannot ban and there is a hacker, tell high lvl admins to ban the player.");
	        strcat(string2,"\nIf there is no one else online, jail the player for 30 mins.");
	        strcat(string2,"\nBut, hackers are always caught so, there shouldn't be any problem.");
	        strcat(string2,"\nIf you need more help, ask other admins in team chat using '#text'.");
	    }
		ShowPlayerDialog(playerid, 4001, DIALOG_STYLE_MSGBOX,"Server Rules", string2, "Close", "");
	 	return 1;
	}

	if ((strcmp(cmdtext, "/cmds", true) == 0) || (strcmp(cmdtext, "/commands", true) == 0) || (strcmp(cmdtext, "/commandos", true) == 0))
	{
     	new string2[952];
    	format(string2,sizeof string2,"{FFFFFF}");
		ShowPlayerDialog(playerid, 4511, DIALOG_STYLE_MSGBOX,"Loading CMDs", "Loading...", "Close", "");
		if(PlayerInfo[playerid][PlayerMode] == TW)
		{
			strcat(string2,"\n>>Gameplay:");
			strcat(string2,"\n/myduty-Shows player's duty.");
			strcat(string2,"\n/newclass-Change the current class.");
			strcat(string2,"\n/enemy-Shows your foes and friends.");
			strcat(string2,"\n/teams(/colors)-Shows the countries and their colors.");
			strcat(string2,"\n/lands-Shows the zone status.");
			strcat(string2,"\n/ships-Shows the ship/submarine status.");
			strcat(string2,"\n/leaders-Shows the main characters.");
			strcat(string2,"\n>>Help:");
			strcat(string2,"\n/aahelp-Anti Aircraft gun help.");
			strcat(string2,"\n/bhelp-Dropping bombs help");
			strcat(string2,"\n/rhelp-About class ranks.");
			strcat(string2,"\n/refillhelp-How to get a refill(bomb/weapon)");
			strcat(string2,"\n/atomhelp-How atomic bomb is used.");
			strcat(string2,"\n/atomprice-Price of atomic bomb.");
			strcat(string2,"\n>>Special class cmds:");
			strcat(string2,"\n/(un)camo-Camouflage yourself, spies only.");
			strcat(string2,"\n/(un)makevice-Make/unmake someone the vice leader, leaders only.");
			strcat(string2,"\n/(un)makeguard-Make/unmake someone your guard, leaders only.");
			strcat(string2,"\n/(un)makespy-Make/unmake someone your spy, leaders only.");
			strcat(string2,"\n>>Squad:");
			strcat(string2,"\n/sinvite-Invite someone to the squad, squad leaders only.");
			strcat(string2,"\n/skick-Kick someone from the squad, squad leaders only.");
			strcat(string2,"\n/sinfo-Check any squad's info.");
			strcat(string2,"\n/squit-Quit your squad.");
			return ShowPlayerDialog(playerid, CMDS_NEXT, DIALOG_STYLE_MSGBOX,"Commands", string2, "Next", "Close");
		}
		if(PlayerInfo[playerid][PlayerMode] == STUNT)
		{
			strcat(string2,"\n/events-See the whole list of created events.");
			strcat(string2,"\n/estart-Start an event(race,dm,derby..etc).");
			strcat(string2,"\n/ejoin(/equit)-Join/quit an event.");
			strcat(string2,"\n/einfo-Check an event's info.");
			strcat(string2,"\n/inevent-See which player is in the current event.");
			strcat(string2,"\n/teles-See the teleport list.");
			strcat(string2,"\n/tele-Teleport to a friend.");
			strcat(string2,"\n/blocktele-Block/unblock teleports to your position.");
			strcat(string2,"\n/s-Save the current position.");
			strcat(string2,"\n/ssp-Save the current position as spawn place");
			strcat(string2,"\n/cars-Vehicle selection menu.");
			strcat(string2,"\n/car-Spawn a specific vehicle. (EG: /car nrg)");
			strcat(string2,"\n/fcar(2)-Flip your vehicle.");
			strcat(string2,"\n/nos-Add NOS to your vehicle.");
			strcat(string2,"\n/jetpack-Spawn a jetpack.");
			strcat(string2,"\n/skin(/skins)-Change your skin.");
			strcat(string2,"\n/attachments-Attach objects to your body.");
			return ShowPlayerDialog(playerid, CMDS_NEXT, DIALOG_STYLE_MSGBOX,"Commands", string2, "Next", "Close");
        }
        if(PlayerInfo[playerid][PlayerMode] == FFA)
		{
			strcat(string2,"\n/cars-Vehicle selection menu.");
			strcat(string2,"\n/car-Spawn a specific vehicle. (EG: /car nrg)");
			strcat(string2,"\n/skin(/skins)-Change your skin.");
			strcat(string2,"\n/attachments-Attach objects to your body.");
			strcat(string2,"\n/ginvite-Invite someone to the gang, leaders/vice leaders only.");
			strcat(string2,"\n/grank-Change the ranks of members, leaders/vice leaders only.");
			strcat(string2,"\n/g(un)makevice-Make/unmake someone vice leader, leaders only.");
			strcat(string2,"\n/gpm-Gang to gang chat.");
			strcat(string2,"\n/g(un)lock-Lock/unlock interir doors, leaders/vice leaders only.");
			strcat(string2,"\n/gkick-Kick someone from the gang, leaders only.");
			strcat(string2,"\n/ginfo-Check any gang's info.");
			strcat(string2,"\n/gquit-Quit your gang.");
			return ShowPlayerDialog(playerid, CMDS_NEXT, DIALOG_STYLE_MSGBOX,"Commands", string2, "Next", "Close");
        }
        strcat(string2,"\n>>Server:");
		strcat(string2,"\n/tut- Tutorial of modes");
		strcat(string2,"\n/rules-The server rules");
		strcat(string2,"\n/info-Server info such as website and UCP");
		strcat(string2,"\n/cm-Shows how to change server mode.");
		strcat(string2,"\n/lobby-Go to lobby");
		strcat(string2,"\n/pinfo-show/hide player info");
		strcat(string2,"\n>>Players&Gameplay:");
		strcat(string2,"\n/getid-Search for a player's id.");
		strcat(string2,"\n/sound-Change sound settings.");
		strcat(string2,"\n/beforefilming-Hides big textdraws for filming.");
		strcat(string2,"\n/report-Report a rule breaker to an admin.");
		strcat(string2,"\n/pm-Send a personal message.");
		strcat(string2,"\n/(un)blockpms-Block/unblock incoming personal messages.");
		strcat(string2,"\n/sync-Sync player if bugged.");
		strcat(string2,"\n/anims-List of animations.");
		strcat(string2,"\n/fstyle-Change your fight style.");
		strcat(string2,"\n/carcolor-Change your vehicle's color.");
		strcat(string2,"\n>>Player account:");
		strcat(string2,"\n/stats-See your stats or anyone else's.");
		strcat(string2,"\n/changepass-Change your account's password.");
		strcat(string2,"\n/viphelp-Find out more about VIP.");
		if(PlayerInfo[playerid][VIP] == 1)strcat(string2,"\n/vipcmds-VIP commands");
		if(PlayerInfo[playerid][Level] >= 1)strcat(string2,"\n/admincmds-Admin commands");
		ShowPlayerDialog(playerid, 4511, DIALOG_STYLE_MSGBOX,"Commands", string2, "Close", "");
	 	return 1;
	}


	if ((strcmp(cmdtext, "/newclass", true) == 0)||(strcmp(cmdtext, "/changeclass", true) == 0)||(strcmp(cmdtext, "/class", true) == 0)||(strcmp(cmdtext, "/reclass", true) == 0))
	{
		if(PlayerInfo[playerid][PlayerMode] != TW)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be in the TW mode to use this command.");
		if(!isAllowedToChangeMode(playerid, true))return 1;
		if(IsPlayerFalling(playerid) || IsPlayerSwimming(playerid))return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} To avoid abuse, you must be on foot to use this command.");
		if((TWInfo[Map] == NorthernSA && !IsPlayerInRangeOfPoint(playerid, 300,CountrySpawnNorth[TWPlayerInfo[playerid][Country]][1],CountrySpawnNorth[TWPlayerInfo[playerid][Country]][2],CountrySpawnNorth[TWPlayerInfo[playerid][Country]][3]))
			|| (TWInfo[Map] == SouthernSA && !IsPlayerInRangeOfPoint(playerid, 300,CountrySpawnSouth[TWPlayerInfo[playerid][Country]][1],CountrySpawnSouth[TWPlayerInfo[playerid][Country]][2],CountrySpawnSouth[TWPlayerInfo[playerid][Country]][3])))
			    return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} To avoid abuse, you must be near your spawn to use this command.");
		if(GetThePlayerHealth(playerid) < 30)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} To avoid abuse, you must have at least 30 percent of health.");
		if(PlayerInfo[playerid][Jailed] > 0) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command in jail");
		if(PlayerInfo[playerid][Spawned] == 0)return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You have to be spawned in order to use this command.");
		ShowPlayerDialog(playerid, CLASSMENU, DIALOG_STYLE_LIST, "Class Selection Menu","\nSoldier   (/soldier) \nPilot   (/pilot) \nMedic   (/medic) \nEngineer   (/engineer)", "Select", "Cancel");
		return 1;
	}



	if ((strcmp(cmdtext, "/v", true) == 0)||(strcmp(cmdtext, "/cars", true) == 0)||(strcmp(cmdtext, "/vehicle", true) == 0)||(strcmp(cmdtext, "/vehicles", true) == 0)||(strcmp(cmdtext, "/vmenu", true) == 0)
	||(strcmp(cmdtext, "/carmenu", true) == 0)||(strcmp(cmdtext, "/vehiclemenu", true) == 0)||(strcmp(cmdtext, "/vehiculos", true) == 0))
	{
	    if(PlayerInfo[playerid][Jailed] > 0) return
		SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command in jail");
		if(PlayerInfo[playerid][Spawned] == 0) return
			SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command in this moment");
		if(PlayerInfo[playerid][PlayerMode] == STUNT && SFPlayerInfo[playerid][Event] > 0) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command at this moment. You are in an event.");
		if(IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,blue,"{FF0000}Error:{FFFFFF} You cannot use this comamnd in any vehicle");
		if(GetPlayerInterior(playerid) > 0)return SendClientMessage(playerid,blue,"{FF0000}Error:{FFFFFF} You cannot use this comamnd in an interior");
		if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING || GetPlayerState(playerid) == PLAYER_STATE_WASTED)return SendClientMessage(playerid,blue,"{FF0000}Error:{FFFFFF} You cannot use this comamnd now.");
		if(PlayerInfo[playerid][PlayerMode] == FFA || PlayerInfo[playerid][PlayerMode] == STUNT)
		{
		    if(SFPlayerInfo[playerid][Spiderman] == 1 && PlayerInfo[playerid][PlayerMode] == STUNT) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command at this moment. Disable /spiderman first.");
			if(SFPlayerInfo[playerid][Superman] == 1 && PlayerInfo[playerid][PlayerMode] == STUNT) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command at this moment. Disable /superman first.");
			if(PlayerInfo[playerid][Vehicle] != -1) CarDeleter(PlayerInfo[playerid][Vehicle]);
		    GetPlayerFacingAngle(playerid,PlayerInfo[playerid][cSelPos][3]);
			GetPlayerPos(playerid,PlayerInfo[playerid][cSelPos][0],PlayerInfo[playerid][cSelPos][1],PlayerInfo[playerid][cSelPos][2]);
            OtherDeathDisconnect(playerid,1,0);
			CarSelection(playerid);
		}
		else return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be in Stunt&Fun or FFA mode to use this command.");
		return 1;
	}
	if ((strcmp(cmdtext, "/oplayers", true) == 0)||(strcmp(cmdtext, "/players", true) == 0)||(strcmp(cmdtext, "/changemode", true) == 0)||(strcmp(cmdtext, "/cm", true) == 0)||(strcmp(cmdtext, "/modes", true) == 0)||(strcmp(cmdtext, "/server", true) == 0))
	{
	    new str11[1280];
		new str[128];
  		format(str,128,"{FFFFFF}Total Online players: {2641FE}%d",WConnectedPlayers());
		strcat(str11, str);
		format(str,128,"\n\n{2641FE}WW2 Total War: {FFFFFF}%d players",ModeCount(TW));
    	strcat(str11, str);
  		strcat(str11,"\nTo join type: {33FF33}/tw{FFFFFF}(/br {800080}/ger {33FF33}/usa {FFFF00}/sv {FF9900}/ita {FF0000}/jap {375FFF}/bk{FFFFFF})");
		format(str,128,"\n\n{2641FE}WW2 Time Line: {FFFFFF}%d players\nTo join type: {33FF33}/tl{FFFFFF}({375FFF}/allies {FF0000}/axis{FFFFFF})",ModeCount(TL));
		strcat(str11, str);
		format(str,128,"\n\n{33AA33}Stunt&Fun: {FFFFFF}%d players\nTo join type:  {33FF33}/sf",ModeCount(STUNT));
		strcat(str11, str);
		format(str,128,"\n\n{2641FE}Capture The Flag: {FFFFFF}%d players\nTo join type:  {33FF33}/ctf{FFFFFF}({375FFF}/blue {FF0000}/red{FFFFFF})",ModeCount(CTF));
		strcat(str11, str);
		format(str,128,"\n\n{33AA33}Vietnam War: {FFFFFF}%d players\nTo join type:  {33FF33}/vw{FFFFFF}",ModeCount(VW));
		strcat(str11, str);
		format(str,128,"\n\n{FFFF00}FFA: {FFFFFF}%d players\nTo join type: {33FF33}/ffa",ModeCount(FFA));
		strcat(str11, str);
		format(str,128,"\n\n{2641FE}DM/DD: {FFFFFF}%d players\nTo join type: {33FF33}/dddm",ModeCount(DM));
		strcat(str11, str);
		format(str,128,"\n\n{800080}Para Jump: {FFFFFF}%d players\nTo join type: {33FF33}/pj",ModeCount(PJ));
		strcat(str11, str);
		format(str,128,"\n\n{33AA33}Protect the President: {FFFFFF}%d players\nTo join type: {33FF33}/ptp",ModeCount(PTP));
		strcat(str11, str);
		format(str,128,"\n\n{375FFF}Zombie Survival: {FFFFFF}%d players\nTo join type: {33FF33}/zo",ModeCount(ZO));
		strcat(str11, str);
		format(str,128,"\n\n{2641FE}The Coppers: {FFFFFF}%d players\nTo join type:  {33FF33}/co",ModeCount(CO));
		strcat(str11, str);
		format(str,128,"\n\n{2641FE}Roleplay: {FFFFFF}%d players\nTo join type:  {33FF33}/rp",ModeCount(TRP));
		strcat(str11, str);
		format(str,128,"\n\n{375FFF}Grab & Kill: {FFFFFF}%d players\nTo join type: {33FF33}/gk",ModeCount(GK));
		strcat(str11, str);

		format(str,128,"Current Mode: %s | Page 1/1",PlayerModeNames[PlayerInfo[playerid][PlayerMode]]);
		ShowPlayerDialog(playerid, 4511, DIALOG_STYLE_MSGBOX,str, str11, "Close", "");
		return 1;
	}
	if ((strcmp(cmdtext, "/lobby", true) == 0)||(strcmp(cmdtext, "/menu", true) == 0)||(strcmp(cmdtext, "/home", true) == 0)||(strcmp(cmdtext, "/afk", true) == 0)||(strcmp(cmdtext, "/leave", true) == 0)||(strcmp(cmdtext, "/exitgm", true) == 0))
	{
	    if(!isAllowedToChangeMode(playerid, false))return 1;
		SetPlayerWorldBounds(playerid, 20000.0000, -20000.0000, 20000.0000, -20000.0000 );
        OtherDeathDisconnect(playerid,0,0);
		ResetWeapons(playerid);
		SetPlayerMode(playerid, LOBBY, false, false);
		new msg[100];
		format(msg, sizeof(msg), "~w~%s (~p~joined~w~) lobby",FixpInfoName(playerid));
		forLoop(i, MAX_MODES)UpdatepInfo(i,msg);
		format(msg, sizeof(msg), "[MODE CHANGE] %s[%d] has joined the lobby!", PlayerInfo[playerid][Name], playerid);
		db_SaveChat(-1, -1, msg);
		PlayerInfo[playerid][Spawned] = 0;
	    PlayerInfo[playerid][MainMenu] = 0;
	    PlayerInfo[playerid][poFirstTime] = 0;
		ShowMMTexts(playerid);
		return 1;
	}
    if(strcmp(cmdtext, "/ptp", true) == 0)
	{
	    if(!isAllowedToChangeMode(playerid, false))return 1;
		new amode = PTP;
		if(PlayerInfo[playerid][ModeUnLock][amode] == 0 && strlen(ModePass[amode]) > 2)
		{
		    PlayerInfo[playerid][ModeUnLockSel] = amode;
		    ShowPlayerDialog(playerid,MODE_PASSWORD, DIALOG_STYLE_INPUT,"Mode Password Menu", "You must enter the password to enter this mode.", "Enter", "Cancel");
		    return 1;
		}
		PlayerInfo[playerid][SelectMenu] = THE_PTP;
	    PlayerInfo[playerid][SelectMenuOption][0]= PRESIDENT;
	    PlayerInfo[playerid][SelectMenuOption][1]= VICE;
	    PlayerInfo[playerid][SelectMenuOption][2]= SECURITY;
	    PlayerInfo[playerid][SelectMenuOption][3]= POLICE;
	    PlayerInfo[playerid][SelectMenuOption][4]= TERRORIST;
	    PlayerInfo[playerid][SelectMenuOption][5]= CIVILIAN;
		ShowPlayerDialog(playerid, SELMENU, DIALOG_STYLE_LIST, "Protect the President Menu","\n{FFFF00}President\nVice President\n{33FF33}Security\n{375FFF}Police\n{FF0000}Terrorist\n{FF9900}Civilian", "Select", "Cancel");
		return 1;
	}
	if((strcmp(cmdtext, "/tw", true) == 0)||(strcmp(cmdtext, "/ww2", true) == 0)||(strcmp(cmdtext, "/newcountry", true) == 0))
	{
	    if(!isAllowedToChangeMode(playerid, false))return 1;
		new amode = TW;
		if(PlayerInfo[playerid][ModeUnLock][amode] == 0 && strlen(ModePass[amode]) > 2)
		{
		    PlayerInfo[playerid][ModeUnLockSel] = amode;
		    ShowPlayerDialog(playerid,MODE_PASSWORD, DIALOG_STYLE_INPUT,"Mode Password Menu", "You must enter the password to enter this mode.", "Enter", "Cancel");
		    return 1;
		}
		new str11[420];
		PlayerInfo[playerid][SelectMenu] = TW_COUNTRY;
        PlayerInfo[playerid][SelectMenuOption][0]= BRITISH;
        PlayerInfo[playerid][SelectMenuOption][1]= USA;
        PlayerInfo[playerid][SelectMenuOption][2]= RUSSIA;
        PlayerInfo[playerid][SelectMenuOption][3]= GERMANY;
        PlayerInfo[playerid][SelectMenuOption][4]= BALKAN;
        PlayerInfo[playerid][SelectMenuOption][5]= JAPAN;
        PlayerInfo[playerid][SelectMenuOption][6]= ITALY;
		strcat(str11, "\n{FFFFFF}Britain  {FFFFFF}({375FFF}ALLIES{FFFFFF}) (/br)  \n{33FF33}USA  {FFFFFF}({375FFF}ALLIES{FFFFFF}) (/usa)  \n{FFFF00}Soviet Union  {FFFFFF}({375FFF}ALLIES{FFFFFF}) (/sv)");
		strcat(str11, "\n{800080}Germany  {FFFFFF}({FF0000}AXIS{FFFFFF}) (/ger) \n{375FFF}Balkan Nations  {FFFFFF}({375FFF}ALLIES{FFFFFF}) (/bk)  \n{FF0000}Japan  {FFFFFF}({FF0000}AXIS{FFFFFF}) (/jap)  \n{FF9900}Italy  {FFFFFF}({FF0000}AXIS{FFFFFF}) (/ita)");
		ShowPlayerDialog(playerid, SELMENU, DIALOG_STYLE_LIST, "Country Selection Menu",str11, "Select", "Cancel");
		return 1;
	}
	if((strcmp(cmdtext, "/co", true) == 0)||(strcmp(cmdtext, "/cnr", true) == 0)||(strcmp(cmdtext, "/cnc", true) == 0))
	{
		if(!isAllowedToChangeMode(playerid, false))return 1;
		new amode = CO;
		if(PlayerInfo[playerid][ModeUnLock][amode] == 0 && strlen(ModePass[amode]) > 2)
		{
		    PlayerInfo[playerid][ModeUnLockSel] = amode;
		    ShowPlayerDialog(playerid,MODE_PASSWORD, DIALOG_STYLE_INPUT,"Mode Password Menu", "You must enter the password to enter this mode.", "Enter", "Cancel");
		    return 1;
		}
		PlayerInfo[playerid][SelectMenu] = THE_CO;
        PlayerInfo[playerid][SelectMenuOption][0]= COP;
        PlayerInfo[playerid][SelectMenuOption][1]= CRIMINAL;
		ShowPlayerDialog(playerid, SELMENU, DIALOG_STYLE_LIST, "The Coppers Menu","\n{375FFF}Policeman\n{FF0000}Criminal", "Select", "Cancel");
		return 1;
	}
	if((strcmp(cmdtext, "/ctf", true) == 0))
	{
		if(!isAllowedToChangeMode(playerid, false))return 1;
		new amode = CTF;
		if(PlayerInfo[playerid][ModeUnLock][amode] == 0 && strlen(ModePass[amode]) > 2)
		{
		    PlayerInfo[playerid][ModeUnLockSel] = amode;
		    ShowPlayerDialog(playerid,MODE_PASSWORD, DIALOG_STYLE_INPUT,"Mode Password Menu", "You must enter the password to enter this mode.", "Enter", "Cancel");
		    return 1;
		}
		PlayerInfo[playerid][SelectMenu] = THE_CTF;
        PlayerInfo[playerid][SelectMenuOption][0]= BLUE;
        PlayerInfo[playerid][SelectMenuOption][1]= RED;
		ShowPlayerDialog(playerid, SELMENU, DIALOG_STYLE_LIST, "Capture the Flag Menu","\n{375FFF}Blue Team{FFFFFF} (/blue)  \n{FF0000}Red Team{FFFFFF} (/red) ", "Select", "Cancel");
		return 1;
	}

	if((strcmp(cmdtext, "/tl", true) == 0)||(strcmp(cmdtext, "/ww2tl", true) == 0)||(strcmp(cmdtext, "/timeline", true) == 0))
	{
		if(!isAllowedToChangeMode(playerid, false))return 1;
		new amode = TL;
		if(PlayerInfo[playerid][ModeUnLock][amode] == 0 && strlen(ModePass[amode]) > 2)
		{
		    PlayerInfo[playerid][ModeUnLockSel] = amode;
		    ShowPlayerDialog(playerid,MODE_PASSWORD, DIALOG_STYLE_INPUT,"Mode Password Menu", "You must enter the password to enter this mode.", "Enter", "Cancel");
		    return 1;
		}
		PlayerInfo[playerid][SelectMenu] = THE_TL;
        PlayerInfo[playerid][SelectMenuOption][0]= ALLIES;
        PlayerInfo[playerid][SelectMenuOption][1]= AXIS;
		ShowPlayerDialog(playerid, SELMENU, DIALOG_STYLE_LIST, "WW2 Timeline Menu","\n{375FFF}Allies{FFFFFF} (/allies)  \n{FF0000}Axis{FFFFFF} (/axis) ", "Select", "Cancel");
		return 1;
	}
    if ((strcmp(cmdtext, "/enemy", true) == 0)||(strcmp(cmdtext, "/enemies", true) == 0)||(strcmp(cmdtext, "/colors", true) == 0)||(strcmp(cmdtext, "/teams", true) == 0)||(strcmp(cmdtext, "/team", true) == 0))
	{
	    if(PlayerInfo[playerid][PlayerMode] != TW)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be in the TW mode to use this command.");
		if(PlayerInfo[playerid][pTeam] == NOPOWER)SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You have no enemy because you have no team.");
  		if(PlayerInfo[playerid][pTeam] == ALLIES && PlayerInfo[playerid][Spawned] == 1)
 		{
			new str11[800];
			strcat(str11, "{FFFFFF}You are an {375FFF} Ally");
            strcat(str11, "\n\n{FF0000}ENEMIES:\n");
			strcat(str11, "\n{800080}Germany{FFFFFF}({FF0000}AXIS{FFFFFF})\n{FF9900}Italy{FFFFFF}({FF0000}AXIS{FFFFFF}){FF0000}\nJapan{FFFFFF}({FF0000}AXIS{FFFFFF})");
			strcat(str11, "\n{FFFFFF}__________________________");
			strcat(str11, "\n\n\n{33FF33}FRIENDS:\n");
			strcat(str11, "\n{FFFFFF}Britain({375FFF}ALLIES{FFFFFF})\n{33FF33}USA{FFFFFF}({375FFF}ALLIES{FFFFFF})");
			strcat(str11, "\n{FFFF00}Soviet Union{FFFFFF}({375FFF}ALLIES{FFFFFF})\n{375FFF}Balkan Nations{FFFFFF}({375FFF}ALLIES{FFFFFF})");
			ShowPlayerDialog(playerid, 4511, DIALOG_STYLE_MSGBOX,"Enemies", str11, "Close", "");
		}
		if(PlayerInfo[playerid][pTeam] == AXIS && PlayerInfo[playerid][Spawned] == 1)
 		{
		    new str11[800];
			strcat(str11, "{FFFFFF}You are an {FF0000} Axis");
            strcat(str11, "\n\n{FF0000}ENEMIES:\n");
			strcat(str11, "\n{FFFFFF}Britain({375FFF}ALLIES{FFFFFF})\n{33FF33}USA{FFFFFF}({375FFF}ALLIES{FFFFFF})");
			strcat(str11, "\n{FFFF00}Soviet Union{FFFFFF}({375FFF}ALLIES{FFFFFF})\n{375FFF}Balkan Nations{FFFFFF}({375FFF}ALLIES{FFFFFF})");
			strcat(str11, "\n{FFFFFF}__________________________");
			strcat(str11, "\n\n\n{33FF33}FRIENDS:\n");
			strcat(str11, "\n{800080}Germany{FFFFFF}({FF0000}AXIS{FFFFFF})\n{FF9900}Italy{FFFFFF}({FF0000}AXIS{FFFFFF}){FF0000}\nJapan{FFFFFF}({FF0000}AXIS{FFFFFF})");
			ShowPlayerDialog(playerid, 4511, DIALOG_STYLE_MSGBOX,"Enemies", str11, "Close", "");
		}
    	return 1;
	}
	if (strcmp(cmdtext, "/red", true) == 0)
	{
	    if(!isAllowedToChangeMode(playerid, false))return 1;
		new amode = CTF;
		if(PlayerInfo[playerid][ModeUnLock][amode] == 0 && strlen(ModePass[amode]) > 2)
		{
		    PlayerInfo[playerid][ModeUnLockSel] = amode;
		    ShowPlayerDialog(playerid,MODE_PASSWORD, DIALOG_STYLE_INPUT,"Mode Password Menu", "You must enter the password to enter this mode.", "Enter", "Cancel");
		    return 1;
		}
		if(CTFPlayerInfo[playerid][Capturing] == 1 && PlayerInfo[playerid][PlayerMode] == CTF)
	  		return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} Can't change team now...");
	  	if(PlayerInfo[playerid][pTeam] == RED && PlayerInfo[playerid][PlayerMode] == CTF)
	  		return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You already are in the Red Team.");
	  	if ((RedCountCTF() > BlueCountCTF())&&PlayerInfo[playerid][VIP] == 0)
  			return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} This team is full.");
		PlayerInfo[playerid][pTeam] = RED;
		SetPlayerMode(playerid, CTF, true, true);
		new str[128];
		format(str,128,"{33FF33}NEWS:{FFFFFF} %s(ID:%d) joined the %s side!",PlayerInfo[playerid][Name],playerid,TeamNamesCTF[PlayerInfo[playerid][pTeam]]);
		SendMessageToMode(CTF,white, str);
        format(str, sizeof(str), "[NEWS] %s[%d] joined the %s side!",PlayerInfo[playerid][Name],playerid,TeamNamesCTF[PlayerInfo[playerid][pTeam]]);
		db_SaveChat(-1, CTF,str);
		return 1;
	}
	if ((strcmp(cmdtext, "/blue", true) == 0))
	{
	    if(!isAllowedToChangeMode(playerid, false))return 1;
		new amode = CTF;
		if(PlayerInfo[playerid][ModeUnLock][amode] == 0 && strlen(ModePass[amode]) > 2)
		{
		    PlayerInfo[playerid][ModeUnLockSel] = amode;
		    ShowPlayerDialog(playerid,MODE_PASSWORD, DIALOG_STYLE_INPUT,"Mode Password Menu", "You must enter the password to enter this mode.", "Enter", "Cancel");
		    return 1;
		}
		if(CTFPlayerInfo[playerid][Capturing] == 1 && PlayerInfo[playerid][PlayerMode] == CTF)
	  		return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} Can't change team now...");
	  	if(PlayerInfo[playerid][pTeam] == BLUE && PlayerInfo[playerid][PlayerMode] == CTF)
	  		return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You already are in the Blue Team.");
    	if ((RedCountCTF() < BlueCountCTF())&&PlayerInfo[playerid][VIP] == 0)
  			return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} This team is full.");
		PlayerInfo[playerid][pTeam] = BLUE;
		SetPlayerMode(playerid, CTF, true, true);
		new str[128];
		format(str,128,"{33FF33}NEWS:{FFFFFF} %s(ID:%d) joined the %s side!",PlayerInfo[playerid][Name],playerid,TeamNamesCTF[PlayerInfo[playerid][pTeam]]);
		SendMessageToMode(CTF,white, str);
        format(str, sizeof(str), "[NEWS] %s[%d] joined the %s side!",PlayerInfo[playerid][Name],playerid,TeamNamesCTF[PlayerInfo[playerid][pTeam]]);
		db_SaveChat(-1, CTF,str);
		return 1;
	}
	if (strcmp(cmdtext, "/axis", true) == 0)
	{
	    if(!isAllowedToChangeMode(playerid, false))return 1;
		new amode = TL;
		if(PlayerInfo[playerid][ModeUnLock][amode] == 0 && strlen(ModePass[amode]) > 2)
		{
		    PlayerInfo[playerid][ModeUnLockSel] = amode;
		    ShowPlayerDialog(playerid,MODE_PASSWORD, DIALOG_STYLE_INPUT,"Mode Password Menu", "You must enter the password to enter this mode.", "Enter", "Cancel");
		    return 1;
		}
		if(PlayerInfo[playerid][pTeam] == AXIS && PlayerInfo[playerid][PlayerMode] == TL)
	  		return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You already are an Axis.");
	  	if ((AxisCountTL() > AllyCountTL())&&PlayerInfo[playerid][VIP] == 0)
  			return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} This team is full.");
		PlayerInfo[playerid][pTeam] = AXIS;
		SetPlayerMode(playerid, TL, true, true);
		new str[128];
		format(str,128,"{33FF33}WAR NEWS:{FFFFFF} %s(ID:%d) is fighting for the %s!",PlayerInfo[playerid][Name],playerid,PowerNames[PlayerInfo[playerid][pTeam]]);
		SendMessageToMode(TL,white, str);
		format(str, sizeof(str), "[WAR NEWS] %s[%d] is fighting for the %s!",PlayerInfo[playerid][Name],playerid,PowerNames[PlayerInfo[playerid][pTeam]]);
		db_SaveChat(-1, TL,str);
		return 1;
	}
	if (strcmp(cmdtext, "/allies", true) == 0)
	{
	    if(!isAllowedToChangeMode(playerid, false))return 1;
		new amode = TL;
		if(PlayerInfo[playerid][ModeUnLock][amode] == 0 && strlen(ModePass[amode]) > 2)
		{
		    PlayerInfo[playerid][ModeUnLockSel] = amode;
		    ShowPlayerDialog(playerid,MODE_PASSWORD, DIALOG_STYLE_INPUT,"Mode Password Menu", "You must enter the password to enter this mode.", "Enter", "Cancel");
		    return 1;
		}
		if(PlayerInfo[playerid][pTeam] == ALLIES && PlayerInfo[playerid][PlayerMode] == TL)
	  		return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You already are an Ally.");
	  	if ((AxisCountTL() < AllyCountTL())&&PlayerInfo[playerid][VIP] == 0)
  			return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} This team is full.");
		PlayerInfo[playerid][pTeam] = ALLIES;
		SetPlayerMode(playerid, TL, true, true);
		new str[128];
		format(str,128,"{33FF33}WAR NEWS:{FFFFFF} %s(ID:%d) is fighting for the %s!",PlayerInfo[playerid][Name],playerid,PowerNames[PlayerInfo[playerid][pTeam]]);
		SendMessageToMode(TL,white, str);
		format(str, sizeof(str), "[WAR NEWS] %s[%d] is fighting for the %s!",PlayerInfo[playerid][Name],playerid,PowerNames[PlayerInfo[playerid][pTeam]]);
		db_SaveChat(-1, TL,str);
		return 1;
	}
	if (strcmp(cmdtext, "/jap", true) == 0)
	{
		if(!isAllowedToChangeMode(playerid, false))return 1;
		new amode = TW;
		if(PlayerInfo[playerid][ModeUnLock][amode] == 0 && strlen(ModePass[amode]) > 2)
		{
		    PlayerInfo[playerid][ModeUnLockSel] = amode;
		    ShowPlayerDialog(playerid,MODE_PASSWORD, DIALOG_STYLE_INPUT,"Mode Password Menu", "You must enter the password to enter this mode.", "Enter", "Cancel");
		    return 1;
		}
		if(TWPlayerInfo[playerid][Country] == JAPAN && PlayerInfo[playerid][PlayerMode] == TW)
	  		return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You already are a Japanese.");
	  	if ((AxisCount() > AllyCount())&&PlayerInfo[playerid][VIP] == 0)
  			return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} This team is full.");
		PlayerInfo[playerid][pTeam] = AXIS;
		TWPlayerInfo[playerid][Country] = JAPAN;
		DestroyAllPlayerTWBombs(playerid);
		SetPlayerMode(playerid, TW, true, true);
		new str[128];
        format(str,128,"{33FF33}WAR NEWS:{FFFFFF} %s(ID:%d) is fighting for %s!",PlayerInfo[playerid][Name],playerid,CountryNames[TWPlayerInfo[playerid][Country]]);
		SendMessageToMode(TW,white, str);
		format(str, sizeof(str), "[WAR NEWS] %s[%d] is fighting for %s!", PlayerInfo[playerid][Name], playerid,CountryNames[TWPlayerInfo[playerid][Country]]);
		db_SaveChat(-1, TW,str);
		return 1;
	}
	if (strcmp(cmdtext, "/ita", true) == 0)
	{
		if(!isAllowedToChangeMode(playerid, false))return 1;
		new amode = TW;
		if(PlayerInfo[playerid][ModeUnLock][amode] == 0 && strlen(ModePass[amode]) > 2)
		{
		    PlayerInfo[playerid][ModeUnLockSel] = amode;
		    ShowPlayerDialog(playerid,MODE_PASSWORD, DIALOG_STYLE_INPUT,"Mode Password Menu", "You must enter the password to enter this mode.", "Enter", "Cancel");
		    return 1;
		}
		if(TWPlayerInfo[playerid][Country] == ITALY && PlayerInfo[playerid][PlayerMode] == TW)
	  		return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You already are an Italian.");
	  	if ((AxisCount() > AllyCount())&&PlayerInfo[playerid][VIP] == 0)
  			return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} This team is full.");
		PlayerInfo[playerid][pTeam] = AXIS;
		TWPlayerInfo[playerid][Country] = ITALY;
		DestroyAllPlayerTWBombs(playerid);
		SetPlayerMode(playerid, TW, true, true);
		new str[128];
        format(str,128,"{33FF33}WAR NEWS:{FFFFFF} %s(ID:%d) is fighting for %s!",PlayerInfo[playerid][Name],playerid,CountryNames[TWPlayerInfo[playerid][Country]]);
		SendMessageToMode(TW,white, str);
		format(str, sizeof(str), "[WAR NEWS] %s[%d] is fighting for %s!", PlayerInfo[playerid][Name], playerid,CountryNames[TWPlayerInfo[playerid][Country]]);
		db_SaveChat(-1, TW,str);
		return 1;
	}
	if (strcmp(cmdtext, "/ger", true) == 0)
	{
		if(!isAllowedToChangeMode(playerid, false))return 1;
		new amode = TW;
		if(PlayerInfo[playerid][ModeUnLock][amode] == 0 && strlen(ModePass[amode]) > 2)
		{
		    PlayerInfo[playerid][ModeUnLockSel] = amode;
		    ShowPlayerDialog(playerid,MODE_PASSWORD, DIALOG_STYLE_INPUT,"Mode Password Menu", "You must enter the password to enter this mode.", "Enter", "Cancel");
		    return 1;
		}
		if(TWPlayerInfo[playerid][Country] == GERMANY && PlayerInfo[playerid][PlayerMode] == TW)
	  		return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You already are a German.");
    	if ((AxisCount() > AllyCount())&&PlayerInfo[playerid][VIP] == 0)
  			return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} This team is full.");
		PlayerInfo[playerid][pTeam] = AXIS;
		TWPlayerInfo[playerid][Country] = GERMANY;
		DestroyAllPlayerTWBombs(playerid);
		SetPlayerMode(playerid, TW, true, true);
		new str[128];
        format(str,128,"{33FF33}WAR NEWS:{FFFFFF} %s(ID:%d) is fighting for %s!",PlayerInfo[playerid][Name],playerid,CountryNames[TWPlayerInfo[playerid][Country]]);
		SendMessageToMode(TW,white, str);
		format(str, sizeof(str), "[WAR NEWS] %s[%d] is fighting for %s!", PlayerInfo[playerid][Name], playerid,CountryNames[TWPlayerInfo[playerid][Country]]);
		db_SaveChat(-1, TW,str);
		return 1;
	}
	if (strcmp(cmdtext, "/br", true) == 0)
	{
    	if(!isAllowedToChangeMode(playerid, false))return 1;
		new amode = TW;
		if(PlayerInfo[playerid][ModeUnLock][amode] == 0 && strlen(ModePass[amode]) > 2)
		{
		    PlayerInfo[playerid][ModeUnLockSel] = amode;
		    ShowPlayerDialog(playerid,MODE_PASSWORD, DIALOG_STYLE_INPUT,"Mode Password Menu", "You must enter the password to enter this mode.", "Enter", "Cancel");
		    return 1;
		}
		if(TWPlayerInfo[playerid][Country] == BRITISH && PlayerInfo[playerid][PlayerMode] == TW)
		  	return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You already are a British.");
	  	if ((AxisCount() < AllyCount())&&PlayerInfo[playerid][VIP] == 0)
	  		return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} This team is full.");
		PlayerInfo[playerid][pTeam] = ALLIES;
		TWPlayerInfo[playerid][Country] = BRITISH;
		DestroyAllPlayerTWBombs(playerid);
		SetPlayerMode(playerid, TW, true, true);
		new str[128];
        format(str,128,"{33FF33}WAR NEWS:{FFFFFF} %s(ID:%d) is fighting for %s!",PlayerInfo[playerid][Name],playerid,CountryNames[TWPlayerInfo[playerid][Country]]);
		SendMessageToMode(TW,white, str);
		format(str, sizeof(str), "[WAR NEWS] %s[%d] is fighting for %s!", PlayerInfo[playerid][Name], playerid,CountryNames[TWPlayerInfo[playerid][Country]]);
		db_SaveChat(-1, TW,str);
		return 1;
	}
	if (strcmp(cmdtext, "/sv", true) == 0)
	{
    	if(!isAllowedToChangeMode(playerid, false))return 1;
		new amode = TW;
		if(PlayerInfo[playerid][ModeUnLock][amode] == 0 && strlen(ModePass[amode]) > 2)
		{
		    PlayerInfo[playerid][ModeUnLockSel] = amode;
		    ShowPlayerDialog(playerid,MODE_PASSWORD, DIALOG_STYLE_INPUT,"Mode Password Menu", "You must enter the password to enter this mode.", "Enter", "Cancel");
		    return 1;
		}
		if(TWPlayerInfo[playerid][Country] == RUSSIA && PlayerInfo[playerid][PlayerMode] == TW)
		  	return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You already are a Soviet.");
	  	if ((AxisCount() < AllyCount())&&PlayerInfo[playerid][VIP] == 0)
	  		return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} This team is full.");
		PlayerInfo[playerid][pTeam] = ALLIES;
		TWPlayerInfo[playerid][Country] = RUSSIA;
		DestroyAllPlayerTWBombs(playerid);
		SetPlayerMode(playerid, TW, true, true);
		new str[128];
        format(str,128,"{33FF33}WAR NEWS:{FFFFFF} %s(ID:%d) is fighting for %s!",PlayerInfo[playerid][Name],playerid,CountryNames[TWPlayerInfo[playerid][Country]]);
		SendMessageToMode(TW,white, str);
		format(str, sizeof(str), "[WAR NEWS] %s[%d] is fighting for %s!", PlayerInfo[playerid][Name], playerid,CountryNames[TWPlayerInfo[playerid][Country]]);
		db_SaveChat(-1, TW,str);
		return 1;
	}
	if (strcmp(cmdtext, "/usa", true) == 0)
	{
    	if(!isAllowedToChangeMode(playerid, false))return 1;
		new amode = TW;
		if(PlayerInfo[playerid][ModeUnLock][amode] == 0 && strlen(ModePass[amode]) > 2)
		{
		    PlayerInfo[playerid][ModeUnLockSel] = amode;
		    ShowPlayerDialog(playerid,MODE_PASSWORD, DIALOG_STYLE_INPUT,"Mode Password Menu", "You must enter the password to enter this mode.", "Enter", "Cancel");
		    return 1;
		}
		if(TWPlayerInfo[playerid][Country] == USA && PlayerInfo[playerid][PlayerMode] == TW)
		  	return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You already are an American.");
	  	if ((AxisCount() < AllyCount())&&PlayerInfo[playerid][VIP] == 0)
	  		return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} This team is full.");
		PlayerInfo[playerid][pTeam] = ALLIES;
		TWPlayerInfo[playerid][Country] = USA;
		SetPlayerMode(playerid, TW, true, true);
		new str[128];
        format(str,128,"{33FF33}WAR NEWS:{FFFFFF} %s(ID:%d) is fighting for %s!",PlayerInfo[playerid][Name],playerid,CountryNames[TWPlayerInfo[playerid][Country]]);
		SendMessageToMode(TW,white, str);
		format(str, sizeof(str), "[WAR NEWS] %s[%d] is fighting for %s!", PlayerInfo[playerid][Name], playerid,CountryNames[TWPlayerInfo[playerid][Country]]);
		db_SaveChat(-1, TW,str);
		return 1;
	}
	if (strcmp(cmdtext, "/bk", true) == 0)
	{
    	if(!isAllowedToChangeMode(playerid, false))return 1;
		new amode = TW;
		if(PlayerInfo[playerid][ModeUnLock][amode] == 0 && strlen(ModePass[amode]) > 2)
		{
		    PlayerInfo[playerid][ModeUnLockSel] = amode;
		    ShowPlayerDialog(playerid,MODE_PASSWORD, DIALOG_STYLE_INPUT,"Mode Password Menu", "You must enter the password to enter this mode.", "Enter", "Cancel");
		    return 1;
		}
		if(TWPlayerInfo[playerid][Country] == BALKAN && PlayerInfo[playerid][PlayerMode] == TW)
		  	return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You already are a Balkan.");
	  	if ((AxisCount() < AllyCount())&&PlayerInfo[playerid][VIP] == 0)
	  		return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} This team is full.");
		PlayerInfo[playerid][pTeam] = ALLIES;
		TWPlayerInfo[playerid][Country] = BALKAN;
		DestroyAllPlayerTWBombs(playerid);
		SetPlayerMode(playerid, TW, true, true);
		new str[128];
        format(str,128,"{33FF33}WAR NEWS:{FFFFFF} %s(ID:%d) is fighting for %s!",PlayerInfo[playerid][Name],playerid,CountryNames[TWPlayerInfo[playerid][Country]]);
		SendMessageToMode(TW,white, str);
		format(str, sizeof(str), "[WAR NEWS] %s[%d] is fighting for %s!", PlayerInfo[playerid][Name], playerid,CountryNames[TWPlayerInfo[playerid][Country]]);
		db_SaveChat(-1, TW,str);
		return 1;
	}

    if ((strcmp(cmdtext, "/cts", true) == 0) || (strcmp(cmdtext, "/stunt", true) == 0) || (strcmp(cmdtext, "/sf", true) == 0) || (strcmp(cmdtext, "/fun", true) == 0))
	{
	    if(!isAllowedToChangeMode(playerid, false))return 1;
		if(PlayerInfo[playerid][PlayerMode] == STUNT)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You already are in Stunt&Fun mode.");
	    new amode = STUNT;
		if(PlayerInfo[playerid][ModeUnLock][amode] == 0 && strlen(ModePass[amode]) > 2)
		{
		    PlayerInfo[playerid][ModeUnLockSel] = amode;
		    ShowPlayerDialog(playerid,MODE_PASSWORD, DIALOG_STYLE_INPUT,"Mode Password Menu", "You must enter the password to enter this mode.", "Enter", "Cancel");
		    return 1;
		}
		SetPlayerMode(playerid, STUNT, true, true);
		return 1;
	}
	if ((strcmp(cmdtext, "/ffa", true) == 0) || (strcmp(cmdtext, "/gangwars", true) == 0) || (strcmp(cmdtext, "/freeroam", true) == 0))
	{
	    if(!isAllowedToChangeMode(playerid, false))return 1;
		if(PlayerInfo[playerid][PlayerMode] == FFA)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You already are in FFA.");
	    new amode = FFA;
		if(PlayerInfo[playerid][ModeUnLock][amode] == 0 && strlen(ModePass[amode]) > 2)
		{
		    PlayerInfo[playerid][ModeUnLockSel] = amode;
		    ShowPlayerDialog(playerid,MODE_PASSWORD, DIALOG_STYLE_INPUT,"Mode Password Menu", "You must enter the password to enter this mode.", "Enter", "Cancel");
		    return 1;
		}
		SetPlayerMode(playerid, FFA, true, true);
		return 1;
	}
	if((strcmp(cmdtext, "/vw", true) == 0))
	{
		if(!isAllowedToChangeMode(playerid, false))return 1;
		if(PlayerInfo[playerid][PlayerMode] == VW)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You are in this mode.");
	    new amode = VW;
		if(PlayerInfo[playerid][ModeUnLock][amode] == 0 && strlen(ModePass[amode]) > 2)
		{
		    PlayerInfo[playerid][ModeUnLockSel] = amode;
		    ShowPlayerDialog(playerid,MODE_PASSWORD, DIALOG_STYLE_INPUT,"Mode Password Menu", "You must enter the password to enter this mode.", "Enter", "Cancel");
		    return 1;
		}
		SetPlayerMode(playerid, VW, true, true);
		return 1;
	}
	if (strcmp(cmdtext, "/gk", true) == 0)
	{
	    if(!isAllowedToChangeMode(playerid, false))return 1;
		if(PlayerInfo[playerid][PlayerMode] == GK)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You already are in Grab and Run mode.");
	    new amode = GK;
		if(PlayerInfo[playerid][ModeUnLock][amode] == 0 && strlen(ModePass[amode]) > 2)
		{
		    PlayerInfo[playerid][ModeUnLockSel] = amode;
		    ShowPlayerDialog(playerid,MODE_PASSWORD, DIALOG_STYLE_INPUT,"Mode Password Menu", "You must enter the password to enter this mode.", "Enter", "Cancel");
		    return 1;
		}
		SetPlayerMode(playerid, GK, true, true);
		return 1;
	}
	if ((strcmp(cmdtext, "/zo", true) == 0) || (strcmp(cmdtext, "/zombies", true) == 0) || (strcmp(cmdtext, "/zombie", true) == 0))
	{
	    if(!isAllowedToChangeMode(playerid, false))return 1;
		if(PlayerInfo[playerid][PlayerMode] == ZO)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You already are in zombie mode.");
	    new amode = ZO;
		if(PlayerInfo[playerid][ModeUnLock][amode] == 0 && strlen(ModePass[amode]) > 2)
		{
		    PlayerInfo[playerid][ModeUnLockSel] = amode;
		    ShowPlayerDialog(playerid,MODE_PASSWORD, DIALOG_STYLE_INPUT,"Mode Password Menu", "You must enter the password to enter this mode.", "Enter", "Cancel");
		    return 1;
		}
		SetPlayerMode(playerid, ZO, true, true);
		return 1;
	}
	if ((strcmp(cmdtext, "/pj", true) == 0))
	{
	    if(!isAllowedToChangeMode(playerid, false))return 1;
		if(PlayerInfo[playerid][PlayerMode] == PJ)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You already are in PJ.");
	    new amode = PJ;
		if(PlayerInfo[playerid][ModeUnLock][amode] == 0 && strlen(ModePass[amode]) > 2)
		{
		    PlayerInfo[playerid][ModeUnLockSel] = amode;
		    ShowPlayerDialog(playerid,MODE_PASSWORD, DIALOG_STYLE_INPUT,"Mode Password Menu", "You must enter the password to enter this mode.", "Enter", "Cancel");
		    return 1;
		}
		SetPlayerMode(playerid, PJ, true, true);
		return 1;
	}
	if ((strcmp(cmdtext, "/rp", true) == 0))
	{
		if(PlayerInfo[playerid][Registered] == 0)
	        return SendClientMessage(playerid,red1,"{FF0000}ERROR:{FFFFFF} You must register to play RP.");
	    if(!isAllowedToChangeMode(playerid, false))return 1;
		if(PlayerInfo[playerid][PlayerMode] == TRP)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You already are in RP.");
	    new amode = TRP;
		if(PlayerInfo[playerid][ModeUnLock][amode] == 0 && strlen(ModePass[amode]) > 2)
		{
		    PlayerInfo[playerid][ModeUnLockSel] = amode;
		    ShowPlayerDialog(playerid,MODE_PASSWORD, DIALOG_STYLE_INPUT,"Mode Password Menu", "You must enter the password to enter this mode.", "Enter", "Cancel");
		    return 1;
		}
		SetPlayerMode(playerid, TRP, true, true);
		return 1;
	}
	if ((strcmp(cmdtext, "/dddm", true) == 0))
	{
	    if(!isAllowedToChangeMode(playerid, false))return 1;
		if(PlayerInfo[playerid][PlayerMode] == DM)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You already are in DM.");
	    new amode = DM;
		if(PlayerInfo[playerid][ModeUnLock][amode] == 0 && strlen(ModePass[amode]) > 2)
		{
		    PlayerInfo[playerid][ModeUnLockSel] = amode;
		    ShowPlayerDialog(playerid,MODE_PASSWORD, DIALOG_STYLE_INPUT,"Mode Password Menu", "You must enter the password to enter this mode.", "Enter", "Cancel");
		    return 1;
		}
		SetPlayerMode(playerid, DM, true, true);
		return 1;
	}
	if ((strcmp(cmdtext, "/teles", true) == 0)||(strcmp(cmdtext, "/telelist", true) == 0)||(strcmp(cmdtext, "/stunts", true) == 0)||(strcmp(cmdtext, "/maps", true) == 0))
	{
	    if(PlayerInfo[playerid][PlayerMode] != STUNT)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be in Stunt&Fun mode to use this command.");
	    new string5[70],string2[1200];
	    PlayerInfo[playerid][pListPage]=0;
    	format(string2,sizeof string2,"{FFFFFF}");
	    forLoop(id, 20)
		{
		    if(CmdInfo[id][Exists])
		    {
		        if(CmdInfo[id][Money] == 0)format(string5,sizeof string5,"\n/%s - %s(ID:%d)",CmdInfo[id][cName],CmdInfo[id][Description],id);
				else format(string5,sizeof string5,"\n/%s - %s[$%d](ID:%d)",CmdInfo[id][cName],CmdInfo[id][Description],CmdInfo[id][Money],id);
			    strcat(string2,string5);
		    }
		}
		if((maxSFcmds) <= 20)ShowPlayerDialog(playerid, TELEMENU, DIALOG_STYLE_MSGBOX, "Teleport list", string2, "Close", "");
		if((maxSFcmds) > 20)ShowPlayerDialog(playerid, TELE_PLAYLIST_NEXT, DIALOG_STYLE_MSGBOX, "Teleport list", string2, "Next page", "Close");
		return 1;
	}
	if ((strcmp(cmdtext, "/rhelp", true) == 0)||(strcmp(cmdtext, "/ranks", true) == 0))
	{
	    if(!(PlayerInfo[playerid][PlayerMode] == TW || PlayerInfo[playerid][PlayerMode] == PTP))
			return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be in the TW or PTP mode to use this command.");
		if(PlayerInfo[playerid][PlayerMode]==TW)
		{
			SendClientMessage(playerid,red1, "{33FF33}RHelp:{FFFFFF} This section will help you and show you how the ranks are achieved..");
			SendClientMessage(playerid,red1, "{33FF33}RHelp:{FFFFFF} /weapranks - more weapons, based on kills");
			SendClientMessage(playerid,red1, "{33FF33}RHelp:{FFFFFF} /armyranks - more armor, based on taken lands");
			SendClientMessage(playerid,red1, "{33FF33}RHelp:{FFFFFF} /airranks - invisibility on radar, based on taken down ships/submarines");
			SendClientMessage(playerid,red1, "{33FF33}RHelp:{FFFFFF} /medicranks - more health, based on cured players");
		}
		if(PlayerInfo[playerid][PlayerMode]==PTP)
		{
			new string2[450], rankstr[120];
			format(rankstr, sizeof rankstr, "{FFFFFF}This is only for Police and Terrorists",ThePTPRanks[PTPPlayerInfo[playerid][Rank]],PTPPlayerInfo[playerid][Rank],PTPPlayerInfo[playerid][Kills]);
			strcat(string2,rankstr);
			format(rankstr, sizeof rankstr, "\n\nYour rank %s(%d) | Kills %d",ThePTPRanks[PTPPlayerInfo[playerid][Rank]],PTPPlayerInfo[playerid][Rank],PTPPlayerInfo[playerid][Kills]);
			strcat(string2,rankstr);
			format(rankstr, sizeof rankstr, "\nRank %s(%d) - 380 kills",ThePTPRanks[1],1);
			strcat(string2,rankstr);
			format(rankstr, sizeof rankstr, "\nRank %s(%d) - 680 kills",ThePTPRanks[2],2);
			strcat(string2,rankstr);
			format(rankstr, sizeof rankstr, "\nRank %s(%d) - 980 kills",ThePTPRanks[3],3);
			strcat(string2,rankstr);
			format(rankstr, sizeof rankstr, "\nRank %s(%d) - 1380 kills",ThePTPRanks[4],4);
			strcat(string2,rankstr);
			format(rankstr, sizeof rankstr, "\nRank %s(%d) - 1980 kills",ThePTPRanks[5],5);
			strcat(string2,rankstr);
			ShowPlayerDialog(playerid, 4521, DIALOG_STYLE_MSGBOX, "PTP RANKS - Only for Terrorist and Police", string2, "Close", "");
		}
		return 1;
	}
	if ((strcmp(cmdtext, "/myduty", true) == 0)||(strcmp(cmdtext, "/objective", true) == 0)||(strcmp(cmdtext, "/duty", true) == 0))
	{
	    if(!(PlayerInfo[playerid][PlayerMode] == TW || PlayerInfo[playerid][PlayerMode] == PTP))
			return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be in the TW or PTP mode to use this command.");
		if(PlayerInfo[playerid][PlayerMode]==TW)
		{
		    if(PlayerInfo[playerid][pTeam] == NOPOWER)return 0;
		    if(TWPlayerInfo[playerid][Class] == LEADER || TWPlayerInfo[playerid][Class] == VICE)
			{
			    SendClientMessage(playerid, white, "-----------------------------------------------------------------------");
			    SendClientMessage(playerid,red1,"{33FF33}DUTY:{FFFFFF} Your duty is to stay alive. You can call your team mates for help.");
			    SendClientMessage(playerid, white, "-----------------------------------------------------------------------");
			}
			if(TWPlayerInfo[playerid][Class] == BODYGUARD)
			{
			    SendClientMessage(playerid, white, "-----------------------------------------------------------------------");
			    SendClientMessage(playerid,red1,"{33FF33}DUTY:{FFFFFF} Your duty is to only protect your leader.");
			    SendClientMessage(playerid,red1,"{33FF33}DUTY:{FFFFFF} If your leader dies, you will be switched to a soldier.");
			    SendClientMessage(playerid, white, "-----------------------------------------------------------------------");
		 	}
			if(TWPlayerInfo[playerid][Class] == SPY)
			{
			    SendClientMessage(playerid, white, "-----------------------------------------------------------------------");
			    SendClientMessage(playerid,red1,"{33FF33}DUTY:{FFFFFF} Your duty is to only kill the enemy leader(/enemy).");
			    SendClientMessage(playerid, white, "-----------------------------------------------------------------------");
			}
			if(TWPlayerInfo[playerid][Class] == SOLDIER)
			{
			    SendClientMessage(playerid, white, "-----------------------------------------------------------------------");
			    SendClientMessage(playerid,red1,"{33FF33}DUTY:{FFFFFF} Your duty is to take over the enemy lands and protect your lands.");
			    SendClientMessage(playerid, white, "-----------------------------------------------------------------------");
			}
			if(TWPlayerInfo[playerid][Class] == PILOT)
			{
			    SendClientMessage(playerid, white, "-----------------------------------------------------------------------");
			    SendClientMessage(playerid,red1,"{33FF33}DUTY:{FFFFFF} Your duty is to take down enemy ships and protect your ships.");
			    SendClientMessage(playerid, white, "-----------------------------------------------------------------------");
			}
			if(TWPlayerInfo[playerid][Class] == ENGINEER)
			{
			    SendClientMessage(playerid, white, "-----------------------------------------------------------------------");
			    SendClientMessage(playerid,red1,"{33FF33}DUTY:{FFFFFF} Your duty is to repair the vehicles of team mates and ships/subs.");
			    SendClientMessage(playerid,red1,"{33FF33}DUTY:{FFFFFF} Hold down the ALT button to repair a vehicle or a ship.");
			    SendClientMessage(playerid,red1,"{33FF33}DUTY:{FFFFFF} Hold down 'N' to plant a mine on a vehicle, a ship or on the ground.");
			    SendClientMessage(playerid,red1,"{33FF33}DUTY:{FFFFFF} Hold down 'Y' to defuse a mine on a ship/vehicle/ground.");
			    SendClientMessage(playerid,red1,"{33FF33}DUTY:{FFFFFF} You can repair or mine a submarine from its interior.");
			    SendClientMessage(playerid,red1,"{33FF33}DUTY:{FFFFFF} You can repair or plant a mine a nevada/tank in its interior.");
			    SendClientMessage(playerid, white, "-----------------------------------------------------------------------");
			}
		    if(TWPlayerInfo[playerid][Class] == MEDIC)
			{
			    SendClientMessage(playerid, white, "-----------------------------------------------------------------------");
			    SendClientMessage(playerid,red1,"{33FF33}DUTY:{FFFFFF} Your duty is to heal your team mates using by holding down N.");
			    SendClientMessage(playerid,red1,"{33FF33}DUTY:{FFFFFF} You can also poison an enemy by holding down N.");
			    SendClientMessage(playerid, white, "-----------------------------------------------------------------------");
			}
		}
		else if(PlayerInfo[playerid][PlayerMode]==PTP)
		{
			if(PTPPlayerInfo[playerid][Class] == PRESIDENT)
			{
			    SendClientMessage(playerid, white, "-----------------------------------------------------------------------");
			    SendClientMessage(playerid, white, "{FF9900}DUTY:{FFFFFF} Your duty is to survive until the time is over!");
			    SendClientMessage(playerid, white, "{FFFF00}INFO:{FFFFFF} No team killing or team vehicle jacking, do not stay near the Vice President.");
			    SendClientMessage(playerid, white, "{33FF33}TEAM:{FFFF00} President | Vice President | {33FF33}Security | {375FFF}Police");
			    SendClientMessage(playerid, white, "{FF0000}ENEMIES: {FF0000}Terrorists{FFFFFF} - Don't trust Civilians.");
			    SendClientMessage(playerid, white, "-----------------------------------------------------------------------");
			}
			if(PTPPlayerInfo[playerid][Class] == VICE)
			{
			    SendClientMessage(playerid, white, "-----------------------------------------------------------------------");
			    SendClientMessage(playerid, white, "{FF9900}DUTY:{FFFFFF} Your duty is to survive and wait for the {FFFF00}President{FFFFFF} to die!");
			    SendClientMessage(playerid, white, "{FFFF00}INFO:{FFFFFF} No team killing or team vehicle jacking, do not stay near the President.");
			    SendClientMessage(playerid, white, "{33FF33}TEAM:{FFFF00} President | Vice President | {33FF33}Security | {375FFF}Police");
			    SendClientMessage(playerid, white, "{FF0000}ENEMIES: {FF0000}Terrorists{FFFFFF} - Don't trust Civilians.");
			    SendClientMessage(playerid, white, "-----------------------------------------------------------------------");
			}
			if(PTPPlayerInfo[playerid][Class] == SECURITY)
			{
			    SendClientMessage(playerid, white, "-----------------------------------------------------------------------");
			    SendClientMessage(playerid, white, "{FF9900}DUTY:{FFFFFF} Your duty is to protect the {FFFF00}President{FFFFFF} at all costs.");
			    SendClientMessage(playerid, white, "{FFFF00}INFO:{FFFFFF} No team killing or team vehicle jacking.");
			    SendClientMessage(playerid, white, "{33FF33}TEAM:{FFFF00} President | Vice President | {33FF33}Security | {375FFF}Police");
			    SendClientMessage(playerid, white, "{FF0000}ENEMIES: {FF0000}Terrorists{FFFFFF} - Don't trust Civilians.");
			    SendClientMessage(playerid, white, "-----------------------------------------------------------------------");
			}
			if(PTPPlayerInfo[playerid][Class] == POLICE)
			{
			    SendClientMessage(playerid, white, "-----------------------------------------------------------------------");
			    SendClientMessage(playerid, white, "{FF9900}DUTY:{FFFFFF} Your duty is to protect the {FFFF00}President{FFFFFF} and kill the {FF0000}Terrorists.");
			    SendClientMessage(playerid, white, "{FFFF00}INFO:{FFFFFF} No team killing or team vehicle jacking.");
			    SendClientMessage(playerid, white, "{33FF33}TEAM:{FFFF00} President | Vice President | {33FF33}Security | {375FFF}Police");
			    SendClientMessage(playerid, white, "{FF0000}ENEMIES: {FF0000}Terrorists{FFFFFF} - Don't trust Civilians.");
			    SendClientMessage(playerid, white, "-----------------------------------------------------------------------");
			}
			if(PTPPlayerInfo[playerid][Class] == TERRORIST)
			{
			    SendClientMessage(playerid, white, "-----------------------------------------------------------------------");
			    SendClientMessage(playerid, white, "{FF9900}DUTY:{FFFFFF} Your duty is to kill the {FFFF00}President.");
			    SendClientMessage(playerid, white, "{FFFF00}INFO:{FFFFFF} No team killing or team vehicle jacking.");
			    SendClientMessage(playerid, white, "{33FF33}TEAM:{FFFF00} Terrorists");
			    SendClientMessage(playerid, white, "{FF0000}ENEMIES: {FFFF00}President | Vice President | {33FF33}Security | {375FFF}Police{FFFFFF} - Don't trust Civilians.");
			    SendClientMessage(playerid, white, "-----------------------------------------------------------------------");
			}
			if(PTPPlayerInfo[playerid][Class] == CIVILIAN)
			{
			    SendClientMessage(playerid, white, "-----------------------------------------------------------------------");
			    SendClientMessage(playerid, white, "{FF9900}DUTY:{FFFFFF} Your duty is to do what ever you want.");
			    SendClientMessage(playerid, white, "{FFFF00}INFO:{FFFFFF} You have no team mates and there are no rules for you.");
			    SendClientMessage(playerid, white, "{FF0000}ENEMIES:{FFFFFF} You can kill whoever you want or be friend with everyone.");
			    SendClientMessage(playerid, white, "-----------------------------------------------------------------------");
			}
		}
	   	return 1;
	}
	if(PlayerInfo[playerid][PlayerMode] == STUNT && PlayerInfo[playerid][Spawned] == 1)
	{
	    forLoop(id, maxSFcmds)
		{
		    new strw[50];
		    if(CmdInfo[id][Exists])
		    {
		        format(strw,50,"/%s",CmdInfo[id][cName]);
				if(strcmp(cmdtext ,strw, true) == 0)
				{
				    if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING || GetPlayerState(playerid) == PLAYER_STATE_WASTED)return SendClientMessage(playerid,blue,"{FF0000}Error:{FFFFFF} You cannot use this comamnd now.");
					if(PlayerInfo[playerid][Jailed] > 0) return
						SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command in jail");
				    if(SFPlayerInfo[playerid][Event] > 0) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command at this moment. You are in an event.");
				    new st4[128];
				    if(CmdInfo[id][Money] != 0)
					{
					    if(SFPlayerInfo[playerid][Spiderman] == 1) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot teleport in this place now. Disable /spiderman first.");
						if(SFPlayerInfo[playerid][Superman] == 1) return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot teleport in this place now. Disable /superman first.");
						if(CmdInfo[id][Money] > GetThePlayerMoney(playerid))
					    {
						    format(st4,sizeof(st4),"{FF0000}Error:{FFFFFF} This teleport requires at least $%d for you to pay (You don't have enough).", CmdInfo[id][Money]);
							return SendClientMessage(playerid,red1,st4);
						}
						else
						{
				    		GiveThePlayerMoney(playerid, -CmdInfo[id][Money]);
						    format(st4,sizeof(st4),"{FFFFFF}[STUNTS]{67F6F6} %s(ID:%d) has joined the {FFFFFF}/%s {67F6F6}stunts! - [$%d]",PlayerInfo[playerid][Name],playerid,CmdInfo[id][cName], CmdInfo[id][Money]);
							SendMessageToMode(STUNT,lightblue, st4);
							format(st4, sizeof(st4), "[TELE] %s[%d] has joined the '%s' stunts! - [$%d]",PlayerInfo[playerid][Name],playerid,CmdInfo[id][Description], CmdInfo[id][Money]);
							db_SaveChat(-1, STUNT,st4);
						}
					}
					else
					{
						format(st4,sizeof(st4),"{FFFFFF}[STUNTS]{67F6F6} %s(ID:%d) has joined the {FFFFFF}/%s {67F6F6}stunts.",PlayerInfo[playerid][Name],playerid,CmdInfo[id][cName]);
						SendMessageToMode(STUNT,lightblue, st4);
						format(st4, sizeof(st4), "[TELE] %s[%d] has joined the '%s' stunts!",PlayerInfo[playerid][Name],playerid,CmdInfo[id][Description]);
						db_SaveChat(-1, STUNT,st4);
					}
					ResetWeapons(playerid);
					if(SFPlayerInfo[playerid][Spiderman] == 1)GiveWeapon(playerid, 11, 1);
    				SetPlayerWorldBounds(playerid, 20000.0000, -20000.0000, 20000.0000, -20000.0000);
				    SetPlayerVirtualWorld(playerid, W_STUNT);
					SetPlayerInterior(playerid,CmdInfo[id][Interior]);
					new Float:health;
					GetPlayerHealth(playerid, health);
					if(floatround(health)>99)SetHealth(playerid, 99.0);
				    if(CmdInfo[id][OnFoot] == 0)
					{
						if(GetPlayerState(playerid) == 2)
						{
						    LinkVehicleToInterior(GetPlayerVehicleID(playerid),GetPlayerInterior(playerid));
					 		SetVehiclePos(GetPlayerVehicleID(playerid),CmdInfo[id][cSpawnX],CmdInfo[id][cSpawnY],CmdInfo[id][cSpawnZ]);
						}
						else
							SetPlayerPosEx(playerid,CmdInfo[id][cSpawnX],CmdInfo[id][cSpawnY],CmdInfo[id][cSpawnZ], CmdInfo[id][cAngle]);
					}
					else
						SetPlayerPosEx(playerid,CmdInfo[id][cSpawnX],CmdInfo[id][cSpawnY],CmdInfo[id][cSpawnZ], CmdInfo[id][cAngle]);
				    GivePlayerWeapons(playerid,CmdInfo[id][Weap1],CmdInfo[id][Ammo1],CmdInfo[id][Weap2],CmdInfo[id][Ammo2],CmdInfo[id][Weap3],CmdInfo[id][Ammo3],CmdInfo[id][Weap4],CmdInfo[id][Ammo4]);
    				GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~w~Use ~b~/car ~w~or ~g~/v ~w~to spawn a car", 3000, 3);
					return 1;
				}
			}
		}
	}
//------------------------------------------------------------------------------

    new pos=-1;
    forLoop(i,strlen(cmdtext))
    {
        if(cmdtext[i] == ' ')
        {
            pos = i;
            break;
        }
    }
	if(pos == -1 && strlen(cmdtext)>=MAX_FUNC_NAME)return 0;
	else if(pos >=MAX_FUNC_NAME)return 0;
	if (zcmd_g_HasOPCS && !CallLocalFunction("OnPlayerCommandReceived", "is", playerid, cmdtext))
    {
        return 1;
    }
    new funcname[MAX_FUNC_NAME];
    pos = 0;
	new loop_breaker;
    while (cmdtext[++pos] > ' ')
	{
		//printf("loop at while (cmdtext[++pos] > ' '), counter val %d",loop_breaker);
		if(breakLoop(++loop_breaker, "while (cmdtext[++pos] > ' ')"))break;
		funcname[pos-1] = tolower(cmdtext[pos]);
	}
	format(funcname, sizeof(funcname), "cmd_%s", funcname);
	loop_breaker = 0;
    while (cmdtext[pos] == ' ')
	{
		//printf("loop at while (cmdtext[pos] == ' '), counter val %d",loop_breaker);
		if(breakLoop(++loop_breaker, "while (cmdtext[pos] == ' ')"))break;
		pos++;
	}
	if (!cmdtext[pos])
	{
		if (zcmd_g_HasOPCE)
		{
			return CallLocalFunction("OnPlayerCommandPerformed", "isi", playerid, cmdtext, CallLocalFunction(funcname, "is", playerid, "\1"));
		}
		return CallLocalFunction(funcname, "is", playerid, "\1");
	}
	if (zcmd_g_HasOPCE)
	{
		return CallLocalFunction("OnPlayerCommandPerformed", "isi", playerid, cmdtext, CallLocalFunction(funcname, "is", playerid, cmdtext[pos]));
	}
	return CallLocalFunction(funcname, "is", playerid, cmdtext[pos]);
}

#if defined _ALS_OnPlayerCommandText
    #undef OnPlayerCommandText
#else
    #define _ALS_OnPlayerCommandText
#endif
#define OnPlayerCommandText zcmd_OnPlayerCommandText
forward zcmd_OnPlayerCommandText(playerid, cmdtext[]);

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
    NoTeleportCheck[playerid]=3;
    forLoop(x,MAX_PLAYERS)
	{
	    if(IsPlayerConnected(x) &&	GetPlayerState(x) == PLAYER_STATE_SPECTATING && PlayerInfo[x][Level] > 0 && PlayerInfo[x][SpecID] == playerid)
   		 SetPlayerInterior(x,newinteriorid);
	}
 	Streamer_Update(playerid);
}

stock SendMessageToAlliesTL(color, text[])
{
	//printf("DEBUG CFONTROL SendMessageToAlliesTL 1");
	forLoop(i, MAX_PLAYERS)
	{
		if(IsPlayerConnected(i))
	 	{
			if(PlayerInfo[i][PlayerMode] == TL && PlayerInfo[i][pTeam] == ALLIES && PlayerInfo[i][Spawned] == 1)
			{
	 			SendClientMessage(i, color, text);
	 		}
	    }
    }
	//printf("DEBUG CFONTROL SendMessageToAlliesTL 2");
    return 1;
}
stock SendMessageToAxisTL(color, text[])
{
	//printf("DEBUG CFONTROL SendMessageToAxisTL 1");
	forLoop(i, MAX_PLAYERS)
	{
		if(IsPlayerConnected(i))
	 	{
			if(PlayerInfo[i][PlayerMode] == TL && PlayerInfo[i][pTeam] == AXIS && PlayerInfo[i][Spawned] == 1)
			{
	 			SendClientMessage(i, color, text);
	 		}
	    }
	}
	//printf("DEBUG CFONTROL SendMessageToAxisTL 2");
    return 1;
}

stock SendMessageToTeamPTP(team, color, text[])
{
	//printf("DEBUG CFONTROL SendMessageToTeamPTP 1");
	forLoop(i, MAX_PLAYERS)
	{
		if(IsPlayerConnected(i))
	 	{
			if(PlayerInfo[i][PlayerMode] == PTP && PlayerInfo[i][pTeam] == team && PlayerInfo[i][Spawned] == 1)
			{
	 			SendClientMessage(i, color, text);
	 		}
	    }
    }
	//printf("DEBUG CFONTROL SendMessageToTeamPTP 2");
    return 1;
}

stock PTPPresidentDies(playerid)
{
	//printf("DEBUG CFONTROL PTPPresidentDies 1");
    forLoop(i, MAX_PLAYERS) if(IsPlayerConnected(i) && playerid != i)
	{
	    if(PlayerInfo[i][PlayerMode] == PTP && PlayerInfo[i][Spawned] == 1 && PTPPlayerInfo[i][Class] == VICE)
	    {
	        PTPPlayerInfo[i][Class] = PRESIDENT;
	        A_SpawnPlayer(i);
	        new str[128];
	        format(str,128,"NEWS:{FFFFFF} He has been replaced by %s(ID:%d)",PlayerInfo[i][Name],i);
	        SendMessageToMode(PTP,green1,str);
		  	format(str, sizeof(str), "[NEWS] He has been replaced by %s(ID:%d)",PlayerInfo[i][Name],i);
			db_SaveChat(-1, PTP,str);
	    }
	}
	//printf("DEBUG CFONTROL PTPPresidentDies 2");
}

stock PresidentRespawnPTP(playerid)
{
	//printf("DEBUG CFONTROL PresidentRespawnPTP 1");
    forLoop(i, MAX_PLAYERS) if(IsPlayerConnected(i) && playerid != i)
	{
	    if(PlayerInfo[i][PlayerMode] == PTP && PlayerInfo[i][Spawned] == 1 && PTPPlayerInfo[i][Class] == SECURITY)
	    {
	        A_SpawnPlayer(i);
	    }
	}
	//printf("DEBUG CFONTROL PresidentRespawnPTP 2");
}



stock SendMessageToCopsCO(color, text[])
{
	//printf("DEBUG CFONTROL SendMessageToCopsCO 1");
	forLoop(i, MAX_PLAYERS)
	{
		if(IsPlayerConnected(i))
	 	{
			if(PlayerInfo[i][PlayerMode] == CO && PlayerInfo[i][pTeam] == COP && PlayerInfo[i][Spawned] == 1)
			{
	 			SendClientMessage(i, color, text);
	 		}
	    }
    }
	//printf("DEBUG CFONTROL SendMessageToCopsCO 2");
    return 1;
}
stock SendMessageToCriminalsCO(color, text[])
{
	//printf("DEBUG CFONTROL SendMessageToCriminalsCO 1");
	forLoop(i, MAX_PLAYERS)
	{
		if(IsPlayerConnected(i))
	 	{
			if(PlayerInfo[i][PlayerMode] == CO && PlayerInfo[i][pTeam] == CRIMINAL && PlayerInfo[i][Spawned] == 1)
			{
	 			SendClientMessage(i, color, text);
	 		}
	    }
    }
	//printf("DEBUG CFONTROL SendMessageToCriminalsCO 2");
    return 1;
}

stock SendMessageToBluesCTF(color, text[])
{
	forLoop(i, MAX_PLAYERS)
	{
		if(IsPlayerConnected(i))
	 	{
			if(PlayerInfo[i][PlayerMode] == CTF && PlayerInfo[i][pTeam] == BLUE && PlayerInfo[i][Spawned] == 1)
			{
	 			SendClientMessage(i, color, text);
	 		}
	    }
    }
    return 1;
}
stock SendMessageToRedsCTF(color, text[])
{
	forLoop(i, MAX_PLAYERS)
	{
		if(IsPlayerConnected(i))
	 	{
			if(PlayerInfo[i][PlayerMode] == CTF && PlayerInfo[i][pTeam] == RED && PlayerInfo[i][Spawned] == 1)
			{
	 			SendClientMessage(i, color, text);
	 		}
	    }
    }
    return 1;
}
stock SendMessageToTeamVW(team, color, text[])
{
	forLoop(i, MAX_PLAYERS)
	{
		if(IsPlayerConnected(i))
	 	{
			if(PlayerInfo[i][PlayerMode] == VW && PlayerInfo[i][pTeam] == team && PlayerInfo[i][Spawned] == 1)
			{
	 			SendClientMessage(i, color, text);
	 		}
	    }
    }
    return 1;
}

stock SendMessageToHumansZO(color, text[])
{
	forLoop(i, MAX_PLAYERS)
	{
		if(IsPlayerConnected(i))
	 	{
			if(PlayerInfo[i][PlayerMode] == ZO && PlayerInfo[i][pTeam] == HUMAN && PlayerInfo[i][Spawned] == 1)
			{
	 			SendClientMessage(i, color, text);
	 		}
	    }
	}
    return 1;
}
stock SendMessageToZombiesZO(color, text[])
{
	forLoop(i, MAX_PLAYERS)
	{
		if(IsPlayerConnected(i))
	 	{
			if(PlayerInfo[i][PlayerMode] == ZO && PlayerInfo[i][pTeam] == ZOMBIE && PlayerInfo[i][Spawned] == 1)
			{
	 			SendClientMessage(i, color, text);
	 		}
	    }
 	}
    return 1;
}


stock SendMessageToAllies(color, text[])
{
	forLoop(i, MAX_PLAYERS)
	{
		if(IsPlayerConnected(i))
	 	{
			if(PlayerInfo[i][PlayerMode] == TW && PlayerInfo[i][pTeam] == ALLIES && PlayerInfo[i][Spawned] == 1)
			{
	 			SendClientMessage(i, color, text);
	 		}
	    }
    }
    return 1;
}
stock SendMessageToAxis(color, text[])
{
	forLoop(i, MAX_PLAYERS)
	{
		if(IsPlayerConnected(i))
	 	{
			if(PlayerInfo[i][PlayerMode] == TW && PlayerInfo[i][pTeam] == AXIS && PlayerInfo[i][Spawned] == 1)
			{
	 			SendClientMessage(i, color, text);
	 		}
	    }
    }
    return 1;
}
stock SendMessageToPlayerMode(playerid, color, text[])
{
	forLoop(i, MAX_PLAYERS)
	{
		if(IsPlayerConnected(i))
	 	{
			if(PlayerInfo[i][PlayerMode] == PlayerInfo[playerid][PlayerMode] && PlayerInfo[i][Spawned] == 1)
			{
	 			SendClientMessage(i, color, text);
	 		}
	    }
    }
    return 1;
}
stock SendMessageToMode(mode, color, text[])
{
	forLoop(i, MAX_PLAYERS)
	{
		if(IsPlayerConnected(i))
	 	{
			if(PlayerInfo[i][PlayerMode] == mode && PlayerInfo[i][Spawned] == 1)
			{
	 			SendClientMessage(i, color, text);
	 		}
	    }
    }
    return 1;
}
stock SendDeathMessageToMode(mode, killer, killee, weapon)
{
    forLoop(i, MAX_PLAYERS)
	{
		if(IsPlayerConnected(i))
	 	{
			if(PlayerInfo[i][PlayerMode] == mode && PlayerInfo[i][Spawned] == 1)
			{
	 			SendDeathMessageToPlayer(i, killer, killee, weapon);
	 		}
	    }
    }
    return 1;
}
stock GameTextForMode(mode, text[], time, type)
{
	forLoop(i, MAX_PLAYERS)
	{
		if(IsPlayerConnected(i))
		{
			if(PlayerInfo[i][PlayerMode] == mode && PlayerInfo[i][Spawned] == 1)
			{
				GameTextForPlayer(i, text, time, type);
			}
		}
	}
    return 1;
}

stock SendMessageToGang(playerid,color, text[])
{
	//printf("DEBUG CFONTROL SendMessageToGang 1");
	forLoop(i, MAX_PLAYERS)
	{
		if(IsPlayerConnected(i))
	 	{
			if(PlayerInfo[i][PlayerMode] == FFA && FFAPlayerInfo[i][GangID] == FFAPlayerInfo[playerid][GangID] && PlayerInfo[i][Spawned] == 1 && PlayerInfo[playerid][Spawned] == 1)
			{
	 			SendClientMessage(i, color, text);
	 		}
	    }
    }
	//printf("DEBUG CFONTROL SendMessageToGang 2");
    return 1;
}
stock SendMessageToGangID(id,color, text[])
{
	//printf("DEBUG CFONTROL SendMessageToGangID 1");
	forLoop(i, MAX_PLAYERS)
	{
		if(IsPlayerConnected(i))
	 	{
			if(PlayerInfo[i][PlayerMode] == FFA && FFAPlayerInfo[i][GangID] == id && PlayerInfo[i][Spawned] == 1)
			{
	 			SendClientMessage(i, color, text);
	 		}
	    }
    }
	//printf("DEBUG CFONTROL SendMessageToGangID 2");
    return 1;
}

//==============================================================================

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	//printf("DEBUG CFONTROL OnPlayerKeyStateChange pid %d nk %d ok %d",playerid, newkeys, oldkeys);
	if(PlayerInfo[playerid][Jailed] > 0 || PlayerInfo[playerid][Frozen] > 0 || AC_PlayerInfo[playerid][AC_pFreezed] == true)return 0;
    if(!IsPlayerInAnyVehicle(playerid))
	{
	    if(PRESSED(KEY_HANDBRAKE))
		{
		    if(GetPlayerWeapon(playerid) == WEAPON_ROCKETLAUNCHER)ShowRocketAimForPlayer(playerid);
		}
		if(RELEASED(KEY_HANDBRAKE))
	 	{
	 	    HideRocketAimForPlayer(playerid);
	 	}
 	}
 	/*if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
 	{
 	    if(PRESSED(KEY_YES))
		{
			printf("yes %d %d %d",GetPlayerWeapon(playerid), GetWeaponSlot(GetPlayerWeapon(playerid)), GetWeaponSlot(GetPlayerWeapon(playerid))+1);
            SetPlayerArmedWeapon(playerid, GetWeaponSlot(GetPlayerWeapon(playerid))+1);
		}
 	    if(PRESSED(KEY_NO))
		{
            printf("n %d %d %d",GetPlayerWeapon(playerid), GetWeaponSlot(GetPlayerWeapon(playerid)), GetWeaponSlot(GetPlayerWeapon(playerid))-1);
            SetPlayerArmedWeapon(playerid, GetWeaponSlot(GetPlayerWeapon(playerid))-1);
		}
 	}*/
	if(!IsPlayerInAnyVehicle(playerid) && PlayerInfo[playerid][PlayerMode] != CTF)
	{
	    if(PRESSED(KEY_HANDBRAKE))
		{
		    if(GetPlayerWeapon(playerid) == WEAPON_ROCKETLAUNCHER || GetPlayerWeapon(playerid) == WEAPON_SNIPER
				 || GetPlayerWeapon(playerid) == WEAPON_CAMERA || GetPlayerWeapon(playerid) == WEAPON_HEATSEEKER)
			{
			    forLoop(i, 10)
			    {
					RemovePlayerAttachedObject(playerid, i);
				}
			}
		}
		if(RELEASED(KEY_HANDBRAKE))
	 	{
	 	    forLoop(i, 10)
		    {
		        RemovePlayerAttachedObject(playerid, i);
				if(sAttachments[playerid][i][Exists])SetPlayerAttachedObjectEx(playerid,i,sAttachments[playerid][i][ModelID],sAttachments[playerid][i][BoneID],
					sAttachments[playerid][i][pOffsetX],sAttachments[playerid][i][pOffsetY],sAttachments[playerid][i][pOffsetZ],
					sAttachments[playerid][i][pRotX],sAttachments[playerid][i][pRotY],sAttachments[playerid][i][pRotZ],
					sAttachments[playerid][i][pScaleX],sAttachments[playerid][i][pScaleY],sAttachments[playerid][i][pScaleZ]);
			}
	 	}
 	}
	//===================[RP]========================
	if(PlayerInfo[playerid][PlayerMode] == TRP && PlayerInfo[playerid][Spawned] == 1 && RPPlayerInfo[playerid][FirstTime] == 1)
	{
		if(!IsPlayerInAnyVehicle(playerid) && PRESSED(KEY_FIRE))
		{
		    new sid = RPPlayerInfo[playerid][SelectedItem];
			if(sid == -1 && !IsPlayerSwimming(playerid) && !IsPlayerFalling(playerid))
			{
			    if(GetPlayerWeapon(playerid) != 0)
	        	{
				    new w = GetWeaponSlot(GetPlayerWeapon(playerid));
				    if(GetPlayerWeapon(playerid) == RPPlayerInfo[playerid][selWeap][w])
				    {
				        sid = RPPlayerInfo[playerid][selWeapID][w];
				    	new type = GetWeaponTypeFromID(RPPlayerInfo[playerid][selWeap][w]);
				    	if(type == EXPLOSIVE)
				    	{
							RPPlayerInfo[playerid][BagItems][sid] = 0;
				    	    RPPlayerInfo[playerid][selWeap][w] = -1;
							RPPlayerInfo[playerid][selWeapID][w] = -1;
							PlayerTextDrawSetString(playerid,RPPlayerInfo[playerid][selItem], " ");
				    	}
				    }
	        	}
			}
		    return 0;
		}
		if((!IsPlayerInAnyVehicle(playerid) && RELEASED(KEY_FIRE)) || (IsPlayerInAnyVehicle(playerid) && (RELEASED(1) || RELEASED(4) || RELEASED(132))))
		{
		    new sid = RPPlayerInfo[playerid][SelectedItem];
			if(sid == -1 && !IsPlayerSwimming(playerid) && !IsPlayerFalling(playerid))
			{
			    if(GetPlayerWeapon(playerid) != 0)
	        	{
				    new w = GetWeaponSlot(GetPlayerWeapon(playerid));
				    new weap, ammo, type;
				    if(GetPlayerWeapon(playerid) == RPPlayerInfo[playerid][selWeap][w])
				    {
				        sid = RPPlayerInfo[playerid][selWeapID][w];
				    	type = GetWeaponTypeFromID(RPPlayerInfo[playerid][selWeap][w]);
				    	if(type == PISTOLS || type == RIFLE)
		    	        {
					    	forLoop(slot, 14)
							{
								GetPlayerWeaponData(playerid, slot, weap, ammo);
								if(weap == RPPlayerInfo[playerid][selWeap][w])
								{
								    RPPlayerInfo[playerid][BagItemsValue][sid] = ammo;
								    if(ammo <= 0)
								    {
								    	RPPlayerInfo[playerid][BagItems][sid] = 0;
							    	    RPPlayerInfo[playerid][selWeap][w] = -1;
										RPPlayerInfo[playerid][selWeapID][w] = -1;
										PlayerTextDrawSetString(playerid,RPPlayerInfo[playerid][selItem], " ");
										GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~r~NO AMMO", 2000, 3);
								    }
								    break;
								}
							}
						}
				    }
	        	}
			}
			return 0;
		}
		if(PRESSED(KEY_NO) && RPIsPlayerNormalState(playerid))
		{
		    new sid = RPPlayerInfo[playerid][SelectedItem];
			if(sid == -1 || sid >= RP_MAX_BAG_ITEMS) return 0;
        	new mid = GetItemInfoID(RPPlayerInfo[playerid][BagItems][sid]);
        	if(!IsPlayerInAnyVehicle(playerid))
        	{
				if(RPItemInfo[mid][Type] == VEH_REPAIR)
	    		{
	    		    new vehicleid = GetClosestVehicle(playerid);
	    		    if(PlayerToVehicle(playerid, vehicleid, 4.0) && RPGetVehicleID(vehicleid) != -1 && !IsVehBicycle(vehicleid))
	    		    {
	    		        RPPlayerInfo[playerid][isRepairing] = 1;
					    ApplyAnimation(playerid,"BOMBER","BOM_Plant_Loop",4.0,1,0,0,1,0);
						SetPlayerArmedWeapon(playerid, 0);
						KillTimer(RPPlayerInfo[playerid][Timer]);
						RPPlayerInfo[playerid][Timer] = SetTimerEx("RPRepairVehicle",900,0,"dddd", playerid, sid, vehicleid, 5);
					}
	    		}
	    		if(RPItemInfo[mid][Type] == GAS_CAN)
	    		{
	    		    new i = RPGetClosestFuel(playerid, 2.0);
					if(i != -1)
					{
				        if(RPPlayerInfo[playerid][BagItemsValue][sid] < 100)
				        {
                            RPPlayerInfo[playerid][isFueling] = 1;
						    ApplyAnimation(playerid,"BOMBER","BOM_Plant_Loop",4.0,1,0,0,1,0);
							SetPlayerArmedWeapon(playerid, 0);
							KillTimer(RPPlayerInfo[playerid][Timer]);
							RPPlayerInfo[playerid][Timer] = SetTimerEx("RPFuelingUp",1000,0,"dddd", playerid, sid, 1, i);
						}else GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~r~CAN IS FULL", 2000, 3);
					}
					else
					{
				    	new vehicleid = GetClosestVehicle(playerid);
				    	new rpveh = RPGetVehicleID(vehicleid);
				    	if(PlayerToVehicle(playerid, vehicleid, 4.0) && rpveh != -1 && !IsVehBicycle(vehicleid) && !IsVehTrailer(vehicleid))
				    	{
			    		    if(RPVehicles[rpveh][Fuel] < 100)
			    		    {
				    		    if(RPPlayerInfo[playerid][BagItemsValue][sid] > 0)
								{
									RPPlayerInfo[playerid][isFueling] = 1;
								    ApplyAnimation(playerid,"BOMBER","BOM_Plant_Loop",4.0,1,0,0,1,0);
									SetPlayerArmedWeapon(playerid, 0);
									KillTimer(RPPlayerInfo[playerid][Timer]);
									RPPlayerInfo[playerid][Timer] = SetTimerEx("RPFuelingUp",1000,0,"dddd", playerid, sid, 0, rpveh);
								} else GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~r~NO FUEL IN CAN", 2000, 3);
							}else GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~r~TANK IS FULL", 2000, 3);
						}
					}
	    		}
    		}
    		if(RPItemInfo[mid][Type] == RP_MAP)
    		{
				TextDrawShowForPlayer(playerid,RPInfo[rp_Map]);
    		}
			return 0;
		}
	    if(RELEASED(KEY_NO))
		{
		    new sid = RPPlayerInfo[playerid][SelectedItem], mid;
		    if(sid == -1 && IsPlayerSwimming(playerid) && RPPlayerInfo[playerid][Thirst] < 100.0)
		    {
			    if(RPPlayerInfo[playerid][Thirst] < 10.0)RPPlayerInfo[playerid][Health]+=5.0;
			    RPPlayerInfo[playerid][Thirst]+=20.0;
			    GameTextForPlayer(playerid, "~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~w~DRINKING...", 3000, 3);
                updateRPStats(playerid);
			}
			if(sid == -1 || sid >= RP_MAX_BAG_ITEMS) return 0;
        	mid = GetItemInfoID(RPPlayerInfo[playerid][BagItems][sid]);
			if(RPItemInfo[mid][Type] == VEH_REPAIR && RPPlayerInfo[playerid][isRepairing] == 1)
    		{
    		    ClearAnimations(playerid);
				Sync(playerid);
				RPPlayerInfo[playerid][isRepairing] = 0;
				GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~r~Repair failed", 2000, 3);
				KillTimer(RPPlayerInfo[playerid][Timer]);
    		}
			if(RPItemInfo[mid][Type] == GAS_CAN && RPPlayerInfo[playerid][isFueling] == 1)
    		{
    		    ClearAnimations(playerid);
				Sync(playerid);
				RPPlayerInfo[playerid][isFueling] = 0;
				GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~r~Fueling stopped", 2000, 3);
				KillTimer(RPPlayerInfo[playerid][Timer]);
    		}
    		if(RPItemInfo[mid][Type] == RP_MAP)
    		{
				TextDrawHideForPlayer(playerid,RPInfo[rp_Map]);
    		}
    		if(!IsPlayerSwimming(playerid) && !IsPlayerFalling(playerid) && RPIsPlayerNormalState(playerid))
    		{
	    		if(RPItemInfo[mid][Type] == HEALTH_PACK)
	    		{
				    RPPlayerInfo[playerid][Health]+=60.0;
				    RPPlayerInfo[playerid][Hunger]+=50.0;
				    RPPlayerInfo[playerid][Thirst]+=50.0;
				    RPPlayerInfo[playerid][HPState] = RP_HEALTHY;
				    ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
				    GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~w~HEALING...", 3000, 3);
				    RPPlayerInfo[playerid][SelectedItem] = -1;
				    RemovePlayerAttachedObjectEx(playerid, RP_ATTACHMENT_INDEX);
				    updateRPStats(playerid);
				    RPPlayerInfo[playerid][BagItems][sid] = 0;
	    		}
	        	else if(RPItemInfo[mid][Type] == FOOD)
	    		{
	    		    if(RPPlayerInfo[playerid][Hunger] < 99.0)
	    		    {
					    if(RPPlayerInfo[playerid][Hunger] < 10.0)RPPlayerInfo[playerid][Health]+=5.0;
					    RPPlayerInfo[playerid][Hunger]+=20.0;
					    ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
					    GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~w~EATING...", 3000, 3);
				    	RPPlayerInfo[playerid][SelectedItem] = -1;
				    	RemovePlayerAttachedObjectEx(playerid, RP_ATTACHMENT_INDEX);
						updateRPStats(playerid);
				    	RPPlayerInfo[playerid][BagItems][sid] = 0;
					}
					else GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~r~NOT HUNGRY", 2000, 3);
	    		}
    		}
    		if(RPItemInfo[mid][Type] == BOTTLE)
    		{
    		    if(IsPlayerSwimming(playerid))
    		    {
    		        if(RPPlayerInfo[playerid][BagItemsValue][sid] < 100)
					{
	    		        TogglePlayerControllable(playerid,false);
						TogglePlayerControllable(playerid,true);
						RPPlayerInfo[playerid][BagItemsValue][sid]+= 20;
						if(RPPlayerInfo[playerid][BagItemsValue][sid] > 100)RPPlayerInfo[playerid][BagItemsValue][sid] = 100;
						GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~w~FILLING UP BOTTLE...", 2000, 3);
					}else GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~r~BOTTLE FULL", 2000, 3);
    		    }
    		    if(RPIsPlayerNormalState(playerid) && !IsPlayerSwimming(playerid))
    		    {
    		        if(RPPlayerInfo[playerid][Thirst] < 100)
    		    	{
						if(RPPlayerInfo[playerid][BagItemsValue][sid] > 0)
						{
						    if(RPPlayerInfo[playerid][BagItemsValue][sid] < 10)
								RPPlayerInfo[playerid][Thirst]+=RPPlayerInfo[playerid][BagItemsValue][sid];
							else RPPlayerInfo[playerid][Thirst]+=10;

						    RPPlayerInfo[playerid][BagItemsValue][sid]-= 10;
						    if(RPPlayerInfo[playerid][BagItemsValue][sid] < 0)
								RPPlayerInfo[playerid][BagItemsValue][sid] = 0;
						    TogglePlayerControllable(playerid,false);
							TogglePlayerControllable(playerid,true);
						    ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
						    GameTextForPlayer(playerid, "~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~w~DRINKING...", 2000, 3);
	                        updateRPStats(playerid);
						} else GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~r~NO WATER IN BOTTLE", 2000, 3);
					}
					else GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~r~NOT THIRSTY", 2000, 3);
				}
    		}
    		updateSelItem(playerid, mid, sid);
			return 0;
		}
        if(PRESSED(KEY_SUBMISSION))
        {
			if(IsPlayerInAnyVehicle(playerid) && RPGetVehicleID(GetPlayerVehicleID(playerid)) != -1)
	        {
	            new i = RPGetVehicleID(GetPlayerVehicleID(playerid));
				forLoop(u, SELECT_MENU_OPTIONS)PlayerInfo[playerid][SelectMenuOption][u] = -1;
				PlayerInfo[playerid][SelectMenuOption][SELECT_MENU_OPTIONS-1] = i;
				if(!getRPVehicleItems(playerid, i))
				    return GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~r~VEHICLE IS EMPTY", 2000, 3);
				return 0;
	        }
        }
        if(PRESSED(KEY_YES))
		{
		    //if(IsPlayerSwimming(playerid) || IsPlayerFalling(playerid))
		    //    return GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~r~MUST BE ON GROUND", 2000, 3);
		    
		    forLoop(i, SELECT_MENU_OPTIONS)PlayerInfo[playerid][SelectMenuOption][i] = -1;
		    if(!getRPItems(playerid))
				    return GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~r~BACKPACK IS EMPTY", 2000, 3);
			return 0;
		}
		if(!IsPlayerInAnyVehicle(playerid))
        {
		    if(PRESSED(KEY_WALK))
			{
			    new atype = -1, i = -1;
			    RPGetClosestType(playerid, 2.0, i, atype);
			    if(atype == -1 || i == -1)return 0;
				switch(atype)
				{
				    case RP_TYPE_ITEM:
				    {
				        if(!RPGetBackPackItems(playerid))return 0;
				        playerRPPickUpItem(playerid, i, -1, RP_ITEM_FROM_GROUND);
			        	GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~w~ITEM PICKED UP", 3000, 3);
				    }
				    case RP_TYPE_BAGS:
				    {
					    forLoop(u, SELECT_MENU_OPTIONS)PlayerInfo[playerid][SelectMenuOption][u] = -1;
					    PlayerInfo[playerid][SelectMenuOption][SELECT_MENU_OPTIONS-1] = i;
					    getRPGroundBagItems(playerid, i);
				    }
				    case RP_TYPE_DEAD:
				    {
				        new str[80];
		                GiveThePlayerMoney(playerid, RPDeads[i][Money]);
				        format(str,sizeof str,"~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~w~%d dollars picked up",RPDeads[i][Money]);
				        RPDestroyDeadBody(i);
				        GameTextForPlayer(playerid, str, 2000, 3);
				    }
				    case RP_TYPE_NOTE:
				    {
					    new str[120];
					    forLoop(u, SELECT_MENU_OPTIONS)PlayerInfo[playerid][SelectMenuOption][u] = -1;
					    PlayerInfo[playerid][SelectMenuOption][SELECT_MENU_OPTIONS-1] = i;
						format(str,sizeof str,"{FFFFFF}%s",breakString(RPNotes[i][Note], 30));
						ShowPlayerDialog(playerid,RP_READ_NOTE, DIALOG_STYLE_MSGBOX,"Note", str, "Destroy", "Close");
				    }
				}
				return 0;
			}
			if(PRESSED(KEY_SECONDARY_ATTACK))//enter key
			{
				if(IsPlayerInRangeOfPoint(playerid, 1.0, 2807.5911,-1174.4734,1025.5703) && GetPlayerInterior(playerid) == 8)
				{
				    new rand = random(sizeof(RPRandomSpawns));
				    SetPlayerPosEx(playerid,RPRandomSpawns[rand][0],RPRandomSpawns[rand][1],RPRandomSpawns[rand][2],RPRandomSpawns[rand][3]);
					SetPlayerInterior(playerid,	0);
				    SetPlayerVirtualWorld(playerid, W_RP);
				    return 0;
			    }
				forLoop(i, RP_MAX_INTERIORS)
				{
				    if(RPInterior[i][Exists] == 1)
				    {
			        	if(IsPlayerInRangeOfPoint(playerid, 1.0, RPInterior[i][iPosX],RPInterior[i][iPosY],RPInterior[i][iPosZ])
							&& GetPlayerInterior(playerid) == RPInterior[i][iInt] && GetPlayerVirtualWorld(playerid) == RPInterior[i][iWorld])
						{
						    if(RPInterior[i][oE] == 0)
								return GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~~r~NO EXTERIOR", 2000, 3);
						    SetPlayerVirtualWorld(playerid, RPInterior[i][oWorld]);
							SetPlayerInterior(playerid,	RPInterior[i][oInt]);
						    SetPlayerPosEx(playerid, RPInterior[i][oPosX],RPInterior[i][oPosY],RPInterior[i][oPosZ],RPInterior[i][oAngle]);
				    		return 0;
						}

						if(IsPlayerInRangeOfPoint(playerid, 1.0, RPInterior[i][oPosX],RPInterior[i][oPosY],RPInterior[i][oPosZ])
							&& GetPlayerInterior(playerid) == RPInterior[i][oInt] && GetPlayerVirtualWorld(playerid) == RPInterior[i][oWorld])
						{
						    if(RPInterior[i][iE] == 0)
								return GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~~r~NO INTERIOR", 2000, 3);
						    SetPlayerVirtualWorld(playerid, RPInterior[i][iWorld]);
							SetPlayerInterior(playerid,	RPInterior[i][iInt]);
						    SetPlayerPosEx(playerid, RPInterior[i][iPosX],RPInterior[i][iPosY],RPInterior[i][iPosZ],RPInterior[i][iAngle]);
							//FreezeBeforeObjects(playerid);
							SetPlayerWorldBounds(playerid, 20000.0000, -20000.0000, 20000.0000, -20000.0000 );
				    		return 0;
						}
				    }
				}
			}
		}
	}

	if(PlayerInfo[playerid][PlayerMode] == DM && PlayerInfo[playerid][Spawned] == 1)
	{
        if(PRESSED(KEY_SUBMISSION) && DMPlayerInfo[playerid][eBarrel] == 1 && DMPlayerInfo[playerid][Alive] == 1 && DMMAPInfo[Type] == DM_TYPE_RACE)
		{
		    if(DMMAPInfo[TimeLeft] < 882)
		    {
			    new Float:x, Float:y, Float:z, objectid, worldid = W_DM+2;//GetPlayerVirtualWorld(playerid)
				GetXYInFrontOfPlayer(playerid, x, y, z, -2.5);
	            DMPlayerInfo[playerid][eBarrel] = 0;
				objectid = CreateTheDynamicObject(1225, x, y, z, 0.0, 0.0, 0.0,worldid);
				SetTimerEx("DestroyObjectPub", 15000, 0, "i", objectid);
				forLoop(i, MAX_PLAYERS)
			    {
					if(IsPlayerConnected(i) && GetPlayerVirtualWorld(i) == worldid)
					{
					    if(IsPlayerInRangeOfPoint(i, 250,x, y, z))
					    {
				    		Streamer_Update(i);
						}
			    	}
		        }
	            SendMessageToMode(DM,red1,"{FF9900}RACE BARREL:{FFFFFF} A barrel has been dropped, be careful!");
	            SendClientMessage(playerid, red1, "{FF0000}Notice:{FFFFFF} Barrel will be destroyed in 20 seconds.");
            }
			else SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} It's too early to drop the barrel, wait until everyone is visible.");
		}
	    /*if(PRESSED(KEY_YES) && DMPlayerInfo[playerid][Alive] == 1)
	    {
			if(GetThePlayerMoney(playerid)  >=  1500)
			{
			    GiveThePlayerMoney(playerid, -1500);
			    AddVehicleComponent(GetPlayerVehicleID(playerid), 1010);
				PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
				GameTextForPlayer(playerid, "~w~~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ NOS PURCHASED",1999, 3);
	        }else SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You don't have enough money for nos.");
        }*/
	    if(PRESSED(KEY_NO) && DMPlayerInfo[playerid][Alive] == 1 && DMPlayerInfo[playerid][Camper] == 0 && DMMAPInfo[Type] == DM_TYPE_DM)
	    {
			if(GetThePlayerMoney(playerid)  >=  1500 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 425 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 520)
			{
			    GiveThePlayerMoney(playerid, -1500);
				DMPlayerInfo[playerid][Camper] = 1;
				GameTextForPlayer(playerid, "~w~~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ CAMPER PURCHASED",1999, 3);
				new str[196];
				format(str, sizeof str, "{FF0000}CAMPER NOTICE{FFFFFF} %s has purchased a camper!",PlayerInfo[playerid][Name]);
			 	SendMessageToMode(DM,COLOR_WHITE, str);
	        }else SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You don't have enough money for a camper.");
        }
	    if(PRESSED(KEY_SECONDARY_ATTACK) && IsPlayerInAnyVehicle(playerid) && DMMAPInfo[dStarted] == 1 && DMPlayerInfo[playerid][Alive] == 1)
	    {
			new Float:x,Float:y,Float:z;
			GetPlayerPos(playerid,x,y,z);
			SetPlayerPos(playerid,x,y,z+2);
		}
	    if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING && DMPlayerInfo[playerid][Alive] == 0 && DMPlayerInfo[playerid][SpecID] > -1)
	    {
		    if(PRESSED(KEY_FIRE) || PRESSED(KEY_NO))
	    	{
	            DM_ReverseSpectate(playerid);
			}
	        if(PRESSED(KEY_HANDBRAKE) || PRESSED(KEY_YES))
			{
	            DM_AdvanceSpectate(playerid);
			}
		}
	}
	if(PlayerInfo[playerid][PlayerMode] == VW && PlayerInfo[playerid][Spawned] == 1 && VWPlayerInfo[playerid][Deployed] == 1)
	{
	    if(!IsPlayerInAnyVehicle(playerid) && RELEASED(KEY_WALK))
	    {
	        if(VWPlayerInfo[playerid][Class] == VW_MEDIC || VWPlayerInfo[playerid][Class] == VW_ENGINEER)
	        {
	            if(!IsPlayerSwimming(playerid) && !IsPlayerFalling(playerid) && VWPlayerInfo[playerid][LastCreate] <= 0)
	            	VWCreateClassAction(playerid);
	        }
	    }
	    if(!IsPlayerInAnyVehicle(playerid) && RELEASED(KEY_NO))
	    {
	        forLoop(id, MAX_CLASS_ACTIONS)
			{
			    if(VWClassAction[id][Exists] == 1)
		    	{
		    	    if(IsPlayerInDynamicArea(playerid, VWClassAction[id][Area]))
					{
			    	    new player = VWClassAction[id][Player];
			    	    if(player >= 0 && player < MAX_PLAYERS)
				    	{
				    	    if(PlayerInfo[playerid][PlayerMode] == PlayerInfo[player][PlayerMode] && PlayerInfo[playerid][pTeam] == PlayerInfo[player][pTeam])
				    	    {
				    	        if(VWClassAction[id][Type] == CLASS_ACTION_HEAL)
				    	        {
				    	            if(VWPlayerInfo[playerid][LastLoad] <= 0)
				    	            {
			                            SetHealth(playerid, 99.0);
						    	        if(playerid != player)
											VWGiveScore(player, 15, "Heal");
                                        VWPlayerInfo[playerid][LastLoad] = 16;
									}
				    	        }
				    	        else if(VWClassAction[id][Type] == CLASS_ACTION_AMMO)
				    	        {
				    	            if(VWPlayerInfo[playerid][LastLoad] <= 0)
				    	            {
					    	            ResetWeapons(playerid);
					    	            VWGiveWeapons(playerid);
						    	        if(playerid != player)
											VWGiveScore(player, 15, "Ammo refill");
	                                    VWPlayerInfo[playerid][LastLoad] = 16;
									}
				    	        }
				    	    	break;
				    	    }
				    	}
			    	}
		    	}
			}
	    }
	}
	if(PlayerInfo[playerid][PlayerMode] == PJ && PlayerInfo[playerid][Spawned] == 1)
	{
	    if(PRESSED(KEY_NO) && PJPlayerInfo[playerid][Alive] == 1 && PJPlayerInfo[playerid][Camper] == 0)
	    {
			if(GetThePlayerMoney(playerid)  >=  1500 && PJPlayerInfo[playerid][InDuel] == 0)
			{
			    GiveThePlayerMoney(playerid, -1500);
				PJPlayerInfo[playerid][Camper] = 1;
				GameTextForPlayer(playerid, "~w~~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ CAMPER PURCHASED",1999, 3);
				new str[196];
				format(str, sizeof str, "{FF0000}CAMPER NOTICE{FFFFFF} %s has purchased a camper!",PlayerInfo[playerid][Name]);
			 	SendMessageToMode(PJ,COLOR_WHITE, str);
	        }else SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You don't have enough money for a camper.");
        }
	    if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING && PJPlayerInfo[playerid][Alive] == 0 && PJPlayerInfo[playerid][SpecID] > -1)
	    {
		    if(PRESSED(KEY_FIRE) || PRESSED(KEY_NO))
	    	{
	            PJ_ReverseSpectate(playerid);
			}
	        if(PRESSED(KEY_HANDBRAKE) || PRESSED(KEY_YES))
			{
	            PJ_AdvanceSpectate(playerid);
			}
		}
	}
	if(PlayerInfo[playerid][PlayerMode] == STUNT && PlayerInfo[playerid][Spawned] == 1)
	{
	    if(SFPlayerInfo[playerid][Spiderman] == 1)
		{
		    /*if(newkeys & KEY_AIMFIRE == KEY_AIMFIRE && oldkeys & KEY_AIMFIRE != KEY_AIMFIRE)
			{
				if(!GetPVarInt(playerid, "pv_IsMoving"))
				{
					if(GetPlayerWeapon(playerid) == 11 && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
					{
					    SetHealth(playerid,100000);
						new Float: camVect_Z, Float: mapPos_Z, Float: pAngle, Float: camPos[3], Float: tmpPos[4];
						GetPlayerCameraFrontVector(playerid, camVect_Z, camVect_Z, camVect_Z);
						GetPlayerCameraPos(playerid, camPos[0], camPos[1], camPos[2]);
						GetPlayerFacingAngle(playerid, pAngle);

						camVect_Z += 0.08;

						for(new Float: i; i < MAX_GRAPPLE_DISTANCE; i += GRAPPLE_CROSS_INTERVAL)
						{
							camPos[0] += i * floatsin(-pAngle, degrees);
							camPos[1] += i * floatcos(-pAngle, degrees);
							camPos[2] += i * camVect_Z;

							GetPointZPos(camPos[0], camPos[1], mapPos_Z);

							if(tmpPos[3] < camPos[2] < mapPos_Z || camPos[2] < mapPos_Z < tmpPos[2])
							{
								static Float: pPos[3], Float: totDist;
								GetPlayerPos(playerid, pPos[0], pPos[1], pPos[2]);

								camPos[0] = ((camPos[0] + tmpPos[0]) / 2.0) - pPos[0];
								camPos[1] = ((camPos[1] + tmpPos[1]) / 2.0) - pPos[1];
								camPos[2] = ((camPos[2] + tmpPos[2]) / 2.0) - pPos[2];

								totDist = floatpower((camPos[0] * camPos[0]) + (camPos[1] * camPos[1]) + (camPos[2] * camPos[2]), 0.5);

								SetPVarInt(playerid, "pv_MoveTimer",
									SetTimerEx("MovePlayer", 50, true, "iffffff", playerid, camPos[0] + pPos[0], camPos[1] + pPos[1], camPos[2] + pPos[2], ((camPos[0] * PLAYER_MOVE_SPEED) / totDist) / 46.0, ((camPos[1] * PLAYER_MOVE_SPEED) / totDist) / 46.0, 0.02132 + ((camPos[2] * PLAYER_MOVE_SPEED) / totDist) / 46.0)
								);

								SetPVarFloat(playerid, "pv_OldDist", 0x7F800000);
								break;
							}
							tmpPos[0] = camPos[0];
							tmpPos[1] = camPos[1];
							tmpPos[2] = camPos[2];
							tmpPos[3] = mapPos_Z;

							camPos[0] -= i * floatsin(-pAngle, degrees);
							camPos[1] -= i * floatcos(-pAngle, degrees);
							camPos[2] -= i * camVect_Z;
						}
					}
				}
			}*/
		}
		if(SFPlayerInfo[playerid][SpecID] > -1)
		{
		    if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING)
		    {
			    if(PRESSED(KEY_FIRE) || PRESSED(KEY_NO))
		    	{
		            SF_ReverseSpectate(playerid);
				}
		        if(PRESSED(KEY_HANDBRAKE) || PRESSED(KEY_YES))
				{
		            SF_AdvanceSpectate(playerid);
				}
			}
		}
	
		if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	    {
	        if(!SFPlayerInfo[playerid][Event] && GetPlayerVirtualWorld(playerid) == W_STUNT)
	        {
		        if (PRESSED(KEY_YES))
				{
				    if(SFPlayerInfo[playerid][Boost])
					{
						SFPlayerInfo[playerid][Boost] = 0;
						GameTextForPlayer(playerid, "~n~ ~n~ ~n~ ~n~ ~r~Boost deactivated", 2000, 3);
			    	}
			    	else
			    	{
			    	    SFPlayerInfo[playerid][Boost] = 1;
						GameTextForPlayer(playerid, "~n~ ~n~ ~n~ ~n~ ~g~Boost activated", 2000, 3);
			    	}
				}
				if(SFPlayerInfo[playerid][Boost])
				{
					if(PRESSED(KEY_CROUCH))
					{
					    //NoTeleportCheck[playerid]=10;
						new Float:x, Float:y, Float:z;
					    GetVehicleVelocity(GetPlayerVehicleID(playerid),x,y,z);
					    SetVehicleVelocity(GetPlayerVehicleID(playerid),x,y,z+0.3);
					}
					if(PRESSED(KEY_FIRE))
				    {
				        if(IsPlayerInAnyVehicle(playerid))
				        {
				            AddVehicleComponent(GetPlayerVehicleID(playerid), 1010);
				        }
				    }
				    if(RELEASED(KEY_FIRE))
				    {
				        if(IsPlayerInAnyVehicle(playerid))
				        {
				            RemoveVehicleComponent(GetPlayerVehicleID(playerid), 1010);
				        }
				    }
				}


			    if(PRESSED(KEY_SUBMISSION) && !IsPlayerInPlane(playerid))
				{
				    new VehicleID, Float:X, Float:Y, Float:Z, Float:Angle;
					new Float:x,Float:y,Float:z;
					GetVehicleVelocity(GetPlayerVehicleID(playerid),x,y,z);
					GetPlayerPos(playerid, X, Y, Z);
					VehicleID = GetPlayerVehicleID(playerid);
					GetVehicleZAngle(VehicleID, Angle);
					SetVehiclePos(VehicleID, X, Y, Z);
					SetVehicleZAngle(VehicleID, Angle);
					SetVehicleHealth(VehicleID,1000.0);
					SetVehicleVelocity(GetPlayerVehicleID(playerid),x,y,z);
				}
			}
		    if(SFPlayerInfo[playerid][Event] > 0 && GetPlayerVirtualWorld(playerid) != W_STUNT)
			{
			    if(PRESSED(KEY_FIRE))
			    {
			        if(IsPlayerInAnyVehicle(playerid))
			        {
			            AddVehicleComponent(GetPlayerVehicleID(playerid), 1010);
			        }
			    }
			    if(RELEASED(KEY_FIRE))
			    {
			        if(IsPlayerInAnyVehicle(playerid))
			        {
			            RemoveVehicleComponent(GetPlayerVehicleID(playerid), 1010);
			        }
			    }
			}
		}
	}
	
	
    if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING && PlayerInfo[playerid][SpecID] > -1  && PlayerInfo[playerid][Level] > 0)
	{
	    if(PRESSED(KEY_FIRE))
    	{
            ReverseSpectate(playerid);
		}
        if(PRESSED(KEY_HANDBRAKE))
		{
            AdvanceSpectate(playerid);
		}
	}
    if(PlayerInfo[playerid][sProtected] > 0 && PlayerInfo[playerid][Spawned] == 1)
	{
		if (PRESSED(KEY_FIRE) && PlayerInfo[playerid][PlayerMode] != ZO) // giving zo zombies full time
    	{
    	    EndSpawnProtection(playerid);
		}
	}
	if(!IsPlayerFalling(playerid) && !IsPlayerSwimming(playerid) && !IsPlayerInAnyVehicle(playerid))
	{
		if(PlayerInfo[playerid][PlayerMode] == CTF)
		{
		    if(CTFPlayerInfo[playerid][Capturing] == 1 && PRESSED(KEY_NO))
			{
			    PlaceFlagAtPlayerPos(playerid);
			}
		}
	}
    if(GetPlayerMode(playerid) == CO)
	{
	   	if(PRESSED(16)) COEnterExitPrison(playerid);
	    if(!IsPlayerFalling(playerid))
		{
		    if(PlayerInfo[playerid][pTeam] == COP)
		    {
			    if(RELEASED(KEY_NO))
			    {
			        if(COPlayerInfo[playerid][Arresting] > -1)
			        {
			            GameTextForPlayer(playerid, "~n~ ~n~ ~n~ ~n~ ~r~Arrest failed..", 2000, 3);
				        GameTextForPlayer(COPlayerInfo[playerid][Arresting], "~n~ ~n~ ~n~ ~n~ ~r~Arrest failed..", 2000, 3);
				        COPlayerInfo[COPlayerInfo[playerid][Arresting]][Arresting] = -1;
		    			COPlayerInfo[playerid][Arresting] = -1;
		    			KillTimer(COPlayerInfo[playerid][aTimer]);
				    }
			    }
				if (PRESSED(KEY_NO))//arrest
				{
				    if(COPlayerInfo[playerid][Arresting] == -1)
			        {
					    new player=-1;
					    player = GetClosestPlayer(playerid);
					   	if(player != -1)
					    	if(GetDistanceBetweenPlayers(playerid,player) > 5 || COPlayerInfo[player][Arresting] > -1 || PlayerInfo[playerid][pTeam] == PlayerInfo[player][pTeam] || COPlayerInfo[player][InJail])
								player = -1;
					    if(player == -1)
						    return GameTextForPlayer(playerid, "~n~ ~n~ ~n~ ~n~ ~w~No one near", 2000, 3);

                        COPlayerInfo[playerid][Arresting] = player;
				        COPlayerInfo[player][Arresting] = playerid;
				        KillTimer(COPlayerInfo[playerid][aTimer]);
				        COArrest(playerid, 9);
					}
				}
			}
		}
	}
	if(GetPlayerMode(playerid) == TW)
	{
	    if(TWPlayerInfo[playerid][Class] == MEDIC)
 		{
 		    if(!IsPlayerFalling(playerid) && !IsPlayerSwimming(playerid) && !IsPlayerInAnyVehicle(playerid))
			{
	 		    if(RELEASED(KEY_NO))
			    {
			        if(TWPlayerInfo[playerid][Healing] > -1)
			        {
			            if(PlayerInfo[playerid][pTeam] == PlayerInfo[TWPlayerInfo[playerid][Healing]][pTeam])
						{
				            GameTextForPlayer(playerid, "~n~ ~n~ ~n~ ~n~ ~r~Healing failed..", 2000, 3);
					        GameTextForPlayer(TWPlayerInfo[playerid][Healing], "~n~ ~n~ ~n~ ~n~ ~r~Healing failed..", 2000, 3);
				        }
				        else
				        {
				        	GameTextForPlayer(playerid, "~n~ ~n~ ~n~ ~n~ ~r~Poisoning failed..", 2000, 3);
					        GameTextForPlayer(TWPlayerInfo[playerid][Healing], "~n~ ~n~ ~n~ ~n~ ~r~Poisoning failed..", 2000, 3);
				        }
				        TWPlayerInfo[TWPlayerInfo[playerid][Healing]][pHealing] = -1;
		    			TWPlayerInfo[playerid][Healing] = -1;
						KillTimer(TWPlayerInfo[playerid][kscTimer]);
				    }
			    }
				if (PRESSED(KEY_NO))//heal + poison
				{
				    if(TWPlayerInfo[playerid][Healing] == -1)
			        {
					    new player=-1;
					    player = GetClosestPlayer(playerid);
					   	if(player != -1)
					    	if(GetDistanceBetweenPlayers(playerid,player) > 5 || IsPlayerInAnyVehicle(player) || TWPlayerInfo[player][pHealing] > -1 || (PlayerInfo[playerid][pTeam] == PlayerInfo[player][pTeam] && GetThePlayerHealth(player) > 70))
								player = -1;
                        if(player == -1)
						    return GameTextForPlayer(playerid, "~n~ ~n~ ~n~ ~n~ ~w~No one near", 2000, 3);

				        TWPlayerInfo[playerid][Healing] = player;
				        TWPlayerInfo[player][pHealing] = playerid;
						KillTimer(TWPlayerInfo[playerid][kscTimer]);
						MedicHeal(playerid);
					}
				}
			}
 		}
	    if(TWPlayerInfo[playerid][Class] == ENGINEER)
 		{
		    if (!IsPlayerInAnyVehicle(playerid) && !SearchForWeapon(playerid,40) && TWPlayerBomb[playerid][bAmount] > 0)
      		{
	     		ExplodeAllPlayerTWBombs(playerid);
			}
	        if(!TWPlayerBomb[playerid][bPlanting] && !TWPlayerBomb[playerid][bDefusing] && !IsPlayerFalling(playerid) && !IsPlayerSwimming(playerid) && !IsPlayerInAnyVehicle(playerid))
			{
				if(RELEASED(KEY_WALK))
				{
				    if(TWPlayerBomb[playerid][rRepairing])
			        {
		    			TWPlayerBomb[playerid][rRepairing] = 0;
					    TWPlayerBomb[playerid][bPlanting] = 0;
					    TWPlayerBomb[playerid][bDefusing] = 0;
					    ClearAnimations(playerid);
					    Sync(playerid);
					    GameTextForPlayer(playerid, " ",1000,3);
						KillTimer(TWPlayerInfo[playerid][kscTimer]);
				    }
				}
			    if(PRESSED(KEY_WALK))
				{
				    new vehicleid, shipid=-1;
					vehicleid = GetClosestVehicle(playerid);
					if(!PlayerToVehicle(playerid, vehicleid, 4.0) && vehicleid != GetPlayerSurfingVehicleID(playerid)) vehicleid = 0;
					if(vehicleid > 0)
					{
					    ApplyAnimation(playerid, "BOMBER","BOM_Plant_Loop",4.0,1,0,0,1,0);
						SetPlayerArmedWeapon(playerid, 0);
						TWPlayerBomb[playerid][rRepairing] = 1;
					    TWPlayerBomb[playerid][bPlanting] = 0;
					    TWPlayerBomb[playerid][bDefusing] = 0;
						if(vehicleid != GetPlayerSurfingVehicleID(playerid))
						{
						    TWPlayerBomb[playerid][bSurfing] = 0;
							GetVehiclePos(vehicleid, TWPlayerBomb[playerid][bvX], TWPlayerBomb[playerid][bvY], TWPlayerBomb[playerid][bvZ]);
							GetPlayerPos(playerid, TWPlayerBomb[playerid][bpX], TWPlayerBomb[playerid][bpY], TWPlayerBomb[playerid][bpZ]);
						}else TWPlayerBomb[playerid][bSurfing] = GetPlayerSurfingVehicleID(playerid);
						KillTimer(TWPlayerInfo[playerid][kscTimer]);
						PlayerRepairSync(playerid, 0, vehicleid,6);
						return 1;
					}
					if(!vehicleid && (PlayerInfo[playerid][InNevada] > -1 || PlayerInfo[playerid][InTank] > -1))
					{
						if(PlayerInfo[playerid][InNevada] > -1)vehicleid = PlayerInfo[playerid][InNevada];
					    if(PlayerInfo[playerid][InTank] > -1)vehicleid = PlayerInfo[playerid][InTank];
					    TWPlayerBomb[playerid][rRepairing] = 1;
					    TWPlayerBomb[playerid][bPlanting] = 0;
					    TWPlayerBomb[playerid][bDefusing] = 0;
						TWPlayerBomb[playerid][bSurfing] = -1;
						GetPlayerPos(playerid, TWPlayerBomb[playerid][bpX], TWPlayerBomb[playerid][bpY], TWPlayerBomb[playerid][bpZ]);
						SetPlayerArmedWeapon(playerid, 0);
						ApplyAnimation(playerid, "BOMBER","BOM_Plant_Loop",4.0,1,0,0,1,0);
						KillTimer(TWPlayerInfo[playerid][kscTimer]);
						PlayerRepairSync(playerid, 0, vehicleid,6);
						return 1;
					}
					forLoop(id, MAX_SHIPS)
					{
						if(ShipInfo[id][sHP] > 0 && ShipInfo[id][Exists] && ShipInfo[id][Mode] == TW && ShipInfo[id][sHP] < 100)
						{
						    if(ShipInfo[id][Type] == SUB)
						    {
								if((GetXDistanceFromPlayerToShip(playerid,id) <=50) && (GetYDistanceFromPlayerToShip(playerid,id) <= 10) && (GetYDistanceFromPlayerToShip(playerid,id) <=10))
								{
								    shipid = id;
								    break;
								}
							}
							else
							{
								if((GetXDistanceFromPlayerToShip(playerid,id) <=100) && (GetYDistanceFromPlayerToShip(playerid,id) <=30) && (GetZDistanceFromPlayerToShip(playerid,id) <=30))
								{
								    shipid = id;
								    break;
								}
							}
						}
					}
					if(shipid > -1)
					{
					    if(PlayerInfo[playerid][pTeam] != ShipInfo[shipid][Team])
							return GameTextForPlayer(playerid, "~n~ ~n~ ~n~ ~n~ ~r~Can't repair enemy ship", 2000, 3);
					    TWPlayerBomb[playerid][rRepairing] = 1;
					    TWPlayerBomb[playerid][bPlanting] = 0;
					    TWPlayerBomb[playerid][bDefusing] = 0;
					    TWPlayerBomb[playerid][rShip] = shipid;
						TWPlayerBomb[playerid][bSurfing] = -1;
						SetPlayerArmedWeapon(playerid, 0);
						GetPlayerPos(playerid, TWPlayerBomb[playerid][bpX], TWPlayerBomb[playerid][bpY], TWPlayerBomb[playerid][bpZ]);
						ApplyAnimation(playerid, "BOMBER","BOM_Plant_Loop",4.0,1,0,0,1,0);
						KillTimer(TWPlayerInfo[playerid][kscTimer]);
						PlayerRepairSync(playerid, 1, shipid,6);
						return 1;
					}
					if(shipid == -1 && PlayerInfo[playerid][InSubmarine] > -1)
					{
						shipid = PlayerInfo[playerid][InSubmarine];
					    if(PlayerInfo[playerid][pTeam] != ShipInfo[shipid][Team])
							return GameTextForPlayer(playerid, "~n~ ~n~ ~n~ ~n~ ~r~Can't repair enemy sub", 2000, 3);
					    TWPlayerBomb[playerid][rRepairing] = 1;
					    TWPlayerBomb[playerid][bPlanting] = 0;
					    TWPlayerBomb[playerid][bDefusing] = 0;
					    TWPlayerBomb[playerid][rShip] = shipid;
						TWPlayerBomb[playerid][bSurfing] = -1;
						SetPlayerArmedWeapon(playerid, 0);
						GetPlayerPos(playerid, TWPlayerBomb[playerid][bpX], TWPlayerBomb[playerid][bpY], TWPlayerBomb[playerid][bpZ]);
						ApplyAnimation(playerid, "BOMBER","BOM_Plant_Loop",4.0,1,0,0,1,0);
						KillTimer(TWPlayerInfo[playerid][kscTimer]);
						PlayerRepairSync(playerid, 1, shipid,6);
						return 1;
					}
					if(!vehicleid && shipid == -1)
						return GameTextForPlayer(playerid, "~n~ ~n~ ~n~ ~n~ ~w~Nothing near", 2000, 3);
				}
			}
			if(!TWPlayerBomb[playerid][rRepairing] && !IsPlayerFalling(playerid) && !IsPlayerSwimming(playerid) && !IsPlayerInAnyVehicle(playerid))
			{
			    if(!TWPlayerBomb[playerid][bDefusing])
			    {
				    if(RELEASED(KEY_NO))
				    {
				        if(TWPlayerBomb[playerid][bPlanting])
				        {
			    			TWPlayerBomb[playerid][bPlanting] = 0;
			    			TWPlayerBomb[playerid][rRepairing] = 0;
						    TWPlayerBomb[playerid][bDefusing] = 0;
						    ClearAnimations(playerid);
						    Sync(playerid);
						    GameTextForPlayer(playerid, " ",1000,3);
						    RemovePlayerAttachedObjectEx(playerid, 6);
						    KillTimer(TWPlayerInfo[playerid][kscTimer]);
					    }
				    }
					if (PRESSED(KEY_NO))//plant
					{
					    if(TWPlayerBomb[playerid][bAmount]  >= MAX_ENGI_BOMBS)return GameTextForPlayer(playerid, "~n~ ~n~ ~n~ ~n~ ~r~no more mines", 2000, 3);
						if(TWPlayerBomb[playerid][bAmount] < 0)TWPlayerBomb[playerid][bAmount] = 0;
						new vehicleid, shipid=-1;
						vehicleid = GetClosestVehicle(playerid);
						if(!PlayerToVehicle(playerid, vehicleid, 4.0) && vehicleid != GetPlayerSurfingVehicleID(playerid)) vehicleid = 0;
						if(vehicleid > 0)
						{
						    if(VehicleIsBombedFromPlayer(playerid,vehicleid))
								return GameTextForPlayer(playerid, "~n~ ~n~ ~n~ ~n~ ~r~Can't plant here", 2000, 3);
						    ApplyAnimation(playerid, "BOMBER","BOM_Plant_Loop",4.0,1,0,0,1,0);
							SetPlayerArmedWeapon(playerid, 0);
							TWPlayerBomb[playerid][bPlanting] = 1;
			    			TWPlayerBomb[playerid][rRepairing] = 0;
						    TWPlayerBomb[playerid][bDefusing] = 0;
							if(vehicleid != GetPlayerSurfingVehicleID(playerid))
							{
							    TWPlayerBomb[playerid][bSurfing] = 0;
								GetVehiclePos(vehicleid, TWPlayerBomb[playerid][bvX], TWPlayerBomb[playerid][bvY], TWPlayerBomb[playerid][bvZ]);
								GetPlayerPos(playerid, TWPlayerBomb[playerid][bpX], TWPlayerBomb[playerid][bpY], TWPlayerBomb[playerid][bpZ]);
							}else TWPlayerBomb[playerid][bSurfing] = GetPlayerSurfingVehicleID(playerid);
							KillTimer(TWPlayerInfo[playerid][kscTimer]);
							PlayerBombSync(playerid,0,vehicleid,0,6);
							return 1;
						}
						if(!vehicleid && (PlayerInfo[playerid][InNevada] > -1 || PlayerInfo[playerid][InTank] > -1))
						{
							if(PlayerInfo[playerid][InNevada] > -1)vehicleid = PlayerInfo[playerid][InNevada];
						    if(PlayerInfo[playerid][InTank] > -1)vehicleid = PlayerInfo[playerid][InTank];
							if(VehicleIsBombedFromPlayer(playerid,vehicleid))
								return GameTextForPlayer(playerid, "~n~ ~n~ ~n~ ~n~ ~r~Can't plant here", 2000, 3);
						    TWPlayerBomb[playerid][bPlanting] = 1;
			    			TWPlayerBomb[playerid][rRepairing] = 0;
						    TWPlayerBomb[playerid][bDefusing] = 0;
							TWPlayerBomb[playerid][bSurfing] = -1;
							GetPlayerPos(playerid, TWPlayerBomb[playerid][bpX], TWPlayerBomb[playerid][bpY], TWPlayerBomb[playerid][bpZ]);
							SetPlayerArmedWeapon(playerid, 0);
							SetPlayerAttachedObjectEx(playerid,6,363,1,0.249998,0.282999,0.087999,96.600006,28.700027,21.999998,1.000000,1.000000,1.000000);
							ApplyAnimation(playerid, "BOMBER","BOM_Plant_Loop",4.0,1,0,0,1,0);
							KillTimer(TWPlayerInfo[playerid][kscTimer]);
							PlayerBombSync(playerid,0,vehicleid,1,6);
							return 1;
						}
						forLoop(id, MAX_SHIPS)
						{
							if(ShipInfo[id][sHP] > 0 && ShipInfo[id][Exists] && ShipInfo[id][Mode] == TW)
							{
							    if(ShipInfo[id][Type] == SUB)
							    {
									if((GetXDistanceFromPlayerToShip(playerid,id) <=50) && (GetYDistanceFromPlayerToShip(playerid,id) <= 10) && (GetYDistanceFromPlayerToShip(playerid,id) <=10))
									{
									    shipid = id;
									    break;
									}
								}
								else
								{
									if((GetXDistanceFromPlayerToShip(playerid,id) <=100) && (GetYDistanceFromPlayerToShip(playerid,id) <=30) && (GetZDistanceFromPlayerToShip(playerid,id) <=30))
									{
									    shipid = id;
									    break;
									}
								}
							}
						}
						if(shipid > -1)
						{
						    if(ShipGroundIsBombedFromPlayer(playerid) || PlayerInfo[playerid][pTeam] == ShipInfo[shipid][Team])
								return GameTextForPlayer(playerid, "~n~ ~n~ ~n~ ~n~ ~r~Can't plant here", 2000, 3);
						    TWPlayerBomb[playerid][bPlanting] = 1;
			    			TWPlayerBomb[playerid][rRepairing] = 0;
						    TWPlayerBomb[playerid][bDefusing] = 0;
							TWPlayerBomb[playerid][bSurfing] = -1;
							SetPlayerArmedWeapon(playerid, 0);
							GetPlayerPos(playerid, TWPlayerBomb[playerid][bpX], TWPlayerBomb[playerid][bpY], TWPlayerBomb[playerid][bpZ]);
							SetPlayerAttachedObjectEx(playerid,6,363,1,0.249998,0.282999,0.087999,96.600006,28.700027,21.999998,1.000000,1.000000,1.000000);
							ApplyAnimation(playerid, "BOMBER","BOM_Plant_Loop",4.0,1,0,0,1,0);
							KillTimer(TWPlayerInfo[playerid][kscTimer]);
							PlayerBombSync(playerid,1,shipid,1,6);
							return 1;
						}
						if(shipid == -1 && PlayerInfo[playerid][InSubmarine] > -1)
						{
							shipid = PlayerInfo[playerid][InSubmarine];
						    if(ShipGroundIsBombedFromPlayer(playerid) || PlayerInfo[playerid][pTeam] == ShipInfo[shipid][Team])
								return GameTextForPlayer(playerid, "~n~ ~n~ ~n~ ~n~ ~r~Can't plant here", 2000, 3);
							TWPlayerBomb[playerid][bPlanting] = 1;
			    			TWPlayerBomb[playerid][rRepairing] = 0;
						    TWPlayerBomb[playerid][bDefusing] = 0;
							TWPlayerBomb[playerid][bSurfing] = -1;
							SetPlayerArmedWeapon(playerid, 0);
							GetPlayerPos(playerid, TWPlayerBomb[playerid][bpX], TWPlayerBomb[playerid][bpY], TWPlayerBomb[playerid][bpZ]);
							SetPlayerAttachedObjectEx(playerid,6,363,1,0.249998,0.282999,0.087999,96.600006,28.700027,21.999998,1.000000,1.000000,1.000000);
							ApplyAnimation(playerid, "BOMBER","BOM_Plant_Loop",4.0,1,0,0,1,0);
							KillTimer(TWPlayerInfo[playerid][kscTimer]);
							PlayerBombSync(playerid,1,shipid,1,6);
							return 1;
						}
						if(!vehicleid && shipid == -1)
						{
							if(GroundIsBombedFromPlayer(playerid))
								return GameTextForPlayer(playerid, "~n~ ~n~ ~n~ ~n~ ~r~Can't plant here", 2000, 3);
						    SetPlayerAttachedObjectEx(playerid,6,363,1,0.249998,0.282999,0.087999,96.600006,28.700027,21.999998,1.000000,1.000000,1.000000);
							ApplyAnimation(playerid, "BOMBER","BOM_Plant_Loop",4.0,1,0,0,1,0);
							TWPlayerBomb[playerid][bPlanting] = 1;
			    			TWPlayerBomb[playerid][rRepairing] = 0;
						    TWPlayerBomb[playerid][bDefusing] = 0;
							TWPlayerBomb[playerid][bSurfing] = -1;
							SetPlayerArmedWeapon(playerid, 0);
							GetPlayerPos(playerid, TWPlayerBomb[playerid][bpX], TWPlayerBomb[playerid][bpY], TWPlayerBomb[playerid][bpZ]);
							KillTimer(TWPlayerInfo[playerid][kscTimer]);
							PlayerBombSync(playerid,2,0,1,6);
						}
					}
				}
				if(!TWPlayerBomb[playerid][bPlanting])
			    {
				    if(RELEASED(KEY_YES))
				    {
						if(TWPlayerBomb[playerid][bDefusing])
						{
			    			TWPlayerBomb[playerid][bDefusing] = 0;
			    			TWPlayerBomb[playerid][rRepairing] = 0;
						    TWPlayerBomb[playerid][bPlanting] = 0;
						    ClearAnimations(playerid);
						    Sync(playerid);
						    GameTextForPlayer(playerid, " ",1000,3);
							KillTimer(TWPlayerInfo[playerid][kscTimer]);
					    }
				    }
			        if(PRESSED(KEY_YES))//defuse
					{
						new player=-1, slot=-1;
						forLoop(i, MAX_PLAYERS)
						{
					    	if(IsPlayerConnected(i) && GetPlayerMode(i) == TW)
					    	{
								forLoop(v, MAX_ENGI_BOMBS)
							 	{
						 	    	if(TWPlayerBomb[i][bcObject][v] > -1)
									{
									    if(GetPlayerVirtualWorld(playerid) == TWPlayerBomb[i][cWorldID][v] && IsPlayerInRangeOfPoint(playerid, 2,TWPlayerBomb[i][bcX][v],TWPlayerBomb[i][bcY][v],TWPlayerBomb[i][bcZ][v]))
									 	{
							       			if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
												ApplyAnimation(playerid, "BOMBER","BOM_Plant_Loop",4.0,1,0,0,1,0);
											SetPlayerArmedWeapon(playerid, 0);
							            	player = i;
										    slot = v;
										    TWPlayerBomb[playerid][bDefusing] = 1;
							    			TWPlayerBomb[playerid][rRepairing] = 0;
										    TWPlayerBomb[playerid][bPlanting] = 0;
										    TWPlayerBomb[playerid][bSurfing] = -1;
										    GetPlayerPos(playerid, TWPlayerBomb[playerid][bpX], TWPlayerBomb[playerid][bpY], TWPlayerBomb[playerid][bpZ]);
											KillTimer(TWPlayerInfo[playerid][kscTimer]);
											PlayerDefuseSync(playerid,player,slot,6);
										    return 1;
										}
									}
							 	    if(TWPlayerBomb[i][bCar][v] > -1 && GetPlayerVirtualWorld(playerid) == GetVehicleVirtualWorld(TWPlayerBomb[i][bCar][v]))
							 		{
							 		    new vehicleid;
										vehicleid = GetClosestVehicle(playerid);
										if(!PlayerToVehicle(playerid, vehicleid, 4.0) && vehicleid != GetPlayerSurfingVehicleID(playerid)) vehicleid = 0;
										if(vehicleid == TWPlayerBomb[i][bCar][v])
									    {
											if(TWPlayerBomb[i][bcObject][v] > -1)
										        return GameTextForPlayer(playerid, "~n~ ~n~ ~n~ ~n~ ~r~mine in interior", 2000, 3);
										    if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
												ApplyAnimation(playerid, "BOMBER","BOM_Plant_Loop",4.0,1,0,0,1,0);
				                            SetPlayerArmedWeapon(playerid, 0);
						            		player = i;
										    slot = v;
					             			if(vehicleid != GetPlayerSurfingVehicleID(playerid))
											{
											    TWPlayerBomb[playerid][bSurfing] = 0;
												GetVehiclePos(vehicleid, TWPlayerBomb[playerid][bvX], TWPlayerBomb[playerid][bvY], TWPlayerBomb[playerid][bvZ]);
												GetPlayerPos(playerid, TWPlayerBomb[playerid][bpX], TWPlayerBomb[playerid][bpY], TWPlayerBomb[playerid][bpZ]);
											}else TWPlayerBomb[playerid][bSurfing] = GetPlayerSurfingVehicleID(playerid);
										    TWPlayerBomb[playerid][bDefusing] = 1;
							    			TWPlayerBomb[playerid][rRepairing] = 0;
										    TWPlayerBomb[playerid][bPlanting] = 0;
										   	KillTimer(TWPlayerInfo[playerid][kscTimer]);
										   	PlayerDefuseSync(playerid,player,slot,6);
										    return 1;
										}
									}
									if(TWPlayerBomb[i][bShip][v] > -1)
									{
								 	    if(GetPlayerVirtualWorld(playerid) == TWPlayerBomb[i][sWorldID][v] && IsPlayerInRangeOfPoint(playerid, 2,TWPlayerBomb[i][bsX][v],TWPlayerBomb[i][bsY][v],TWPlayerBomb[i][bsZ][v]))
									 	{
							       			if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
												ApplyAnimation(playerid, "BOMBER","BOM_Plant_Loop",4.0,1,0,0,1,0);
					                        SetPlayerArmedWeapon(playerid, 0);
							            	player = i;
										    slot = v;
										    TWPlayerBomb[playerid][bDefusing] = 1;
							    			TWPlayerBomb[playerid][rRepairing] = 0;
										    TWPlayerBomb[playerid][bPlanting] = 0;
										    TWPlayerBomb[playerid][bSurfing] = -1;
										    GetPlayerPos(playerid, TWPlayerBomb[playerid][bpX], TWPlayerBomb[playerid][bpY], TWPlayerBomb[playerid][bpZ]);
											KillTimer(TWPlayerInfo[playerid][kscTimer]);
											PlayerDefuseSync(playerid,player,slot,6);
										    return 1;
									    }
									}
									if(TWPlayerBomb[i][bObject][v] > -1)
									{
								 	    if(GetPlayerVirtualWorld(playerid) == TWPlayerBomb[i][WorldID][v] && IsPlayerInRangeOfPoint(playerid, 2,TWPlayerBomb[i][bX][v],TWPlayerBomb[i][bY][v],TWPlayerBomb[i][bZ][v]))
									 	{
							       			if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
												ApplyAnimation(playerid, "BOMBER","BOM_Plant_Loop",4.0,1,0,0,1,0);
					                        SetPlayerArmedWeapon(playerid, 0);
							            	player = i;
										    slot = v;
										    TWPlayerBomb[playerid][bDefusing] = 1;
							    			TWPlayerBomb[playerid][rRepairing] = 0;
										    TWPlayerBomb[playerid][bPlanting] = 0;
										    TWPlayerBomb[playerid][bSurfing] = -1;
										    GetPlayerPos(playerid, TWPlayerBomb[playerid][bpX], TWPlayerBomb[playerid][bpY], TWPlayerBomb[playerid][bpZ]);
											KillTimer(TWPlayerInfo[playerid][kscTimer]);
											PlayerDefuseSync(playerid,player,slot,6);
										    return 1;
									    }
									}
								}
							}
						}
						if(player == -1 && slot == -1)
						    return GameTextForPlayer(playerid, "~n~ ~n~ ~n~ ~n~ ~w~No Mines near", 2000, 3);
					}
				}
			}
		}
	}
   /* if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER && GetVehicleModel(GetPlayerVehicleID(playerid)) == 432)
	{
		if (PRESSED(KEY_FIRE) || PRESSED(KEY_ACTION))
    	{
		    TogglePlayerControllable(playerid,false);
		}
		if (RELEASED(KEY_FIRE) || RELEASED(KEY_ACTION))
    	{
            TogglePlayerControllable(playerid,true);
		}
	}*/

	

	if(PlayerInfo[playerid][PlayerMode] == FFA && PlayerInfo[playerid][Spawned] == 1)
	{
		if(!IsPlayerInAnyVehicle(playerid))
		{
		    if(PRESSED(16))
			{
				new found=0;
				forLoop(i, MAX_FFA_GANGS)
				{
				    if(found == 0)
				    {
						if(GangInfo[i][Exists])
						{
							if(IsPlayerInRangeOfPoint(playerid, 3,GangInfo[i][gOutX],GangInfo[i][gOutY],GangInfo[i][gOutZ]))
							{
								found=i;
								break;
							}
						}
					}
				}
				if(found > 0)
				{
				    if(FFAPlayerInfo[playerid][GangID] != GangInfo[found][ID] && GangInfo[found][Locked] == 1) return GameTextForPlayer(playerid, "~n~ ~n~ ~n~ ~n~ ~r~Door locked", 2000, 3);
			        if(GangInfo[found][AllowedIn]==0)return GameTextForPlayer(playerid, "~n~ ~n~ ~n~ ~n~ ~r~No entrance", 2000, 3);
					SetPlayerPos(playerid,GangInfo[found][gInX],GangInfo[found][gInY],GangInfo[found][gInZ]);
					SetPlayerInterior(playerid,GangInfo[found][InInterior]);
					SetPlayerVirtualWorld(playerid,GangInfo[found][InWorld]);
					SetCameraBehindPlayer(playerid);
					FreezeBeforeObjects(playerid);
					return 1;
				}
				else
				{
				    forLoop(i, MAX_FFA_PROPERTIES)
					{
					    if(found == 0)
					    {
							if(FFAPropertyInfo[i][Exists])
							{
								if(IsPlayerInRangeOfPoint(playerid, 3,FFAPropertyInfo[i][gOutX],FFAPropertyInfo[i][gOutY],FFAPropertyInfo[i][gOutZ]))
								{
									found=i;
									break;
								}
							}
						}
					}
					if(found > 0)
					{
					    if(FFAPropertyInfo[found][AllowedIn]==0)return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} Property doesn't have an entrance.");
						if(FFAPropertyInfo[found][Locked] == 1)
					    {
							if((FFAPropertyInfo[found][OwnerType] == FFA_OWNER_PLAYER && FFAPropertyInfo[found][OwnerID] != PlayerInfo[playerid][ID])
								|| (FFAPropertyInfo[found][OwnerType] == FFA_OWNER_GANG && FFAPlayerInfo[playerid][GangID] > 0 && FFAPropertyInfo[found][OwnerID] != FFAPlayerInfo[playerid][GangID]))
								return SendClientMessage(playerid,red,"{FF0000}Error:{FFFFFF} The door has been locked.");
						}
				        SetPlayerPosEx(playerid,FFAPropertyInfo[found][gInX],FFAPropertyInfo[found][gInY],FFAPropertyInfo[found][gInZ],FFAPropertyInfo[found][gInAng]);
						SetPlayerInterior(playerid,FFAPropertyInfo[found][InInterior]);
						SetPlayerVirtualWorld(playerid,(found+21)*31);
	     				FreezeBeforeObjects(playerid);
						return 1;
					}
				}
				
				//exiting
				found = 0;
				forLoop(i, MAX_FFA_GANGS)
				{
				    if(found == 0)
				    {
						if(GangInfo[i][Exists])
						{
	      					if(IsPlayerInRangeOfPoint(playerid, 3,GangInfo[i][gInX],GangInfo[i][gInY],GangInfo[i][gInZ]) && GetPlayerVirtualWorld(playerid) == GangInfo[i][InWorld])
							{
								found=i;
								break;
							}
						}
					}
				}
				if(found > 0)
				{
				    SetPlayerPos(playerid,GangInfo[found][gOutX],GangInfo[found][gOutY],GangInfo[found][gOutZ]);
					SetPlayerInterior(playerid,GangInfo[found][OutInterior]);
					SetPlayerVirtualWorld(playerid,W_FFA);
					SetCameraBehindPlayer(playerid);
					return 1;
				}
				else
				{
				    forLoop(i, MAX_FFA_PROPERTIES)
					{
					    if(found == 0)
					    {
							if(FFAPropertyInfo[i][Exists])
							{
								if(IsPlayerInRangeOfPoint(playerid, 3,FFAPropertyInfo[i][gInX],FFAPropertyInfo[i][gInY],FFAPropertyInfo[i][gInZ]) && GetPlayerInterior(playerid) == FFAPropertyInfo[i][InInterior] && GetPlayerVirtualWorld(playerid) == ((i+21)*31))
								{
									found=i;
									break;
								}
							}
						}
					}
					if(found > 0)
					{
					    SetPlayerPosEx(playerid,FFAPropertyInfo[found][gOutX],FFAPropertyInfo[found][gOutY],FFAPropertyInfo[found][gOutZ],FFAPropertyInfo[found][gOutAng]);
						SetPlayerInterior(playerid, 0);
						SetPlayerVirtualWorld(playerid,W_FFA);
						return 1;
					}
				}
			}
		}
	}

	if(PlayerInfo[playerid][PlayerMode] == TW || PlayerInfo[playerid][PlayerMode] ==TL)
	{
		if(IsPlayerInAnyVehicle(playerid) && (PlayerInfo[playerid][vmid] > -1))
		{
				new old[MAX_PLAYERS];
				if(PRESSED(KEY_NO)) {
					old[playerid] = PlayerInfo[playerid][bptype];
					PlayerInfo[playerid][bptype] ++;
		            if(PlayerInfo[playerid][bptype] >= sizeof gBombTypes) {
						PlayerInfo[playerid][bptype] = old[playerid];
					}
					new loop_breaker;
					while(gVehicleBombs[PlayerInfo[playerid][vmid]][PlayerInfo[playerid][bptype] + 1] <= 0)
					{
						//printf("loop at 1 (gVehicleBombs[PlayerInfo[playerid][vmid]][PlayerInfo[playerid][bptype] + 1] <= 0), counter val %d",loop_breaker);
						if(breakLoop(++loop_breaker, "1 (gVehicleBombs[PlayerInfo[playerid][vmid]][PlayerInfo[playerid][bptype] + 1] <= 0"))break;
						PlayerInfo[playerid][bptype] ++;
				        if(PlayerInfo[playerid][bptype] >= sizeof gBombTypes) {
							PlayerInfo[playerid][bptype] = old[playerid];
							return 1;
						}
					}
			    	new str[64];
					if(PlayerInfo[playerid][bptype] > 0)
					{
						format(str,64,"%s~n~%d",gBombTypes[PlayerInfo[playerid][bptype]],PlayerInfo[playerid][bombsleft][PlayerInfo[playerid][bptype]]);
						PlayerTextDrawHide(playerid,PlayerInfo[playerid][BombTXT]);
						PlayerTextDrawSetString(playerid, PlayerInfo[playerid][BombTXT], str);
						PlayerTextDrawShow(playerid,PlayerInfo[playerid][BombTXT]);
					}
					else
					{
					    format(str,64,"~n~%s",gBombTypes[PlayerInfo[playerid][bptype]]);
						PlayerTextDrawHide(playerid,PlayerInfo[playerid][BombTXT]);
						PlayerTextDrawSetString(playerid, PlayerInfo[playerid][BombTXT], str);
						PlayerTextDrawShow(playerid,PlayerInfo[playerid][BombTXT]);
					}

			    }
			    if(PRESSED(KEY_YES)) {
		            old[playerid] = PlayerInfo[playerid][bptype];
					PlayerInfo[playerid][bptype] --;
		        	if(PlayerInfo[playerid][bptype] < 0) {
						PlayerInfo[playerid][bptype] = old[playerid];
					}
					new loop_breaker;
					while(gVehicleBombs[PlayerInfo[playerid][vmid]][PlayerInfo[playerid][bptype] + 1] <= 0)
					{
						//printf("loop at 2 (gVehicleBombs[PlayerInfo[playerid][vmid]][PlayerInfo[playerid][bptype] + 1] <= 0), counter val %d",loop_breaker);
						if(breakLoop(++loop_breaker, "2 (gVehicleBombs[PlayerInfo[playerid][vmid]][PlayerInfo[playerid][bptype] + 1] <= 0"))break;
						PlayerInfo[playerid][bptype] --;
			        	if(PlayerInfo[playerid][bptype] < 0) {
							PlayerInfo[playerid][bptype] = old[playerid];
							return 1;
						}
					}
				    new str[64];
				    if(PlayerInfo[playerid][bptype] > 0 )
					{
						format(str,64,"%s~n~%d",gBombTypes[PlayerInfo[playerid][bptype]],PlayerInfo[playerid][bombsleft][PlayerInfo[playerid][bptype]]);
						PlayerTextDrawHide(playerid,PlayerInfo[playerid][BombTXT]);
						PlayerTextDrawSetString(playerid, PlayerInfo[playerid][BombTXT], str);
						PlayerTextDrawShow(playerid,PlayerInfo[playerid][BombTXT]);
					}
					else
					{
					    format(str,64,"~n~%s",gBombTypes[PlayerInfo[playerid][bptype]]);
						PlayerTextDrawHide(playerid,PlayerInfo[playerid][BombTXT]);
						PlayerTextDrawSetString(playerid, PlayerInfo[playerid][BombTXT], str);
						PlayerTextDrawShow(playerid,PlayerInfo[playerid][BombTXT]);
					}
			    }
				if(PRESSED(KEY_HANDBRAKE)) {
					if(IsPlayerAllowedToDropBomb(playerid)) DropBomb(playerid);
					    else GameTextForPlayer(playerid, "~n~ ~n~ ~n~ ~n~ ~r~CANNOT DROP SUPPLIES NOW...", 999, 3);
				}
		}
		if(PRESSED(16))
		{
			if(TWPlayerInfo[playerid][Class] != LEADER &&PlayerInfo[playerid][PlayerMode] == TW)
				EnterExitSubmarine(playerid);
		}
	}

	if (IsPlayerInRangeOfPoint(playerid, 1.0,2732.6028,-1864.0654,1237.2150) && PRESSED(16) && PlayerInfo[playerid][InNevada]> -1)
	{
	    new Float:X, Float:Y, Float:Z, Float:A;
		SetPlayerVirtualWorld(playerid, GetVehicleVirtualWorld(PlayerInfo[playerid][InNevada]));
		GetVehiclePos(PlayerInfo[playerid][InNevada], X, Y, Z);
		GetVehicleZAngle(PlayerInfo[playerid][InNevada], A);
		X += (5.0*floatsin(-(A-200.0), degrees)), Y += (5.0*floatcos(-(A-200.0), degrees));
		SetPlayerInterior(playerid, 0);
		SetPlayerPosEx(playerid, X, Y, Z-0.94, A);
		PlayerInfo[playerid][InNevada] = -1;
		PlayerInfo[playerid][InTank] = -1;
	}

	if (IsPlayerInRangeOfPoint(playerid, 1.0,2655.8062,-1421.8580,1129.4216) && PRESSED(16) && PlayerInfo[playerid][InTank] > -1)
	{
		new Float:X, Float:Y, Float:Z, Float:A;
		SetPlayerVirtualWorld(playerid, GetVehicleVirtualWorld(PlayerInfo[playerid][InTank]));
		GetVehiclePos(PlayerInfo[playerid][InTank], X, Y, Z);
		GetVehicleZAngle(PlayerInfo[playerid][InTank], A);
		SetPlayerInterior(playerid, 0);
		SetPlayerPosEx(playerid, X, Y, Z+3, A);
		PlayerInfo[playerid][InTank] = -1;
		PlayerInfo[playerid][InNevada] = -1;
	}
	return 1;
}
iswheelmodel(modelid) {

    new wheelmodels[17] = {1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1096,1097,1098};

    eforeach(wheelmodels, I) {

        if (modelid == wheelmodels[I])
            return true;

    }

    return false;
}

IllegalCarNitroIde(carmodel) {

    new illegalvehs[29] = { 581, 523, 462, 521, 463, 522, 461, 448, 468, 586, 509, 481, 510, 472, 473, 493, 595, 484, 430, 453, 452, 446, 454, 590, 569, 537, 538, 570, 449 };

    eforeach(illegalvehs, I) {

        if (carmodel == illegalvehs[I])
            return true;

    }

    return false;
}

// assumes player is in a car - make sure it is.
stock illegal_nos_vehicle(PlayerID) {

    new carid = GetPlayerVehicleID(PlayerID);
    new playercarmodel = GetVehicleModel(carid);

    return IllegalCarNitroIde(playercarmodel);

}

stock islegalcarmod(vehicleide, componentid) {

    new modok = false;

    // stereo, hydraulics & nos (1x 2x 3x) are special.
    if((iswheelmodel(componentid)) || (componentid == 1086) || (componentid == 1087) || ((componentid >= 1008) && (componentid <= 1010))) {

        new nosblocker = IllegalCarNitroIde(vehicleide);

        if (!nosblocker)
            modok = true;

    }
	else
	{
        // check if the specified model CAN use this particular mod.
        eforeach(legalmods, I)
		{
            if (legalmods[I][0] == vehicleide) { // first is car IDE

                forLoopV(J, 1, 22)
				{ // start with 1
                    if (legalmods[I][J] == componentid)
                        modok = true;
                }
            }
        }
    }
    return modok;
}

public OnVehicleMod(playerid, vehicleid, componentid)
{
    new vehicleide = GetVehicleModel(vehicleid);
    new modok = islegalcarmod(vehicleide, componentid);

    //if (!modok || !(PlayerInfo[playerid][PlayerMode] == FFA || PlayerInfo[playerid][PlayerMode] == SF))
	if (!modok || GetPlayerInterior(playerid) == 0)
	{
		user_Ban(playerid,-1,"Illegal Modding",true,true,0);
        return 0;
    }
    return 1;
}
//==============================================================================
public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
    new Float:x,Float:y,Float:z;
    GetVehiclePos(vehicleid,x,y,z);
    if(!IsPlayerInRangeOfPoint(playerid,350.0,x,y,z))
    {
        AC_Warnings[playerid][CAR_JACK]++;
        if(AC_Warnings[playerid][CAR_JACK] < 25)
        {
            new reason[50];
        	format(reason,sizeof(reason),"Vehicle: %s (%d)",AC_GetVehicleName(vehicleid),vehicleid);
			ACReport(playerid,"Vehicle Entering",reason);//Counting warnings would be non-sense.
		}
		else
		{
		    user_Ban(playerid,-1,"Vehicle Entering",true,true,0);
			return 1;
		}
	}
	AC_PlayerInfo[playerid][AC_pVehicleEntered]=vehicleid;
    if(PlayerInfo[playerid][PlayerMode] == CO || PlayerInfo[playerid][PlayerMode] == CTF || PlayerInfo[playerid][PlayerMode] == VW || PlayerInfo[playerid][PlayerMode] == TL || PlayerInfo[playerid][PlayerMode] == TW || (PlayerInfo[playerid][PlayerMode] == PTP && PlayerInfo[playerid][pTeam] != NOTEAM))
    {
		if(ispassenger == 0)
		{
		    forLoop(i, MAX_PLAYERS)
		    {
				if(IsPlayerConnected(i) && playerid != i && GetPlayerState(i) == PLAYER_STATE_DRIVER && GetPlayerVehicleID(i) == vehicleid && PlayerInfo[i][pTeam] == PlayerInfo[playerid][pTeam])
				{
	    			GetPlayerPos(playerid,x,y,z);
	    			SetPlayerPos(playerid,0,0,0);
	    			SetPlayerPos(playerid,x,y,z+1);
	    			SetPlayerFacingAngle(playerid, random(360));
	    			SetCameraBehindPlayer(playerid);
				    TogglePlayerControllable(playerid,false);
					TogglePlayerControllable(playerid,true);
				    GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~r~NO TEAM JACKING", 3000, 3);
				}
			}
		}
	}
	if(PlayerInfo[playerid][PlayerMode] == CO && COPlayerInfo[playerid][InJail] == 1 && ServerInfo[COBigPrison] == 0)
	{
	    if (ispassenger != 0)
		{
		    SetPlayerPos(playerid,COCagePlace[COInfo[Map]][1],COCagePlace[COInfo[Map]][2],COCagePlace[COInfo[Map]][3]);
		}
	}
	/*if(PlayerInfo[playerid][PlayerMode] == TRP)
	{
		if (ispassenger != 0)
		{
			if (GetVehicleModel(vehicleid) == 432)
			{
				SetPlayerPosInTank(playerid, vehicleid);
				FreezeBeforeObjects(playerid);
			}
			if (GetVehicleModel(vehicleid) == 553)
			{
				SetPlayerPosInNevada(playerid, vehicleid);
				FreezeBeforeObjects(playerid);
			}
		}
	}*/
	if(PlayerInfo[playerid][PlayerMode] == TW)
	{
		if (ispassenger != 0)
		{
		    if(TWPlayerInfo[playerid][Class] != LEADER)
			{
				if (GetVehicleModel(vehicleid) == 432)
				{
		            SetPlayerWorldBounds(playerid, 999999999.9, -99999999.9, 99999999.9, -99999999.9 );
					SetPlayerPosInTank(playerid, vehicleid);
					FreezeBeforeObjects(playerid);
				}
				if (GetVehicleModel(vehicleid) == 553)
				{
		            SetPlayerWorldBounds(playerid, 999999999.9, -99999999.9, 99999999.9, -99999999.9 );
					SetPlayerPosInNevada(playerid, vehicleid);
					FreezeBeforeObjects(playerid);
				}
			}
		}
		PlayerInfo[playerid][vmid] = GetVehicleStatID(GetVehicleModel(vehicleid));
	    if(PlayerInfo[playerid][vmid] > -1) {
				PlayerInfo[playerid][bptype] = 0;
		}
	}
	if(PlayerInfo[playerid][PlayerMode] == TL)
	{
		PlayerInfo[playerid][vmid] = GetVehicleStatID(GetVehicleModel(vehicleid));
	    if(PlayerInfo[playerid][vmid] > -1) {
				PlayerInfo[playerid][bptype] = 0;
		}
	}
	return 1;
}


stock ShowTankAimForPlayer(playerid)
{
    TextDrawShowForPlayer(playerid,ServerInfo[TankAim]);
}
stock HideTankAimForPlayer(playerid)
{
    TextDrawHideForPlayer(playerid,ServerInfo[TankAim]);
}

//==============================================================================

stock LoadpAtthachedObjectsFromFile(playerid)
{
	//printf("DEBUG CFONTROL LoadpAtthachedObjectsFromFile 1 pid %d",playerid);
	forLoop(i, 10)
	{
	    if(pAttachments[playerid][i][Exists])
			SetPlayerAttachedObjectEx(playerid,i,pAttachments[playerid][i][ModelID],pAttachments[playerid][i][BoneID],pAttachments[playerid][i][pOffsetX],pAttachments[playerid][i][pOffsetY],
				pAttachments[playerid][i][pOffsetZ],pAttachments[playerid][i][pRotX],pAttachments[playerid][i][pRotY],pAttachments[playerid][i][pRotZ],
				pAttachments[playerid][i][pScaleX],pAttachments[playerid][i][pScaleY],pAttachments[playerid][i][pScaleZ]);
	}
	//printf("DEBUG CFONTROL LoadpAtthachedObjectsFromFile 2 pid %d",playerid);
	return 1;
}
public OnPlayerEditAttachedObject( playerid, response, index, modelid, boneid,
                                   Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ,
                                   Float:fRotX, Float:fRotY, Float:fRotZ,
                                   Float:fScaleX, Float:fScaleY, Float:fScaleZ )
{
    SetPlayerAttachedObjectEx(playerid,index,modelid,boneid,fOffsetX,fOffsetY,fOffsetZ,fRotX,fRotY,fRotZ,fScaleX,fScaleY,fScaleZ);
    PlayerInfo[playerid][EditingAttachments] = -2;
    pAttachments[playerid][index][Exists] = 1;
	pAttachments[playerid][index][ModelID] = modelid;
	pAttachments[playerid][index][BoneID] = boneid;
	pAttachments[playerid][index][pOffsetX] = fOffsetX;
	pAttachments[playerid][index][pOffsetY] = fOffsetY;
	pAttachments[playerid][index][pOffsetZ] = fOffsetZ;
	pAttachments[playerid][index][pRotX] = fRotX;
	pAttachments[playerid][index][pRotY] = fRotY;
	pAttachments[playerid][index][pRotZ] = fRotZ;
	pAttachments[playerid][index][pScaleX] = fScaleX;
	pAttachments[playerid][index][pScaleY] = fScaleY;
	pAttachments[playerid][index][pScaleZ] = fScaleZ;
	//printf("DEBUG CFONTROL OnPlayerEditAttachedObject pid %d",playerid);
    return 1;
}
stock RemovePlayerAttachedObjectEx(playerid, index)
{
	//printf("DEBUG CFONTROL RemovePlayerAttachedObjectEx 1 pid %d index %d",playerid, index);
    sAttachments[playerid][index][Exists] = 0;
    RemovePlayerAttachedObject(playerid, index);
	//printf("DEBUG CFONTROL RemovePlayerAttachedObjectEx 2 pid %d index %d",playerid, index);
}
stock SetPlayerAttachedObjectEx(playerid,index,modelid,boneid,
                                   Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ,
                                   Float:fRotX, Float:fRotY, Float:fRotZ,
                                   Float:fScaleX, Float:fScaleY, Float:fScaleZ )
{
    sAttachments[playerid][index][Exists] = 1;
    sAttachments[playerid][index][ModelID] = modelid;
	sAttachments[playerid][index][BoneID] = boneid;
	sAttachments[playerid][index][pOffsetX] = fOffsetX;
	sAttachments[playerid][index][pOffsetY] = fOffsetY;
	sAttachments[playerid][index][pOffsetZ] = fOffsetZ;
	sAttachments[playerid][index][pRotX] = fRotX;
	sAttachments[playerid][index][pRotY] = fRotY;
	sAttachments[playerid][index][pRotZ] = fRotZ;
	sAttachments[playerid][index][pScaleX] = fScaleX;
	sAttachments[playerid][index][pScaleY] = fScaleY;
	sAttachments[playerid][index][pScaleZ] = fScaleZ;

	SetPlayerAttachedObject(playerid,index,modelid,boneid,fOffsetX,fOffsetY,fOffsetZ,fRotX,fRotY,fRotZ,fScaleX,fScaleY,fScaleZ);
	//printf("DEBUG CFONTROL SetPlayerAttachedObjectEx pid %d index %d",playerid, index);
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
	//printf("DEBUG CFONTROL OnPlayerStateChange 1 pid %d ns %d os %d", playerid, newstate, oldstate);
    FullyConnected[playerid]=true;
	/*if(AC_Variables[SPECTATE_HACK] && newstate==PLAYER_STATE_SPECTATING && !PlayerInfo[playerid][NoACCheck] && PlayerInfo[playerid][Level] <= 0)
	    user_Ban(playerid,-1,"Spectate hack", true, true,0);
*/
	if(newstate==PLAYER_STATE_PASSENGER)
	{
		if(PlayerInfo[playerid][wCheck] == 0)
			PlayerInfo[playerid][wCheck] = SetTimerEx("givePlayerWeaponTimer", 500, false, "d", playerid);
        if(GetPlayerWeapon(playerid) == WEAPON_DEAGLE || GetPlayerWeapon(playerid) == WEAPON_SHOTGSPA || GetPlayerWeapon(playerid) == WEAPON_SAWEDOFF)
        {
            SetPlayerArmedWeapon(playerid, 5);
        }
	}
	new vehicleid=GetPlayerVehicleID(playerid);
	if(newstate==PLAYER_STATE_DRIVER)
	{
	    new Float:health;
	    GetVehicleHealth(vehicleid,health);
	    if(health>1000.0)//Prevent innoncent players getting banned because of vehicle used by the cheaters
		    SetVehicleHealth(vehicleid,1000.0);

		if(AC_PlayerInfo[playerid][AC_pVehicleEntered]!=vehicleid && PlayerInfo[playerid][Level] <= 0)
		{
			new used;
			forLoop(i, MAX_PLAYERS)
			{
				if(IsPlayerConnected(i) && !IsPlayerNPC(i) && i!= playerid)
				{
			        if(GetPlayerState(i)==PLAYER_STATE_DRIVER)
			        {
			            if(GetPlayerVehicleID(i)==vehicleid)
			            {
			                used=true;
			                break;
			            }
			        }
				}
			}
			if(used)
			{
				AC_Warnings[playerid][CAR_JACK_HACK]++;
				if(AC_Variables[CAR_JACK_HACK])
				{
				    if(AC_Warnings[playerid][CAR_JACK_HACK]>=2) user_Ban(playerid,-1,"Carjack Hack", true, true,0);
				}
				else
				    ACReport(playerid,"Carjack Hack","no details");
			}
		}
	}

	if(oldstate==PLAYER_STATE_PASSENGER)
	    NoTeleportCheck[playerid]=3;//Do not check position for 3 seconds to prevent lag kick.

	AC_PlayerInfo[playerid][AC_pVehicleEntered]=INVALID_VEHICLE_ID;
	AC_PlayerInfo[playerid][AC_pSpeedhacking]=0;
	AC_PlayerInfo[playerid][AC_pAirbreaking]=0;

	/*if(PlayerInfo[playerid][PlayerMode] == CO || PlayerInfo[playerid][PlayerMode] == CTF || PlayerInfo[playerid][PlayerMode] == TL || PlayerInfo[playerid][PlayerMode] == TW)
    {
		if(newstate == PLAYER_STATE_DRIVER)
		{
		    forLoop(i, MAX_PLAYERS)
		    {
				if(IsPlayerConnected(i) && playerid != i && PlayerInfo[i][pTeam] == PlayerInfo[playerid][pTeam])
				{
				    SetVehicleParamsForPlayer(GetPlayerVehicleID(playerid),i,false,true);
				}
			}
		}
		if(oldstate == PLAYER_STATE_DRIVER)
		{
		
		
		}
	}*/
	if(PlayerInfo[playerid][DisbleSpeedo] == 0)
 	{
		if(newstate == PLAYER_STATE_DRIVER)
		{
		    if(PlayerInfo[playerid][DisbleSpeedo] == 0)
			{
			    if(PlayerInfo[playerid][SpeedoObject] != - 1)DestroyTheDynamicObject(PlayerInfo[playerid][SpeedoObject]);
			    if(PlayerInfo[playerid][RacePlaceObject] != -1)DestroyTheDynamicObject(PlayerInfo[playerid][RacePlaceObject]);
	            PlayerInfo[playerid][SpeedoObject] = CreateDynamicObject(19483, 202.14845, 1755.43835, -17.83983,   0, 0, 0.00000,-1, -1, playerid);
			    if((PlayerInfo[playerid][PlayerMode] == DM && DMMAPInfo[Type] == DM_TYPE_RACE) || PlayerInfo[playerid][PlayerMode] == TRP)
					PlayerInfo[playerid][RacePlaceObject] = CreateDynamicObject(19483, 202.14845, 1755.43835, -17.83983,   0, 0, 0.00000,-1, -1, playerid);
			    PlayerInfo[playerid][SpeedoReset] = 1;
		    }
	    }
		if(oldstate == PLAYER_STATE_DRIVER)
		{
		    if(PlayerInfo[playerid][SpeedoObject] != -1)DestroyTheDynamicObject(PlayerInfo[playerid][SpeedoObject]);
		    PlayerInfo[playerid][SpeedoObject] = -1;
		    if(PlayerInfo[playerid][RacePlaceObject] != -1)DestroyTheDynamicObject(PlayerInfo[playerid][RacePlaceObject]);
            PlayerInfo[playerid][RacePlaceObject] = -1;
		}
	}
    if(PlayerInfo[playerid][PlayerMode] == TRP && PlayerInfo[playerid][Spawned] == 1)
	{
	    if(RPGetVehicleID(GetPlayerVehicleID(playerid)) != -1)
	    {
			new i = RPGetVehicleID(GetPlayerVehicleID(playerid));
	        if(newstate == PLAYER_STATE_DRIVER)
			{
                RPLowerVehicleFuel(playerid,random(9));
			}
		    if(oldstate == PLAYER_STATE_DRIVER)
			{
				new Float:x,Float:y,Float:z,Float:ang, Float:hp;
		        GetVehicleHealth(RPVehicles[i][ID], hp);
		        GetVehicleZAngle(RPVehicles[i][ID], ang);
		        GetVehiclePos(RPVehicles[i][ID], x, y, z);
		        RPVehicles[i][cPosX] = floatround(x);
				RPVehicles[i][cPosY] = floatround(y);
				RPVehicles[i][cPosZ] = floatround(z);
				RPVehicles[i][cAngle]= floatround(ang);
		        RPVehicles[i][Health] = floatround(hp);
			}
		}
	}
	if(PlayerInfo[playerid][PlayerMode] == DM)
	{
		if(oldstate == PLAYER_STATE_DRIVER /*&& DMMAPInfo[Type] != DM_TYPE_RACE*/)
		{
		    if(PlayerInfo[playerid][Vehicle] != -1 && DMMAPInfo[dStarted] == 1 && DMPlayerInfo[playerid][Alive] == 1 && PlayerInfo[playerid][Spawned] == 1)
		    {
		        if(!(DMMAPInfo[Type] == DM_TYPE_RACE && DMPlayerInfo[playerid][rFinished] == 1))
					DMMapDisqualifyPlayer(playerid, 1 ,1);
			}
		}
	}
	if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
	{
	    forLoop(x, MAX_PLAYERS)
		{
		    if(!IsPlayerConnected(x) || IsPlayerNPC(x))continue;
			if(GetPlayerState(x) == PLAYER_STATE_SPECTATING && PlayerInfo[x][Level] > 0 && PlayerInfo[x][SpecID] == playerid)
			{
		        ToggleThePlayerSpectating(x, 1);
		        PlayerSpectateVehicle(x, GetPlayerVehicleID(playerid));
			}
			if(GetPlayerState(x) == PLAYER_STATE_SPECTATING && PlayerInfo[playerid][PlayerMode] == STUNT && PlayerInfo[x][PlayerMode] == STUNT && SFPlayerInfo[x][SpecID] == playerid)
			{
		        ToggleThePlayerSpectating(x, 1);
		        PlayerSpectateVehicle(x, GetPlayerVehicleID(playerid));
			}
		}
		if(IsPlayerInPlane(playerid) && PlayerInfo[playerid][PlayerMode] != TRP)GiveWeapon(playerid,WEAPON_PARACHUTE,1);
	}
	if(newstate == PLAYER_STATE_ONFOOT)
	{
	    forLoop(x, MAX_PLAYERS)
		{
	    	if(!IsPlayerConnected(x) || IsPlayerNPC(x))continue;
			if(GetPlayerState(x) == PLAYER_STATE_SPECTATING && PlayerInfo[x][Level] > 0 && PlayerInfo[x][SpecID] == playerid)
			{
	        	ToggleThePlayerSpectating(x, 1);
		        PlayerSpectatePlayer(x, playerid);
			}
			if(GetPlayerState(x) == PLAYER_STATE_SPECTATING && PlayerInfo[playerid][PlayerMode] == STUNT && PlayerInfo[x][PlayerMode] == STUNT && SFPlayerInfo[x][SpecID] == playerid)
			{
	        	ToggleThePlayerSpectating(x, 1);
		        PlayerSpectatePlayer(x, playerid);
			}
		}
	}
	/*if(IsPlayerNPC(playerid))
	{
		if (newstate == PLAYER_STATE_DRIVER)
		{
		    new veh = GetVehicleModel(GetPlayerVehicleID(playerid));
			if (veh == 476|| veh == 512 || veh == 513 || veh == 553)
			{
				PlayerInfo[playerid][vmid] = GetVehicleStatID(GetVehicleModel(GetPlayerVehicleID(playerid)));
			    if(PlayerInfo[playerid][vmid] > -1) {
						PlayerInfo[playerid][bptype] = 0;
				}
				if(IsPlayerNPC(playerid) && GetPlayerVirtualWorld(playerid)==W_TL)
				{
					PlayerInfo[playerid][bombsleft][5] = 5;
				}
			}
		}
	}*/

    if(PlayerInfo[playerid][PlayerMode] == STUNT)
	{
    	if (newstate == PLAYER_STATE_ONFOOT)
		{
		    if(SFPlayerInfo[playerid][Event] > 0 && EventInfo[getTheEventID(SFPlayerInfo[playerid][Event])][Started] == 1)
			{
		        if(EventInfo[getTheEventID(SFPlayerInfo[playerid][Event])][NoExitVehs] == 1)
		        {
					new string[228],id=getTheEventID(SFPlayerInfo[playerid][Event]);
					if(EventInfo[id][State] == 0) EventInfo[id][PlaceTaken][SFPlayerInfo[playerid][EventSpot]]=0;
					SFPlayerInfo[playerid][Event]=0;
					format(string,sizeof(string),"{FF0000}MINIGAME:{FFFFFF} %s(ID:%d) has been disqualified from the %s(ID:%d) event. Players in event: %d.",PlayerInfo[playerid][Name],playerid,EventInfo[id][eName],EventInfo[id][ID],InEventCount(EventInfo[id][ID]));
					SendMessageToMode(STUNT,red1, string);
					format(string, sizeof(string), "[MINIGAME] %s[%d] has been disqualified from the '%s' event! Players in event: %d.",PlayerInfo[playerid][Name],playerid,EventInfo[id][eName],InEventCount(EventInfo[id][ID]));
					db_SaveChat(-1, STUNT,string);
			        forLoop(i, MAX_PLAYERS)
					{
						if(IsPlayerConnected(i) && PlayerInfo[i][PlayerMode] == STUNT && SFPlayerInfo[i][BetpID][id] == playerid)
						{
							GiveThePlayerMoney(i, -SFPlayerInfo[i][BetAmount][id]);
						    format(string,sizeof(string),"BET:{FFFFFF} %s(ID:%d) has lost $%d on his bet.",PlayerInfo[i][Name],i,SFPlayerInfo[i][BetAmount][id]);
							SendMessageToMode(STUNT,red1, string);
							format(string, sizeof(string), "[BET] %s[%d] has lost $%d on his bet.",PlayerInfo[i][Name],i,SFPlayerInfo[i][BetAmount][id]);
							db_SaveChat(-1, STUNT,string);
						    SFPlayerInfo[i][BetpID][id]=-1;
						    SFPlayerInfo[i][BetAmount][id]=0;
						    SFPlayerInfo[i][BetsLost]++;
						}
						if(IsPlayerConnected(i) && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][PlayerMode] == STUNT && !IsPlayerNPC(i) && GetPlayerState(i) == PLAYER_STATE_SPECTATING && SFPlayerInfo[i][SpecID] == playerid)
						{
                            SF_AdvanceSpectate(i);
						}
					}
					EventCheckForPlayers(id);
					A_SpawnPlayer(playerid);
				}
			}
		}
	}
	if(PlayerInfo[playerid][PlayerMode] == TW || PlayerInfo[playerid][PlayerMode] == TL)
	{
		if (newstate == PLAYER_STATE_DRIVER)
		{
	     	PlayerInfo[playerid][vmid] = GetVehicleStatID(GetVehicleModel(GetPlayerVehicleID(playerid)));
		    if(PlayerInfo[playerid][vmid] > -1) {
					PlayerInfo[playerid][bptype] = 0;
			}
			new veh = GetVehicleModel(GetPlayerVehicleID(playerid));
			if (veh == 476|| veh == 512 || veh == 513 || veh == 553)
			{
			    new str[64];
				format(str,64,"~n~%s",gBombTypes[PlayerInfo[playerid][bptype]]);
				PlayerTextDrawHide(playerid,PlayerInfo[playerid][BombTXT]);
				PlayerTextDrawSetString(playerid, PlayerInfo[playerid][BombTXT], str);
				PlayerTextDrawShow(playerid,PlayerInfo[playerid][BombTXT]);
    			TextDrawShowForPlayer(playerid,ServerInfo[Bomber_TD]);
			}
		}
		if(oldstate == PLAYER_STATE_PASSENGER)
		{
		    if(PlayerInfo[playerid][InDodo] > -1)
		    {
		        PlayerInfo[playerid][InDodo] = -1;
				RemovePlayerWeapon(playerid, WEAPON_MINIGUN);
		    }
		}
		if(newstate == PLAYER_STATE_PASSENGER)
		{
			new veh = GetVehicleModel(GetPlayerVehicleID(playerid));
			if (veh == 593 || veh == 511 || veh == 560)
			{
                forLoop(i, MAX_PLAYERS) if(IsPlayerConnected(i) && playerid != i && GetPlayerState(i) == PLAYER_STATE_DRIVER && GetPlayerVehicleID(i) == GetPlayerVehicleID(playerid) && PlayerInfo[playerid][pTeam] == PlayerInfo[i][pTeam])
				{
					PlayerInfo[playerid][InDodo] = i;
					GiveWeapon(playerid,WEAPON_MINIGUN,500);
				}
			}
		}
		if(oldstate == PLAYER_STATE_DRIVER)
		{
            forLoop(i, MAX_PLAYERS) if(IsPlayerConnected(i) && playerid != i)
			{
		        if(PlayerInfo[i][InDodo] == playerid)
			    {
			        PlayerInfo[i][InDodo] = -1;
					RemovePlayerWeapon(i, WEAPON_MINIGUN);
			    }
			}
			forLoop(i, MAX_PLAYERS) if(IsPlayerConnected(i) && playerid != i)
			{
		        if(PlayerInfo[i][OnMiniGunCar] == playerid)
			    {
			        PlayerInfo[i][OnMiniGunCar] = -1;
					RemovePlayerWeapon(i, WEAPON_MINIGUN);
			    }
			}
		}
	}
	if(newstate == PLAYER_STATE_PASSENGER || newstate == PLAYER_STATE_DRIVER)
	{
	    if(PlayerInfo[playerid][PlayerMode] == CO && COPlayerInfo[playerid][InJail] == 1 && ServerInfo[COBigPrison] == 0)
			SetPlayerPos(playerid,COCagePlace[COInfo[Map]][1],COCagePlace[COInfo[Map]][2],COCagePlace[COInfo[Map]][3]);
		if(PlayerInfo[playerid][PlayerMode] == CO)
		{
		    if(PlayerInfo[playerid][EnteredZone] == COInfo[AreaID])
		    {
		        PlayerInfo[playerid][EnteredZone] = -1;
		 		COInfo[BeingReleased]=0;
	 			GameTextForPlayer(playerid," ",1000,6);
		 		new str[126];
	        	format(str,126,"{33FF33}NEWS:{FFFFFF} %s failed to release the prisoners!",PlayerInfo[playerid][Name]);
	        	SendMessageToMode(CO,white, str);
				format(str, sizeof(str), "[NEWS] %s failed to release the prisoners!",PlayerInfo[playerid][Name]);
				db_SaveChat(-1, CO,str);
				PlayerInfo[playerid][lCountDown]=-1;
		    }
		}
		if(PlayerInfo[playerid][PlayerMode] == TL)
		{
		    if(PlayerInfo[playerid][EnteredZone] == TLInfo[AreaID])
		    {
		        PlayerInfo[playerid][EnteredZone] = -1;
		 		TLInfo[BeingBombed]=0;
	 			GameTextForPlayer(playerid," ",1000,6);
		 		new str[126];
		        format(str,126,"{33FF33}WAR NEWS:{FFFFFF} %s failed to bomb the base!",PlayerInfo[playerid][Name]);
	        	SendMessageToMode(TL,white,str);
			  	format(str, sizeof(str), "[WAR NEWS] %s failed to bomb the base!",PlayerInfo[playerid][Name]);
				db_SaveChat(-1, TL,str);
				PlayerInfo[playerid][lCountDown]=-1;
		    }
		}
	}
    if(PlayerInfo[playerid][PlayerMode] == TW)
	{
		if (newstate == PLAYER_STATE_DRIVER)
		{
		    if(TWPlayerInfo[playerid][Class] == PILOT)
		    {
				new veh = GetVehicleModel(GetPlayerVehicleID(playerid));
				if (veh == 476|| veh == 512 || veh == 513 || veh == 553)
				{
				    new str[64];
					format(str,64,"~n~%s",gBombTypes[PlayerInfo[playerid][bptype]]);
					PlayerTextDrawHide(playerid,PlayerInfo[playerid][BombTXT]);
					PlayerTextDrawSetString(playerid, PlayerInfo[playerid][BombTXT], str);
					PlayerTextDrawShow(playerid,PlayerInfo[playerid][BombTXT]);
    				TextDrawShowForPlayer(playerid,ServerInfo[Bomber_TD]);
				}
			}
		}
		if (newstate == PLAYER_STATE_DRIVER)
		{
		    if(TWPlayerInfo[playerid][Class] == LEADER || TWPlayerInfo[playerid][Class] == VICE || TWPlayerInfo[playerid][Class] == BODYGUARD)
		    {
				new veh = GetVehicleModel(GetPlayerVehicleID(playerid));
				if (veh == 512 || veh == 513)
				{
					new Float:x, Float:y, Float:z;
					GetPlayerPos(playerid,x,y,z);
					SendClientMessage(playerid,red1, "{FF0000}Notice:{FFFFFF} You are not a pilot, you can not fly this bomber.");
					SetPlayerPos(playerid,x,y,z+3);
					GameTextForPlayer(playerid, " ",20, 4);
				}
			}
		}
		if (newstate == PLAYER_STATE_DRIVER)
		{
		    if(TWPlayerInfo[playerid][Class] == LEADER || TWPlayerInfo[playerid][Class] == SOLDIER || TWPlayerInfo[playerid][Class] == VICE || TWPlayerInfo[playerid][Class] == BODYGUARD || TWPlayerInfo[playerid][Class] == ENGINEER || TWPlayerInfo[playerid][Class] == MEDIC)
		    {
				new veh = GetVehicleModel(GetPlayerVehicleID(playerid));
				if (veh == 476 || veh == 553)
				{
					new Float:x, Float:y, Float:z;
					GetPlayerPos(playerid,x,y,z);
					SendClientMessage(playerid,red1, "{FF0000}Notice:{FFFFFF} You are not a pilot, you can not fly this bomber.");
					SetPlayerPos(playerid,x,y,z+3);
					GameTextForPlayer(playerid, " ",20, 4);
				}
			}
		}
		if (newstate == PLAYER_STATE_DRIVER)
		{
		    if(TWPlayerInfo[playerid][Class] == PILOT || TWPlayerInfo[playerid][Class] == LEADER || TWPlayerInfo[playerid][Class] == VICE || TWPlayerInfo[playerid][Class] == BODYGUARD)
		    {
				new veh = GetVehicleModel(GetPlayerVehicleID(playerid));
				if (veh == 432)
				{
					new Float:x, Float:y, Float:z;
					GetPlayerPos(playerid,x,y,z);
					SendClientMessage(playerid,red1,"{FF0000}Notice:{FFFFFF} You are not a soldier, you can not drive tanks.");
					SetPlayerPos(playerid,x,y,z+3);
				}
			}
		}
	}
    if(newstate == PLAYER_STATE_DRIVER)
	{
		new m=GetVehicleModel(GetPlayerVehicleID(playerid));
		if(m == 432)
			ShowTankAimForPlayer(playerid);
	}
    if (oldstate == PLAYER_STATE_DRIVER)
	{
		PlayerTextDrawHide(playerid,PlayerInfo[playerid][BombTXT]);
    	TextDrawHideForPlayer(playerid,ServerInfo[Bomber_TD]);
    	HideTankAimForPlayer(playerid);
	}
	return 1;
}

public OnRconLoginAttempt( ip[], password[], success)
{
	new string[158], player = ReturnPlayerIDFromIP(ip);
	format(string,sizeof string,"[RCON]{FFFFFF} IP:%s(%s) failed to rcon login. AKA: %s",ip,PlayerInfo[player][Name],db_GetAKAByIP(ip));
	db_SaveForAdminText(string);
	MessageToAllAdmins(red1,string);
	user_Ban(player,-1,"Rcon Login",true,false,1);
	return 1;
}
//==============================================================================
public OnPlayerExitVehicle(playerid, vehicleid)
{
	new veh = GetVehicleModel(GetPlayerVehicleID(playerid));
	new Float:VHealth;
	GetVehicleHealth(GetPlayerVehicleID(playerid),VHealth);
	if(veh == 476 || veh == 512 || veh == 513 || veh == 520)
	{
	    if(VHealth < 250)
	    {
			new Float:x,Float:y,Float:z;
			GetPlayerPos(playerid,x,y,z);
			SetPlayerPos(playerid,x,y,z+150);
			GiveWeapon(playerid,WEAPON_PARACHUTE,1);
			SetVehicleHealth(GetPlayerVehicleID(playerid),230);
			CreateExplosionEx(GetPlayerVirtualWorld(playerid), x,y,z, 10, 20, 51, true,-1);
		}
	}

    PlayerTextDrawHide(playerid,PlayerInfo[playerid][BombTXT]);
    TextDrawHideForPlayer(playerid,ServerInfo[Bomber_TD]);
    HideTankAimForPlayer(playerid);
	//printf("DEBUG CFONTROL OnPlayerExitVehicle");
	return 1;
}
stock StartSpectate(playerid, specplayerid)
{
	//printf("DEBUG CFONTROL StartSpectate pid %d", playerid);
	forLoop(x, MAX_PLAYERS) {
	    if(GetPlayerState(x) == PLAYER_STATE_SPECTATING && PlayerInfo[x][Level] > 0 && PlayerInfo[x][SpecID] == playerid) {
	       AdvanceSpectate(x);
		}
	}
	SetPlayerInterior(playerid,GetPlayerInterior(specplayerid));
	ToggleThePlayerSpectating(playerid, 1);
	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(specplayerid));
	if(IsPlayerInAnyVehicle(specplayerid))
		PlayerSpectateVehicle(playerid, GetPlayerVehicleID(specplayerid));
	else
	 	PlayerSpectatePlayer(playerid, specplayerid);
    PlayerInfo[playerid][SpecID] = specplayerid;
	new string[100], Float:hp, Float:ar;
	GetPlayerHealth(specplayerid, hp);
	GetPlayerArmour(specplayerid, ar);
	format(string,sizeof(string),"~n~~n~~n~~n~~n~~n~~n~~n~~w~%s - id:%d~n~hp:%0.1f ar:%0.1f $%d", PlayerInfo[specplayerid][Name],specplayerid,hp,ar,GetThePlayerMoney(specplayerid) );
	GameTextForPlayer(playerid,string,25000,3);
	return 1;
}
stock StopSpectate(playerid)
{
	//printf("DEBUG CFONTROL StopSpectate pid %d", playerid);
	ToggleThePlayerSpectating(playerid, 0);
	PlayerInfo[playerid][SpecID] = -1;
	SpawnPlayer(playerid);
	return 1;
}

stock findSpectateNext(playerid, id)
{
	new player = -1;
	forLoop(x, MAX_PLAYERS)
	{
        if(IsPlayerConnected(x) && x != playerid && !IsPlayerNPC(x) && x > id)
		{
			if(GetPlayerState(x) == PLAYER_STATE_SPECTATING || (GetPlayerState(x) != 1 && GetPlayerState(x) != 2 && GetPlayerState(x) != 3))
				continue;
            player = x;
			break;
		}
	}
	if(player == -1)
	{
	 	forLoop(x, MAX_PLAYERS)
		{
	        if(IsPlayerConnected(x) && x != playerid && !IsPlayerNPC(x))
			{
				if(GetPlayerState(x) == PLAYER_STATE_SPECTATING || (GetPlayerState(x) != 1 && GetPlayerState(x) != 2 && GetPlayerState(x) != 3))
					continue;
	            player = x;
				break;
			}
		}
	}
	return player;
}

stock findSpectatePrev(playerid, id)
{
	new player = -1;
	forLoopR(x, MAX_PLAYERS-1, -1)
	{
        if(IsPlayerConnected(x) && x != playerid && !IsPlayerNPC(x) && x < id)
		{
			if(GetPlayerState(x) == PLAYER_STATE_SPECTATING || (GetPlayerState(x) != 1 && GetPlayerState(x) != 2 && GetPlayerState(x) != 3))
				continue;
            player = x;
			break;
		}
	}
	if(player == -1)
	{
		forLoopR(x, MAX_PLAYERS-1, -1)
		{
	        if(IsPlayerConnected(x) && x != playerid && !IsPlayerNPC(x))
			{
				if(GetPlayerState(x) == PLAYER_STATE_SPECTATING || (GetPlayerState(x) != 1 && GetPlayerState(x) != 2 && GetPlayerState(x) != 3))
					continue;
	            player = x;
				break;
			}
		}
	}
	return player;
}
stock AdvanceSpectate(playerid)
{
    if(WConnectedPlayers() < 2) return StopSpectate(playerid);
	if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING && PlayerInfo[playerid][Level] > 0 && PlayerInfo[playerid][SpecID] > -1)
	{
		printf("DEBUG CFONTROL AdvanceSpectate 1 pid %d sid %d conn %d",playerid,PlayerInfo[playerid][SpecID],WConnectedPlayers());

		new player = -1;
		player = findSpectateNext(playerid, PlayerInfo[playerid][SpecID]);
		if(player != -1 && IsPlayerConnected(player))
			StartSpectate(playerid, player);
		
		printf("DEBUG CFONTROL AdvanceSpectate 2 pid %d sid %d conn %d",playerid,PlayerInfo[playerid][SpecID],WConnectedPlayers());
	}
	return 1;

}

stock ReverseSpectate(playerid)
{
    if(WConnectedPlayers() < 2) return StopSpectate(playerid);
	if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING && PlayerInfo[playerid][Level] > 0 && PlayerInfo[playerid][SpecID] > -1)
	{
		printf("DEBUG CFONTROL ReverseSpectate 1 pid %d sid %d conn %d",playerid,PlayerInfo[playerid][SpecID],WConnectedPlayers());

		new player = -1;
		player = findSpectatePrev(playerid, PlayerInfo[playerid][SpecID]);
		if(player == -1 || !IsPlayerConnected(player))StopSpectate(playerid);
		else StartSpectate(playerid, player);
		
		printf("DEBUG CFONTROL ReverseSpectate 2 pid %d sid %d conn %d",playerid,PlayerInfo[playerid][SpecID],WConnectedPlayers());
	}
	return 1;
}

//==============================================================================
stock CarDeleter(vehicleid)
{
    forLoop(i,MAX_PLAYERS)
	{
        new Float:X,Float:Y,Float:Z;
    	if(IsPlayerInVehicle(i, vehicleid)) {
    	    RemovePlayerFromVehicle(i);
    	    GetPlayerPos(i,X,Y,Z);
        	SetPlayerPos(i,X,Y+3,Z);
	    }
	    SetVehicleParamsForPlayer(vehicleid,i,0,1);
	}
    DestroyVehicle(vehicleid);
}

stock ToggleDoors(vehicleid, toggle)
{
	//printf("DEBUG CFONTROL ToggleDoors 1");
	new engine, lights, alarm, doors, bonnet, boot, objective;
	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	SetVehicleParamsEx(vehicleid, engine, lights, alarm, toggle, bonnet, boot, objective);
	//printf("DEBUG CFONTROL ToggleDoors 2");
}
public OnVehicleSpawn(vehicleid)
{
	//printf("DEBUG CFONTROL OnVehicleSpawn 1 vid %d world %d",vehicleid, GetVehicleVirtualWorld(vehicleid));
	forLoop(i, MAX_VW_VEHICLES)
    {
		if(VWVehicles[i][Exists] == 1 && VWVehicles[i][ID] == vehicleid)
	    {
    		SetVehicleVirtualWorld(vehicleid, VWVehicles[i][posWorld]);
    	}
    }
	forLoop(i, RP_MAX_VEHICLES)
	{
		if(RPVehicles[i][Exists] == 1 && RPVehicles[i][ID] == vehicleid)
	    {
	        RPVehicles[i][Exists] = 0;
	        CarDeleter(vehicleid);
	        return 1;
	    }
    }
	forLoop(i,MAX_PLAYERS)
	{
        if(vehicleid==PlayerInfo[i][Vehicle])
		{
	        PlayerInfo[i][Vehicle]=-1;
			CarDeleter(vehicleid);
	        return 1;
        }
	}
    forLoop(id, MAX_SHIPS)
	{
		if(ShipInfo[id][sHP] <= 0 && ShipInfo[id][Exists])
		{
		    if(ShipInfo[id][Type] == SHIP)
		    {
			    for (new i = 0; i < MAX_SHIP_VEHS; i++)
				{
				    if(vehicleid==ShipInfo[id][Vehicles][i])
				    {
						SetVehicleVirtualWorld(ShipInfo[id][Vehicles][i],1091);
	        			return 1;
					}
				}
			}
		}
	}

	forLoop(i, MAX_PLAYERS)
	{
		if (vehicleid == PlayerInfo[i][InNevada])
		{
			new Float:burnx, Float:burny, Float:burnz;
			GetPlayerPos(i,burnx, burny, burnz);
			CreateExplosionEx(GetPlayerVirtualWorld(i), burnx, burny , burnz, 10.0, 50, 51, true,-1);
		    SetHealth(i, 0.0);
			SendClientMessage(i,red1,"{FF0000}Notice:{FFFFFF} The plane has exploded, and everyone inside has died.");
		    PlayerInfo[i][InNevada]=-1;
	        return 1;
		}
		if (vehicleid == PlayerInfo[i][InTank])
		{
			new Float:burnx, Float:burny, Float:burnz;
			GetPlayerPos(i,burnx, burny, burnz);
			CreateExplosionEx(GetPlayerVirtualWorld(i), burnx, burny , burnz, 10.0, 50, 51, true,-1);
		    SetHealth(i, 0.0);
			SendClientMessage(i,red1,"{FF0000}Notice:{FFFFFF} The tank has exploded, and everyone inside has died.");
		    PlayerInfo[i][InTank] = -1;
	        return 1;
		}
	}
	FixTWVehicleFromMine(vehicleid, 0);
	//printf("DEBUG CFONTROL OnVehicleSpawn 2 vid %d world %d",vehicleid, GetVehicleVirtualWorld(vehicleid));
	return 1;
}


//==================== [ Jail & Freeze ]========================================
stock JailPlayer(player1)
{
	//TogglePlayerControllable(player1,true);
	SetPlayerPos(player1,153.6959,-1951.3164,47.8750);
	SetPlayerWorldBounds(player1, 999999999.9, -99999999.9, 99999999.9, -99999999.9 );
	SetPlayerInterior(player1,0);
	ResetWeapons(player1);
	SetHealth(player1,100000);
	SetPlayerVirtualWorld(player1, player1+604*2);
	//printf("DEBUG CFONTROL JailPlayer");
}
forward JailRelease(player1);
public JailRelease(player1)
{
	PlayerInfo[player1][Jailed] = 0;
	SetPlayerInterior(player1,0);
	A_SpawnPlayer(player1);
    new string[128];
	format(string,sizeof(string),"{FF0000}[UNJAIL]{FFFFFF} %s(ID:%d) has been unjailed!", PlayerInfo[player1][Name],player1);
	SendMessageToAll(false, red1, string);
	format(string, sizeof(string), "[UNJAIL] %s(ID:%d) has been unjailed!",PlayerInfo[player1][Name],player1);
	db_SaveForAdminText(string);
	db_SaveChat(-1, PlayerInfo[player1][PlayerMode],string);
	//printf("DEBUG CFONTROL JailRelease");
}

//------------------------------------------------------------------------------
forward UnFreezeMe(player1);
public UnFreezeMe(player1)
{
	TogglePlayerControllable(player1,true);
	PlayerInfo[player1][Frozen] = 0;
	new string[128];
	format(string,sizeof(string),"{FF0000}[UNFREEZE]{FFFFFF} %s(ID:%d) has been unfrozen.", PlayerInfo[player1][Name],player1);
	SendMessageToAll(false, red1, string);
	format(string, sizeof(string), "[UNFREEZE] %s(ID:%d) has been unfrozen.",PlayerInfo[player1][Name],player1);
	db_SaveForAdminText(string);
	db_SaveChat(-1, PlayerInfo[player1][PlayerMode],string);
	//printf("DEBUG CFONTROL UnFreezeMe");
}
forward UnMuteMe(player1);
public UnMuteMe(player1)
{
	PlayerInfo[player1][Muted] = 0;
	new string[128];
	format(string,sizeof(string),"{FF0000}[UNMUTE]{FFFFFF} %s(ID:%d) has been voiced.", PlayerInfo[player1][Name],player1);
	SendMessageToAll(false, red1, string);
	format(string, sizeof(string), "[UNMUTE] %s(ID:%d) has been voiced.",PlayerInfo[player1][Name],player1);
	db_SaveForAdminText(string);
	db_SaveChat(-1, PlayerInfo[player1][PlayerMode],string);
}
forward UnCMDMe(player1);
public UnCMDMe(player1)
{
	PlayerInfo[player1][NoCMD] = 0;
	new string[128];
	format(string,sizeof(string),"{FF0000}[NO CMD]{FFFFFF} %s(ID:%d) can now use CMDs.", PlayerInfo[player1][Name],player1);
	SendMessageToAll(false, red1, string);
	format(string, sizeof(string), "[NO CMD] %s (ID:%d) can now use CMDs.",PlayerInfo[player1][Name],player1);
	db_SaveForAdminText(string);
	db_SaveChat(-1, PlayerInfo[player1][PlayerMode],string);
}
//============================ [ Timers ]=======================================

forward PingKick();
public PingKick()
{
	if(ServerInfo[MaxPing] != 0)
	{
	    PingPos++; if(PingPos >= PING_MAX_EXCEEDS) PingPos = 0;
		forLoop(i, MAX_PLAYERS)
		{
		    if(!IsPlayerConnected(i) || IsPlayerNPC(i))continue;

			PlayerInfo[i][pPing][PingPos] = GetPlayerPing(i);

		    if(GetPlayerPing(i) > ServerInfo[MaxPing])
			{
				if(PlayerInfo[i][PingCount] == 0) PlayerInfo[i][PingTime] = TimeStamp();

	   			PlayerInfo[i][PingCount]++;
				if(TimeStamp() - PlayerInfo[i][PingTime] > PING_TIMELIMIT)
				{
	    			PlayerInfo[i][PingTime] = TimeStamp();
					PlayerInfo[i][PingCount] = 1;
				}
				else if(PlayerInfo[i][PingCount] >= PING_MAX_EXCEEDS)
				{
				    if(ServerInfo[LobbyKick] == 0)
				    {
					    if(PlayerInfo[i][Spawned] == 1)
					    {
					        switch(PlayerInfo[i][PlayerMode])
					        {
					            case DM, ZO, GK, CO, TL, CTF, VW, PJ, TW, FFA, PTP, TRP:
					            {
					    			new string[128];
									SetPlayerMode(i, STUNT, true, true);
									format(string,sizeof(string),"{FF0000}[HIGH PING]{FFFFFF} %s has been moved to Stunt and Fun. Reason: High ping", PlayerInfo[i][Name]);
				  		    		SendMessageToAll(false, red1,string);
					            }
					            case STUNT:
					            {
					                if(SFPlayerInfo[i][Event] > 0)
					                {
						                QuitEvent(i,1);
									 	A_SpawnPlayer(i);
								 	}
					            }
							}
						}
					}
					else
					{
						user_Kick(i,-1,"Very High Ping",true,true);
  		    		}
				}
			}
		}
	}

}


//==========================[ Server Info  ]====================================

stock WConnectedPlayers()
{
	//printf("DEBUG CFONTROL WConnectedPlayers 1");
	new Connected;
	forLoop(i, MAX_PLAYERS) if(IsPlayerConnected(i) && !IsPlayerNPC(i)) Connected++;
	//printf("DEBUG CFONTROL WConnectedPlayers 2");
	return Connected;
}


stock JailedPlayers()
{
	//printf("DEBUG CFONTROL JailedPlayers 1");
	new JailedCount;
	forLoop(i, MAX_PLAYERS) if(IsPlayerConnected(i) && PlayerInfo[i][Jailed] > 0) JailedCount++;
	//printf("DEBUG CFONTROL JailedPlayers 2");
	return JailedCount;
}

stock FrozenPlayers()
{
	//printf("DEBUG CFONTROL FrozenPlayers 1");
	new FrozenCount;
	forLoop(i, MAX_PLAYERS) if(IsPlayerConnected(i) && PlayerInfo[i][Frozen] > 0) FrozenCount++;
	//printf("DEBUG CFONTROL FrozenPlayers 2");
	return FrozenCount;
}

stock MutedPlayers()
{
	//printf("DEBUG CFONTROL MutedPlayers 1");
	new Count;
	forLoop(i, MAX_PLAYERS) if(IsPlayerConnected(i) && PlayerInfo[i][Muted] > 0) Count++;
	//printf("DEBUG CFONTROL MutedPlayers 2");
	return Count;
}

stock InVehCount()
{
	//printf("DEBUG CFONTROL InVehCount 1");
	new InVeh;
	forLoop(i, MAX_PLAYERS) if(IsPlayerConnected(i) && IsPlayerInAnyVehicle(i)) InVeh++;
	//printf("DEBUG CFONTROL InVehCount 2");
	return InVeh;
}
stock OnBikeCount()
{
	//printf("DEBUG CFONTROL OnBikeCount 1");
	new BikeCount;
	forLoop(i, MAX_PLAYERS) if(IsPlayerConnected(i) && IsPlayerInAnyVehicle(i)) {
		new LModel = GetVehicleModel(GetPlayerVehicleID(i));
		switch(LModel)
		{
			case 448,461,462,463,468,471,509,510,521,522,523,581,586:  BikeCount++;
		}
	}
	//printf("DEBUG CFONTROL OnBikeCount 2");
	return BikeCount;
}

stock InCarCount()
{
	//printf("DEBUG CFONTROL InCarCount 1");
	new PInCarCount;
	forLoop(i, MAX_PLAYERS) {
		if(IsPlayerConnected(i) && IsPlayerInAnyVehicle(i)) {
			new LModel = GetVehicleModel(GetPlayerVehicleID(i));
			switch(LModel)
			{
				case 448,461,462,463,468,471,509,510,521,522,523,581,586: {}
				default: PInCarCount++;
			}
		}
	}
	//printf("DEBUG CFONTROL InCarCount 2");
	return PInCarCount;
}
stock ModeCount(mode)
{
	//printf("DEBUG CFONTROL ModeCount 1");
	new aCount=0;
	forLoop(i, MAX_PLAYERS) if(IsPlayerConnected(i) && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][PlayerMode] == mode && !IsPlayerNPC(i))aCount++;
	//printf("DEBUG CFONTROL ModeCount 2");
	return aCount;
}

stock AllyCount()
{
	//printf("DEBUG CFONTROL AllyCount 1");
	new aCount=0;
	forLoop(i, MAX_PLAYERS) if(IsPlayerConnected(i) && PlayerInfo[i][pTeam] == ALLIES && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][PlayerMode] == TW && !IsPlayerNPC(i))aCount++;
	//printf("DEBUG CFONTROL AllyCount 2");
	return aCount;
}
stock AxisCount()
{
	//printf("DEBUG CFONTROL AxisCount 1");
	new axCount=0;
	forLoop(i, MAX_PLAYERS) if(IsPlayerConnected(i) && PlayerInfo[i][pTeam] == AXIS && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][PlayerMode] == TW && !IsPlayerNPC(i))axCount++;
	//printf("DEBUG CFONTROL AxisCount 2");
	return axCount;
}

stock RedCountCTF()
{
	new aCount=0;
	forLoop(i, MAX_PLAYERS) if(IsPlayerConnected(i) && PlayerInfo[i][pTeam] == RED && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][PlayerMode] == CTF && !IsPlayerNPC(i))aCount++;
	return aCount;
}
stock BlueCountCTF()
{
	new aCount=0;
	forLoop(i, MAX_PLAYERS) if(IsPlayerConnected(i) && PlayerInfo[i][pTeam] == BLUE && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][PlayerMode] == CTF && !IsPlayerNPC(i))aCount++;
	return aCount;
}

stock ZombieCountZO()
{
	new aCount=0;
	forLoop(i, MAX_PLAYERS) if(IsPlayerConnected(i) && PlayerInfo[i][pTeam] == ZOMBIE && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][PlayerMode] == ZO && !IsPlayerNPC(i))aCount++;
	return aCount;
}
stock HumanCountZO()
{
	new aCount=0;
	forLoop(i, MAX_PLAYERS) if(IsPlayerConnected(i) && PlayerInfo[i][pTeam] == HUMAN && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][PlayerMode] == ZO && !IsPlayerNPC(i))aCount++;
	return aCount;
}

stock AllyCountTL()
{
	new aCount=0;
	forLoop(i, MAX_PLAYERS) if(IsPlayerConnected(i) && PlayerInfo[i][pTeam] == ALLIES && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][PlayerMode] == TL && !IsPlayerNPC(i))aCount++;
	return aCount;
}
stock AxisCountTL()
{
	new axCount=0;
	forLoop(i, MAX_PLAYERS) if(IsPlayerConnected(i) && PlayerInfo[i][pTeam] == AXIS && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][PlayerMode] == TL && !IsPlayerNPC(i))axCount++;
	return axCount;
}

stock TeamCountPTP(team)
{
	new aCount=0;
	forLoop(i, MAX_PLAYERS) if(IsPlayerConnected(i) && PlayerInfo[i][pTeam] == team && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][PlayerMode] == PTP && !IsPlayerNPC(i))aCount++;
	return aCount;
}

stock TeamCountVW(team)
{
	new aCount=0;
	forLoop(i, MAX_PLAYERS) if(IsPlayerConnected(i) && PlayerInfo[i][pTeam] == team && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][PlayerMode] == VW && !IsPlayerNPC(i))aCount++;
	return aCount;
}

stock ClassCountPTP(pclass)
{
	new aCount=0;
	forLoop(i, MAX_PLAYERS) if(IsPlayerConnected(i) && PTPPlayerInfo[i][Class] == pclass && PlayerInfo[i][Spawned] == 1 && GetPlayerState(i) != PLAYER_STATE_WASTED && PlayerInfo[i][PlayerMode] == PTP && !IsPlayerNPC(i))aCount++;
	return aCount;
}

stock CopCountCO()
{
	new aCount=0;
	forLoop(i, MAX_PLAYERS) if(IsPlayerConnected(i) && PlayerInfo[i][pTeam] == COP && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][PlayerMode] == CO && !IsPlayerNPC(i))aCount++;
	return aCount;
}
stock COConnectedPlayers()
{
	new Connected;
	forLoop(i, MAX_PLAYERS) if(IsPlayerConnected(i) && !IsPlayerNPC(i) && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][PlayerMode] == CO) Connected++;
	return Connected;
}
stock CriminalOutJailCountCO(outin)
{
	new axCount=0;
	forLoop(i, MAX_PLAYERS) if(IsPlayerConnected(i) && PlayerInfo[i][pTeam] == CRIMINAL  && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][PlayerMode] == CO && COPlayerInfo[i][InJail] == outin && !IsPlayerNPC(i))axCount++;
	return axCount;
}
stock CriminalCountCO()
{
	new axCount=0;
	forLoop(i, MAX_PLAYERS) if(IsPlayerConnected(i) && PlayerInfo[i][pTeam] == CRIMINAL && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][PlayerMode] == CO && !IsPlayerNPC(i))axCount++;
	return axCount;
}

stock FFAGangCount()
{
    new gangs;
	forLoop(id, MAX_FFA_GANGS)
	{
		if(GangInfo[id][Exists])
		    gangs++;
	}
	return gangs;
}
stock FFAPropertyCount()
{
    new properties;
	forLoop(id, MAX_FFA_PROPERTIES)
	{
		if(FFAPropertyInfo[id][Exists])
		    properties++;
	}
	return properties;
}

stock AdminCount()
{
	new warCount;
	forLoop(i, MAX_PLAYERS) if(IsPlayerConnected(i) && PlayerInfo[i][Level] >= 1 && PlayerInfo[i][HideAdmin] == 0 && PlayerInfo[i][Registered] && PlayerInfo[i][LoggedIn])	warCount++;
	return warCount;
}

stock VIPCount()
{
	new warCount;
	forLoop(i, MAX_PLAYERS) if(IsPlayerConnected(i) && PlayerInfo[i][VIP]== 1 && PlayerInfo[i][Registered] && PlayerInfo[i][LoggedIn])	warCount++;
	return warCount;
}
/////////////////////////===================
stock pLeeaderCount(u)
{
	new warCount;
	forLoop(i, MAX_PLAYERS) if(IsPlayerConnected(i) && i!= u && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][pTeam] == PlayerInfo[u][pTeam] && TWPlayerInfo[i][Class] == LEADER && TWPlayerInfo[i][Country] == TWPlayerInfo[u][Country] && PlayerInfo[i][PlayerMode] == TW && GetPlayerState(i) != PLAYER_STATE_WASTED && !IsPlayerNPC(i))warCount++;
	return warCount;
}
stock pViceLeeaderCount(u)
{
	new warCount;
	forLoop(i, MAX_PLAYERS) if(IsPlayerConnected(i) && i!= u && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][pTeam] == PlayerInfo[u][pTeam] && TWPlayerInfo[i][Class] == VICE && TWPlayerInfo[i][Country] == TWPlayerInfo[u][Country] && PlayerInfo[i][PlayerMode] == TW && GetPlayerState(i) != PLAYER_STATE_WASTED && !IsPlayerNPC(i))warCount++;
	return warCount;
}
stock PlayerNotLeaderCount(u)
{
	new warCount;
	forLoop(i, MAX_PLAYERS) if(IsPlayerConnected(i) && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][pTeam] != PlayerInfo[u][pTeam] && TWPlayerInfo[i][Class] == LEADER && PlayerInfo[i][PlayerMode] == TW && !IsPlayerNPC(i))warCount++;
	return warCount;
}
stock PlayerCountryLeaderCount(u)
{
	new warCount;
	forLoop(i, MAX_PLAYERS) if(IsPlayerConnected(i) && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][pTeam] == PlayerInfo[u][pTeam] && TWPlayerInfo[i][Country] == TWPlayerInfo[u][Country] && TWPlayerInfo[i][Class] == LEADER && PlayerInfo[i][PlayerMode] == TW && GetPlayerState(i) != PLAYER_STATE_WASTED && !IsPlayerNPC(i))warCount++;
	return warCount;
}
stock PlayerCountryPlayerCount(u)
{
	new warCount;
	forLoop(i, MAX_PLAYERS) if(IsPlayerConnected(i) && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][pTeam] == PlayerInfo[u][pTeam] && TWPlayerInfo[i][Country] == TWPlayerInfo[u][Country] && PlayerInfo[i][PlayerMode] == TW && !IsPlayerNPC(i))warCount++;
	return warCount;
}
stock PlayerCountryViceLeaderCount(u)
{
	new warCount;
	forLoop(i, MAX_PLAYERS) if(IsPlayerConnected(i) && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][pTeam] == PlayerInfo[u][pTeam] && TWPlayerInfo[i][Country] == TWPlayerInfo[u][Country] && TWPlayerInfo[i][Class] == VICE && PlayerInfo[i][PlayerMode] == TW && GetPlayerState(i) != PLAYER_STATE_WASTED && !IsPlayerNPC(i))warCount++;
	return warCount;
}
stock PlayerCountrySpyCount(u)
{
	new warCount;
	forLoop(i, MAX_PLAYERS) if(IsPlayerConnected(i) && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][pTeam] == PlayerInfo[u][pTeam] && TWPlayerInfo[i][Country] == TWPlayerInfo[u][Country] && TWPlayerInfo[i][Class] == SPY && PlayerInfo[i][VIP] ==0 && PlayerInfo[i][PlayerMode] == TW && !IsPlayerNPC(i))warCount++;
	return warCount;
}
stock PlayerCountryGuardCount(u)
{
	new warCount;
	forLoop(i, MAX_PLAYERS) if(IsPlayerConnected(i) && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][pTeam] == PlayerInfo[u][pTeam] && TWPlayerInfo[i][Country] == TWPlayerInfo[u][Country] && TWPlayerInfo[i][Class] == BODYGUARD && PlayerInfo[i][VIP] ==0 && PlayerInfo[i][PlayerMode] == TW && !IsPlayerNPC(i))warCount++;
	return warCount;
}
///////////////////
stock AxisSpyCount()
{
	new warCount;
	forLoop(i, MAX_PLAYERS) if(IsPlayerConnected(i) && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][pTeam] == AXIS && TWPlayerInfo[i][Class] == SPY && PlayerInfo[i][PlayerMode] == TW && !IsPlayerNPC(i))warCount++;
	return warCount;
}
stock AllySpyCount()
{
	new warCount;
	forLoop(i, MAX_PLAYERS) if(IsPlayerConnected(i) && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][pTeam] == ALLIES && TWPlayerInfo[i][Class] == SPY && PlayerInfo[i][PlayerMode] == TW && !IsPlayerNPC(i))warCount++;
	return warCount;
}
stock AllyLeeaderCount()
{
	new warCount;
	forLoop(i, MAX_PLAYERS) if(IsPlayerConnected(i) && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][pTeam] == ALLIES && TWPlayerInfo[i][Class] == LEADER && PlayerInfo[i][PlayerMode] == TW && !IsPlayerNPC(i))warCount++;
	return warCount;
}
stock AxisLeeaderCount()
{
	new warCount;
	forLoop(i, MAX_PLAYERS) if(IsPlayerConnected(i) && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][pTeam] == AXIS && TWPlayerInfo[i][Class] == LEADER && PlayerInfo[i][PlayerMode] == TW && !IsPlayerNPC(i))warCount++;
	return warCount;
}

stock AllyViceLeeaderCount()
{
	new warCount;
	forLoop(i, MAX_PLAYERS) if(IsPlayerConnected(i) && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][pTeam] == ALLIES && TWPlayerInfo[i][Class] == VICE && PlayerInfo[i][PlayerMode] == TW && !IsPlayerNPC(i))warCount++;
	return warCount;
}
stock AxisViceLeeaderCount()
{
	new warCount;
	forLoop(i, MAX_PLAYERS) if(IsPlayerConnected(i) && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][pTeam] == AXIS && TWPlayerInfo[i][Class] == VICE && PlayerInfo[i][PlayerMode] == TW && !IsPlayerNPC(i))warCount++;
	return warCount;
}
stock AxisMedicCount()
{
	new warCount;
	forLoop(i, MAX_PLAYERS) if(IsPlayerConnected(i) && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][pTeam] == AXIS && TWPlayerInfo[i][Class] == MEDIC && PlayerInfo[i][PlayerMode] == TW && !IsPlayerNPC(i))warCount++;
	return warCount;
}
stock AxisEngineerCount()
{
	new warCount;
	forLoop(i, MAX_PLAYERS) if(IsPlayerConnected(i) && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][pTeam] == AXIS && TWPlayerInfo[i][Class] == ENGINEER && PlayerInfo[i][PlayerMode] == TW && !IsPlayerNPC(i))warCount++;
	return warCount;
}

stock AllyMedicCount()
{
	new warCount;
	forLoop(i, MAX_PLAYERS) if(IsPlayerConnected(i) && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][pTeam] == ALLIES && TWPlayerInfo[i][Class] == MEDIC && PlayerInfo[i][PlayerMode] == TW && !IsPlayerNPC(i))warCount++;
	return warCount;
}
stock AllyEngineerCount()
{
	new warCount;
	forLoop(i, MAX_PLAYERS) if(IsPlayerConnected(i) && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][pTeam] == ALLIES && TWPlayerInfo[i][Class] == ENGINEER && PlayerInfo[i][PlayerMode] == TW && !IsPlayerNPC(i))warCount++;
	return warCount;
}

stock AxisBodyGuardCount()
{
	new warCount;
	forLoop(i, MAX_PLAYERS) if(IsPlayerConnected(i) && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][pTeam] == AXIS && TWPlayerInfo[i][Class] == BODYGUARD && PlayerInfo[i][PlayerMode] == TW && !IsPlayerNPC(i))warCount++;
	return warCount;
}
stock AllyBodyGuardCount()
{
	new warCount;
	forLoop(i, MAX_PLAYERS) if(IsPlayerConnected(i) && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][pTeam] == ALLIES && TWPlayerInfo[i][Class] == BODYGUARD && PlayerInfo[i][PlayerMode] == TW && !IsPlayerNPC(i))warCount++;
	return warCount;
}
stock LoadSFCars()
{
	new stuntcars[9];
	stuntcars[0]=AddStaticVehicleEx(522,1753.8944,-2563.5608,13.1204,285.4462,80,106,110); // sf cars
	stuntcars[1]=AddStaticVehicleEx(522,1752.7941,-2561.8733,13.1205,311.0306,38,66,110); //
	stuntcars[2]=AddStaticVehicleEx(522,1750.2939,-2561.8079,13.1199,4.8575,24,0,110); //
	stuntcars[3]=AddStaticVehicleEx(522,1750.2939,-2561.8079,13.1199,4.8575,69,3,110); //
	stuntcars[4]=AddStaticVehicleEx(468,1750.7173,-2568.3364,13.2159,222.1473,108,77,110); //
	stuntcars[5]=AddStaticVehicleEx(471,1747.7073,-2564.1948,13.0314,30.9244,61,110,110); //
	stuntcars[6]=AddStaticVehicleEx(444,1760.7532,-2573.1704,13.9270,2.9261,60,24,110); //
	stuntcars[7]=AddStaticVehicleEx(411,1769.4286,-2570.7727,13.2964,21.6398,66,108,110); //
	stuntcars[8]=AddStaticVehicleEx(411,1773.7504,-2570.3513,13.2739,15.6687,27,7,110); //
	forLoop(car,9)
    {
    	SetVehicleVirtualWorld(stuntcars[car],W_STUNT);
    }

}
stock LoadFFACars()
{
	new ffacars[24];
	ffacars[0]=AddStaticVehicleEx(520,1981.6008,-2474.0669,14.4741,106.1380,0,0,120); // ffa car
	ffacars[1]=AddStaticVehicleEx(425,1971.8912,-2521.1777,14.1779,357.7619,0,0,120); //
	ffacars[2]=AddStaticVehicleEx(425,1950.0260,-2521.2273,14.4622,0.8858,0,0,120); //
	ffacars[3]=AddStaticVehicleEx(425,1992.8876,-2520.6675,14.1760,356.2524,0,0,120); //
	ffacars[4]=AddStaticVehicleEx(592,2067.1541,-2493.6699,15.4630,89.7516,2,1,120); //
	ffacars[5]=AddStaticVehicleEx(487,1999.2056,-2439.8804,13.7224,83.5661,1,2,120); //
	ffacars[6]=AddStaticVehicleEx(487,1983.2473,-2431.7773,13.7235,107.8971,5,1,120); //
	ffacars[7]=AddStaticVehicleEx(520,1983.7114,-2455.2566,14.2705,87.7759,0,0,120); //
	ffacars[8]=AddStaticVehicleEx(437,1928.0510,-2521.1755,13.6768,3.8099,88,3,120); //
	ffacars[9]=AddStaticVehicleEx(476,1911.3881,-2516.0618,14.3246,65.1784,99,3,120); //
	ffacars[10]=AddStaticVehicleEx(476,1855.7061,-2517.4036,14.3218,356.9127,99,3,120); //
	ffacars[11]=AddStaticVehicleEx(520,1961.0920,-2548.4568,14.2701,0.2940,0,0,120); //
	ffacars[12]=AddStaticVehicleEx(520,1938.7703,-2547.4744,14.2677,355.0300,0,0,120); //
	ffacars[13]=AddStaticVehicleEx(425,1984.2622,-2546.5767,14.1760,4.8685,0,0,120); //
	ffacars[14]=AddStaticVehicleEx(425,1999.5848,-2547.5598,14.7028,355.2358,0,0,120); //
	ffacars[15]=AddStaticVehicleEx(432,2018.7990,-2546.4722,13.5543,4.8164,0,0,120); //
	ffacars[16]=AddStaticVehicleEx(432,2031.0066,-2546.8091,13.6173,4.5068,0,0,120); //
	ffacars[17]=AddStaticVehicleEx(432,2016.9274,-2531.6206,13.5512,4.1825,0,0,120); //
	ffacars[18]=AddStaticVehicleEx(432,2030.2422,-2531.7734,13.5548,4.9008,0,0,120); //
	ffacars[19]=AddStaticVehicleEx(578,2039.8567,-2454.7681,14.1732,90.1106,132,132,120); //
	ffacars[20]=AddStaticVehicleEx(568,2041.3267,-2460.4375,13.4108,91.5288,0,0,120); //
	ffacars[21]=AddStaticVehicleEx(513,1984.6233,-2419.2874,14.0917,102.9743,3,1,120); //
	ffacars[22]=AddStaticVehicleEx(537,1957.4905,-1953.7500,15.2742,90.0000,1,1,120); //
	ffacars[23]=AddStaticVehicleEx(432,2025.5625,-2557.1960,13.5543,3.5410,0,0,120); //
	forLoop(car,24)
		SetVehicleVirtualWorld(ffacars[car],W_FFA);

}


stock FFAFlashGZ(zone, gang)
{
	if(gang == 0)
    	GangZoneFlashFor(FFA,FFAGangZones[zone][gZone], 0xFFFF00AA);
	else
    	GangZoneFlashFor(FFA,FFAGangZones[zone][gZone], GangInfo[getFFAGangID(gang)][Color]);
}
stock FFAStopFlashGZ(zone)
{
	GangZoneStopFlashFor(FFA,FFAGangZones[zone][gZone]);
}
stock UpdateFFATreasures(playerid)
{
    new string[50];
	format(string,sizeof(string),"Treasures: %d/%d",FFAPlayerInfo[playerid][Treasures],MAX_FFA_TREASURES);
	PlayerTextDrawSetString(playerid,FFAPlayerInfo[playerid][TXT_Treasures], string);
}
stock UpgradeFFARanks(playerid)
{
    new string[190];
	//printf("DEBUG CFONTROL UpgradeFFARanks 1");
	//treasures
	if (FFAPlayerInfo[playerid][Treasures] >= 20)
	{
	    if(FFAPlayerInfo[playerid][TreasureRank] < 1)
	    {
			FFAPlayerInfo[playerid][TreasureRank] = 1;
			format(string,sizeof(string),"{FF0000}FFA:{FFFFFF} %s(ID:%d) just unlocked Treasure Rank: {FF0000}%s.",PlayerInfo[playerid][Name],playerid,FFARankNamesTreasure[FFAPlayerInfo[playerid][TreasureRank]]);
			SendMessageToMode(FFA,red1, string);
			format(string, sizeof(string), "[FFA] %s(ID:%d) just unlocked Treasure Rank: %s.",PlayerInfo[playerid][Name],playerid,FFARankNamesTreasure[FFAPlayerInfo[playerid][TreasureRank]]);
			db_SaveChat(-1, FFA,string);
		}
	}
	if (FFAPlayerInfo[playerid][Treasures] >= 40)
	{
	    if(FFAPlayerInfo[playerid][TreasureRank] < 2)
	    {
			FFAPlayerInfo[playerid][TreasureRank] = 2;
			format(string,sizeof(string),"{FF0000}FFA:{FFFFFF} %s(ID:%d) just unlocked Treasure Rank: {FF0000}%s.",PlayerInfo[playerid][Name],playerid,FFARankNamesTreasure[FFAPlayerInfo[playerid][TreasureRank]]);
			SendMessageToMode(FFA,red1, string);
			format(string, sizeof(string), "[FFA] %s(ID:%d) just unlocked Treasure Rank: %s.",PlayerInfo[playerid][Name],playerid,FFARankNamesTreasure[FFAPlayerInfo[playerid][TreasureRank]]);
			db_SaveChat(-1, FFA,string);
		}
	}
	if (FFAPlayerInfo[playerid][Treasures] >= 60)
	{
	    if(FFAPlayerInfo[playerid][TreasureRank] < 3)
	    {
			FFAPlayerInfo[playerid][TreasureRank] = 3;
			format(string,sizeof(string),"{FF0000}FFA:{FFFFFF} %s(ID:%d) just unlocked Treasure Rank: {FF0000}%s.",PlayerInfo[playerid][Name],playerid,FFARankNamesTreasure[FFAPlayerInfo[playerid][TreasureRank]]);
			SendMessageToMode(FFA,red1, string);
			format(string, sizeof(string), "[FFA] %s(ID:%d) just unlocked Treasure Rank: %s.",PlayerInfo[playerid][Name],playerid,FFARankNamesTreasure[FFAPlayerInfo[playerid][TreasureRank]]);
			db_SaveChat(-1, FFA,string);
		}
	}
	if (FFAPlayerInfo[playerid][Treasures] >= 80)
	{
	    if(FFAPlayerInfo[playerid][TreasureRank] < 4)
	    {
			FFAPlayerInfo[playerid][TreasureRank] = 4;
			format(string,sizeof(string),"{FF0000}FFA:{FFFFFF} %s(ID:%d) just unlocked Treasure Rank: {FF0000}%s.",PlayerInfo[playerid][Name],playerid,FFARankNamesTreasure[FFAPlayerInfo[playerid][TreasureRank]]);
			SendMessageToMode(FFA,red1, string);
			format(string, sizeof(string), "[FFA] %s(ID:%d) just unlocked Treasure Rank: %s.",PlayerInfo[playerid][Name],playerid,FFARankNamesTreasure[FFAPlayerInfo[playerid][TreasureRank]]);
			db_SaveChat(-1, FFA,string);
		}
	}
	if (FFAPlayerInfo[playerid][Treasures] >= 90)
	{
	    if(FFAPlayerInfo[playerid][TreasureRank] < 5)
	    {
			FFAPlayerInfo[playerid][TreasureRank] = 5;
			format(string,sizeof(string),"{FF0000}FFA:{FFFFFF} %s(ID:%d) just unlocked Treasure Rank: {FF0000}%s.",PlayerInfo[playerid][Name],playerid,FFARankNamesTreasure[FFAPlayerInfo[playerid][TreasureRank]]);
			SendMessageToMode(FFA,red1, string);
			format(string, sizeof(string), "[FFA] %s(ID:%d) just unlocked Treasure Rank: %s.",PlayerInfo[playerid][Name],playerid,FFARankNamesTreasure[FFAPlayerInfo[playerid][TreasureRank]]);
			db_SaveChat(-1, FFA,string);
		}
	}
	if (FFAPlayerInfo[playerid][Treasures] >= 102)
	{
	    if(FFAPlayerInfo[playerid][TreasureRank] < 6)
	    {
			FFAPlayerInfo[playerid][TreasureRank] = 6;
			format(string,sizeof(string),"{FF0000}FFA:{FFFFFF} %s(ID:%d) just unlocked Treasure Rank: {FF0000}%s.",PlayerInfo[playerid][Name],playerid,FFARankNamesTreasure[FFAPlayerInfo[playerid][TreasureRank]]);
			SendMessageToMode(FFA,red1, string);
			format(string, sizeof(string), "[FFA] %s(ID:%d) just unlocked Treasure Rank: %s.",PlayerInfo[playerid][Name],playerid,FFARankNamesTreasure[FFAPlayerInfo[playerid][TreasureRank]]);
			db_SaveChat(-1, FFA,string);
		}
	}


    //captures
	if (FFAPlayerInfo[playerid][Captures] >= 380)
	{
	    if(FFAPlayerInfo[playerid][CaptureRank] < 1)
	    {
			FFAPlayerInfo[playerid][CaptureRank] = 1;
			format(string,sizeof(string),"{FF0000}FFA:{FFFFFF} %s(ID:%d) just unlocked Capture Rank: {FF0000}%s.",PlayerInfo[playerid][Name],playerid,FFARankNamesCapture[FFAPlayerInfo[playerid][CaptureRank]]);
			SendMessageToMode(FFA,red1, string);
			format(string, sizeof(string), "[FFA] %s(ID:%d) just unlocked Capture Rank: %s.",PlayerInfo[playerid][Name],playerid,FFARankNamesCapture[FFAPlayerInfo[playerid][CaptureRank]]);
			db_SaveChat(-1, FFA,string);
		}
	}
	if (FFAPlayerInfo[playerid][Captures] >= 680)
	{
	    if(FFAPlayerInfo[playerid][CaptureRank] < 2)
	    {
			FFAPlayerInfo[playerid][CaptureRank] = 2;
			format(string,sizeof(string),"{FF0000}FFA:{FFFFFF} %s(ID:%d) just unlocked Capture Rank: {FF0000}%s.",PlayerInfo[playerid][Name],playerid,FFARankNamesCapture[FFAPlayerInfo[playerid][CaptureRank]]);
			SendMessageToMode(FFA,red1, string);
			format(string, sizeof(string), "[FFA] %s(ID:%d) just unlocked Capture Rank: %s.",PlayerInfo[playerid][Name],playerid,FFARankNamesCapture[FFAPlayerInfo[playerid][CaptureRank]]);
			db_SaveChat(-1, FFA,string);
		}
	}
	if (FFAPlayerInfo[playerid][Captures] >= 880)
	{
	    if(FFAPlayerInfo[playerid][CaptureRank] < 3)
	    {
			FFAPlayerInfo[playerid][CaptureRank] = 3;
			format(string,sizeof(string),"{FF0000}FFA:{FFFFFF} %s(ID:%d) just unlocked Capture Rank: {FF0000}%s.",PlayerInfo[playerid][Name],playerid,FFARankNamesCapture[FFAPlayerInfo[playerid][CaptureRank]]);
			SendMessageToMode(FFA,red1, string);
			format(string, sizeof(string), "[FFA] %s(ID:%d) just unlocked Capture Rank: %s.",PlayerInfo[playerid][Name],playerid,FFARankNamesCapture[FFAPlayerInfo[playerid][CaptureRank]]);
			db_SaveChat(-1, FFA,string);
		}
	}
	if (FFAPlayerInfo[playerid][Captures] >= 1280)
	{
	    if(FFAPlayerInfo[playerid][CaptureRank] < 4)
	    {
			FFAPlayerInfo[playerid][CaptureRank] = 4;
			format(string,sizeof(string),"{FF0000}FFA:{FFFFFF} %s(ID:%d) just unlocked Capture Rank: {FF0000}%s.",PlayerInfo[playerid][Name],playerid,FFARankNamesCapture[FFAPlayerInfo[playerid][CaptureRank]]);
			SendMessageToMode(FFA,red1, string);
			format(string, sizeof(string), "[FFA] %s(ID:%d) just unlocked Capture Rank: %s.",PlayerInfo[playerid][Name],playerid,FFARankNamesCapture[FFAPlayerInfo[playerid][CaptureRank]]);
			db_SaveChat(-1, FFA,string);
		}
	}
	if (FFAPlayerInfo[playerid][Captures] >= 1780)
	{
	    if(FFAPlayerInfo[playerid][CaptureRank] < 5)
	    {
			FFAPlayerInfo[playerid][CaptureRank] = 5;
			format(string,sizeof(string),"{FF0000}FFA:{FFFFFF} %s(ID:%d) just unlocked Capture Rank: {FF0000}%s.",PlayerInfo[playerid][Name],playerid,FFARankNamesCapture[FFAPlayerInfo[playerid][CaptureRank]]);
			SendMessageToMode(FFA,red1, string);
			format(string, sizeof(string), "[FFA] %s(ID:%d) just unlocked Capture Rank: %s.",PlayerInfo[playerid][Name],playerid,FFARankNamesCapture[FFAPlayerInfo[playerid][CaptureRank]]);
			db_SaveChat(-1, FFA,string);
		}
	}
	if (FFAPlayerInfo[playerid][Captures] >= 3000)
	{
	    if(FFAPlayerInfo[playerid][CaptureRank] < 6)
	    {
			FFAPlayerInfo[playerid][CaptureRank] = 6;
			format(string,sizeof(string),"{FF0000}FFA:{FFFFFF} %s(ID:%d) just unlocked Capture Rank: {FF0000}%s.",PlayerInfo[playerid][Name],playerid,FFARankNamesCapture[FFAPlayerInfo[playerid][CaptureRank]]);
			SendMessageToMode(FFA,red1, string);
			format(string, sizeof(string), "[FFA] %s(ID:%d) just unlocked Capture Rank: %s.",PlayerInfo[playerid][Name],playerid,FFARankNamesCapture[FFAPlayerInfo[playerid][CaptureRank]]);
			db_SaveChat(-1, FFA,string);
		}
	}


//kills
	if (FFAPlayerInfo[playerid][Kills] >= 380)
	{
	    if(FFAPlayerInfo[playerid][KillsRank] < 1)
	    {
			FFAPlayerInfo[playerid][KillsRank] = 1;
			format(string,sizeof(string),"{FF0000}FFA:{FFFFFF} %s(ID:%d) just unlocked Kills Rank: {FF0000}%s.",PlayerInfo[playerid][Name],playerid,FFARankNamesKills[FFAPlayerInfo[playerid][KillsRank]]);
			SendMessageToMode(FFA,red1, string);
			format(string, sizeof(string), "[FFA] %s(ID:%d) just unlocked Kills Rank: %s.",PlayerInfo[playerid][Name],playerid,FFARankNamesKills[FFAPlayerInfo[playerid][KillsRank]]);
			db_SaveChat(-1, FFA,string);
		}
	}
	if (FFAPlayerInfo[playerid][Kills] >= 680)
	{
	    if(FFAPlayerInfo[playerid][KillsRank] < 2)
	    {
			FFAPlayerInfo[playerid][KillsRank] = 2;
			format(string,sizeof(string),"{FF0000}FFA:{FFFFFF} %s(ID:%d) just unlocked Kills Rank: {FF0000}%s.",PlayerInfo[playerid][Name],playerid,FFARankNamesKills[FFAPlayerInfo[playerid][KillsRank]]);
			SendMessageToMode(FFA,red1, string);
			format(string, sizeof(string), "[FFA] %s(ID:%d) just unlocked Kills Rank: %s.",PlayerInfo[playerid][Name],playerid,FFARankNamesKills[FFAPlayerInfo[playerid][KillsRank]]);
			db_SaveChat(-1, FFA,string);
		}
	}
	if (FFAPlayerInfo[playerid][Kills] >= 980)
	{
	    if(FFAPlayerInfo[playerid][KillsRank] < 3)
	    {
			FFAPlayerInfo[playerid][KillsRank] = 3;
			format(string,sizeof(string),"{FF0000}FFA:{FFFFFF} %s(ID:%d) just unlocked Kills Rank: {FF0000}%s.",PlayerInfo[playerid][Name],playerid,FFARankNamesKills[FFAPlayerInfo[playerid][KillsRank]]);
			SendMessageToMode(FFA,red1, string);
			format(string, sizeof(string), "[FFA] %s(ID:%d) just unlocked Kills Rank: %s.",PlayerInfo[playerid][Name],playerid,FFARankNamesKills[FFAPlayerInfo[playerid][KillsRank]]);
			db_SaveChat(-1, FFA,string);
		}
	}
	if (FFAPlayerInfo[playerid][Kills] >= 1380)
	{
	    if(FFAPlayerInfo[playerid][KillsRank] < 4)
	    {
			FFAPlayerInfo[playerid][KillsRank] = 4;
			format(string,sizeof(string),"{FF0000}FFA:{FFFFFF} %s(ID:%d) just unlocked Kills Rank: {FF0000}%s.",PlayerInfo[playerid][Name],playerid,FFARankNamesKills[FFAPlayerInfo[playerid][KillsRank]]);
			SendMessageToMode(FFA,red1, string);
			format(string, sizeof(string), "[FFA] %s(ID:%d) just unlocked Kills Rank: %s.",PlayerInfo[playerid][Name],playerid,FFARankNamesKills[FFAPlayerInfo[playerid][KillsRank]]);
			db_SaveChat(-1, FFA,string);
		}
	}
	if (FFAPlayerInfo[playerid][Kills] >= 1980)
	{
	    if(FFAPlayerInfo[playerid][KillsRank] < 5)
	    {
			FFAPlayerInfo[playerid][KillsRank] = 5;
			format(string,sizeof(string),"{FF0000}FFA:{FFFFFF} %s(ID:%d) just unlocked Kills Rank: {FF0000}%s.",PlayerInfo[playerid][Name],playerid,FFARankNamesKills[FFAPlayerInfo[playerid][KillsRank]]);
			SendMessageToMode(FFA,red1, string);
			format(string, sizeof(string), "[FFA] %s(ID:%d) just unlocked Kills Rank: %s.",PlayerInfo[playerid][Name],playerid,FFARankNamesKills[FFAPlayerInfo[playerid][KillsRank]]);
			db_SaveChat(-1, FFA,string);
		}
	}
	if (FFAPlayerInfo[playerid][Kills] >= 3000)
	{
	    if(FFAPlayerInfo[playerid][KillsRank] < 6)
	    {
			FFAPlayerInfo[playerid][KillsRank] = 6;
			format(string,sizeof(string),"{FF0000}FFA:{FFFFFF} %s(ID:%d) just unlocked Kills Rank: {FF0000}%s.",PlayerInfo[playerid][Name],playerid,FFARankNamesKills[FFAPlayerInfo[playerid][KillsRank]]);
			SendMessageToMode(FFA,red1, string);
			format(string, sizeof(string), "[FFA] %s(ID:%d) just unlocked Kills Rank: %s.",PlayerInfo[playerid][Name],playerid,FFARankNamesKills[FFAPlayerInfo[playerid][KillsRank]]);
			db_SaveChat(-1, FFA,string);
		}
	}
	//printf("DEBUG CFONTROL UpgradeFFARanks 2");
}
stock UpdateFFAGangText(i, save = true)
{
	//printf("DEBUG CFONTROL UpdateFFAGangText 1");
	new string[298],zones = 0, properties = 0;
    forLoop(z, MAX_FFA_ZONES)
	{
		if(FFAGangZones[z][Exists])
		{
		    if(FFAGangZones[z][Captured] == GangInfo[i][ID])
				zones++;
		}
	}
	properties = getFFAGangProperties(GangInfo[i][ID]);
	format(string,sizeof(string),"{%s}%s {FFFFFF}Head Quarters\nOperated by: {%s}%s\n{FFFFFF}Members: {%s}%d\n{FFFFFF}Zones: {%s}%d\n{FFFFFF}Properties: {%s}%d\n{FFFFFF}Money: {%s}$%d"
	,GangInfo[i][gColHex],GangInfo[i][gName],GangInfo[i][gColHex],GangInfo[i][gLeader],GangInfo[i][gColHex],GangInfo[i][Members],GangInfo[i][gColHex],zones
	,GangInfo[i][gColHex],properties,GangInfo[i][gColHex],GangInfo[i][Money]);
	UpdateDynamic3DTextLabelText(GangInfo[i][gSpawnLabel], 0xFFFFFFAA, string);
	if(save)SaveFFAGang(i);
	//printf("DEBUG CFONTROL UpdateFFAGangText 2");
}

stock getFFAGangProperties(id)
{
    new properties = 0;
	forLoop(p, MAX_FFA_PROPERTIES)
	{
	    if(FFAPropertyInfo[p][Exists])
	    {
	        if(FFAPropertyInfo[p][OwnerType] == FFA_OWNER_GANG && FFAPropertyInfo[p][OwnerID] == id)
	            properties++;
		}
	}
	return properties;
}

stock getFFAGangID(id)
{
	new gid = 0;
    forLoop(g, MAX_FFA_GANGS)
	{
	    if(GangInfo[g][Exists])
		{
		    if(GangInfo[g][ID] == id)
			{
			    gid = g;
			    break;
			}
		}
	}
	return gid;
}

stock SaveFFAGang(i)
{
    new d_query[500], sentinel[50];
    if(GangInfo[i][Exists])
    {
        if(GangInfo[i][ID] > 0)
	    {
			mysql_format(ServerInfo[DataBase], d_query, sizeof d_query, "LEADER_ID=%d,VICE_ID=%d,LOCKED=%d,MONEY=%d"
			,GangInfo[i][gLeaderID],GangInfo[i][gViceID],GangInfo[i][Locked],GangInfo[i][Money]);
			format(d_query, sizeof d_query, "UPDATE FFA_GANGS SET %s WHERE ID = %d",d_query,GangInfo[i][ID]);
			mysql_tquery(ServerInfo[DataBase], d_query, "", "");
		}
		else
		{
			mysql_format(ServerInfo[DataBase], d_query, sizeof d_query, "'%e','%s',%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d"
			,GangInfo[i][gName],GangInfo[i][gColHex],GangInfo[i][Color],GangInfo[i][gLeaderID],GangInfo[i][gViceID]
			,GangInfo[i][gSpawnX],GangInfo[i][gSpawnY],GangInfo[i][gSpawnZ],GangInfo[i][gOutInterior],GangInfo[i][gOutWorld]
			,GangInfo[i][Locked],GangInfo[i][AllowedIn],GangInfo[i][gInX],GangInfo[i][gInY],GangInfo[i][gInZ],GangInfo[i][InInterior],GangInfo[i][InWorld]
			,GangInfo[i][AllowedOut],GangInfo[i][gOutX],GangInfo[i][gOutY],GangInfo[i][gOutZ],GangInfo[i][OutInterior],GangInfo[i][OutWorld]
			,GangInfo[i][PicksAllowed],GangInfo[i][gPicksX],GangInfo[i][gPicksY],GangInfo[i][MapIcon],GangInfo[i][Money]);

	        new Cache: cache_id;
		    format(d_query, sizeof d_query, "INSERT INTO FFA_GANGS (NAME,COL_HEX,COLOR,LEADER_ID,VICE_ID,SPAWN_X,SPAWN_Y,SPAWN_Z,SPAWN_INT,SPAWN_WORLD,LOCKED,ALLOWED_IN,IN_X,IN_Y,IN_Z,IN_INT,IN_WORLD,ALLOWED_OUT,OUT_X,OUT_Y,OUT_Z,OUT_INT,OUT_WORLD,P_ALLOWED,P_X,P_Y,MAP_ICON,MONEY) VALUES (%s)",d_query);
            cache_id = mysql_query(ServerInfo[DataBase], d_query, true);
            GangInfo[i][ID] = cache_insert_id();
	        cache_delete(cache_id);
		}
	}
	else
	{
	    if(GangInfo[i][ID] > 0)
	    {
	        format(sentinel, sizeof sentinel, "ID = %d",GangInfo[i][ID]);
			db_DropFromTable("FFA_GANGS", sentinel);
	        GangInfo[i][ID] = 0;
	    }
	}
}

stock SaveExtraFFAGangs(i)
{
	new d_query[400];
	mysql_format(ServerInfo[DataBase], d_query, sizeof d_query,
	"NAME='%e',COL_HEX='%s',COLOR=%d,LEADER_ID=%d,VICE_ID=%d,SPAWN_X=%d,SPAWN_Y=%d,SPAWN_Z=%d,SPAWN_INT=%d,SPAWN_WORLD=%d,\
	LOCKED=%d,ALLOWED_IN=%d,IN_X=%d,IN_Y=%d,IN_Z=%d,IN_INT=%d,IN_WORLD=%d,ALLOWED_OUT=%d,OUT_X=%d,OUT_Y=%d,OUT_Z=%d,\
	OUT_INT=%d,OUT_WORLD=%d,P_ALLOWED=%d,P_X=%d,P_Y=%d,MAP_ICON=%d,MONEY=%d"
	,GangInfo[i][gName],GangInfo[i][gColHex],GangInfo[i][Color],GangInfo[i][gLeaderID],GangInfo[i][gViceID]
	,GangInfo[i][gSpawnX],GangInfo[i][gSpawnY],GangInfo[i][gSpawnZ],GangInfo[i][gOutInterior],GangInfo[i][gOutWorld]
	,GangInfo[i][Locked],GangInfo[i][AllowedIn],GangInfo[i][gInX],GangInfo[i][gInY],GangInfo[i][gInZ],GangInfo[i][InInterior],GangInfo[i][InWorld]
	,GangInfo[i][AllowedOut],GangInfo[i][gOutX],GangInfo[i][gOutY],GangInfo[i][gOutZ],GangInfo[i][OutInterior],GangInfo[i][OutWorld]
	,GangInfo[i][PicksAllowed],GangInfo[i][gPicksX],GangInfo[i][gPicksY],GangInfo[i][MapIcon],GangInfo[i][Money]);

	format(d_query, sizeof d_query, "UPDATE FFA_GANGS SET %s WHERE ID = %d",d_query,GangInfo[i][ID]);
	mysql_tquery(ServerInfo[DataBase], d_query, "", "");
}

stock LoadFFAGangs()
{
	forLoop(i, MAX_FFA_GANGS)
	{
		if(GangInfo[i][gZone]>-1)GangZoneDestroy(GangInfo[i][gZone]);
		DestroyTheDynamic3DTextLabel(GangInfo[i][gSpawnLabel]);
		DestroyTheDynamic3DTextLabel(GangInfo[i][gOutLabel]);
		DestroyTheDynamic3DTextLabel(GangInfo[i][gInLabel]);
		if(GangInfo[i][OutPickup]>-1)DestroyTheDynamicPickup(GangInfo[i][OutPickup]);
		if(GangInfo[i][InPickup]>-1)DestroyTheDynamicPickup(GangInfo[i][InPickup]);
		GangInfo[i][gZone]=-1;
		GangInfo[i][OutPickup]=-1;
		GangInfo[i][InPickup]=-1;
		GangInfo[i][Exists]=0;
		GangInfo[i][ID] = 0;
		GangInfo[i][MapIcon] = 42;
	}
	new loop_breaker, Cache: cache_id, Cache: m_cache_id, row, dest[50], str[100], gangs;
	cache_id = mysql_query(ServerInfo[DataBase], "SELECT * FROM FFA_GANGS", true);
 	forLoopV(i, 1, cache_num_rows()+1)
	{
		if(breakLoop(++loop_breaker, "LoadFFAGangs"))break;
		gangs++;
		row = i - 1;
        GangInfo[i][Exists] = 1;
	    cache_get_value_name(row, "NAME", dest);
		format(GangInfo[i][gName], 50, "%s",dest);
	    cache_get_value_name(row, "COL_HEX", dest);
		format(GangInfo[i][gColHex], 50, "%s",dest);
		
		cache_get_value_name_int(row, "ID", GangInfo[i][ID]);
		cache_get_value_name_int(row, "COLOR", GangInfo[i][Color]);
		cache_get_value_name_int(row, "LEADER_ID", GangInfo[i][gLeaderID]);
		cache_get_value_name_int(row, "VICE_ID", GangInfo[i][gViceID]);
		cache_get_value_name_int(row, "SPAWN_X", GangInfo[i][gSpawnX]);
		cache_get_value_name_int(row, "SPAWN_Y", GangInfo[i][gSpawnY]);
		cache_get_value_name_int(row, "SPAWN_Z", GangInfo[i][gSpawnZ]);
		cache_get_value_name_int(row, "SPAWN_INT", GangInfo[i][gOutInterior]);
		cache_get_value_name_int(row, "SPAWN_WORLD", GangInfo[i][gOutWorld]);
		cache_get_value_name_int(row, "LOCKED", GangInfo[i][Locked]);
		cache_get_value_name_int(row, "ALLOWED_IN", GangInfo[i][AllowedIn]);
		cache_get_value_name_int(row, "IN_X", GangInfo[i][gInX]);
		cache_get_value_name_int(row, "IN_Y", GangInfo[i][gInY]);
		cache_get_value_name_int(row, "IN_Z", GangInfo[i][gInZ]);
		cache_get_value_name_int(row, "IN_INT", GangInfo[i][InInterior]);
		cache_get_value_name_int(row, "IN_WORLD", GangInfo[i][InWorld]);
		cache_get_value_name_int(row, "ALLOWED_OUT", GangInfo[i][AllowedOut]);
		cache_get_value_name_int(row, "OUT_X", GangInfo[i][gOutX]);
		cache_get_value_name_int(row, "OUT_Y", GangInfo[i][gOutY]);
		cache_get_value_name_int(row, "OUT_Z", GangInfo[i][gOutZ]);
		cache_get_value_name_int(row, "OUT_INT", GangInfo[i][OutInterior]);
		cache_get_value_name_int(row, "OUT_WORLD", GangInfo[i][OutWorld]);
		cache_get_value_name_int(row, "P_ALLOWED", GangInfo[i][PicksAllowed]);
		cache_get_value_name_int(row, "P_X", GangInfo[i][gPicksX]);
		cache_get_value_name_int(row, "P_Y", GangInfo[i][gPicksY]);
		cache_get_value_name_int(row, "MAP_ICON", GangInfo[i][MapIcon]);
		cache_get_value_name_int(row, "MONEY", GangInfo[i][Money]);
		

        format(str, sizeof str, "SELECT COUNT(*) AS COUNT FROM USERS WHERE FFA_GANG_ID = %d",GangInfo[i][ID]);
		m_cache_id = mysql_query(ServerInfo[DataBase], str, true);
		cache_get_value_name_int(0, "COUNT", GangInfo[i][Members]);
		cache_delete(m_cache_id);

		format(GangInfo[i][gLeader],50, "%s",db_ReturnUserName(GangInfo[i][gLeaderID]));
		if(GangInfo[i][gViceID] > 0)format(GangInfo[i][gVice],50, "%s",db_ReturnUserName(GangInfo[i][gViceID]));
		else format(GangInfo[i][gVice],50, "No one");
		cache_set_active(cache_id);

		GangInfo[i][gSpawnLabel] = CreateDynamic3DTextLabel("lele",0xFFFFFFAA,GangInfo[i][gSpawnX],GangInfo[i][gSpawnY],GangInfo[i][gSpawnZ]+7, 80, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, GangInfo[i][gOutWorld], -1, -1, 100);
        UpdateFFAGangText(i, false);
		GangInfo[i][gZone]=GangZoneCreate(GangInfo[i][gSpawnX]-100, GangInfo[i][gSpawnY]-100, GangInfo[i][gSpawnX]+100, GangInfo[i][gSpawnY]+100);
	    GangZoneShowFor(FFA,GangInfo[i][gZone],GangInfo[i][Color]);
	    if(GangInfo[i][AllowedIn] && GangInfo[i][AllowedOut])
		{
	        GangInfo[i][OutPickup]=CreateDynamicPickup(1273, 23,GangInfo[i][gOutX],GangInfo[i][gOutY],GangInfo[i][gOutZ], W_FFA);
	        GangInfo[i][InPickup]=CreateDynamicPickup(1273, 23,GangInfo[i][gInX],GangInfo[i][gInY],GangInfo[i][gInZ], GangInfo[i][InWorld]);
	     	GangInfo[i][gOutLabel] = CreateDynamic3DTextLabel("{CCCCCC}Press '{33FF33}ENTER{CCCCCC}' to enter", 0xCCCCCCAA,GangInfo[i][gOutX],GangInfo[i][gOutY],GangInfo[i][gOutZ]+1, 30, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, GangInfo[i][OutWorld], -1, -1, 100);
	        GangInfo[i][gInLabel] = CreateDynamic3DTextLabel("{CCCCCC}Press '{33FF33}ENTER{CCCCCC}' to exit", 0xCCCCCCAA,GangInfo[i][gInX],GangInfo[i][gInY],GangInfo[i][gInZ]+1, 30, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, GangInfo[i][InWorld], -1, -1, 100);
		}
		if(GangInfo[i][PicksAllowed]) CreateFFApicks(i,GangInfo[i][gPicksX],GangInfo[i][gPicksY]);
	}
	cache_delete(cache_id);
 	printf("FFA Gang manager: %d gangs have been loaded.",gangs);
 	return 1;
}

stock DestroyFFAProperty(i)
{
	if(i < 0 || i >= MAX_FFA_PROPERTIES)return 0;
    DestroyTheDynamic3DTextLabel(FFAPropertyInfo[i][gOutLabel]);
	DestroyTheDynamic3DTextLabel(FFAPropertyInfo[i][gInLabel]);
	DestroyTheDynamicPickup(FFAPropertyInfo[i][OutPickup]);
	DestroyTheDynamicPickup(FFAPropertyInfo[i][InPickup]);
	DestroyTheDynamicMapIcon(FFAPropertyInfo[i][MapIcon]);
	FFAPropertyInfo[i][Exists]=0;
	FFAPropertyInfo[i][OwnerID]=0;
	FFAPropertyInfo[i][OwnerType]=FFA_OWNER_NOTHING;
	format(FFAPropertyInfo[i][Owner], 50,"No One");
	return 1;
}

stock SaveFFAProperty(i)
{
	new d_query[400], sentinel[50];
    if(FFAPropertyInfo[i][Exists])
    {
        if(FFAPropertyInfo[i][ID] != 0)
        {
	        format(sentinel, sizeof sentinel, "ID = %d",FFAPropertyInfo[i][ID]);
			mysql_format(ServerInfo[DataBase], d_query, sizeof d_query, "USER_ID = %d,OWNER_TYPE = %d,PRICE = %d,LOCKED = %d"
			,FFAPropertyInfo[i][OwnerID],FFAPropertyInfo[i][OwnerType],FFAPropertyInfo[i][Price],FFAPropertyInfo[i][Locked]);
	        format(d_query, sizeof d_query, "UPDATE FFA_PROPERTIES SET %s WHERE ID = %d",d_query,FFAPropertyInfo[i][ID]);
			mysql_tquery(ServerInfo[DataBase], d_query, "", "");
        }
        else
        {
			mysql_format(ServerInfo[DataBase], d_query, sizeof d_query, "'%e',%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d"
			,FFAPropertyInfo[i][gName],FFAPropertyInfo[i][OwnerID],FFAPropertyInfo[i][OwnerType],FFAPropertyInfo[i][Price]
			,FFAPropertyInfo[i][Locked],FFAPropertyInfo[i][AllowedIn],FFAPropertyInfo[i][gInX],FFAPropertyInfo[i][gInY]
			,FFAPropertyInfo[i][gInZ],FFAPropertyInfo[i][InInterior],FFAPropertyInfo[i][gInAng],FFAPropertyInfo[i][gOutX]
			,FFAPropertyInfo[i][gOutY],FFAPropertyInfo[i][gOutZ],FFAPropertyInfo[i][gOutAng]);

	        new Cache: cache_id;
		    format(d_query, sizeof d_query, "INSERT INTO FFA_PROPERTIES (NAME,USER_ID,OWNER_TYPE,PRICE,LOCKED,ALLOWED_IN,G_IN_X,G_IN_Y,G_IN_Z,G_IN_INT,G_IN_ANG,G_OUT_X,G_OUT_Y,G_OUT_Z,G_OUT_ANG) VALUES (%s)",d_query);
            cache_id = mysql_query(ServerInfo[DataBase], d_query, true);
			FFAPropertyInfo[i][ID] = cache_insert_id();
	        cache_delete(cache_id);
        }
	}
	else
	{
	    if(FFAPropertyInfo[i][ID] > 0)
	    {
	        format(sentinel, sizeof sentinel, "ID = %d",FFAPropertyInfo[i][ID]);
			db_DropFromTable("FFA_PROPERTIES", sentinel);
	        FFAPropertyInfo[i][ID] = 0;
	    }
	}
}

stock SaveExtraFFAProperties(i)
{
	new d_query[400];
	mysql_format(ServerInfo[DataBase], d_query, sizeof d_query, "NAME='%e',USER_ID=%d,OWNER_TYPE=%d,PRICE=%d,LOCKED=%d,ALLOWED_IN=%d,\
	G_IN_X=%d,G_IN_Y=%d,G_IN_Z=%d,G_IN_INT=%d,G_IN_ANG=%d,G_OUT_X=%d,G_OUT_Y=%d,G_OUT_Z=%d,G_OUT_ANG=%d"
	,FFAPropertyInfo[i][gName],FFAPropertyInfo[i][OwnerID],FFAPropertyInfo[i][OwnerType],FFAPropertyInfo[i][Price]
	,FFAPropertyInfo[i][Locked],FFAPropertyInfo[i][AllowedIn],FFAPropertyInfo[i][gInX],FFAPropertyInfo[i][gInY]
	,FFAPropertyInfo[i][gInZ],FFAPropertyInfo[i][InInterior],FFAPropertyInfo[i][gInAng],FFAPropertyInfo[i][gOutX]
	,FFAPropertyInfo[i][gOutY],FFAPropertyInfo[i][gOutZ],FFAPropertyInfo[i][gOutAng]);

	format(d_query, sizeof d_query, "UPDATE FFA_PROPERTIES SET %s WHERE ID = %d",d_query,FFAPropertyInfo[i][ID]);
	mysql_tquery(ServerInfo[DataBase], d_query, "", "");
}

stock LoadFFAProperties()
{
	forLoop(i, MAX_FFA_PROPERTIES)
	{
		DestroyFFAProperty(i);
		FFAPropertyInfo[i][ID]=0;
	}
	new loop_breaker, Cache: cache_id, row, dest[50], properties;
	cache_id = mysql_query(ServerInfo[DataBase], "SELECT * FROM FFA_PROPERTIES", true);
 	forLoopV(i, 1, cache_num_rows()+1)
	{
 		properties++;
		if(breakLoop(++loop_breaker, "LoadFFAProperties"))break;
		FFAPropertyInfo[i][Exists]=1;
		row = i -1;
		
	    cache_get_value_name(row, "NAME", dest);
		format(FFAPropertyInfo[i][gName], 50, "%s",dest);
		cache_get_value_name_int(row, "ID", FFAPropertyInfo[i][ID]);
		cache_get_value_name_int(row, "USER_ID", FFAPropertyInfo[i][OwnerID]);
		cache_get_value_name_int(row, "OWNER_TYPE", FFAPropertyInfo[i][OwnerType]);
		cache_get_value_name_int(row, "PRICE", FFAPropertyInfo[i][Price]);
		cache_get_value_name_int(row, "LOCKED", FFAPropertyInfo[i][Locked]);
		cache_get_value_name_int(row, "ALLOWED_IN", FFAPropertyInfo[i][AllowedIn]);
		cache_get_value_name_int(row, "G_IN_X", FFAPropertyInfo[i][gInX]);
		cache_get_value_name_int(row, "G_IN_Y", FFAPropertyInfo[i][gInY]);
		cache_get_value_name_int(row, "G_IN_Z", FFAPropertyInfo[i][gInZ]);
		cache_get_value_name_int(row, "G_IN_INT", FFAPropertyInfo[i][InInterior]);
		cache_get_value_name_int(row, "G_IN_ANG", FFAPropertyInfo[i][gInAng]);
		cache_get_value_name_int(row, "G_OUT_X", FFAPropertyInfo[i][gOutX]);
		cache_get_value_name_int(row, "G_OUT_Y", FFAPropertyInfo[i][gOutY]);
		cache_get_value_name_int(row, "G_OUT_Z", FFAPropertyInfo[i][gOutZ]);
		cache_get_value_name_int(row, "G_OUT_ANG", FFAPropertyInfo[i][gOutAng]);

		if(FFAPropertyInfo[i][OwnerID] > 0)
		{
			if(FFAPropertyInfo[i][OwnerType] == FFA_OWNER_PLAYER)format(FFAPropertyInfo[i][Owner], 50, "%s",db_ReturnUserName(FFAPropertyInfo[i][OwnerID]));
			else
			{
			    forLoop(g, MAX_FFA_GANGS)
				{
				    if(GangInfo[g][Exists])
					{
					    if(GangInfo[g][ID] == FFAPropertyInfo[i][OwnerID])
						{
							format(FFAPropertyInfo[i][Owner], 50, "%s",GangInfo[g][gName]);
							break;
						}
				    }
				}
			}
			FFAPropertyInfo[i][MapIcon] = CreateDynamicMapIcon(FFAPropertyInfo[i][gOutX],FFAPropertyInfo[i][gOutY],FFAPropertyInfo[i][gOutZ], 32, 1 , W_FFA, -1, -1, 100.0);
			cache_set_active(cache_id);
		}
		else
		{
		    FFAPropertyInfo[i][MapIcon] = CreateDynamicMapIcon(FFAPropertyInfo[i][gOutX],FFAPropertyInfo[i][gOutY],FFAPropertyInfo[i][gOutZ], 31, 1 , W_FFA, -1, -1, 100.0);
		}
		
		new inworld = (i+21)*31;
		FFAPropertyInfo[i][gOutLabel] = CreateDynamic3DTextLabel("lele",0xFFFFFFAA,FFAPropertyInfo[i][gOutX],FFAPropertyInfo[i][gOutY],FFAPropertyInfo[i][gOutZ]+1, 15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, W_FFA, -1, -1, 100);
        UpdateFFAPropertyText(i, false);
		FFAPropertyInfo[i][OutPickup]=CreateDynamicPickup(1273, 23,FFAPropertyInfo[i][gOutX],FFAPropertyInfo[i][gOutY],FFAPropertyInfo[i][gOutZ], W_FFA);
	   	if(FFAPropertyInfo[i][AllowedIn])
		{
	        FFAPropertyInfo[i][InPickup] = CreateDynamicPickup(1273, 23,FFAPropertyInfo[i][gInX],FFAPropertyInfo[i][gInY],FFAPropertyInfo[i][gInZ], inworld);
	     	FFAPropertyInfo[i][gInLabel] = CreateDynamic3DTextLabel("{CCCCCC}Press '{33FF33}ENTER{CCCCCC}' to exit", 0xCCCCCCAA,FFAPropertyInfo[i][gInX],FFAPropertyInfo[i][gInY],FFAPropertyInfo[i][gInZ]+1, 30, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, inworld, -1, -1, 100);
		}
	}
	cache_delete(cache_id);
 	printf("FFA Property manager: %d properties have been loaded.",properties);
 	return 1;
}

stock UpdateFFAPropertyText(i, save = true)
{
	new string[259], color[20];
	if(FFAPropertyInfo[i][OwnerID] > 0)
	{
		if(FFAPropertyInfo[i][OwnerType] == FFA_OWNER_GANG)
	    {
		   	forLoop(g, MAX_FFA_GANGS)
			{
			    if(GangInfo[g][Exists])
				{
				    if(GangInfo[g][ID] == FFAPropertyInfo[i][OwnerID])
					{
						format(color, sizeof color,"%s",GangInfo[g][gColHex]);
						break;
					}
			    }
			}
	        if(FFAPropertyInfo[i][Locked] == 1)
				format(string,sizeof(string),"[{FFFFFF}%s - {CCCCCC}%d{FF0000}]\n\n{FF0000}LOCKED\n{FFFFFF}SOLD TO {%s}%s\n{33AA33}$%d\n\n\n{CCCCCC}Press '{33FF33}ENTER{CCCCCC}' to enter",FFAPropertyInfo[i][gName],FFAPropertyInfo[i][ID],color,FFAPropertyInfo[i][Owner],FFAPropertyInfo[i][Price]);
			else
				format(string,sizeof(string),"[{FFFFFF}%s - {CCCCCC}%d{FF0000}]\n\n{FFFFFF}SOLD TO {%s}%s\n{{33AA33}$%d\n\n\n{CCCCCC}Press '{33FF33}ENTER{CCCCCC}' to enter",FFAPropertyInfo[i][gName],FFAPropertyInfo[i][ID],color,FFAPropertyInfo[i][Owner],FFAPropertyInfo[i][Price]);
		}
		else
		{
		    if(FFAPropertyInfo[i][Locked] == 1)
				format(string,sizeof(string),"[{FFFFFF}%s - {CCCCCC}%d{FF0000}]\n\nLOCKED\n{FFFFFF}SOLD TO %s\n{33AA33}$%d\n\n\n{CCCCCC}Press '{33FF33}ENTER{CCCCCC}' to enter",FFAPropertyInfo[i][gName],FFAPropertyInfo[i][ID],FFAPropertyInfo[i][Owner],FFAPropertyInfo[i][Price]);
			else
		    	format(string,sizeof(string),"[{FFFFFF}%s - {CCCCCC}%d{FF0000}]\n\n{FF9900}SOLD TO %s\n{33AA33}$%d\n\n\n{CCCCCC}Press '{33FF33}ENTER{CCCCCC}' to enter",FFAPropertyInfo[i][gName],FFAPropertyInfo[i][ID],FFAPropertyInfo[i][Owner],FFAPropertyInfo[i][Price]);
		}
	}
	else
		format(string,sizeof(string),"[{FFFFFF}%s - {CCCCCC}%d{FF0000}]\n\n{33AA33}FOR SALE - $%d{CCCCCC}\n[/pbuy]\n\n\n{CCCCCC}Press '{33FF33}ENTER{CCCCCC}' to enter",FFAPropertyInfo[i][gName],FFAPropertyInfo[i][ID],FFAPropertyInfo[i][Price]);
	UpdateDynamic3DTextLabelText(FFAPropertyInfo[i][gOutLabel], 0xFF0000AA, string);
    if(save)SaveFFAProperty(i);
}

stock getFFAPropertyID(id)
{
	new pid = 0;
    forLoop(i, MAX_FFA_PROPERTIES)
	{
	    if(FFAPropertyInfo[i][Exists])
		{
		    if(FFAPropertyInfo[i][ID] == id)
			{
			    pid = i;
			    break;
			}
		}
	}
	return pid;
}

stock BuyFFAProperty(playerid, i, type)
{
	new st[178];
	if(type == 1)
	{
	    new ganglocal = getFFAGangID(FFAPlayerInfo[playerid][GangID]);
	    if(GangInfo[ganglocal][Money] < FFAPropertyInfo[i][Price])
			return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} Your gang doesn't have enough money.");
	    GangInfo[ganglocal][Money]-=FFAPropertyInfo[i][Price];

        FFAPropertyInfo[i][OwnerType] = FFA_OWNER_GANG;
	    FFAPropertyInfo[i][OwnerID] = FFAPlayerInfo[playerid][GangID];
		format(FFAPropertyInfo[i][Owner], 50,"%s",GangInfo[ganglocal][gName]);
	    UpdateFFAGangText(ganglocal, false);
	    format(st, sizeof(st), "[NEWS]  Leader of %s, %s, has purchased '%s' for $%d!", GangInfo[ganglocal][gName],PlayerInfo[playerid][Name],FFAPropertyInfo[i][gName],FFAPropertyInfo[i][Price]);
		db_SaveChat(-1, FFA,st);
		format(st,128,"{FF9900}NEWS:{FFFFFF} Leader of %s, %s, has purchased '%s' for $%d!", GangInfo[ganglocal][gName],PlayerInfo[playerid][Name],FFAPropertyInfo[i][gName],FFAPropertyInfo[i][Price]);
		SendMessageToMode(FFA,white,st);
		SendClientMessage(playerid,red1,"{FF9900}Notice:{FFFFFF} Use /changeffaspawn to change your spawn place to here.");
	}
	else
	{
	    if(GetThePlayerMoney(playerid) < FFAPropertyInfo[i][Price]) return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} You don't have enough money.");
		FFAPlayerInfo[playerid][Properties]++;
	    GiveThePlayerMoney(playerid, -FFAPropertyInfo[i][Price]);
		format(FFAPropertyInfo[i][Owner], 50,"%s",PlayerInfo[playerid][Name]);

        FFAPropertyInfo[i][OwnerType] = FFA_OWNER_PLAYER;
	    FFAPropertyInfo[i][OwnerID] = PlayerInfo[playerid][ID];
	    format(st, sizeof(st), "[NEWS] %s has purchased '%s' for $%d!",PlayerInfo[playerid][Name],FFAPropertyInfo[i][gName],FFAPropertyInfo[i][Price]);
		db_SaveChat(-1, FFA,st);
		format(st,128,"{FF9900}NEWS:{FFFFFF} %s has purchased '%s' for $%d!",PlayerInfo[playerid][Name],FFAPropertyInfo[i][gName],FFAPropertyInfo[i][Price]);
		SendMessageToMode(FFA,white,st);
		SendClientMessage(playerid,red1,"{FF9900}Notice:{FFFFFF} Use /changeffaspawn to change your spawn place to here.");
	}
    UpdateFFAPropertyText(i);
	DestroyTheDynamicMapIcon(FFAPropertyInfo[i][MapIcon]);
    FFAPropertyInfo[i][MapIcon] = CreateDynamicMapIcon(FFAPropertyInfo[i][gOutX],FFAPropertyInfo[i][gOutY],FFAPropertyInfo[i][gOutZ], 32, 1 , W_FFA, -1, -1, 100.0);
	return 1;
}

stock SellFFAProperty(playerid, i, type)
{
	//printf("DEBUG CFONTROL SellFFAProperty 1");
	new st[178];
	if(type == 1)
	{
	    new ganglocal = getFFAGangID(FFAPlayerInfo[playerid][GangID]);
	    GangInfo[ganglocal][Money]+=floatround(FFAPropertyInfo[i][Price]*(0.8));
        UpdateFFAGangText(ganglocal, false);
	    format(st, sizeof(st), "[NEWS]  Leader of %s, %s, has sold '%s' - Price: $%d!", GangInfo[ganglocal][gName],PlayerInfo[playerid][Name],FFAPropertyInfo[i][gName],FFAPropertyInfo[i][Price]);
		db_SaveChat(-1, FFA,st);
		format(st,128,"{FF9900}NEWS:{FFFFFF} Leader of %s, %s, has sold '%s' - Price: $%d!", GangInfo[ganglocal][gName],PlayerInfo[playerid][Name],FFAPropertyInfo[i][gName],FFAPropertyInfo[i][Price]);
		SendMessageToMode(FFA,white,st);

		format(st, sizeof(st), "{FF9900}Notice:{FFFFFF} You have sold '%s' - Your gang got back $%d(80 percent)",FFAPropertyInfo[i][gName], floatround(FFAPropertyInfo[i][Price]*(0.8)));
		SendClientMessage(playerid,red1,st);
	}
	else
	{
		FFAPlayerInfo[playerid][Properties]--;
	    GiveThePlayerMoney(playerid, floatround(FFAPropertyInfo[i][Price]*(0.8)));
	    format(st, sizeof(st), "[NEWS] %s has sold '%s' - Price: $%d!",PlayerInfo[playerid][Name],FFAPropertyInfo[i][gName],FFAPropertyInfo[i][Price]);
		db_SaveChat(-1, FFA,st);
		format(st,128,"{FF9900}NEWS:{FFFFFF} %s has sold '%s' - Price: $%d!",PlayerInfo[playerid][Name],FFAPropertyInfo[i][gName],FFAPropertyInfo[i][Price]);
		SendMessageToMode(FFA,white,st);
		format(st, sizeof(st), "{FF9900}Notice:{FFFFFF} You have sold '%s' - You got back $%d(80 percent)",FFAPropertyInfo[i][gName], floatround(FFAPropertyInfo[i][Price]*(0.8)));
		SendClientMessage(playerid,red1,st);
	}
	FFAPropertyInfo[i][Locked] = 0;
    FFAPropertyInfo[i][OwnerID] = 0;
    FFAPropertyInfo[i][OwnerType] = FFA_OWNER_NOTHING;
	format(FFAPropertyInfo[i][Owner], 50,"No one");
	if(FFAPlayerInfo[playerid][PropertySpawn] == FFAPropertyInfo[i][ID]) FFAPlayerInfo[playerid][PropertySpawn] = 0;
	UpdateFFAPropertyText(i);
	DestroyTheDynamicMapIcon(FFAPropertyInfo[i][MapIcon]);
    FFAPropertyInfo[i][MapIcon] = CreateDynamicMapIcon(FFAPropertyInfo[i][gOutX],FFAPropertyInfo[i][gOutY],FFAPropertyInfo[i][gOutZ], 31, 1 , W_FFA, -1, -1, 100.0);
}

stock LockFFAProperty(playerid, i)
{
	//printf("DEBUG CFONTROL LockFFAProperty 1");
	new st[178];
	if(FFAPropertyInfo[i][Locked] == 0)
	{
	    FFAPropertyInfo[i][Locked] = 1;
		format(st, sizeof(st), "{FF9900}Notice:{FFFFFF} You have locked '%s' - Use /plock to unlock it.",FFAPropertyInfo[i][gName]);
		SendClientMessage(playerid,red1,st);
	}
	else
	{
	    FFAPropertyInfo[i][Locked] = 0;
		format(st, sizeof(st), "{FF9900}Notice:{FFFFFF} You have unlocked '%s' - Use /plock to lock it.",FFAPropertyInfo[i][gName]);
		SendClientMessage(playerid,red1,st);
	}
    UpdateFFAPropertyText(i);
	//printf("DEBUG CFONTROL LockFFAProperty 2");
}

stock SpawnInFFAProperty(playerid, i)
{
	//printf("DEBUG CFONTROL SpawnInFFAProperty 1");
	new st[178];
	if(i == 0)
	{
	    FFAPlayerInfo[playerid][PropertySpawn] = 0;
		SendClientMessage(playerid,red1,"{FF9900}Notice:{FFFFFF} Your spawn has been changed to normal. - Use /changeffaspawn to change your spawn place.");
	}
	else
	{
		if(FFAPropertyInfo[i][OwnerType] == FFA_OWNER_PLAYER && FFAPropertyInfo[i][OwnerID] != PlayerInfo[playerid][ID])
	        return SendClientMessage(playerid,red1,"{FF0000}ERROR:{FFFFFF} You do not own this building.");

		if(FFAPropertyInfo[i][OwnerType] == FFA_OWNER_GANG && FFAPlayerInfo[playerid][GangID] > 0 && FFAPropertyInfo[i][OwnerID] != FFAPlayerInfo[playerid][GangID])
			return SendClientMessage(playerid,red1,"{FF0000}ERROR:{FFFFFF} You do not own this building, your gang doesn't own this building.");

		FFAPlayerInfo[playerid][PropertySpawn] = FFAPropertyInfo[i][ID];
		format(st, sizeof(st), "{FF9900}Notice:{FFFFFF} You will spawn at '%s'. - Use /changeffaspawn to change your spawn place",FFAPropertyInfo[i][gName]);
		SendClientMessage(playerid,red1,st);
	}
	//printf("DEBUG CFONTROL SpawnInFFAProperty 2");
	return 1;
}

stock getTheZoneID(id)
{
	new zid = 0;
    forLoop(i,MAX_FFA_ZONES)
	{
	    if(FFAGangZones[i][Exists])
		{
		    if(FFAGangZones[i][ID] == id)
			{
			    zid = i;
			    break;
			}
		}
	}
	return zid;
}

stock FFACountDownAreaPlayers(id, owner, highestgangid)
{
	if(FFAGangZones[id][State] != 0)
	{
		new str[40];
		format(str,sizeof(str),"_~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~%d",FFAGangZones[id][cTime]);
		forLoop(y, MAX_PLAYERS)
		{
			if(!IsPlayerConnected(y) || IsPlayerNPC(y))continue;
	 		if(PlayerInfo[y][PlayerMode] == FFA && (FFAPlayerInfo[y][GangID] == owner || FFAPlayerInfo[y][GangID] == highestgangid) && PlayerInfo[y][Spawned] == 1)
			{
				if(IsPlayerInDynamicArea(y, FFAGangZones[id][AreaID]))
				{
					GameTextForPlayer(y, str, 1100, 6);
				}
			}
		}
	}
}


stock FFARewardAreaPlayers(id, gang)
{
	forLoop(y, MAX_PLAYERS)
	{
		if(!IsPlayerConnected(y) || IsPlayerNPC(y))continue;
 		if(PlayerInfo[y][PlayerMode] == FFA && FFAPlayerInfo[y][GangID] == gang && PlayerInfo[y][Spawned] == 1)
		{
			if(IsPlayerInDynamicArea(y, FFAGangZones[id][AreaID]))
			{
			    ChangeModeScore(y, 50);
                FFAPlayerInfo[y][Captures]++;
                GiveThePlayerMoney(y,300);
                PlayerPlaySound(y,1085,0.0,0.0,0.0);
			}
		}
	}
}

stock FFACheckGangZoneCount(playerid, plstate)
{
	if(PlayerInfo[playerid][DynamicArea] != -1)
	{
		new gang = 0; // for neutrals
		if(FFAPlayerInfo[playerid][GangID] != 0)
			gang = getFFAGangID(FFAPlayerInfo[playerid][GangID])+1;
			//the +1 will be coverd by MAX_FFA_GANGS_ALL
	    forLoop(id, MAX_FFA_ZONES)
		{
			if(FFAGangZones[id][Exists])
			{
			    if(FFAGangZones[id][AreaID] == PlayerInfo[playerid][DynamicArea])
			    {
			        if(plstate)
			        	FFAGangZones[id][InZoneCount][gang]++;
			        else
			        	FFAGangZones[id][InZoneCount][gang]--;

					if(FFAGangZones[id][InZoneCount][gang] < 0)
			        	FFAGangZones[id][InZoneCount][gang] = 0;
			    }
			}
		}
		if(!plstate)
		    PlayerInfo[playerid][DynamicArea] = -1;
 	}
}

stock FFAGetAreaPlayers(id, gang)
{
	if(gang == 0)
		return FFAGangZones[id][InZoneCount][0];
	else
	{
	    forLoop(i, MAX_FFA_GANGS)
		{
			if(GangInfo[i][Exists] && GangInfo[i][ID] == gang)
			{
                return FFAGangZones[id][InZoneCount][i+1];
			}
		}
		return 0;
	}
	/*new plateam;
	forLoop(y, MAX_PLAYERS)
	{
		if(!IsPlayerConnected(y) || IsPlayerNPC(y))continue;
 		if(PlayerInfo[y][PlayerMode] == FFA && PlayerInfo[y][Spawned] == 1 && FFAPlayerInfo[y][GangID] == gang)
		{
			if(IsPlayerInDynamicArea(y, FFAGangZones[id][AreaID]))
			{
			    plateam++;
			}
		}
	}
	return plateam;*/
}
stock FFASetGangZoneTeam(id, gang)
{
 	new ganglocal = getFFAGangID(gang);
 	new prevgang = FFAGangZones[id][Captured];
 	new prevlocal = getFFAGangID(FFAGangZones[id][Captured]);
 	new st[178];
    if(gang == 0)
	{
		format(st, sizeof(st), "[NEWS] %s has been freed from %s!",FFAGangZones[id][Name],GangInfo[prevlocal][gName]);
		db_SaveChat(-1, FFA,st);
		format(st,128,"{33FF33}NEWS: {FFFFFF}%s has been freed from {%s}%s!",FFAGangZones[id][Name],GangInfo[prevlocal][gColHex],GangInfo[prevlocal][gName]);
	}
	else
	{
	    if(prevgang > 0)
		{
			format(st, sizeof(st), "[NEWS] %s has been captured by %s!",FFAGangZones[id][Name],GangInfo[ganglocal][gName]);
			db_SaveChat(-1, FFA,st);
			format(st,128,"{33FF33}NEWS: {%s}%s {FFFFFF}has been captured by {%s}%s!",GangInfo[prevlocal][gColHex],FFAGangZones[id][Name],GangInfo[ganglocal][gColHex],GangInfo[ganglocal][gName]);
		}
		else
		{
			format(st, sizeof(st), "[NEWS] %s has been captured by %s!",FFAGangZones[id][Name],GangInfo[ganglocal][gName]);
			db_SaveChat(-1, FFA,st);
			format(st,128,"{33FF33}NEWS: {FFFF00}%s {FFFFFF}has been captured by {%s}%s!",FFAGangZones[id][Name],GangInfo[ganglocal][gColHex],GangInfo[ganglocal][gName]);
		}
	}
	SendMessageToMode(FFA,white,st);

 	if(prevgang != 0)
	{
		GangInfo[prevlocal][Money] -= 200;
	 	UpdateFFAGangText(prevlocal,false);
	}
	if(gang > 0)
	{
		if(GangInfo[ganglocal][Money]+200 >= 1147483647)
            GangInfo[ganglocal][Money] = 1147483640;
		else GangInfo[ganglocal][Money]+= 200;
		UpdateFFAGangText(ganglocal,false);
	}
	forLoop(y, MAX_PLAYERS)
	{
		if(!IsPlayerConnected(y) || IsPlayerNPC(y))continue;
 		if(PlayerInfo[y][PlayerMode] == FFA && PlayerInfo[y][Spawned] == 1)
		{
		    if(FFAPlayerInfo[y][GangID] == gang && gang != 0)
		    {
				ChangeModeScore(y, 10);
	            GiveThePlayerMoney(y,50);
            }
            if(FFAPlayerInfo[y][GangID] == prevgang && prevgang != 0)
		    {
				ChangeModeScore(y, -10);
	            GiveThePlayerMoney(y,-50);
            }
		}
	}
	FFARewardAreaPlayers(id, gang);
	FFAGangZones[id][Captured] = gang;
	UpdateFFAGangZoneText(id);
}



stock FFACheckGangZoneStates()
{
	forLoop(id, MAX_FFA_ZONES)
	{
		if(FFAGangZones[id][Exists])
		{
		    new owner = FFAGangZones[id][Captured];
		    //new ownerlocal = getFFAGangID(FFAGangZones[id][Captured]);
		    new ownercount = FFAGetAreaPlayers(id, owner);
		    new inzone = 0;
			new count = 0;
			new neutralscount = FFAGetAreaPlayers(id, 0);
			new highestgangid = owner;
			//new highestgangidlocal = owner;
			new highestgangcount = ownercount;

			inzone+=neutralscount;
			inzone+=ownercount;
		    forLoop(i, MAX_FFA_GANGS)
    		{
				if(GangInfo[i][Exists] && GangInfo[i][ID] != owner)
				{
				    count = FFAGetAreaPlayers(id, GangInfo[i][ID]);
				    inzone += count;
				    if(count > highestgangcount)
				    {
				        highestgangcount = count;
				        //highestgangidlocal = i;
				        highestgangid = GangInfo[i][ID];
					}
				}
			}
			if(inzone == 0)
			{
			    FFAGangZoneNormalize(id);
			   	continue;
			}
			if(neutralscount > highestgangcount)
			{
				highestgangid = 0;
			    highestgangcount = neutralscount;
			}
			if(owner != highestgangid)
			{
			    if(highestgangcount > ownercount || highestgangcount < ownercount)
			    {
			    	FFAGangZones[id][State] = 1;
			    	if(FFAGangZones[id][Announce] == 0)
			    	{
			    		FFAGangZones[id][Announce] = 1;
		        		FFAFlashGZ(id, highestgangid);
						/*new st[128];
						if(highestgangid == 0)
						{
				    		format(st, sizeof(st), "[NEWS] %s is being neutralized!",FFAGangZones[id][Name]);
							db_SaveChat(-1, FFA,st);
							format(st,128,"{33FF33}NEWS:{FFFFFF} %s is being neutralized!",FFAGangZones[id][Name]);
							SendMessageToMode(FFA,white,st);
						}
						else
						{
				    		format(st, sizeof(st), "[NEWS] %s is being captured by %s!",FFAGangZones[id][Name],GangInfo[highestgangidlocal][gName]);
							db_SaveChat(-1, FFA,st);
                            if(owner == 0)
                            {
								format(st,128,"{33FF33}NEWS: {FFFF00}%s {FFFFFF}is being captured by {%s}%s!",FFAGangZones[id][Name],GangInfo[highestgangidlocal][gColHex],GangInfo[highestgangidlocal][gName]);
								SendMessageToMode(FFA,white,st);
							}
							else
							{
								format(st,128,"{33FF33}NEWS: {%s}%s {FFFFFF}is being captured by {%s}%s!",GangInfo[ownerlocal][gColHex],FFAGangZones[id][Name],GangInfo[highestgangidlocal][gColHex],GangInfo[highestgangidlocal][gName]);
								SendMessageToMode(FFA,white,st);
							}
						}*/
					}
				}
				
			    if(highestgangcount > ownercount)
			    {
			        if(--FFAGangZones[id][cTime] == 0)
    	            {
    	                FFASetGangZoneTeam(id, highestgangid);
    	                FFAGangZoneNormalize(id);
					}
			    }
			    else
			    {
			        if(++FFAGangZones[id][cTime] >= FFA_CAPTURE_TIME)
    	            {
    	                FFAGangZoneNormalize(id);
					}
			    }
			}
			else
			{
			    FFAGangZoneNormalize(id);
			    continue;
			}
    		FFACountDownAreaPlayers(id, owner, highestgangid);
		}
	}
}

stock FFAGangZoneNormalize(id)
{
    FFAGangZones[id][State] = 0;
    FFAGangZones[id][cTime] = FFA_CAPTURE_TIME;
    if(FFAGangZones[id][Announce] == 1)
	{
		FFAGangZones[id][Announce] = 0;
		FFAStopFlashGZ(id);
		GangZoneHideFor(FFA,FFAGangZones[id][gZone]);
		FFAGangZoneShow(id);
	}
}

stock FFAGangZoneShow(id)
{
	if(FFAGangZones[id][Captured] == 0)
    	GangZoneShowFor(FFA,FFAGangZones[id][gZone], 0xFFFF00AA);
    else
    	GangZoneShowFor(FFA,FFAGangZones[id][gZone],GangInfo[getFFAGangID(FFAGangZones[id][Captured])][Color]);
}

stock UpdateFFAGangZoneText(i, save = true)
{
    new string[188];
	if(FFAGangZones[i][Captured] == 0)
	    format(string,sizeof(string),"[{FFFFFF}%s - {CCCCCC}%d{FF0000}]\n\n{FFFFFF}[{FFFF00}Neutral{FFFFFF}]",FFAGangZones[i][Name], FFAGangZones[i][ID]);
    else
    {
        new capturelocal = getFFAGangID(FFAGangZones[i][Captured]);
		format(string,sizeof(string),"[{FFFFFF}%s - {CCCCCC}%d{FF0000}]\n\n{FFFFFF}[{%s}%s{FFFFFF}]",FFAGangZones[i][Name], FFAGangZones[i][ID], GangInfo[capturelocal][gColHex], GangInfo[capturelocal][gName]);
	}
	UpdateDynamic3DTextLabelText(FFAGangZones[i][pLabel], 0xFF0000AA, string);
	if(save)SaveFFAZone(i);
}
stock SaveFFAZone(i)
{
	new d_query[256], sentinel[50];
    if(FFAGangZones[i][Exists])
    {
        if(FFAGangZones[i][ID] != 0)
        {
	        format(sentinel, sizeof sentinel, "ID = %d",FFAGangZones[i][ID]);
			mysql_format(ServerInfo[DataBase], d_query, sizeof d_query, "NAME='%e',CAPTURED=%d,GX=%d,GY=%d,GZ=%d"
			,FFAGangZones[i][Name],FFAGangZones[i][Captured],FFAGangZones[i][GX],FFAGangZones[i][GY],FFAGangZones[i][GZ]);
	        db_UpdateTable("FFA_ZONES", d_query, sentinel);
        }
        else
        {
            mysql_format(ServerInfo[DataBase], d_query, sizeof d_query, "'%e',%d,%d,%d,%d"
			,FFAGangZones[i][Name],FFAGangZones[i][Captured],FFAGangZones[i][GX],FFAGangZones[i][GY],FFAGangZones[i][GZ]);
	        
	        new Cache: cache_id;
		    format(d_query, sizeof d_query, "INSERT INTO FFA_ZONES (NAME,CAPTURED,GX,GY,GZ) VALUES (%s)",d_query);
            cache_id = mysql_query(ServerInfo[DataBase], d_query, true);
			FFAGangZones[i][ID] = cache_insert_id();
	        cache_delete(cache_id);
        }
	}
	else
	{
	    if(FFAGangZones[i][ID] > 0)
        {
            format(sentinel, sizeof sentinel, "ID = %d",FFAGangZones[i][ID]);
			db_DropFromTable("FFA_ZONES", sentinel);
            FFAGangZones[i][ID] = 0;
        }
	}
}
stock FFADestroyGangZone(id)
{
    GangZoneDestroy(FFAGangZones[id][gZone]);
    DestroyTheDynamicArea(FFAGangZones[id][AreaID]);
	DestroyTheDynamic3DTextLabel(FFAGangZones[id][pLabel]);
	DestroyTheDynamicMapIcon(FFAGangZones[id][MapIcon]);
    DestroyTheDynamicObject(FFAGangZones[id][Object]);
    FFAGangZones[id][AreaID] = -1;
    FFAGangZones[id][gZone] = -1;
    FFAGangZones[id][Exists] = 0;
    FFAGangZones[id][ID] = 0;
    FFAGangZones[id][Captured] = 0;
    FFAGangZones[id][State] = 0;
    FFAGangZones[id][Announce] = 0;
    
    forLoop(i, MAX_FFA_GANGS_ALL)
    	FFAGangZones[id][InZoneCount][i] = 0;
}

stock FFACreateGangZone(name[], gid, team, x, y, z)
{
    new id = -1;
    forLoop(i, MAX_FFA_ZONES)
    {
    	if(FFAGangZones[i][Exists] == 0)
    	{
    	    id = i;
    	    break;
    	}
   	}
   	if(id != -1)
   	{
   	    FFADestroyGangZone(id);
		format(FFAGangZones[id][Name], 50, "%s", name);
		FFAGangZones[id][ID] = gid;
		FFAGangZones[id][Exists] = 1;
		FFAGangZones[id][State] = 0;
		FFAGangZones[id][Captured] = team;
		FFAGangZones[id][GX] = x;
		FFAGangZones[id][GY] = y;
		FFAGangZones[id][GZ] = z;
		FFAGangZones[id][cTime] = FFA_CAPTURE_TIME;
		
		new gangID = getFFAGangID(FFAGangZones[id][Captured]);
        if(GangInfo[gangID][Exists] != 1)
		 	FFAGangZones[id][Captured] = 0;

		FFAGangZones[id][AreaID] = CreateDynamicSphere(x, y, z, 50.0, W_FFA, -1, -1);
	    FFAGangZones[id][gZone] = GangZoneCreate(x-70, y-70, x+70, y+70);
	    FFAGangZoneShow(id);
		FFAGangZones[id][pLabel]=CreateDynamic3DTextLabel("lele",0xFFFFFFAA,x, y, z+1, 80, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, W_FFA, -1, -1, 100);
		FFAGangZones[id][MapIcon] = CreateDynamicMapIcon(x, y, z, 19, 1 , W_FFA, -1, -1, 100.0);
		FFAGangZones[id][Object] = CreateTheDynamicObject(11245, x, y, z, 0.0000, -70.0, 0.0000, W_FFA, -1);
	   	UpdateFFAGangZoneText(id, false);
	}
	return id;
}

stock LoadFFAZones()
{
    maxFFAzones=0;
	forLoop(u, MAX_FFA_ZONES)
	{
	    FFADestroyGangZone(u);
	}

	new loop_breaker, Cache: cache_id, row, dest[50], gid, team, x, y, z;
	cache_id = mysql_query(ServerInfo[DataBase], "SELECT * FROM FFA_ZONES", true);
	forLoopV(i, 1, cache_num_rows())
	{
		if(breakLoop(++loop_breaker, "LoadFFAZones"))break;
	    maxFFAzones++;
        row = i-1;
        
	    cache_get_value_name(row, "NAME", dest);
		cache_get_value_name_int(row, "ID", gid);
		cache_get_value_name_int(row, "CAPTURED", team);
		cache_get_value_name_int(row, "GX", x);
		cache_get_value_name_int(row, "GY", y);
		cache_get_value_name_int(row, "GZ", z);
		FFACreateGangZone(dest, gid, team, x, y, z);
	}
	cache_delete(cache_id);
    
 	printf("FFA Gang zone manager: %d gang zones have been loaded.",maxFFAzones);
 	return 1;
}

stock SaveTWSquad(i)
{
	new d_query[256], sentinel[50];
    if(SquadInfo[i][Exists])
    {
		if(SquadInfo[i][ID] != 0)
		{
		    format(sentinel, sizeof sentinel, "ID = %d",SquadInfo[i][ID]);
			mysql_format(ServerInfo[DataBase], d_query, sizeof d_query, "NAME = '%e', LEADER_ID = %d",SquadInfo[i][sName],SquadInfo[i][LeaderID]);
	        db_UpdateTable("TW_SQUADS", d_query, sentinel);
		}
		else
		{
		    mysql_format(ServerInfo[DataBase], d_query, sizeof d_query, "'%e',%d",SquadInfo[i][sName],SquadInfo[i][LeaderID]);

	        new Cache: cache_id;
		    format(d_query, sizeof d_query, "INSERT INTO TW_SQUADS (NAME,LEADER_ID) VALUES (%s)",d_query);
            cache_id = mysql_query(ServerInfo[DataBase], d_query, true);
			SquadInfo[i][ID] = cache_insert_id();
	        cache_delete(cache_id);
		}
	}
	else
	{
	    if(SquadInfo[i][ID] > 0)
	    {
            format(sentinel, sizeof sentinel, "ID = %d",SquadInfo[i][ID]);
			db_DropFromTable("TW_SQUADS", sentinel);
	        SquadInfo[i][ID] = 0;
	    }
	}
}

stock LoadTWSquads()
{
	forLoop(i, MAX_TW_SQUADS)
	{
		SquadInfo[i][Exists]=0;
		SquadInfo[i][ID]=0;
	}
	
	new loop_breaker, str[100], Cache: cache_id, Cache: m_cache_id, row, dest[50], twsquads, rows;
	cache_id = mysql_query(ServerInfo[DataBase], "SELECT * FROM TW_SQUADS", true);
    rows = cache_num_rows();
	forLoopV(i, 1, rows+1)
	{
		if(breakLoop(++loop_breaker, "LoadTWSquads"))break;
	    twsquads++;
        SquadInfo[i][Exists] = 1;
        row = i-1;
	    cache_get_value_name(row, "NAME", dest);
		format(SquadInfo[i][sName], 50, "%s",dest);

		cache_get_value_name_int(row, "ID", SquadInfo[i][ID]);
		cache_get_value_name_int(row, "LEADER_ID", SquadInfo[i][LeaderID]);

        format(str, sizeof str, "SELECT COUNT(*) AS COUNT FROM USERS WHERE TW_SQUAD_ID = %d",SquadInfo[i][ID]);
		m_cache_id = mysql_query(ServerInfo[DataBase], str, true);
		cache_get_value_name_int(0, "COUNT", SquadInfo[i][Members]);
		cache_delete(m_cache_id);
		
		format(SquadInfo[i][Leader],50, "%s",db_ReturnUserName(SquadInfo[i][LeaderID]));
		cache_set_active(cache_id);
	}
	cache_delete(cache_id);
 	printf("TW Squad manager: %d squads have been loaded.",twsquads);
 	return 1;
}

stock TWSquadCount()
{
    new squads;
	forLoop(id, MAX_TW_SQUADS)
	{
		if(SquadInfo[id][Exists])
	    	squads++;
	}
	return squads;
}
stock getTWSquadID(id)
{
	new sid = 0;
    forLoop(g, MAX_TW_SQUADS)
	{
	    if(SquadInfo[g][Exists])
		{
		    if(SquadInfo[g][ID] == id)
			{
			    sid = g;
			    break;
			}
		}
	}
	return sid;
}
stock SaveSFCMDS()
{
	//printf("DEBUG CFONTROL SaveSFCMDS 1");
    new File:fwhnd;
    fwhnd=fopen("/pangea/SF_cmds.ini",io_write);
	new string[256];
    forLoop(id, MAX_SF_CMDS)
	{
	    if(CmdInfo[id][Exists])
	    {
		    format(string,sizeof string,"%s|%s|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d"
			,CmdInfo[id][cName],CmdInfo[id][Description],CmdInfo[id][Exists],CmdInfo[id][Interior],CmdInfo[id][Money],CmdInfo[id][OnFoot]
			,CmdInfo[id][cSpawnX],CmdInfo[id][cSpawnY],CmdInfo[id][cSpawnZ],CmdInfo[id][cAngle],CmdInfo[id][Weap1],CmdInfo[id][Ammo1]
			,CmdInfo[id][Weap2],CmdInfo[id][Ammo2],CmdInfo[id][Weap3],CmdInfo[id][Ammo3],CmdInfo[id][Weap4],CmdInfo[id][Ammo4]);
		    fwrite(fwhnd,string);
			fwrite(fwhnd,"\r\n");
		}
	}
	fclose(fwhnd);
	//printf("DEBUG CFONTROL SaveSFCMDS 2");
}
stock LoadSFCMDS()
{
	//printf("DEBUG CFONTROL LoadSFCMDS 1");
    maxSFcmds=0;
    forLoop(i, MAX_SF_CMDS)
	{
	    CmdInfo[i][Exists]=0;
	}

	new File:file_ptr;
	new line[256];
	new id;
    file_ptr = fopen("/pangea/SF_cmds.ini", io_read);
	if(!file_ptr) return 0;

	new loop_breaker;
	while(fread(file_ptr,line, sizeof(line)) > 0)
	{
		if(id >= MAX_SF_CMDS)break;
		//printf("loop at LoadSFCMDS, counter val %d",loop_breaker);
		if(breakLoop(++loop_breaker, "LoadSFCMDS"))break;
	    id++;
	    maxSFcmds++;
  		sscanf(line,"p<|>s[50]s[50]dddddddddddddddd"
		,CmdInfo[id][cName],CmdInfo[id][Description],CmdInfo[id][Exists],CmdInfo[id][Interior],CmdInfo[id][Money],CmdInfo[id][OnFoot]
		,CmdInfo[id][cSpawnX],CmdInfo[id][cSpawnY],CmdInfo[id][cSpawnZ],CmdInfo[id][cAngle],CmdInfo[id][Weap1],CmdInfo[id][Ammo1]
		,CmdInfo[id][Weap2],CmdInfo[id][Ammo2],CmdInfo[id][Weap3],CmdInfo[id][Ammo3],CmdInfo[id][Weap4],CmdInfo[id][Ammo4]);
	}

	fclose(file_ptr);

    maxSFcmds++;
 	printf("S&F cmd manager: %d cmds have been loaded.",id);
	//printf("DEBUG CFONTROL LoadSFCMDS 2");
 	return 1;
}

stock CreateEvent(playerid,event)
{
	//printf("DEBUG CFONTROL CreateEvent 1 pid %d eid %d",playerid,event);
    new string[228];
    event = getTheEventID(event);
    if(EventInfo[event][Money] != 0)
	{
	    if(EventInfo[event][Money] > GetThePlayerMoney(playerid))
	    {
		    format(string,sizeof(string),"{FF0000}Error:{FFFFFF} This event requires at least $%d for you to pay (You don't have enough).", EventInfo[event][Money]);
			return SendClientMessage(playerid,red1,string);
		}
		else
		{
		    GiveThePlayerMoney(playerid, -EventInfo[event][Money]);
			format(string,sizeof(string),"{FF0000}MINIGAME:{FFFFFF} %s(ID:%d)has started the %s(ID:%d) event. Use /ejoin to join now, /bet to bet! - [$%d]",PlayerInfo[playerid][Name],playerid,EventInfo[event][eName],EventInfo[event][ID], EventInfo[event][Money]);
		 	SendMessageToMode(STUNT,red1, string);
			format(string, sizeof(string), "[MINIGAME] %s[%d] has started the '%s' event! - [$%d]",PlayerInfo[playerid][Name],playerid,EventInfo[event][eName], EventInfo[event][Money]);
			db_SaveChat(-1, STUNT,string);
		}
	}
	else
	{
	    format(string,sizeof(string),"{FF0000}MINIGAME:{FFFFFF} %s(ID:%d)has started the %s(ID:%d) event. Use /ejoin to join now, /bet to bet!",PlayerInfo[playerid][Name],playerid,EventInfo[event][eName],EventInfo[event][ID]);
	 	SendMessageToMode(STUNT,red1, string);
		format(string, sizeof(string), "[MINIGAME] %s[%d] has started the '%s' event!",PlayerInfo[playerid][Name],playerid,EventInfo[event][eName]);
		db_SaveChat(-1, STUNT,string);
	}
	forLoop(i,MAX_EVENT_SPOTS) EventInfo[event][PlaceTaken][i]=0;
    EventInfo[event][Started]=1;
	EventInfo[event][State]=0;
 	EventInfo[event][eCountDown] = 36;
 	//CountDownForEvent(event);
 	SetTimerEx("CountDownForEvent", 1000, false, "i", event);
	LoadEventStuff(event);
	JoinEvent(playerid,EventInfo[event][ID]);
	return 1;
}
stock JoinEvent(playerid,event)
{
	//printf("DEBUG CFONTROL JoinEvent 1 pid %d eid %d",playerid,event);
    FixBeforeSpawn(playerid);
    TogglePlayerControllable(playerid,false);
	SetPlayerInterior(playerid,0);
	ResetWeapons(playerid);
	SetHealth(playerid,99.0);
	event = getTheEventID(event);
	SFPlayerInfo[playerid][Event] = EventInfo[event][ID];
	SetPlayerWorldBounds(playerid, 999999999.9, -99999999.9, 99999999.9, -99999999.9 );
    SendClientMessage( playerid,red1,"{FF0000}MINIGAME:{FFFFFF} Wait for the event to start.");
    forLoop(i, 10)
    {
		RemovePlayerAttachedObjectEx(playerid, i);
	}
	new place=0;
    forLoop(i,MAX_EVENT_SPOTS)
    {
        if(EventInfo[event][PlaceTaken][i]==0)
        {
            place=i;
            EventInfo[event][PlaceTaken][i] =1;
            SFPlayerInfo[playerid][EventSpot] = i;
            break;
        }
    }

	if(EventInfo[event][eSkin]>0) SetPlayerSkin(playerid, EventInfo[event][eSkin]);
    if(EventInfo[event][FightStyle]>0)SetPlayerFightingStyle(playerid, EventInfo[event][FightStyle]);
    SetPlayerInterior(playerid,EventInfo[event][Interior]);
    SetPlayerVirtualWorld(playerid,EventInfo[event][World]);
    SetHealth(playerid,EventInfo[event][Health]);
	SetArmor(playerid,EventInfo[event][Armor]);
	if(EventInfo[event][WorldBounds]==1)SetPlayerWorldBounds(playerid, EventInfo[event][WB_MaxX], EventInfo[event][WB_MinX], EventInfo[event][WB_MaxY], EventInfo[event][WB_MinY]);
    GivePlayerWeapons(playerid,EventInfo[event][Weap1],EventInfo[event][Ammo1],EventInfo[event][Weap2],EventInfo[event][Ammo2],EventInfo[event][Weap3],EventInfo[event][Ammo3],EventInfo[event][Weap4],EventInfo[event][Ammo4]);
	if(EventInfo[event][OnFoot]==1)
    	SetPlayerPosEx(playerid,EventInfo[event][eSpawnX][place],EventInfo[event][eSpawnY][place],EventInfo[event][eSpawnZ][place], EventInfo[event][eAngle][place]);
	else PlacePlayerInVehicle(playerid,EventInfo[event][Vehicles][place],0);

	if(EventInfo[event][Checkpoint]==1)
		SetPlayerRaceCheckpoint(playerid, EventInfo[event][C_Type], EventInfo[event][C_X],EventInfo[event][C_Y],EventInfo[event][C_Z], 0,0,0,EventInfo[event][C_Size]);

	SetCameraBehindPlayer(playerid);

    new st4[228];
	format(st4,sizeof(st4),"{FF0000}MINIGAME:{FFFFFF} %s(ID:%d) has joined the %s(ID:%d) event. Players in event: %d.",PlayerInfo[playerid][Name],playerid,EventInfo[event][eName],EventInfo[event][ID],InEventCount(EventInfo[event][ID]));
	SendMessageToMode(STUNT,red1, st4);
	format(st4, sizeof(st4), "[MINIGAME] %s[%d] has joined the '%s' event! Players in event: %d.",PlayerInfo[playerid][Name],playerid,EventInfo[event][eName],InEventCount(EventInfo[event][ID]));
	db_SaveChat(-1, STUNT,st4);
	//printf("DEBUG CFONTROL JoinEvent 2 pid %d eid %d",playerid,event);
}
stock DeleteEventStuff(eid)
{
	forLoop(id, MAX_EVENT_SPOTS)
    {
    	if(EventInfo[eid][Vehicles][id] != -1)DestroyVehicle(EventInfo[eid][Vehicles][id]);
    	EventInfo[eid][Vehicles][id] = -1;
    }
	forLoop(id, MAX_EVENT_OBJECTS)
    {
    	if(EventInfo[eid][Objects][id] != -1)DestroyTheDynamicObject(EventInfo[eid][Objects][id]);
    	EventInfo[eid][Objects][id] = -1;
    }
}

stock InEventCount(id)
{
	new warCount;
	forLoop(i, MAX_PLAYERS) if(IsPlayerConnected(i) && SFPlayerInfo[i][Event] == id && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][PlayerMode] == STUNT && !IsPlayerNPC(i))	warCount++;
	return warCount;
}
stock EventsCount()
{
	new warCount;
	forLoop(i,MAX_EVENTS) if(EventInfo[i][Exists] && EventInfo[i][Started])	warCount++;
	return warCount;
}
stock nStartedEventsCount()
{
	new warCount;
	forLoop(i,MAX_EVENTS) if(EventInfo[i][Exists] && EventInfo[i][Started] && !EventInfo[i][State])	warCount++;
	return warCount;
}

stock getTheEventID(id)
{
	new eid = 0;
    forLoop(i,MAX_EVENTS)
	{
	    if(EventInfo[i][Exists])
		{
		    if(EventInfo[i][ID] == id)
			{
			    eid = i;
			    break;
			}
		}
	}
	return eid;
}

stock SaveSFEvent(id)
{
	new d_query[126];
    if(EventInfo[id][Exists])
    {
	    format(d_query, sizeof d_query, "UPDATE EVENTS SET POPULARITY=%d WHERE ID = %d",EventInfo[id][Popularity],EventInfo[id][ID]);
		mysql_tquery(ServerInfo[DataBase], d_query, "", "");
	}
}
stock SaveSFEvents()
{
	for (new id = 1; id < maxSFevents; id++) SaveSFEvent(id);
}

stock LoadSFEvents()
{
	maxSFevents=0;
	for (new i = 0; i < MAX_EVENTS; i++)
	{
		DeleteEventStuff(i);
		EventInfo[i][ID]=0;
		EventInfo[i][Exists]=0;
	}
    new loop_breaker, Cache: cache_id, dest[50], row;
	cache_id = mysql_query(ServerInfo[DataBase], "SELECT * FROM EVENTS WHERE APPROVED != 0", true);
    forLoopV(id, 1, cache_num_rows()+1)
    {
		if(breakLoop(++loop_breaker, "LoadSFEvents"))break;
        if(++maxSFevents >= MAX_EVENTS)
		{
			printf("ERROR: SF EVENT NAME: %s- EVENT LIMIT REACHED!!");
			break;
		}
		row = id - 1;
		EventInfo[id][Exists] = 1;
	    cache_get_value_name(row, "NAME", dest);
		format(EventInfo[id][eName], 50, "%s",dest);
	    cache_get_value_name(row, "THE_DATE", dest);
		format(EventInfo[id][Date], 50, "%s",dest);
		cache_get_value_name_int(row, "ID", EventInfo[id][ID]);
		cache_get_value_name_int(row, "USER_ID", EventInfo[id][UserID]);
		cache_get_value_name_int(row, "MAX_PLAYERS", EventInfo[id][MaxPlayers]);
		cache_get_value_name_int(row, "POPULARITY", EventInfo[id][Popularity]);
		cache_get_value_name_int(row, "TYPE", EventInfo[id][Type]);
		cache_get_value_name_int(row, "SKIN", EventInfo[id][eSkin]);
		cache_get_value_name_int(row, "BOOST", EventInfo[id][SpeedBoost]);
		cache_get_value_name_int(row, "HEALTH", EventInfo[id][Health]);
		cache_get_value_name_int(row, "ARMOR", EventInfo[id][Armor]);
		cache_get_value_name_int(row, "INTERIOR", EventInfo[id][Interior]);
		cache_get_value_name_int(row, "WORLD", EventInfo[id][World]);
		cache_get_value_name_int(row, "ON_FOOT", EventInfo[id][OnFoot]);
		cache_get_value_name_int(row, "FSTYLE", EventInfo[id][FightStyle]);
		cache_get_value_name_int(row, "BOUNDS", EventInfo[id][WorldBounds]);
		cache_get_value_name_int(row, "WB_MAXX", EventInfo[id][WB_MaxX]);
		cache_get_value_name_int(row, "WB_MINX", EventInfo[id][WB_MinX]);
		cache_get_value_name_int(row, "WB_MAXY", EventInfo[id][WB_MaxY]);
		cache_get_value_name_int(row, "WB_MINY", EventInfo[id][WB_MinY]);
		cache_get_value_name_int(row, "C_POINT", EventInfo[id][Checkpoint]);
		cache_get_value_name_int(row, "C_TYPE", EventInfo[id][C_Type]);
		cache_get_value_name_int(row, "C_X", EventInfo[id][C_X]);
		cache_get_value_name_int(row, "C_Y", EventInfo[id][C_Y]);
		cache_get_value_name_int(row, "C_Z", EventInfo[id][C_Z]);
		cache_get_value_name_int(row, "C_SIZE", EventInfo[id][C_Size]);
		cache_get_value_name_int(row, "WEAP_1", EventInfo[id][Weap1]);
		cache_get_value_name_int(row, "AMMO_1", EventInfo[id][Ammo1]);
		cache_get_value_name_int(row, "WEAP_2", EventInfo[id][Weap2]);
		cache_get_value_name_int(row, "AMMO_2", EventInfo[id][Ammo2]);
		cache_get_value_name_int(row, "WEAP_3", EventInfo[id][Weap3]);
		cache_get_value_name_int(row, "AMMO_3", EventInfo[id][Ammo3]);
		cache_get_value_name_int(row, "WEAP_4", EventInfo[id][Weap4]);
		cache_get_value_name_int(row, "AMMO_4", EventInfo[id][Ammo4]);
		cache_get_value_name_int(row, "NO_EXIT_VEHS", EventInfo[id][NoExitVehs]);
		cache_get_value_name_int(row, "MONEY", EventInfo[id][Money]);
		format(EventInfo[id][Author], 50, "%s",db_ReturnUserName(EventInfo[id][UserID]));
		cache_set_active(cache_id);
    }
	cache_delete(cache_id);
 	maxSFevents++;
	printf("S&F event manager: %d events have been loaded.",maxSFevents);
	return 1;
}

stock LoadEventObjects(eid)
{
    new Cache: cache_id, d_query[256], rows;
	new loop_breaker, model, Float:ObjX, Float:ObjY, Float:ObjZ, Float:ObjRot1, Float:ObjRot2, Float:ObjRot3;

	mysql_format(ServerInfo[DataBase], d_query, sizeof d_query, "SELECT * FROM EVENTS_OBJECTS WHERE ID=%d LIMIT %d",EventInfo[eid][ID],MAX_EVENT_OBJECTS+1);
    cache_id = mysql_query(ServerInfo[DataBase], d_query, true);
	rows = cache_num_rows();
	if(rows == 0)
	{
    	cache_delete(cache_id);
    	return 1;
	}
	forLoop(id, rows)
	{
	    if(breakLoop(++loop_breaker, "LoadEventObjects"))break;
	    if(id >= MAX_EVENT_OBJECTS)
		{
			printf("ERROR: SF EVENT NAME %s (ID %d)-OBJECT LIMIT REACHED",EventInfo[eid][eName],EventInfo[eid][ID]);
			break;
		}
		cache_get_value_name_int(id, "MODEL", model);
		cache_get_value_name_float(id, "OBJ_X", ObjX);
		cache_get_value_name_float(id, "OBJ_Y", ObjY);
		cache_get_value_name_float(id, "OBJ_Z", ObjZ);
		cache_get_value_name_float(id, "ROT1", ObjRot1);
		cache_get_value_name_float(id, "ROT2", ObjRot2);
		cache_get_value_name_float(id, "ROT3", ObjRot3);
		EventInfo[eid][Objects][id]=CreateTheDynamicObject(model, ObjX, ObjY, ObjZ, ObjRot1, ObjRot2, ObjRot3 ,EventInfo[eid][World]);
	}
    cache_delete(cache_id);
	return 1;
}

stock LoadEventSpawns(eid)
{
    new Cache: cache_id, d_query[256], rows, loop_breaker;
	mysql_format(ServerInfo[DataBase], d_query, sizeof d_query, "SELECT * FROM EVENTS_SPAWNS WHERE ID=%d LIMIT %d",EventInfo[eid][ID],MAX_EVENT_SPOTS+1);
    cache_id = mysql_query(ServerInfo[DataBase], d_query, true);
	rows = cache_num_rows();
	if(rows == 0)
	{
    	cache_delete(cache_id);
    	return 1;
	}
	forLoop(id, rows)
	{
	    if(breakLoop(++loop_breaker, "LoadEventSpawns"))break;
	    if(id >= MAX_EVENT_SPOTS)
		{
			printf("ERROR: SF EVENT NAME %s (ID %d)- MAX_EVENT_SPOTS LIMIT REACHED",EventInfo[eid][eName],EventInfo[eid][ID]);
			break;
		}
		cache_get_value_name_float(id, "S_X", EventInfo[eid][eSpawnX][id]);
		cache_get_value_name_float(id, "S_Y", EventInfo[eid][eSpawnY][id]);
		cache_get_value_name_float(id, "S_Z", EventInfo[eid][eSpawnZ][id]);
		cache_get_value_name_float(id, "S_ANG", EventInfo[eid][eAngle][id]);
	}
    cache_delete(cache_id);
	return 1;
}

stock LoadEventVehicles(eid)
{
    new Cache: cache_id, d_query[256], rows, loop_breaker;
	new model, Float:SpawnX, Float:SpawnY, Float:SpawnZ, Float:SpawnRot, Color1, Color2;
    
	mysql_format(ServerInfo[DataBase], d_query, sizeof d_query, "SELECT * FROM EVENTS_CARS WHERE ID=%d LIMIT %d",EventInfo[eid][ID],MAX_EVENT_SPOTS+1);
    cache_id = mysql_query(ServerInfo[DataBase], d_query, true);
	rows = cache_num_rows();
	if(rows == 0)
	{
    	cache_delete(cache_id);
    	return 1;
	}
	forLoop(id, rows)
	{
	    if(breakLoop(++loop_breaker, "LoadEventObjects"))break;
	    if(id >= MAX_EVENT_SPOTS)
		{
			printf("ERROR: SF EVENT NAME %s (ID %d)- CARS MAX_EVENT_SPOTS LIMIT REACHED",EventInfo[eid][eName],EventInfo[eid][ID]);
			break;
		}
		cache_get_value_name_int(id, "MODEL", model);
		cache_get_value_name_float(id, "S_X", SpawnX);
		cache_get_value_name_float(id, "S_Y", SpawnY);
		cache_get_value_name_float(id, "S_Z", SpawnZ);
		cache_get_value_name_float(id, "S_ROT", SpawnRot);
		cache_get_value_name_int(id, "COL_1", Color1);
		cache_get_value_name_int(id, "COL_2", Color2);
		
		EventInfo[eid][Vehicles][id]=AddStaticVehicle(model,SpawnX,SpawnY,SpawnZ,SpawnRot,Color1,Color2);
		SetVehicleVirtualWorld(EventInfo[eid][Vehicles][id],EventInfo[eid][World]);
    	LinkVehicleToInterior(EventInfo[eid][Vehicles][id],EventInfo[eid][Interior]);
    	AddVehicleComponent(EventInfo[eid][Vehicles][id], 1010);
    	SetVehicleNumberPlate(EventInfo[eid][Vehicles][id], ServerInfo[lPlate]);
	}
    cache_delete(cache_id);
	return 1;
}

stock LoadEventStuff(id)
{
    DeleteEventStuff(id);
    LoadEventObjects(id);
	LoadEventSpawns(id);
	LoadEventVehicles(id);
	return 1;
}


forward CountDownForEvent(id);
public CountDownForEvent(id)
{
	if(EventInfo[id][Started] && !EventInfo[id][State])
	{
	    if(InEventCount(EventInfo[id][ID]) >= 1)
		{
			EventInfo[id][eCountDown]--;
			if(EventInfo[id][eCountDown]<=0)
			{
				EventInfo[id][eCountDown] = -1;
				//printf("DEBUG CFONTROL CountDownForEvent 1");
				if(InEventCount(EventInfo[id][ID]) < 2)
				{
					new string[128];
					format(string,sizeof(string),"{FF0000}MINIGAME:{FFFFFF} The %s(ID:%d) event has been canceled for not having enough players!",EventInfo[id][eName],EventInfo[id][ID]);
				 	SendMessageToMode(STUNT,red1, string);
				 	format(string, sizeof(string), "[MINIGAME] The %s event has been canceled for not having enough players!",EventInfo[id][eName]);
					db_SaveChat(-1, STUNT,string);
				 	EventInfo[id][Started]=0;
	 				forLoop(i, MAX_PLAYERS)
					{
						if(IsPlayerConnected(i) && PlayerInfo[i][PlayerMode] == STUNT)
						{
						    if(SFPlayerInfo[i][Event] == EventInfo[id][ID])
						    {
								SFPlayerInfo[i][Event]=0;
								A_SpawnPlayer(i);
							}
							if(SFPlayerInfo[i][BetpID][id]>-1)
							{
							    SFPlayerInfo[i][BetpID][id]=-1;
							    SFPlayerInfo[i][BetAmount][id]=0;
							}
						}
					}
					DeleteEventStuff(id);
					return 0;
				}
				else
				{
					forLoop(i, MAX_PLAYERS) if(IsPlayerConnected(i) && PlayerInfo[i][PlayerMode] == STUNT && SFPlayerInfo[i][Event] == EventInfo[id][ID])
					{
						TogglePlayerControllable(i,true);
						PlayerPlaySound(i, 1057, 0.0, 0.0, 0.0);
						GameTextForPlayer(i,"~b~GO GO GO~ w~!",2000,3);
						if(EventInfo[id][SpeedBoost]==1)
						{
							new Float:a,Float:x,Float:y,Float:z;
							GetVehicleZAngle(GetPlayerVehicleID(i),a);
							GetVehicleVelocity(GetPlayerVehicleID(i),x,y,z);
							SetVehicleVelocity(GetPlayerVehicleID(i),x + (1 * floatsin(-a, degrees)),y + (1 * floatcos(-a, degrees)),z);
						}
					}
					new string[128];
					format(string,sizeof(string),"{FF0000}MINIGAME:{FFFFFF} The %s(ID:%d) event has started!",EventInfo[id][eName],EventInfo[id][ID]);
				 	SendMessageToMode(STUNT,red1, string);
				 	format(string, sizeof(string), "[MINIGAME] The %s event has started!",EventInfo[id][eName]);
					db_SaveChat(-1, STUNT,string);
				 	EventInfo[id][State] = 1;
				}
				//printf("DEBUG CFONTROL CountDownForEvent 2");
				return 0;
			}
			else
			{
				new text[7];
				format(text,sizeof(text),"~w~%d",EventInfo[id][eCountDown]);
				if(EventInfo[id][eCountDown]<=6) format(text,sizeof(text),"~r~%d",EventInfo[id][eCountDown]);
				forLoop(i, MAX_PLAYERS) if(IsPlayerConnected(i) && PlayerInfo[i][PlayerMode] == STUNT && SFPlayerInfo[i][Event] == EventInfo[id][ID])
				{
					if(EventInfo[id][State]==1)PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
					TogglePlayerControllable(i,false);
					GameTextForPlayer(i,text,2000,3);
				}

			}
			SetTimerEx("CountDownForEvent", 1000, false, "i", id);
			return 0;
		}
		else
		{
			//printf("DEBUG CFONTROL CountDownForEvent 1.1");
		    new string[128];
			format(string,sizeof(string),"{FF0000}MINIGAME:{FFFFFF} The %s(ID:%d) event has been canceled for not having enough players!",EventInfo[id][eName],EventInfo[id][ID]);
		 	SendMessageToMode(STUNT,red1, string);
		 	format(string, sizeof(string), "[MINIGAME] The %s event has been canceled for not having enough players!",EventInfo[id][eName]);
			db_SaveChat(-1, STUNT,string);
		 	EventInfo[id][Started]=0;
	 		forLoop(i, MAX_PLAYERS)
			{
				if(IsPlayerConnected(i) && PlayerInfo[i][PlayerMode] == STUNT)
				{
				    if(SFPlayerInfo[i][Event] == EventInfo[id][ID])
				    {
						SFPlayerInfo[i][Event]=0;
						A_SpawnPlayer(i);
					}
					if(SFPlayerInfo[i][BetpID][id]>-1)
					{
					    SFPlayerInfo[i][BetpID][id]=-1;
					    SFPlayerInfo[i][BetAmount][id]=0;
					}
				}
			}
			DeleteEventStuff(id);
			//printf("DEBUG CFONTROL CountDownForEvent 1.2");
		}
	}
	return 0;
}
stock EventCheckForPlayers(id)
{
	//printf("DEBUG CFONTROL EventCheckForPlayers 1");
    if(EventInfo[id][Type] == RACE)
	{
		if(EventInfo[id][Started] == 1 && InEventCount(EventInfo[id][ID]) == 0)
		{
		    new string[128];
		    format(string,sizeof string, "{FF0000}MINIGAME:{FFFFFF} The %s(ID:%d) event has been canceled. Reason: Not enough players.",EventInfo[id][eName],EventInfo[id][ID]);
	     	SendMessageToMode(STUNT,red1, string);
		 	format(string, sizeof(string), "[MINIGAME] The %s event has been canceled for not having enough players!",EventInfo[id][eName]);
			db_SaveChat(-1, STUNT,string);
	     	EventInfo[id][Started]=0;
 			EventInfo[id][State]=0;
	     	forLoop(i, MAX_PLAYERS)
			{
				if(IsPlayerConnected(i) && PlayerInfo[i][PlayerMode] == STUNT)
				{
				    if(SFPlayerInfo[i][Event] == EventInfo[id][ID])
				    {
						SFPlayerInfo[i][Event]=0;
						A_SpawnPlayer(i);
						TogglePlayerControllable(i,true);
					}
					if(SFPlayerInfo[i][BetpID][id]>-1)
					{
					    SFPlayerInfo[i][BetpID][id]=-1;
					    SFPlayerInfo[i][BetAmount][id]=0;
					}
				}
			}
			DeleteEventStuff(id);
		}
	}
	if(EventInfo[id][Type] == DUEL)
	{
	    if(EventInfo[id][Started] == 1 && InEventCount(EventInfo[id][ID]) == 0)
		{
	     	new string[128];
		    format(string,sizeof string, "{FF0000}MINIGAME:{FFFFFF} The %s(ID:%d) event has been canceled. Reason: Not enough players.",EventInfo[id][eName],EventInfo[id][ID]);
	     	SendMessageToMode(STUNT,red1, string);
		 	format(string, sizeof(string), "[MINIGAME] The %s event has been canceled for not having enough players!",EventInfo[id][eName]);
			db_SaveChat(-1, STUNT,string);
	     	EventInfo[id][Started]=0;
 			EventInfo[id][State]=0;
	     	forLoop(i, MAX_PLAYERS)
			{
				if(IsPlayerConnected(i) && PlayerInfo[i][PlayerMode] == STUNT)
				{
				    if(SFPlayerInfo[i][Event] == EventInfo[id][ID])
				    {
						SFPlayerInfo[i][Event]=0;
						A_SpawnPlayer(i);
						TogglePlayerControllable(i,true);
					}
					if(SFPlayerInfo[i][BetpID][id]>-1)
					{
					    SFPlayerInfo[i][BetpID][id]=-1;
					    SFPlayerInfo[i][BetAmount][id]=0;
					}
				}
			}
			DeleteEventStuff(id);
		}
		if(EventInfo[id][Started] == 1 && InEventCount(EventInfo[id][ID]) == 1)
		{
		    if(EventInfo[id][State] == 1)
		    {
			    new string[128],playerid;
		     	forLoop(i, MAX_PLAYERS)
		     	{
			 		if(IsPlayerConnected(i) && PlayerInfo[i][PlayerMode] == STUNT && SFPlayerInfo[i][Event] == EventInfo[id][ID])
					{
						SFPlayerInfo[i][Event]=0;
						SFPlayerInfo[i][EventsWon]++;
						PlayerInfo[i][Spree]++;
						GiveThePlayerMoney(i, 300);
						CalculatekSpree(PlayerInfo[i][PlayerMode]);
						UpgradeEventRank(i);
						playerid=i;
						A_SpawnPlayer(i);
			            GameTextForPlayer(i, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~Well done~w~~n~]]~r~You won!~w~]]", 8000, 3);
						if(PlayerInfo[i][DisableSounds] == 0)
							PlayAudioStreamForPlayer(i, "http://dl.dropbox.com/u/17150100/Gta%20San%20Andreas%20Mission%20Complete%20Sound.mp3");
						format(string,sizeof(string),"{FF0000}MINIGAME:{FFFFFF} %s(ID:%d) won the %s(ID:%d) event.",PlayerInfo[i][Name],i,EventInfo[id][eName],EventInfo[id][ID]);
					}
				}
				SendMessageToMode(STUNT,red1, string);
				format(string, sizeof(string), "[MINIGAME] %s[%d] has won the '%s' event!",PlayerInfo[playerid][Name],playerid,EventInfo[id][eName]);
				db_SaveChat(-1, STUNT,string);
				forLoop(i, MAX_PLAYERS)
				{
				    if(IsPlayerConnected(i) && PlayerInfo[i][PlayerMode] == STUNT)
					{
					    if(SFPlayerInfo[i][BetpID][id]==playerid)
					    {
							GiveThePlayerMoney(i, SFPlayerInfo[i][BetAmount][id]);
						    format(string,sizeof(string),"BET:{FFFFFF} %s(ID:%d) has won $%d on his bet.",PlayerInfo[i][Name],i,SFPlayerInfo[i][BetAmount][id]);
							SendMessageToMode(STUNT,green1, string);
							format(string, sizeof(string), "[BET] %s[%d] has won $%d on his bet.",PlayerInfo[i][Name],i,SFPlayerInfo[i][BetAmount][id]);
							db_SaveChat(-1, STUNT,string);
						    SFPlayerInfo[i][BetpID][id]=-1;
						    SFPlayerInfo[i][BetAmount][id]=0;
						    SFPlayerInfo[i][BetsWon]++;
					    }
					    else if(SFPlayerInfo[i][BetpID][id] > -1 && SFPlayerInfo[i][BetpID][id] != playerid)
					    {
							GiveThePlayerMoney(i, -SFPlayerInfo[i][BetAmount][id]);
						    format(string,sizeof(string),"BET:{FFFFFF} %s(ID:%d) has lost $%d on his bet.",PlayerInfo[i][Name],i,SFPlayerInfo[i][BetAmount][id]);
							SendMessageToMode(STUNT,red1, string);
							format(string, sizeof(string), "[BET] %s[%d] has lost $%d on his bet.",PlayerInfo[i][Name],i,SFPlayerInfo[i][BetAmount][id]);
							db_SaveChat(-1, STUNT,string);
						    SFPlayerInfo[i][BetpID][id]=-1;
						    SFPlayerInfo[i][BetAmount][id]=0;
						    SFPlayerInfo[i][BetsLost]++;
					    }
					}
					if(IsPlayerConnected(i) && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][PlayerMode] == STUNT && !IsPlayerNPC(i) && GetPlayerState(i) == PLAYER_STATE_SPECTATING && SFPlayerInfo[i][SpecID] == playerid)
					{
		                SF_StopSpectate(i);
					}
				}
	            EventInfo[id][Popularity]++;
		     	EventInfo[id][Started]=0;
	 			EventInfo[id][State]=0;
                SaveSFEvent(id);
				DeleteEventStuff(id);
			}
		}
	}
}
stock UpgradeEventRank(playerid)
{
	//printf("DEBUG CFONTROL UpgradeEventRank 1");
	new string[190];
	if (SFPlayerInfo[playerid][EventsWon] >= 80)
	{
	    if(SFPlayerInfo[playerid][EventRank] < 1)
	    {
			SFPlayerInfo[playerid][EventRank] = 1;
			format(string,sizeof(string),"{FF0000}MINIGAME:{FFFFFF} %s(ID:%d) just unlocked SF Rank: {FF0000}%s.",PlayerInfo[playerid][Name],playerid,EventRankNames[SFPlayerInfo[playerid][EventRank]]);
			SendMessageToMode(STUNT,red1, string);
			format(string, sizeof(string), "[MINIGAME] %s[%d] just unlocked SF Rank: %s!",PlayerInfo[playerid][Name],playerid,EventRankNames[SFPlayerInfo[playerid][EventRank]]);
			db_SaveChat(-1, STUNT,string);
		}
	}
	if (SFPlayerInfo[playerid][EventsWon] >= 180)
	{
	    if(SFPlayerInfo[playerid][EventRank] < 2)
	    {
			SFPlayerInfo[playerid][EventRank] = 2;
			format(string,sizeof(string),"{FF0000}MINIGAME:{FFFFFF} %s(ID:%d) just unlocked SF Rank: {FF0000}%s.",PlayerInfo[playerid][Name],playerid,EventRankNames[SFPlayerInfo[playerid][EventRank]]);
			SendMessageToMode(STUNT,red1, string);
			format(string, sizeof(string), "[MINIGAME] %s[%d] just unlocked SF Rank: %s!",PlayerInfo[playerid][Name],playerid,EventRankNames[SFPlayerInfo[playerid][EventRank]]);
			db_SaveChat(-1, STUNT,string);
		}
	}
	if (SFPlayerInfo[playerid][EventsWon] >= 280)
	{
	    if(SFPlayerInfo[playerid][EventRank] < 3)
	    {
			SFPlayerInfo[playerid][EventRank] = 3;
			format(string,sizeof(string),"{FF0000}MINIGAME:{FFFFFF} %s(ID:%d) just unlocked SF Rank: {FF0000}%s.",PlayerInfo[playerid][Name],playerid,EventRankNames[SFPlayerInfo[playerid][EventRank]]);
			SendMessageToMode(STUNT,red1, string);
			format(string, sizeof(string), "[MINIGAME] %s[%d] just unlocked SF Rank: %s!",PlayerInfo[playerid][Name],playerid,EventRankNames[SFPlayerInfo[playerid][EventRank]]);
			db_SaveChat(-1, STUNT,string);
		}
	}
	if (SFPlayerInfo[playerid][EventsWon] >= 580)
	{
	    if(SFPlayerInfo[playerid][EventRank] < 4)
	    {
			SFPlayerInfo[playerid][EventRank] = 4;
			format(string,sizeof(string),"{FF0000}MINIGAME:{FFFFFF} %s(ID:%d) just unlocked SF Rank: {FF0000}%s.",PlayerInfo[playerid][Name],playerid,EventRankNames[SFPlayerInfo[playerid][EventRank]]);
			SendMessageToMode(STUNT,red1, string);
			format(string, sizeof(string), "[MINIGAME] %s[%d] just unlocked SF Rank: %s!",PlayerInfo[playerid][Name],playerid,EventRankNames[SFPlayerInfo[playerid][EventRank]]);
			db_SaveChat(-1, STUNT,string);
		}
	}
	if (SFPlayerInfo[playerid][EventsWon] >= 880)
	{
	    if(SFPlayerInfo[playerid][EventRank] < 5)
	    {
			SFPlayerInfo[playerid][EventRank] = 5;
			format(string,sizeof(string),"{FF0000}MINIGAME:{FFFFFF} %s(ID:%d) just unlocked SF Rank: {FF0000}%s.",PlayerInfo[playerid][Name],playerid,EventRankNames[SFPlayerInfo[playerid][EventRank]]);
			SendMessageToMode(STUNT,red1, string);
			format(string, sizeof(string), "[MINIGAME] %s[%d] just unlocked SF Rank: %s!",PlayerInfo[playerid][Name],playerid,EventRankNames[SFPlayerInfo[playerid][EventRank]]);
			db_SaveChat(-1, STUNT,string);
		}
	}
	if (SFPlayerInfo[playerid][EventsWon] >= 2000)
	{
	    if(SFPlayerInfo[playerid][EventRank] < 6)
	    {
			SFPlayerInfo[playerid][EventRank] = 6;
			format(string,sizeof(string),"{FF0000}MINIGAME:{FFFFFF} %s(ID:%d) just unlocked SF Rank: {FF0000}%s.",PlayerInfo[playerid][Name],playerid,EventRankNames[SFPlayerInfo[playerid][EventRank]]);
			SendMessageToMode(STUNT,red1, string);
			format(string, sizeof(string), "[MINIGAME] %s[%d] just unlocked SF Rank: %s!",PlayerInfo[playerid][Name],playerid,EventRankNames[SFPlayerInfo[playerid][EventRank]]);
			db_SaveChat(-1, STUNT,string);
		}
	}
	//printf("DEBUG CFONTROL UpgradeEventRank 2");
}
      
public OnPlayerEnterRaceCheckpoint(playerid)
{
	//printf("DEBUG CFONTROL OnPlayerEnterRaceCheckpoint 1");
 	if(PlayerInfo[playerid][PlayerMode] == DM)
	{
 		if(DMMAPInfo[Type] == DM_TYPE_RACE)
        {
            DMPlayerInfo[playerid][cRaceCP]++;
            DisablePlayerRaceCheckpoint(playerid);
            if(DMPlayerInfo[playerid][cRaceCP] < MAX_DM_CP)
            {
	        	forLoopV(c, DMPlayerInfo[playerid][cRaceCP], MAX_DM_CP)
				{
				    if(DMMAPInfo[cExists][c] == 1)
				    {
				        new nid = DMMAPInfo[cNext][c];
				        if(nid != -1)
						{
							SetPlayerRaceCheckpoint(playerid, DMMAPInfo[cType][c],
										DMMAPInfo[cX][c], DMMAPInfo[cY][c], DMMAPInfo[cZ][c],
										DMMAPInfo[cX][nid], DMMAPInfo[cY][nid], DMMAPInfo[cZ][nid],
										DMMAPInfo[cSize][c]+6);
                            forLoop(u, MAX_PLAYERS)
							{
							    if(IsPlayerConnected(u) && PlayerInfo[u][Spawned] == 1 && PlayerInfo[u][PlayerMode] == DM && !IsPlayerNPC(u) && GetPlayerState(u) == PLAYER_STATE_SPECTATING && DMPlayerInfo[u][SpecID] == playerid)
								{
								    DisablePlayerRaceCheckpoint(u);
        							SetPlayerRaceCheckpoint(u, DMMAPInfo[cType][c],
										DMMAPInfo[cX][c], DMMAPInfo[cY][c], DMMAPInfo[cZ][c],
										DMMAPInfo[cX][nid], DMMAPInfo[cY][nid], DMMAPInfo[cZ][nid],
										DMMAPInfo[cSize][c]+6);
								}
							}
						}
						else
						{
						 	SetPlayerRaceCheckpoint(playerid, DMMAPInfo[cType][c],
										DMMAPInfo[cX][c], DMMAPInfo[cY][c], DMMAPInfo[cZ][c],
										0.0, 0.0, 0.0,
										DMMAPInfo[cSize][c]+6);
                            DMPlayerInfo[playerid][cRaceCP] = MAX_DM_CP +1;
                            forLoop(u, MAX_PLAYERS)
							{
							    if(IsPlayerConnected(u) && PlayerInfo[u][Spawned] == 1 && PlayerInfo[u][PlayerMode] == DM && !IsPlayerNPC(u) && GetPlayerState(u) == PLAYER_STATE_SPECTATING && DMPlayerInfo[u][SpecID] == playerid)
								{
								    DisablePlayerRaceCheckpoint(u);
        							SetPlayerRaceCheckpoint(u, DMMAPInfo[cType][c],
										DMMAPInfo[cX][c], DMMAPInfo[cY][c], DMMAPInfo[cZ][c],
										0.0, 0.0, 0.0,
										DMMAPInfo[cSize][c]+6);
								}
							}
						}
						break;
				    }
				}
			}
			else
			{
			    if(DMMAPInfo[TimeLeft] >= 895)//too early, player is probably hacking!!
			    {
			        DMMapDisqualifyPlayer(playerid, 1 ,1);
			        return 0;
			    }
			    
			    new finished=0, string[180];
			    forLoop(i, MAX_PLAYERS)
				{
					if(IsPlayerConnected(i) && DMMAPInfo[dStarted] == 1 && DMPlayerInfo[i][Alive] == 1 && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][PlayerMode] == DM && !IsPlayerNPC(i))
					{
					    if(DMPlayerInfo[i][rFinished] == 1)
					    {
							finished++;
						}
					}
				}
				switch(finished)
				{
				    case 0:
				    {
				        format(string, sizeof string, "{FF9900}RACE FINISH:{FFFFFF} %s finished 1st!{00EEAD}(%s)",PlayerInfo[playerid][Name], ShowDMMapTime());
			   	 		SendMessageToMode(DM,COLOR_WHITE, string);
						DMPlayerInfo[playerid][Wins] ++;
			    		format(string, sizeof string, "~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~w~%s finished ~r~1st",FixpInfoName(playerid));

		      			//1 place
				    }
				    case 1:
				    {
                        format(string, sizeof string, "{FF9900}RACE FINISH:{FFFFFF} %s finished 2nd!{00EEAD}(%s)",PlayerInfo[playerid][Name], ShowDMMapTime());
			    		SendMessageToMode(DM,COLOR_WHITE, string);
			    		format(string, sizeof string, "~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~w~%s finished ~r~2nd",FixpInfoName(playerid));
		      			//2 place
				    }
				    case 2:
				    {
                        format(string, sizeof string, "{FF9900}RACE FINISH:{FFFFFF} %s finished 3rd!{00EEAD}(%s)",PlayerInfo[playerid][Name], ShowDMMapTime());
			    		SendMessageToMode(DM,COLOR_WHITE, string);
			    		format(string, sizeof string, "~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~w~%s finished ~r~3rd",FixpInfoName(playerid));
		      			//3 place
				    }
				    default:
				    {
				        format(string, sizeof string, "{FF9900}RACE FINISH:{FFFFFF} %s finished the race!{00EEAD}(%s)",PlayerInfo[playerid][Name], ShowDMMapTime());
			    		SendMessageToMode(DM,COLOR_WHITE, string);
			    		format(string, sizeof string, "~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~w~%s finished race",FixpInfoName(playerid));
				    }
				}
			    forLoop(i, MAX_PLAYERS)
				{
					if(IsPlayerConnected(i) && DMMAPInfo[dStarted] == 1 && DMPlayerInfo[i][Alive] == 1 && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][PlayerMode] == DM && !IsPlayerNPC(i))
					{
					    GameTextForPlayer(i, string, 2000, 3);
					}
				}
				DMPlayerInfo[playerid][cRacePos] = finished+1;
			    if(DMPlayerInfo[playerid][rRespawn] == 0)CheckTopTimesDM(playerid);
			    GiveThePlayerMoney(playerid, (DMMapAlivePlayers()-finished)*2);
				ChangeModeScore(playerid, (DMMapAlivePlayers()-finished)*3);
			    
			    DMPlayerInfo[playerid][rFinished] = 1;
			    RepairVehicle(GetPlayerVehicleID(playerid));
			    if(DMMapAlivePlayers() == 1)
				{
				    DMMapDisqualifyPlayer(playerid, 1 ,1);
				    return 0;
				}
				if(DMMapAlivePlayers() > 1 && finished == 0 && DMPlayerInfo[playerid][Asked] == 0)
				{
				    SendMessageToMode(DM,red1,"{FF9900}RACE MAP REMINDER:{FFFFFF} Someone finished the race! Race will end in 20 seconds!");
				    DMPlayerInfo[playerid][Asked] = 1;
				    DMPlayerInfo[playerid][Camper] = 0;
				    DMMAPInfo[rRestart] = 1;
					SetTimerEx("EndDDDMMap", 22000, false, "i", playerid);
				}
			    
			    new vehid = GetPlayerVehicleID(playerid), worldid = W_DM + 4;
				SetVehicleVirtualWorld(vehid,worldid);
				SetPlayerVirtualWorld(playerid,worldid);
				PlacePlayerInVehicle(playerid,vehid,0);
				/*if(PlayerInfo[playerid][DisbleSpeedo] == 0)
				{
				    if(PlayerInfo[playerid][SpeedoObject] != -1)DestroyTheDynamicObject(PlayerInfo[playerid][SpeedoObject]);
				    if(PlayerInfo[playerid][RacePlaceObject] != -1)DestroyTheDynamicObject(PlayerInfo[playerid][RacePlaceObject]);
				    PlayerInfo[playerid][SpeedoObject] = CreateDynamicObject(19483, 202.14845, 1755.43835, -17.83983,   0, 0, 0.00000, -1, -1, playerid);
				    PlayerInfo[playerid][RacePlaceObject] = CreateDynamicObject(19483, 202.14845, 1755.43835, -17.83983,   0, 0, 0.00000, -1, -1, playerid);
					PlayerInfo[playerid][SpeedoReset] = 1;
			    }*/
				forLoop(u, MAX_PLAYERS)
				{
				    if(IsPlayerConnected(u) && PlayerInfo[u][Spawned] == 1 && PlayerInfo[u][PlayerMode] == DM && !IsPlayerNPC(u) && GetPlayerState(u) == PLAYER_STATE_SPECTATING && DMPlayerInfo[u][SpecID] == playerid) {
				       	DM_StartSpectate(u, playerid);
					}
				}
			}
			new Float:x, Float:y, Float:z;
			GetPlayerPos(playerid,x,y,z);
			PlayerPlaySound(playerid, 1159, x, y, z);
			forLoop(u, MAX_PLAYERS)
			{
			    if(IsPlayerConnected(u) && PlayerInfo[u][Spawned] == 1 && PlayerInfo[u][PlayerMode] == DM && !IsPlayerNPC(u) && GetPlayerState(u) == PLAYER_STATE_SPECTATING && DMPlayerInfo[u][SpecID] == playerid) {
					PlayerPlaySound(u, 1159, x, y, z);
				}
			}
			/*
			new objectid;
			objectid = CreateTheDynamicObject(18682, x, y, z +5.5, 0.0, 0.0, 0.0,-1,-1,playerid);
			Streamer_Update(playerid);
			SetTimerEx("DestroyObjectPub", 5000, 0, "i", objectid);
			*/
		}
	}

	if(PlayerInfo[playerid][PlayerMode] == STUNT && SFPlayerInfo[playerid][Event] > 0)
	{
		if(EventInfo[getTheEventID(SFPlayerInfo[playerid][Event])][Type] == RACE)
		{
			new string[128],id=getTheEventID(SFPlayerInfo[playerid][Event]);
            DisablePlayerRaceCheckpoint(playerid);
		    format(string,sizeof(string),"{FF0000}MINIGAME:{FFFFFF} %s(ID:%d) won the %s(ID:%d) event.",PlayerInfo[playerid][Name],playerid,EventInfo[id][eName],EventInfo[id][ID]);
			SendMessageToMode(STUNT,red1, string);
			format(string, sizeof(string), "[MINIGAME] %s[%d] has won the '%s' event!",PlayerInfo[playerid][Name],playerid,EventInfo[id][eName]);
			db_SaveChat(-1, STUNT,string);
			GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~Well done~w~~n~]]~r~You won!~w~]]", 8000, 3);
			if(PlayerInfo[playerid][DisableSounds] == 0)
				PlayAudioStreamForPlayer(playerid, "http://dl.dropbox.com/u/17150100/Gta%20San%20Andreas%20Mission%20Complete%20Sound.mp3");
			EventInfo[id][Popularity]++;
			EventInfo[id][Started]=0;
 			EventInfo[id][State]=0;
			SFPlayerInfo[playerid][EventsWon]++;
			GiveThePlayerMoney(playerid, 300);
			PlayerInfo[playerid][Spree]++;
			UpgradeEventRank(playerid);
			SaveSFEvent(id);
			forLoop(i, MAX_PLAYERS)
			{
				if(IsPlayerConnected(i) && PlayerInfo[i][PlayerMode] == STUNT)
				{
				    if(SFPlayerInfo[i][BetpID][id] == playerid)
				    {
				        GiveThePlayerMoney(i, SFPlayerInfo[i][BetAmount][id]);
					    format(string,sizeof(string),"BET:{FFFFFF} %s(ID:%d) has won $%d on his bet.",PlayerInfo[i][Name],i,SFPlayerInfo[i][BetAmount][id]);
						SendMessageToMode(STUNT,green1, string);
						format(string, sizeof(string), "[BET] %s[%d] has won $%d on his bet.",PlayerInfo[i][Name],i,SFPlayerInfo[i][BetAmount][id]);
						db_SaveChat(-1, STUNT,string);
					    SFPlayerInfo[i][BetpID][id]=-1;
					    SFPlayerInfo[i][BetAmount][id]=0;
					    SFPlayerInfo[i][BetsWon]++;
				    }
				    else if(SFPlayerInfo[i][BetpID][id] > -1 && SFPlayerInfo[i][BetpID][id] != playerid)
				    {
				        GiveThePlayerMoney(i, -SFPlayerInfo[i][BetAmount][id]);
					    format(string,sizeof(string),"BET:{FFFFFF} %s(ID:%d) has lost $%d on his bet.",PlayerInfo[i][Name],i,SFPlayerInfo[i][BetAmount][id]);
						SendMessageToMode(STUNT,red1, string);
						format(string, sizeof(string), "[BET] %s[%d] has lost $%d on his bet.",PlayerInfo[i][Name],i,SFPlayerInfo[i][BetAmount][id]);
						db_SaveChat(-1, STUNT,string);
					    SFPlayerInfo[i][BetpID][id]=-1;
					    SFPlayerInfo[i][BetAmount][id]=0;
					    SFPlayerInfo[i][BetsLost]++;
				    }
				    if(SFPlayerInfo[i][Event] == EventInfo[id][ID])
				    {
				        SFPlayerInfo[i][Event]=0;
						if(i != playerid)
						{
							PlayerInfo[i][Spree] = 0;
							GiveThePlayerMoney(i, -300);
						}
						A_SpawnPlayer(i);
						DisablePlayerRaceCheckpoint(i);
				    }
				}
			}
			DeleteEventStuff(id);
		}
	}
	return 1;
}

//============================[ Bot Check ]=====================================
stock BotCheck(playerid)
{
	if(IsPlayerConnected(playerid) && !IsPlayerNPC(playerid))
	{
		if(GetPlayerPing(playerid) < 1)
		{
			user_Kick(playerid,-1,"Possible Bot",true,false);
		}
	}
}

//==============================================================================
stock PutAtPos(playerid)
{
	if(PlayerInfo[playerid][SavedPos]!=0)
	{
	    SetPlayerVirtualWorld(playerid, PlayerInfo[playerid][PosWorld]);
		SetPlayerInterior(playerid,	PlayerInfo[playerid][PosInt]);
	    if(GetPlayerState(playerid) == 2)
		{
			SetVehiclePos(GetPlayerVehicleID(playerid),PlayerInfo[playerid][PosX], PlayerInfo[playerid][PosY], PlayerInfo[playerid][PosZ]);
			LinkVehicleToInterior(GetPlayerVehicleID(playerid),GetPlayerInterior(playerid));
			SetVehicleVirtualWorld(GetPlayerVehicleID(playerid),GetPlayerVirtualWorld(playerid));
		} else SetPlayerPos(playerid, PlayerInfo[playerid][PosX], PlayerInfo[playerid][PosY], PlayerInfo[playerid][PosZ]);
	}
}
stock PutAtSPos(playerid)
{
	if(PlayerInfo[playerid][SFSavedPos]!=0)
	{
	    ResetWeapons(playerid);
	    SetPlayerVirtualWorld(playerid, PlayerInfo[playerid][SFPosWorld]);
		SetPlayerInterior(playerid,	PlayerInfo[playerid][SFPosInt]);
		if(SFPlayerInfo[playerid][Spiderman] == 1)
			GiveWeapon(playerid, 11, 1);
	    if(GetPlayerState(playerid) == 2)
		{
		    new vehid = GetPlayerVehicleID(playerid);
			SetVehiclePos(vehid,PlayerInfo[playerid][SFPosX], PlayerInfo[playerid][SFPosY], PlayerInfo[playerid][SFPosZ]);
			LinkVehicleToInterior(vehid,GetPlayerInterior(playerid));
			SetVehicleVirtualWorld(vehid,GetPlayerVirtualWorld(playerid));
 			SetVehicleZAngle(vehid, PlayerInfo[playerid][SFPosAng]);
 			SetCameraBehindPlayer(playerid);
		}
		else
			SetPlayerPosEx(playerid, PlayerInfo[playerid][SFPosX], PlayerInfo[playerid][SFPosY], PlayerInfo[playerid][SFPosZ], PlayerInfo[playerid][SFPosAng]);
	}
}


stock TimeStamp()
{
	new time = GetTickCount() / 1000;
	return time;
}

stock isIllegalChar(name[])
{
    forLoop(i, strlen(name))
    {
	    if (name[i] == '|' || name[i] == ';' || name[i] == '#' || name[i] == '%' || name[i] == '@'
		 || name[i] == '!' || name[i] == ';' || name[i] == '^' || name[i] == '&' || name[i] == '*'
		  || name[i] == ',' || name[i] == ':' || name[i] == '"' || name[i] == '/' || name[i] == '~'
		  || name[i] == '`' || name[i] == '\\' || name[i] == '?' || name[i] == '<' || name[i] == '>')
		{
			return true;
		}
	}
	return false;
}
stock IsNumericForID(const string[]) {
	//printf("DEBUG CFONTROL IsNumericForID");
	new length=strlen(string);
	if (length==0) return false;
	for (new i = 0; i < length; i++) {
		if (string[i] > '9' || string[i] < '0') return false;
	}
	return true;
}
stock IsNumeric(const string[]) {
	//printf("DEBUG CFONTROL IsNumeric");
	new length=strlen(string);
	if (length==0) return false;
	for (new i = 0; i < length; i++) {
		if (
		(string[i] > '9' || string[i] < '0' && string[i]!='-' && string[i]!='+') // Not a number,'+' or '-'
		|| (string[i]=='-' && i!=0)                                             // A '-' but not at first.
		|| (string[i]=='+' && i!=0)                                             // A '+' but not at first.
		) return false;
	}
	if (length==1 && (string[0]=='-' || string[0]=='+')) return false;
	return true;
}
stock PlayerSoundForAll(SoundID)
{
	//printf("DEBUG CFONTROL PlayerSoundForAll");
	forLoop(i, MAX_PLAYERS) PlayerPlaySound(i, SoundID, 0.0, 0.0, 0.0);
}

stock IsValidWeapon(weaponid)
{
	//printf("DEBUG CFONTROL IsValidWeapon");
    if (weaponid > 0 && weaponid < 19 || weaponid > 21 && weaponid < 47) return 1;
    return 0;
}
stock IsValidSkin(skinId)
{
	//printf("DEBUG CFONTROL IsValidSkin");
	if(skinId < 0|| skinId > 299) return true;
	else return false;
}
stock GetDynamicObjectModelID(objectid)
{
	//printf("DEBUG CFONTROL GetDynamicObjectModelID");
	new id=Streamer_GetIntData(0,objectid,E_STREAMER_MODEL_ID);
	return id;
}
stock IsModCar(playerid) {
	//printf("DEBUG CFONTROL IsModCar");
	switch(GetVehicleModel(GetPlayerVehicleID(playerid)))
	{
        case 562,565,559,561,560,575,534,567,536,535,576,411,579,602,496,518,527,589,597,419,
		533,526,474,545,517,410,600,436,580,439,549,491,445,604,507,585,587,466,492,546,551,516,
		426,547,405, 409,550,566,406,540,421,529,431,438,437,420,525,552,416,433,427,490,528,
		407,544,470,598,596,599,601,428,499,609,524,578,486,573,455,588,403,514,423,
		414,443,515,456,422,482,530,418,572,413,440,543,583,478,554,402,542,603,475,568,504,457,
        483,508,429,541,415,480,434,506,451,555,477,400,404,489,479,442,458,467,558: return true;
		default: return false;
	}
	return false;
}
stock IsValidObjectModel(model)
{
	//printf("DEBUG CFONTROL IsValidObjectModel");
	static valid_model[] = //credits to Slice
		{
			0b11111111111011111110110111111110, 0b00000000001111111111111111111111,
			0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
			0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
			0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
			0b00000000000000000000000000000000, 0b11111111111111111111111110000000,
			0b11100001001111111111111111111111, 0b11110111111111111111111111111111,
			0b11111111111111111111111111111111, 0b11111111111111111111111111111111,
			0b00000001111000000111111111111111, 0b11111111111111111111111111111111,
			0b11111111111111111111111111111111, 0b11111111111111111111111111111111,
			0b11111111111111111100011111111111, 0b11111111111111111111111111111111,
			0b11111111111111111111111111011111, 0b11111111111111111111111101111111,
			0b11111111111111111111111111111111, 0b11111111111111111111111111111111,
			0b11111111111111111111111111111111, 0b11111111111111111111111111111111,
			0b11111111111111111111111111111111, 0b11111111100000000000001111111111,
			0b11111111111111111111111111111111, 0b11111111111010111101111111111111,
			0b11111111111111111111111111111111, 0b11111111111111111001111111111111,
			0b11111111111111111111111111111111, 0b10000000000011111111111111111111,
			0b11111111111111111111111111111111, 0b11111111111111111111111111111111,
			0b11111111111111111111111111111111, 0b11111111111111111111111111111111,
			0b11111111111111111111111111111111, 0b11111111111111111111111111011111,
			0b11111111111111111111111111111111, 0b11111111111111111111111111111111,
			0b11111111111111101011101111111111, 0b11111111111111111111111111110111,
			0b11111111111111111111111111111111, 0b11111111111111111111111111111111,
			0b11111111111111111111111111111111, 0b11111111111111111111111111111111,
			0b11111111111111111111111111111111, 0b11111111111111111111111111111111,
			0b11111111111111111111111111111111, 0b11111111111111111111111111111111,
			0b11111111111111111111111111111111, 0b11111111111111111111111111111111,
			0b11111111111111111111111111111111, 0b11111111111111111111111111111111,
			0b11111111111111111111111111111111, 0b11111111111111111111111111111111,
			0b11111111111111111111111111111111, 0b11111111111111111111111111111111,
			0b11111111111111111111111111111111, 0b11111111111111111111111111111111,
			0b11111111111111111111111111111111, 0b11111111111111111111111111111111,
			0b11111111111111111111111111111111, 0b11111111111111111111111111111111,
			0b11111111111111111111111111111111, 0b11111111111111111111111111111111,
			0b11111111111111111111111111111111, 0b11111111111111111111111111111111,
			0b11111111111111111111111111111111, 0b11111111111111111111111111111111,
			0b11111111111111111111111111111111, 0b11111111111111111111111111111111,
			0b11111111111111111111111111111111, 0b11111111111111111111111111111111,
			0b11111111111111111111111111111111, 0b11111111111111111111111111110011,
			0b11111111111111111111111111111111, 0b11111111111111111111111111111111,
			0b11111111111111111111111111100111, 0b11111111111111111111111111111111,
			0b11111111111111111111111111111111, 0b11111111111111111111111111111111,
			0b11111111111111111111111111111111, 0b11111111111111111111111111111111,
			0b11111111111111111111111111111111, 0b11111111111111111011110111101111,
			0b10000000000000000000000000000000, 0b00000010000010000000010011111111,
			0b00000000001000000100000000000000, 0b11111111101101100101111000000000,
			0b01110000111111111111111111111011, 0b00000000001111111111111111000000,
			0b10011111110000000000001111001100, 0b11111111101111001100000000011110,
			0b00001110110111111100111111111111, 0b11111111111111111111111111001110,
			0b11111000000011111111111111111111, 0b11111111111111111110111101101011,
			0b01000000000000000111111101110111, 0b11010111111111111111000001111100,
			0b11110011111111111111111001111111, 0b01011111111111111111111111111111,
			0b01111110100001111011111010101011, 0b10001001010101100100001000010000,
			0b10100000000000000001010000101010, 0b00001000001111101010111100100000,
			0b11111111111111111111111010100001, 0b00000000011111111111110101111111,
			0b00001111111111111111110000111100, 0b11011110111111001111011011111011,
			0b11111111111001111111110011001110, 0b11111111111111111111111111111111,
			0b01111111111111111111111110111111, 0b01111000111111111111110111111111,
			0b00011100000000010000000000000111, 0b00001111111100001000000000000000,
			0b10101111001001110111110011111000, 0b01010101010101010110100000101011,
			0b01110111110101011111110100101001, 0b01111111111100101110111011111011,
			0b11111111111111111100101111001000, 0b11111111111111111111111111111111,
			0b11111111111111111111111111111111, 0b11111111111111111111111111111111,
			0b00000000011111111111111111111111, 0b00000000000000000000000000000000,
			0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
			0b11111111000000000000000000000000, 0b00010100101000001111111111111111,
			0b11111111101111011111111111000000, 0b00111111111111111111111100000001,
			0b11110000000000000000000000000000, 0b00000101010101010111111111111111,
			0b11110010110111000011111010000000, 0b11111110111110000111110111010000,
			0b00000000000000011111111111111111, 0b00000000000000000000000000000000,
			0b11111111111111111111111111000000, 0b11111111111111111111111111111111,
			0b11011111111111111111111111111111, 0b00000000000000000000000000000111,
			0b00000000000000000000000000000000, 0b11010111111000000000000000000000,
			0b10110011001000101111111111111111, 0b00011000010111010101011111010111,
			0b11011111111111111111010101111111, 0b11111111111111100000000000000011,
			0b11111111111111111111111111111111, 0b11111111111111111100000101111111,
			0b00000000000000000000000111111111, 0b00011000000001111000000000000000,
			0b11111111111111100111100000000100, 0b11110100011011111111110000000000,
			0b11111110001001111111110000000111, 0b11111111110110000100101010101000,
			0b11111111111111111100000000000000, 0b11111111111111111111111111111111,
			0b11101011111011110011111111111111, 0b11111111111111111111111111111111,
			0b00010001000001111100001111111111, 0b00100000000000000000000000000000,
			0b00000000000000000000000000000000, 0b11111101000000000000000000000000,
			0b11110001110101000001111111111111, 0b00000000000001101111010000010010,
			0b11111111111111111111111110000000, 0b11111111111111111111111111111111,
			0b11111111111111111111111111111111, 0b11111111111111111111111111111111,
			0b11100001111100000111100000000000, 0b11100110011111111101011111111011,
			0b00000000000000000000000100111001, 0b00000000000000000000000000000000,
			0b00000000000000000000000000000000, 0b00000100110000101100111111001100,
			0b11111111111110000000000000000000, 0b00000000000001111111111111111111,
			0b11000001111111011100000110000000, 0b00000111111101111111111111111111,
			0b00000000001000011110000111010010, 0b00111000100111110011110000000000,
			0b00111111111110101000001001111110, 0b00000000000000100001111100000000,
			0b11111111111111111111111100000000, 0b01111111111111111111111111111111,
			0b01011100001111111110101111110111, 0b11100010111111100000000000111111,
			0b11011000011000110011100011111001, 0b01100110000011110001100000010000,
			0b00000111100000000000000000000100, 0b00010111111101100011100001101010,
			0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
			0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
			0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
			0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
			0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
			0b11111111101111111000000000000000, 0b01111000000111100000000111111111,
			0b00000000011111110111111110111111, 0b11111111111111111111111111111111,
			0b00000000101001101111111111111111, 0b11111111111111111111111111111110,
			0b10100001000000111111111111111111, 0b11111111111111111111111111111011,
			0b00000000000000000000000000000011, 0b00000000000000100000000000000000,
			0b01110001111111010000000000010000, 0b11111101111101100011011111111111,
			0b10000000011111111111110101010111, 0b11011111100000010011001010110111,
			0b11010011101011111111111111111111, 0b10101010000010010000001111111000,
			0b11111000101111100000111110010110, 0b11111111100000000000000000000001,
			0b11111111111111111111111111111111, 0b01111111111111111111111111111111,
			0b11111111111111111111111111111111, 0b11111111111111111111111111111111,
			0b11111111111111111111111111111111, 0b11111111111111111111101111111111,
			0b11111111111111111111111111111111, 0b00000000000001111111111111111111,
			0b00111000000000010001000000000010, 0b00000000000011100000000000000000,
			0b00000000000000000000100000000000, 0b00000000000000000000000000000000,
			0b11110101000000000000000000000000, 0b00011111111000000101001000000111,
			0b11110000011110100011011101000000, 0b01111110111111111111111111111111,
			0b10101000000111110100101111011100, 0b11111111111111111111110000111010,
			0b00000000000000000000011111111111, 0b11111111111111111111111111111110,
			0b00001000111111111111111111111111, 0b00000000000000000000000000000000,
			0b00001111111110000000001111111101, 0b00111110000001111111101110100000,
			0b00001111111101111100011111000100, 0b11101010111101010011000111110000,
			0b11101010000000000000000111010001, 0b10001110110101100101000001110101,
			0b11000011111010101011111111111111, 0b11010110101111110000000000111111,
			0b00011111111111111111111111010100, 0b11111111111111111111111111111111,
			0b00111111111111111111111111111111, 0b11111111111111111111111111111111,
			0b11111111111111111111111111111111, 0b11111111111111111111111111111111,
			0b10000000001111111111111111111111, 0b11111111111111111111111111111111,
			0b11111111111111111111111111111111, 0b00000000000000111111111111111111,
			0b00000000000000000000000001000000, 0b00000000000000000000000000000000,
			0b00000000000000000000000000000000, 0b00011111000000000000000000000000,
			0b00011111111111100111111111111111, 0b00000011111111111111111111111110,
			0b00000000000000000000000000000000, 0b00101100000110000000000000010000,
			0b11100000111110000000001000000000, 0b11111000000000011111111100000000,
			0b11010000111111101011111111111111, 0b11001101010100011100011101000011,
			0b11111111111101010011110011100111, 0b01000000000111111001101111111111,
			0b00000000111010111111110010000111, 0b11111111111000000000001111111111,
			0b11111111111111111111111111111111, 0b11111111111011110111111111111111,
			0b11111111111111111111111111111111, 0b11111111111111111111111111111111,
			0b00000000000001100000001111111111, 0b00000000000000000000000000000000,
			0b11100000000000000000000000000000, 0b00000000000000000000000000000001,
			0b11111111111111111111110000010000, 0b00000111111111111111111111111111,
			0b11111111111111111110100000000000, 0b11111111111111111111111110111111,
			0b00000011100001111111111111111111, 0b00000000001100000000000000000000,
			0b01100110001011010000000000000000, 0b11111111111111111111111111111111,
			0b00000111111111111111111111111111, 0b00000000000000000000000011111110,
			0b11111111110100000000000000000000, 0b00000000000000000111111111101011,
			0b01100000000000000000000110011100, 0b11111111111111111111111111101010,
			0b11111100000000000111111111111111, 0b00000000000000000000000001111111,
			0b11101111000000000000000000000000, 0b11111110111111111111111111111111,
			0b11111111111111111111011111111111, 0b11000000001000000000000011011001,
			0b11011111111111111111111111111111, 0b11100000011000000000011111111110,
			0b00000000001111100011111111111111, 0b00011110111111000000000000000000,
			0b11001111111100001001011111110100, 0b00110001110001111000011101011110,
			0b00000000000000000000000001110110, 0b11111111111111111100000000000000,
			0b11111111111111111111111111111111, 0b11111111111111111111111111111111,
			0b11111111111111111111111111111111, 0b00111111111111111111111111111111,
			0b00000000000000000000000000000000, 0b11000000000000000000000000000000,
			0b00000000000000011111111111111111, 0b11101111111111110100001000000000,
			0b00001010000000001111111111111111, 0b00001100000110011000000000000000,
			0b01010011111111111111111111000000, 0b11000001111111111100000000000100,
			0b11111111111111111111111111111111, 0b11001111110000000000111111111111,
			0b11111111111111111111111111111111, 0b00001111111111111111111111011111,
			0b00000011100000000000111000100000, 0b11111111111111111110000000100000,
			0b11111111111001111111111111111111, 0b11111111111111111111111111111111,
			0b00000000000000000000000011111111, 0b10000000000000000000000000000000,
			0b11111111111111111111111111111111, 0b11111111111111111111111111001111,
			0b00000000000000000111111000001111, 0b00000000000000000000000000000000,
			0b11110111100000000000000000000000, 0b00111111111100001011111111111111,
			0b10110111101010010000000000000000, 0b11010000111111110001011011101010,
			0b10000011100000101101001011010000, 0b11111111111110000100000010111101,
			0b11110011011111110100001100011111, 0b11111111111111111111111111111111,
			0b11111111111111111111111111111111, 0b11111111111111111111111111111111,
			0b11111111111111111111111111111111, 0b00000000000110011111111111111111,
			0b00001111100000000000000000000000, 0b10000000000000001011111010000000,
			0b11100100000001111000000000000000, 0b00000000000000000000000000000011,
			0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
			0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
			0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
			0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
			0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
			0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
			0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
			0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
			0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
			0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
			0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
			0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
			0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
			0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
			0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
			0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
			0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
			0b11111111111111111111111111111111, 0b11111111111111111111111111111011,
			0b11111111111111111111111111111111, 0b11111111111111111111111111111111,
			0b11111111111111111111111111111111, 0b11111111111111111111111111111111,
			0b11111111111111111111111111111111, 0b00001110001111111101111001011011,
			0b00011110011000011100011000111100, 0b11000000001011111111111110010001,
			0b01111111111111111101101111111111, 0b00111111111111111010100001110010,
			0b01111111111000000100000001011000, 0b00000000001110000000000000000000,
			0b00000000000000000000000000000000, 0b00000000000000111000000000000000,
			0b01000001000100000011101000000001, 0b11001111100110110000000000111010,
			0b00000000000000000000000000000000, 0b11111000000000000100000000000000,
			0b01000000001000000001111110111111, 0b11111111111011100111000000000000,
			0b11111111111111111111111111111111, 0b00001111111111111111111111111111,
			0b11111111110000000000000000000000, 0b11111111111111111111111111111111,
			0b11111111111111111111111111111111, 0b11111111111111111111111100001111,
			0b11111111111111111111111111111111, 0b01111111101111011111111111111111,
			0b00100001000000000000000000000010, 0b10110111011001100111011000001000,
			0b00000000001000000000000010000111, 0b10000100000000011000001111100000,
			0b00000000000000000000000000000100, 0b00000000000000000000000000000000,
			0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
			0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
			0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
			0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
			0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
			0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
			0b00000000000000000000000000000000, 0b11111111111111111000000000000000,
			0b11111111111111111111111111111111, 0b11111111111111111111111111111111,
			0b11111111111111111111111111111111, 0b11111111111111111111111111111111,
			0b11010111111111111111111111111101, 0b11111111111111111111111111111111,
			0b11111111111111111111111111111111, 0b11111100000011111111111111111111,
			0b11111111111111111111111111110011, 0b11111111111111111111100011111111,
			0b11111111111111111000000111111111, 0b11111111111111000011111111111111,
			0b11111111111111111111111111111111, 0b11111111111111111111111111111111,
			0b11111111111111111111110111111111, 0b00000000111101111111111111101111,
			0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
			0b00000000000000000000000000000000, 0b11111111111111100000000000000000,
			0b00000001111111111111111111111111, 0b00000000000000000000000000000000,
			0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
			0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
			0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
			0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
			0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
			0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
			0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
			0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
			0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
			0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
			0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
			0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
			0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
			0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
			0b11111111111111111111111111111111, 0b11111111111111111111111111111111,
			0b11111111111111111111111111111111, 0b11111111111111111111111111111111,
			0b11111111111111111111111111111111, 0b11111111111111111111111111111111,
			0b11111111111111111111111111111111, 0b11111111111111111111111111111111,
			0b11111111000000011111110111111111, 0b11111111111111111111111111111111,
			0b11111111111111101111111111111111, 0b00000111111111111111111111111111,
			0b00001111111111111111111111111111, 0b01110100111101000100000111110000,
			0b10101000000000000000000000000001, 0b00000000111101000000000000000011,
			0b00000000111111000000000000000000, 0b00001001000111000000000000000000,
			0b00100010100000100000000000000000, 0b11111111111110001100000000100100,
			0b11111111111111111111111111111111, 0b01110000011101100011111001111010,
			0b11111000000000000000000000011110, 0b11000001111101100000111111111111,
			0b00000000011111111111111111101110, 0b00000000000000000000000000000000,
			0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
			0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
			0b00000000000000000000000000000000, 0b11111111111111111111111100000000,
			0b11111110001111111111111111111111, 0b11111111111111111111111111111111,
			0b11111111111111111111111111111111, 0b01010111111111111111111111111111,
			0b01010101010101010101010101010101, 0b01010101000101010101010101010101,
			0b01010101010101010101010101010101, 0b10101010101010000101010101010101,
			0b01111010111111111111111111111010, 0b00000000111010101101100000000000,
			0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
			0b00000000000000000000000000000000, 0b10000000000000111100000000000000,
			0b11110000000000000000000000000101, 0b11111111111111111111111011111111,
			0b11111111111111111111111111111111, 0b11111101101101101100111111100001,
			0b11111111111111111111111111111111, 0b11111111111111111111111111111111,
			0b11111111111111111111111111111111, 0b00000000000000000000000000011111,
			0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
			0b00000000000000101011000000000000, 0b01111011000000100000000000100000,
			0b11000011111111010000111111011000, 0b11111011100011110110111001111001,
			0b11001101111111110110000111100111, 0b00000101011110110000000001111110,
			0b11111111111111110000000000000000, 0b11111111110111111111111111111111,
			0b11111111111111111111111111111111, 0b00100011011111111111111111111111,
			0b00000000000000000000000000000001, 0b00000000000000000000000000000000,
			0b11111111000000000000000000000000, 0b11111111111111111111111111111111,
			0b11111111111111111111111111111111, 0b11111111111111111111111111111111,
			0b11111111111111111111111111111111, 0b11111111111111111111111111111111,
			0b00000111111111111111111111111111, 0b00000000000000000000000000000000,
			0b11111111111111111111111111111111, 0b00000000001111111111111111111111,
			0b00000000010000000000000000000001, 0b00000011100000000000000000000000,
			0b00000000000000000000001111101010, 0b11111111111111110000000000000000,
			0b11111111111111111111111111111111, 0b11111111111111111111111111111111,
			0b11111111111111111111111111111111, 0b11111111111111111111111111111111,
			0b11111111111111111111111111111111, 0b11111111111111111111111111111111,
			0b10111111111111111111111111111111, 0b11111111111111111100111111111111,
			0b11111111111111111111111111111111, 0b11111111111111111111111111111111,
			0b11111111111111111111111111111111, 0b11111111111111111111111111111111,
			0b11111111111111111111111111111111, 0b11111111111111111111111111111111,
			0b11111111111111111111111111111111, 0b11111111111111111111111111111111,
			0b11111111111111111111111111111111, 0b01111111111111111111111111111111,
			0b11111111111111111111111111111111, 0b11111111111111111111111111111111,
			0b11111111111111111110011111111111, 0b11101111111111111111000111111111,
			0b11111111111111111111111111111111, 0b11111111111111111111111111111111,
			0b11111111111111111111111111111111, 0b11111111111111111111111111111111,
			0b11110000000001111111111111111111, 0b00001111111111111111111111111111,
			0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
			0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
			0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
			0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
			0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
			0b00000000000000000000000000000000, 0b00100000000000000000000000000000
		};
	if (model > 19901)
	{
		return 0;
	}
	model -= 320;
	if (model < 0)
	{
		return 0;
	}
	return (valid_model[model >> 5] & (1 << (model & 0x1F)));//not sure what it returns but Y_Less could give me a hand here
}

stock DeleteMapIcons(playerid)
{
	//printf("DEBUG CFONTROL DeleteMapIcons 1");
	forLoop(i,100)
    {
    	RemovePlayerMapIcon(playerid,i);
    }
	//printf("DEBUG CFONTROL DeleteMapIcons 2");
}

stock LPCars()
{
	//printf("DEBUG CFONTROL LPCars 1");
	forLoopV(i, 1, MAX_VEHICLES)
 	{
    	if(GetVehicleVirtualWorld(i) != W_RP)SetVehicleNumberPlate(i, ServerInfo[lPlate]);
    }
	//printf("DEBUG CFONTROL LPCars 2");
}

stock DeleteCars()
{
	//printf("DEBUG CFONTROL DeleteCars 1");
    forLoop(car, MAX_TW_VEHICLES)
    {
    	if(TWInfo[Vehicles][car] != -1)DestroyVehicle(TWInfo[Vehicles][car]);
    	TWInfo[Vehicles][car]=-1;
    }
	//printf("DEBUG CFONTROL DeleteCars 2");
}

GetVehicleModelIDFromName(vname[])
{
	//printf("DEBUG CFONTROL GetVehicleModelIDFromName");
	forLoop(i, 211)
	{
		if(strfind(VehicleNames[i], vname, true) != -1 )
			return i + 400;
	}
	return -1;
}

stock GetWeaponIDFromName(WeaponName[])
{
	//printf("DEBUG CFONTROL GetWeaponIDFromName wname %s", WeaponName);
	if(strfind("molotov",WeaponName,true)!=-1) return 18;
	forLoop(i, 47)
	{
		switch(i)
		{
			case 0,19,20,21,44,45: continue;
			default:
			{
				new name[32]; GetWeaponName(i,name,32);
				if(strfind(name,WeaponName,true) != -1) return i;
			}
		}
	}
	return -1;
}

//==============================================================================

stock MessageToAllAdmins(color, const string[])
{
	forLoop(i, MAX_PLAYERS)
 	{
		if(IsPlayerConnected(i) == 1 && PlayerInfo[i][Registered] && PlayerInfo[i][LoggedIn] && PlayerInfo[i][Level] >= 1) SendClientMessage(i, color, string);
	}
	return 1;
}
stock MessageToAdminsVips(color,const string[])
{
	forLoop(i, MAX_PLAYERS)
 	{
		if(IsPlayerConnected(i) == 1 && PlayerInfo[i][Registered] && PlayerInfo[i][LoggedIn]) if (PlayerInfo[i][Level] >= 1 || PlayerInfo[i][VIP] > 0) SendClientMessage(i, color, string);
	}
	return 1;
}

stock GiveAmmo(playerid)
{
	//printf("DEBUG CFONTROL GiveAmmo 1");
	new slot, weap, ammo;
	forLoop(slot, 14)
	{
    	GetPlayerWeaponData(playerid, slot, weap, ammo);
		if(IsValidWeapon(weap))
		{
		   	GiveWeapon(playerid, weap, 300);
		}
	}
	//printf("DEBUG CFONTROL GiveAmmo 2");
	return 1;
}
stock isAllowedToChangeMode(playerid, bool:checkclass = true)
{
	if(checkclass)
	{
	    if(TWPlayerInfo[playerid][Class] == VICE && PlayerInfo[playerid][PlayerMode] == TW)
		{
			SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You are a vice leader, you cannot use this command.");
			return false;
		}
		if(TWPlayerInfo[playerid][Class] == LEADER && PlayerInfo[playerid][PlayerMode] == TW)
		{
			SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You are a leader, you cannot use this command.");
			return false;
		}
		if(PTPPlayerInfo[playerid][Class] == PRESIDENT && PlayerInfo[playerid][PlayerMode] == PTP)
		{
			SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You are the president, you cannot use this command.");
			return false;
		}
		if(PTPPlayerInfo[playerid][Class] == VICE && PlayerInfo[playerid][PlayerMode] == PTP)
		{
			SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You are the vice, you cannot use this command.");
			return false;
		}
	}
	if(PlayerInfo[playerid][PlayerMode] == CO && COPlayerInfo[playerid][Arresting]>-1)
	{
		SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You cannot use this command at this moment.");
		return false;
	}
 	if(GetPlayerState(playerid) == PLAYER_STATE_WASTED)
 	{
	 	SendClientMessage(playerid,blue,"{FF0000}Error:{FFFFFF} You cannot use this comamnd now.");
	 	return false;
	}
	return true;
}

forward OnPlayerChangeMode(playerid, prevmode, newmode, bool:spawn,bool:givemsg);
public OnPlayerChangeMode(playerid, prevmode, newmode, bool:spawn,bool:givemsg)
{
	//printf("DEBUG CFONTROL OnPlayerChangeMode 1 pid %d, pm %d, nm %d", playerid, prevmode, newmode);
	ToggleThePlayerSpectating(playerid, 0);//a little house keeping..
	SFPlayerInfo[playerid][Superman] = 0;
	SFPlayerInfo[playerid][Spiderman] = 0;

    if(prevmode != newmode)
	{
        updateMMPlayers();
		PlayerInfo[playerid][Spree] = 0;
		if(prevmode != LOBBY)CalculatekSpree(prevmode);
	    GameTextForPlayer(playerid, " ",999, 3);
		EnableStuntBonusForPlayer(playerid, 0);
		StopAudioStreamForPlayer(playerid);
		forLoop(y, MAX_PLAYERS) UpdateDynamic3DTextLabelText(PlayerInfo[playerid][EnemyFriend][y], 0xFF0000AA, " ");
		if(newmode == FFA)
		{
		    FFACheckGangZoneCount(playerid, false);
		}
	    if(newmode == LOBBY)
	    {
	        PlayerInfo[playerid][MainMenu] = 0;
			SetPlayerScore(playerid,0);
	    }
	    if(prevmode == TRP)
	    {
    		RPSavePlayerStats(playerid);
        }
        if(newmode == TRP)
	    {
            ClearTheChatForPlayer(playerid);
        }
        if(newmode == GK)
	    {
    		GKPlayerInfo[playerid][CaseTime] = 0;
        }
	    if(prevmode == ZO)
	    {
    		ZOPlayerInfo[playerid][Chosen] = 0;
        }
        if(prevmode == PJ)
	    {
	        PVPDisqualifyPJ(playerid, 1);
	        TextDrawHideForPlayer(playerid,PJTXTD[mInfo]);
	        HideNewMapTextsPJ(playerid);
		    HideSpecTexts(playerid);
		    HidePJAliveText(playerid);
		    HidePJTTText(playerid);
	        PJPlayerInfo[playerid][Alive] = 0;
			PJPlayerInfo[playerid][rRespawn] = 0;
			PJPlayerInfo[playerid][Respawning] = 0;
	        PJPlayerInfo[playerid][SpecID] = -1;
	        DMPJDeathDisconnect(playerid, 0,0);
	    }
	    if(prevmode == DM)
	    {
	        PVPDisqualifyDM(playerid, 1);
	        TextDrawHideForPlayer(playerid,DMTXTD[mInfo]);
	        HideNewMapTextsDM(playerid);
		    HideSpecTexts(playerid);
		    HideDMAliveText(playerid);
		    HideDMDDTexts(playerid);
		    HideDMTTText(playerid);
		    DM_StopSpectate(playerid);
	        DMPlayerInfo[playerid][Alive] = 0;
			DMPlayerInfo[playerid][rRespawn] = 0;
	        DMPlayerInfo[playerid][SpecID] = -1;
	        DMPJDeathDisconnect(playerid, 0,0);
	    }
	    if(newmode == DM)
	    {
	        DMPlayerInfo[playerid][rRespawn] = 0;
	    }
	    if(newmode == PJ)
	    {
	        PJPlayerInfo[playerid][rRespawn] = 0;
			PJPlayerInfo[playerid][Respawning] = 0;
	    }
	    if(newmode == STUNT) EnableStuntBonusForPlayer(playerid, 1);
	    if(prevmode == STUNT)
	    {
	        if(SFPlayerInfo[playerid][Event] > 0)QuitEvent(playerid,0);
	        if(SFPlayerInfo[playerid][SpecID] > -1)
	        {
				SFPlayerInfo[playerid][SpecID] = -1;
				HideSpecTexts(playerid);
			}
	    }
	    if(prevmode == TW)
	    {
	        DestroyAllPlayerTWBombs(playerid);
		}
		if(prevmode == TL)
	    {
	    	DestroyPlayerDDShip(playerid);
	    }
		if(prevmode == CTF)
	    {
	    	if(CTFPlayerInfo[playerid][Capturing] == 1)
	    	{
	    	    PlaceFlagAtPlayerPos(playerid);
	    	}
	    }
		if(newmode == VW)
		{
		    VWPlayerInfo[playerid][Deployed] = 0;
		    
		    if(TeamCountVW(VW_VIETNAM) == TeamCountVW(VW_USA))
            {
                switch(random(2))
                {
                    case 0:PlayerInfo[playerid][pTeam] = VW_USA;
                    case 1:PlayerInfo[playerid][pTeam] = VW_VIETNAM;
                }
			}
			else if (TeamCountVW(VW_USA) > TeamCountVW(VW_VIETNAM))
				PlayerInfo[playerid][pTeam] = VW_VIETNAM;
			else
				PlayerInfo[playerid][pTeam] = VW_USA;
		}
		if(prevmode == VW)
		{
		    if(!VWPlayerInfo[playerid][Deployed])
		        CancelSelectTextDraw(playerid);
		}
		if(newmode == TW)
		{
		    TWPlayerInfo[playerid][Class] = SOLDIER;
			DestroyAllPlayerTWBombs(playerid);
		}
		if(PlayerInfo[playerid][Vehicle] != -1) CarDeleter(PlayerInfo[playerid][Vehicle]);
		PlayerInfo[playerid][Vehicle] = -1;
		forLoop(i, 10)
	    {
			RemovePlayerAttachedObject(playerid, i);
			RemovePlayerAttachedObjectEx(playerid, i);
		}
	}
	if(prevmode != newmode &&  newmode != LOBBY)
	{
		if(givemsg)
		{
		    new msg[120];
			format(msg, sizeof(msg), "~w~%s (~p~joined~w~) %s",FixpInfoName(playerid),PlayerModeNames[newmode]);
			forLoop(i, MAX_MODES)UpdatepInfo(i,msg);
	        format(msg, sizeof(msg), "[MODE CHANGE] %s[%d] has joined %s!", PlayerInfo[playerid][Name], playerid,PlayerModeNames[newmode]);
			db_SaveChat(-1, -1, msg);
		}
		else
		{
		 	if(PlayerInfo[playerid][poFirstTime])
			{
				new msg[120];
				format(msg, sizeof(msg), "~w~%s (~p~joined~w~) %s",FixpInfoName(playerid),PlayerModeNames[newmode]);
				forLoop(i, MAX_MODES)UpdatepInfo(i,msg);
		        format(msg, sizeof(msg), "[MODE CHANGE] %s[%d] has joined %s!", PlayerInfo[playerid][Name], playerid,PlayerModeNames[newmode]);
				db_SaveChat(-1, -1, msg);
			}
		}
		if(ModeCount(prevmode))
		{
		    forLoop(i, MAX_PLAYERS)
			{
				if(IsPlayerConnected(i) && GetPlayerMode(i) == prevmode)
				{
		    		AskToChangeMode(i);
				}
			}
		}
	}
    if(prevmode == newmode)
	{
    	if(newmode == TW)
		{
		    if(TWPlayerInfo[playerid][Class] == LEADER || TWPlayerInfo[playerid][Class] == VICE || TWPlayerInfo[playerid][Class] == BODYGUARD
				|| TWPlayerInfo[playerid][Class] == SPY || TWPlayerInfo[playerid][Class] == NOCLASS) TWPlayerInfo[playerid][Class] = SOLDIER;
		}
		if(newmode == VW)
		{
		    VWPlayerInfo[playerid][Deployed] = 0;
		}
 	}
	if(spawn)
    {
	    OtherDeathDisconnect(playerid,0,0);
		ResetWeapons(playerid);
		A_SpawnPlayer(playerid);
		if(prevmode != newmode &&  newmode != LOBBY && PlayerInfo[playerid][poFirstTime])
			GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~w~Use ~r~/menu ~w~to switch mode", 3000, 3);
	}
	//printf("DEBUG CFONTROL OnPlayerChangeMode 2 pid %d, pm %d, nm %d", playerid, prevmode, newmode);
    return 1;
}


stock SetPlayerMode(playerid, newmode, bool:spawn, bool:fromcmd)
{
	//printf("DEBUG CFONTROL SetPlayerMode 1 pid %d nm %d", playerid, newmode);
	new prevmode = PlayerInfo[playerid][PlayerMode];
    PlayerInfo[playerid][PlayerMode] = newmode;
    CallLocalFunction("OnPlayerChangeMode", "iddbb", playerid,prevmode,newmode,spawn,fromcmd);
	//printf("DEBUG CFONTROL SetPlayerMode 2 pid %d nm %d", playerid, newmode);
    return 1;
}
stock GetPlayerMode(playerid)
{
	//printf("DEBUG CFONTROL GetPlayerMode");
	if(!PlayerInfo[playerid][Spawned] || !PlayerInfo[playerid][MainMenu] || IsPlayerNPC(playerid) || !IsPlayerConnected(playerid))
		return -1;
	else return PlayerInfo[playerid][PlayerMode];
}
stock GetThePlayerHealth(playerid)
{
	//printf("DEBUG CFONTROL GetThePlayerHealth");
	new Float:tphp;
	GetPlayerHealth(playerid, tphp);
	return floatround(tphp);
}
stock fcreate(filename[]) {
	new File:fhnd;
	if (fexist(filename)) return false;
	fhnd=fopen(filename,io_write);
	fclose(fhnd);
	return true;
}
stock userSettings_Exists(nickname[]) {
	new tmp[MAX_STRING];
	format(tmp,sizeof(tmp),"/pangea/userSettings/%s.txt",nickname);
	return fexist(tmp);
}
stock userSettings_Create(playerid) {
	if (userSettings_Exists(PlayerInfo[playerid][Name])) return false;
	new fname[MAX_STRING];
	format(fname,sizeof(fname),"/pangea/userSettings/%s.txt",PlayerInfo[playerid][Name]);
	fcreate(fname);
	return true;
}
stock ActivateSettingsForPlayer(playerid)
{
    new File:file_ptr,file[126],line[456],loop_breaker,str[120], nl, m[RP_MAX_BAG_ITEMS], v[RP_MAX_BAG_ITEMS];
	format(file,sizeof file,"/pangea/userSettings/%s.txt",PlayerInfo[playerid][Name]);
	file_ptr = fopen(file,io_read);
	if(!file_ptr) return 0;

	while(fread(file_ptr,line, sizeof(line)) > 0)
	{
	    if(breakLoop(++loop_breaker, "ActivateSettingsForPlayer"))break;
	    if(strfind(line, "All=", true) != -1)
	    {
	        format(line, sizeof line, "%s",strreplace("All=","",line));
	        sscanf(line,"p<|>dddddddddddddddddddddddddddddddddddddddddddd"
			,PlayerInfo[playerid][Jailed],PlayerInfo[playerid][Frozen],PlayerInfo[playerid][Muted]
			,PlayerInfo[playerid][NoCMD],TWPlayerInfo[playerid][AlreadyLeader],TWPlayerInfo[playerid][AtomicBought]
			,TWPlayerInfo[playerid][EnteredTower],PTPPlayerInfo[playerid][AlreadyLeader],PlayerInfo[playerid][HideAdmin]
			,PlayerInfo[playerid][DisableSounds],PlayerInfo[playerid][SavedPos],PlayerInfo[playerid][PosX]
			,PlayerInfo[playerid][PosY],PlayerInfo[playerid][PosZ],PlayerInfo[playerid][PosInt]
			,PlayerInfo[playerid][PosWorld],PlayerInfo[playerid][SFSavedPos],PlayerInfo[playerid][SFPosX]
			,PlayerInfo[playerid][SFPosY],PlayerInfo[playerid][TimesOnServer],PlayerInfo[playerid][SFPosZ]
			,PlayerInfo[playerid][SFPosInt],PlayerInfo[playerid][SFPosWorld],DMPlayerInfo[playerid][Hats]
			,DMPlayerInfo[playerid][Flash],DMPlayerInfo[playerid][dWeather],DMPlayerInfo[playerid][dTime]
			,nl,DMPlayerInfo[playerid][Glasses],DMPlayerInfo[playerid][Wheels]
			,DMPlayerInfo[playerid][eBarrel],nl,PJPlayerInfo[playerid][Glasses]
			,PJPlayerInfo[playerid][Hats],PJPlayerInfo[playerid][dWeather],PJPlayerInfo[playerid][dTime]
			,PlayerInfo[playerid][SFSP_SavedPos],PlayerInfo[playerid][SFSP_PosX]
			,PlayerInfo[playerid][SFSP_PosY],PlayerInfo[playerid][SFSP_PosZ]
			,PlayerInfo[playerid][SFSP_PosInt],PlayerInfo[playerid][SFSP_PosWorld],PlayerInfo[playerid][SFPosAng]
			,PlayerInfo[playerid][SFSP_PosAng]);
	    }
	    forLoop(i, 10)
		{
			format(str, sizeof str,"pAtt_%d=",i);
			if(strfind(line, str, true) != -1)
	    	{
	            format(line, sizeof line, "%s",strreplace(str,"",line));
		   		pAttachments[playerid][i][Exists] = 1;
		        sscanf(line,"p<|>ddfffffffff",pAttachments[playerid][i][ModelID],pAttachments[playerid][i][BoneID],pAttachments[playerid][i][pOffsetX],pAttachments[playerid][i][pOffsetY],
					pAttachments[playerid][i][pOffsetZ],pAttachments[playerid][i][pRotX],pAttachments[playerid][i][pRotY],pAttachments[playerid][i][pRotZ],
					pAttachments[playerid][i][pScaleX],pAttachments[playerid][i][pScaleY],pAttachments[playerid][i][pScaleZ]);
			}
		}
		if(strfind(line, "SP=", true) != -1)
	    {
	        format(line, sizeof line, "%s",strreplace("SP=","",line));
		   	sscanf(line,"p<|>s[10]dd"
			,PlayerInfo[playerid][SpeedoCol],PlayerInfo[playerid][SpeedoType],PlayerInfo[playerid][SpeedoSide]);
		}
		if(strfind(line, "VC=", true) != -1)
	    {
	        new d[14];
	        format(line, sizeof line, "%s",strreplace("VC=","",line));
		   	sscanf(line,"p<|>dddddddddddddd"
			,d[0],d[1],d[2],d[3],d[4],d[5],d[6],d[7],d[8],d[9],d[10],d[11],d[12],d[13]);
			forLoop(i, 14)
			{
			    PlayerInfo[playerid][vComponents][i] = d[i];
			}
		}
	    if(strfind(line, "FFA=", true) != -1)
	    {
			new d[102];
	        format(line, sizeof line, "%s",strreplace("FFA=","",line));
		   	sscanf(line,"p<|>dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd"
			,d[0],d[1],d[2],d[3],d[4],d[5],d[6],d[7],d[8],d[9],d[10],d[11],d[12],d[13],d[14],d[15],d[16],d[17],d[18],d[19],d[20]
			,d[21],d[22],d[23],d[24],d[25],d[26],d[27],d[28],d[29],d[30],d[31],d[32],d[33],d[34],d[35],d[36],d[37],d[38],d[39]
			,d[40],d[41],d[42],d[43],d[44],d[45],d[46],d[47],d[48],d[49],d[50],d[51],d[52],d[53],d[54],d[55],d[56],d[57],d[58]
			,d[59],d[60],d[61],d[62],d[63],d[64],d[65],d[66],d[67],d[68],d[69],d[70],d[71],d[72],d[73],d[74],d[75],d[76],d[77]
			,d[78],d[79],d[80],d[81],d[82],d[83],d[84],d[85],d[86],d[87],d[88],d[89],d[90],d[91],d[92],d[93],d[94],d[95],d[96]
			,d[97],d[98],d[99],d[100],d[101]);
   			forLoop(i, 102)
			{
			    FFAPlayerInfo[playerid][pTreasure][i] = d[i];
			}
		}
	    if(strfind(line, "RPBAG=", true) != -1)
	    {
			format(str,sizeof str,"p<|>");
			forLoop(b, RP_MAX_BAG_ITEMS) strcat(str, "dd");
			
	        format(line, sizeof line, "%s",strreplace("RPBAG=","",line));
		   	sscanf(line,str
			,m[0],v[0],m[1],v[1],m[2],v[2],m[3],v[3],m[4],v[4],m[5],v[5],m[6],v[6]
			,m[7],v[7],m[8],v[8],m[9],v[9],m[10],v[10],m[11],v[11],m[12],v[12],m[13]
			,v[13],m[14],v[14],m[15],v[15],m[16],v[16],m[17],v[17],m[18],v[18],m[19]
			,v[19],m[20],v[20],m[21],v[21],m[22],v[22],m[23],v[23],m[24],v[24],m[25]
			,v[25],m[26],v[26],m[27],v[27],m[28],v[28],m[29],v[29],m[30],v[30],m[31]
			,v[31],m[32],v[32],m[33],v[33],m[34],v[34],m[35],v[35],m[36],v[36],m[37]
			,v[37],m[38],v[38],m[39],v[39],m[40],v[40],m[41],v[41],m[42],v[42]);
			
   			forLoop(b, RP_MAX_BAG_ITEMS)
			{
			    RPPlayerInfo[playerid][BagItems][b] = m[b];
			    RPPlayerInfo[playerid][BagItemsValue][b] = v[b];
			}
		}
	}
	fclose(file_ptr);
	return 1;
}
stock SaveSettingsForPlayer(playerid)
{
    new file[126],string[556], File:fwhnd, d[102];
	format(file,sizeof file,"/pangea/userSettings/%s.txt",PlayerInfo[playerid][Name]);
	fwhnd=fopen(file,io_write);
	if(!fwhnd) return 0;
	
   	format(string,sizeof string,"All=%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d"
 	,PlayerInfo[playerid][Jailed],PlayerInfo[playerid][Frozen],PlayerInfo[playerid][Muted]
	,PlayerInfo[playerid][NoCMD],TWPlayerInfo[playerid][AlreadyLeader],TWPlayerInfo[playerid][AtomicBought]
	,TWPlayerInfo[playerid][EnteredTower],PTPPlayerInfo[playerid][AlreadyLeader],PlayerInfo[playerid][HideAdmin]
	,PlayerInfo[playerid][DisableSounds],PlayerInfo[playerid][SavedPos],PlayerInfo[playerid][PosX]
	,PlayerInfo[playerid][PosY],PlayerInfo[playerid][PosZ],PlayerInfo[playerid][PosInt]
	,PlayerInfo[playerid][PosWorld],PlayerInfo[playerid][SFSavedPos],PlayerInfo[playerid][SFPosX]
	,PlayerInfo[playerid][SFPosY],PlayerInfo[playerid][TimesOnServer]+1,PlayerInfo[playerid][SFPosZ]
	,PlayerInfo[playerid][SFPosInt],PlayerInfo[playerid][SFPosWorld],DMPlayerInfo[playerid][Hats]
	,DMPlayerInfo[playerid][Flash],DMPlayerInfo[playerid][dWeather],DMPlayerInfo[playerid][dTime]
	,0,DMPlayerInfo[playerid][Glasses],DMPlayerInfo[playerid][Wheels]
	,DMPlayerInfo[playerid][eBarrel],0,PJPlayerInfo[playerid][Glasses]
	,PJPlayerInfo[playerid][Hats],PJPlayerInfo[playerid][dWeather],PJPlayerInfo[playerid][dTime]
	,PlayerInfo[playerid][SFSP_SavedPos],PlayerInfo[playerid][SFSP_PosX]
	,PlayerInfo[playerid][SFSP_PosY],PlayerInfo[playerid][SFSP_PosZ]
	,PlayerInfo[playerid][SFSP_PosInt],PlayerInfo[playerid][SFSP_PosWorld],PlayerInfo[playerid][SFPosAng]
	,PlayerInfo[playerid][SFSP_PosAng]);
	fwrite(fwhnd,string);
	fwrite(fwhnd,"\r\n");

	forLoop(i, 14) d[i] = PlayerInfo[playerid][vComponents][i];
    format(string,sizeof string,"VC=%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d"
	,d[0],d[1],d[2],d[3],d[4],d[5],d[6],d[7],d[8],d[9],d[10],d[11],d[12],d[13]);
	fwrite(fwhnd,string);
	fwrite(fwhnd,"\r\n");

    format(string,sizeof string,"SP=%s|%d|%d"
	,PlayerInfo[playerid][SpeedoCol],PlayerInfo[playerid][SpeedoType],PlayerInfo[playerid][SpeedoSide]);
    fwrite(fwhnd,string);
	fwrite(fwhnd,"\r\n");

 	forLoop(i, 102) d[i]=FFAPlayerInfo[playerid][pTreasure][i];
	format(string,sizeof string,"FFA=%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d"
	,d[0],d[1],d[2],d[3],d[4],d[5],d[6],d[7],d[8],d[9],d[10],d[11],d[12],d[13],d[14],d[15],d[16],d[17],d[18],d[19],d[20]
	,d[21],d[22],d[23],d[24],d[25],d[26],d[27],d[28],d[29],d[30],d[31],d[32],d[33],d[34],d[35],d[36],d[37],d[38],d[39]
	,d[40],d[41],d[42],d[43],d[44],d[45],d[46],d[47],d[48],d[49],d[50],d[51],d[52],d[53],d[54],d[55],d[56],d[57],d[58]
	,d[59],d[60],d[61],d[62],d[63],d[64],d[65],d[66],d[67],d[68],d[69],d[70],d[71],d[72],d[73],d[74],d[75],d[76],d[77]
	,d[78],d[79],d[80],d[81],d[82],d[83],d[84],d[85],d[86],d[87],d[88],d[89],d[90],d[91],d[92],d[93],d[94],d[95],d[96]
	,d[97],d[98],d[99],d[100],d[101]);
	fwrite(fwhnd,string);
	fwrite(fwhnd,"\r\n");

	forLoop(i, 10)
	{
		if(pAttachments[playerid][i][Exists])
        {
            format(string,sizeof string,"pAtt_%d=%d|%d|%f|%f|%f|%f|%f|%f|%f|%f|%f",i,pAttachments[playerid][i][ModelID],pAttachments[playerid][i][BoneID],pAttachments[playerid][i][pOffsetX],pAttachments[playerid][i][pOffsetY],
				pAttachments[playerid][i][pOffsetZ],pAttachments[playerid][i][pRotX],pAttachments[playerid][i][pRotY],pAttachments[playerid][i][pRotZ],
				pAttachments[playerid][i][pScaleX],pAttachments[playerid][i][pScaleY],pAttachments[playerid][i][pScaleZ]);
			fwrite(fwhnd,string);
			fwrite(fwhnd,"\r\n");
		}
  	}

    format(string,sizeof string,"");
	forLoop(b, RP_MAX_BAG_ITEMS)
	{
	    format(d,sizeof d,"|%d|%d",RPPlayerInfo[playerid][BagItems][b],RPPlayerInfo[playerid][BagItemsValue][b]);
        strcat(string, d);
    }
    
    format(string,sizeof string,"RPBAG=%s",string[1]);
    fwrite(fwhnd,string);
	fwrite(fwhnd,"\r\n");

	fclose(fwhnd);
	return 1;
}

stock fixPlayerName(playerid, estate)
{
	new name[50];
	if(estate)
	{
	    if(PlayerInfo[playerid][PlayerMode] != -1)
	    {
			format(name, sizeof name,"%s.%s",PlayerModeNamesABV[PlayerInfo[playerid][PlayerMode]],PlayerInfo[playerid][Name]);
			if(strlen(name) >= 24)strdel(name, 24, strlen(name));
			SetPlayerName(playerid, name);
		}else SetPlayerName(playerid, PlayerInfo[playerid][Name]);
	}
	else
	{
	    new tag[10];
		GetPlayerName(playerid, name, MAX_PLAYER_NAME);
	    forLoop(i, sizeof(PlayerModeNamesABV))
		{
		    format(tag,sizeof(tag),"%s.",PlayerModeNamesABV[i]);
		    if(strfind(name, tag,false) == 0)
		    {
				strdel(name, 0, strlen(tag));
				break;
		    }
		}
		if(strlen(name) == 0)
		    format(name, sizeof name, "%s",RandomVehiclePlate());
		SetPlayerName(playerid, name);
	}
}

stock getThePlayerIP(playerid)
{
    new IP[50];
	GetPlayerIp(playerid,IP,50);
	return IP;
}

stock getThePlayerSerial(playerid)
{
    new serial[70];
	gpci(playerid, serial, sizeof serial);
	return serial;
}
stock toStr(num)
{
    new str[50];
	format(str, sizeof str, "%d",num);
	return str;
}

stock breakString(const string[], pos)
{
	new str[90], len = strlen(string);
	format(str, sizeof str, string);
	if(strlen(str) < len) return str;
	for(new i = pos; i < len; i+=pos) strins(str, "\n-", i);
	return str;
}

stock ReturnPlayerID(PlayerName[])
{
	forLoop(i, MAX_PLAYERS)
	{
		if(IsPlayerConnected(i))
		{
			if(strfind(PlayerInfo[i][Name],PlayerName,true)!=-1) return i;
		}
	}
	return INVALID_PLAYER_ID;
}

stock ReturnPlayerIDFromIP(ip[])
{
	forLoop(i, MAX_PLAYERS)
	{
		if(IsPlayerConnected(i))
		{
			if(strfind(getThePlayerIP(i),ip,true)!=-1) return i;
		}
	}
	return INVALID_PLAYER_ID;
}
function: user_RegulateStats(playerid)
{
	if(userSettings_Exists(PlayerInfo[playerid][Name]))
		ActivateSettingsForPlayer(playerid);
	else userSettings_Create(playerid);
	
    FFAPlayerInfo[playerid][TreasureRank] = 0;
    if(FFAPlayerInfo[playerid][Treasures] >= 20) FFAPlayerInfo[playerid][TreasureRank] = 1;
	if(FFAPlayerInfo[playerid][Treasures] >= 40) FFAPlayerInfo[playerid][TreasureRank] = 2;
	if(FFAPlayerInfo[playerid][Treasures] >= 60) FFAPlayerInfo[playerid][TreasureRank] = 3;
	if(FFAPlayerInfo[playerid][Treasures] >= 80) FFAPlayerInfo[playerid][TreasureRank] = 4;
	if(FFAPlayerInfo[playerid][Treasures] >= 90) FFAPlayerInfo[playerid][TreasureRank] = 5;
	if(FFAPlayerInfo[playerid][Treasures] >= 102) FFAPlayerInfo[playerid][TreasureRank] = 6;

    FFAPlayerInfo[playerid][CaptureRank] = 0;
	if(FFAPlayerInfo[playerid][Captures] >= 380) FFAPlayerInfo[playerid][CaptureRank] = 1;
	if(FFAPlayerInfo[playerid][Captures] >= 680) FFAPlayerInfo[playerid][CaptureRank] = 2;
	if(FFAPlayerInfo[playerid][Captures] >= 880) FFAPlayerInfo[playerid][CaptureRank] = 3;
	if(FFAPlayerInfo[playerid][Captures] >= 1280) FFAPlayerInfo[playerid][CaptureRank] = 4;
	if(FFAPlayerInfo[playerid][Captures] >= 1780) FFAPlayerInfo[playerid][CaptureRank] = 5;
	if(FFAPlayerInfo[playerid][Captures] >= 3000) FFAPlayerInfo[playerid][CaptureRank] = 6;

    FFAPlayerInfo[playerid][KillsRank] = 0;
	if(FFAPlayerInfo[playerid][Kills] >= 380) FFAPlayerInfo[playerid][KillsRank] = 1;
	if(FFAPlayerInfo[playerid][Kills] >= 680) FFAPlayerInfo[playerid][KillsRank] = 2;
	if(FFAPlayerInfo[playerid][Kills] >= 980) FFAPlayerInfo[playerid][KillsRank] = 3;
	if(FFAPlayerInfo[playerid][Kills] >= 1380) FFAPlayerInfo[playerid][KillsRank] = 4;
	if(FFAPlayerInfo[playerid][Kills] >= 1980) FFAPlayerInfo[playerid][KillsRank] = 5;
	if(FFAPlayerInfo[playerid][Kills] >= 3000) FFAPlayerInfo[playerid][KillsRank] = 6;

    SFPlayerInfo[playerid][EventRank] = 0;
    if(SFPlayerInfo[playerid][EventsWon] >= 80) SFPlayerInfo[playerid][EventRank] = 1;
	if(SFPlayerInfo[playerid][EventsWon] >= 180) SFPlayerInfo[playerid][EventRank] = 2;
	if(SFPlayerInfo[playerid][EventsWon] >= 280) SFPlayerInfo[playerid][EventRank] = 3;
	if(SFPlayerInfo[playerid][EventsWon] >= 580) SFPlayerInfo[playerid][EventRank] = 4;
	if(SFPlayerInfo[playerid][EventsWon] >= 880) SFPlayerInfo[playerid][EventRank] = 5;
	if(SFPlayerInfo[playerid][EventsWon] >= 2000) SFPlayerInfo[playerid][EventRank] = 6;

    COPlayerInfo[playerid][CriminalRank] = 0;
    if(COPlayerInfo[playerid][Releases] >= 80) COPlayerInfo[playerid][CriminalRank] = 1;
	if(COPlayerInfo[playerid][Releases] >= 180) COPlayerInfo[playerid][CriminalRank] = 2;
	if(COPlayerInfo[playerid][Releases] >= 280) COPlayerInfo[playerid][CriminalRank] = 3;
	if(COPlayerInfo[playerid][Releases] >= 580) COPlayerInfo[playerid][CriminalRank] = 4;
	if(COPlayerInfo[playerid][Releases] >= 880) COPlayerInfo[playerid][CriminalRank] = 5;
	if(COPlayerInfo[playerid][Releases] >= 2000) COPlayerInfo[playerid][CriminalRank] = 6;

    COPlayerInfo[playerid][PoliceRank] = 0;
	if(COPlayerInfo[playerid][Arrests] >= 80) COPlayerInfo[playerid][PoliceRank] = 1;
	if(COPlayerInfo[playerid][Arrests] >= 180) COPlayerInfo[playerid][PoliceRank] = 2;
	if(COPlayerInfo[playerid][Arrests] >= 280) COPlayerInfo[playerid][PoliceRank] = 3;
	if(COPlayerInfo[playerid][Arrests] >= 580) COPlayerInfo[playerid][PoliceRank] = 4;
	if(COPlayerInfo[playerid][Arrests] >= 880) COPlayerInfo[playerid][PoliceRank] = 5;
	if(COPlayerInfo[playerid][Arrests] >= 2000) COPlayerInfo[playerid][PoliceRank] = 6;

    COPlayerInfo[playerid][KillsRank] = 0;
	if(COPlayerInfo[playerid][Kills] >= 80) COPlayerInfo[playerid][KillsRank] = 1;
	if(COPlayerInfo[playerid][Kills] >= 180) COPlayerInfo[playerid][KillsRank] = 2;
	if(COPlayerInfo[playerid][Kills] >= 280) COPlayerInfo[playerid][KillsRank] = 3;
	if(COPlayerInfo[playerid][Kills] >= 580) COPlayerInfo[playerid][KillsRank] = 4;
	if(COPlayerInfo[playerid][Kills] >= 880) COPlayerInfo[playerid][KillsRank] = 5;
	if(COPlayerInfo[playerid][Kills] >= 2000) COPlayerInfo[playerid][KillsRank] = 6;

    PTPPlayerInfo[playerid][Rank] = 0;
    if(PTPPlayerInfo[playerid][Kills] >= 380) PTPPlayerInfo[playerid][Rank] = 1;
	if(PTPPlayerInfo[playerid][Kills] >= 680) PTPPlayerInfo[playerid][Rank] = 2;
	if(PTPPlayerInfo[playerid][Kills] >= 980) PTPPlayerInfo[playerid][Rank] = 3;
	if(PTPPlayerInfo[playerid][Kills] >= 1380) PTPPlayerInfo[playerid][Rank] = 4;
	if(PTPPlayerInfo[playerid][Kills] >= 1980) PTPPlayerInfo[playerid][Rank] = 5;

    TWPlayerInfo[playerid][ArmyRank] = 1;
    if(TWPlayerInfo[playerid][TookOver] >= 80) TWPlayerInfo[playerid][ArmyRank] = 2;
	if(TWPlayerInfo[playerid][TookOver] >= 120) TWPlayerInfo[playerid][ArmyRank] = 3;
	if(TWPlayerInfo[playerid][TookOver] >= 260) TWPlayerInfo[playerid][ArmyRank] = 4;
	if(TWPlayerInfo[playerid][TookOver] >= 400) TWPlayerInfo[playerid][ArmyRank] = 5;
	if(TWPlayerInfo[playerid][TookOver] >= 840) TWPlayerInfo[playerid][ArmyRank] = 6;

    TWPlayerInfo[playerid][WeapRank] = 1;
	if(TWPlayerInfo[playerid][Kills] >= 50) TWPlayerInfo[playerid][WeapRank] = 2;
	if(TWPlayerInfo[playerid][Kills] >= 250) TWPlayerInfo[playerid][WeapRank] = 3;
	if(TWPlayerInfo[playerid][Kills] >= 650) TWPlayerInfo[playerid][WeapRank] = 4;
	if(TWPlayerInfo[playerid][Kills] >= 1050) TWPlayerInfo[playerid][WeapRank] = 5;
	if(TWPlayerInfo[playerid][Kills] >= 1850) TWPlayerInfo[playerid][WeapRank] = 6;

    TWPlayerInfo[playerid][MedicRank] = 1;
	if(TWPlayerInfo[playerid][PeopleSaved] >= 50) TWPlayerInfo[playerid][MedicRank] = 2;
	if(TWPlayerInfo[playerid][PeopleSaved] >= 150) TWPlayerInfo[playerid][MedicRank] = 3;
	if(TWPlayerInfo[playerid][PeopleSaved] >= 300) TWPlayerInfo[playerid][MedicRank] = 4;
	if(TWPlayerInfo[playerid][PeopleSaved] >= 500) TWPlayerInfo[playerid][MedicRank] = 5;
	if(TWPlayerInfo[playerid][PeopleSaved] >= 800) TWPlayerInfo[playerid][MedicRank] = 6;

    TWPlayerInfo[playerid][AirRank] = 1;
	if(TWPlayerInfo[playerid][BombedShips] >= 20) TWPlayerInfo[playerid][AirRank] = 2;
	if(TWPlayerInfo[playerid][BombedShips] >= 60) TWPlayerInfo[playerid][AirRank] = 3;
	if(TWPlayerInfo[playerid][BombedShips] >= 400) TWPlayerInfo[playerid][AirRank] = 4;
	if(TWPlayerInfo[playerid][BombedShips] >= 800) TWPlayerInfo[playerid][AirRank] = 5;
	if(TWPlayerInfo[playerid][BombedShips] >= 1200) TWPlayerInfo[playerid][AirRank] = 6;

    if(TWPlayerInfo[playerid][WeapRank] == 0) TWPlayerInfo[playerid][WeapRank] = 1;
    if(TWPlayerInfo[playerid][AirRank] == 0) TWPlayerInfo[playerid][AirRank] = 1;
    if(TWPlayerInfo[playerid][MedicRank] == 0) TWPlayerInfo[playerid][MedicRank] = 1;
    if(TWPlayerInfo[playerid][ArmyRank] == 0) TWPlayerInfo[playerid][ArmyRank] = 1;

    if(TWPlayerInfo[playerid][WeapRank] > 6) TWPlayerInfo[playerid][WeapRank] = 6;
    if(TWPlayerInfo[playerid][AirRank] > 6) TWPlayerInfo[playerid][AirRank] = 6;
    if(TWPlayerInfo[playerid][MedicRank] > 6) TWPlayerInfo[playerid][MedicRank] = 6;
    if(TWPlayerInfo[playerid][ArmyRank] > 6) TWPlayerInfo[playerid][ArmyRank] = 6;

    if(SFPlayerInfo[playerid][EventRank] > 6)SFPlayerInfo[playerid][EventRank] = 6;
	if(FFAPlayerInfo[playerid][TreasureRank] > 6)FFAPlayerInfo[playerid][TreasureRank] = 6;
	if(FFAPlayerInfo[playerid][CaptureRank] > 6)FFAPlayerInfo[playerid][CaptureRank] = 6;
	if(FFAPlayerInfo[playerid][KillsRank] > 6)FFAPlayerInfo[playerid][KillsRank] = 6;
	if(COPlayerInfo[playerid][CriminalRank] > 6)COPlayerInfo[playerid][CriminalRank] = 6;
	if(COPlayerInfo[playerid][PoliceRank] > 6)COPlayerInfo[playerid][PoliceRank] = 6;
	if(COPlayerInfo[playerid][KillsRank] > 6)COPlayerInfo[playerid][KillsRank] = 6;

	if(RPPlayerInfo[playerid][Money] < 0)RPPlayerInfo[playerid][Money] = 0;
	if(SFPlayerInfo[playerid][Money] < 0)SFPlayerInfo[playerid][Money] = 0;
    if(RPPlayerInfo[playerid][Health]>100.0)RPPlayerInfo[playerid][Health] = 99.9;
    
    FFAPlayerInfo[playerid][Treasures] = 0;
    forLoop(i, 102)
	{
	    if(FFAPlayerInfo[playerid][pTreasure][i] == 1)
	        FFAPlayerInfo[playerid][Treasures]++;
	}
	if(GangInfo[getFFAGangID(FFAPlayerInfo[playerid][GangID])][Exists] != 1)
	{
	    FFAPlayerInfo[playerid][GangID] = 0;
    	format(FFAPlayerInfo[playerid][gRank],50,"%s","s");
	}

	if(SquadInfo[getTWSquadID(TWPlayerInfo[playerid][SquadID])][Exists] != 1)
	{
	    TWPlayerInfo[playerid][SquadID] = 0;
	}

    FFAPlayerInfo[playerid][Properties] = 0;
    forLoop(i, MAX_FFA_PROPERTIES)
	{
		if(FFAPropertyInfo[i][Exists] && FFAPropertyInfo[i][OwnerType] == FFA_OWNER_PLAYER && FFAPropertyInfo[i][OwnerID] == PlayerInfo[playerid][ID])
		{
            FFAPlayerInfo[playerid][Properties]++;
            //if player has changed nickanme online
            if(strfind(FFAPropertyInfo[i][Owner], PlayerInfo[playerid][Name], true) == -1)
			{
			    format(FFAPropertyInfo[i][Owner], 50,"%s",PlayerInfo[playerid][Name]);
    			UpdateFFAPropertyText(i, false);
			}
		}
	}

    //if player has changed nickanme online
	if(FFAPlayerInfo[playerid][GangID] > 0)
	{
	    new ganglocal = getFFAGangID(FFAPlayerInfo[playerid][GangID]);
		if(GangInfo[ganglocal][gLeaderID] == PlayerInfo[playerid][ID])
		{
		    if(strfind(GangInfo[ganglocal][gLeader], PlayerInfo[playerid][Name], true) == -1)
			{
		    	format(GangInfo[ganglocal][gLeader],50,"%s",PlayerInfo[playerid][Name]);
		    	UpdateFFAGangText(ganglocal);
	    	}
		}
		if(GangInfo[ganglocal][gViceID] == PlayerInfo[playerid][ID])
		{
			if(strfind(GangInfo[ganglocal][gVice], PlayerInfo[playerid][Name], true) == -1)
				format(GangInfo[ganglocal][gVice],50,"%s",PlayerInfo[playerid][Name]);
		}
    }
    if(TWPlayerInfo[playerid][SquadID] > 0)
    {
	    new squadlocal = getTWSquadID(TWPlayerInfo[playerid][SquadID]);
        if(SquadInfo[squadlocal][LeaderID] == PlayerInfo[playerid][ID] && strfind(SquadInfo[squadlocal][Leader], PlayerInfo[playerid][Name], true) == -1)
			format(SquadInfo[squadlocal][Leader],50,"%s",PlayerInfo[playerid][Name]);
	}
}

stock returnPlayerTime(playerid)
{
	new string[100], hr, mins2, sec;
	sec = PlayerInfo[playerid][TimeOn];
	hr = floatround(sec / 3600);
	mins2 = floatround((sec - (hr * 3600))/60);
	sec -= ((hr * 3600) + (mins2 * 60));
    format(string,sizeof(string),"%d hr(s) %d min(s) %d secs",hr,mins2,sec);
	return string;
}

stock returnPlayerHours(playerid)
{
	return floatround(PlayerInfo[playerid][TimeOn] / 3600);
}

function: user_Exists(name[])
{
	new Cache: cache_id, d_query[156], pID = 0, rows;
	mysql_format(ServerInfo[DataBase], d_query, sizeof d_query, "SELECT ID FROM USERS WHERE NAME='%s' AND ACTIVATED = 1 LIMIT 1",name);
	cache_id = mysql_query(ServerInfo[DataBase], d_query, true);
	rows = cache_num_rows();
	if(rows == 0)
	{
		cache_delete(cache_id);
		return 0;
	}
	cache_get_value_name_int(0, "ID", pID);
	cache_delete(cache_id);
	return pID;
}
function: user_Remove(name[])
{
	new d_query[156];
	mysql_format(ServerInfo[DataBase], d_query, sizeof d_query, "UPDATE USERS SET ACTIVATED = 0 WHERE NAME='%s'",name);
	mysql_tquery(ServerInfo[DataBase], d_query, "", "");
	return true;
}
function: user_CheckLogin(playerid,pwd[])
{
	return (strcmp(PlayerInfo[playerid][Password],MD5_Hash(pwd),true) == 0);
}
function: user_Create(playerid,pwd[])
{
	new Cache: cache_id;
	new strdate[20], d_query[300], year,month,day;
	format(PlayerInfo[playerid][Password], 50, "%s",MD5_Hash(pwd));

	getdate(year, month, day);
    format(strdate, sizeof(strdate), "%d-%d-%d",year, month, day);
	format(PlayerInfo[playerid][RegisterDate],50,"%s",returnDate(strdate));
	PlayerInfo[playerid][LoggedIn] = 1;
    PlayerInfo[playerid][Registered] = 1;
    PlayerInfo[playerid][Level] = 0;
    
    PlayerInfo[playerid][TimeOn] = 0;
    
    mysql_format(ServerInfo[DataBase], d_query, sizeof d_query, "'%e','%e',CURDATE(),1,1,'%s','%s'"
	,MD5_Hash(pwd),PlayerInfo[playerid][Name],getThePlayerIP(playerid),getThePlayerSerial(playerid));
	format(d_query, sizeof d_query, "INSERT INTO USERS (PASSWORD,NAME,REG_DATE,ACTIVATED,ONLINE,IP,SERIAL) VALUES (%s)",d_query);
    cache_id = mysql_query(ServerInfo[DataBase], d_query, true);
    PlayerInfo[playerid][ID] = cache_insert_id();
    cache_delete(cache_id);

	format(d_query, sizeof d_query, "INSERT INTO USER_SETTINGS (ID) VALUES (%d)",PlayerInfo[playerid][ID]);
	mysql_tquery(ServerInfo[DataBase], d_query, "", "");

	//if(PlayerInfo[playerid][ID] == 1)PlayerInfo[playerid][Level] = 6;
	user_RegulateStats(playerid);
	return true;
}
function: user_ChangePass(playerid,pwd[])
{
	new d_query[156];
	mysql_format(ServerInfo[DataBase], d_query, sizeof d_query, "UPDATE USERS SET PASSWORD ='%e' WHERE ID = %d",MD5_Hash(pwd),PlayerInfo[playerid][ID]);
	mysql_tquery(ServerInfo[DataBase], d_query, "", "");
	format(PlayerInfo[playerid][Password], 50, "%s",MD5_Hash(pwd));
}

function: user_SetOnlineState(playerid,awdstate)
{
	new d_query[156];
	mysql_format(ServerInfo[DataBase], d_query, sizeof d_query, "UPDATE USERS SET ONLINE = %d WHERE ID = %d",awdstate,PlayerInfo[playerid][ID]);
	mysql_tquery(ServerInfo[DataBase], d_query, "", "");
}

function: user_FixOnlineState()
{
	mysql_tquery(ServerInfo[DataBase], "UPDATE USERS SET ONLINE = 0 WHERE ONLINE = 1", "", "");
}


stock fixDate(date[])
{
	new temp, year, mon, day, string[128];
   	sscanf(date, "p</>ddd", day, mon,year);
	if(mon == 0 && day == 0 && year == 0)getdate(year, mon, day);

   	if(mon >= sizeof(MonthNames))
 	{
	 	temp = mon;
	 	mon = day;
	 	day = temp;
	}
	if(mon <= 0 || mon >= sizeof(MonthNames))mon = 1;
    format(string,sizeof(string),"%d-%d-%d",year,mon,day);
    return string;
}


stock returnDate(date[])
{
	new year, mon, day, string[128];
   	sscanf(date, "p<->ddd",year, mon, day);
	if(mon <= 0 || mon >= sizeof(MonthNames))mon = 1;
    format(string,sizeof(string),"%s %d, %d",MonthNames[mon-1], day,year);
    return string;
}

function: ActivateRegisteredPlayer(playerid)
{
	PlayerInfo[playerid][Registered] = 1;
	PlayerInfo[playerid][LoggedIn] = 1;

	new Cache: cache_id, d_query[156], dest[50];
	mysql_format(ServerInfo[DataBase], d_query, sizeof d_query, "SELECT * FROM USERS WHERE ID = %d LIMIT 1",PlayerInfo[playerid][ID]);
	cache_id = mysql_query(ServerInfo[DataBase], d_query, true);

	cache_get_value_name_int(0, "LEVEL", PlayerInfo[playerid][Level]);
	cache_get_value_name_int(0, "VIP", PlayerInfo[playerid][VIP]);
	cache_get_value_name_int(0, "TIME_ON", PlayerInfo[playerid][TimeOn]);
	cache_get_value_name_int(0, "CREDITS", PlayerInfo[playerid][Credits]);
    
    cache_get_value_name_int(0, "HEAD_SHOTS", PlayerInfo[playerid][HeadShots]);
		
	cache_get_value_name(0, "FFA_G_RANK",dest);
	format(FFAPlayerInfo[playerid][gRank], 50, "%s",dest);
	cache_get_value_name_int(0, "FFA_GANG_ID", FFAPlayerInfo[playerid][GangID]);
	cache_get_value_name_int(0, "FFA_DEATHS", FFAPlayerInfo[playerid][Deaths]);
	cache_get_value_name_int(0, "FFA_KILLS", FFAPlayerInfo[playerid][Kills]);
	cache_get_value_name_int(0, "FFA_SCORE", FFAPlayerInfo[playerid][Score]);
	cache_get_value_name_int(0, "FFA_MONEY", FFAPlayerInfo[playerid][Money]);
	cache_get_value_name_int(0, "FFA_P_SPAWN", FFAPlayerInfo[playerid][PropertySpawn]);
	cache_get_value_name_int(0, "FFA_TREASURES", FFAPlayerInfo[playerid][Treasures]);
	cache_get_value_name_int(0, "FFA_CAPTURES", FFAPlayerInfo[playerid][Captures]);
	
	cache_get_value_name_int(0, "SF_MONEY", SFPlayerInfo[playerid][Money]);
	cache_get_value_name_int(0, "SF_EVENTS_WON", SFPlayerInfo[playerid][EventsWon]);
	cache_get_value_name_int(0, "SF_BETS", SFPlayerInfo[playerid][Bets]);
	cache_get_value_name_int(0, "SF_BETS_WON", SFPlayerInfo[playerid][BetsWon]);
	cache_get_value_name_int(0, "SF_BETS_LOST", SFPlayerInfo[playerid][BetsLost]);
	
	cache_get_value_name_int(0, "CO_LOSTS", COPlayerInfo[playerid][RoundsLost]);
	cache_get_value_name_int(0, "CO_WINS", COPlayerInfo[playerid][RoundsWon]);
	cache_get_value_name_int(0, "CO_MONEY", COPlayerInfo[playerid][Money]);
	cache_get_value_name_int(0, "CO_DEATHS", COPlayerInfo[playerid][Deaths]);
	cache_get_value_name_int(0, "CO_KILLS", COPlayerInfo[playerid][Kills]);
	cache_get_value_name_int(0, "CO_SCORE", COPlayerInfo[playerid][Score]);
	cache_get_value_name_int(0, "CO_ARRESTS", COPlayerInfo[playerid][Arrests]);
	cache_get_value_name_int(0, "CO_RELEASES", COPlayerInfo[playerid][Releases]);
	
	cache_get_value_name_int(0, "PTP_LOSTS", PTPPlayerInfo[playerid][RoundsLost]);
	cache_get_value_name_int(0, "PTP_WINS", PTPPlayerInfo[playerid][RoundsWon]);
	cache_get_value_name_int(0, "PTP_MONEY", PTPPlayerInfo[playerid][Money]);
	cache_get_value_name_int(0, "PTP_DEATHS", PTPPlayerInfo[playerid][Deaths]);
	cache_get_value_name_int(0, "PTP_KILLS", PTPPlayerInfo[playerid][Kills]);
	cache_get_value_name_int(0, "PTP_SCORE", PTPPlayerInfo[playerid][Score]);
	cache_get_value_name_int(0, "PTP_SURVIVES", PTPPlayerInfo[playerid][Survives]);
	cache_get_value_name_int(0, "PTP_L_KILLED", PTPPlayerInfo[playerid][LeadersKilled]);
	cache_get_value_name_int(0, "PTP_AS_PRES", PTPPlayerInfo[playerid][TimesAsPres]);
	
	cache_get_value_name_int(0, "ZO_LOSTS", ZOPlayerInfo[playerid][RoundsLost]);
	cache_get_value_name_int(0, "ZO_WINS", ZOPlayerInfo[playerid][RoundsWon]);
	cache_get_value_name_int(0, "ZO_MONEY", ZOPlayerInfo[playerid][Money]);
	cache_get_value_name_int(0, "ZO_DEATHS", ZOPlayerInfo[playerid][Deaths]);
	cache_get_value_name_int(0, "ZO_KILLS", ZOPlayerInfo[playerid][Kills]);
	cache_get_value_name_int(0, "ZO_SCORE", ZOPlayerInfo[playerid][Score]);

	cache_get_value_name_int(0, "GK_WINS", GKPlayerInfo[playerid][RoundsWon]);
	cache_get_value_name_int(0, "GK_MONEY", GKPlayerInfo[playerid][Money]);
	cache_get_value_name_int(0, "GK_DEATHS", GKPlayerInfo[playerid][Deaths]);
	cache_get_value_name_int(0, "GK_KILLS", GKPlayerInfo[playerid][Kills]);
	cache_get_value_name_int(0, "GK_SCORE", GKPlayerInfo[playerid][Score]);

	cache_get_value_name_int(0, "VW_LOSTS", VWPlayerInfo[playerid][RoundsLost]);
	cache_get_value_name_int(0, "VW_WINS", VWPlayerInfo[playerid][RoundsWon]);
	cache_get_value_name_int(0, "VW_DEATHS", VWPlayerInfo[playerid][Deaths]);
	cache_get_value_name_int(0, "VW_KILLS", VWPlayerInfo[playerid][Kills]);
	cache_get_value_name_int(0, "VW_SCORE", VWPlayerInfo[playerid][Score]);
	cache_get_value_name_int(0, "VW_RANK", VWPlayerInfo[playerid][Rank]);
	
	cache_get_value_name_int(0, "CTF_LOSTS", CTFPlayerInfo[playerid][RoundsLost]);
	cache_get_value_name_int(0, "CTF_WINS", CTFPlayerInfo[playerid][RoundsWon]);
	cache_get_value_name_int(0, "CTF_DEATHS", CTFPlayerInfo[playerid][Deaths]);
	cache_get_value_name_int(0, "CTF_KILLS", CTFPlayerInfo[playerid][Kills]);
	cache_get_value_name_int(0, "CTF_SCORE", CTFPlayerInfo[playerid][Score]);
	cache_get_value_name_int(0, "CTF_CAPTURES", CTFPlayerInfo[playerid][Captures]);
	
	cache_get_value_name_int(0, "DM_WINS", DMPlayerInfo[playerid][Wins]);
	cache_get_value_name_int(0, "DM_HUNTERS", DMPlayerInfo[playerid][Hunters]);
	cache_get_value_name_int(0, "DM_MONEY", DMPlayerInfo[playerid][Money]);
	cache_get_value_name_int(0, "DM_SCORE", DMPlayerInfo[playerid][Score]);
	cache_get_value_name_int(0, "DM_PVP", DMPlayerInfo[playerid][PVP]);
	cache_get_value_name_int(0, "DM_RUNUPS", DMPlayerInfo[playerid][RunUps]);
	cache_get_value_name_int(0, "DM_SKIN", DMPlayerInfo[playerid][Skin]);
	cache_get_value_name(0, "DM_PLATE",dest);
	format(DMPlayerInfo[playerid][sPlate], 50, "%s",dest);
	
	cache_get_value_name_int(0, "PJ_WINS", PJPlayerInfo[playerid][Wins]);
	cache_get_value_name_int(0, "PJ_FINISHES", PJPlayerInfo[playerid][Finishes]);
	cache_get_value_name_int(0, "PJ_MONEY", PJPlayerInfo[playerid][Money]);
	cache_get_value_name_int(0, "PJ_SCORE", PJPlayerInfo[playerid][Score]);
	cache_get_value_name_int(0, "PJ_PVP", PJPlayerInfo[playerid][PVP]);
	cache_get_value_name_int(0, "PJ_RUNUPS", PJPlayerInfo[playerid][RunUps]);
	cache_get_value_name_int(0, "PJ_SKIN", PJPlayerInfo[playerid][Skin]);
	
	cache_get_value_name_int(0, "TL_LOSTS", TLPlayerInfo[playerid][RoundsLost]);
	cache_get_value_name_int(0, "TL_WINS", TLPlayerInfo[playerid][RoundsWon]);
	cache_get_value_name_int(0, "TL_DEATHS", TLPlayerInfo[playerid][Deaths]);
	cache_get_value_name_int(0, "TL_KILLS", TLPlayerInfo[playerid][Kills]);
	cache_get_value_name_int(0, "TL_SCORE", TLPlayerInfo[playerid][Score]);
	cache_get_value_name_int(0, "TL_OBJECTIVE", TLPlayerInfo[playerid][Objective]);
	
	cache_get_value_name_int(0, "TW_WINS", TWPlayerInfo[playerid][GamesWon]);
	cache_get_value_name_int(0, "TW_LOSTS", TWPlayerInfo[playerid][GamesLost]);
	cache_get_value_name_int(0, "TW_KILLS", TWPlayerInfo[playerid][Kills]);
	cache_get_value_name_int(0, "TW_SCORE", TWPlayerInfo[playerid][Score]);
	cache_get_value_name_int(0, "TW_DEATHS", TWPlayerInfo[playerid][Deaths]);
	cache_get_value_name_int(0, "TW_MONEY", TWPlayerInfo[playerid][Money]);
	cache_get_value_name_int(0, "TW_SQUAD_ID", TWPlayerInfo[playerid][SquadID]);
	cache_get_value_name_int(0, "TW_S_BOMBED", TWPlayerInfo[playerid][BombedShips]);
	cache_get_value_name_int(0, "TW_A_BOMBS", TWPlayerInfo[playerid][ABombsDropped]);
	cache_get_value_name_int(0, "TW_P_SAVED", TWPlayerInfo[playerid][PeopleSaved]);
	cache_get_value_name_int(0, "TW_L_KILLED", TWPlayerInfo[playerid][LeadersKilled]);
    cache_get_value_name_int(0, "TW_SURVIVES",TWPlayerInfo[playerid][Survives] );
	cache_get_value_name_int(0, "TW_AS_LEADER", TWPlayerInfo[playerid][AsLeader]);
	cache_get_value_name_int(0, "TW_TOOK_OVER", TWPlayerInfo[playerid][TookOver]);
	
	cache_get_value_name(0, "RP_F_NAME",dest);
	format(RPPlayerInfo[playerid][rpfName], 50, "%s",dest);
	cache_get_value_name(0, "RP_L_NAME",dest);
	format(RPPlayerInfo[playerid][rplName], 50, "%s",dest);
	cache_get_value_name_int(0, "RP_F_TIME", RPPlayerInfo[playerid][FirstTime]);
	cache_get_value_name_int(0, "RP_SKIN_ID", RPPlayerInfo[playerid][SkinID]);
	cache_get_value_name_int(0, "RP_BAG_TYPE", RPPlayerInfo[playerid][BagType]);
	cache_get_value_name_int(0, "RP_MONEY", RPPlayerInfo[playerid][Money]);
	cache_get_value_name_int(0, "RP_A_FOR", RPPlayerInfo[playerid][AliveFor]);
	cache_get_value_name_int(0, "RP_HP_STATE", RPPlayerInfo[playerid][HPState]);
	cache_get_value_name_int(0, "RP_FREQ", RPPlayerInfo[playerid][Freq]);
	cache_get_value_name_float(0, "RP_HP", RPPlayerInfo[playerid][Health]);
	cache_get_value_name_float(0, "RP_HU", RPPlayerInfo[playerid][Hunger]);
	cache_get_value_name_float(0, "RP_TH", RPPlayerInfo[playerid][Thirst]);
	cache_get_value_name_float(0, "RP_P_X", RPPlayerInfo[playerid][dPosX]);
	cache_get_value_name_float(0, "RP_P_Y", RPPlayerInfo[playerid][dPosY]);
	cache_get_value_name_float(0, "RP_P_Z", RPPlayerInfo[playerid][dPosZ]);
	cache_get_value_name_float(0, "RP_P_ANG", RPPlayerInfo[playerid][dAngle]);
	cache_get_value_name_int(0, "RP_P_INT", RPPlayerInfo[playerid][dPosInt]);
	cache_get_value_name_int(0, "RP_P_WORLD", RPPlayerInfo[playerid][dPosWorld]);

    cache_get_value_name(0, "REG_DATE", dest);
	format(PlayerInfo[playerid][RegisterDate], 50, "%s",returnDate(dest));

	cache_delete(cache_id);
	
	user_SetOnlineState(playerid, 1);
	user_RegulateStats(playerid);
   	return 1;
}

stock SavePlayer(playerid, disconnecting = 0)
{
	//new start = GetTickCount();
	if(PlayerInfo[playerid][ID] != 0)
	{
		new d_query[1730], str[500];
	    mysql_format(ServerInfo[DataBase], str, sizeof str,
		"TIME_ON=%d,LAST_ON=CURDATE(),ONLINE=%d,HEAD_SHOTS=%d,\
		FFA_G_RANK='%e',FFA_GANG_ID=%d,FFA_DEATHS=%d,FFA_KILLS=%d,FFA_SCORE=%d,FFA_MONEY=%d,FFA_P_SPAWN=%d,FFA_TREASURES=%d,\
		SF_MONEY=%d,SF_BETS=%d,SF_BETS_WON=%d,SF_BETS_LOST=%d,SF_EVENTS_WON=%d,\
		CO_LOSTS=%d,CO_WINS=%d,CO_DEATHS=%d,CO_KILLS=%d,CO_SCORE=%d,CO_MONEY=%d,CO_ARRESTS=%d,CO_RELEASES=%d,\
		ZO_LOSTS=%d,ZO_WINS=%d,ZO_DEATHS=%d,ZO_KILLS=%d,ZO_SCORE=%d,ZO_MONEY=%d,"
		,PlayerInfo[playerid][TimeOn],disconnecting,PlayerInfo[playerid][HeadShots]
		,FFAPlayerInfo[playerid][gRank],FFAPlayerInfo[playerid][GangID],FFAPlayerInfo[playerid][Deaths]
		,FFAPlayerInfo[playerid][Kills],FFAPlayerInfo[playerid][Score],FFAPlayerInfo[playerid][Money]
		,FFAPlayerInfo[playerid][PropertySpawn],FFAPlayerInfo[playerid][Treasures]
		,SFPlayerInfo[playerid][Money],SFPlayerInfo[playerid][Bets],SFPlayerInfo[playerid][BetsWon]
		,SFPlayerInfo[playerid][BetsLost],SFPlayerInfo[playerid][EventsWon]
		,COPlayerInfo[playerid][RoundsLost],COPlayerInfo[playerid][RoundsWon],COPlayerInfo[playerid][Deaths]
		,COPlayerInfo[playerid][Kills],COPlayerInfo[playerid][Score],COPlayerInfo[playerid][Money]
		,COPlayerInfo[playerid][Arrests],COPlayerInfo[playerid][Releases]
		,ZOPlayerInfo[playerid][RoundsLost],ZOPlayerInfo[playerid][RoundsWon],ZOPlayerInfo[playerid][Deaths]
		,ZOPlayerInfo[playerid][Kills],ZOPlayerInfo[playerid][Score],ZOPlayerInfo[playerid][Money]);
		strcat(d_query, str);

		mysql_format(ServerInfo[DataBase], str, sizeof str,
		"PTP_LOSTS=%d,PTP_WINS=%d,PTP_DEATHS=%d,PTP_KILLS=%d,PTP_SCORE=%d,PTP_MONEY=%d,PTP_SURVIVES=%d,PTP_L_KILLED=%d,PTP_AS_PRES=%d,\
		CTF_LOSTS=%d,CTF_WINS=%d,CTF_DEATHS=%d,CTF_KILLS=%d,CTF_SCORE=%d,CTF_CAPTURES=%d,\
		DM_WINS=%d,DM_MONEY=%d,DM_SCORE=%d,DM_PVP=%d,DM_RUNUPS=%d,DM_SKIN=%d,DM_HUNTERS=%d,DM_PLATE='%e',\
		PJ_WINS=%d,PJ_MONEY=%d,PJ_SCORE=%d,PJ_PVP=%d,PJ_RUNUPS=%d,PJ_SKIN=%d,PJ_FINISHES=%d,"
		,PTPPlayerInfo[playerid][RoundsLost],PTPPlayerInfo[playerid][RoundsWon],PTPPlayerInfo[playerid][Deaths]
		,PTPPlayerInfo[playerid][Kills],PTPPlayerInfo[playerid][Score],PTPPlayerInfo[playerid][Money]
		,PTPPlayerInfo[playerid][Survives],PTPPlayerInfo[playerid][LeadersKilled],PTPPlayerInfo[playerid][TimesAsPres]
		,CTFPlayerInfo[playerid][RoundsLost],CTFPlayerInfo[playerid][RoundsWon],CTFPlayerInfo[playerid][Deaths]
		,CTFPlayerInfo[playerid][Kills],CTFPlayerInfo[playerid][Score],CTFPlayerInfo[playerid][Captures]
	    ,DMPlayerInfo[playerid][Wins],DMPlayerInfo[playerid][Money],DMPlayerInfo[playerid][Score]
		,DMPlayerInfo[playerid][PVP],DMPlayerInfo[playerid][RunUps],DMPlayerInfo[playerid][Skin]
		,DMPlayerInfo[playerid][Hunters],DMPlayerInfo[playerid][sPlate]
		,PJPlayerInfo[playerid][Wins],PJPlayerInfo[playerid][Money],PJPlayerInfo[playerid][Score]
		,PJPlayerInfo[playerid][PVP],PJPlayerInfo[playerid][RunUps],PJPlayerInfo[playerid][Skin]
		,PJPlayerInfo[playerid][Finishes]);
		strcat(d_query, str);

		mysql_format(ServerInfo[DataBase], str, sizeof str, "TL_LOSTS=%d,TL_WINS=%d,TL_DEATHS=%d,TL_KILLS=%d,TL_SCORE=%d,TL_OBJECTIVE=%d,\
		TW_LOSTS=%d,TW_WINS=%d,TW_DEATHS=%d,TW_MONEY=%d,TW_KILLS=%d,TW_SCORE=%d,TW_SQUAD_ID=%d,TW_S_BOMBED=%d,TW_A_BOMBS=%d,TW_P_SAVED=%d,\
		TW_L_KILLED=%d,TW_SURVIVES=%d,TW_AS_LEADER=%d,TW_TOOK_OVER=%d,"
		,TLPlayerInfo[playerid][RoundsLost],TLPlayerInfo[playerid][RoundsWon],TLPlayerInfo[playerid][Deaths]
		,TLPlayerInfo[playerid][Kills],TLPlayerInfo[playerid][Score],TLPlayerInfo[playerid][Objective]
		,TWPlayerInfo[playerid][GamesLost],TWPlayerInfo[playerid][GamesWon],TWPlayerInfo[playerid][Deaths],TWPlayerInfo[playerid][Money]
		,TWPlayerInfo[playerid][Kills],TWPlayerInfo[playerid][Score],TWPlayerInfo[playerid][SquadID]
		,TWPlayerInfo[playerid][BombedShips],TWPlayerInfo[playerid][ABombsDropped],TWPlayerInfo[playerid][PeopleSaved]
		,TWPlayerInfo[playerid][LeadersKilled],TWPlayerInfo[playerid][Survives],TWPlayerInfo[playerid][AsLeader]
		,TWPlayerInfo[playerid][TookOver]);
		strcat(d_query, str);

		mysql_format(ServerInfo[DataBase], str, sizeof str, "RP_F_NAME='%e',RP_L_NAME='%e',RP_F_TIME=%d,RP_SKIN_ID=%d,RP_BAG_TYPE=%d,\
		RP_MONEY=%d,RP_A_FOR=%d,RP_HP_STATE=%d,RP_FREQ=%d,RP_HP=%f,RP_HU=%f,RP_TH=%f,RP_P_X=%f,RP_P_Y=%f,RP_P_Z=%f,RP_P_ANG=%f,RP_P_INT=%d,RP_P_WORLD=%d,\
		FFA_CAPTURES=%d,GK_WINS=%d,GK_DEATHS=%d,GK_KILLS=%d,GK_SCORE=%d,GK_MONEY=%d,"
		,RPPlayerInfo[playerid][rpfName],RPPlayerInfo[playerid][rplName],RPPlayerInfo[playerid][FirstTime]
		,RPPlayerInfo[playerid][SkinID],RPPlayerInfo[playerid][BagType],RPPlayerInfo[playerid][Money]
		,RPPlayerInfo[playerid][AliveFor],RPPlayerInfo[playerid][HPState],RPPlayerInfo[playerid][Freq]
		,RPPlayerInfo[playerid][Health],RPPlayerInfo[playerid][Hunger],RPPlayerInfo[playerid][Thirst]
		,RPPlayerInfo[playerid][dPosX],RPPlayerInfo[playerid][dPosY],RPPlayerInfo[playerid][dPosZ]
		,RPPlayerInfo[playerid][dAngle],RPPlayerInfo[playerid][dPosInt],RPPlayerInfo[playerid][dPosWorld]
		,FFAPlayerInfo[playerid][Captures],GKPlayerInfo[playerid][RoundsWon],GKPlayerInfo[playerid][Money]
		,GKPlayerInfo[playerid][Deaths],GKPlayerInfo[playerid][Kills],GKPlayerInfo[playerid][Score]);
		strcat(d_query, str);

		mysql_format(ServerInfo[DataBase], str, sizeof str, "VW_LOSTS=%d,VW_WINS=%d,VW_DEATHS=%d,VW_KILLS=%d,VW_SCORE=%d,VW_RANK=%d"
		,VWPlayerInfo[playerid][RoundsLost],VWPlayerInfo[playerid][RoundsWon],VWPlayerInfo[playerid][Deaths]
		,VWPlayerInfo[playerid][Kills],VWPlayerInfo[playerid][Score], VWPlayerInfo[playerid][Rank]);
		strcat(d_query, str);

        format(d_query, sizeof d_query, "UPDATE USERS SET %s WHERE ID = %d",d_query,PlayerInfo[playerid][ID]);
		mysql_tquery(ServerInfo[DataBase], d_query, "", "");

		//printf("strlen %d", strlen(d_query));
		//making this fucker not spawned
		//format(d_query, sizeof d_query, "UPDATE USER_SETTINGS SET MODE=-1 WHERE ID=%d",PlayerInfo[playerid][ID]);
		//mysql_tquery(ServerInfo[DataBase], d_query, "", "");
	}
	//printf("saveplayer %d e %d = %d",start, GetTickCount(), GetTickCount()-start);
}
stock db_LoadSettings()
{
    new Cache: cache_id;
	cache_id = mysql_query(ServerInfo[DataBase], "SELECT * FROM SETTINGS WHERE ID = 0", true);

	cache_get_value_name_int(0, "TW_MAP", TWInfo[Map]);
	cache_get_value_name_int(0, "CO_MAP", COInfo[Map]);
	cache_get_value_name_int(0, "ZO_MAP", ZOInfo[Map]);
	cache_get_value_name_int(0, "TL_MAP", TLInfo[Map]);
	cache_get_value_name_int(0, "CTF_MAP", CTFInfo[Map]);
	cache_get_value_name_int(0, "VW_MAP", VWInfo[Map]);
	cache_get_value_name_int(0, "PTP_MAP", PTPInfo[Map]);

	cache_get_value_name_int(0, "PJ_MAP", PJMAPInfo[Map]);
	cache_get_value_name_int(0, "DM_MAP", DMMAPInfo[Map]);
	cache_get_value_name_int(0, "LAST_MSG", ServerInfo[LastMsg]);
	//cache_get_value_name(0, column, value);

	cache_delete(cache_id);
    return 1;
}

stock db_UpdateSettings(mode)
{
    new d_query[100];
	switch(mode)
	{
	    case TW: format(d_query, sizeof d_query, "UPDATE SETTINGS SET TW_MAP=%d WHERE ID=0",TWInfo[Map]);
	    case CO: format(d_query, sizeof d_query, "UPDATE SETTINGS SET CO_MAP=%d WHERE ID=0",COInfo[Map]);
	    case ZO: format(d_query, sizeof d_query, "UPDATE SETTINGS SET ZO_MAP=%d WHERE ID=0",ZOInfo[Map]);
	    case TL: format(d_query, sizeof d_query, "UPDATE SETTINGS SET TL_MAP=%d WHERE ID=0",TLInfo[Map]);
	    case CTF: format(d_query, sizeof d_query, "UPDATE SETTINGS SET CTF_MAP=%d WHERE ID=0",CTFInfo[Map]);
	    case VW: format(d_query, sizeof d_query, "UPDATE SETTINGS SET VW_MAP=%d WHERE ID=0",VWInfo[Map]);
	    case PTP: format(d_query, sizeof d_query, "UPDATE SETTINGS SET PTP_MAP=%d WHERE ID=0",PTPInfo[Map]);
		case DM: format(d_query, sizeof d_query, "UPDATE SETTINGS SET DM_MAP=%d WHERE ID=0",DMMAPInfo[Map]);
		case PJ: format(d_query, sizeof d_query, "UPDATE SETTINGS SET PJ_MAP=%d WHERE ID=0",PJMAPInfo[Map]);
		default: format(d_query, sizeof d_query, "UPDATE SETTINGS SET LAST_MSG=%d WHERE ID=0",ServerInfo[LastMsg]);
	}
    mysql_tquery(ServerInfo[DataBase], d_query, "", "");
	return 1;
}
stock db_ReturnRegisteredIPs(ip[], limit)
{
	new ips = 0;
    forLoop(p, MAX_PLAYERS)
	{
		if(IsPlayerConnected(p) && !IsPlayerNPC(p) && player == -1 && PlayerInfo[p][Registered] == 1)
		{
			if(strfind(getThePlayerIP(p), ip,true) == 0)
			{
			    ips++;
			}
		}
	}
	if(ips < limit)
	{
		new str[100], Cache: m_cache_id, ip_count = 0;
	    format(str, sizeof str, "SELECT COUNT(*) AS COUNT FROM USERS WHERE IP = '%s' LIMIT %d",ip, limit);
		m_cache_id = mysql_query(ServerInfo[DataBase], str, true);
		cache_get_value_name_int(0, "COUNT", ip_count)
		ips += ip_count;
		cache_delete(m_cache_id);
	}
	return ips;
}

stock db_ReturnUserName(id)
{
	new name[55], player = -1;
	format(name, sizeof name, "E5ROR5");
    forLoop(p, MAX_PLAYERS)
	{
		if(IsPlayerConnected(p) && !IsPlayerNPC(p) && player == -1)
		{
			if(PlayerInfo[p][ID] == id)
			{
			    player = p;
			    format(name, sizeof name, "%s",PlayerInfo[p][Name]);
			    break;
			}
		}
	}
	if(player == -1)
	{
	    new d_query[128], Cache: cache_id;
	    format(d_query, sizeof d_query, "SELECT NAME FROM USERS WHERE ID = %d LIMIT 1", id);
	    cache_id = mysql_query(ServerInfo[DataBase], d_query, true);
    	if(cache_num_rows() != 0)
			cache_get_value_name(0, "NAME", name);
	    cache_delete(cache_id);
	}
	return name;
}

stock user_Kick(playerid,admin,reason[],sendmsg=true,toall=true)
{
    new string[128], year, month, day, padmin[50], adminID;
	if(admin == -1)format(padmin, sizeof padmin, "System");
	else format(padmin, sizeof padmin, "%s",PlayerInfo[admin][Name]);
	getdate(year, month, day);

	if(sendmsg)
	{
	    format(string,sizeof(string),"{FF0000}[KICK]{FFFFFF} %s(ID:%d) has been kicked by %s. Reason: %s.",PlayerInfo[playerid][Name],playerid,padmin,reason);
		MessageToAllAdmins(lightblue,string);
		format(string, sizeof(string), "[KICK] %s (ID:%d) has been kicked by %s. Reason: %s.",PlayerInfo[playerid][Name],playerid,padmin,reason);
		db_SaveForAdminText(string);

		if(toall)
		{
	        format(string, sizeof(string), "{FF0000}[KICK]{FFFFFF} %s (ID:%d) has been kicked. Reason: %s.", PlayerInfo[playerid][Name],playerid,reason);
			forLoop(i, MAX_PLAYERS)
			{
			    if(IsPlayerConnected(i) && !IsPlayerNPC(i) && PlayerInfo[i][MainMenu] && PlayerInfo[i][Level] == 0 && PlayerInfo[i][PlayerOptionSelected] && PlayerInfo[i][PlayerMode] != TRP)
		     		SendClientMessage(i, red1, string);
			}

			format(string, sizeof(string), "[KICK] %s (ID:%d) has been kicked. Reason: %s.",PlayerInfo[playerid][Name],playerid,reason);
			db_SaveChat(-1, -1, string);
		}
	}
	if(admin != -1)adminID = PlayerInfo[admin][ID];
	KickedRecords(playerid,adminID,reason);
	

	TogglePlayerControllable(playerid,false);

    SendClientMessage(playerid,red1, "|--------------------[KICKED]-----------------|");
    format(string, sizeof (string), "You have been kicked by {FFFFFF}%s.",padmin);
    SendClientMessage(playerid,red1,string);
	format(string, sizeof (string), "Reason: {FFFFFF}%s\n",reason);
    SendClientMessage(playerid,red1,string);
	format(string, sizeof (string), "Date: {FFFFFF}%d/%d/%d",day,month,year);
    SendClientMessage(playerid,red1,string);
    SendClientMessage(playerid,white,"If you think you were kicked unfairly, visit the forums and report the admin.");
	format(string, sizeof (string), "Take a picture of this using F8. {FF0000}Forums: {FFFFFF}%s",ServerInfo[Site]);
    SendClientMessage(playerid,red1,string);
	SendClientMessage(playerid,red1, "|---------------------------------------------|");
	
	//casino
    SetPlayerWeather(playerid,5);
    SetPlayerInterior(playerid,0);
    SetPlayerVirtualWorld(playerid,2000+playerid);
	SetPlayerTime(playerid, 23, 0);
    SetPlayerPos(playerid, 2379.7603, 2153.9956, 11.1596);
    SetPlayerCameraPos(playerid, 2364.9609, 2151.8882, 10.7945);
	SetPlayerCameraLookAt(playerid, 2363.9729, 2151.7131, 11.1144);

	HideTDs(playerid);
	CancelSelectTextDraw(playerid);

	KickThePlayer(playerid);
	return 1;
}

forward KickThePlayer(playerid);
public KickThePlayer(playerid)
{
	SetTimerEx("KickThePlayerTimer", 200, false, "i", playerid);
}

forward KickThePlayerTimer(playerid);
public KickThePlayerTimer(playerid)
{
    Kick(playerid);
}

stock db_IsIPBanned(pip[])
{
	new d_query[256], Cache: cache_id, ip[50], ip2[50], r_ip[50], rbanned;
	format(ip2, sizeof ip2, "%s",pip);
	format(r_ip, sizeof r_ip, "%s",IPRange(pip));// the iprange fucks the pip up
	//the %%%% = b/c I couldnt escape %
 	format(d_query, sizeof d_query, "SELECT P_IP,R_BANNED FROM BANS WHERE P_IP LIKE '%s%%%%' AND BANNED = 1 ORDER BY ID DESC LIMIT 1",r_ip);
 	cache_id = mysql_query(ServerInfo[DataBase], d_query, true);
	if(cache_num_rows() == 0)
	{
	    cache_delete(cache_id);
	    return false;
	}
	cache_get_value_name_int(0, "R_BANNED", rbanned);
	cache_get_value_name(0, "P_IP", ip);
	cache_delete(cache_id);
	if((strcmp(ip, ip2, true) == 0 || (strcmp(IPRange(ip), r_ip, true) == 0 && rbanned == 1)))return true;
	return false;
}
stock db_IsSerialBanned(serial[])
{
	new d_query[256], Cache: cache_id, aserial[70];
 	mysql_format(ServerInfo[DataBase], d_query, sizeof d_query, "SELECT P_SERIAL FROM BANS WHERE P_SERIAL = '%s' AND BANNED = 1 AND S_BANNED = 1 ORDER BY ID DESC LIMIT 1",serial);
	cache_id = mysql_query(ServerInfo[DataBase], d_query, true);
	if(cache_num_rows() == 0)
	{
	    cache_delete(cache_id);
	    return false;
	}
	cache_get_value_name(0, "P_SERIAL", aserial);
	cache_delete(cache_id);
	return (strcmp(serial, aserial, true) == 0);
}
stock db_IsNameBanned(name[], serial[], banhim = false)
{
	new d_query[256], Cache: cache_id, banID, aname[50], aserial[70];
 	mysql_format(ServerInfo[DataBase], d_query, sizeof d_query, "SELECT ID,P_NAME,P_SERIAL FROM BANS WHERE P_NAME = '%s' AND BANNED = 1 ORDER BY ID DESC LIMIT 1",name);
	cache_id = mysql_query(ServerInfo[DataBase], d_query, true);
	if(cache_num_rows() == 0)
	{
	    cache_delete(cache_id);
	    return false;
	}
	cache_get_value_name_int(0, "ID", banID);
	cache_get_value_name(0, "P_NAME", aname);
	cache_get_value_name(0, "P_SERIAL", aserial);
	cache_delete(cache_id);
	if(strcmp(name, aname, true) == 0)
	{
		if(banhim && strcmp(serial, aserial, true) == 0)
		{
			format(aname,sizeof aname,"ID = %d", banID);
			db_UpdateTable("BANS", "R_BANNED = 1, S_BANNED = 1", aname);
		}
		return true;
	}
	return false;
}

stock db_GetBannedInfoByName(name[], playerid, toadmin = false)
{
	new d_query[256], Cache: cache_id, string[128];
    mysql_format(ServerInfo[DataBase], d_query, sizeof d_query, "SELECT A_ID,P_ID,P_NAME,P_IP,R_BANNED,BAN_TIME,REASON FROM BANS WHERE P_NAME = '%s' AND BANNED = 1 ORDER BY ID DESC LIMIT 1",name);
	cache_id = mysql_query(ServerInfo[DataBase], d_query, true);
	if(cache_num_rows() == 0)
	{
	    cache_delete(cache_id);
	    return false;
	}
	new adminID, pID, rbanned, pip[50], padmin[50], pacc_name[50], banDate[50], reason[70];
	cache_get_value_name_int(0, "A_ID", adminID);
	cache_get_value_name_int(0, "P_ID", pID);
	cache_get_value_name_int(0, "R_BANNED", rbanned);
	cache_get_value_name(0, "BAN_TIME", banDate);
	cache_get_value_name(0, "REASON", reason);
	cache_get_value_name(0, "P_IP", pip);
	cache_delete(cache_id);

	format(padmin,sizeof padmin, "%s",db_ReturnUserName(adminID));
	if(pID > 0)format(pacc_name,sizeof pacc_name, "%s",db_ReturnUserName(pID));
	if(!toadmin)
	{
	    if(rbanned == 1) format(string, sizeof (string), "RANGE BANNED: Banned by {FFFFFF}%s for %s on %s.",padmin,reason,banDate);
	    else format(string, sizeof (string), "BANNED: Banned by {FFFFFF}%s for %s on %s.",padmin,reason,banDate);
	    SendClientMessage(playerid,red1,string);
	}
	else
	{
	    SendClientMessage(playerid,red1, "|--------------------[BAN INFO]-----------------|");
	    if(rbanned == 1)format(string, sizeof (string), "User %s (%s) is RANGE banned by %s",name,pip,padmin);
	    else format(string, sizeof (string), "User %s (%s) is banned by %s",name,pip,padmin);
	    SendClientMessage(playerid,white,string);
		if(pID > 0)
			format(string, sizeof (string), "Account registered with user name : {FFFFFF}%s",pacc_name);
		else
			format(string, sizeof (string), "Account not registered");
	    SendClientMessage(playerid,red1,string);
		format(string, sizeof (string), "Reason: {FFFFFF}%s",reason);
	    SendClientMessage(playerid,red1,string);
		format(string, sizeof (string), "Date & Time: {FFFFFF}%s",banDate);
	    SendClientMessage(playerid,red1,string);
		SendClientMessage(playerid,red1, "|---------------------------------------------|");
	}
	return true;
}
stock db_GetBannedInfoByIP(ip[], playerid, toadmin = false)
{
	new d_query[256], Cache: cache_id, string[128];
	mysql_format(ServerInfo[DataBase], d_query, sizeof d_query, "SELECT A_ID,P_ID,P_NAME,R_BANNED,BAN_TIME,REASON FROM BANS WHERE P_IP LIKE '%s%%%%' AND BANNED = 1 ORDER BY ID DESC LIMIT 1",ip);
	cache_id = mysql_query(ServerInfo[DataBase], d_query, true);
	if(cache_num_rows() == 0)
	{
	    cache_delete(cache_id);
	    return false;
	}
	new adminID, pID, rbanned, padmin[50], pacc_name[50], pname[50], banDate[50], reason[70];
	cache_get_value_name_int(0, "A_ID", adminID);
	cache_get_value_name_int(0, "P_ID", pID);
	cache_get_value_name_int(0, "R_BANNED", rbanned);
	cache_get_value_name(0, "BAN_TIME", banDate);
	cache_get_value_name(0, "REASON", reason);
	cache_get_value_name(0, "P_NAME", pname);
	cache_delete(cache_id);
	
	format(padmin,sizeof padmin, "%s",db_ReturnUserName(adminID));
	if(pID > 0)format(pacc_name,sizeof pacc_name, "%s",db_ReturnUserName(pID));
	if(!toadmin)
	{
	    if(rbanned == 1) format(string, sizeof (string), "RANGE BANNED: Banned by {FFFFFF}%s for %s on %s.",padmin,reason,banDate);
	    else format(string, sizeof (string), "BANNED: Banned by {FFFFFF}%s for %s on %s.",padmin,reason,banDate);
	    SendClientMessage(playerid,red1,string);
	}
	else
	{
	    SendClientMessage(playerid,red1, "|--------------------[BAN INFO]-----------------|");
	    if(rbanned == 1)format(string, sizeof (string), "User %s (%s) is RANGE banned by %s",pname,ip,padmin);
	    else format(string, sizeof (string), "User %s (%s) is banned by %s",pname,ip,padmin);
	    SendClientMessage(playerid,white,string);
		if(pID > 0)
			format(string, sizeof (string), "Account registered with user name : {FFFFFF}%s",pacc_name);
		else
			format(string, sizeof (string), "Account not registered");
	    SendClientMessage(playerid,red1,string);
		format(string, sizeof (string), "Reason: {FFFFFF}%s",reason);
	    SendClientMessage(playerid,red1,string);
		format(string, sizeof (string), "Date & Time: {FFFFFF}%s",banDate);
	    SendClientMessage(playerid,red1,string);
		SendClientMessage(playerid,red1, "|---------------------------------------------|");
	}
	return true;
}

function: user_Unban(playerid, name[], reason[])
{
	new d_query[256];
    mysql_format(ServerInfo[DataBase], d_query, sizeof d_query, "UPDATE BANS SET BANNED=0,UNB_A_ID=%d,UNB_REASON='%e' WHERE P_NAME = '%s'",PlayerInfo[playerid][ID],reason,name);
 	mysql_tquery(ServerInfo[DataBase], d_query, "", "");
	return 1;
}

stock user_Ban(playerid,admin,reason[],sendmsg=true,toall=true,rangeban=0)
{
    new string[128], year, month, day, padmin[50],adminID;
	if(admin == -1)format(padmin, sizeof padmin, "System");
	else format(padmin, sizeof padmin, "%s",PlayerInfo[admin][Name]);
	getdate(year, month, day);

	if(sendmsg)
	{
	    format(string,sizeof(string),"{FF0000}[BAN]{FFFFFF} %s(ID:%d) has been banned by %s. Reason: %s.",PlayerInfo[playerid][Name],playerid,padmin,reason);
		MessageToAllAdmins(lightblue,string);
		format(string, sizeof(string), "[BAN] %s (ID:%d) has been banned by %s. Reason: %s.",PlayerInfo[playerid][Name],playerid,padmin,reason);
		db_SaveForAdminText(string);

		if(toall)
		{
	        format(string, sizeof(string), "{FF0000}[BAN]{FFFFFF} %s (ID:%d) has been banned. Reason: %s.", PlayerInfo[playerid][Name],playerid,reason);
			forLoop(i, MAX_PLAYERS)
			{
			    if(IsPlayerConnected(i) && !IsPlayerNPC(i) && PlayerInfo[i][MainMenu] && PlayerInfo[i][Level] == 0 && PlayerInfo[i][PlayerOptionSelected] && PlayerInfo[i][PlayerMode] != TRP)
		     		SendClientMessage(i, red1, string);
			}

			format(string, sizeof(string), "[BAN] %s (ID:%d) has been banned. Reason: %s.",PlayerInfo[playerid][Name],playerid,reason);
			db_SaveChat(-1, -1, string);
		}
	}
	if(admin != -1)adminID = PlayerInfo[admin][ID];
	BannedRecords(playerid,adminID,reason,rangeban);

	TogglePlayerControllable(playerid,false);

    SendClientMessage(playerid,red1, "|--------------------[BANNED]-----------------|");
    format(string, sizeof (string), "You have been banned by {FFFFFF}%s.",padmin);
    SendClientMessage(playerid,red1,string);
	format(string, sizeof (string), "Reason: {FFFFFF}%s",reason);
    SendClientMessage(playerid,red1,string);
	format(string, sizeof (string), "Date: {FFFFFF}%d/%d/%d",day,month,year);
    SendClientMessage(playerid,red1,string);
    SendClientMessage(playerid,white,"If you think you were banned unfairly, visit the forums and make a ban appeal.");
	format(string, sizeof (string), "Take a picture of this using F8. {FF0000}Forums: {FFFFFF}%s",ServerInfo[Site]);
    SendClientMessage(playerid,red1,string);
	SendClientMessage(playerid,red1, "|---------------------------------------------|");
	
	//casino
    SetPlayerWeather(playerid,5);
    SetPlayerInterior(playerid,0);
    SetPlayerVirtualWorld(playerid,2000+playerid);
	SetPlayerTime(playerid, 23, 0);
    SetPlayerPos(playerid, 2379.7603, 2153.9956, 11.1596);
    SetPlayerCameraPos(playerid, 2364.9609, 2151.8882, 10.7945);
	SetPlayerCameraLookAt(playerid, 2363.9729, 2151.7131, 11.1144);

	HideTDs(playerid);
	CancelSelectTextDraw(playerid);
	KickThePlayer(playerid);
	return 1;
}

stock KickedRecords(playerid,admin,reason[])
{
	new d_query[256], aID, Cache: cache_id;
    mysql_format(ServerInfo[DataBase], d_query, sizeof d_query, "%d,%d,'%s','%s','%s','%e'"
	,admin,PlayerInfo[playerid][ID],getThePlayerIP(playerid),getThePlayerSerial(playerid),PlayerInfo[playerid][Name],reason);
	db_InsertIntoTable("KICKS", "A_ID,P_ID,P_IP,P_SERIAL,P_NAME,REASON", d_query);

 	mysql_format(ServerInfo[DataBase], d_query, sizeof d_query, "SELECT ID FROM KICKS WHERE A_ID = %d AND P_ID = %d AND REASON = '%e' ORDER BY ID DESC LIMIT 1",admin,PlayerInfo[playerid][ID],reason);
	cache_id = mysql_query(ServerInfo[DataBase], d_query, true);
	if(cache_num_rows() == 0)
	{
	    cache_delete(cache_id);
	    return false;
	}
	cache_get_value_name_int(0, "ID", aID);
	cache_delete(cache_id);
	SaveExtraInfo(playerid, 0, aID);
	return 1;
}

stock BannedRecords(playerid,admin,reason[],rangeban=0)
{
	new d_query[256], aID, Cache: cache_id;
    mysql_format(ServerInfo[DataBase], d_query, sizeof d_query, "%d,%d,'%s','%s','%s','%e',1,%d"
	,admin,PlayerInfo[playerid][ID],PlayerInfo[playerid][Name],getThePlayerIP(playerid),getThePlayerSerial(playerid),reason,rangeban);
	db_InsertIntoTable("BANS", "A_ID,P_ID,P_NAME,P_IP,P_SERIAL,REASON,BANNED,R_BANNED", d_query);

 	mysql_format(ServerInfo[DataBase], d_query, sizeof d_query, "SELECT ID FROM BANS WHERE A_ID = %d AND P_ID = %d AND REASON = '%e' AND BANNED = 1 ORDER BY ID DESC LIMIT 1",admin,PlayerInfo[playerid][ID],reason);
	cache_id = mysql_query(ServerInfo[DataBase], d_query, true);
	if(cache_num_rows() == 0)
	{
	    cache_delete(cache_id);
	    return false;
	}
	cache_get_value_name_int(0, "ID", aID);
	cache_delete(cache_id);
	SaveExtraInfo(playerid, 1, aID);
	return 1;
}

stock SaveExtraInfo(playerid, type, aid)
{
    new d_query[256], mode, ateam = -1, s_protected, superman, spiderman
	,Float:hp, Float:arm, Float:x, Float:y, Float:z,ppos[70],speed,ping
	,interior,world,Float:chp, model = 0, pweaps[70], pweap[20], weap, ammo;

    GetPlayerHealth(playerid,hp);
	GetPlayerArmour(playerid,arm);
	GetPlayerPos(playerid,x,y,z);
    format(ppos, sizeof(ppos),"X:%0.1f Y:%0.1f Z:%0.1f", Float:x,Float:y,Float:z);

	forLoop(slot, 14)
	{
		GetPlayerWeaponData(playerid, slot, weap, ammo);
		format(pweap, sizeof pweap, ",%d,%d", weap, ammo);
		strcat(pweaps, pweap);
    }
    ping=GetPlayerPing(playerid);
    interior=GetPlayerInterior(playerid);
    world=GetPlayerVirtualWorld(playerid);
    
	mode = (PlayerInfo[playerid][MainMenu] == 1)?PlayerInfo[playerid][PlayerMode]:-1;
    if(PlayerInfo[playerid][Spawned] == 1)
	{
		if(PlayerInfo[playerid][sProtected] > 0)s_protected = 1;
        if(PlayerInfo[playerid][PlayerMode] == CO || PlayerInfo[playerid][PlayerMode] == TW || PlayerInfo[playerid][PlayerMode] == TL
			|| PlayerInfo[playerid][PlayerMode] == CTF || PlayerInfo[playerid][PlayerMode] == ZO || PlayerInfo[playerid][PlayerMode] == VW)
		{
		    ateam = PlayerInfo[playerid][pTeam];
		}
		else if(PlayerInfo[playerid][PlayerMode] == PTP)
		{
		    ateam = PTPPlayerInfo[playerid][Class];
		}
	}
    if(IsPlayerInAnyVehicle(playerid))
	{
		speed=AC_GetPlayerSpeed(playerid,AC_Variables[SPEED_3D]);
	    model = GetVehicleModel(GetPlayerVehicleID(playerid));
		GetVehicleHealth(GetPlayerVehicleID(playerid),chp);
    }
    if(PlayerInfo[playerid][PlayerMode] == STUNT)
	{
	    superman = SFPlayerInfo[playerid][Superman];
		spiderman = SFPlayerInfo[playerid][Spiderman];
	}
	mysql_format(ServerInfo[DataBase], d_query, sizeof d_query, "%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,'%s','%s'"
	,aid,type,mode,ateam,s_protected,superman,spiderman,floatround(hp),floatround(arm),speed,ping,interior,world,model,floatround(chp),ppos,pweaps[1]);
	db_InsertIntoTable("EXTRA", "ID,TYPE,P_MODE,P_TEAM,S_PROTECTED,SUPERMAN,SPIDERMAN,HP,AR,SPEED,PING,INTERIOR,WORLD,CAR,CARHP,PPOS,WEAPS", d_query);
	return 1;
}

stock db_CreateTable(tname[], query[])
{
	if(!db_TableExists(tname))
	{
	    new d_query[256];
	    format(d_query, sizeof d_query, "CREATE TABLE %s(%s) DEFAULT CHARSET=utf8 COLLATE=utf8_general_ci",tname,query);
  		mysql_tquery(ServerInfo[DataBase], d_query, "", "");
		if(mysql_errno(ServerInfo[DataBase]) > 0)
	        printf("DB ERROR: COULDN'T CREATE TABLE %s, ERROR %d",tname,mysql_errno());
		else printf("DB TABLE CREATED: %s",tname);
	}
}

stock db_DropTable(tname[])
{
    if(db_TableExists(tname))
    {
	    new d_query[100];
	    format(d_query, sizeof d_query, "DROP TABLE %s",tname);
  		mysql_tquery(ServerInfo[DataBase], d_query, "", "");
		printf("DB TABLE DROPPED: %s", tname);
	}
}

stock db_DropFromTable(tname[], sentinel[])
{
	if(db_TableExists(tname))
	{
	    new d_query[256];
	    format(d_query, sizeof d_query, "DELETE FROM %s WHERE %s",tname,sentinel);
  		mysql_tquery(ServerInfo[DataBase], d_query, "", "");
	}
}

stock db_UpdateTable(tname[], values[], sentinel[])
{
	if(db_TableExists(tname))
	{
	    new d_query[296];
	    format(d_query, sizeof d_query, "UPDATE %s SET %s WHERE %s",tname,values,sentinel);
  		mysql_tquery(ServerInfo[DataBase], d_query, "", "");
	}
}

stock db_InsertIntoTable(tname[], columns[], values[])
{
	if(db_TableExists(tname))
	{
	    new d_query[296];
	    format(d_query, sizeof d_query, "INSERT INTO %s (%s) VALUES (%s)",tname,columns,values);
		mysql_tquery(ServerInfo[DataBase], d_query, "", "");
	}
}

stock db_UpdateUserTableValue(player[], tname[], values[])
{
	if(db_TableExists(tname))
	{
	    new sentinel[120];
	    if(IsNumericForID(player))
			format(sentinel, sizeof sentinel, "ID = %d",strval(player));
		else mysql_format(ServerInfo[DataBase], sentinel, sizeof sentinel, "NAME = '%e'",player);
		db_UpdateTable(tname, values, sentinel);
	}
}

stock db_ReturnStatsInt(player[], tname[], column[])
{
    new d_query[296], Cache: cache_id, value;
    if(IsNumericForID(player))
		format(d_query, sizeof d_query, "SELECT %s FROM %s WHERE ID = %d LIMIT 1", column, tname,strval(player));
	else mysql_format(ServerInfo[DataBase], d_query, sizeof d_query, "SELECT %s FROM %s WHERE NAME = '%e' LIMIT 1", column, tname, player);
	cache_id = mysql_query(ServerInfo[DataBase], d_query, true);
    
    if(cache_num_rows() == 0)
	{
	    cache_delete(cache_id);
	    return value;
	}
	cache_get_value_name_int(0, column, value);
    cache_delete(cache_id);
    return value;
}

stock db_ReturnStatsStr(player[], tname[], column[])
{
    new d_query[296], Cache: cache_id, value[50];
    if(IsNumericForID(player))
		format(d_query, sizeof d_query, "SELECT %s FROM %s WHERE ID = %d LIMIT 1", column, tname,strval(player));
	else mysql_format(ServerInfo[DataBase], d_query, sizeof d_query, "SELECT %s FROM %s WHERE NAME = '%e' LIMIT 1", column, tname, player);
	cache_id = mysql_query(ServerInfo[DataBase], d_query, true);

    if(cache_num_rows() == 0)
	{
	    cache_delete(cache_id);
	    return value;
	}
	cache_get_value_name(0, column, value);
    cache_delete(cache_id);
    return value;
}

stock db_ReturnStatsFloat(player[], database, tname[], column[])
{
    new d_query[296], Cache: cache_id, Float:value;
    if(IsNumericForID(player))
		format(d_query, sizeof d_query, "SELECT %s FROM %s WHERE ID = %d LIMIT 1", column, tname,strval(player));
	else mysql_format(ServerInfo[DataBase], d_query, sizeof d_query, "SELECT %s FROM %s WHERE NAME = '%e' LIMIT 1", column, tname, player);
	cache_id = mysql_query(ServerInfo[DataBase], d_query, true);

    if(cache_num_rows() == 0)
	{
	    cache_delete(cache_id);
	    return value;
	}
	cache_get_value_name_float(0, column, value);
    cache_delete(cache_id);
    return value;
}
stock db_TableExists(tname[])
{
	new Cache: cache_id, d_query[126], rows;
	format(d_query, sizeof d_query, "SHOW TABLES LIKE '%s'",tname);
	cache_id = mysql_query(ServerInfo[DataBase], d_query, true);
	rows = cache_num_rows();
	cache_delete(cache_id);
	return (rows > 0);
}

stock db_SaveAKA(playerid)
{
	new d_query[126], Cache: cache_id, rows;
 	mysql_format(ServerInfo[DataBase], d_query, sizeof d_query, "SELECT NAME FROM AKA WHERE NAME = '%e' AND IP = '%s' LIMIT 1",PlayerInfo[playerid][Name],getThePlayerIP(playerid));
	cache_id = mysql_query(ServerInfo[DataBase], d_query, true);
	rows = cache_num_rows();
	cache_delete(cache_id);
	if(rows == 0)
	{
		mysql_format(ServerInfo[DataBase], d_query, sizeof d_query, "'%e','%s','%s'",PlayerInfo[playerid][Name],getThePlayerIP(playerid),getThePlayerSerial(playerid));
	    db_InsertIntoTable("AKA", "NAME,IP,SERIAL", d_query);
    }
    return 1;
}

stock db_GetAKAByIP(ip[])
{
	new d_query[126], name[50], Cache: cache_id;
	format(d_query, sizeof d_query, "SELECT NAME FROM AKA WHERE IP = '%s' ORDER BY ID DESC LIMIT 10",ip);
	cache_id = mysql_query(ServerInfo[DataBase], d_query, true);
	format(d_query, sizeof d_query, "");
	forLoop(i, cache_num_rows())
	{
	    cache_get_value_name(i, "NAME", name);
		format(name, sizeof name, ",%s",name);
	    strcat(d_query, name);
	}
	cache_delete(cache_id);
	strdel(d_query, 0, 1);//removing the first char
    return d_query;
}

stock db_SaveReport(playerid, reported, reason[])
{
    new d_query[256], aID, Cache: cache_id, admin;
    admin = (playerid >=0) ? PlayerInfo[playerid][ID]:playerid;
    mysql_format(ServerInfo[DataBase], d_query, sizeof d_query, "%d,%d,'%e'",admin,PlayerInfo[reported][ID],reason);
	db_InsertIntoTable("REPORTS", "REPORTER,REPORTED,REASON", d_query);

 	mysql_format(ServerInfo[DataBase], d_query, sizeof d_query, "SELECT ID FROM REPORTS WHERE REPORTER = %d AND REPORTED = %d AND REASON = '%e' ORDER BY ID DESC LIMIT 1",admin,PlayerInfo[reported][ID],reason);
	cache_id = mysql_query(ServerInfo[DataBase], d_query, true);
	if(cache_num_rows() == 0)
	{
	    cache_delete(cache_id);
	    return false;
	}
	cache_get_value_name_int(0, "ID", aID);
	cache_delete(cache_id);
	if(playerid >= 0)SaveExtraInfo(playerid, 2, aID);
	SaveExtraInfo(reported, 2, aID);
	return 1;
}
stock db_GiveReport(playerid, reported, reason[])
{
	new str[228], abv[2][6], hour,minute,second; gettime(hour,minute,second);
    if(PlayerInfo[playerid][MainMenu] == 1)
		format(abv[0], 6,"%s",PlayerModeNamesABV[PlayerInfo[playerid][PlayerMode]]);
	else format(abv[0], 6,"%s","LOBBY");

	if(PlayerInfo[reported][MainMenu] == 1)
		format(abv[1], 6,"%s",PlayerModeNamesABV[PlayerInfo[reported][PlayerMode]]);
	else format(abv[1], 6,"%s","LOBBY");

	format(str, sizeof(str), "{FFFFFF}[REPORT]{FF0000} %s(%d)[%s] reported %s(%d)[%s]) Reason: %s |at: %d:%d:%d|", PlayerInfo[playerid][Name],playerid,abv[0], PlayerInfo[reported][Name], reported,abv[1], reason, hour,minute,second);
	MessageToAllAdmins(COLOR_WHITE,str);
	if(PlayerInfo[playerid][Spawned] == 1 && PlayerInfo[reported][Spawned] == 1)
	{
        if(PlayerInfo[reported][sProtected] > 0)
        {
            format(str,128,"{FFFFFF}[REPORT INFO]{FF0000} %s(%d) is spawn protected.",PlayerInfo[reported][Name],reported);
        	MessageToAllAdmins(COLOR_WHITE,str);
        }
		if(PlayerInfo[playerid][PlayerMode] == PlayerInfo[reported][PlayerMode])
		{
	        if(PlayerInfo[playerid][PlayerMode] == CO || PlayerInfo[playerid][PlayerMode] == TW || PlayerInfo[playerid][PlayerMode] == TL
				|| PlayerInfo[playerid][PlayerMode] == PTP || PlayerInfo[playerid][PlayerMode] == CTF || PlayerInfo[playerid][PlayerMode] == ZO
					 || PlayerInfo[playerid][PlayerMode] == VW)
			{
			    new team[2][30];
				if(PlayerInfo[playerid][PlayerMode] == TW || PlayerInfo[playerid][PlayerMode] == TL)
				{
				    format(team[0], 30, "%s",PowerNames[PlayerInfo[playerid][pTeam]]);
				    format(team[1], 30, "%s",PowerNames[PlayerInfo[reported][pTeam]]);
				}
	            if(PlayerInfo[playerid][PlayerMode] == CO)
				{
				    format(team[0], 30, "%s",TeamNamesCO[PlayerInfo[playerid][pTeam]]);
				    format(team[1], 30, "%s",TeamNamesCO[PlayerInfo[reported][pTeam]]);
				}
	            if(PlayerInfo[playerid][PlayerMode] == PTP)
				{
				    format(team[0], 30, "%s",TeamNamesPTP[PTPPlayerInfo[playerid][Class]]);
				    format(team[1], 30, "%s",TeamNamesPTP[PTPPlayerInfo[reported][Class]]);
				}
	            if(PlayerInfo[playerid][PlayerMode] == CTF)
				{
				    format(team[0], 30, "%s",TeamNamesCTF[PlayerInfo[playerid][pTeam]]);
				    format(team[1], 30, "%s",TeamNamesCTF[PlayerInfo[reported][pTeam]]);
				}
	            if(PlayerInfo[playerid][PlayerMode] == VW)
				{
				    format(team[0], 30, "%s",TeamNamesVW[PlayerInfo[playerid][pTeam]]);
				    format(team[1], 30, "%s",TeamNamesVW[PlayerInfo[reported][pTeam]]);
				}
	            if(PlayerInfo[playerid][PlayerMode] == ZO)
				{
				    format(team[0], 30, "%s",TeamNamesZO[PlayerInfo[playerid][pTeam]]);
				    format(team[1], 30, "%s",TeamNamesZO[PlayerInfo[reported][pTeam]]);
				}

				format(str,128,"{FFFFFF}[REPORT INFO]{FF0000} %s(%d) is on the: %s team, %s(%d) is on the: %s team.",PlayerInfo[playerid][Name],playerid,team[0],PlayerInfo[reported][Name],reported,team[1]);
	            MessageToAllAdmins(COLOR_WHITE,str);
			}
		}
		if(PlayerInfo[reported][PlayerMode] == STUNT)
		{
		    new amode[30];
            if(SFPlayerInfo[reported][Superman] == 1) format(amode, sizeof amode, "superman");
            if(SFPlayerInfo[reported][Spiderman] == 1) format(amode, sizeof amode, "spiderman");

            format(str,128,"{FFFFFF}[REPORT INFO]{FF0000} %s(%d) has enabled %s mode.",PlayerInfo[reported][Name],reported,amode);
        	MessageToAllAdmins(COLOR_WHITE,str);
        }
	}
	format(str, sizeof(str), "Time(%d:%d:%d): %s(%d) reported %s(%d) for %s", hour,minute,second, PlayerInfo[playerid][Name],playerid, PlayerInfo[reported][Name], reported,reason);
	forLoopV(i, 1,MAX_REPORTS-1)
	{
		Reports[i] = Reports[i+1];
	}
	Reports[MAX_REPORTS-1] = str;
	format(str,128,"{FF0000}[REPORT]{FFFFFF} You have reported: %s(%d) for: %s.",PlayerInfo[reported][Name],reported,reason);
    SendClientMessage(playerid,yellow,str);
	if(PlayerInfo[reported][sProtected] > 0)
    {
        format(str,128,"{FFFFFF}[REPORT INFO]{FF0000} %s(%d) is spawn protected.",PlayerInfo[reported][Name],reported);
    	SendClientMessage(playerid,yellow,str);
    }
    db_SaveReport(playerid, reported, reason);
}
stock db_GetReports(playerid)
{
	new ReportCount;
    forLoopV(i, 1,MAX_REPORTS)
	{
		if(strcmp( Reports[i], "<none>", true) != 0)
		{
		    ReportCount++;
		    SendClientMessage(playerid,white,Reports[i]);
		}
	}
	if(ReportCount == 0) return SendClientMessage(playerid,COLOR_WHITE,"{33FF33}Notice: {FFFFFF}There have been no reports");
    return 1;
}


stock ACReport(playerid,report[],details[])
{
	if(IsPlayerConnected(playerid))
	{
		new string[128];
		if(PlayerInfo[playerid][MainMenu] == 1)
			format(string,sizeof(string),"%s",PlayerModeNamesABV[PlayerInfo[playerid][PlayerMode]]);
		else format(string,sizeof(string),"%s","LOBBY");
		format(string,sizeof(string),"{FFFFFF}[SUSPECT]{FF0000} Cheater(%s): %s(%d)[%s], %s.",report,PlayerInfo[playerid][Name],playerid,string,details);
		MessageToAllAdmins(THE_RED,string);
		format(string,sizeof(string),"%s(%s)",report,details);
		db_SaveReport(-1, playerid, string);
		return 1;
	}
	return 0;
}


stock db_SaveCommands(playerid, cmd[])
{
	new d_query[180];
	mysql_format(ServerInfo[DataBase], d_query, sizeof d_query, "%d, %d, '%e'",PlayerInfo[playerid][ID],PlayerInfo[playerid][PlayerMode], cmd);
	db_InsertIntoTable("CMDS", "USER_ID, MODE, CMD", d_query);
	return 1;
}

stock db_SavePM(to, from, text[])
{
	new d_query[270];
	mysql_format(ServerInfo[DataBase], d_query, sizeof d_query, "%d, %d, '%e'",to,from,text);
	db_InsertIntoTable("PMS", "TO_ID, FROM_ID, TEXT", d_query);
	return 1;
}

stock db_SaveChat(playerid, mode, text[])
{
	//make text save for mysql,
	//check for team chat, so team chat doesn't show online, or if text[0] == # or shit like that..
	// it will show for admins.. ??
	new d_query[180];
	if(playerid > -1)mysql_format(ServerInfo[DataBase], d_query, sizeof d_query, "%d, %d, '%e'",PlayerInfo[playerid][ID], mode, text);
    else mysql_format(ServerInfo[DataBase], d_query, sizeof d_query, "-1, %d, '%e'",mode, text);
	db_InsertIntoTable("CHAT", "USER_ID, MODE, TEXT", d_query);
	return 1;
}
stock db_SaveForAdminText(text[])
{
	new d_query[180];
	mysql_format(ServerInfo[DataBase], d_query, sizeof d_query, "'%e'", text);
    db_InsertIntoTable("ADMIN_TEXT", "TEXT", d_query);
	return 1;
}
forward db_UpdateStuff();
public db_UpdateStuff()
{
    //new start = GetTickCount();
	//here we save all the stuff, such as pos, mode (count mode players)
	new d_query[200], Cache: cache_id, id, mode, u_id, rows;

	format(d_query, sizeof d_query, "SELECT * FROM SERVER_CHAT WHERE ID > %d LIMIT 1",ServerInfo[LastMsg]);
	cache_id = mysql_query(ServerInfo[DataBase], d_query, true);
	rows = cache_num_rows();
	if(rows != 0)
	{
		cache_get_value_name_int(0, "ID", id);
		cache_get_value_name_int(0, "USER_ID", u_id);
		cache_get_value_name_int(0, "MODE", mode);
		cache_get_value_name(0, "TEXT", d_query);

		if(mode == -2)
		{
		  	format(d_query,sizeof(d_query),"[WEB A] {FFFFFF}%s: %s",db_ReturnUserName(u_id),d_query);
			MessageToAllAdmins(red1,d_query);
		}
		else
		{
		    format(d_query, sizeof d_query, "[WEB] {FFFFFF}%s: %s",db_ReturnUserName(u_id),d_query);
			if(mode == -1)SendMessageToAll(false, COLOR_ORANGE,d_query);
			else SendMessageToMode(mode,COLOR_ORANGE,d_query);
		}
		
		//printf(d_query);

	    ServerInfo[LastMsg] = id;
		//random mode id so we save the lastmsg id
		db_UpdateSettings(231);
	}
	cache_delete(cache_id);
	//printf("s %d e %d = %d",start, GetTickCount(), GetTickCount()-start);
}

//=====================[ Configuration ] =======================================
stock SendMessageToAll(bool:sendRP , color, string[])
{
	//printf("DEBUG CFONTROL SendMessageToAll 1");
	forLoop(i, MAX_PLAYERS)
	{
	    if((IsPlayerConnected(i) && !IsPlayerNPC(i) && PlayerInfo[i][MainMenu] && PlayerInfo[i][PlayerOptionSelected]) && !(PlayerInfo[i][PlayerMode] == TRP && !sendRP))
     		SendClientMessage(i, color, string);
	}
	//printf("DEBUG CFONTROL SendMessageToAll 2");
	return 1;
}
stock SaveConfig()
{
 	new string[70], File:fwhnd;
	fwhnd=fopen("/pangea/Config.ini",io_write);
	format(string,sizeof string,"MaxPing=%d\r\n",ServerInfo[MaxPing]);
	fwrite(fwhnd,string);
	format(string,sizeof string,"DisBombTeamKill=%d\r\n",ServerInfo[DisBombTeamKill]);
	fwrite(fwhnd,string);
	format(string,sizeof string,"AdvCheck=%d\r\n",ServerInfo[AdvCheck]);
	fwrite(fwhnd,string);
	format(string,sizeof string,"GlobalChat=%d\r\n",ServerInfo[GlobalChat]);
	fwrite(fwhnd,string);
	format(string,sizeof string,"AllowAntiAFK=%d\r\n",ServerInfo[AllowAntiAFK]);
	fwrite(fwhnd,string);
	format(string,sizeof string,"ToChangeMode=%d\r\n",ServerInfo[ToChangeMode]);
	fwrite(fwhnd,string);
	format(string,sizeof string,"LobbyKick=%d\r\n",ServerInfo[LobbyKick]);
	fwrite(fwhnd,string);
	format(string,sizeof string,"DebugMode=%d\r\n",ServerInfo[DebugMode]);
	fwrite(fwhnd,string);
	format(string,sizeof string,"ChangeModePic=%d\r\n",ServerInfo[ChangeModePic]);
	fwrite(fwhnd,string);
	format(string,sizeof string,"COBigPrison=%d\r\n",ServerInfo[COBigPrison]);
	fwrite(fwhnd,string);
	format(string,sizeof string,"SerialCheck=%d\r\n",ServerInfo[SerialCheck]);
	fwrite(fwhnd,string);
	format(string,sizeof string,"OffMode=%d\r\n",ServerInfo[OffMode]);
	fwrite(fwhnd,string);
	format(string,sizeof string,"InstSpawn=%d\r\n",ServerInfo[InstSpawn]);
	fwrite(fwhnd,string);
	format(string,sizeof string,"SouthMapTW=%d\r\n",ServerInfo[SouthMapTW]);
	fwrite(fwhnd,string);
	format(string,sizeof string,"pInfoState=%d\r\n",ServerInfo[pInfoState]);
	fwrite(fwhnd,string);
	format(string,sizeof string,"showAdmins=%d\r\n",ServerInfo[pInfoState]);
	fwrite(fwhnd,string);
	format(string,sizeof string,"bigTXTDs=%d\r\n",ServerInfo[bigTXTDs]);
	fwrite(fwhnd,string);
	format(string,sizeof string,"Site=%s\r\n",ServerInfo[Site]);
	fwrite(fwhnd,string);
	format(string,sizeof string,"lPlate=%s\r\n",ServerInfo[lPlate]);
	fwrite(fwhnd,string);
	fclose(fwhnd);
}
stock UpdateConfig()
{
 	new line[70], File:fwhnd;
    ServerInfo[DisableChat] = 0;
    ServerInfo[SerialCheck] = 0;
    ServerInfo[OffMode] = -1;
    ServerInfo[InstSpawn] = 0;
    ServerInfo[SouthMapTW] = 0;
    ServerInfo[pInfoState] = 0;
    ServerInfo[showAdmins] = 0;
  	ServerInfo[bigTXTDs] = 0;
	fwhnd = fopen("/pangea/Config.ini", io_read);
    while(fread(fwhnd,line, sizeof(line)) > 0)
	{
	    if(strfind(line, "MaxPing=", true) != -1)
		{
	        format(line, sizeof line, "%s",strreplace("MaxPing=","",line));
	        ServerInfo[MaxPing] = strval(line);
	        continue;
		}
	    if(strfind(line, "DisBombTeamKill=", true) != -1)
		{
	        format(line, sizeof line, "%s",strreplace("DisBombTeamKill=","",line));
	        ServerInfo[DisBombTeamKill] = strval(line);
	        continue;
		}
	    if(strfind(line, "AdvCheck=", true) != -1)
		{
	        format(line, sizeof line, "%s",strreplace("AdvCheck=","",line));
	        ServerInfo[AdvCheck] = strval(line);
	        continue;
		}
	    if(strfind(line, "GlobalChat=", true) != -1)
		{
	        format(line, sizeof line, "%s",strreplace("GlobalChat=","",line));
	        ServerInfo[GlobalChat] = strval(line);
	        continue;
		}
	    if(strfind(line, "AllowAntiAFK=", true) != -1)
		{
	        format(line, sizeof line, "%s",strreplace("AllowAntiAFK=","",line));
	        ServerInfo[AllowAntiAFK] = strval(line);
	        continue;
		}
	    if(strfind(line, "ToChangeMode=", true) != -1)
		{
	        format(line, sizeof line, "%s",strreplace("ToChangeMode=","",line));
	        ServerInfo[ToChangeMode] = strval(line);
	        continue;
		}
	    if(strfind(line, "LobbyKick=", true) != -1)
		{
	        format(line, sizeof line, "%s",strreplace("LobbyKick=","",line));
	        ServerInfo[LobbyKick] = strval(line);
	        continue;
		}
	    if(strfind(line, "SerialCheck=", true) != -1)
		{
	        format(line, sizeof line, "%s",strreplace("SerialCheck=","",line));
	        ServerInfo[SerialCheck] = strval(line);
	        continue;
		}
	    if(strfind(line, "DebugMode=", true) != -1)
		{
	        format(line, sizeof line, "%s",strreplace("DebugMode=","",line));
	        ServerInfo[DebugMode] = strval(line);
	        continue;
		}
	    if(strfind(line, "ChangeModePic=", true) != -1)
		{
	        format(line, sizeof line, "%s",strreplace("ChangeModePic=","",line));
	        ServerInfo[ChangeModePic] = strval(line);
	        continue;
		}
	    if(strfind(line, "COBigPrison=", true) != -1)
		{
	        format(line, sizeof line, "%s",strreplace("COBigPrison=","",line));
	        ServerInfo[COBigPrison] = strval(line);
	        continue;
		}
	    if(strfind(line, "OffMode=", true) != -1)
		{
	        format(line, sizeof line, "%s",strreplace("OffMode=","",line));
	        ServerInfo[OffMode] = strval(line);
	        continue;
		}
	    if(strfind(line, "SouthMapTW=", true) != -1)
		{
	        format(line, sizeof line, "%s",strreplace("SouthMapTW=","",line));
	        ServerInfo[SouthMapTW] = strval(line);
	        continue;
		}
	    if(strfind(line, "pInfoState=", true) != -1)
		{
	        format(line, sizeof line, "%s",strreplace("pInfoState=","",line));
	        ServerInfo[pInfoState] = strval(line);
	        continue;
		}
	    if(strfind(line, "bigTXTDs=", true) != -1)
		{
	        format(line, sizeof line, "%s",strreplace("bigTXTDs=","",line));
	        ServerInfo[bigTXTDs] = strval(line);
	        continue;
		}
	    if(strfind(line, "showAdmins=", true) != -1)
		{
	        format(line, sizeof line, "%s",strreplace("showAdmins=","",line));
	        ServerInfo[showAdmins] = strval(line);
	        continue;
		}
	    if(strfind(line, "InstSpawn=", true) != -1)
		{
	        format(line, sizeof line, "%s",strreplace("InstSpawn=","",line));
	        ServerInfo[InstSpawn] = strval(line);
	        continue;
		}
	    if(strfind(line, "Site=", true) != -1)
		{
	        format(ServerInfo[Site], 50, "%s",strreplace("Site=","",line));
	        continue;
		}
	    if(strfind(line, "lPlate=", true) != -1)
		{
	        format(ServerInfo[lPlate], 20, "%s",strreplace("lPlate=","",line));
	        continue;
		}
	}
	fclose(fwhnd);

    printf("===========Config===========");
    printf(">MaxPing = %d",ServerInfo[MaxPing]);
    printf(">AdvCheck = %d",ServerInfo[AdvCheck]);
    printf(">DisBombTeamKill = %d",ServerInfo[DisBombTeamKill]);
    printf(">GlobalChat = %d",ServerInfo[GlobalChat]);
    printf(">AskToChangeMode = %d",ServerInfo[ToChangeMode]);
    printf(">AllowAntiAFK = %d",ServerInfo[AllowAntiAFK]);
    printf(">DebugMode = %d",ServerInfo[DebugMode]);
    printf(">ChangeModePic = %d",ServerInfo[ChangeModePic]);
    printf(">LobbyKick = %d",ServerInfo[LobbyKick]);
    printf(">SerialCheck = %d",ServerInfo[SerialCheck]);
    printf(">OffMode = %d",ServerInfo[OffMode]);
    printf(">SouthMapTW = %d",ServerInfo[SouthMapTW]);
    printf(">pInfoState = %d",ServerInfo[pInfoState]);
    printf(">bigTXTDs = %d",ServerInfo[bigTXTDs]);
    printf(">showAdmins = %d",ServerInfo[showAdmins]);
    printf(">InstSpawn = %d",ServerInfo[InstSpawn]);
    printf(">Site = %s",ServerInfo[Site]);
    printf(">lPlate = %s",ServerInfo[lPlate]);
    printf("============================");
	format(line, sizeof line, "weburl %s",ServerInfo[Site]);
    SendRconCommand(line);
}

//BOMBER STUFF
stock Float:GetXDistanceFromCarToShip(carid,id)
{
	//printf("DEBUG CFONTROL GetXDistanceFromCarToShip");
	new Float:x1,Float:y1,Float:z1,Float:x2=ShipInfo[id][sX];
	GetVehiclePos(carid,x1,y1,z1);
	return floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2));
}
stock Float:GetYDistanceFromCarToShip(carid,id)
{
	//printf("DEBUG CFONTROL GetYDistanceFromCarToShip");
	new Float:x1,Float:y1,Float:z1,Float:y2=ShipInfo[id][sY];
	GetVehiclePos(carid,x1,y1,z1);
	return floatsqroot(floatpower(floatabs(floatsub(y2,y1)),2));
}
stock Float:GetXDistanceToShips(objectid,id)
{
	//printf("DEBUG CFONTROL GetXDistanceToShips");
	new Float:x1,Float:y1,Float:z1,Float:x2=ShipInfo[id][sX];
	GetDynamicObjectPos(objectid,x1,y1,z1);
	return floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2));
}
stock Float:GetYDistanceToShips(objectid,id)
{
	//printf("DEBUG CFONTROL GetYDistanceToShips");
	new Float:x1,Float:y1,Float:z1,Float:y2=ShipInfo[id][sY];
	GetDynamicObjectPos(objectid,x1,y1,z1);
	return floatsqroot(floatpower(floatabs(floatsub(y2,y1)),2));
}

/*
stock Float:GetDistanceToObject(objectid,objectid2)
{
	new Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2;
	GetObjectPos(objectid,x1,y1,z1);
	GetObjectPos(objectid2,x2,y2,z2);
	return floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2)+floatpower(floatabs(floatsub(y2,y1)),2)+floatpower(floatabs(floatsub(z2,z1)),2));
}*/
stock UpdateShipHealthText(id)
{
	//printf("DEBUG CFONTROL UpdateShipHealthText 1");
    new string[128];
    format(string,sizeof(string),"{FFFFFF}%s {33FF33}HP: %d",ShipInfo[id][NameFull],ShipInfo[id][sHP]);
	UpdateDynamic3DTextLabelText(ShipInfo[id][Ship3DT], 0xFFFFFFAA, string);
	//printf("DEBUG CFONTROL UpdateShipHealthText 2");
}

stock EnterExitSubmarine(playerid)
{
	//printf("DEBUG CFONTROL EnterExitSubmarine 1");
	if(PlayerInfo[playerid][InSubmarine] == -1)
	{
		forLoop(id, MAX_SHIPS)
		{
			if(ShipInfo[id][sHP] > 0 && ShipInfo[id][Exists])
			{
			    if(ShipInfo[id][Type] == SUB)
			    {
				    if(IsPlayerInRangeOfPoint(playerid, 5.0,ShipInfo[id][sX],ShipInfo[id][sY], ShipInfo[id][sZ]))
					{
			  			if(ShipInfo[id][sHP] > 0)
						{
		     				PlayerInfo[playerid][InSubmarine] = id;
					  		SetPlayerPosEx(playerid, 521.2170,-2433.6301,1204.1504, 270.0);
							SetPlayerInterior(playerid,2);
							SetPlayerVirtualWorld(playerid,id+1424);
							FreezeBeforeObjects(playerid);
						}
					}
				}
			}
		}
	}
	if(PlayerInfo[playerid][InSubmarine] > -1)
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.0, 521.2170,-2433.6301,1204.1504))
		{
	  		SetPlayerInterior(playerid, 0);
	  		//SetPlayerVirtualWorld(playerid,ShipInfo[PlayerInfo[playerid][InSubmarine]][Mode]);
			if(ShipInfo[PlayerInfo[playerid][InSubmarine]][Mode]==TW)SetPlayerVirtualWorld(playerid,W_TW);
    		if(ShipInfo[PlayerInfo[playerid][InSubmarine]][Mode]==TL)SetPlayerVirtualWorld(playerid,W_TL);
			SetPlayerPos(playerid,ShipInfo[PlayerInfo[playerid][InSubmarine]][sX], ShipInfo[PlayerInfo[playerid][InSubmarine]][sY]+3, ShipInfo[PlayerInfo[playerid][InSubmarine]][sZ]+2);
			PlayerInfo[playerid][InSubmarine] = -1;
		}
	}
	//printf("DEBUG CFONTROL EnterExitSubmarine 2");
}

stock ShipStatusFromPlane(vehicleid)
{
	//printf("DEBUG CFONTROL ShipStatusFromPlane 1");
	new string[128];
	new Float:x, Float:y, Float:z;
	GetVehiclePos(vehicleid,x,y,z);
	forLoop(id, MAX_SHIPS)
	{
		if(ShipInfo[id][sHP] > 0 && ShipInfo[id][Exists] && GetVehicleVirtualWorld(vehicleid) == ShipInfo[id][Mode])
		{
		    if(ShipInfo[id][Type] == SUB)
		    {
				if((GetXDistanceFromCarToShip(vehicleid,id) <=50) && (GetYDistanceFromCarToShip(vehicleid,id) <= 10))
				{
		  			ShipInfo[id][sHP]-=5;
		  			if(ShipInfo[id][CallForIt]==1)
					{
					  	format(string,128,"{33FF33}WAR NEWS:{FFFFFF} The {FF9900}%s{FFFFFF}, is being attacked.",ShipInfo[id][NameFull]);
	    				if(ShipInfo[id][Mode]==TW)
						{
							SendMessageToMode(TW,white,string);
						  	format(string, sizeof(string), "[WAR NEWS] The %s, is being attacked.",ShipInfo[id][NameFull]);
							db_SaveChat(-1, TW,string);
						}
						if(ShipInfo[id][Mode]==TL)
						{
							SendMessageToMode(TL,white,string);
						  	format(string, sizeof(string), "[WAR NEWS] The %s, is being attacked.",ShipInfo[id][NameFull]);
							db_SaveChat(-1, TL,string);
						}
	    				SetTimerEx("CallForAttack", 45000, 0, "i", id);
			  		}
					ShipInfo[id][CallForIt]=0;
					CheckShipToSink(id, 1, -1);
					UpdateShipHealthText(id);
					ExplosionOFBombForSub(id,-1,x,y,z);
					//if(GetVehicleVirtualWorld(vehicleid) == W_TW)ExplodeShipMinesFromPlaneBomb(id, x, y, 5);
					//CheckUnSunkShips();
				}
			}
			else
			{
				if((GetXDistanceFromCarToShip(vehicleid,id) <=100) && (GetYDistanceFromCarToShip(vehicleid,id) <=30))
				{
		  			ShipInfo[id][sHP]-=5;
		  			if(ShipInfo[id][CallForIt]==1)
					{
						format(string,128,"{33FF33}WAR NEWS:{FFFFFF} The {FF9900}%s{FFFFFF}, is being attacked.",ShipInfo[id][NameFull]);
	    				if(ShipInfo[id][Mode]==TW)
						{
							SendMessageToMode(TW,white,string);
						  	format(string, sizeof(string), "[WAR NEWS] The %s, is being attacked.",ShipInfo[id][NameFull]);
							db_SaveChat(-1, TW,string);
						}
						if(ShipInfo[id][Mode]==TL)
						{
							SendMessageToMode(TL,white,string);
						  	format(string, sizeof(string), "[WAR NEWS] The %s, is being attacked.",ShipInfo[id][NameFull]);
							db_SaveChat(-1, TL,string);
						}
	    				SetTimerEx("CallForAttack", 45000, 0, "i", id);
					}
					ShipInfo[id][CallForIt]=0;
					CheckShipToSink(id, 1, -1);
					UpdateShipHealthText(id);
					ExplosionOFBomb(id,-1,x,y,z);
					//if(GetVehicleVirtualWorld(vehicleid) == W_TW)ExplodeShipMinesFromPlaneBomb(id, x, y, 5);
					//CheckUnSunkShips();
				}

			}
		}

	}
	//printf("DEBUG CFONTROL ShipStatusFromPlane 2");
}
stock GivePlayerTheMoney(playerid)
{
	//printf("DEBUG CFONTROL GivePlayerTheMoney 1");
    if(PlayerInfo[playerid][Spawned])
    {
	    if(PlayerInfo[playerid][PlayerMode] == TW) SetPlayerMoney(playerid, TWPlayerInfo[playerid][Money]);
		if(PlayerInfo[playerid][PlayerMode] == ZO) SetPlayerMoney(playerid, ZOPlayerInfo[playerid][Money]);
		if(PlayerInfo[playerid][PlayerMode] == GK) SetPlayerMoney(playerid, GKPlayerInfo[playerid][Money]);
		if(PlayerInfo[playerid][PlayerMode] == CO) SetPlayerMoney(playerid, COPlayerInfo[playerid][Money]);
		if(PlayerInfo[playerid][PlayerMode] == PTP) SetPlayerMoney(playerid, PTPPlayerInfo[playerid][Money]);
		if(PlayerInfo[playerid][PlayerMode] == DM) SetPlayerMoney(playerid, DMPlayerInfo[playerid][Money]);
		if(PlayerInfo[playerid][PlayerMode] == PJ) SetPlayerMoney(playerid, PJPlayerInfo[playerid][Money]);
		if(PlayerInfo[playerid][PlayerMode] == FFA) SetPlayerMoney(playerid, FFAPlayerInfo[playerid][Money]);
		if(PlayerInfo[playerid][PlayerMode] == STUNT)SetPlayerMoney(playerid, SFPlayerInfo[playerid][Money]);
		if(PlayerInfo[playerid][PlayerMode] == TRP)SetPlayerMoney(playerid, RPPlayerInfo[playerid][Money]);
		//ADD MAFIA LATER
	}
	//printf("DEBUG CFONTROL GivePlayerTheMoney 2");
	return 1;
}
stock ChangeModeScore(playerid,score)
{
	if(PlayerInfo[playerid][PlayerMode] == -1)return 0;
	switch(PlayerInfo[playerid][PlayerMode])
	{
	    case TW:
	    {
	        if(TWPlayerInfo[playerid][Score]+score >= 1147483647)
	            TWPlayerInfo[playerid][Score] = 1147483640;
			else TWPlayerInfo[playerid][Score]+=score;
			SetPlayerScore(playerid,TWPlayerInfo[playerid][Score]);
	    }
	    case FFA:
	    {
	        if(FFAPlayerInfo[playerid][Score]+score >= 1147483647)
	            FFAPlayerInfo[playerid][Score] = 1147483640;
			else FFAPlayerInfo[playerid][Score]+=score;
			SetPlayerScore(playerid,FFAPlayerInfo[playerid][Score]);
	    }
	    case TL:
	    {
	        if(TLPlayerInfo[playerid][Score]+score >= 1147483647)
	            TLPlayerInfo[playerid][Score] = 1147483640;
			else TLPlayerInfo[playerid][Score]+=score;
			SetPlayerScore(playerid,TLPlayerInfo[playerid][Score]);
	    }
	    case STUNT:
	    {
	        /*if(SFPlayerInfo[playerid][Score]+score >= 1147483647)
	            SFPlayerInfo[playerid][Score] = 1147483640;
			else SFPlayerInfo[playerid][Score]+=score;*/
	    }
	    case CO:
	    {
	        if(COPlayerInfo[playerid][Score]+score >= 1147483647)
	            COPlayerInfo[playerid][Score] = 1147483640;
			else COPlayerInfo[playerid][Score]+=score;
			SetPlayerScore(playerid,COPlayerInfo[playerid][Score]);
	    }
	    case PJ:
	    {
	        if(PJPlayerInfo[playerid][Score]+score >= 1147483647)
	            PJPlayerInfo[playerid][Score] = 1147483640;
			else PJPlayerInfo[playerid][Score]+=score;
			SetPlayerScore(playerid,PJPlayerInfo[playerid][Score]);
	    }
	    case DM:
	    {
	        if(DMPlayerInfo[playerid][Score]+score >= 1147483647)
	            DMPlayerInfo[playerid][Score] = 1147483640;
			else DMPlayerInfo[playerid][Score]+=score;
			SetPlayerScore(playerid,DMPlayerInfo[playerid][Score]);
	    }
	    case VW:
	    {
	        if(VWPlayerInfo[playerid][Score]+score >= 1147483647)
	            VWPlayerInfo[playerid][Score] = 1147483640;
			else VWPlayerInfo[playerid][Score]+=score;
			SetPlayerScore(playerid, VWPlayerInfo[playerid][Score]);
	    }
	    case CTF:
	    {
	        if(CTFPlayerInfo[playerid][Score]+score >= 1147483647)
	            CTFPlayerInfo[playerid][Score] = 1147483640;
			else CTFPlayerInfo[playerid][Score]+=score;
			SetPlayerScore(playerid,CTFPlayerInfo[playerid][Score]);
	    }
	    case ZO:
	    {
	        if(ZOPlayerInfo[playerid][Score]+score >= 1147483647)
	            ZOPlayerInfo[playerid][Score] = 1147483640;
			else ZOPlayerInfo[playerid][Score]+=score;
			SetPlayerScore(playerid,ZOPlayerInfo[playerid][Score]);
	    }
	    case GK:
	    {
	        if(GKPlayerInfo[playerid][Score]+score >= 1147483647)
	            GKPlayerInfo[playerid][Score] = 1147483640;
			else GKPlayerInfo[playerid][Score]+=score;
			SetPlayerScore(playerid,GKPlayerInfo[playerid][Score]);
	    }
	    case PTP:
	    {
	        if(PTPPlayerInfo[playerid][Score]+score >= 1147483647)
	            PTPPlayerInfo[playerid][Score] = 1147483640;
			else PTPPlayerInfo[playerid][Score]+=score;
			SetPlayerScore(playerid,PTPPlayerInfo[playerid][Score]);
	    }
	}
	return 1;
}

stock GiveThePlayerMoney(playerid, cash)
{
	//printf("DEBUG CFONTROL GiveThePlayerMoney 1 pid %d cash %d",playerid, cash);
    if(PlayerInfo[playerid][Spawned])
    {
        //max value = 2147483647
	    if(PlayerInfo[playerid][PlayerMode] == TW)
	    {
	        if(TWPlayerInfo[playerid][Money]+cash >= 1147483647)
	            TWPlayerInfo[playerid][Money] = 1147483640;
			else TWPlayerInfo[playerid][Money]+=cash;
			SetPlayerMoney(playerid, TWPlayerInfo[playerid][Money]);
		}
		if(PlayerInfo[playerid][PlayerMode] == CO)
	    {
	        if(COPlayerInfo[playerid][Money]+cash >= 1147483647)
	            COPlayerInfo[playerid][Money] = 1147483640;
			else COPlayerInfo[playerid][Money]+=cash;
			SetPlayerMoney(playerid, COPlayerInfo[playerid][Money]);
		}
		if(PlayerInfo[playerid][PlayerMode] == PTP)
	    {
	        if(PTPPlayerInfo[playerid][Money]+cash >= 1147483647)
	            PTPPlayerInfo[playerid][Money] = 1147483640;
			else PTPPlayerInfo[playerid][Money]+=cash;
			SetPlayerMoney(playerid, PTPPlayerInfo[playerid][Money]);
		}
		if(PlayerInfo[playerid][PlayerMode] == ZO)
	    {
	        if(ZOPlayerInfo[playerid][Money]+cash >= 1147483647)
	            ZOPlayerInfo[playerid][Money] = 1147483640;
			else ZOPlayerInfo[playerid][Money]+=cash;
			SetPlayerMoney(playerid, ZOPlayerInfo[playerid][Money]);
		}
		if(PlayerInfo[playerid][PlayerMode] == GK)
	    {
	        if(GKPlayerInfo[playerid][Money]+cash >= 1147483647)
	            GKPlayerInfo[playerid][Money] = 1147483640;
			else GKPlayerInfo[playerid][Money]+=cash;
			SetPlayerMoney(playerid, GKPlayerInfo[playerid][Money]);
		}
		if(PlayerInfo[playerid][PlayerMode] == DM)
	    {
	        if(DMPlayerInfo[playerid][Money]+cash >= 1147483647)
	            DMPlayerInfo[playerid][Money] = 1147483640;
			else DMPlayerInfo[playerid][Money]+=cash;
			SetPlayerMoney(playerid, DMPlayerInfo[playerid][Money]);
		}
		if(PlayerInfo[playerid][PlayerMode] == PJ)
	    {
	        if(PJPlayerInfo[playerid][Money]+cash >= 1147483647)
	            PJPlayerInfo[playerid][Money] = 1147483640;
			else PJPlayerInfo[playerid][Money]+=cash;
			SetPlayerMoney(playerid, PJPlayerInfo[playerid][Money]);
		}
		if(PlayerInfo[playerid][PlayerMode] == FFA)
	    {
	        if(FFAPlayerInfo[playerid][Money]+cash >= 1147483647)
	            FFAPlayerInfo[playerid][Money] = 1147483640;
			else FFAPlayerInfo[playerid][Money]+=cash;
			SetPlayerMoney(playerid, FFAPlayerInfo[playerid][Money]);
		}
		if(PlayerInfo[playerid][PlayerMode] == STUNT)
	    {
	        if(SFPlayerInfo[playerid][Money]+cash >= 1147483647)
	            SFPlayerInfo[playerid][Money] = 1147483640;
			else SFPlayerInfo[playerid][Money]+=cash;
			SetPlayerMoney(playerid, SFPlayerInfo[playerid][Money]);
			SetPlayerScore(playerid, SFPlayerInfo[playerid][Money]);
		}
		if(PlayerInfo[playerid][PlayerMode] == TRP)
	    {
	        new pstr[15];
	        if(RPPlayerInfo[playerid][Money]+cash >= 99999999)
	            RPPlayerInfo[playerid][Money] = 99999999;
			else RPPlayerInfo[playerid][Money]+=cash;
		    format(pstr,sizeof pstr, "%d",RPPlayerInfo[playerid][Money]);
		    PlayerTextDrawSetString(playerid, RPPlayerInfo[playerid][p_CA], pstr);
		}
	}
	//printf("DEBUG CFONTROL GiveThePlayerMoney 2 pid %d cash %d",playerid, cash);
	return 1;
}
stock GetThePlayerMoney(playerid)
{
	//printf("DEBUG CFONTROL GetThePlayerMoney");
    if(PlayerInfo[playerid][Spawned])
    {
	    if(PlayerInfo[playerid][PlayerMode] == TW)return TWPlayerInfo[playerid][Money];
		else if(PlayerInfo[playerid][PlayerMode] == CO)return COPlayerInfo[playerid][Money];
		else if(PlayerInfo[playerid][PlayerMode] == PTP)return PTPPlayerInfo[playerid][Money];
		else if(PlayerInfo[playerid][PlayerMode] == ZO)return ZOPlayerInfo[playerid][Money];
		else if(PlayerInfo[playerid][PlayerMode] == GK)return GKPlayerInfo[playerid][Money];
		else if(PlayerInfo[playerid][PlayerMode] == DM)return DMPlayerInfo[playerid][Money];
		else if(PlayerInfo[playerid][PlayerMode] == PJ)return PJPlayerInfo[playerid][Money];
		else if(PlayerInfo[playerid][PlayerMode] == FFA)return FFAPlayerInfo[playerid][Money];
		else if(PlayerInfo[playerid][PlayerMode] == STUNT)return SFPlayerInfo[playerid][Money];
		else if(PlayerInfo[playerid][PlayerMode] == TRP)return RPPlayerInfo[playerid][Money];
		else return GetPlayerMoney(playerid);
	}
	return 0;
}
stock ToggleThePlayerSpectating(playerid, tf)
{
	//printf("DEBUG CFONTROL ToggleThePlayerSpectating 1");
    if(tf)PlayerInfo[playerid][JustSpectated] = 1;
    TogglePlayerSpectating(playerid, tf);
	//printf("DEBUG CFONTROL ToggleThePlayerSpectating 2");
}
stock PlacePlayerInVehicle(playerid,vehicleid,seat)
{
	//printf("DEBUG CFONTROL PlacePlayerInVehicle 1");
    AC_PlayerInfo[playerid][AC_pVehicleEntered]=vehicleid;
    if(seat == 0)PlayerInfo[playerid][SpeedoReset] = 1;
    PutPlayerInVehicle(playerid,vehicleid,seat);
	//printf("DEBUG CFONTROL PlacePlayerInVehicle 2");
}
stock ShipStatusFromBomb(playerid,num,Float:x,Float:y,Float:z)
{
	//printf("DEBUG CFONTROL ShipStatusFromBomb 1");
	new string[228];
	forLoop(id, MAX_SHIPS)
	{
    	if(ShipInfo[id][sHP] > 0 && ShipInfo[id][Exists] && PlayerInfo[playerid][PlayerMode]==ShipInfo[id][Mode])
		{
		    if(ShipInfo[id][Type] == SHIP)
		    {
				if((GetXDistanceToShips(PlayerInfo[playerid][bombid][num],id) <=100) && (GetYDistanceToShips(PlayerInfo[playerid][bombid][num],id) <=30))
				{
				    if(PlayerInfo[playerid][pTeam] == ShipInfo[id][Team])
					{
					    new Float:xp, Float:yp, Float:zp;
				    	if(IsPlayerInAnyVehicle(playerid))
						{
					 		GetPlayerPos(playerid,xp,yp,zp); SetPlayerPos(playerid,xp,yp,zp+3);
							if(PlayerInfo[playerid][PlayerMode] == TW)
							{
								SendClientMessage(playerid,red1,"{FF0000}Notice:{FFFFFF} Don't bomb your own ship, you lost 2,000 bucks.");
								GiveThePlayerMoney(playerid, -2000);
							}
						}
					}
					if(PlayerInfo[playerid][pTeam] != ShipInfo[id][Team])
					{
					    //GameTextForPlayer(playerid, "~n~~n~~n~~n~~w~BOOOYA!", 2000, 3);
					    if(ShipInfo[id][CallForIt]==1){
					    format(string,128,"{33FF33}WAR NEWS:{FFFFFF} The {FF9900}%s{FFFFFF}, is being attacked.",ShipInfo[id][NameFull]);
						if(ShipInfo[id][Mode]==TW)
						{
							SendMessageToMode(TW,white,string);
						  	format(string, sizeof(string), "[WAR NEWS] The %s, is being attacked.",ShipInfo[id][NameFull]);
							db_SaveChat(-1, TW,string);
						}
						if(ShipInfo[id][Mode]==TL)
						{
							SendMessageToMode(TL,white,string);
						  	format(string, sizeof(string), "[WAR NEWS] The %s, is being attacked.",ShipInfo[id][NameFull]);
							db_SaveChat(-1, TL,string);
						}
	    				SetTimerEx("CallForAttack", 45000, 0, "i", id);
						}
					    ShipInfo[id][CallForIt]=0;
					}
		  			ShipInfo[id][sHP]-=floatround(gBombID[PlayerInfo[playerid][btype][num]][7]);
					CheckShipToSink(id, 0, playerid);
					UpdateShipHealthText(id);
					ExplosionOFBomb(id,playerid,x,y,z);
					//if(GetPlayerMode(playerid) == TW)ExplodeShipMinesFromPlaneBomb(id, x, y, 5);
					//CheckUnSunkShips();
				}
			}
			else
			{
	            if((GetXDistanceToShips(PlayerInfo[playerid][bombid][num],id) <=50) && (GetYDistanceToShips(PlayerInfo[playerid][bombid][num],id) <= 10))
				{
				    if(PlayerInfo[playerid][pTeam] == ShipInfo[id][Team])
					{
					    new Float:xp, Float:yp, Float:zp;
				    	if(IsPlayerInAnyVehicle(playerid))
						{
					 		GetPlayerPos(playerid,xp,yp,zp); SetPlayerPos(playerid,xp,yp,zp+3);
							SendClientMessage(playerid,red1, "{FF0000}Notice:{FFFFFF} Don't bomb your own submarine, you lost 2,000 bucks.");
							GiveThePlayerMoney(playerid, -2000);
						}
					}
					if(PlayerInfo[playerid][pTeam] != ShipInfo[id][Team])
					{
					    //GameTextForPlayer(playerid, "~n~~n~~n~~n~~w~BOOOYA!", 2000, 3);
					    if(ShipInfo[id][CallForIt]==1){
					    format(string,128,"{33FF33}WAR NEWS:{FFFFFF} The {FF9900}%s{FFFFFF}, is being attacked.",ShipInfo[id][NameFull]);
						if(ShipInfo[id][Mode]==TW)
						{
							SendMessageToMode(TW,white,string);
						  	format(string, sizeof(string), "[WAR NEWS] The %s, is being attacked.",ShipInfo[id][NameFull]);
							db_SaveChat(-1, TW,string);
						}
						if(ShipInfo[id][Mode]==TL)
						{
							SendMessageToMode(TL,white,string);
						  	format(string, sizeof(string), "[WAR NEWS] The %s, is being attacked.",ShipInfo[id][NameFull]);
							db_SaveChat(-1, TL,string);
						}
	    				SetTimerEx("CallForAttack", 45000, 0, "i", id);
						}
					    ShipInfo[id][CallForIt]=0;
					}
		  			ShipInfo[id][sHP]-=floatround(gBombID[PlayerInfo[playerid][btype][num]][7]);
					CheckShipToSink(id, 0, playerid);
					UpdateShipHealthText(id);
					ExplosionOFBombForSub(id,playerid,x,y,z);
					//if(GetPlayerMode(playerid) == TW)ExplodeShipMinesFromPlaneBomb(id, x, y, 5);
					//CheckUnSunkShips();
				}
			}
		}
	}
	//printf("DEBUG CFONTROL ShipStatusFromBomb 2");
}
forward RefoundPowerForLands();
public RefoundPowerForLands()
{
	//printf("DEBUG CFONTROL RefoundPowerForLands 1");
    forLoop(i, MAX_PLAYERS)
	{
		if(IsPlayerConnected(i))
		{
		    if(PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][PlayerMode] == TW)
			{
			    forLoop(id, MAX_TW_ZONES)
				{
	        		if(TWZoneInfo[id][Exists])
		    		{
					 	if(TWZoneInfo[id][OriginalTeam] == NOPOWER)
					 	{
					 	    if(TWZoneInfo[id][Team] == PlayerInfo[i][pTeam])
					 	    {
			                    GiveThePlayerMoney(i, 700);
					 	    }
					 	}
					}
				}
			}

		}
	}
    SendMessageToMode(TW,green1,"WAR NEWS: {FFFFFF}The powers have received money for controlling the resource lands.");
	db_SaveChat(-1, TW,"[WAR NEWS] The powers have received money for controlling the resource lands.");
	//printf("DEBUG CFONTROL RefoundPowerForLands 2");
	return 1;
}
stock CreateZone(name[],team,country,id,Float:x,Float:y,Float:z,Float:maxx,Float:maxy,Float:minx,Float:miny)
{
	//printf("DEBUG CFONTROL CreateZone 1");
    format(TWZoneInfo[id][zName],50,"%s",name);
    TWZoneInfo[id][BeingCaptured]=0;
    TWZoneInfo[id][Exists]=1;
    TWZoneInfo[id][Needed]=team;
    TWZoneInfo[id][Team]=team;
    TWZoneInfo[id][Conquer]=country;
    TWZoneInfo[id][cOriginalTeam]=country;
    TWZoneInfo[id][OriginalTeam]=team;
	TWZoneInfo[id][zX]=x;
	TWZoneInfo[id][zY]=y;
	TWZoneInfo[id][zZ]=z;
    TWZoneInfo[id][AreaID]=CreateDynamicSphere(x, y, z, 3.0, W_TW, -1, -1);
	CreateTWPickUps(1254, 23,x,y,z, W_TW);
    TWZoneInfo[id][gZone]=GangZoneCreate(x-minx, y-miny, x+maxx, y+maxy);
    new string[128];
	if(TWZoneInfo[id][OriginalTeam] == NOPOWER && TWZoneInfo[id][Conquer]==-1)
    	format(string,sizeof(string),"{FFFFFF}%s - {67F6F6}Neutral",TWZoneInfo[id][zName]);
    if(TWZoneInfo[id][Conquer]>-1)format(string,sizeof(string),"{FFFFFF}%s - {%s}%s{FFFFFF}(%s)",TWZoneInfo[id][zName],CountryChatColor[TWZoneInfo[id][Conquer]],CountryNames[TWZoneInfo[id][Conquer]],PowerNames[TWZoneInfo[id][Team]]);
	TWZoneInfo[id][Zone3DT] =
		CreateDynamic3DTextLabel(string,0xFFFFFFAA,x,y,z+1,20, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, W_TW, -1, -1, 100.0);

	//printf("DEBUG CFONTROL CreateZone 2");
}
stock UpdateZoneText(id)
{
	//printf("DEBUG CFONTROL UpdateZoneText 1");
    new string[128];
	if(TWZoneInfo[id][OriginalTeam] == NOPOWER && TWZoneInfo[id][Conquer]==-1)
    	format(string,sizeof(string),"{FFFFFF}%s - {67F6F6}Neutral",TWZoneInfo[id][zName]);
    if(TWZoneInfo[id][Conquer]>-1)format(string,sizeof(string),"{FFFFFF}%s - {%s}%s{FFFFFF}(%s)",TWZoneInfo[id][zName],CountryChatColor[TWZoneInfo[id][Conquer]],CountryNames[TWZoneInfo[id][Conquer]],PowerNames[TWZoneInfo[id][Team]]);
	UpdateDynamic3DTextLabelText(TWZoneInfo[id][Zone3DT], 0xFFFFFFAA, string);
	//printf("DEBUG CFONTROL UpdateZoneText 2");
}

stock FixTLShipGzone()
{
	//printf("DEBUG CFONTROL FixTLShipGzone 1");
    forLoop(id, MAX_SHIPS)
    {
		if(ShipInfo[id][Exists] && ShipInfo[id][Mode] == TL)
        {
            if(ShipInfo[id][Type] == SHIP)
            {
                new Float:x, Float:y, Float:z;
                x=ShipInfo[id][sX],y=ShipInfo[id][sY], z=ShipInfo[id][sZ];
	            ShipInfo[id][gZone]=GangZoneCreate(x-120, y-20, x+120, y+20);
				if(TLInfo[Map]==MIDWAY || TLInfo[Map]==PEARLHARBOR)
	            {
	                if(ShipInfo[id][Team] == AXIS)
	        			GangZoneShowFor(TL,ShipInfo[id][gZone],0xFFFFFFAA);
					if(ShipInfo[id][Team] == ALLIES)
						GangZoneShowFor(TL,ShipInfo[id][gZone],0x375FFF77);//blue
				}
				else
				{
		            if(ShipInfo[id][Team] == AXIS)
						GangZoneShowFor(TL,ShipInfo[id][gZone],0x000000AA);//black
					if(ShipInfo[id][Team] == ALLIES)
						GangZoneShowFor(TL,ShipInfo[id][gZone],0xFFFFFFAA);//white
				}
			}
			if(ShipInfo[id][Type] == SUB)
            {
                new Float:x, Float:y, Float:z;
                x=ShipInfo[id][sX],y=ShipInfo[id][sY], z=ShipInfo[id][sZ];
                ShipInfo[id][gZone]=GangZoneCreate(x-90, y-20, x+90, y+20);
                if(TLInfo[Map]==MIDWAY || TLInfo[Map]==PEARLHARBOR)
	            {
	                if(ShipInfo[id][Team] == AXIS)
	        			GangZoneShowFor(TL,ShipInfo[id][gZone],0xFFFFFFAA);
					if(ShipInfo[id][Team] == ALLIES)
						GangZoneShowFor(TL,ShipInfo[id][gZone],0x375FFF77);//blue
				}
				else
				{
		            if(ShipInfo[id][Team] == AXIS)
						GangZoneShowFor(TL,ShipInfo[id][gZone],0x000000AA);//black
					if(ShipInfo[id][Team] == ALLIES)
						GangZoneShowFor(TL,ShipInfo[id][gZone],0xFFFFFFAA);//white
				}
            }
		}
    }
	//printf("DEBUG CFONTROL FixTLShipGzone 2");
}

stock DestroyShip(id)
{
	//printf("DEBUG CFONTROL DestroyShip 1");
    if(ShipInfo[id][Exists] == 1)
	{
	    DestroyTheDynamic3DTextLabel(ShipInfo[id][Ship3DT]);
	    GangZoneDestroy(ShipInfo[id][gZone]);
	    ShipInfo[id][Exists] = 0;
		DestroyTheDynamicObject(ShipInfo[id][Object]);
		if(ShipInfo[id][Type] == SHIP)
		{
		    forLoop(obj, MAX_SHIP_OBJECTS)
			{
				DestroyTheDynamicObject(ShipInfo[id][Objects][obj]);
			}
		}
		else
		{
		    DestroyTheDynamicObject(ShipInfo[id][Objects][0]);
		}
		forLoop(i, MAX_PLAYERS)
		{
			if(IsPlayerConnected(i))
			{
				DestroyAllPlayerTWBombsForShip(i, id);
			}
		}
		if(ShipInfo[id][Type] == SHIP)
		{
		    forLoop(car, MAX_SHIP_VEHS)
			{
				if(ShipInfo[id][Vehicles][car] != -1)DestroyVehicle(ShipInfo[id][Vehicles][car]);
				ShipInfo[id][Vehicles][car] = -1;
			}
        }
    }
	//printf("DEBUG CFONTROL DestroyShip 2");
}

stock CreateShip(mode,name[],name2[],health,team,type,Float:x,Float:y,Float:z,Float:r1,Float:r2,Float:r3)
{
	//printf("DEBUG CFONTROL CreateShip 1");
    new id,string[128],worldid;

    forLoop(i, MAX_SHIPS)
    {
		if(ShipInfo[i][Exists] == 0)
        {
            id = i;
            break;
        }
	}

	if(mode == TW) worldid = W_TW;
	else if(mode == TL) worldid = W_TL;

    if(ShipInfo[id][Exists] == 1) DestroyShip(id);
	ShipInfo[id][CallForIt] = 1;
	ShipInfo[id][RepairTime] = 1;
    ShipInfo[id][Mode] = mode;
    ShipInfo[id][Exists] = 1;
    ShipInfo[id][Type] = type;
	ShipInfo[id][sHP] = health;
	ShipInfo[id][Team] = team;
	ShipInfo[id][sX] = x;
	ShipInfo[id][sY] = y;
	ShipInfo[id][sZ] = z;
	format(ShipInfo[id][NameFull],50,"%s",name);
	format(ShipInfo[id][NameShort],50,"%s",name2);
	format(string,sizeof(string),"{FFFFFF}%s {33FF33}HP: %d",name,health);
	ShipInfo[id][Object] = CreateTheDynamicObject(3003,x,y,z-4,r1,r2,r3,worldid);
	if(type == 0)
	{
	    ShipInfo[id][gZone]=GangZoneCreate(x-120, y-20, x+120, y+20);
		ShipInfo[id][Ship3DT] =
			CreateDynamic3DTextLabel(string,0xFFFFFFAA,x,y,z+11,200, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, worldid, -1, -1, 100.0);
		ShipInfo[id][Objects][0] = CreateTheDynamicObject(10771,x,y,z,r1,r2,r3,worldid);
	    ShipInfo[id][Objects][1] = CreateTheDynamicObject(11237,x+3.16,y-7.46,z+33.11,r1,r2,r3,worldid);
	    ShipInfo[id][Objects][2] = CreateTheDynamicObject(10770,x+3.19,y-7.48,z+33.11,r1,r2,r3,worldid);
		ShipInfo[id][Objects][3] = CreateTheDynamicObject(11145,x-62.88,y,z-1.19,r1,r2,r3,worldid);
		ShipInfo[id][Objects][4] = CreateTheDynamicObject(11146,x-8.95,y+0.55,z+6.83,r1,r2,r3,worldid);
		ShipInfo[id][Objects][5] = CreateTheDynamicObject(3114,x-56.7,y+13.86,z+4.18,r1,r2,r3,worldid);
		ShipInfo[id][Objects][6] = CreateTheDynamicObject(3115,x-99.03,y-0.08,z+4.44,r1,r2,r3+179.99,worldid);
		ShipInfo[id][Objects][7] = CreateTheDynamicObject(11149,x-6.1,y-5.2,z+6.54,r1,r2,r3,worldid);
	    if(mode == TW)
		{
	    	ShipInfo[id][Objects][8] = CreateTheDynamicObject(3279,x+34,y-8,z+13,r1,r2,r3,worldid);
			ShipInfo[id][Objects][9] = CreateTheDynamicObject(3279,x-104,y+1,z+3,r1,r2,r3,worldid);
			CreateTWAATower(team,x+34,y-8,z+30);
			CreateTWAATower(team,x-104,y+1,z+20);
	    }
		else if(mode == TL)
		{
	    	ShipInfo[id][Objects][8] = CreateTheDynamicObject(3279,x+34,y-8,z+4933,r1,r2,r3,worldid);
			ShipInfo[id][Objects][9] = CreateTheDynamicObject(3279,x-104,y+1,z+4933,r1,r2,r3,worldid);
	    }

	    ShipInfo[id][Vehicles][0]= AddStaticVehicleEx(460,x-85.6268,y+6,z-2.6,92.0037,31,45,60); // skimmer
		ShipInfo[id][Vehicles][1]= AddStaticVehicleEx(472,x+31.9,y+18.1,z-4,91.8079,71,119,60); // boat
		ShipInfo[id][Vehicles][2]= AddStaticVehicleEx(476,x-52.25,y-8.14,z+14.56,357.2537,15,24,60);
	    ShipInfo[id][Vehicles][3]= AddStaticVehicleEx(476,x-65.35,y-7.26,z+14.56,1.4528,118,104,60);
	    ShipInfo[id][Vehicles][4]= AddStaticVehicleEx(476,x-81.1,y-7.26,z+14.56,358.5385,18,30,60);
	    ShipInfo[id][Vehicles][5]= AddStaticVehicleEx(593,x-58.66,y-6.01,z+6.4,354.7609,100,72,60);

	    forLoop(car, MAX_SHIP_VEHS)
	    {
	    	SetVehicleVirtualWorld(ShipInfo[id][Vehicles][car],worldid);
	    }
    }
    else
	{
	    ShipInfo[id][Objects][0]=CreateTheDynamicObject(9958,x,y,z,r1,r2,r3,worldid);
	    ShipInfo[id][Ship3DT] =
	    	CreateDynamic3DTextLabel(string,0xFFFFFFAA,x,y,z+2,200, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, worldid, -1, -1, 100.0);
	    ShipInfo[id][gZone]=GangZoneCreate(x-90, y-20, x+90, y+20);
    }
	//printf("DEBUG CFONTROL CreateShip 2");
}

stock MoveShip(id,Float:x,Float:y,Float:z,speed)
{
	//printf("DEBUG CFONTROL MoveShip 1");
    MoveDynamicObject(ShipInfo[id][Object], x, y, z, speed);
    MoveDynamicObject(ShipInfo[id][Objects][0], x,y,z, speed);
    if(ShipInfo[id][Type] == SHIP)
    {
        MoveDynamicObject(ShipInfo[id][Objects][1], x+3.16,y-7.46,z+33.11, speed);
	    MoveDynamicObject(ShipInfo[id][Objects][2], x+3.19,y-7.48,z+33.11, speed);
	    MoveDynamicObject(ShipInfo[id][Objects][3], x-62.88,y,z-1.19, speed);
	    MoveDynamicObject(ShipInfo[id][Objects][4], x-8.95,y+0.55,z+6.83, speed);
	    MoveDynamicObject(ShipInfo[id][Objects][5], x-56.7,y+13.86,z+4.18, speed);
	    MoveDynamicObject(ShipInfo[id][Objects][6], x-99.03,y-0.08,z+4.44, speed);
		MoveDynamicObject(ShipInfo[id][Objects][7], x-6.1,y-5.2,z+6.54, speed);
	    if(ShipInfo[id][Mode] == TW)
		{
		    MoveDynamicObject(ShipInfo[id][Objects][8], x+34,y-8,z+13, speed);
		    MoveDynamicObject(ShipInfo[id][Objects][9], x-104,y+1,z+3, speed);
	    }
	    if(ShipInfo[id][Mode] == TL)
		{
		    MoveDynamicObject(ShipInfo[id][Objects][8], x+34,y-8,z+4933, speed);
		    MoveDynamicObject(ShipInfo[id][Objects][9], x-104,y+1,z+4933, speed);
	    }
    }
	//printf("DEBUG CFONTROL MoveShip 2");
}
stock CheckUnSunkShips()
{
	//printf("DEBUG CFONTROL CheckUnSunkShips 1");
	forLoop(id, MAX_SHIPS)
	{
	    if(ShipInfo[id][sHP] <= 0)
		{
			new Float:x,Float:y,Float:z;
			GetDynamicObjectPos(ShipInfo[id][Object], x, y, z);
			if(floatround(ShipInfo[id][sZ]) == floatround((z+4)))
				SinkShip(id);
		}
	}
	//printf("DEBUG CFONTROL CheckUnSunkShips 2");
}
stock CheckShipToSink(id, reason, playerid)
{
	//printf("DEBUG CFONTROL CheckShipToSink 1");
	new string[228];
	if(reason == 0)//from player
	{
		if(ShipInfo[id][Type] == SHIP)
		{
		    if(ShipInfo[id][sHP] <= 0)
			{
				SinkShip(id);
				if(PlayerInfo[playerid][pTeam] != ShipInfo[id][Team] && ShipInfo[id][Mode]==TW)
				{
					RefoundBomber(playerid);
				}
				if(ShipInfo[id][Mode]==TW)
				{
					format(string,sizeof(string),"{33FF33}WAR NEWS:{FFFFFF} The {FF9900}%s{FFFFFF}, has been taken down by {FF9900}%s,{%s} %s %s!",ShipInfo[id][NameFull],PlayerInfo[playerid][Name],CountryChatColor[TWPlayerInfo[playerid][Country]],caCountryNames[TWPlayerInfo[playerid][Country]],ClassNames[TWPlayerInfo[playerid][Class]]);
					SendMessageToMode(TW,white,string);
				  	format(string, sizeof(string), "[WAR NEWS] The %s, has been taken down by %s, %s %s!",ShipInfo[id][NameFull],PlayerInfo[playerid][Name],caCountryNames[TWPlayerInfo[playerid][Country]],ClassNames[TWPlayerInfo[playerid][Class]]);
					db_SaveChat(-1, TW,string);
     				LeaderBarState();
					PowerTakesOver();
				}
				if(ShipInfo[id][Mode]==TL)
				{
				    format(string,sizeof(string),"{33FF33}WAR NEWS:{FFFFFF} The {FF9900}%s{FFFFFF}, has been taken down by {FF9900}%s!",ShipInfo[id][NameFull],PlayerInfo[playerid][Name]);
					SendMessageToMode(TL,white,string);
				  	format(string, sizeof(string), "[WAR NEWS] The {FF9900}%s{FFFFFF}, has been taken down by %s!",ShipInfo[id][NameFull],PlayerInfo[playerid][Name]);
					db_SaveChat(-1, TL,string);
					if(TLInfo[Map]==MIDWAY)
					{
						ChangeModeScore(playerid, 15);
						TLPlayerInfo[playerid][Objective] ++;
						if(ShipInfo[id][Team] == AXIS){TLInfo[AxisShips]--;CheckpointOnShip(ALLIES);}
						if(ShipInfo[id][Team] == ALLIES){TLInfo[AllyShips]--;CheckpointOnShip(AXIS);}
						new st[90];
						format(st, sizeof(st), "~b~Ally ~w~ships: %d~n~~r~Axis ~w~ships: %d",TLInfo[AllyShips],TLInfo[AxisShips]);
						TextDrawSetString(TLInfo[TimeleftTD], st);
						if(TLInfo[AllyShips] <= 0)//axis win
						{
						    ChangeMapTL();
							SendMessageToMode(TL,white,"{33FF33}WAR NEWS:{FFFFFF} Japanese pilots have taken down all American ships!");
							db_SaveChat(-1, TL,"[WAR NEWS] Japanese pilots have taken down all American ships!");
						    forLoop(i, MAX_PLAYERS)
							{
								if(!IsPlayerConnected(i) || IsPlayerNPC(i))continue;
								if(PlayerInfo[i][PlayerMode] == TL && PlayerInfo[i][Spawned] == 1 && GetPlayerVirtualWorld(i)==W_TL)
								{
								    if(PlayerInfo[i][pTeam] == AXIS)
								    {
								        TLPlayerInfo[i][RoundsWon]++;
                						TLPlayerInfo[i][Score] +=10;
								    }
								    if(PlayerInfo[i][pTeam] == ALLIES)
									{
										TLPlayerInfo[i][RoundsLost] ++;
									}
									TextDrawHideForPlayer(i,TLInfo[TimeleftTD]);
									TogglePlayerControllable(i,false);
									SetPlayerPos(i, -3296.1885,1275.8162,-0.8609);
					  				SetPlayerCameraPos(i,-3323.3438,1330.8136,26.3284);
									SetPlayerCameraLookAt(i, -3312.2539,1184.4896,29.9032);
									SpawnPlayerTimer(i, 3000);
								}
							}
						}
						if(TLInfo[AxisShips] <= 0)//allies win
						{
						    ChangeMapTL();
							SendMessageToMode(TL,white,"{33FF33}WAR NEWS:{FFFFFF} American pilots have taken down all Japanese ships!");
							db_SaveChat(-1, TL,"[WAR NEWS] American pilots have taken down all Japanese ships!");
						    forLoop(i, MAX_PLAYERS)
							{
								if(!IsPlayerConnected(i) || IsPlayerNPC(i))continue;
								if(PlayerInfo[i][PlayerMode] == TL && PlayerInfo[i][Spawned] == 1 && GetPlayerVirtualWorld(i)==W_TL)
								{
								    if(PlayerInfo[i][pTeam] == ALLIES)
								    {
								        TLPlayerInfo[i][RoundsWon]++;
                						TLPlayerInfo[i][Score] +=10;
								    }
								    if(PlayerInfo[i][pTeam] == AXIS)
									{
										TLPlayerInfo[i][RoundsLost] ++;
									}
									TextDrawHideForPlayer(i,TLInfo[TimeleftTD]);
									TogglePlayerControllable(i,false);
					  				SetPlayerPos(i, -3323.0918,2278.5579,1.1615);
									SetPlayerCameraPos(i, -3334.8750,2305.4246,30.2014);
									SetPlayerCameraLookAt(i, -3300.9063,2201.5657,26.7062);
									SpawnPlayerTimer(i, 3000);
								}
							}
						}
					}
					if(TLInfo[Map]==PEARLHARBOR)
					{
						ChangeModeScore(playerid, 15);
						TLPlayerInfo[playerid][Objective] ++;
						if(ShipInfo[id][Team] == ALLIES){TLInfo[AllyShips]--;CheckpointOnShip(AXIS);}
						new st[90];
						format(st, sizeof(st), "~b~Ally ~w~ships: %d~n~~w~Time: %s",TLInfo[AllyShips],TimeConvertTL(TLInfo[TimeLeft]));
						TextDrawSetString(TLInfo[TimeleftTD], st);
						forLoop(i, MAX_PLAYERS)
						{
							if(!IsPlayerConnected(i) || IsPlayerNPC(i))continue;
							if(PlayerInfo[i][PlayerMode] == TL && PlayerInfo[i][Spawned] == 1  && GetPlayerVirtualWorld(i)==W_TL)
							{
								CheckpointOnShipForPlayer(i,ALLIES);
							}
						}
						if(TLInfo[AllyShips] <= 0)//axis win
						{
						    TLInfo[TimeLeft] = 5000;
						    ChangeMapTL();
							SendMessageToMode(TL,white,"{33FF33}WAR NEWS:{FFFFFF} Japanese pilots have taken down all American ships!");
							db_SaveChat(-1, TL,"[WAR NEWS] Japanese pilots have taken down all American ships!");
						    forLoop(i, MAX_PLAYERS)
							{
								if(!IsPlayerConnected(i) || IsPlayerNPC(i))continue;
								if(PlayerInfo[i][PlayerMode] == TL && PlayerInfo[i][Spawned] == 1 && GetPlayerVirtualWorld(i)==W_TL)
								{
								    if(PlayerInfo[i][pTeam] == AXIS)
								    {
								        TLPlayerInfo[i][RoundsWon]++;
                						TLPlayerInfo[i][Score] +=10;
								    }
								    if(PlayerInfo[i][pTeam] == ALLIES)
									{
										TLPlayerInfo[i][RoundsLost] ++;
									}
									TextDrawHideForPlayer(i,TLInfo[TimeleftTD]);
									TogglePlayerControllable(i,false);
									SetPlayerPos(i, 2683.7336, -2532.9258, 13.0220);
	    							SetPlayerCameraPos(i, 2665.0732, -2610.5781, 91.9509);
									SetPlayerCameraLookAt(i, 2665.6511, -2609.7571, 91.5557);
									SpawnPlayerTimer(i, 3000);
								}
							}
						}
					}
				}
				ShipInfo[id][sHP]=0;
			}
		}
		else //submarine
		{
		    if(ShipInfo[id][sHP] <= 0)
			{
 				SinkShip(id);
				if(PlayerInfo[playerid][pTeam] != ShipInfo[id][Team] && ShipInfo[id][Mode]==TW)
				{
					RefoundBomber(playerid);
				}
				if(ShipInfo[id][Mode]==TW)
				{
					format(string,sizeof(string),"{33FF33}WAR NEWS:{FFFFFF} The {FF9900}%s{FFFFFF}, has been taken down by {FF9900}%s,{%s} %s %s!",ShipInfo[id][NameFull],PlayerInfo[playerid][Name],CountryChatColor[TWPlayerInfo[playerid][Country]],caCountryNames[TWPlayerInfo[playerid][Country]],ClassNames[TWPlayerInfo[playerid][Class]]);
					SendMessageToMode(TW,white,string);
				  	format(string, sizeof(string), "[WAR NEWS] The %s, has been taken down by %s, %s %s!",ShipInfo[id][NameFull],PlayerInfo[playerid][Name],caCountryNames[TWPlayerInfo[playerid][Country]],ClassNames[TWPlayerInfo[playerid][Class]]);
					db_SaveChat(-1, TW,string);
					LeaderBarState();
					PowerTakesOver();
				}
				if(ShipInfo[id][Mode]==TL)
				{
					format(string,sizeof(string),"{33FF33}WAR NEWS:{FFFFFF} The {FF9900}%s{FFFFFF}, has been taken down by {FF9900}%s!",ShipInfo[id][NameFull],PlayerInfo[playerid][Name]);
					SendMessageToMode(TL,white,string);
				  	format(string, sizeof(string), "[WAR NEWS] The %s, has been taken down by %s!",ShipInfo[id][NameFull],PlayerInfo[playerid][Name]);
					db_SaveChat(-1, TL,string);
				}
				ShipInfo[id][sHP]=0;
        		forLoop(i, MAX_PLAYERS)
				{
					if (IsPlayerConnected(i) && !IsPlayerNPC(i) && PlayerInfo[i][Spawned] && PlayerInfo[i][InSubmarine] == id)
					{
					    new Float:burnx, Float:burny, Float:burnz;
						GetPlayerPos(i,burnx, burny, burnz);
						CreateExplosionEx(GetPlayerVirtualWorld(i), burnx, burny , burnz, 10.0, 50, 60, true,playerid);
					    SetHealth(i, 0.0);
					    PlayerInfo[i][InSubmarine] = -1;
						SendClientMessage(i,red1, "{FF0000}Notice:{FFFFFF} The submarine has exploded, and everyone inside has died.");
					}
				}
			}
		}
	}
	else if(reason == 1)  //plane, kamikaze
	{
	    if(ShipInfo[id][Type] == SHIP)
	    {
	        if(ShipInfo[id][sHP] <= 0)
			{
				SinkShip(id);
        		format(string,128,"{33FF33}WAR NEWS:{FFFFFF} The {FF9900}%s{FFFFFF}, has been kamikazed down!",ShipInfo[id][NameFull]);
 				if(ShipInfo[id][Mode]==TW)
				{
					SendMessageToMode(TW,white,string);
				  	format(string, sizeof(string), "[WAR NEWS] The %s, has been kamikazed down!",ShipInfo[id][NameFull]);
					db_SaveChat(-1, TW,string);
					LeaderBarState();
					PowerTakesOver();
				}
				if(ShipInfo[id][Mode]==TL)
				{
					SendMessageToMode(TL,white,string);
				  	format(string, sizeof(string), "[WAR NEWS] The {FF9900}%s{FFFFFF}, has been kamikazed down!",ShipInfo[id][NameFull]);
					db_SaveChat(-1, TL,string);
					if(TLInfo[Map]==MIDWAY)
					{
						if(ShipInfo[id][Team] == AXIS){TLInfo[AxisShips]--;CheckpointOnShip(ALLIES);}
						if(ShipInfo[id][Team] == ALLIES){TLInfo[AllyShips]--;CheckpointOnShip(AXIS);}
						new st[90];
						format(st, sizeof(st), "~b~Ally ~w~ships: %d~n~~r~Axis ~w~ships: %d",TLInfo[AllyShips],TLInfo[AxisShips]);
						TextDrawSetString(TLInfo[TimeleftTD], st);
						if(TLInfo[AllyShips] <= 0)//axis win
						{
						    forLoop(i, MAX_PLAYERS)
							{
								if(!IsPlayerConnected(i) || IsPlayerNPC(i))continue;
								if(PlayerInfo[i][PlayerMode] == TL && PlayerInfo[i][Spawned] == 1 && GetPlayerVirtualWorld(i)==W_TL)
								{
								    if(PlayerInfo[i][pTeam] == AXIS)
								    {
								        TLPlayerInfo[i][RoundsWon]++;
                						TLPlayerInfo[i][Score] +=10;
								    }
								    if(PlayerInfo[i][pTeam] == ALLIES)
									{
										TLPlayerInfo[i][RoundsLost] ++;
									}
									TextDrawHideForPlayer(i,TLInfo[TimeleftTD]);
									TogglePlayerControllable(i,false);
									SetPlayerPos(i, -3296.1885,1275.8162,-0.8609);
					  				SetPlayerCameraPos(i,-3323.3438,1330.8136,26.3284);
									SetPlayerCameraLookAt(i, -3312.2539,1184.4896,29.9032);
									SpawnPlayerTimer(i, 3000);
								}
							}
							ChangeMapTL();
							SendMessageToMode(TL,white,"{33FF33}WAR NEWS:{FFFFFF} Japanese pilots have taken down all American ships!");
					        db_SaveChat(-1, TL,"[WAR NEWS] Japanese pilots have taken down all American ships!");
						}
						if(TLInfo[AxisShips] <= 0)//allies win
						{
						    forLoop(i, MAX_PLAYERS)
							{
								if(!IsPlayerConnected(i) || IsPlayerNPC(i))continue;
								if(PlayerInfo[i][PlayerMode] == TL && PlayerInfo[i][Spawned] == 1 && GetPlayerVirtualWorld(i)==W_TL)
								{
								    if(PlayerInfo[i][pTeam] == ALLIES)
								    {
								        TLPlayerInfo[i][RoundsWon]++;
                						TLPlayerInfo[i][Score] +=10;
								    }
								    if(PlayerInfo[i][pTeam] == AXIS)
									{
										TLPlayerInfo[i][RoundsLost] ++;
									}
									TextDrawHideForPlayer(i,TLInfo[TimeleftTD]);
									TogglePlayerControllable(i,false);
					  				SetPlayerPos(i, -3323.0918,2278.5579,1.1615);
									SetPlayerCameraPos(i, -3334.8750,2305.4246,30.2014);
									SetPlayerCameraLookAt(i, -3300.9063,2201.5657,26.7062);
        	 						SpawnPlayerTimer(i, 3000);
								}
							}
							ChangeMapTL();
							SendMessageToMode(TL,white,"{33FF33}WAR NEWS:{FFFFFF} American pilots have taken down all Japanese ships!");
					        db_SaveChat(-1, TL,"[WAR NEWS] American pilots have taken down all Japanese ships!");
						}
					}

					if(TLInfo[Map]==PEARLHARBOR)
					{
						if(ShipInfo[id][Team] == ALLIES){TLInfo[AllyShips]--;CheckpointOnShip(AXIS);}
						new st[90];
						format(st, sizeof(st), "~b~Ally ~w~ships: %d~n~~w~Time: %s",TLInfo[AllyShips],TimeConvertTL(TLInfo[TimeLeft]));
						TextDrawSetString(TLInfo[TimeleftTD], st);
						forLoop(i, MAX_PLAYERS)
						{
							if(!IsPlayerConnected(i) || IsPlayerNPC(i))continue;
							if(PlayerInfo[i][PlayerMode] == TL && PlayerInfo[i][Spawned] == 1 && GetPlayerVirtualWorld(i)==W_TL)
							{
								CheckpointOnShipForPlayer(i,ALLIES);
							}
						}
						if(TLInfo[AllyShips] <= 0)//axis win
						{
						    forLoop(i, MAX_PLAYERS)
							{
								if(!IsPlayerConnected(i) || IsPlayerNPC(i))continue;
								if(PlayerInfo[i][PlayerMode] == TL && PlayerInfo[i][Spawned] == 1 && GetPlayerVirtualWorld(i)==W_TL)
								{
								    if(PlayerInfo[i][pTeam] == AXIS)
								    {
								        TLPlayerInfo[i][RoundsWon]++;
                						TLPlayerInfo[i][Score] +=10;
								    }
								    if(PlayerInfo[i][pTeam] == ALLIES)
									{
										TLPlayerInfo[i][RoundsLost] ++;
									}
									TextDrawHideForPlayer(i,TLInfo[TimeleftTD]);
									TogglePlayerControllable(i,false);
									SetPlayerPos(i, 2683.7336, -2532.9258, 13.0220);
        							SetPlayerCameraPos(i, 2665.0732, -2610.5781, 91.9509);
									SetPlayerCameraLookAt(i, 2665.6511, -2609.7571, 91.5557);
                                    SpawnPlayerTimer(i, 3000);
								}
							}
							TLInfo[TimeLeft] = 5000;
							ChangeMapTL();
							SendMessageToMode(TL,white,"{33FF33}WAR NEWS:{FFFFFF} Japanese pilots have taken down all American ships!");
							db_SaveChat(-1, TL,"[WAR NEWS] Japanese pilots have taken down all American ships!");
						}
					}
				}
				ShipInfo[id][sHP]=0;
			}
	    }
	    else //submarine, kamikaze
	    {
	        if(ShipInfo[id][sHP] <= 0)
			{
 				SinkShip(id);
        		format(string,128,"{33FF33}WAR NEWS:{FFFFFF} The {FF9900}%s{FFFFFF}, has been kamikazed down!",ShipInfo[id][NameFull]);
				if(ShipInfo[id][Mode]==TW)
				{
					SendMessageToMode(TW,white,string);
				  	format(string, sizeof(string), "[WAR NEWS] The %s, has been kamikazed down!",ShipInfo[id][NameFull]);
					db_SaveChat(-1, TW,string);
					PowerTakesOver();
				}
				if(ShipInfo[id][Mode]==TL)
				{
					SendMessageToMode(TL,white,string);
				  	format(string, sizeof(string), "[WAR NEWS] The %s, has been kamikazed down!",ShipInfo[id][NameFull]);
					db_SaveChat(-1, TL,string);
				}
				ShipInfo[id][sHP]=0;
        		forLoop(i, MAX_PLAYERS)
				{
					if (PlayerInfo[i][InSubmarine] == id)
					{
					    new Float:burnx, Float:burny, Float:burnz;
						GetPlayerPos(i,burnx, burny, burnz);
						CreateExplosionEx(GetPlayerVirtualWorld(i), burnx, burny , burnz, 10.0, 50, 51, true,-1);
					    SetHealth(i, 0.0);
					    PlayerInfo[i][InSubmarine] = -1;
						SendClientMessage(i,red1, "{FF0000}Notice:{FFFFFF} The submarine has exploded, and everyone inside has died.");
					}
				}
				if(ShipInfo[id][Mode]==TW)
				{
					SendMessageToMode(TW,white,string);
					LeaderBarState();
				}
			}
	    }
	}
	else //mines, TW only
	{
	    if(ShipInfo[id][sHP] <= 0)
		{
		    if(PlayerInfo[playerid][pTeam] != ShipInfo[id][Team] && ShipInfo[id][Mode]==TW)
			{
				RefoundBomber(playerid);
			}
			format(string,sizeof string,"{33FF33}WAR NEWS:{FFFFFF} The {FF9900}%s{FFFFFF}, has been taken down by {FF9900}%s,{%s} %s %s!!",ShipInfo[id][NameFull],PlayerInfo[playerid][Name],CountryChatColor[TWPlayerInfo[playerid][Country]],caCountryNames[TWPlayerInfo[playerid][Country]],ClassNames[TWPlayerInfo[playerid][Class]]);
			SendMessageToMode(TW,white,string);
		  	format(string, sizeof(string), "[WAR NEWS] The %s, has been taken down by %s, %s %s!!",ShipInfo[id][NameFull],PlayerInfo[playerid][Name],caCountryNames[TWPlayerInfo[playerid][Country]],ClassNames[TWPlayerInfo[playerid][Class]]);
			db_SaveChat(-1, TW,string);
			SinkShip(id);
			LeaderBarState();
			ShipInfo[id][sHP]=0;
			PowerTakesOver();
			if(ShipInfo[id][Type] == SUB)
			{
				forLoop(i, MAX_PLAYERS)
				{
				    if(!IsPlayerConnected(i) || IsPlayerNPC(i))continue;
					if (PlayerInfo[i][InSubmarine] == id)
					{
					    new Float:burnx, Float:burny, Float:burnz;
						GetPlayerPos(i,burnx, burny, burnz);
						CreateExplosionEx(GetPlayerVirtualWorld(i), burnx, burny , burnz, 10.0, 50, 57, true,playerid);
					    SetHealth(i, 0.0);
					    PlayerInfo[i][InSubmarine] = -1;
						SendClientMessage(i,red1, "{FF0000}Notice:{FFFFFF} The submarine has exploded, and everyone inside has died.");
					}
				}
			}
		}
	}
	//printf("DEBUG CFONTROL CheckShipToSink 2");
}
stock SinkShip(id)
{
	//printf("DEBUG CFONTROL SinkShip 1");
    if(ShipInfo[id][Type] == SHIP)
    {
		MoveShip(id,ShipInfo[id][sX],ShipInfo[id][sY], ShipInfo[id][sZ]-40,1);
		for (new i = 0; i < MAX_SHIP_VEHS; i++)
		{
		    SetTimerEx("OnVehicleSpawn",20000, 0, "i",ShipInfo[id][Vehicles][i]);
			SetVehicleHealth(ShipInfo[id][Vehicles][i], 131);
		}
	}
	else
		MoveShip(id,ShipInfo[id][sX],ShipInfo[id][sY], ShipInfo[id][sZ]-60,1);
	BombShip(id);
	GangZoneHideFor(ShipInfo[id][Mode],ShipInfo[id][gZone]);
	forLoop(playerid, MAX_PLAYERS)
	{
    	if(IsPlayerConnected(playerid) && GetPlayerMode(playerid) == TW)
			ExplodeAllPlayerTWBombsForShip(playerid, id);
	}
	SetTimerEx("BombShip", 3000, 0, "i",id);
	//printf("DEBUG CFONTROL SinkShip 2");
}
forward BombShip(id);
public BombShip(id)
{
	//printf("DEBUG CFONTROL BombShip 1");
    new Float:x1, Float:y1, Float:z1, world = W_TW;
    GetDynamicObjectPos(ShipInfo[id][Object],x1,y1,z1);
    if(ShipInfo[id][Mode] == TL)world = W_TL;
    if(ShipInfo[id][Type] == SHIP)
    {
		CreateExplosionEx(world, x1-12,y1+4,z1, 20, 40, 51, true,-1);
		CreateExplosionEx(world, x1-32,y1,z1, 20, 40, 51, true,-1);
		CreateExplosionEx(world, x1-52,y1,z1-3, 20, 40, 51, true,-1);
		CreateExplosionEx(world, x1-72,y1-9,z1, 20, 40, 51, true,-1);
		CreateExplosionEx(world, x1-92,y1+12,z1, 20, 40, 51, true,-1);
		CreateExplosionEx(world, x1+12,y1+4,z1, 20, 40, 51, true,-1);
		CreateExplosionEx(world, x1+32,y1,z1, 20, 40, 51, true,-1);
		CreateExplosionEx(world, x1+52,y1-2,z1-3, 20, 40, 51, true,-1);
		CreateExplosionEx(world, x1+72,y1-9,z1, 20, 40, 51, true,-1);
		CreateExplosionEx(world, x1+92,y1-12,z1, 20, 40, 51, true,-1);
		CreateExplosionEx(world, x1+12,y1+4,z1-9, 20, 40, 51, true,-1);
		CreateExplosionEx(world, x1+32,y1,z1-9, 20, 40, 51, true,-1);
		CreateExplosionEx(world, x1+52,y1,z1-3, 20, 40, 51, true,-1);
		CreateExplosionEx(world, x1+72,y1-9,z1-9, 20, 40, 51, true,-1);
		CreateExplosionEx(world, x1+92,y1-12,z1-9, 20, 40, 51, true,-1);

	}
	else
	{
		CreateExplosionEx(world, x1-12,y1+4,z1, 20, 40, 51, true,-1);
		CreateExplosionEx(world, x1-32,y1,z1, 20, 40, 51, true,-1);
		CreateExplosionEx(world, x1+12,y1+4,z1, 20, 40, 51, true,-1);
		CreateExplosionEx(world, x1+32,y1,z1, 20, 40, 51, true,-1);
		CreateExplosionEx(world, x1+12,y1+4,z1-9, 20, 40, 51, true,-1);
	}
	//printf("DEBUG CFONTROL BombShip 2");
}

stock UpgradeCORanks(playerid)
{
	//printf("DEBUG CFONTROL UpgradeCORanks 1");
	new string[190];
	//criminal
	if (COPlayerInfo[playerid][Releases] >= 80)
	{
	    if(COPlayerInfo[playerid][CriminalRank] < 1)
	    {
			COPlayerInfo[playerid][CriminalRank] = 1;
			format(string,sizeof(string),"{FF0000}The Coppers:{FFFFFF} %s(ID:%d) just unlocked Criminal Rank: {FF0000}%s.",PlayerInfo[playerid][Name],playerid,CONamesCriminal[COPlayerInfo[playerid][CriminalRank]]);
			SendMessageToMode(CO,red1, string);
			format(string, sizeof(string), "[The Coppers] %s(ID:%d) just unlocked Criminal Rank: %s.",PlayerInfo[playerid][Name],playerid,CONamesCriminal[COPlayerInfo[playerid][CriminalRank]]);
			db_SaveChat(-1, CO,string);
		}
	}
	if (COPlayerInfo[playerid][Releases] >= 180)
	{
	    if(COPlayerInfo[playerid][CriminalRank] < 2)
	    {
			COPlayerInfo[playerid][CriminalRank] = 2;
			format(string,sizeof(string),"{FF0000}The Coppers:{FFFFFF} %s(ID:%d) just unlocked Criminal Rank: {FF0000}%s.",PlayerInfo[playerid][Name],playerid,CONamesCriminal[COPlayerInfo[playerid][CriminalRank]]);
			SendMessageToMode(CO,red1, string);
			format(string, sizeof(string), "[The Coppers] %s(ID:%d) just unlocked Criminal Rank: %s.",PlayerInfo[playerid][Name],playerid,CONamesCriminal[COPlayerInfo[playerid][CriminalRank]]);
			db_SaveChat(-1, CO,string);
		}
	}
	if (COPlayerInfo[playerid][Releases] >= 280)
	{
	    if(COPlayerInfo[playerid][CriminalRank] < 3)
	    {
			COPlayerInfo[playerid][CriminalRank] = 3;
			format(string,sizeof(string),"{FF0000}The Coppers:{FFFFFF} %s(ID:%d) just unlocked Criminal Rank: {FF0000}%s.",PlayerInfo[playerid][Name],playerid,CONamesCriminal[COPlayerInfo[playerid][CriminalRank]]);
			SendMessageToMode(CO,red1, string);
			format(string, sizeof(string), "[The Coppers] %s(ID:%d) just unlocked Criminal Rank: %s.",PlayerInfo[playerid][Name],playerid,CONamesCriminal[COPlayerInfo[playerid][CriminalRank]]);
			db_SaveChat(-1, CO,string);
		}
	}
	if (COPlayerInfo[playerid][Releases] >= 580)
	{
	    if(COPlayerInfo[playerid][CriminalRank] < 4)
	    {
			COPlayerInfo[playerid][CriminalRank] = 4;
			format(string,sizeof(string),"{FF0000}The Coppers:{FFFFFF} %s(ID:%d) just unlocked Criminal Rank: {FF0000}%s.",PlayerInfo[playerid][Name],playerid,CONamesCriminal[COPlayerInfo[playerid][CriminalRank]]);
			SendMessageToMode(CO,red1, string);
			format(string, sizeof(string), "[The Coppers] %s(ID:%d) just unlocked Criminal Rank: %s.",PlayerInfo[playerid][Name],playerid,CONamesCriminal[COPlayerInfo[playerid][CriminalRank]]);
			db_SaveChat(-1, CO,string);
		}
	}
	if (COPlayerInfo[playerid][Releases] >= 880)
	{
	    if(COPlayerInfo[playerid][CriminalRank] < 5)
	    {
			COPlayerInfo[playerid][CriminalRank] = 5;
			format(string,sizeof(string),"{FF0000}The Coppers:{FFFFFF} %s(ID:%d) just unlocked Criminal Rank: {FF0000}%s.",PlayerInfo[playerid][Name],playerid,CONamesCriminal[COPlayerInfo[playerid][CriminalRank]]);
			SendMessageToMode(CO,red1, string);
			format(string, sizeof(string), "[The Coppers] %s(ID:%d) just unlocked Criminal Rank: %s.",PlayerInfo[playerid][Name],playerid,CONamesCriminal[COPlayerInfo[playerid][CriminalRank]]);
			db_SaveChat(-1, CO,string);
		}
	}
	if (COPlayerInfo[playerid][Releases] >= 2000)
	{
	    if(COPlayerInfo[playerid][CriminalRank] < 6)
	    {
			COPlayerInfo[playerid][CriminalRank] = 6;
			format(string,sizeof(string),"{FF0000}The Coppers:{FFFFFF} %s(ID:%d) just unlocked Criminal Rank: {FF0000}%s.",PlayerInfo[playerid][Name],playerid,CONamesCriminal[COPlayerInfo[playerid][CriminalRank]]);
			SendMessageToMode(CO,red1, string);
			format(string, sizeof(string), "[The Coppers] %s(ID:%d) just unlocked Criminal Rank: %s.",PlayerInfo[playerid][Name],playerid,CONamesCriminal[COPlayerInfo[playerid][CriminalRank]]);
			db_SaveChat(-1, CO,string);
		}
	}

	//cop rank =arrests

	if (COPlayerInfo[playerid][Arrests] >= 80)
	{
	    if(COPlayerInfo[playerid][PoliceRank] < 1)
	    {
			COPlayerInfo[playerid][PoliceRank] = 1;
			format(string,sizeof(string),"{FF0000}The Coppers:{FFFFFF} %s(ID:%d) just unlocked Cop Rank: {FF0000}%s.",PlayerInfo[playerid][Name],playerid,CONamesCop[COPlayerInfo[playerid][PoliceRank]]);
			SendMessageToMode(CO,red1, string);
			format(string, sizeof(string), "[The Coppers] %s(ID:%d) just unlocked Cop Rank: %s.",PlayerInfo[playerid][Name],playerid,CONamesCop[COPlayerInfo[playerid][PoliceRank]]);
			db_SaveChat(-1, CO,string);
		}
	}
	if (COPlayerInfo[playerid][Arrests] >= 180)
	{
	    if(COPlayerInfo[playerid][PoliceRank] < 2)
	    {
			COPlayerInfo[playerid][PoliceRank] = 2;
			format(string,sizeof(string),"{FF0000}The Coppers:{FFFFFF} %s(ID:%d) just unlocked Cop Rank: {FF0000}%s.",PlayerInfo[playerid][Name],playerid,CONamesCop[COPlayerInfo[playerid][PoliceRank]]);
			SendMessageToMode(CO,red1, string);
			format(string, sizeof(string), "[The Coppers] %s(ID:%d) just unlocked Cop Rank: %s.",PlayerInfo[playerid][Name],playerid,CONamesCop[COPlayerInfo[playerid][PoliceRank]]);
			db_SaveChat(-1, CO,string);
		}
	}
	if (COPlayerInfo[playerid][Arrests] >= 280)
	{
	    if(COPlayerInfo[playerid][PoliceRank] < 3)
	    {
			COPlayerInfo[playerid][PoliceRank] = 3;
			format(string,sizeof(string),"{FF0000}The Coppers:{FFFFFF} %s(ID:%d) just unlocked Cop Rank: {FF0000}%s.",PlayerInfo[playerid][Name],playerid,CONamesCop[COPlayerInfo[playerid][PoliceRank]]);
			SendMessageToMode(CO,red1, string);
			format(string, sizeof(string), "[The Coppers] %s(ID:%d) just unlocked Cop Rank: %s.",PlayerInfo[playerid][Name],playerid,CONamesCop[COPlayerInfo[playerid][PoliceRank]]);
			db_SaveChat(-1, CO,string);
		}
	}
	if (COPlayerInfo[playerid][Arrests] >= 580)
	{
	    if(COPlayerInfo[playerid][PoliceRank] < 4)
	    {
			COPlayerInfo[playerid][PoliceRank] = 4;
			format(string,sizeof(string),"{FF0000}The Coppers:{FFFFFF} %s(ID:%d) just unlocked Cop Rank: {FF0000}%s.",PlayerInfo[playerid][Name],playerid,CONamesCop[COPlayerInfo[playerid][PoliceRank]]);
			SendMessageToMode(CO,red1, string);
			format(string, sizeof(string), "[The Coppers] %s(ID:%d) just unlocked Cop Rank: %s.",PlayerInfo[playerid][Name],playerid,CONamesCop[COPlayerInfo[playerid][PoliceRank]]);
			db_SaveChat(-1, CO,string);
		}
	}
	if (COPlayerInfo[playerid][Arrests] >= 880)
	{
	    if(COPlayerInfo[playerid][PoliceRank] < 5)
	    {
			COPlayerInfo[playerid][PoliceRank] = 5;
			format(string,sizeof(string),"{FF0000}The Coppers:{FFFFFF} %s(ID:%d) just unlocked Cop Rank: {FF0000}%s.",PlayerInfo[playerid][Name],playerid,CONamesCop[COPlayerInfo[playerid][PoliceRank]]);
			SendMessageToMode(CO,red1, string);
			format(string, sizeof(string), "[The Coppers] %s(ID:%d) just unlocked Cop Rank: %s.",PlayerInfo[playerid][Name],playerid,CONamesCop[COPlayerInfo[playerid][PoliceRank]]);
			db_SaveChat(-1, CO,string);
		}
	}
	if (COPlayerInfo[playerid][Arrests] >= 2000)
	{
	    if(COPlayerInfo[playerid][PoliceRank] < 6)
	    {
			COPlayerInfo[playerid][PoliceRank] = 6;
			format(string,sizeof(string),"{FF0000}The Coppers:{FFFFFF} %s(ID:%d) just unlocked Cop Rank: {FF0000}%s.",PlayerInfo[playerid][Name],playerid,CONamesCop[COPlayerInfo[playerid][PoliceRank]]);
			SendMessageToMode(CO,red1, string);
			format(string, sizeof(string), "[The Coppers] %s(ID:%d) just unlocked Cop Rank: %s.",PlayerInfo[playerid][Name],playerid,CONamesCop[COPlayerInfo[playerid][PoliceRank]]);
			db_SaveChat(-1, CO,string);
		}
	}

	//kills
	if (COPlayerInfo[playerid][Kills] >= 80)
	{
	    if(COPlayerInfo[playerid][KillsRank] < 1)
	    {
			COPlayerInfo[playerid][KillsRank] = 1;
			format(string,sizeof(string),"{FF0000}The Coppers:{FFFFFF} %s(ID:%d) just unlocked Kills Rank: {FF0000}%s.",PlayerInfo[playerid][Name],playerid,CONamesKills[COPlayerInfo[playerid][KillsRank]]);
			SendMessageToMode(CO,red1, string);
			format(string, sizeof(string), "[The Coppers] %s(ID:%d) just unlocked Kills Rank: %s.",PlayerInfo[playerid][Name],playerid,CONamesKills[COPlayerInfo[playerid][KillsRank]]);
			db_SaveChat(-1, CO,string);
		}
	}
	if (COPlayerInfo[playerid][Kills] >= 180)
	{
	    if(COPlayerInfo[playerid][KillsRank] < 2)
	    {
			COPlayerInfo[playerid][KillsRank] = 2;
			format(string,sizeof(string),"{FF0000}The Coppers:{FFFFFF} %s(ID:%d) just unlocked Kills Rank: {FF0000}%s.",PlayerInfo[playerid][Name],playerid,CONamesKills[COPlayerInfo[playerid][KillsRank]]);
			SendMessageToMode(CO,red1, string);
			format(string, sizeof(string), "[The Coppers] %s(ID:%d) just unlocked Kills Rank: %s.",PlayerInfo[playerid][Name],playerid,CONamesKills[COPlayerInfo[playerid][KillsRank]]);
			db_SaveChat(-1, CO,string);
		}
	}
	if (COPlayerInfo[playerid][Kills] >= 280)
	{
	    if(COPlayerInfo[playerid][KillsRank] < 3)
	    {
			COPlayerInfo[playerid][KillsRank] = 3;
			format(string,sizeof(string),"{FF0000}The Coppers:{FFFFFF} %s(ID:%d) just unlocked Kills Rank: {FF0000}%s.",PlayerInfo[playerid][Name],playerid,CONamesKills[COPlayerInfo[playerid][KillsRank]]);
			SendMessageToMode(CO,red1, string);
			format(string, sizeof(string), "[The Coppers] %s(ID:%d) just unlocked Kills Rank: %s.",PlayerInfo[playerid][Name],playerid,CONamesKills[COPlayerInfo[playerid][KillsRank]]);
			db_SaveChat(-1, CO,string);
		}
	}
	if (COPlayerInfo[playerid][Kills] >= 580)
	{
	    if(COPlayerInfo[playerid][KillsRank] < 4)
	    {
			COPlayerInfo[playerid][KillsRank] = 4;
			format(string,sizeof(string),"{FF0000}The Coppers:{FFFFFF} %s(ID:%d) just unlocked Kills Rank: {FF0000}%s.",PlayerInfo[playerid][Name],playerid,CONamesKills[COPlayerInfo[playerid][KillsRank]]);
			SendMessageToMode(CO,red1, string);
			format(string, sizeof(string), "[The Coppers] %s(ID:%d) just unlocked Kills Rank: %s.",PlayerInfo[playerid][Name],playerid,CONamesKills[COPlayerInfo[playerid][KillsRank]]);
			db_SaveChat(-1, CO,string);
		}
	}
	if (COPlayerInfo[playerid][Kills] >= 880)
	{
	    if(COPlayerInfo[playerid][KillsRank] < 5)
	    {
			COPlayerInfo[playerid][KillsRank] = 5;
			format(string,sizeof(string),"{FF0000}The Coppers:{FFFFFF} %s(ID:%d) just unlocked Kills Rank: {FF0000}%s.",PlayerInfo[playerid][Name],playerid,CONamesKills[COPlayerInfo[playerid][KillsRank]]);
			SendMessageToMode(CO,red1, string);
			format(string, sizeof(string), "[The Coppers] %s(ID:%d) just unlocked Kills Rank: %s.",PlayerInfo[playerid][Name],playerid,CONamesKills[COPlayerInfo[playerid][KillsRank]]);
			db_SaveChat(-1, CO,string);
		}
	}
	if (COPlayerInfo[playerid][Kills] >= 2000)
	{
	    if(COPlayerInfo[playerid][KillsRank] < 6)
	    {
			COPlayerInfo[playerid][KillsRank] = 6;
			format(string,sizeof(string),"{FF0000}The Coppers:{FFFFFF} %s(ID:%d) just unlocked Kills Rank: {FF0000}%s.",PlayerInfo[playerid][Name],playerid,CONamesKills[COPlayerInfo[playerid][KillsRank]]);
			SendMessageToMode(CO,red1, string);
			format(string, sizeof(string), "[The Coppers] %s(ID:%d) just unlocked Kills Rank: %s.",PlayerInfo[playerid][Name],playerid,CONamesKills[COPlayerInfo[playerid][KillsRank]]);
			db_SaveChat(-1, CO,string);
		}
	}
	//printf("DEBUG CFONTROL UpgradeCORanks 2");
}
forward TakeLandCO(i);
public TakeLandCO(i)
{
	//printf("DEBUG CFONTROL TakeLandCO 1");
	if(PlayerInfo[i][PlayerMode] == CO && CriminalOutJailCountCO(1) > 0 && PlayerInfo[i][ZoneDead] == 0 && COPlayerInfo[i][InJail] == 0 &&
		PlayerInfo[i][Spawned] == 1 && !IsPlayerInAnyVehicle(i) && (GetPlayerVirtualWorld(i) == W_PRISON || GetPlayerVirtualWorld(i) == W_CO)
			 && ((ServerInfo[COBigPrison] == 1 && COInfo[AllGateState] == 0) || ServerInfo[COBigPrison] == 0))
	{
		if(PlayerInfo[i][EnteredZone] == COInfo[AreaID])
		{
	    	new st[128];
		    format(st,128,"{33FF33}NEWS:{FFFFFF} %s has freed the prisoners!",PlayerInfo[i][Name]);
			SendMessageToMode(CO,white,st);
			format(st, sizeof(st), "[NEWS] %s has freed the prisoners!",PlayerInfo[i][Name]);
			db_SaveChat(-1, CO,st);
			GameTextForPlayer(i," ",1000,6);
		    GiveThePlayerMoney(i,1000);
			PlayerInfo[i][EnteredZone] = -1;
			COInfo[BeingReleased]=0;
			COPlayerInfo[i][Releases]++;
			ChangeModeScore(i, 10);
			UpgradeCORanks(i);
			if(ServerInfo[COBigPrison] == 1)COChangeGateState(40, 1);
			forLoop(y, MAX_PLAYERS)
			{
				if(!IsPlayerConnected(y) || IsPlayerNPC(y))continue;
				if(PlayerInfo[y][PlayerMode] == CO && PlayerInfo[y][Spawned] == 1 && (GetPlayerVirtualWorld(y)==W_PRISON || GetPlayerVirtualWorld(y)==W_CO) && COPlayerInfo[y][InJail] == 1)
				{
				    if(ServerInfo[COBigPrison] == 0)
				        SetPlayerPos(y, COCagePlace[COInfo[Map]][4]+random(3),COCagePlace[COInfo[Map]][5]+random(3),COCagePlace[COInfo[Map]][6]);
				    SetPlayerColor(y,0xFF0000AA);//red000
                    SetPlayerTeam(y, CRIMINAL);
					SetHealth(y,99.0);
					PlayerInfo[y][sProtected] = 1;
					COPlayerInfo[y][InJail] = 0;
					GameTextForPlayer(y, "~n~ ~n~ ~n~ ~n~ ~w~Run RUN run!", 3099, 3);
				}
			}
		}
	}
	//printf("DEBUG CFONTROL TakeLandCO 2");
}
forward LowerCOTimer();
public LowerCOTimer()
{
	new bool:pass = (CriminalCountCO() > 0 && CopCountCO() > 0);
	if(pass)
	{
		COInfo[TimeLeft]--;
		if(COInfo[TimeLeft] > 9*60+55)
		{
		    forLoop(y, MAX_PLAYERS)
			{
				if(!IsPlayerConnected(y) || IsPlayerNPC(y))continue;
				if(PlayerInfo[y][PlayerMode] == CO && PlayerInfo[y][Spawned] == 1 && (GetPlayerVirtualWorld(y)==W_PRISON || GetPlayerVirtualWorld(y)==W_CO) && COPlayerInfo[y][InJail] == 1)
				{
					COPlayerInfo[y][InJail] = 0;
					SetPlayerPos(y, 0.0, 0.0, 0.0);
					SpawnPlayerTimer(y, 1000);
				}
			}
		}
		updateCOTexts(pass);
		if(COInfo[TimeLeft] <= 0 && CriminalOutJailCountCO(0) != 0)
		{
			//printf("DEBUG CFONTROL LowerCOTimer 1");
		    forLoop(y, MAX_PLAYERS)
			{
				if(!IsPlayerConnected(y) || IsPlayerNPC(y))continue;
         		if(PlayerInfo[y][PlayerMode] == CO && PlayerInfo[y][Spawned] == 1)
				{
				    PlayerInfo[y][EnteredZone] = -1;
			 		PlayerInfo[y][ZoneDead] = 1;
			 		COPlayerInfo[y][InJail] = 0;
			 		PlayerInfo[y][lCountDown]=-1;
					TogglePlayerControllable(y,false);
					SetPlayerWorldBounds(y, 20000.0000, -20000.0000, 20000.0000, -20000.0000 );
					SetPlayerPos(y, -2618.9778, 1442.3223, 8.4407);
					SetPlayerCameraPos(y, -2609.5032, 1447.3551, 22.3680);
					SetPlayerCameraLookAt(y, -2609.7451, 1448.3304, 22.5931);
		 			GameTextForPlayer(y," ",1000,6);

					if(PlayerInfo[y][pTeam] == COP)
				    {
				        COPlayerInfo[y][RoundsLost]++;
				        COPlayerInfo[y][Score] -=10;
			    		GiveThePlayerMoney(y,-1000);
				    }
				    if(PlayerInfo[y][pTeam] == CRIMINAL)
					{
						COPlayerInfo[y][RoundsWon]++;
            			COPlayerInfo[y][Score] +=10;
			    		GiveThePlayerMoney(y,1000);
					}
					SpawnPlayerTimer(y, 3000);
					hideCOTexts(y);
				}
			}
			SendMessageToMode(CO,white, "{33FF33}NEWS:{FFFFFF} The criminals have escaped from the Police hands, they are now free!");
			db_SaveChat(-1, CO,"[NEWS] The criminals have escaped from the Police hands, they are now free!");
			COInfo[BeingReleased]=0;
			KillTimer(COInfo[Timer]);
			ChangeMapCO();
			//printf("DEBUG CFONTROL LowerCOTimer 2");
		    return 0;
		}
	    if(CriminalOutJailCountCO(0) == 0)
		{
			//printf("DEBUG CFONTROL LowerCOTimer 1.2 1");
		    forLoop(y, MAX_PLAYERS)
			{
				if(!IsPlayerConnected(y) || IsPlayerNPC(y))continue;
         		if(PlayerInfo[y][PlayerMode] == CO && PlayerInfo[y][Spawned] == 1)
				{
				    PlayerInfo[y][EnteredZone] = -1;
			 		PlayerInfo[y][ZoneDead] = 1;
			 		COPlayerInfo[y][InJail] = 0;
			 		PlayerInfo[y][lCountDown]=-1;
					TogglePlayerControllable(y,false);
					SetPlayerWorldBounds(y, 20000.0000, -20000.0000, 20000.0000, -20000.0000 );
					SetPlayerPos(y, -2618.9778, 1442.3223, 8.4407);
					SetPlayerCameraPos(y, -2609.5032, 1447.3551, 22.3680);
					SetPlayerCameraLookAt(y, -2609.7451, 1448.3304, 22.5931);
		 			GameTextForPlayer(y," ",1000,6);

					if(PlayerInfo[y][pTeam] == CRIMINAL)
				    {
				        COPlayerInfo[y][RoundsLost]++;
				        COPlayerInfo[y][Score] -=10;
			    		GiveThePlayerMoney(y,-1000);
				    }
				    if(PlayerInfo[y][pTeam] == COP)
					{
						COPlayerInfo[y][RoundsWon]++;
            			COPlayerInfo[y][Score] +=10;
			    		GiveThePlayerMoney(y,1000);
					}
                    SpawnPlayerTimer(y, 3000);
					hideCOTexts(y);
				}
			}
			SendMessageToMode(CO,white, "{33FF33}NEWS:{FFFFFF} The criminals have all been put to prison!");
			db_SaveChat(-1, CO,"[NEWS] The criminals have all been put to prison!");
			COInfo[BeingReleased]=0;
			KillTimer(COInfo[Timer]);
			ChangeMapCO();
			//printf("DEBUG CFONTROL LowerCOTimer 1.2 2");
		    return 0;
		}
    }
	updateCOTexts(pass);
	//KillTimer(COInfo[Timer]);
    //COInfo[Timer] = SetTimer("LowerCOTimer", 1000, 0);
    return 1;
}

forward StartLowerCOTimer();
public StartLowerCOTimer()
{
    KillTimer(COInfo[Timer]);
    COInfo[Timer] = SetTimer("LowerCOTimer", 1000, 1);
    return 0;
}

stock CreateTheCOCar(modelid, Float:spawn_x, Float:spawn_y, Float:spawn_z, Float:z_angle, color1, color2, respawn_delay)
{
	//printf("DEBUG CFONTROL CreateTheCOCar 1");
    maxCOvehicles++;
    COInfo[Vehicles][maxCOvehicles]=AddStaticVehicleEx(modelid, Float:spawn_x, Float:spawn_y, Float:spawn_z, Float:z_angle, color1, color2, respawn_delay);
    SetVehicleVirtualWorld(COInfo[Vehicles][maxCOvehicles],W_CO);
    SetVehicleNumberPlate(COInfo[Vehicles][maxCOvehicles], ServerInfo[lPlate]);
	//printf("DEBUG CFONTROL CreateTheCOCar 2");
}

stock ChangeMapCO()
{
	new map;
    COInfo[Map]++;
    if(ModeCount(CO) < 20 && random(10) == 1)map = LV_AIR;
    else map = 0;
	if(COInfo[Map] >= sizeof(COMapNames))COInfo[Map] = map;
	COSettings();
	db_UpdateSettings(CO);
	new str[196];
	format(str, sizeof(str), "[NEWS] The Coppers will face the criminals in %s.",COMapNames[COInfo[Map]]);
	db_SaveChat(-1, CO,str);
	format(str, sizeof str, "{33FF33}NEWS:{FFFFFF} The Coppers will face the criminals in %s.",COMapNames[COInfo[Map]]);
 	SendMessageToMode(CO,COLOR_WHITE, str);
	if ((CriminalCountCO() > CopCountCO() && (CriminalCountCO() - CopCountCO()) >= 2) || (CriminalCountCO() < CopCountCO() && (CopCountCO() - CriminalCountCO()) >= 2))
	{
		SendMessageToMode(CO,COLOR_WHITE, "{FF0000}TEAM BALANCER{FFFFFF} Teams will be balanced in five seconds!");
	    SetTimerEx("BalanceModeTeams", 5000, false, "i", CO);
	}
}

stock CreateCOPrisonGates()
{
	new str[3];
	forLoop(i, MAX_CO_GATES)
	{
		format(str,3,"%d",i+1);
		COInfo[GateState][i] = 0;
		COInfo[Gates][i]=CreateTheDynamicObject(2930, COPrisonGates[i][0], COPrisonGates[i][1], COPrisonGates[i][2] ,0.00, 0.00, 90.00, W_PRISON);
		CreateDynamic3DTextLabel(str,0xFFFFFFAA,COPrisonGates[i][0]+0.5, COPrisonGates[i][1], COPrisonGates[i][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, W_PRISON, -1, -1, 100);
	}
}

forward COArrest(playerid, time);
public COArrest(playerid, time)
{
    if(COPlayerInfo[playerid][Arresting] > -1 && GetPlayerMode(playerid) == CO && GetPlayerMode(COPlayerInfo[playerid][Arresting]) == CO && PlayerInfo[playerid][pTeam] == COP && !COPlayerInfo[COPlayerInfo[playerid][Arresting]][InJail])
	{
	    time --;
	    if(time <= 0)
	    {
	        if(GetDistanceBetweenPlayers(playerid,COPlayerInfo[playerid][Arresting]) > 5)
	        {
	            GameTextForPlayer(playerid, "~n~ ~n~ ~n~ ~n~ ~r~Arrest failed..", 2000, 3);
		        GameTextForPlayer(COPlayerInfo[playerid][Arresting], "~r~Arrest failed..", 2000, 3);
		        COPlayerInfo[COPlayerInfo[playerid][Arresting]][Arresting] = -1;
		        COPlayerInfo[playerid][Arresting] = -1;
				return 0;
	        }
	        //printf("DEBUG CFONTROL COArrest 1");
	        new string[128],pid=COPlayerInfo[playerid][Arresting];
			format(string, sizeof(string), "[NEWS] %s(ID:%d) has been put to jail by %s(ID:%d).",PlayerInfo[pid][Name],pid,PlayerInfo[playerid][Name],playerid);
			db_SaveChat(-1, CO,string);
	        COPlayerInfo[playerid][Arresting] = -1;
	        COPlayerInfo[pid][Arresting] = -1;
	        COPlayerInfo[playerid][Arrests]++;
            COPlayerInfo[pid][InJail]=1;
		    GiveThePlayerMoney(playerid,1000);
		    GiveThePlayerMoney(pid,-500);
			ChangeModeScore(playerid, 10);
			ChangeModeScore(pid, -10);
            A_SpawnPlayer(pid);
			UpgradeCORanks(playerid);
			format(string, sizeof(string), "~w~%s (~r~arrested~w~) %s",FixpInfoName(playerid),FixpInfoName(pid));
			UpdatepInfo(CO,string);
	        //printf("DEBUG CFONTROL COArrest 2");
			return 0;
	    }
	    else
	    {
	        if(GetDistanceBetweenPlayers(playerid,COPlayerInfo[playerid][Arresting]) > 7)
	        {
	            GameTextForPlayer(playerid, "~n~ ~n~ ~n~ ~n~ ~r~Arrest failed..", 2000, 3);
		        GameTextForPlayer(COPlayerInfo[playerid][Arresting], "~n~ ~n~ ~n~ ~n~ ~r~Arrest failed..", 2000, 3);
		        COPlayerInfo[COPlayerInfo[playerid][Arresting]][Arresting] = -1;
		        COPlayerInfo[playerid][Arresting] = -1;
				return 0;
	        }
			new text[40];
			format(text,sizeof(text),"~n~~r~Arresting  ~n~ ~n~~w~%d",time);
			GameTextForPlayer(playerid, text,2000,3);
	        GameTextForPlayer(COPlayerInfo[playerid][Arresting], text, 2000, 3);
			KillTimer(COPlayerInfo[playerid][aTimer]);
	        COPlayerInfo[playerid][aTimer] = SetTimerEx("COArrest",900,0,"dd",playerid, time);
	    }
	}
	return 0;
}



CMD:pgates(playerid,params[])
{
	if(ServerInfo[COBigPrison] == 0)return 0;
    if(PlayerInfo[playerid][PlayerMode] != CO)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be in the CO mode to use this command.");
	if(PlayerInfo[playerid][Spawned] == 0)return SendClientMessage(playerid,blue,"{FF0000}Error:{FFFFFF} You cannot use this comamnd now");
    if(PlayerInfo[playerid][pTeam] != COP)return SendClientMessage(playerid,red1, "{FF0000}Error:{FFFFFF} You must be a COP.");
	if(!IsPlayerInDynamicArea(playerid, COInfo[AreaID]))return SendClientMessage(playerid,red1,"{FF0000}Error:{FFFFFF} You must be close to the gate controller.");
    new gate[3], gateid, gatestate;
 	sscanf(params, "s[3]", gate);
 	if(!strlen(gate))
 	{
	    new string[128];
 	    gatestate = COChangeGateState(40, 2);
		if(gatestate == 3)format(string,128,"NEWS:{FFFFFF} Policeman, %s(ID:%d), has opened all the prison gates.",PlayerInfo[playerid][Name],playerid);
		else if(gatestate == 4)format(string,128,"NEWS:{FFFFFF} Policeman, %s(ID:%d), has closed all the prison gates.",PlayerInfo[playerid][Name],playerid);
		SendMessageToMode(CO,green1,string);
	    SendClientMessage(playerid,red1,"{33FF33}Info:{FFFFFF} You can also use /pgates <id>.");
 	}
 	else
 	{
	 	if(!IsNumericForID(gate))return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /pgates <id>  (ids: 1-40)");
	 	gateid = strval(gate);
	 	if(gateid < 1 || gateid > 41)return SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} Gate ids are between 1 and 40! (1-40)");
	 	new string[128];
	    gatestate = COChangeGateState(gateid-1, 2);
		if(gatestate == 1)format(string,128,"NEWS:{FFFFFF} Policeman, %s(ID:%d), has opened prison gate id: %d.",PlayerInfo[playerid][Name],playerid, gateid);
 		else if(gatestate == 2)format(string,128,"NEWS:{FFFFFF} Policeman, %s(ID:%d), has closed prison gate id: %d.",PlayerInfo[playerid][Name],playerid, gateid);
 		SendMessageToMode(CO,green1,string);
	}
	return 1;
}

stock COChangeGateState(gateid, gatestate)
{
    //printf("DEBUG CFONTROL COChangeGateState 1");
    if(gatestate == 0)//closing all gates
    {
        COInfo[AllGateState] = 0;
        forLoop(i, MAX_CO_GATES)
		{
	        COInfo[GateState][i] = 0;
			MoveDynamicObject(COInfo[Gates][i],COPrisonGates[i][0], COPrisonGates[i][1], COPrisonGates[i][2],1);
		}
    }
    else if(gatestate == 1)//open all gates
    {
        COInfo[AllGateState] = 1;
        forLoop(i, MAX_CO_GATES)
		{
	        COInfo[GateState][i] = 1;
			MoveDynamicObject(COInfo[Gates][i],COPrisonGates[i][0]+1.6, COPrisonGates[i][1], COPrisonGates[i][2],1);
		}
    }
    else
    {
        if(gateid < 40 && gateid >= 0)
		{
		    if(COInfo[GateState][gateid] == 0)
		    {
	            MoveDynamicObject(COInfo[Gates][gateid],COPrisonGates[gateid][0]+1.6, COPrisonGates[gateid][1], COPrisonGates[gateid][2],1);
				COInfo[GateState][gateid] = 1;
				return 1;
			}
			else
		    {
	            MoveDynamicObject(COInfo[Gates][gateid],COPrisonGates[gateid][0], COPrisonGates[gateid][1], COPrisonGates[gateid][2],1);
				COInfo[GateState][gateid] = 0;
				return 2;
			}
		}
		else
		{
	        if(COInfo[AllGateState] == 0)
		    {
		        COInfo[AllGateState] = 1;
	            forLoop(i, MAX_CO_GATES)
				{
			        COInfo[GateState][i] = 1;
					MoveDynamicObject(COInfo[Gates][i],COPrisonGates[i][0]+1.6, COPrisonGates[i][1], COPrisonGates[i][2],1);
				}
				forLoop(playerid, MAX_PLAYERS)
				{
					if(IsPlayerConnected(playerid) && !IsPlayerNPC(playerid))
					{
      					if(PlayerInfo[playerid][PlayerMode] == CO && COPlayerInfo[playerid][InJail] == 0 && PlayerInfo[playerid][Spawned] == 1 && !IsPlayerInAnyVehicle(playerid))
						{
						    if(PlayerInfo[playerid][EnteredZone] == COInfo[AreaID])
						    {
						        PlayerInfo[playerid][EnteredZone] = -1;
						 		COInfo[BeingReleased]=0;
					 			GameTextForPlayer(playerid," ",900,6);
						 		new str[126];
					        	format(str,126,"{33FF33}NEWS:{FFFFFF} %s failed to release the prisoners!",PlayerInfo[playerid][Name]);
					        	SendMessageToMode(CO,white, str);
								format(str, sizeof(str), "[NEWS] %s failed to release the prisoners!",PlayerInfo[playerid][Name]);
								db_SaveChat(-1, CO,str);
								PlayerInfo[playerid][lCountDown]=-1;
								break;
						    }
						}
					}
				}
				return 3;
			}
			else
		    {
	            COInfo[AllGateState] = 0;
	            forLoop(i, MAX_CO_GATES)
				{
			        COInfo[GateState][i] = 0;
					MoveDynamicObject(COInfo[Gates][i],COPrisonGates[i][0], COPrisonGates[i][1], COPrisonGates[i][2],1);
				}
				return 4;
			}
		}
    }
    //printf("DEBUG CFONTROL COChangeGateState 2");
    return 0;
}

stock COEnterExitPrison(playerid)
{
    //printf("DEBUG CFONTROL COEnterExitPrison 1");
	if(!IsPlayerInAnyVehicle(playerid) && PlayerInfo[playerid][Spawned] == 1 && ServerInfo[COBigPrison] == 1)
	{
		if(IsPlayerInRangeOfPoint(playerid, 3, COGetOut[COInfo[Map]][0],COGetOut[COInfo[Map]][1],COGetOut[COInfo[Map]][2]) && GetPlayerVirtualWorld(playerid) == W_CO)//player enters
		{
		    SetPlayerWorldBounds(playerid, 20000.0000, -20000.0000, 20000.0000, -20000.0000 );
			new rand=random(sizeof(COGetIn));
			if(PlayerInfo[playerid][pTeam] == COP)rand = 0;
			SetPlayerPosEx(playerid,COGetIn[rand][0],COGetIn[rand][1],COGetIn[rand][2],COGetIn[rand][3]);
			SetPlayerVirtualWorld(playerid, W_PRISON);
			SetPlayerInterior(playerid, 1);
			FreezeBeforeObjects(playerid);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 3, COGetIn[0][0],COGetIn[0][1],COGetIn[0][2]) && GetPlayerVirtualWorld(playerid) == W_PRISON)//player exits
		{
			SetPlayerWorldBounds(playerid,MapBoundsCO[COInfo[Map]][1],MapBoundsCO[COInfo[Map]][2],MapBoundsCO[COInfo[Map]][3],MapBoundsCO[COInfo[Map]][4]);
			SetPlayerPosEx(playerid,COGetOut[COInfo[Map]][0],COGetOut[COInfo[Map]][1],COGetOut[COInfo[Map]][2],COGetOut[COInfo[Map]][3]);
			SetPlayerVirtualWorld(playerid, W_CO);
			SetPlayerInterior(playerid, 0);
		}
	}
	//printf("DEBUG CFONTROL COEnterExitPrison 2");
}

stock COSpawnPlayerInPrison(playerid)
{
	if(ServerInfo[COBigPrison] == 1)
	{
	    new rand=random(sizeof(COPrisonSpawns));
	    SetPlayerWorldBounds(playerid, 20000.0000, -20000.0000, 20000.0000, -20000.0000 );
		SetPlayerPosEx(playerid,COPrisonSpawns[rand][0],COPrisonSpawns[rand][1],COPrisonSpawns[rand][2], random(360));
		SetPlayerVirtualWorld(playerid, W_PRISON);
		SetPlayerInterior(playerid, 1);
	}
	else
	{
	    GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~w~ WAIT FOR ~r~CRIMINALS ~w~TO SAVE YOU", 5000, 3);
		SetPlayerPos(playerid,COCagePlace[COInfo[Map]][1],COCagePlace[COInfo[Map]][2],COCagePlace[COInfo[Map]][3]);
		SetCameraBehindPlayer(playerid);
	}
	COPlayerInfo[playerid][InJail] = 1;
	SetPlayerColor(playerid,0xFFFF0055);//yellow
	FreezeBeforeObjects(playerid, false);
}
forward COGateState(gateid, gatestate);
public COGateState(gateid, gatestate)
{
	//printf("DEBUG CFONTROL COGateState 1");
    COInfo[GateState][gateid] = gatestate;
	//printf("DEBUG CFONTROL COGateState 2");
}

stock LoadCOPrison()
{
    if(ServerInfo[COBigPrison] == 1 && COInfo[PrisonLoaded] == 0)
	{
	    COInfo[PrisonLoaded] = 1;
		COInfo[pGetIn] = CreateDynamicPickup(1273, 23, COGetIn[0][0],COGetIn[0][1],COGetIn[0][2],W_PRISON);//get in pickup in prison
		COInfo[prisonHP] = CreateDynamicPickup(1240, 2, -518.5702, -209.6488, 1015.8322,W_PRISON);//health
		COInfo[prisonAR] = CreateDynamicPickup(1242, 2, -517.3293, -209.5153, 1015.5468,W_PRISON);//armor
		COInfo[prisonWEAP] = CreateDynamicPickup(1210, 2, -516.0815, -209.5392, 1015.5964, W_PRISON);//refill

		COInfo[aBottomRight] = CreateDynamicCube(-506.1,-211.9964, 1010.85400,-472.35,-208.0, 1013.43201, W_PRISON, -1, -1);
		COInfo[aBottomLeft] = CreateDynamicCube(-507.5306,-234.828, 1010.85400,-472.4533,-230.7532, 1013.43201, W_PRISON, -1, -1);
		COInfo[aUpperLeft] = CreateDynamicCube(-507.5,-234.8132, 1015.01398,-472.12,-231.39, 1017.66998, W_PRISON, -1, -1);
		COInfo[aUpperRight] = CreateDynamicCube(-505.9125,-211.3165, 1015.01398,-472.5236,-208.047, 1017.66998, W_PRISON, -1, -1);

	    //co prison interior
	    CreateCOPrisonGates();
	}
}


stock updateCOTexts(bool:lepass)
{
	new st[20];
	if(lepass)
	{
		format(st, sizeof(st), "%s", TimeConvertTL(COInfo[TimeLeft]));
		TextDrawSetString(COInfo[td_TimeLeft], st);
		format(st, sizeof(st), "%d/%d",CriminalOutJailCountCO(1),CriminalCountCO());
		TextDrawSetString(COInfo[td_JailLeft], st);
	}
	else
	{
		TextDrawSetString(COInfo[td_TimeLeft], "00:00");
		TextDrawSetString(COInfo[td_JailLeft], "0/0");
	}
}

stock hideCOTexts(playerid)
{
    TextDrawHideForPlayer(playerid,COInfo[td_TimeLeft]);
    TextDrawHideForPlayer(playerid,COInfo[td_JailLeft]);
    TextDrawHideForPlayer(playerid,COInfo[td_Jail]);
    TextDrawHideForPlayer(playerid,COInfo[td_Time]);
    forLoop(i, 4)TextDrawHideForPlayer(playerid,COInfo[td_BGs][i]);
}

stock showCOTexts(playerid)
{
    TextDrawShowForPlayer(playerid,COInfo[td_TimeLeft]);
    TextDrawShowForPlayer(playerid,COInfo[td_JailLeft]);
    TextDrawShowForPlayer(playerid,COInfo[td_Jail]);
    TextDrawShowForPlayer(playerid,COInfo[td_Time]);
    forLoop(i, 4)TextDrawShowForPlayer(playerid,COInfo[td_BGs][i]);
}

stock CreateCage(Float:x,Float:y,Float:z)
{
	//printf("DEBUG CFONTROL CreateCage 1");
	z-=1.1;
	COInfo[Cage][0]=CreateTheDynamicObject(980, x-0.133178, y-6.056518, z+2.696439, 0.00000, 0.00000, 0.00000,W_CO);
	COInfo[Cage][1]=CreateTheDynamicObject(980, x-5.861938, y-0.301635, z+2.696439, 0.00000, 0.00000, -90.0000,W_CO);
	COInfo[Cage][2]=CreateTheDynamicObject(980, x+5.623535, y-0.314086, z+2.696439, 0.00000, 0.00000, -90.0000,W_CO);
	COInfo[Cage][3]=CreateTheDynamicObject(980, x-0.141601, y+5.466796, z+2.696439, 0.00000, 0.00000, 0.00000,W_CO);
	COInfo[Cage][4]=CreateTheDynamicObject(14781, x-0.476928, y-0.298217, z+0.492799, 0.00000, 0.00000, 0.00000,W_CO);
	COInfo[Cage][5]=CreateTheDynamicObject(1985, x+4.231079, y+4.086791, z+3.410249, 0.00000, 0.00000, 0.00000,W_CO);
	COInfo[Cage][6]=CreateTheDynamicObject(1985, x+4.156372, y-4.547119, z+3.410249, 0.00000, 0.00000, 0.00000,W_CO);
	COInfo[Cage][7]=CreateTheDynamicObject(1985, x-3.805786, y-4.658081, z+3.410249, 0.00000, 0.00000, 0.00000,W_CO);
	COInfo[Cage][8]=CreateTheDynamicObject(1985, x-3.981201, y+4.160278, z+3.410249, 0.00000, 0.00000, 0.00000,W_CO);
	COInfo[Cage][9]=CreateTheDynamicObject(980, x-0.093261, y-3.117309, z+5.441180, 90.00000, 0.00000, 0.00000,W_CO);
	COInfo[Cage][10]=CreateTheDynamicObject(980, x-0.031005, y+2.582763, z+5.441180, 90.00000, 0.00000, 0.00000,W_CO);
	
	//printf("DEBUG CFONTROL CreateCage 2");
}

stock COSettings()
{
	//printf("DEBUG CFONTROL COSettings 1");
    maxCOvehicles=-1;
    updateCOTexts(false);
    //TextDrawSetString(COInfo[TimeLeftTD], " ");
	KillTimer(COInfo[Timer]);
	COInfo[Timer] = SetTimer("StartLowerCOTimer", 4000, 0);
	COInfo[TimeLeft] = 60*11;
	forLoop(id, MAX_CO_VEHICLES)
    {
    	if(COInfo[Vehicles][id] != -1)DestroyVehicle(COInfo[Vehicles][id]);
    	COInfo[Vehicles][id] = -1;
    }
	forLoop(id, MAX_CO_CAGE_OBJ)
    {
    	if(COInfo[Cage][id] != -1)DestroyTheDynamicObject(COInfo[Cage][id]);
    	COInfo[Cage][id] = -1;
    }
    DestroyTheDynamicPickup(COInfo[pHP]);
    DestroyTheDynamicPickup(COInfo[pArmor]);
    DestroyTheDynamicPickup(COInfo[pRefillCop]);
    //DestroyTheDynamicPickup(COInfo[WeapShop]);
    DestroyTheDynamicPickup(COInfo[pJailRelease]);
    DestroyTheDynamicPickup(COInfo[pRefillCriminal]);
    DestroyTheDynamicArea(COInfo[AreaID]);
    COInfo[AreaID] = -1123;

    if(ServerInfo[COBigPrison] == 1)
	{
    	COChangeGateState(40, 0); //closing all doors
	    DestroyTheDynamicPickup(COInfo[pGetOut]);
    	COInfo[AreaID] = CreateDynamicSphere(-472.8834,-221.1064,1011.8599, 3.0, W_PRISON, -1, -1);
		COInfo[pJailRelease] = CreateDynamicPickup(1254, 23, -472.8834,-221.1064,1011.8599,W_PRISON);
	    COInfo[pGetOut] = CreateDynamicPickup(1273, 23, COGetOut[COInfo[Map]][0],COGetOut[COInfo[Map]][1],COGetOut[COInfo[Map]][2],W_CO);//health
	}
	else
	{
	    COInfo[pJailRelease] = CreateDynamicPickup(1254, 23, COCagePlace[COInfo[Map]][4],COCagePlace[COInfo[Map]][5],COCagePlace[COInfo[Map]][6],W_CO);
    	COInfo[AreaID] = CreateDynamicSphere(COCagePlace[COInfo[Map]][4],COCagePlace[COInfo[Map]][5],COCagePlace[COInfo[Map]][6], 3.0, W_CO, -1, -1);
    	CreateCage(COCagePlace[COInfo[Map]][1],COCagePlace[COInfo[Map]][2],COCagePlace[COInfo[Map]][3]);
	}
	COInfo[pHP] = CreateDynamicPickup(1240, 2, COHPPlace[COInfo[Map]][0],COHPPlace[COInfo[Map]][1],COHPPlace[COInfo[Map]][2],W_CO);//health
	COInfo[pArmor] = CreateDynamicPickup(1242, 2, COArmorPlace[COInfo[Map]][0],COArmorPlace[COInfo[Map]][1],COArmorPlace[COInfo[Map]][2],W_CO);//armor
	COInfo[pRefillCop] = CreateDynamicPickup(1210, 2, CORefillsCopPlace[COInfo[Map]][0],CORefillsCopPlace[COInfo[Map]][1],CORefillsCopPlace[COInfo[Map]][2], W_CO);//refill police
	COInfo[pRefillCriminal] = CreateDynamicPickup(1210, 2, CORefillsCriminalPlace[COInfo[Map]][0],CORefillsCriminalPlace[COInfo[Map]][1],CORefillsCriminalPlace[COInfo[Map]][2], W_CO);//refill criminal

    LoadCOPrison();
    if(COInfo[Map]==LV_AIR)
	{
    	CreateTheCOCar(579,1342.3652,1820.0723,10.7537,280.1873,0,0,120); // LV AIR CARS
		CreateTheCOCar(579,1341.9077,1830.8038,10.7519,264.6186,0,0,120); //
		CreateTheCOCar(579,1340.7941,1826.4301,10.7548,269.8707,0,0,120); //
		CreateTheCOCar(579,1340.8273,1839.1750,10.7516,270.0178,0,0,120); //
		CreateTheCOCar(468,1353.0562,1860.8744,10.4876,177.4153,3,3,120); //
		CreateTheCOCar(468,1356.3488,1860.9255,10.4872,177.5739,3,3,120); //
		CreateTheCOCar(467,1382.3002,1859.7345,10.5603,177.9830,0,0,120); //
		CreateTheCOCar(598,1616.9207,1217.4794,10.5550,88.9784,241,1,120); //
		CreateTheCOCar(598,1616.4437,1212.5745,10.5588,92.6393,241,1,120); //
		CreateTheCOCar(598,1616.4828,1207.2153,10.5620,96.2629,241,1,120); //
		CreateTheCOCar(598,1607.8613,1206.4764,10.5613,96.0796,241,1,120); //
		CreateTheCOCar(598,1607.3909,1211.5079,10.5564,89.6120,241,1,120); //
		CreateTheCOCar(490,1557.2992,1207.9843,10.9420,269.2907,0,0,120); //
		CreateTheCOCar(490,1555.9871,1199.2281,10.9400,268.2466,0,0,120); //
		CreateTheCOCar(490,1556.2053,1189.3711,10.9425,262.0243,0,0,120); //
		CreateTheCOCar(523,1617.0210,1159.0078,13.7910,357.2969,16,101,120); //
		CreateTheCOCar(523,1614.0745,1159.4557,13.7904,356.8907,16,101,120); //
	}
    if(COInfo[Map]==SF_AIR)
	{
        CreateTheCOCar(597,-1426.8910,27.5783,5.7716,91.5960,0,1,120); //
		CreateTheCOCar(597,-1426.2170,23.3055,5.7680,88.9367,0,1,120); //
		CreateTheCOCar(597,-1425.2227,20.0700,5.7699,88.9579,0,1,120); //
		CreateTheCOCar(597,-1425.4857,15.2153,5.7719,87.2530,0,1,120); //
		CreateTheCOCar(523,-1424.9329,-4.7526,5.4638,95.0075,148,148,120); //
		CreateTheCOCar(523,-1425.5056,-9.3840,5.5716,90.8720,148,148,120); //
		CreateTheCOCar(489,-1441.8783,-9.3337,6.1412,91.3491,0,0,120); //
		CreateTheCOCar(402,-1352.9858,-216.0130,5.8403,270.0750,1,1,120); //
		CreateTheCOCar(468,-1336.8435,-237.5501,5.6670,111.2179,0,0,120); //
		CreateTheCOCar(468,-1335.3981,-242.0264,5.6685,92.4628,0,0,120); //
		CreateTheCOCar(468,-1335.7897,-240.6018,5.6683,85.4867,0,0,120); //
		CreateTheCOCar(579,-1351.2758,-246.4828,5.9319,0.1378,0,0,120); //
		CreateTheCOCar(579,-1355.6233,-247.6301,5.9321,7.5444,0,0,120); //
		CreateTheCOCar(579,-1359.8259,-247.3559,5.9308,3.6600,0,0,120); //
		CreateTheCOCar(579,-1364.0035,-247.8314,5.9316,0.7358,0,0,120); //
	}
    if(COInfo[Map]==LS_AIR)
	{
	    CreateTheCOCar(596,2061.3728,-2481.6716,13.2582,182.1858,0,1,120); //
		CreateTheCOCar(596,2066.6479,-2480.3347,13.2890,177.5578,0,1,120); //
		CreateTheCOCar(596,2072.6028,-2481.6414,13.2650,177.6961,0,1,120); //
		CreateTheCOCar(523,2090.0256,-2484.3757,13.1169,147.6470,0,1,120); //
		CreateTheCOCar(523,2092.3093,-2485.7517,13.1123,154.3134,0,1,120); //
		CreateTheCOCar(523,2094.5605,-2486.7793,13.1000,145.3026,0,1,120); //
		CreateTheCOCar(490,2107.6045,-2498.8083,13.6710,132.8481,0,0,120); //
		CreateTheCOCar(490,2111.1848,-2502.9800,13.6730,129.3379,0,0,120); //
		CreateTheCOCar(579,1369.7908,-2448.0149,13.3512,270.5086,0,0,120); //
		CreateTheCOCar(579,1368.1140,-2441.8772,13.4872,269.4631,0,0,120); //
		CreateTheCOCar(579,1367.4546,-2437.0024,13.4888,268.6053,0,0,120); //
		CreateTheCOCar(402,1367.6536,-2432.0012,13.3205,270.7375,6,6,120); //
		CreateTheCOCar(402,1367.3400,-2425.4299,13.3865,260.8254,6,6,120); //
		CreateTheCOCar(468,1387.9248,-2407.9590,13.2099,189.4364,3,3,120); //
		CreateTheCOCar(468,1392.2626,-2407.1272,13.2227,181.8347,3,3,120); //
		CreateTheCOCar(468,1395.0510,-2406.4680,13.2230,170.0624,3,3,120); //
		CreateTheCOCar(466,1387.5388,-2486.4927,15.8717,91.4691,0,1,120); //
	}
    if(COInfo[Map]==QUARRY)
	{
	    CreateTheCOCar(598,563.1431,841.8929,-42.0644,8.8965,0,1,120); //
		CreateTheCOCar(598,567.5994,843.5900,-42.2122,4.4152,0,1,120); //
		CreateTheCOCar(598,570.8932,843.9348,-42.2542,4.6287,0,1,120); //
		CreateTheCOCar(598,576.0287,842.7757,-42.3131,1.4600,0,1,120); //
		CreateTheCOCar(598,581.8491,842.6481,-42.5852,2.1681,0,1,120); //
		CreateTheCOCar(489,569.8694,872.9680,-43.4813,176.5883,0,1,120); //
		CreateTheCOCar(489,561.7985,874.4426,-43.3848,347.9320,0,1,120); //
		CreateTheCOCar(490,556.8390,887.8340,-43.1283,269.7783,0,0,120); //
		CreateTheCOCar(490,559.6694,895.1906,-42.9647,276.9367,0,0,120); //
		CreateTheCOCar(406,693.1083,858.1880,-41.3601,63.7948,0,0,120); //
		CreateTheCOCar(579,690.7228,891.9423,-39.2960,98.7012,0,0,120); //
		CreateTheCOCar(579,693.6882,886.1578,-38.9347,97.0043,0,0,120); //
		CreateTheCOCar(579,693.8295,878.4624,-39.5001,107.3858,0,0,120); //
		CreateTheCOCar(402,688.9979,903.3584,-39.6255,116.9127,182,181,120); //
		CreateTheCOCar(402,687.7899,913.6614,-39.7922,111.1065,182,181,120); //
		CreateTheCOCar(402,680.4749,920.7209,-40.9326,105.1442,182,181,120); //
		CreateTheCOCar(402,667.0782,927.8889,-40.8290,149.9064,182,181,120); //
		CreateTheCOCar(424,656.0496,925.9923,-40.3671,123.5084,0,1,120); //
		CreateTheCOCar(424,654.0041,918.2047,-40.7916,186.2091,0,1,120); //
	}
	if(COInfo[Map]==LS)
	{
        CreateTheCOCar(579,783.4474,-1337.0056,13.4727,269.7382,0,0,120); //
		CreateTheCOCar(579,783.2452,-1342.6704,13.4691,270.9240,0,0,120); //
		CreateTheCOCar(579,783.2845,-1347.3804,13.4694,270.9199,0,0,120); //
		CreateTheCOCar(579,783.6614,-1353.8921,13.4714,263.1306,0,0,120); //
		CreateTheCOCar(578,769.0750,-1335.3373,14.1647,358.5136,1,1,120); //
		CreateTheCOCar(466,761.6670,-1334.7366,13.2794,357.7794,0,0,120); //
		//CreateTheCOCar(487,740.5966,-1370.5452,25.8937,176.6169,1,0,120); //
		CreateTheCOCar(523,1544.1885,-1684.2854,5.4617,261.9242,62,25,120); // police cars
		CreateTheCOCar(523,1543.6458,-1680.2814,5.4530,272.0099,28,39,120); //
		CreateTheCOCar(523,1543.6099,-1676.5250,5.4636,275.6559,13,112,120); //
		//CreateTheCOCar(601,1538.4873,-1643.5886,5.6492,2.2772,99,63,120); //
		CreateTheCOCar(427,1528.7615,-1688.2758,6.0224,269.3608,0,1,120); //
		CreateTheCOCar(490,1530.8182,-1645.7538,6.0182,2.0276,0,0,120); //
		CreateTheCOCar(596,1558.5630,-1710.2953,5.6120,0.0715,0,1,120); //
		CreateTheCOCar(596,1570.2195,-1710.6969,5.6119,181.1917,0,1,120); //
		CreateTheCOCar(596,1574.3129,-1710.7325,5.6123,176.9297,0,1,120); //
		CreateTheCOCar(596,1578.8561,-1711.2588,5.6105,180.7036,0,1,120); //
		CreateTheCOCar(596,1583.5037,-1710.6377,5.6104,179.8598,0,1,120); //
		CreateTheCOCar(596,1587.6752,-1709.8765,5.6112,177.6120,0,1,120); //
		CreateTheCOCar(596,1591.1611,-1710.0372,5.6131,180.7332,0,1,120); //
		CreateTheCOCar(596,1595.6560,-1710.8293,5.6123,180.1696,0,1,120); //
		CreateTheCOCar(497,1562.6229,-1613.1489,13.5577,171.7820,0,1,120); //
		CreateTheCOCar(497,1553.3789,-1612.8693,13.5656,185.5569,0,1,120); //
	}
	if(COInfo[Map]==SF)
	{
        //CreateTheCOCar(487,-2755.3237,-251.7705,7.3892,272.0767,0,1,120); // sf sf sf
		CreateTheCOCar(579,-2778.8655,-281.2669,6.9691,178.0461,0,0,120); //
		CreateTheCOCar(580,-2774.0930,-280.7218,6.8369,178.5461,0,0,120); //
		CreateTheCOCar(579,-2763.3040,-281.7839,6.9702,181.2640,0,0,120); //
		CreateTheCOCar(579,-2756.5215,-281.6652,6.9720,180.4754,0,0,120); //
		CreateTheCOCar(579,-2751.5593,-282.5895,6.9780,181.2858,0,0,120); //
		CreateTheCOCar(402,-2744.2114,-281.4248,6.8707,176.5265,24,28,120); //
		CreateTheCOCar(463,-2743.9688,-303.0619,6.5581,227.4509,104,82,120); //
		CreateTheCOCar(492,-2736.8516,-295.6205,6.7922,226.3567,1,0,120); //
		CreateTheCOCar(419,-2739.8079,-299.9616,6.8169,226.5298,4,43,120); //
		CreateTheCOCar(497,-1680.3864,705.3447,30.7909,88.9580,0,1,120); //
		CreateTheCOCar(597,-1572.5359,738.6196,-5.4741,269.3847,86,1,120); //
		CreateTheCOCar(597,-1572.2771,734.7021,-5.4734,272.4518,86,1,120); //
		CreateTheCOCar(597,-1573.0964,730.4796,-5.4745,270.5257,86,1,120); //
		CreateTheCOCar(597,-1573.5704,726.0807,-5.4723,272.4189,86,1,120); //
		CreateTheCOCar(597,-1573.0460,722.5427,-5.4735,271.0988,86,1,120); //
		CreateTheCOCar(597,-1573.7019,718.2177,-5.4721,270.8535,86,1,120); //
		CreateTheCOCar(597,-1573.5277,714.5012,-5.4762,267.5063,86,1,120); //
		CreateTheCOCar(597,-1573.6632,709.6974,-5.4770,270.3217,86,1,120); //
		CreateTheCOCar(597,-1573.3044,706.1212,-5.4744,269.4944,86,1,120); //
		//CreateTheCOCar(601,-1604.3044,693.5042,-5.4835,182.6059,19,94,120); //
		CreateTheCOCar(490,-1599.6304,677.5399,-5.1093,180.6059,0,0,120); //
		CreateTheCOCar(523,-1595.6332,692.5210,-5.6581,356.7903,32,51,120); //
		CreateTheCOCar(523,-1592.4877,692.6998,-5.6823,352.1943,32,51,120); //
		CreateTheCOCar(427,-1620.3224,693.0830,-5.1081,1.8688,0,1,120); //
	}
	if(COInfo[Map]==LV)
	{
        //CreateTheCOCar(487,1047.9607,1316.4972,11.0228,87.0429,0,1,120); // lv lv lv
		CreateTheCOCar(578,1091.0497,1335.5592,11.4448,272.4979,1,1,120); //
		CreateTheCOCar(579,1092.6685,1323.9973,10.7488,269.3306,0,0,120); //
		CreateTheCOCar(579,1093.5472,1317.7332,10.7486,265.2238,0,0,120); //
		CreateTheCOCar(579,1092.9830,1307.9476,10.7531,266.6580,0,0,120); //
		CreateTheCOCar(579,1092.4722,1300.2186,10.7535,266.5440,0,0,120); //
		CreateTheCOCar(402,1092.8746,1275.9696,10.6519,265.5468,1,1,120); //
		CreateTheCOCar(400,1091.8591,1261.4924,10.8998,270.8904,0,0,120); //
		CreateTheCOCar(598,2268.3328,2431.0859,3.0201,359.3367,86,1,120); // cop cars
		CreateTheCOCar(598,2272.9343,2431.6438,3.0212,359.2255,86,1,120); //
		CreateTheCOCar(598,2277.5757,2431.0305,3.0193,359.6294,86,1,120); //
		CreateTheCOCar(598,2286.0996,2430.6948,3.0174,0.5376,86,1,120); //
		CreateTheCOCar(598,2290.3508,2431.7058,3.0198,4.1807,86,1,120); //
		CreateTheCOCar(598,2294.5396,2431.3257,3.0207,0.2862,86,1,120); //
		CreateTheCOCar(598,2298.8604,2431.8618,3.0178,0.6141,86,1,120); //
		CreateTheCOCar(598,2303.7053,2431.5928,3.0202,3.7524,86,1,120); //
		//CreateTheCOCar(601,2241.0049,2442.1621,3.0326,269.5248,106,68,120); //
		CreateTheCOCar(523,2238.4990,2452.2659,2.8434,271.7259,67,39,120); //
		CreateTheCOCar(523,2239.7231,2456.4653,2.8305,97.2768,67,39,120); //
		CreateTheCOCar(490,2240.6699,2471.1458,3.4023,91.4068,0,0,120); //
		CreateTheCOCar(528,2298.4236,2451.2478,3.3172,88.4672,101,89,120); //
	}
	if(COInfo[Map]==FOREST)
	{
        CreateTheCOCar(497,663.7908,-610.1736,16.5226,185.6522,0,1,120); // middle map middle map
		CreateTheCOCar(599,666.3121,-587.8968,16.5262,274.1288,86,1,120); //
		CreateTheCOCar(599,667.3920,-581.6691,16.5272,267.9751,86,1,120); //
		CreateTheCOCar(598,611.4536,-590.6282,16.9744,89.8410,86,1,120); //
		CreateTheCOCar(598,611.4027,-597.0427,16.9783,274.4398,86,1,120); //
		//CreateTheCOCar(601,613.0974,-606.6089,16.9857,275.2400,19,113,120); //
		CreateTheCOCar(523,623.3709,-609.7172,16.6789,171.8065,99,4,120); //
		CreateTheCOCar(599,632.6487,-609.2533,16.5306,0.3119,86,1,120); //
		CreateTheCOCar(598,642.7253,-609.8352,16.0821,176.2269,86,1,120); //
		CreateTheCOCar(598,637.0875,-562.2414,16.0090,179.8116,86,1,120); //
		CreateTheCOCar(598,637.1885,-577.7674,16.0035,181.2852,86,1,120); //
		//CreateTheCOCar(487,1496.4656,4.4277,25.1203,265.6469,0,1,120); //
		CreateTheCOCar(402,1521.2499,5.1449,23.8494,280.1694,29,125,120); //
		CreateTheCOCar(495,1520.4983,0.7831,24.1385,278.2298,98,22,120); //
		CreateTheCOCar(579,1532.8311,31.2109,24.0341,73.8659,0,0,120); //
		CreateTheCOCar(579,1533.3290,23.7139,24.0721,95.9654,0,0,120); //
		CreateTheCOCar(579,1535.1967,16.6716,24.0734,277.1017,0,0,120); //
		CreateTheCOCar(579,1542.1996,7.8107,23.7599,280.2308,0,0,120); //
		CreateTheCOCar(579,1571.3538,13.3718,23.4220,253.7505,0,0,120); //
		CreateTheCOCar(579,1587.6842,20.1528,23.7404,279.8965,0,0,120); //
		CreateTheCOCar(468,1593.4696,29.4589,24.2992,87.0140,77,74,120); //
		CreateTheCOCar(568,1568.0596,30.9539,24.0260,91.6995,12,31,120); //
	}
	if(COInfo[Map]==DESERT)
	{
        CreateTheCOCar(599,-1400.3073,2631.4556,55.9462,270.8273,86,1,120); //
		CreateTheCOCar(599,-1400.1073,2634.5337,55.8964,270.0228,86,1,120); //
		CreateTheCOCar(599,-1399.6445,2637.7742,55.8797,268.5569,86,1,120); //
		CreateTheCOCar(599,-1400.0022,2640.8318,55.8749,269.7555,86,1,120); //
		CreateTheCOCar(523,-1399.5436,2642.9404,55.2533,269.4309,34,48,120); //
		CreateTheCOCar(523,-1400.3291,2644.6819,55.2518,267.2675,34,48,120); //
		CreateTheCOCar(598,-1399.9016,2647.3203,55.4308,269.5234,86,1,120); //
		CreateTheCOCar(598,-1400.2112,2650.4553,55.4313,271.0330,86,1,120); //
		CreateTheCOCar(598,-1400.2415,2653.4624,55.4354,270.2765,86,1,120); //
		CreateTheCOCar(598,-1399.5482,2656.6284,55.4353,270.3734,86,1,120); //
		CreateTheCOCar(598,-1400.4913,2659.4448,55.4342,270.7493,86,1,120); //
		CreateTheCOCar(497,-1431.6105,2640.3047,55.8807,94.1640,0,1,120); //
		//CreateTheCOCar(601,-1443.0957,2626.1838,55.5943,88.1853,58,54,120); //
		CreateTheCOCar(490,-1456.8110,2635.9880,55.9622,80.8673,0,0,120); //
		//CreateTheCOCar(487,-776.0224,1436.7528,14.0098,272.5362,0,1,120); //
		CreateTheCOCar(579,-784.1118,1448.2815,13.8491,352.7232,0,0,120); //
		CreateTheCOCar(579,-794.4999,1449.3818,13.8802,181.2043,0,0,120); //
		CreateTheCOCar(579,-799.3357,1449.3164,13.8652,186.9780,0,0,120); //
		CreateTheCOCar(579,-808.4498,1449.0430,13.8293,6.9636,0,0,120); //
		CreateTheCOCar(579,-822.2762,1450.6570,13.8969,181.9477,0,0,120); //
		CreateTheCOCar(471,-803.9725,1422.8835,13.4285,199.0902,68,108,120); //
		CreateTheCOCar(568,-807.6215,1423.9932,13.8066,175.9736,34,33,120); //
		CreateTheCOCar(402,-818.3145,1425.5538,13.7178,169.3931,57,38,120); //
	}
	//printf("DEBUG CFONTROL COSettings 2");
}
//========================[GK]===========================
forward ChangeMapGK();
public ChangeMapGK()
{
    DestroyGKPicks(0);
	DeleteGKVehicles();
	maxGKvehs = -1;
	
	CreateGKVehicle(425,-168.4646,-71.3692,3.9825,74.8668,0,0); // gk
	CreateGKVehicle(425,-163.8294,-50.0297,3.7472,67.0428,0,0); //
	CreateGKVehicle(425,-157.8864,-35.9796,3.6946,69.2676,0,0); //
	CreateGKVehicle(425,-151.2879,-21.0732,3.7473,72.3299,0,0); //
	CreateGKVehicle(425,-149.1836,-72.2249,3.8394,254.5545,0,0); //
	CreateGKVehicle(425,-141.1749,-57.1623,3.8404,244.1636,0,0); //
	CreateGKVehicle(425,-136.9655,-44.6989,3.8403,248.6856,0,0); //
	CreateGKVehicle(425,-135.2909,-27.7395,4.1336,247.9209,0,0); //
	CreateGKVehicle(425,-127.2309,-12.0431,3.8408,243.1886,0,0); //
	CreateGKVehicle(476,-286.8870,-136.0375,2.9183,335.1100,0,0); //
	CreateGKVehicle(476,-256.2520,-140.9283,3.5661,346.1545,0,0); //
	CreateGKVehicle(476,-215.0259,-152.2947,3.4266,359.6497,0,0); //
	CreateGKVehicle(476,-183.5819,-132.7099,3.8950,19.1378,0,0); //
	CreateGKVehicle(522,-171.9118,-96.9890,2.6803,75.7782,2,1); //
	CreateGKVehicle(522,-170.3420,-93.8813,2.6910,68.6324,64,5); //
	CreateGKVehicle(522,-169.4581,-91.2291,2.6871,67.2462,56,3); //
	CreateGKVehicle(522,-167.7475,-86.9013,2.6873,66.9876,56,3); //
	CreateGKVehicle(522,-166.5306,-84.2994,2.6895,64.0421,56,3); //
	CreateGKVehicle(522,-165.0521,-78.5579,2.6783,70.2286,56,3); //
	CreateGKVehicle(411,-198.3155,-85.7436,2.8443,355.6990,4,1); //
	CreateGKVehicle(411,-205.3053,-86.6956,2.8443,347.4694,4,1); //
	CreateGKVehicle(411,-213.3542,-85.9060,2.8443,348.6737,4,1); //
	CreateGKVehicle(411,-219.5026,-85.0577,2.8443,342.0884,4,1); //
	CreateGKVehicle(511,-278.6266,-43.1911,3.6049,304.8148,4,2); //
	CreateGKVehicle(593,-272.0657,-14.7966,2.4599,293.1787,0,0); //
	CreateGKVehicle(513,-268.8859,2.6157,2.3514,313.5825,241,1); //
	CreateGKVehicle(468,-170.5628,-76.8310,2.7044,65.9596,3,2); //
	CreateGKVehicle(468,-170.9117,-81.1603,2.7858,68.2980,3,2); //
	CreateGKVehicle(468,-172.1575,-86.1486,2.7854,63.5906,3,2); //
	CreateGKVehicle(468,-174.3412,-90.2399,2.7851,66.0478,3,2); //
	CreateGKVehicle(468,-176.1107,-93.8247,2.7857,68.3877,3,2); //

    GKInfo[gX] = -220.0015;
	GKInfo[gY] = 4.6541;
	
    GKInfo[sX] = -117.5612;
	GKInfo[sY] = 53.5065;
	GKInfo[sZ] = 3.1172;
	GKInfo[sA] = 50.1590;

	GKCreateCase(-204.4581,-32.0017,3.1172);
    CreateGKPicks(0,GKInfo[gX],GKInfo[gY]);
    GKInfo[MapState] = 0;
   	GKInfo[TimeLeft] = GK_MAP_TIME+3;//spawning the

	KillTimer(GKInfo[Timer]);
    GKInfo[Timer] = SetTimer("StartLowerGKTimer", 3000, 0);
    return 1;
}
forward LowerGKTimer();
public LowerGKTimer()
{
	if(ModeCount(GK) >= GK_MIN_PLAYERS)
	{
		GKInfo[TimeLeft]--;
	    if(GKInfo[TimeLeft] > GK_MAP_TIME && GKInfo[TimeLeft] <= GK_MAP_TIME+3)
		{
		    new str[10];
		    format(str, sizeof str,"%d",(GK_MAP_TIME+3) - GKInfo[TimeLeft]);
		    GameTextForMode(GK, str, 1000, 3);
		}
		else if(GKInfo[TimeLeft] == GK_MAP_TIME)
		{
		    GKInfo[MapState] = 1;
		    forLoop(y, MAX_PLAYERS)
			{
				if(!IsPlayerConnected(y) || IsPlayerNPC(y))continue;
         		if(PlayerInfo[y][PlayerMode] == GK && PlayerInfo[y][Spawned] == 1)
				{
					TogglePlayerControllable(y, true);
					GameTextForPlayer(y,"~b~GO GO GO~ w~!",2000,3);
				}
			}
		}
	    else
	    {
			forLoop(y, MAX_PLAYERS)
			{
				if(!IsPlayerConnected(y) || IsPlayerNPC(y))continue;
	     		if(PlayerInfo[y][PlayerMode] == GK && PlayerInfo[y][Spawned] == 1)
				{
					if(GKPlayerInfo[y][Holding] == 1)
				    {
				        GKPlayerInfo[y][CaseTime]++;
						updateGKpTime(y);
				        break;
				    }
				}
			}
			new hID = -1, hTime = 0;
			forLoop(y, MAX_PLAYERS)
			{
				if(!IsPlayerConnected(y) || IsPlayerNPC(y))continue;
         		if(PlayerInfo[y][PlayerMode] == GK && PlayerInfo[y][Spawned] == 1)
				{
					if(GKPlayerInfo[y][CaseTime] > hTime)
				    {
				        hID = y;
				        hTime = GKPlayerInfo[y][CaseTime];
				    }
				}
			}
		    updateGKTexts(true, hID);
	    }
		if(GKInfo[TimeLeft] <= 0)
		{
		    new hID = -1, hTime = 0;
			forLoop(y, MAX_PLAYERS)
			{
				if(!IsPlayerConnected(y) || IsPlayerNPC(y))continue;
         		if(PlayerInfo[y][PlayerMode] == GK && PlayerInfo[y][Spawned] == 1)
				{
				    SetPlayerWorldBounds(y, 20000.0000, -20000.0000, 20000.0000, -20000.0000);
					SetPlayerCameraPos(y, -2609.5032, 1447.3551, 22.3680);
					SetPlayerCameraLookAt(y, -2609.7451, 1448.3304, 22.5931);
		 			GameTextForPlayer(y," ",1000,6);
					TogglePlayerControllable(y,false);
		 			SetHealth(y,99.0);
					hideGKTexts(y);
					if(GKPlayerInfo[y][CaseTime] > hTime)
				    {
				        hID = y;
				        hTime = GKPlayerInfo[y][CaseTime];
				    }
				    GKPlayerInfo[y][CaseTime] = 0;
					if(GetPlayerState(y) != PLAYER_STATE_WASTED)
					{
						SetPlayerPos(y, -2618.9778, 1442.3223, 8.4407);
						SpawnPlayerTimer(y, 2000);
					}
				}
			}
			if(hID != -1)
			{
			    new str[128];
			    format(str, sizeof str,"{33FF33}NEWS:{FFFFFF} %s has won this round with a time of %s!",PlayerInfo[hID][Name], TimeConvertTL(hTime));
				SendMessageToMode(GK,white, str);
			    format(str, sizeof str,"[NEWS] %s has won this round with a time of %s!",PlayerInfo[hID][Name], TimeConvertTL(hTime));
				db_SaveChat(-1,GK,str);
				GKPlayerInfo[hID][RoundsWon]++;
    			GKPlayerInfo[hID][Score] +=10;
	    		GiveThePlayerMoney(hID,3000);
			}
			else
			{
				SendMessageToMode(GK,white, "{33FF33}NEWS:{FFFFFF} No one is the winner!");
				db_SaveChat(-1, GK,"[NEWS] No one is the winner!");
			}
    		GKInfo[MapState] = 0;
			KillTimer(GKInfo[Timer]);
			ChangeMapGK();
		    return 0;
		}
    }
	else updateGKTexts(false, -1);
	//KillTimer(GKInfo[Timer]);
    //GKInfo[Timer] = SetTimer("LowerGKTimer", 1000, 0);
    return 1;
}

forward StartLowerGKTimer();
public StartLowerGKTimer()
{
    KillTimer(GKInfo[Timer]);
    GKInfo[Timer] = SetTimer("LowerGKTimer", 1000, 1);
    return 0;
}

stock updateGKpTime(player)
{
	new st[10];
	format(st, sizeof(st), "%s", TimeConvertTL(GKPlayerInfo[player][CaseTime]));
	PlayerTextDrawSetString(player, GKPlayerInfo[player][pTime], st);
}
stock updateGKTexts(bool:mapel, player)
{
	if(mapel && GKInfo[MapState] == 1)
	{
		new st[50];
        if(player != -1)
        {
			format(st, sizeof(st), "%s", FixpInfoName(player));
			TextDrawSetString(GKInfo[td_pWin], st);
			
			format(st, sizeof(st), "%s", TimeConvertTL(GKPlayerInfo[player][CaseTime]));
			TextDrawSetString(GKInfo[td_pTime], st);
		}
		else
		{
			TextDrawSetString(GKInfo[td_pWin], "-");
			TextDrawSetString(GKInfo[td_pTime], "00:00");
		}
		format(st, sizeof(st), "%s", TimeConvertTL(GKInfo[TimeLeft]));
		TextDrawSetString(GKInfo[td_mTime], st);
	}
	/*else
	{
		TextDrawSetString(GKInfo[td_pWin], "-");
		TextDrawSetString(GKInfo[td_pTime], "00:00");
		TextDrawSetString(GKInfo[td_mTime], "00:00");
	}*/
	return 1;
}
stock showGKTexts(playerid)
{
 	TextDrawShowForPlayer(playerid,GKInfo[td_pW]);
 	TextDrawShowForPlayer(playerid,GKInfo[td_pWin]);
 	TextDrawShowForPlayer(playerid,GKInfo[td_pT]);
 	TextDrawShowForPlayer(playerid,GKInfo[td_pTime]);
 	TextDrawShowForPlayer(playerid,GKInfo[td_yT]);
 	TextDrawShowForPlayer(playerid,GKInfo[td_mT]);
 	TextDrawShowForPlayer(playerid,GKInfo[td_BG][0]);
 	TextDrawShowForPlayer(playerid,GKInfo[td_BG][1]);
 	TextDrawShowForPlayer(playerid,GKInfo[td_mTime]);
	PlayerTextDrawShow(playerid,GKPlayerInfo[playerid][pTime]);
	updateGKpTime(playerid);
}

stock hideGKTexts(playerid)
{
 	TextDrawHideForPlayer(playerid,GKInfo[td_pW]);
 	TextDrawHideForPlayer(playerid,GKInfo[td_pWin]);
 	TextDrawHideForPlayer(playerid,GKInfo[td_pT]);
 	TextDrawHideForPlayer(playerid,GKInfo[td_pTime]);
 	TextDrawHideForPlayer(playerid,GKInfo[td_yT]);
 	TextDrawHideForPlayer(playerid,GKInfo[td_mT]);
 	TextDrawHideForPlayer(playerid,GKInfo[td_BG][0]);
 	TextDrawHideForPlayer(playerid,GKInfo[td_BG][1]);
 	TextDrawHideForPlayer(playerid,GKInfo[td_mTime]);
	PlayerTextDrawHide(playerid,GKPlayerInfo[playerid][pTime]);
}


stock GKCreateCase(Float:x,Float:y,Float:z)
{
    GKInfo[cX] = x;
	GKInfo[cY] = y;
	GKInfo[cZ] = z;
    GKInfo[CaseState] = 1;
	DestroyTheDynamicPickup(GKInfo[PickUp]);
	GKInfo[PickUp]=CreateDynamicPickup(1550, 1,x,y,z,W_GK);
	forLoop(i, MAX_PLAYERS)
	{
		if(!IsPlayerConnected(i) || IsPlayerNPC(i))continue;
 		if(PlayerInfo[i][PlayerMode] == GK && PlayerInfo[i][Spawned] == 1)
		{
		    RemovePlayerMapIcon(i, 0);
			SetPlayerMapIcon(i,0,x,y,z,23,1,1);
			RemovePlayerAttachedObjectEx(i, 1);
			GKPlayerInfo[i][Holding] = 0;
		}
	}
}

stock GKDropCase(playerid)
{
    if(GKPlayerInfo[playerid][Holding] == 1 && GKInfo[MapState] == 1)
    {
	    new str[128], Float:x, Float:y, Float:z;
		GetPlayerPos(playerid,x,y,z);
		GKCreateCase(x,y,z);
		RemovePlayerAttachedObjectEx(playerid, 1);

	    format(str, sizeof str,"{33FF33}NEWS:{FFFFFF} %s has dropped the bag, holding time %s!",PlayerInfo[playerid][Name], TimeConvertTL(GKPlayerInfo[playerid][CaseTime]));
		SendMessageToMode(GK,white, str);
	    format(str, sizeof str,"[NEWS] %s has dropped the bag, holding time %s!",PlayerInfo[playerid][Name], TimeConvertTL(GKPlayerInfo[playerid][CaseTime]));
		db_SaveChat(-1,GK,str);
		GKPlayerInfo[playerid][Holding] = 0;
	}
}
stock GKPickUpCase(playerid)
{
	if(GKPlayerInfo[playerid][Holding] == 0)
	{
    	GKInfo[CaseState] = 0;
	    GKPlayerInfo[playerid][Holding] = 1;
		DestroyTheDynamicPickup(GKInfo[PickUp]);
        SetPlayerAttachedObjectEx(playerid, 1, 1550, 1, 0.025998, -0.203997, 0.000000, 178.000076, 121.799972, -0.499997, 1.000000, 1.000000, 1.000000);
		forLoop(y, MAX_PLAYERS)
		{
			if(!IsPlayerConnected(y) || IsPlayerNPC(y))continue;
	 		if(PlayerInfo[y][PlayerMode] == GK && PlayerInfo[y][Spawned] == 1)
			{
			    RemovePlayerMapIcon(y, 0);
			}
		}
	 	
	 	GKInfo[PickUp] = -1;
	 	
        new str[128];
	    format(str, sizeof str,"{33FF33}NEWS:{FFFFFF} %s picked up the bag, holding time %s!",PlayerInfo[playerid][Name], TimeConvertTL(GKPlayerInfo[playerid][CaseTime]));
		SendMessageToMode(GK,white, str);
	    format(str, sizeof str,"[NEWS] %s picked up the bag, holding time %s!",PlayerInfo[playerid][Name], TimeConvertTL(GKPlayerInfo[playerid][CaseTime]));
		db_SaveChat(-1,GK,str);
 	}
}
stock CreateGKVehicle(model,Float:x,Float:y,Float:z,Float:r,col1,col2)
{
	if(maxGKvehs >= MAX_GK_VEHICLES)return -1;
    maxGKvehs++;
    GKInfo[Vehicles][maxGKvehs]=AddStaticVehicleEx(model,Float:x,Float:y,Float:z,Float:r,col1,col2,120);
    SetVehicleVirtualWorld(GKInfo[Vehicles][maxGKvehs],W_GK);
    SetVehicleNumberPlate(GKInfo[Vehicles][maxGKvehs], ServerInfo[lPlate]);
    return GKInfo[Vehicles][maxGKvehs];
}

stock DeleteGKVehicles()
{
    forLoop(car, MAX_GK_VEHICLES)
    {
    	if(GKInfo[Vehicles][car] != -1)DestroyVehicle(GKInfo[Vehicles][car]);
    	GKInfo[Vehicles][car]=-1;
    }
}
stock CreateGKPicks(id,Float:x,Float:y)
{
	GKWeaps[id][Golf]=CreateDynamicPickup(333,1,x-6,y+9,GetGroundZ(x-6,y+9)+1,W_GK);
	GKWeaps[id][Knife]=CreateDynamicPickup(335,1,x-6,y-9,GetGroundZ(x-6,y-9)+1,W_GK);
	GKWeaps[id][NiteStick]=CreateDynamicPickup(334,1,x+6,y-9,GetGroundZ(x+6,y-9)+1,W_GK);
	GKWeaps[id][Bat]=CreateDynamicPickup(336,1,x+6,y+9,GetGroundZ(x+6,y+9)+1,W_GK);
	GKWeaps[id][Shovel]=CreateDynamicPickup(337,1,x-9,y-12,GetGroundZ(x-9,y-12)+1,W_GK);
	GKWeaps[id][Pool]=CreateDynamicPickup(338,1,x+9,y+12,GetGroundZ(x+9,y+12)+1,W_GK);
	GKWeaps[id][Katana]=CreateDynamicPickup(339,1,x+9,y-12,GetGroundZ(x+9,y-12)+1,W_GK);
	GKWeaps[id][Chainsaw]=CreateDynamicPickup(341,1,x-9,y+12,GetGroundZ(x-9,y+12)+1,W_GK);
	GKWeaps[id][Dildo]=CreateDynamicPickup(321,1,x-12,y-9,GetGroundZ(x-12,y-9)+1,W_GK);
	GKWeaps[id][Cane]=CreateDynamicPickup(326,1,x-12,y+9,GetGroundZ(x-12,y+9)+1,W_GK);
	GKWeaps[id][Colt]=CreateDynamicPickup(346,1,x+12,y-9,GetGroundZ(x+12,y-9)+1,W_GK);
	GKWeaps[id][Silenced]=CreateDynamicPickup(347,1,x+12,y+9,GetGroundZ(x+12,y+9)+1,W_GK);

	GKWeaps[id][Rocket]=CreateDynamicPickup(359, 1,x+3,y,GetGroundZ(x+3,y)+1,W_GK); // rocket
	GKWeaps[id][Deagle]=CreateDynamicPickup(348,1,x,y+3,GetGroundZ(x,y+3)+1,W_GK); // deagle
	GKWeaps[id][Sniper]=CreateDynamicPickup(358, 1,x+3,y+3,GetGroundZ(x+3,y+3)+1,W_GK); // sniper
	GKWeaps[id][M4]=CreateDynamicPickup(356, 1,x+6,y,GetGroundZ(x+6,y)+1,W_GK); // m4
	GKWeaps[id][Ak]=CreateDynamicPickup(355, 1,x,y+6,GetGroundZ(x,y+6)+1,W_GK); // ak
	GKWeaps[id][Molotov]=CreateDynamicPickup(344,1,x+6,y+6,GetGroundZ(x+6,y+6)+1,W_GK); // molotov
	GKWeaps[id][Mp5]=CreateDynamicPickup(353, 1,x+9,y,GetGroundZ(x+9,y)+1,W_GK); // mp5
	GKWeaps[id][UZI]=CreateDynamicPickup(352, 1,x,y+9,GetGroundZ(x,y+9)+1,W_GK); // uzi
	GKWeaps[id][Tec]=CreateDynamicPickup(372, 1,x+9,y+9,GetGroundZ(x+9,y+9)+1,W_GK); // tec
	GKWeaps[id][Grenade]=CreateDynamicPickup(342, 1,x-3,y,GetGroundZ(x-3,y)+1,W_GK); // grenade
	GKWeaps[id][Shotgun]=CreateDynamicPickup(349, 1,x,y-3,GetGroundZ(x,y-3)+1,W_GK); // shutgun
	GKWeaps[id][Sawed]=CreateDynamicPickup(350, 1,x-3,y-3,GetGroundZ(x-3,y-3)+1,W_GK); // sawedoff
	GKWeaps[id][Spac]=CreateDynamicPickup(351,1,x-6,y,GetGroundZ(x-6,y)+1,W_GK); // spac
	GKWeaps[id][Rifle]=CreateDynamicPickup(357, 1,x,y-6,GetGroundZ(x,y-6)+1,W_GK); // rifle
	GKWeaps[id][gHP]=CreateDynamicPickup(1240, 2,x-9,y-9,GetGroundZ(x-9,y-9)+1,W_GK);//health
	GKWeaps[id][gArmor]=CreateDynamicPickup(1242, 2,x-6,y-6,GetGroundZ(x-6,y-6)+1,W_GK);//armor
}
stock DestroyGKPicks(id)
{
	//printf("DEBUG CFONTROL DestroyGKPicks 1");
	DestroyTheDynamicPickup(GKWeaps[id][Golf]);
	DestroyTheDynamicPickup(GKWeaps[id][Knife]);
	DestroyTheDynamicPickup(GKWeaps[id][NiteStick]);
	DestroyTheDynamicPickup(GKWeaps[id][Bat]);
	DestroyTheDynamicPickup(GKWeaps[id][Shovel]);
	DestroyTheDynamicPickup(GKWeaps[id][Pool]);
	DestroyTheDynamicPickup(GKWeaps[id][Katana]);
	DestroyTheDynamicPickup(GKWeaps[id][Chainsaw]);
	DestroyTheDynamicPickup(GKWeaps[id][Dildo]);
	DestroyTheDynamicPickup(GKWeaps[id][Cane]);
	DestroyTheDynamicPickup(GKWeaps[id][Colt]);
	DestroyTheDynamicPickup(GKWeaps[id][Silenced]);

	DestroyTheDynamicPickup(GKWeaps[id][Rocket]);
	DestroyTheDynamicPickup(GKWeaps[id][Deagle]);
	DestroyTheDynamicPickup(GKWeaps[id][Sniper]);
	DestroyTheDynamicPickup(GKWeaps[id][M4]);
	DestroyTheDynamicPickup(GKWeaps[id][Ak]);
	DestroyTheDynamicPickup(GKWeaps[id][Molotov]);
	DestroyTheDynamicPickup(GKWeaps[id][Mp5]);
	DestroyTheDynamicPickup(GKWeaps[id][UZI]);
	DestroyTheDynamicPickup(GKWeaps[id][Tec]);
	DestroyTheDynamicPickup(GKWeaps[id][Grenade]);
	DestroyTheDynamicPickup(GKWeaps[id][Shotgun]);
	DestroyTheDynamicPickup(GKWeaps[id][Sawed]);
	DestroyTheDynamicPickup(GKWeaps[id][Spac]);
	DestroyTheDynamicPickup(GKWeaps[id][Rifle]);
	DestroyTheDynamicPickup(GKWeaps[id][gHP]);
	DestroyTheDynamicPickup(GKWeaps[id][gArmor]);
	//printf("DEBUG CFONTROL DestroyGKPicks 2");
}
//========================[ZO]===========================
forward ChooseRandomZOZombies();
public ChooseRandomZOZombies()
{
	//printf("DEBUG CFONTROL ChooseRandomZOZombies 1");
    if(ZombieCountZO() > 0 || HumanCountZO() < 2 || HumanCountZO() == 0)return 0;
    new str[128], x = floatround(0.2*HumanCountZO());//find out how many zombies there should be
	if(x == 0)x=1;
	forLoop(i, x)
	{
		new pid=GetZORandomPlayerID();
		if(pid >= 0 && pid < MAX_PLAYERS)
		{
		    PlayerInfo[pid][pTeam] = ZOMBIE;
		    ZOPlayerInfo[pid][Chosen] = 1;
		    format(str, sizeof str,"{33FF33}NEWS:{FFFFFF} %s has been infected!",PlayerInfo[pid][Name]);
			SendMessageToMode(ZO,white, str);
		    format(str, sizeof str,"[NEWS] %s has been infected!",PlayerInfo[pid][Name]);
			db_SaveChat(-1, ZO,str);
			SpawnThePlayers(pid);
		}
	}
	ZOInfo[NoZombieCheck] = 0;
	//printf("DEBUG CFONTROL ChooseRandomZOZombies 2");
	return 1;
}

forward LowerZOTimer();
public LowerZOTimer()
{
	if(ModeCount(ZO) > 1)
	{
	    if(ZOInfo[TimeLeft] == 5000)
		{
			//TextDrawHideForAll(ZOInfo[TimeLeftTD]);
			//TextDrawSetString(ZOInfo[TimeLeftTD], " ");
			KillTimer(ZOInfo[Timer]);
			return 0;
		}
		if(ZOInfo[TimeLeft] == 6000)
		{
			//printf("DEBUG CFONTROL LowerZOTimer 1");
		    new str[128], x = floatround(0.2*HumanCountZO());//find out how many zombies there should be
   			ZOInfo[TimeLeft]=60*ZOInfo[MapTime]-1;
			if(x == 0)x=1;
			forLoop(i, x)
			{
			    new pid=GetZORandomPlayerID();
			    if(pid >= 0 && pid < MAX_PLAYERS)
			    {
				    PlayerInfo[pid][pTeam] = ZOMBIE;
		    		ZOPlayerInfo[pid][Chosen] = 1;
				    format(str, sizeof str,"{33FF33}NEWS:{FFFFFF} %s is one of the first humans to be infected!",PlayerInfo[pid][Name]);
					SendMessageToMode(ZO,white, str);
				    format(str, sizeof str,"[NEWS] %s is one of the first humans to be infected!",PlayerInfo[pid][Name]);
					db_SaveChat(-1, ZO,str);
					SpawnThePlayers(pid);
				}
			}
			//printf("DEBUG CFONTROL LowerZOTimer 2");
		}
		if(ZOInfo[TimeLeft] != 5000 && ZOInfo[TimeLeft] != 6000)
		{
		    updateZOTexts(true);
			ZOInfo[TimeLeft]--;
		    if(ZombieCountZO() == 0 && ZOInfo[NoZombieCheck] == 0)
		    {
		        ZOInfo[NoZombieCheck] = 1;
		        SetTimer("ChooseRandomZOZombies", 4000, 0);
				SendMessageToMode(ZO,white, "{33FF33}NEWS:{FFFFFF} Infection has been spread through the air!");
				db_SaveChat(-1, ZO,"[NEWS] Infection has been spread through the air!");
		    }
		}
		if(ZOInfo[TimeLeft] <= 0 && HumanCountZO() != 0)
		{
			//printf("DEBUG CFONTROL LowerZOTimer 1.1 1");
		    forLoop(y, MAX_PLAYERS)
			{
				if(!IsPlayerConnected(y) || IsPlayerNPC(y))continue;
         		if(PlayerInfo[y][PlayerMode] == ZO && PlayerInfo[y][Spawned] == 1)
				{
					SetPlayerWorldBounds(y, 20000.0000, -20000.0000, 20000.0000, -20000.0000 );
					SetPlayerCameraPos(y, -2609.5032, 1447.3551, 22.3680);
					SetPlayerCameraLookAt(y, -2609.7451, 1448.3304, 22.5931);
		 			GameTextForPlayer(y," ",1000,6);
					TogglePlayerControllable(y,false);
		 			SetHealth(y,99.0);
		 			ZOPlayerInfo[y][Chosen] = 0;
					if(PlayerInfo[y][pTeam] == ZOMBIE)
				    {
				        ZOPlayerInfo[y][RoundsLost]++;
				        ZOPlayerInfo[y][Score] -=10;
			    		GiveThePlayerMoney(y,-1000);
				    }
				    if(PlayerInfo[y][pTeam] == HUMAN)
					{
						ZOPlayerInfo[y][RoundsWon]++;
            			ZOPlayerInfo[y][Score] +=10;
			    		GiveThePlayerMoney(y,3000);
					}
					if(GetPlayerState(y) != PLAYER_STATE_WASTED)
					{
						SetPlayerPos(y, -2618.9778, 1442.3223, 8.4407);
						SpawnPlayerTimer(y, 3000);
					}
					hideZOTexts(y);
				}
			}
			SendMessageToMode(ZO,white, "{33FF33}NEWS:{FFFFFF} The humans have escaped, they are now free!");
			db_SaveChat(-1, ZO,"[NEWS] The humans have escaped, they are now free!");
			KillTimer(ZOInfo[Timer]);
			ChangeMapZO();
			//printf("DEBUG CFONTROL LowerZOTimer 1.1 2");
		    return 0;
		}
	    if(HumanCountZO() == 0)
		{
			//printf("DEBUG CFONTROL LowerZOTimer 1.2 1");
		    forLoop(y, MAX_PLAYERS)
			{
				if(!IsPlayerConnected(y) || IsPlayerNPC(y))continue;
         		if(PlayerInfo[y][PlayerMode] == ZO && PlayerInfo[y][Spawned] == 1)
				{
		 			ZOPlayerInfo[y][Chosen] = 0;
					SetPlayerWorldBounds(y, 20000.0000, -20000.0000, 20000.0000, -20000.0000 );
					SetPlayerCameraPos(y, -2609.5032, 1447.3551, 22.3680);
					SetPlayerCameraLookAt(y, -2609.7451, 1448.3304, 22.5931);
		 			GameTextForPlayer(y," ",1000,6);
		 			SetHealth(y,99.0);
					TogglePlayerControllable(y,false);
					if(GetPlayerState(y) != PLAYER_STATE_WASTED)
					{
						SetPlayerPos(y, -2618.9778, 1442.3223, 8.4407);
						SpawnPlayerTimer(y, 3000);
					}
					hideZOTexts(y);
				}
			}
			SendMessageToMode(ZO,white, "{33FF33}NEWS:{FFFFFF} The humans have failed to save themselves!");
			db_SaveChat(-1, ZO,"[NEWS] The humans have failed to save themselves!");
			KillTimer(ZOInfo[Timer]);
			ZOInfo[TimeLeft] = 5000;
			ChangeMapZO();
			//printf("DEBUG CFONTROL LowerZOTimer 1.2 2");
		    return 0;
		}
    }
	else updateZOTexts(false);
	//KillTimer(ZOInfo[Timer]);
    //ZOInfo[Timer] = SetTimer("LowerZOTimer", 1000, 0);
    return 0;
}

forward StartLowerZOTimer();
public StartLowerZOTimer()
{
    KillTimer(ZOInfo[Timer]);
    ZOInfo[Timer] = SetTimer("LowerZOTimer", 1000, 1);
    return 0;
}

stock updateZOTexts(bool: lepass)
{
	if(lepass)
	{
		new st[20];
		format(st, sizeof(st), "%s", TimeConvertTL(ZOInfo[TimeLeft]));
		TextDrawSetString(ZOInfo[td_Time], st);

		format(st, sizeof(st), "%d",HumanCountZO());
		TextDrawSetString(ZOInfo[td_H], st);
	}
	else
	{
		TextDrawSetString(ZOInfo[td_H], "0");
		TextDrawSetString(ZOInfo[td_Time], "00:00");
	}
}

stock hideZOTexts(playerid)
{
    TextDrawHideForPlayer(playerid,ZOInfo[td_H]);
    TextDrawHideForPlayer(playerid,ZOInfo[td_Time]);
    forLoop(i, 3)TextDrawHideForPlayer(playerid,ZOInfo[td_BGs][i]);
    forLoop(i, 2)TextDrawHideForPlayer(playerid,ZOInfo[td_Ts][i]);
}

stock showZOTexts(playerid)
{
    TextDrawShowForPlayer(playerid,ZOInfo[td_H]);
    TextDrawShowForPlayer(playerid,ZOInfo[td_Time]);
    forLoop(i, 3)TextDrawShowForPlayer(playerid,ZOInfo[td_BGs][i]);
    forLoop(i, 2)TextDrawShowForPlayer(playerid,ZOInfo[td_Ts][i]);
}

forward ChangeMapZO();
public ChangeMapZO()
{
    updateZOTexts(false);
    new Cache: cache_id, d_query[256], maxid, rows, epName[50], epCreator[50], epID, epCID;
	cache_id = mysql_query(ServerInfo[DataBase], "SELECT ID FROM ZO_EPISODES WHERE APPROVED != 0 ORDER BY ID DESC LIMIT 1", true);
	rows = cache_num_rows();
	if(rows == 0)
	{
		printf("ERROR: ZO THERE ARE NO EPISODES");
    	cache_delete(cache_id);
    	return 0;
	}
	cache_get_value_name_int(0, "ID", maxid);
    cache_delete(cache_id);

	forLoop(id, MAX_ZO_OBJECTS)
	{
	    if(ZOInfo[Objects][id] != -1)DestroyTheDynamicObject(ZOInfo[Objects][id]);
    	ZOInfo[Objects][id] = -1;
	}
	ZOInfo[NoZombieCheck] = 0;
    if(++ZOInfo[Map] > maxid)ZOInfo[Map] = 1;//there is no 0
    db_UpdateSettings(ZO);
    
    mysql_format(ServerInfo[DataBase], d_query, sizeof d_query, "SELECT * FROM ZO_EPISODES WHERE ID=%d AND APPROVED != 0 LIMIT 1",ZOInfo[Map]);
	cache_id = mysql_query(ServerInfo[DataBase], d_query, true);
	if(rows == 0)
	{
		printf("ERROR: ZO EPISODE %d ISN'T APPROVED - TRYING AGAIN");
		KillTimer(ZOInfo[Timer]);
    	cache_delete(cache_id);
 		forLoop(y, MAX_PLAYERS)
		{
			if(!IsPlayerConnected(y) || IsPlayerNPC(y))continue;
     		if(PlayerInfo[y][PlayerMode] == ZO && PlayerInfo[y][Spawned] == 1)
			{
	 			ZOPlayerInfo[y][Chosen] = 0;
				SetPlayerWorldBounds(y, 20000.0000, -20000.0000, 20000.0000, -20000.0000 );
				SetPlayerCameraPos(y, -2609.5032, 1447.3551, 22.3680);
				SetPlayerCameraLookAt(y, -2609.7451, 1448.3304, 22.5931);
	 			GameTextForPlayer(y," ",1000,6);
	 			SetHealth(y,99.0);
				TogglePlayerControllable(y,false);
				if(GetPlayerState(y) != PLAYER_STATE_WASTED)
				{
					SetPlayerPos(y, -2618.9778, 1442.3223, 8.4407);
					SpawnPlayerTimer(y, 3000);
				}
				hideZOTexts(y);
			}
		}
		SetTimer("ChangeMapZO", 1000, 0);
        return 0;
	}
	cache_get_value_name_int(0, "ID", epID);
	cache_get_value_name_int(0, "USER_ID",epCID);
	cache_get_value_name(0, "NAME", epName);
	cache_get_value_name_int(0, "WEATHER", ModeWeather[ZO]);
	cache_get_value_name_int(0, "TIME", ModeTime[ZO]);
	cache_get_value_name_int(0, "TIME_LEFT", ZOInfo[MapTime]);
	cache_get_value_name_int(0, "INTERIOR", ZOInfo[Interior]);
	cache_get_value_name_int(0, "FLOOR", ZOInfo[Floor]);
	cache_get_value_name_float(0, "HX", ZOInfo[hX]);
	cache_get_value_name_float(0, "HY", ZOInfo[hY]);
	cache_get_value_name_float(0, "HZ", ZOInfo[hZ]);
	cache_get_value_name_float(0, "ZX", ZOInfo[zX]);
	cache_get_value_name_float(0, "ZY", ZOInfo[zY]);
	cache_get_value_name_float(0, "ZZ", ZOInfo[zZ]);
    cache_delete(cache_id);

	format(epCreator, sizeof epCreator, "%s",db_ReturnUserName(epCID));

	format(d_query, sizeof(d_query), "[NEWS] Episode %s, created by %s, has now started.",epName,epCreator);
	db_SaveChat(-1, ZO,d_query);
	format(d_query, sizeof d_query, "{33FF33}NEWS:{FFFFFF} Episode %s, created by %s, has now started.",epName,epCreator);
 	SendMessageToMode(ZO,COLOR_WHITE, d_query);
 	
 	LoadEpisodeObjects(epID);
	
	//TextDrawSetString(ZOInfo[TimeLeftTD], " ");
	ZOInfo[TimeLeft]=6000;//to chosoe a random zombiee
	KillTimer(ZOInfo[Timer]);
    ZOInfo[Timer] = SetTimer("StartLowerZOTimer", 15000, 0);
    return 1;
}
stock LoadEpisodeObjects(epID)
{
    new Cache: cache_id, d_query[256], rows;
	new loop_breaker, model, Float:ObjX, Float:ObjY, Float:ObjZ, Float:ObjRot1, Float:ObjRot2, Float:ObjRot3;
	
	mysql_format(ServerInfo[DataBase], d_query, sizeof d_query, "SELECT * FROM ZO_OBJECTS WHERE ID=%d LIMIT %d",epID,MAX_ZO_OBJECTS+1);
	cache_id = mysql_query(ServerInfo[DataBase], d_query, true);
	rows = cache_num_rows();
	if(rows == 0)
	{
		printf("ERROR: ZO THERE ARE NO OBJECTS FOR ID %d",epID);
    	cache_delete(cache_id);
    	return 1;
	}
	forLoop(id, rows)
	{
	    if(breakLoop(++loop_breaker, "LoadEpisodeObjects"))break;
	    if(id >= MAX_ZO_OBJECTS)
		{
			printf("ERROR: ZO MAP DIR: OBJECT LIMIT REACHED FOR ID %d",epID);
			break;
		}
		cache_get_value_name_int(id, "MODEL", model);
		cache_get_value_name_float(id, "OBJ_X", ObjX);
		cache_get_value_name_float(id, "OBJ_Y", ObjY);
		cache_get_value_name_float(id, "OBJ_Z", ObjZ);
		cache_get_value_name_float(id, "ROT1", ObjRot1);
		cache_get_value_name_float(id, "ROT2", ObjRot2);
		cache_get_value_name_float(id, "ROT3", ObjRot3);
		ZOInfo[Objects][id]=CreateTheDynamicObject(model, ObjX, ObjY, ObjZ, ObjRot1, ObjRot2, ObjRot3 ,W_ZO);
	}
    cache_delete(cache_id);
	return 1;
}
forward GetZORandomPlayerID();
public GetZORandomPlayerID()
{
	//printf("DEBUG CFONTROL GetZORandomPlayerID 1");
	new op;
	new po[MAX_PLAYERS];
	forLoop(i, MAX_PLAYERS)
	{
		if(!IsPlayerConnected(i) || IsPlayerNPC(i))continue;
		if(PlayerInfo[i][PlayerMode] == ZO && PlayerInfo[i][pTeam] == HUMAN && PlayerInfo[i][Spawned] == 1)
		{
			po[op]=i;
			op++;
		}
	}
	if(op > 0 && op < MAX_PLAYERS)
	{
		//printf("DEBUG CFONTROL GetZORandomPlayerID 1 p %d",po[random(op)]);
		return po[random(op)];
	}
	else return -1;
}

//========================[PJ]=========================
stock SavePJMap()
{
	//printf("DEBUG CFONTROL SavePJMap 1");
	new string2[256], File:fwhnd;
	format(string2, sizeof string2, "/pangea/PJ/%s/Info.txt",PJMAPInfo[pathName]);
	if(ServerInfo[DebugMode] == 1)printf("PJ DEBUG: MAP START SAVING DIR: %s",PJMAPInfo[pathName]);
	if(fexist(string2))
	{
    	fwhnd=fopen(string2,io_write);
		format(string2,sizeof string2,"%s|%s|%d|%d|%d|%s",PJMAPInfo[mName], PJMAPInfo[Author], ModeWeather[PJ], ModeTime[PJ]
			, PJMAPInfo[Rating], PJMAPInfo[sLink]);
		fwrite(fwhnd,string2);
		fwrite(fwhnd,"\r\n");
		fclose(fwhnd);
	}
	format(string2, sizeof string2, "/pangea/PJ/%s/TTs.txt",PJMAPInfo[pathName]);
	if(fexist(string2))
	{
    	fwhnd=fopen(string2,io_write);
    	forLoop(i, MAX_PJ_BEST_LINES)
		{
			format(string2,sizeof string2,"%s|%d|%d|%d"
			,PJBest[i][Name],PJBest[i][bMins],PJBest[i][bSecs],PJBest[i][bMils]);
			fwrite(fwhnd,string2);
			fwrite(fwhnd,"\r\n");
		}
		fclose(fwhnd);
	}
	if(ServerInfo[DebugMode] == 1)printf("PJ DEBUG: MAP STOP SAVING DIR: %s",PJMAPInfo[pathName]);
	//printf("DEBUG CFONTROL SavePJMap 2");
}

stock UpdatePJMaps()
{
    forLoop(i, MAX_PJ_MAPS)
    {
        PJMapsInfo[i][Exists] = 0;
        forLoop(id, PJ_MAX_OBJECTS)
	    {
	        PJMapsInfo[i][oExists][id] = 0;
	    }
	    forLoop(id, MAX_PJ_ITEMS)
	    {
	        PJMapsInfo[i][iExists][id] = 0;
	    }
    }

	new objID, spawnID, lzID, puID;
	
	new objecttype;
	new Float:ObjX;
	new Float:ObjY;
	new Float:ObjZ;
	new Float:ObjRot1;
	new Float:ObjRot2;
	new Float:ObjRot3;
	
	new name[50], File:file_ptr, line[256], id, filename[256], filename2[256], not, not2[2];
    new dir:handle=dir_open("scriptfiles/pangea/PJ/"), fType;
	new	loop_breaker;
	while(dir_list(handle, filename, fType))
	{
		if(breakLoop(++loop_breaker, "UpdatePJMaps"))break;
	    if(fType == 1)
		{
		    if(strlen(filename) > 2 && !(strfind(filename, "DONT USE", true) != -1))
		    {
				format(filename2, sizeof filename2, "/pangea/PJ/%s/Info.txt",filename);
				if(fexist(filename2))
				{
					file_ptr = fopen(filename2, io_read);
					if(file_ptr)
					{
						while(fread(file_ptr,line, sizeof(line)) > 0)
						{
						    sscanf(line,"p<|>s[50]s[50]dddds[50]",name, not2, not, not, not, not, not2);
							break;
						}
						if(id >= MAX_PJ_MAPS)
						{
			    			printf("ERROR: PJ ERROR MAX MAPS REACHED");
						    break;
						}
					}
					fclose(file_ptr);
				}
				else
				{
				    printf("ERROR: PJ DIR: %s HAS NO INFO - LOADING ANOTHER MAP",filename);
					continue;
				}
				
				format(filename2, sizeof filename2, "/pangea/PJ/%s/Objects.txt",filename);
				if(fexist(filename2))
				{
					file_ptr = fopen(filename2, io_read);
				    while(fread(file_ptr,line, sizeof(line)) > 0)
					{
					    if(objID >= PJ_MAX_OBJECTS)
						{
						    printf("ERROR: PJ MAP DIR: %s MAX NUMBER OF OBJECTS REACHED",filename);
							continue;
						}
					    sscanf(line,"p<,>dffffff",objecttype, ObjX, ObjY, ObjZ, ObjRot1, ObjRot2, ObjRot3);
				        if(!IsValidObjectModel(objecttype))
				        {
				            printf("ERROR: PJ MAP DIR: %s INVALID OBJECT MODEL %d",filename,objecttype);
							continue;
				        }
				        PJMapsInfo[id][oExists][objID] = 1;
						PJMapsInfo[id][oModel][objID] = objecttype;
						PJMapsInfo[id][ox][objID] = ObjX;
						PJMapsInfo[id][oy][objID] = ObjY;
						PJMapsInfo[id][oz][objID] = ObjZ;
						PJMapsInfo[id][orx][objID] = ObjRot1;
						PJMapsInfo[id][ory][objID] = ObjRot2;
						PJMapsInfo[id][orz][objID] = ObjRot3;
						objID++;
					}
					fclose(file_ptr);
				}
				format(filename2, sizeof filename2, "/pangea/PJ/%s/Other.txt",filename);
				if(fexist(filename2))
				{
					file_ptr = fopen(filename2, io_read);
					while(fread(file_ptr,line, sizeof(line)) > 0)
					{
					    if(strfind(line, "s=", true) != -1)
						{
						    if(spawnID >= 1)continue;
						    sscanf(line[2],"p<|>ffff",PJMapsInfo[id][sX], PJMapsInfo[id][sY], PJMapsInfo[id][sZ], PJMapsInfo[id][sAng]);
						    spawnID++;
							continue;
						}
						//LowestZ
					    if(strfind(line, "l=", true) != -1)
						{
						    if(lzID >= 1)continue;
						    sscanf(line[2], "f",PJMapsInfo[id][LowestZ]);
							lzID++;
							continue;
						}
					    //pick ups?
					    if(strfind(line, "p=", true) != -1)
						{
						    if(puID >= MAX_PJ_ITEMS)
							{
								printf("ERROR: PJ MAP DIR: %s MAX NUMBER OF PICK UPS REACHED",filename);
								continue;
							}
						    sscanf(line[2],"p<|>dfff",PJMapsInfo[id][iType][puID],
								PJMapsInfo[id][iX][puID], PJMapsInfo[id][iY][puID], PJMapsInfo[id][iZ][puID]);
						    PJMapsInfo[id][iExists][puID] = 1;
							puID++;
							continue;
						}
					}
					fclose(file_ptr);
				}
				if(spawnID == 0)
				{
				    printf("ERROR: PJ MAP DIR: %s HAS NO SPAWNS - LOADING ANOTHER MAP",filename);
					continue;
				}
				if(lzID == 0)
				{
				    printf("ERROR: PJ MAP DIR: %s HAS NO LOW Z - LOADING ANOTHER MAP",filename);
					continue;
				}
				lzID = 0;
				objID = 0;
				spawnID = 0;
				puID = 0;
				PJMapsInfo[id][Exists] = 1;
				format(PJMapsInfo[id][pathName], 50, "%s", filename);
				format(PJMapsInfo[id][mName], 50, "%s", name);
				id++;
			}
		}
	}
	dir_close(handle);
    /*forLoop(i, MAX_PJ_MAPS)
    {
        if(PJMapsInfo[i][Exists] == 1)
        {
            printf("id %d - path %s - name %s", i, PJMapsInfo[i][pathName], PJMapsInfo[i][mName]);
        }
    }*/
}

stock LoadPJMap(id)
{
	new start = GetTickCount();
	printf("DEBUG CFONTROL LoadPJMap 1");
	DeletePJMapStuff();
	KillTimer(PJMAPInfo[rMapTimer]);
    if(!LoadThePJMap(id))//ChooseRandomMapPJ(PJMAPInfo[pathName]);
	    PJMAPInfo[rMapTimer] = SetTimer("ChooseRandomMapPJTimer", 1000, false);
	db_UpdateSettings(PJ);
	new strk[120];
	format(strk, sizeof strk, "~w~Map: ~h~~b~%s~n~~w~Author: ~h~~b~%s~w~~n~~w~Rating: ~h~~b~%d/10",FixpInfoString(PJMAPInfo[mName], 0), FixpInfoString(PJMAPInfo[Author], 0), PJMAPInfo[Rating]);
	TextDrawSetString(PJTXTD[Text], strk);
	new end = GetTickCount();
	printf("DEBUG CFONTROL LoadPJMap 2 s %d e %d = %d", start, end, end-start);
	return 1;
}
forward ChooseRandomMapPJTimer();
public ChooseRandomMapPJTimer()
{
	KillTimer(PJMAPInfo[rMapTimer]);
    ChooseRandomMapPJ(PJMAPInfo[pathName]);
}
stock LoadThePJMap(i)
{
	new File:file_ptr;
	new folder[50];
	format(folder, sizeof folder, "%s", PJMapsInfo[i][pathName]);
	if(ServerInfo[DebugMode] == 1)printf("PJ DEBUG: TRYING MAP DIR: %s",folder);
	
	new line[128],filename[256], string[100];
	new objID, puID, Float:yOffSet = 0.5;

    //loading map info
	format(filename, sizeof filename, "/pangea/PJ/%s/Info.txt",folder);
    if(fexist(filename))
	{
		file_ptr = fopen(filename, io_read);
		while(fread(file_ptr,line, sizeof(line)) > 0)
		{
		    sscanf(line,"p<|>s[50]s[50]ddds[50]",PJMAPInfo[mName], PJMAPInfo[Author], ModeWeather[PJ], ModeTime[PJ]
			, PJMAPInfo[Rating], PJMAPInfo[sLink]);
		    break;
		}
		fclose(file_ptr);
	}
	else
	{
        printf("ERROR: DM MAP DIR: %s - NO Info FILE - LOADING NEW MAP",folder);
		return false;
	}
	
    PJMAPInfo[LowestZ] = PJMapsInfo[i][LowestZ];
    PJMAPInfo[sX] = PJMapsInfo[i][sX];
	PJMAPInfo[sY] = PJMapsInfo[i][sY];
	PJMAPInfo[sZ] = PJMapsInfo[i][sZ]+yOffSet;
	PJMAPInfo[sAng] = PJMapsInfo[i][sAng];
	
    forLoop(id, PJ_MAX_OBJECTS)
    {
        if(PJMapsInfo[i][oExists][id] == 1)
        {
            PJObjects[objID][oExists] = 1;
			PJObjects[objID][oModel] = PJMapsInfo[i][oModel][id];
			PJObjects[objID][ox] = PJMapsInfo[i][ox][id];
			PJObjects[objID][oy] = PJMapsInfo[i][oy][id];
			PJObjects[objID][oz] = PJMapsInfo[i][oz][id]+yOffSet;
			PJObjects[objID][orx] = PJMapsInfo[i][orx][id];
			PJObjects[objID][ory] = PJMapsInfo[i][ory][id];
			PJObjects[objID][orz] = PJMapsInfo[i][orz][id];
			objID++;
        }
    }
    forLoop(id, MAX_PJ_ITEMS)
    {
        if(PJMapsInfo[i][iExists][id] == 1)
        {
			PJMAPInfo[iExists][puID] = 1;
            PJMAPInfo[iType][puID] = PJMapsInfo[i][iType][id];
			PJMAPInfo[iX][puID] = PJMapsInfo[i][iX][id];
			PJMAPInfo[iY][puID] = PJMapsInfo[i][iY][id];
			PJMAPInfo[iZ][puID] = PJMapsInfo[i][iZ][id];
			
			switch(PJMAPInfo[iType][puID])
			{
			    case 0:
				{
					format(string,sizeof(string),"{FF0000}[{FFFFFF}PARACHUTE{FF0000}]");
					if(objID >= PJ_MAX_OBJECTS)
					{
					    printf("ERROR: PJ MAP DIR: %s MAX NUMBER OF OBJECTS REACHED - PARACHUTE",folder);
						continue;
					}
	                PJObjects[objID][oExists] = 1;
					PJObjects[objID][oModel] = 1310;
					PJObjects[objID][ox] = PJMAPInfo[iX][puID];
					PJObjects[objID][oy] = PJMAPInfo[iY][puID];
					PJObjects[objID][oz] = PJMAPInfo[iZ][puID]+yOffSet;
					PJObjects[objID][orx] = 0.0;
					PJObjects[objID][ory] = 0.0;
					PJObjects[objID][orz] = 0.0;
					objID++;
				}
			}
			PJMAPInfo[iText][puID]=
				CreateDynamic3DTextLabel(string, 0xffffffAA, PJMAPInfo[iX][puID],PJMAPInfo[iY][puID],PJMAPInfo[iZ][puID]+yOffSet+1, 70, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, W_PJ, -1, -1, 100.0);
			puID++;
        }
    }
    
	format(PJMAPInfo[pathName], 100, "%s",folder);//we now know that this map is valid
	//loading top times
	format(filename, sizeof filename, "/pangea/PJ/%s/TTs.txt",folder);
    if(!fexist(filename))
	{
	    forLoop(id, MAX_PJ_BEST_LINES)
		{
	        format(PJBest[id][Name],100,"-");
	        PJBest[id][bMins] = 0;
	        PJBest[id][bSecs] = 0;
	        PJBest[id][bMils] = 0;
        }
		fcreate(filename);
	}
	else
	{
	    new bid;
		file_ptr = fopen(filename, io_read);
		while(fread(file_ptr,line, sizeof(line)) > 0)
		{
		    sscanf(line,"p<|>s[50]ddd"
			,PJBest[bid][Name],PJBest[bid][bMins],PJBest[bid][bSecs],PJBest[bid][bMils]);
			bid++;
		}
		fclose(file_ptr);
	}
	LoadPJObjects(0);
	if(ServerInfo[DebugMode] == 1)printf("PJ DEBUG: MAP FULLY LOADED DIR: %s NAME: %s",folder, PJMAPInfo[mName]);
	return true;
}
forward LoadPJObjects(turn);
public LoadPJObjects(turn)
{
	//printf("DEBUG CFONTROL LoadPJObjects 1");
	new objects = 500;
    forLoopV(id, (turn*objects), PJ_MAX_OBJECTS)
    {
        #if defined PJ_OBJECTS_ONE_BY_ONE
		if(id >= (turn*objects)+objects)
		{
		    turn++;
		   	SetTimerEx("LoadPJObjects", 2000, false, "i", turn);
		    return 1;
		}
		#endif
    	if(PJObjects[id][oExists] == 1)
    	{
    	    PJObjects[id][oObject]=CreateTheDynamicObject(
				PJObjects[id][oModel],
				PJObjects[id][ox],
				PJObjects[id][oy],
				PJObjects[id][oz],
				PJObjects[id][orx],
				PJObjects[id][ory],
				PJObjects[id][orz], W_PJ);
    	}
    	else
		{
		    if(ServerInfo[DebugMode] == 1)
				printf("PJ DEBUG: CURRENT MAP LOADING OBJECTS END");
            forLoop(i, MAX_PLAYERS)
		    {
				if(IsPlayerConnected(i) && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][PlayerMode] == PJ)
				{
    				Streamer_Update(i);
				}
	        }
			return 0;
		}
	}
	//printf("DEBUG CFONTROL LoadPJObjects 2");
	return 1;
}
stock DeletePJMapStuff()
{
	//printf("DEBUG CFONTROL DeletePJMapStuff 1");
    PJMAPInfo[fWeather] = 0;
	//DestroyAllDynamicAreas();
    forLoop(id, PJ_MAX_OBJECTS)
    {
    	if(PJObjects[id][oObject] != -1)DestroyTheDynamicObject(PJObjects[id][oObject]);
    	PJObjects[id][oObject] = -1;
    	PJObjects[id][oExists] = 0;
    }
    forLoop(id, MAX_PJ_ITEMS)
    {
        PJMAPInfo[iExists][id] = 0;
    	DestroyTheDynamic3DTextLabel(PJMAPInfo[iText][id]);
    }
}


stock PJMapAlivePlayers()
{
	//printf("DEBUG CFONTROL PJMapAlivePlayers 1");
	new count = 0;
	forLoop(i, MAX_PLAYERS) if(IsPlayerConnected(i) && PJPlayerInfo[i][Alive] == 1 && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][PlayerMode] == PJ && !IsPlayerNPC(i))count++;
	//printf("DEBUG CFONTROL PJMapAlivePlayers 2");
	return count;
}
stock PJMapCampers()
{
	//printf("DEBUG CFONTROL PJMapCampers 1");
	new count = 0;
	forLoop(i, MAX_PLAYERS) if(IsPlayerConnected(i) && PJPlayerInfo[i][Camper] == 1 && PJPlayerInfo[i][Alive] == 1 && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][PlayerMode] == PJ && !IsPlayerNPC(i))count++;
	//printf("DEBUG CFONTROL PJMapCampers 2");
	return count;
}

forward StartAudioForPJ(playerid);
public StartAudioForPJ(playerid)
{
	//printf("DEBUG CFONTROL StartAudioForPJ 1");
    if(!IsPlayerConnected(playerid) || IsPlayerNPC(playerid))return 0;
    if(PlayerInfo[playerid][Spawned] == 1 && PlayerInfo[playerid][PlayerMode] == PJ)
	{
  		if(PlayerInfo[playerid][DisableSounds] == 0 && strlen(PJMAPInfo[sLink]) > 3)
		{
			new string[200];
			format(string, sizeof string, "%s",PJMAPInfo[pathName]);
			format(string, sizeof string, "%s",strreplace("[","",string));
			format(string, sizeof string, "%s",strreplace("]","_",string));
			format(string, sizeof string, "%s",strreplace(" ","_",string));
			format(string, sizeof string, "%s",strreplace("@","_at_",string));
			format(string, sizeof string, "%s",strreplace("$","_",string));
			format(string, sizeof string, "%s",strreplace("%","_",string));
			format(string, sizeof string, "http://k003.kiwi6.com/hotlink/%s/%s.mp3",PJMAPInfo[sLink],string);
			PlayAudioStreamForPlayer(playerid, string);
		}
	}
	//printf("DEBUG CFONTROL StartAudioForPJ 2");
	return 1;
}


forward ChangePJMapMap(pathname[]);
public ChangePJMapMap(pathname[])
{
	//printf("DEBUG CFONTROL ChangePJMapMap 1");
	if(PJMAPInfo[TimeLeft] >= 595)return 0;
	if(strlen(pathname) < 2)
	{
	    PJMAPInfo[MapBought] = -1;
    	PJMAPInfo[dStarted] = 0;
		PJMAPInfo[TimeLeft] = 604;//+4 for if(PJMAPInfo[TimeLeft] >= 595)return 0;
		forLoop(i, MAX_PLAYERS)
		{
			if(IsPlayerConnected(i) && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][PlayerMode] == PJ && !IsPlayerNPC(i))
			{
				SetPVarInt(i, "MapRatePJ", 1);
				PJPlayerInfo[i][Alive] = 1;
				ResetWeapons(i);
				PJPlayerInfo[i][Camper] = 0;
				PJPlayerInfo[i][Asked] = 0;
				PJPlayerInfo[i][rRespawn] = 0;
				PJPlayerInfo[i][Respawning] = 0;
				TextDrawHideForPlayer(i,PJTXTD[mInfo]);
				HidePJAliveText(i);
		 		SetHealth(i,99.0);
				TogglePlayerControllable(i,false);
				ShowNewMapTextsPJ(i);
				CheckPVPStatusPJ(i);
				///SendClientMessage(i, white, "{FFFFFF}MAP VOTE: {33FF33}Vote for your desired map. Voting will last for 10 seconds.");
				if(GetPlayerState(i) != PLAYER_STATE_WASTED)
				{
					PJ_StopSpectate(i);
					#if defined PJ_SPAWN_DEADS
					SpawnPlayerTimer(i, 1000);
					#endif
				}
	            #if !defined PJ_SPAWN_DEADS
	            SpawnPlayerTimer(i, PJ_SPAWN_PLAYERS_TIME);
				#endif
			}
		}
	 	ChooseRandomMapPJ("wadwdaa22");
		KillTimer(PJMAPInfo[DuelTimer]);
		KillTimer(PJMAPInfo[Timer]);
		PJMAPInfo[Timer] = SetTimer("StartPJMap", PJ_START_GAME_TIME, false);
		return 1;
	}
    SavePJMap();
    PJMAPInfo[dStarted] = 0;
	PJMAPInfo[TimeLeft] = 604;//+4 for if(PJMAPInfo[TimeLeft] >= 595)return 0;
    forLoop(i, MAX_PLAYERS)
	{
		if(IsPlayerConnected(i) && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][PlayerMode] == PJ && !IsPlayerNPC(i))
		{
			PJPlayerInfo[i][Alive] = 1;
			PJPlayerInfo[i][Camper] = 0;
			ResetWeapons(i);
			PJPlayerInfo[i][Asked] = 0;
			PJPlayerInfo[i][rRespawn] = 0;
			PJPlayerInfo[i][Respawning] = 0;
			SetPVarInt(i, "MapRatePJ", 1);
			TextDrawHideForPlayer(i,PJTXTD[mInfo]);
			HidePJAliveText(i);
		 	SetHealth(i,99.0);
			TogglePlayerControllable(i,false);
			ShowNewMapTextsPJ(i);
			CheckPVPStatusPJ(i);
			//SendClientMessage(i, white, "{FFFFFF}MAP VOTE: {33FF33}Vote for your desired map. Voting will last for 10 seconds.");
			if(GetPlayerState(i) != PLAYER_STATE_WASTED)
			{
				PJ_StopSpectate(i);
				#if defined PJ_SPAWN_DEADS
				SpawnPlayerTimer(i, 1000);
				#endif
			}
            #if !defined PJ_SPAWN_DEADS #else
            SpawnPlayerTimer(i, PJ_SPAWN_PLAYERS_TIME);
			#endif
		}
	}
	if(PJMAPInfo[MapBought] != -1)
	{
	    LoadPJMap(PJMAPInfo[MapBought]);
	    PJMAPInfo[MapBought] = -1;
	}
	else ChooseRandomMapPJ(pathname);
	KillTimer(PJMAPInfo[Timer]);
	KillTimer(PJMAPInfo[DuelTimer]);
	PJMAPInfo[Timer] = SetTimer("StartPJMap", PJ_START_GAME_TIME, false);
	//LoadRandomMaps(id);
	//printf("DEBUG CFONTROL ChangePJMapMap 2");
	return 1;
}

forward StartPJMap();
public StartPJMap()
{
	//printf("DEBUG CFONTROL StartPJMap 1");
	if(ModeCount(PJ) > 0)
	{
	    UpdatePJTTText();
	    forLoop(i, MAX_PLAYERS)
		{
			if(IsPlayerConnected(i) && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][PlayerMode] == PJ && !IsPlayerNPC(i))
			{
				ToggleThePlayerSpectating(i, 0);
				ShowPJTTText(i);
				//TogglePlayerControllable(i,true);
				HideNewMapTextsPJ(i);
				TextDrawShowForPlayer(i,PJTXTD[mInfo]);
			}
		}
    }
	new strk[120];
    format(strk, sizeof strk, "Map: ~w~%s~n~~g~Next Map: ~w~Not set (/nextmap)",FixpInfoString(PJMAPInfo[mName], 0));
	TextDrawSetString(PJTXTD[mInfo], strk);
	PJMAPInfo[dStarted] = 1;
	CountDownToStartPJMap(5);
	//printf("DEBUG CFONTROL StartPJMap 2");
}

forward CountDownToStartPJMap(time);
public CountDownToStartPJMap(time)
{
	//printf("DEBUG CFONTROL CountDownToStartPJMap 1");
    if(ModeCount(PJ) == 0 || PJMAPInfo[dStarted] != 1)return 0;
	time--;
	if(time == 0)
	{
    	PJMAPInfo[AliveAtStart] = PJMapAlivePlayers();
		PJMAPInfo[Al_Mils] = 0;
		PJMAPInfo[Al_Secs] = 0;
		PJMAPInfo[Al_Mins] = 0;
	    forLoop(i, MAX_PLAYERS)
		{
			if(IsPlayerConnected(i) && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][PlayerMode] == PJ && !IsPlayerNPC(i))
			{
			    if(PJPlayerInfo[i][Alive] == 1)
			    {
				    new Float:x, Float:y, Float:z;
					GetPlayerPos(i,x,y,z);
				    GameTextForPlayer(i, " ~n~~r~ GO GO GO!", 2000, 3);
				    PlayerPlaySound(i,1057,0.0,0.0,0.0);
					ToggleThePlayerSpectating(i, 0);
					TogglePlayerControllable(i,true);
		    		PJPlayerInfo[i][PVPChecked] = 0;
					HideNewMapTextsPJ(i);
					HidePJTTText(i);
					SetPlayerPos(i,x+random(3),y+random(3),z);
				}
				ShowPJAliveText(i);
			}
		}
	    return 0;
    }
    else
    {
        new text[40];
		format(text,sizeof(text)," ~n~~w~ %d",time);
		forLoop(i, MAX_PLAYERS)
		{
			if(IsPlayerConnected(i) && PJMAPInfo[dStarted] == 1 && PJPlayerInfo[i][Alive] == 1 && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][PlayerMode] == PJ && !IsPlayerNPC(i))
			{
			    GameTextForPlayer(i, text, 2000, 3);
			    PlayerPlaySound(i,1056,0.0,0.0,0.0);
			}
		}
    }
	SetTimerEx("CountDownToStartPJMap",1000,0, "i", time);
	//printf("DEBUG CFONTROL CountDownToStartPJMap 2");
    return 1;
}
stock ShowPJAliveText(playerid)
{
	new text[20];
	format(text, sizeof text, "%d",PJMapAlivePlayers());
	TextDrawSetString(PJTXTD[Al_AliveNum], text);
	TextDrawHideForPlayer(playerid,PJTXTD[Al_AliveNum]);
	TextDrawShowForPlayer(playerid,PJTXTD[Al_AliveNum]);
	TextDrawShowForPlayer(playerid,PJTXTD[Al_Time]);
	forLoop(i, 3)TextDrawShowForPlayer(playerid,PJTXTD[Al_BGs][i]);
}
stock HidePJAliveText(playerid)
{
	TextDrawHideForPlayer(playerid,PJTXTD[Al_Time]);
	TextDrawHideForPlayer(playerid,PJTXTD[Al_AliveNum]);
	forLoop(i, 3)TextDrawHideForPlayer(playerid,PJTXTD[Al_BGs][i]);
}

stock ShowHidePJTopTimes(i)
{
	//printf("DEBUG CFONTROL ShowHidePJTopTimes 1");
	if(!PJPlayerInfo[i][DisableTT])
	{
	    HidePJTTText(i);
		PJPlayerInfo[i][DisableTT] = 1;
	}
	else
	{
		PJPlayerInfo[i][DisableTT] = 0;
	    ShowPJTTText(i);
	}
	//printf("DEBUG CFONTROL ShowHidePJTopTimes 2");
}

stock ShowPJTTText(playerid)
{
	//printf("DEBUG CFONTROL ShowPJTTText 1");
	if(PJPlayerInfo[playerid][DisableTT] == 0)
	{
		TextDrawShowForPlayer(playerid,PJTXTD[TT_BG1]);
		TextDrawShowForPlayer(playerid,PJTXTD[TT_BG2]);
		TextDrawShowForPlayer(playerid,PJTXTD[TT_Text]);
		TextDrawShowForPlayer(playerid,PJTXTD[TT_Line]);
		TextDrawShowForPlayer(playerid,PJTXTD[TT_Line2]);
		forLoop(i, MAX_PJ_BEST_LINES)
		{
			TextDrawShowForPlayer(playerid,PJTXTD[TT_bTimes][i]);
			TextDrawShowForPlayer(playerid,PJTXTD[TT_bNames][i]);
		}
	}
	//printf("DEBUG CFONTROL ShowPJTTText 2");
}


stock UpdatePJTTText()
{
	//printf("DEBUG CFONTROL ShowPJTTText 1");
	new string[100], strings[MAX_PJ_BEST_LINES][5];
	forLoop(i, MAX_PJ_BEST_LINES)
	{
		if(strlen(PJBest[i][Name])> 2)
		{
		    new thename[50];
			format(thename,sizeof thename,"%s",PJBest[i][Name]);
			forLoop(p, strlen(thename))
		    {
			    if (thename[p] == ']')thename[p] = ')';
			    if (thename[p] == '[')thename[p] = '(';
			    if (thename[p] == '_')thename[p] = '-';
			}
			if(strlen(thename) > 14)
			{
				strdel(thename, 14, strlen(thename));
				format(thename,sizeof thename,"%s.",thename);
			}

			if(PJBest[i][bMins] > 9)format(strings[0],5,"%d",PJBest[i][bMins]);
		    else format(strings[0],5,"0%d",PJBest[i][bMins]);

			if(PJBest[i][bSecs] > 9)format(strings[1],5,"%d",PJBest[i][bSecs]);
		    else format(strings[1],5,"0%d",PJBest[i][bSecs]);

			if(PJBest[i][bMils] > 9)format(strings[2],5,"%d",PJBest[i][bMils]);
		    else format(strings[2],5,"0%d",PJBest[i][bMils]);

		    format(string,sizeof string ,"%d. %s",i+1,thename);
	        TextDrawSetString(PJTXTD[TT_bNames][i], string);
    		format(string,sizeof string,"%s:%s:%s",strings[0],strings[1],strings[2]);
	        TextDrawSetString(PJTXTD[TT_bTimes][i], string);
	    }
	    else
	    {
	        format(string,sizeof string ,"%d.  --",i+1);
	        TextDrawSetString(PJTXTD[TT_bTimes][i], "--:--:--");
	        TextDrawSetString(PJTXTD[TT_bNames][i], string);
	        format(PJBest[i][Name],100,"-");
	        PJBest[i][bMins] = 0;
	        PJBest[i][bSecs] = 0;
	        PJBest[i][bMils] = 0;
	    }
    }
	//printf("DEBUG CFONTROL ShowPJTTText 2");
}

stock HidePJTTText(playerid)
{
	//printf("DEBUG CFONTROL HidePJTTText 1");
    TextDrawHideForPlayer(playerid,PJTXTD[TT_BG1]);
	TextDrawHideForPlayer(playerid,PJTXTD[TT_BG2]);
	TextDrawHideForPlayer(playerid,PJTXTD[TT_Text]);
	TextDrawHideForPlayer(playerid,PJTXTD[TT_Line]);
	TextDrawHideForPlayer(playerid,PJTXTD[TT_Line2]);
	forLoop(i, MAX_PJ_BEST_LINES)
	{
		TextDrawHideForPlayer(playerid,PJTXTD[TT_bTimes][i]);
		TextDrawHideForPlayer(playerid,PJTXTD[TT_bNames][i]);
	}
	//printf("DEBUG CFONTROL HidePJTTText 2");
}
stock CreatePJTTTexts(id)
{
	TextDrawLetterSize(PJTXTD[TT_bNames][id], 0.147916, 1.288887);
	TextDrawAlignment(PJTXTD[TT_bNames][id], 1);
	TextDrawColor(PJTXTD[TT_bNames][id], -1);
	TextDrawSetShadow(PJTXTD[TT_bNames][id], 0);
	TextDrawSetOutline(PJTXTD[TT_bNames][id], 1);
	TextDrawBackgroundColor(PJTXTD[TT_bNames][id], 51);
	TextDrawFont(PJTXTD[TT_bNames][id], 2);
	TextDrawSetProportional(PJTXTD[TT_bNames][id], 1);

	TextDrawLetterSize(PJTXTD[TT_bTimes][id], 0.147916, 1.288887);
	TextDrawAlignment(PJTXTD[TT_bTimes][id], 1);
	TextDrawColor(PJTXTD[TT_bTimes][id], -1);
	TextDrawSetShadow(PJTXTD[TT_bTimes][id], 0);
	TextDrawSetOutline(PJTXTD[TT_bTimes][id], 1);
	TextDrawBackgroundColor(PJTXTD[TT_bTimes][id], 51);
	TextDrawFont(PJTXTD[TT_bTimes][id], 2);
	TextDrawSetProportional(PJTXTD[TT_bTimes][id], 1);
}


stock ShowNewMapTextsPJ(playerid)
{
    TextDrawShowForPlayer(playerid,PJTXTD[BG]);
	TextDrawShowForPlayer(playerid,PJTXTD[Loading]);
	TextDrawHideForPlayer(playerid,PJTXTD[Text]);
}

stock HideNewMapTextsPJ(playerid)
{
    TextDrawHideForPlayer(playerid,PJTXTD[BG]);
	TextDrawHideForPlayer(playerid,PJTXTD[Loading]);
	TextDrawHideForPlayer(playerid,PJTXTD[Text]);
}

stock StartPJMapSpecForPlayer(playerid)
{
	//printf("DEBUG CFONTROL StartPJMapSpecForPlayer 1");
	PJPlayerInfo[playerid][Alive] = 0;
    if(PJMapAlivePlayers() > 0)
	{
		forLoop(i, MAX_PLAYERS)
		{
			if(IsPlayerConnected(i) && i != playerid && PJPlayerInfo[i][Alive] == 1 && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][PlayerMode] == PJ && !IsPlayerNPC(i))
			{
			    PJ_StartSpectate(playerid, i);
			    break;
			}
		}
	}
	if(PJPlayerInfo[playerid][rRespawn] == 0 && PJMapAlivePlayers() >= 2)
	{
	    SendClientMessage(playerid, white, "{FF0000}PJ MSG:{FFFFFF} You can use /respawn to rejoin the map...");
	}
	//printf("DEBUG CFONTROL StartPJMapSpecForPlayer 2");
}

stock PJ_StartSpectate(playerid, specplayerid)
{
	//printf("DEBUG CFONTROL PJ_StartSpectate 1");
	forLoop(x, MAX_PLAYERS)
	{
	    if(GetPlayerState(x) == PLAYER_STATE_SPECTATING && PlayerInfo[x][Level] > 0 && PlayerInfo[x][SpecID] == playerid)
		{
	       AdvanceSpectate(x);
		}
	}
	ShowSpecTexts(playerid, specplayerid);
	ToggleThePlayerSpectating(playerid, 1);
	SetPlayerInterior(playerid,GetPlayerInterior(specplayerid));
	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(specplayerid));
	if(IsPlayerInAnyVehicle(specplayerid))
		PlayerSpectateVehicle(playerid, GetPlayerVehicleID(specplayerid));
	else
	 	PlayerSpectatePlayer(playerid, specplayerid);
    PJPlayerInfo[playerid][SpecID] = specplayerid;
	//printf("DEBUG CFONTROL PJ_StartSpectate 2");
	return 1;
}
stock PJ_StopSpectate(playerid)
{
	if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING && PJPlayerInfo[playerid][SpecID] > -1)
	{
		ToggleThePlayerSpectating(playerid, 0);
		PJPlayerInfo[playerid][SpecID] = -1;
		HideSpecTexts(playerid);
	}
	return 1;
}
stock PJ_AdvanceSpectate(playerid)
{
	if(PJMapAlivePlayers() > 0)
	{
	    if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING && PJPlayerInfo[playerid][SpecID] > -1)
		{
			printf("DEBUG CFONTROL PJ_AdvanceSpectate 1 pid %d sid %d alive %d",playerid,PJPlayerInfo[playerid][SpecID],PJMapAlivePlayers());

			new player = -1;
			forLoop(x, MAX_PLAYERS)
			{
		        if(IsPlayerConnected(x) && x != playerid && PJPlayerInfo[x][Alive] == 1 && PlayerInfo[x][Spawned] == 1 && PlayerInfo[x][PlayerMode] == PJ && !IsPlayerNPC(x) && x > PJPlayerInfo[playerid][SpecID])
				{
					if(GetPlayerState(x) == PLAYER_STATE_SPECTATING || (GetPlayerState(x) != 1 && GetPlayerState(x) != 2 && GetPlayerState(x) != 3))
					 	continue;
                	player = x;
					break;
				}
			}
			if(player == -1)
			{
				forLoop(x, MAX_PLAYERS)
				{
			        if(IsPlayerConnected(x) && x != playerid && PJPlayerInfo[x][Alive] == 1 && PlayerInfo[x][Spawned] == 1 && PlayerInfo[x][PlayerMode] == PJ && !IsPlayerNPC(x))
					{
						if(GetPlayerState(x) == PLAYER_STATE_SPECTATING || (GetPlayerState(x) != 1 && GetPlayerState(x) != 2 && GetPlayerState(x) != 3))
						 	continue;
	                	player = x;
						break;
					}
				}
			}
			if(player != -1 && IsPlayerConnected(player))
				PJ_StartSpectate(playerid, player);
				
			printf("DEBUG CFONTROL PJ_AdvanceSpectate 2 pid %d sid %d alive %d",playerid,PJPlayerInfo[playerid][SpecID],PJMapAlivePlayers());
		}
	}
	return 1;

}

stock PJ_ReverseSpectate(playerid)
{
    if(PJMapAlivePlayers() > 0)
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING && PJPlayerInfo[playerid][SpecID] > -1)
		{
			printf("DEBUG CFONTROL PJ_ReverseSpectate 1 pid %d sid %d alive %d",playerid,PJPlayerInfo[playerid][SpecID],PJMapAlivePlayers());

			new player = -1;
			forLoopR(x,MAX_PLAYERS-1,-1)
			{
		        if(IsPlayerConnected(x) && x != playerid && PJPlayerInfo[x][Alive] == 1 && PlayerInfo[x][Spawned] == 1 && PlayerInfo[x][PlayerMode] == PJ && !IsPlayerNPC(x) && x < PJPlayerInfo[playerid][SpecID])
				{
					if(GetPlayerState(x) == PLAYER_STATE_SPECTATING || (GetPlayerState(x) != 1 && GetPlayerState(x) != 2 && GetPlayerState(x) != 3))
					 	continue;
                	player = x;
					break;
				}
			}
			if(player == -1)
			{
				forLoopR(x,MAX_PLAYERS-1,-1)
				{
			        if(IsPlayerConnected(x) && x != playerid && PJPlayerInfo[x][Alive] == 1 && PlayerInfo[x][Spawned] == 1 && PlayerInfo[x][PlayerMode] == PJ && !IsPlayerNPC(x))
					{
						if(GetPlayerState(x) == PLAYER_STATE_SPECTATING || (GetPlayerState(x) != 1 && GetPlayerState(x) != 2 && GetPlayerState(x) != 3))
						 	continue;
	                	player = x;
						break;
					}
				}
			}
			if(player != -1 && IsPlayerConnected(player))
				PJ_StartSpectate(playerid, player);

			printf("DEBUG CFONTROL PJ_ReverseSpectate 2 pid %d sid %d alive %d",playerid,PJPlayerInfo[playerid][SpecID],PJMapAlivePlayers());
		}
	}
	return 1;
}

stock CheckPVPStatusPJ(playerid)//at the end of a map
{
	if(PJPlayerInfo[playerid][PVPID] > -1 && PJPlayerInfo[playerid][PVPChecked] == 0)
	{
		//printf("DEBUG CFONTROL CheckPVPStatusPJ 1");
	    new pid = PJPlayerInfo[playerid][PVPID], string[180], skipsecond = 0;
	    PJPlayerInfo[playerid][PVPRounds]--;
	    PJPlayerInfo[pid][PVPRounds]--;
	    PJPlayerInfo[playerid][PVPChecked] = 1;
	    PJPlayerInfo[pid][PVPChecked] = 1;
	    if(PJPlayerInfo[playerid][PVPTime][0] > PJPlayerInfo[pid][PVPTime][0])
        {
			PJPlayerInfo[playerid][PVPWins]++;
            format(string, sizeof(string), "PVP Notice:{FFFFFF} You have won this round.{33FF33} Score: %d(you)-%d | Rounds left: %d",PJPlayerInfo[playerid][PVPWins],PJPlayerInfo[pid][PVPWins],PJPlayerInfo[playerid][PVPRounds]);
			SendClientMessage(playerid,red1, string);
			format(string, sizeof(string), "PVP Notice:{FFFFFF} You have lost this round.{33FF33} Score: %d(you)-%d | Rounds left: %d",PJPlayerInfo[pid][PVPWins],PJPlayerInfo[playerid][PVPWins],PJPlayerInfo[pid][PVPRounds]);
			SendClientMessage(pid,red1,string);
			skipsecond = 1;
        }
        else if(PJPlayerInfo[playerid][PVPTime][0] == PJPlayerInfo[pid][PVPTime][0])
        {
            if(PJPlayerInfo[playerid][PVPTime][1] > PJPlayerInfo[pid][PVPTime][1])
            {
				PJPlayerInfo[playerid][PVPWins]++;
	            format(string, sizeof(string), "PVP Notice:{FFFFFF} You have won this round.{33FF33} Score: %d(you)-%d | Rounds left: %d",PJPlayerInfo[playerid][PVPWins],PJPlayerInfo[pid][PVPWins],PJPlayerInfo[playerid][PVPRounds]);
				SendClientMessage(playerid,red1, string);
				format(string, sizeof(string), "PVP Notice:{FFFFFF} You have lost this round.{33FF33} Score: %d(you)-%d | Rounds left: %d",PJPlayerInfo[pid][PVPWins],PJPlayerInfo[playerid][PVPWins],PJPlayerInfo[pid][PVPRounds]);
				SendClientMessage(pid,red1,string);
				skipsecond = 1;
            }
            else if(PJPlayerInfo[playerid][PVPTime][1] == PJPlayerInfo[pid][PVPTime][1])
            {
                if(PJPlayerInfo[playerid][PVPTime][2] > PJPlayerInfo[pid][PVPTime][2])
                {
					PJPlayerInfo[playerid][PVPWins]++;
		            format(string, sizeof(string), "PVP Notice:{FFFFFF} You have won this round.{33FF33} Score: %d(you)-%d | Rounds left: %d",PJPlayerInfo[playerid][PVPWins],PJPlayerInfo[pid][PVPWins],PJPlayerInfo[playerid][PVPRounds]);
					SendClientMessage(playerid,red1, string);
					format(string, sizeof(string), "PVP Notice:{FFFFFF} You have lost this round.{33FF33} Score: %d(you)-%d | Rounds left: %d",PJPlayerInfo[pid][PVPWins],PJPlayerInfo[playerid][PVPWins],PJPlayerInfo[pid][PVPRounds]);
					SendClientMessage(pid,red1,string);
					skipsecond = 1;
                }
            }
        }

		if(skipsecond == 0)
		{
		    if(PJPlayerInfo[pid][PVPTime][0] > PJPlayerInfo[playerid][PVPTime][0])
	        {
	            PJPlayerInfo[pid][PVPWins]++;
	            format(string, sizeof(string), "PVP Notice:{FFFFFF} You have won this round.{33FF33} Score: %d(you)-%d | Rounds left: %d",PJPlayerInfo[pid][PVPWins],PJPlayerInfo[playerid][PVPWins],PJPlayerInfo[pid][PVPRounds]);
				SendClientMessage(pid,red1, string);
				format(string, sizeof(string), "PVP Notice:{FFFFFF} You have lost this round.{33FF33} Score: %d(you)-%d | Rounds left: %d",PJPlayerInfo[playerid][PVPWins],PJPlayerInfo[pid][PVPWins],PJPlayerInfo[playerid][PVPRounds]);
				SendClientMessage(playerid,red1,string);
	        }
	        else if(PJPlayerInfo[pid][PVPTime][0] == PJPlayerInfo[playerid][PVPTime][0])
	        {
	            if(PJPlayerInfo[pid][PVPTime][1] > PJPlayerInfo[playerid][PVPTime][1])
	            {
					PJPlayerInfo[pid][PVPWins]++;
		            format(string, sizeof(string), "PVP Notice:{FFFFFF} You have won this round.{33FF33} Score: %d(you)-%d | Rounds left: %d",PJPlayerInfo[pid][PVPWins],PJPlayerInfo[playerid][PVPWins],PJPlayerInfo[pid][PVPRounds]);
					SendClientMessage(pid,red1, string);
					format(string, sizeof(string), "PVP Notice:{FFFFFF} You have lost this round.{33FF33} Score: %d(you)-%d | Rounds left: %d",PJPlayerInfo[playerid][PVPWins],PJPlayerInfo[pid][PVPWins],PJPlayerInfo[playerid][PVPRounds]);
					SendClientMessage(playerid,red1,string);
	            }
	            else if(PJPlayerInfo[pid][PVPTime][1] == PJPlayerInfo[playerid][PVPTime][1])
	            {
	                if(PJPlayerInfo[pid][PVPTime][2] > PJPlayerInfo[playerid][PVPTime][2])
	                {
						PJPlayerInfo[pid][PVPWins]++;
			            format(string, sizeof(string), "PVP Notice:{FFFFFF} You have won this round.{33FF33} Score: %d(you)-%d | Rounds left: %d",PJPlayerInfo[pid][PVPWins],PJPlayerInfo[playerid][PVPWins],PJPlayerInfo[pid][PVPRounds]);
						SendClientMessage(pid,red1, string);
						format(string, sizeof(string), "PVP Notice:{FFFFFF} You have lost this round.{33FF33} Score: %d(you)-%d | Rounds left: %d",PJPlayerInfo[playerid][PVPWins],PJPlayerInfo[pid][PVPWins],PJPlayerInfo[playerid][PVPRounds]);
						SendClientMessage(playerid,red1,string);
	                }
	            }
	        }
		}
	    if(PJPlayerInfo[playerid][PVPRounds] == 0)
	    {
	        if(PJPlayerInfo[playerid][PVPWins] > PJPlayerInfo[pid][PVPWins])
	        {
	            PJPlayerInfo[playerid][PVPID] = -1;
	            PJPlayerInfo[pid][PVPID] = -1;
	            PJPlayerInfo[playerid][PVPRequest][0] = -1;
                PJPlayerInfo[pid][PVPRequest][0] = -1;

	            PJPlayerInfo[playerid][PVP]++;
	            GiveThePlayerMoney(playerid, PJPlayerInfo[playerid][PVPAmount]);
	            GiveThePlayerMoney(pid, -PJPlayerInfo[pid][PVPAmount]);
	            format(string, sizeof(string), "{33FF33}PVP {FFFFFF} %s has won a PVP against %s.{33FF33}(+$%d).", PlayerInfo[playerid][Name], PlayerInfo[pid][Name],PJPlayerInfo[playerid][PVPAmount]);
				SendMessageToMode(PJ,COLOR_WHITE, string);
	        }
	        else if(PJPlayerInfo[playerid][PVPWins] < PJPlayerInfo[pid][PVPWins])
	        {
	            PJPlayerInfo[playerid][PVPID] = -1;
	            PJPlayerInfo[pid][PVPID] = -1;
	            PJPlayerInfo[playerid][PVPRequest][0] = -1;
                PJPlayerInfo[pid][PVPRequest][0] = -1;

	            PJPlayerInfo[pid][PVP]++;
	            GiveThePlayerMoney(pid, PJPlayerInfo[pid][PVPAmount]);
	            GiveThePlayerMoney(playerid, -PJPlayerInfo[playerid][PVPAmount]);
                format(string, sizeof(string), "{33FF33}PVP {FFFFFF} %s has won a PVP against %s.{33FF33}(+$%d).", PlayerInfo[pid][Name], PlayerInfo[playerid][Name],PJPlayerInfo[playerid][PVPAmount]);
				SendMessageToMode(PJ,COLOR_WHITE, string);
	        }
	        else
	        {
	            PJPlayerInfo[playerid][PVPID] = -1;
	            PJPlayerInfo[pid][PVPID] = -1;
	            PJPlayerInfo[playerid][PVPRequest][0] = -1;
                PJPlayerInfo[pid][PVPRequest][0] = -1;
                format(string, sizeof(string), "{33FF33}PVP {FFFFFF}Score against %s and %s is equal. No one wins.", PlayerInfo[pid][Name], PlayerInfo[playerid][Name]);
				SendMessageToMode(PJ,COLOR_WHITE, string);
	        }
	    }
		//printf("DEBUG CFONTROL CheckPVPStatusPJ 2");
	}
}

stock PVPDisqualifyPJ(playerid, reason)
{
    if(PJPlayerInfo[playerid][PVPID] > -1)
	{
		//printf("DEBUG CFONTROL PVPDisqualifyPJ 1");
 		new pid = PJPlayerInfo[playerid][PVPID], string[180];
 		if(reason == 0) //crash? maybe?
 		{
 		    PJPlayerInfo[playerid][PVPID] = -1;
            PJPlayerInfo[pid][PVPID] = -1;
            PJPlayerInfo[playerid][PVPRequest][0] = -1;
            PJPlayerInfo[pid][PVPRequest][0] = -1;
            format(string, sizeof(string), "{33FF33}PVP {FFFFFF}between %s and %s has been canceled. (Player Crash)", PlayerInfo[pid][Name], PlayerInfo[playerid][Name]);
			SendMessageToMode(PJ,COLOR_WHITE, string);
 		}
 		else//quitting mode or server
 		{
 		    PJPlayerInfo[playerid][PVPID] = -1;
            PJPlayerInfo[pid][PVPID] = -1;
            PJPlayerInfo[playerid][PVPRequest][0] = -1;
            PJPlayerInfo[pid][PVPRequest][0] = -1;

            PJPlayerInfo[pid][PVP]++;
            GiveThePlayerMoney(pid, PJPlayerInfo[pid][PVPAmount]);
            GiveThePlayerMoney(playerid, -PJPlayerInfo[playerid][PVPAmount]);
            format(string, sizeof(string), "{33FF33}PVP {FFFFFF} %s has won a PVP against %s.{33FF33}(+$%d) (Player Quit)", PlayerInfo[pid][Name], PlayerInfo[playerid][Name],PJPlayerInfo[playerid][PVPAmount]);
			SendMessageToMode(PJ,COLOR_WHITE, string);
 		}
		//printf("DEBUG CFONTROL PVPDisqualifyPJ 2");
	}
}
stock PJMapDisqualifyPlayer(playerid,reason,ereason)
{
	//printf("DEBUG CFONTROL PJMapDisqualifyPlayer 1");
	SetPlayerColor(playerid,0xFFFFFF00);
	GiveThePlayerMoney(playerid, (PJMAPInfo[AliveAtStart]-PJMapAlivePlayers()) * 5);
	ChangeModeScore(playerid, (PJMAPInfo[AliveAtStart]-PJMapAlivePlayers()) * 3);
	if(PJMapAlivePlayers() == 1)
	{
	    new string[126];
	    format(string, sizeof(string), "{33FF33}Notice: {FFFFFF}%s is the last survivor! (+$%d)",PlayerInfo[playerid][Name], ((PJMAPInfo[AliveAtStart]-PJMapAlivePlayers()) * 5));
		SendMessageToMode(PJ,COLOR_WHITE, string);
		PJPlayerInfo[playerid][Wins] ++;
	}
	PJPlayerInfo[playerid][Alive] = 0;
	PJPlayerInfo[playerid][Camper] = 0;
	if(PJMAPInfo[AliveAtStart] > PJMapAlivePlayers() && PJMapAlivePlayers() > 0)
	{
		forLoop(x, MAX_PLAYERS) {
		    if(GetPlayerState(x) == PLAYER_STATE_SPECTATING && PJPlayerInfo[x][SpecID] == playerid) {
		       PJ_AdvanceSpectate(x);
			}
		}
	}
	if(PJMapAlivePlayers() > 0 && reason == 1 && ereason == 1 && GetPlayerState(playerid) != PLAYER_STATE_WASTED)StartPJMapSpecForPlayer(playerid);
	new text[20];
	format(text, sizeof text, "%d",PJMapAlivePlayers());
	TextDrawSetString(PJTXTD[Al_AliveNum], text);
	if(PJPlayerInfo[playerid][rRespawn] == 0)
	{
		if(PJPlayerInfo[playerid][PVPID] > -1)
		{
			PJPlayerInfo[playerid][PVPTime][0] = PJMAPInfo[Al_Mins];
			PJPlayerInfo[playerid][PVPTime][1] = PJMAPInfo[Al_Secs];
			PJPlayerInfo[playerid][PVPTime][2] = PJMAPInfo[Al_Mils];
		}
	}
	PJPlayerInfo[playerid][rRespawn] = 0;
	//printf("DEBUG CFONTROL PJMapDisqualifyPlayer 2");
}
forward CheckPJMapEnd();
public CheckPJMapEnd()
{
	if(PJMAPInfo[dStarted] == 1)
	{
	    if(ModeCount(PJ) > 0)
	    {
		    if(PJMapAlivePlayers() == 0)
		    {
				//printf("DEBUG CFONTROL CheckPJMapEnd 1.1");
		        ChangePJMapMap(PJMAPInfo[pathName]);
				//printf("DEBUG CFONTROL CheckPJMapEnd 2.1");
		    }
		    if(PJMapAlivePlayers() == 1 && ModeCount(PJ) > 1)
		    {
				//printf("DEBUG CFONTROL CheckPJMapEnd 1.2");
		        forLoop(i, MAX_PLAYERS)
				{
					if(IsPlayerConnected(i) && PJPlayerInfo[i][Alive] == 1 && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][PlayerMode] == PJ && !IsPlayerNPC(i))
					{
					    //maybe check here if player was on duel or something???
					    if(PJPlayerInfo[i][InDuel] == 1)
					    {
					        new string[160];
						    format(string, sizeof(string), "{33FF33}Notice: {FFFFFF}%s is the last survivor! (+$%d)",PlayerInfo[i][Name], ((PJMAPInfo[AliveAtStart]-PJMapAlivePlayers()) * 5));
						    SendMessageToMode(PJ,COLOR_WHITE, string);
							PJPlayerInfo[i][Wins] ++;
							GiveThePlayerMoney(i, (PJMAPInfo[AliveAtStart]-PJMapAlivePlayers()) * 5);
							ChangeModeScore(i, (PJMAPInfo[AliveAtStart]-PJMapAlivePlayers()) * 3);
                            if(PJPlayerInfo[i][rRespawn] == 0)
							{
								if(PJPlayerInfo[i][PVPID] > -1)
								{
									PJPlayerInfo[i][PVPTime][0] = PJMAPInfo[Al_Mins];
									PJPlayerInfo[i][PVPTime][1] = PJMAPInfo[Al_Secs];
									PJPlayerInfo[i][PVPTime][2] = PJMAPInfo[Al_Mils];
								}
							}
							PJPlayerInfo[i][rRespawn] = 0;
							PJPlayerInfo[i][Respawning] = 0;
							PJPlayerInfo[i][Alive] = 0;
							ChangePJMapMap(PJMAPInfo[pathName]);
					    }
				        if(PJPlayerInfo[i][Asked] == 0 && PJPlayerInfo[i][Camper] == 0 && PJPlayerInfo[i][InDuel] == 0)
				        {
						    SendClientMessage(i, white, "{FF0000}Notice: {FFFFFF}You are the last survivor, press N to buy a camper! (5 seconds)");
						    SetTimerEx("EndPJMap", 8000, false, "i", i);
						    PJPlayerInfo[i][Asked] = 1;
						    GameTextForPlayer(i, "~w~~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ PRESS N TO BUY CAMPER",2999, 3);
					    }
						break;
					}
				}
				//printf("DEBUG CFONTROL CheckPJMapEnd 2.2");
			}
		}
	}
}
forward EndPJMap(i);
public EndPJMap(i)
{
	//printf("DEBUG CFONTROL EndPJMap 1");
	if(IsPlayerConnected(i) && PJPlayerInfo[i][Asked] == 1 && PJPlayerInfo[i][Alive] == 1 && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][PlayerMode] == PJ && !IsPlayerNPC(i) && PJPlayerInfo[i][Camper] == 0)
	{
	    new string[160];
	    format(string, sizeof(string), "{33FF33}Notice: {FFFFFF}%s is the last survivor! (+$%d)",PlayerInfo[i][Name], ((PJMAPInfo[AliveAtStart]-PJMapAlivePlayers()) * 5));
	    SendMessageToMode(PJ,COLOR_WHITE, string);
		PJPlayerInfo[i][Wins] ++;
		GiveThePlayerMoney(i, (PJMAPInfo[AliveAtStart]-PJMapAlivePlayers()) * 5);
		ChangeModeScore(i, (PJMAPInfo[AliveAtStart]-PJMapAlivePlayers()) * 3);
        if(PJPlayerInfo[i][rRespawn] == 0)
		{
			if(PJPlayerInfo[i][PVPID] > -1)
			{
				PJPlayerInfo[i][PVPTime][0] = PJMAPInfo[Al_Mins];
				PJPlayerInfo[i][PVPTime][1] = PJMAPInfo[Al_Secs];
				PJPlayerInfo[i][PVPTime][2] = PJMAPInfo[Al_Mils];
			}
		}
		PJPlayerInfo[i][rRespawn] = 0;
		PJPlayerInfo[i][Respawning] = 0;
		PJPlayerInfo[i][Alive] = 0;
		ChangePJMapMap(PJMAPInfo[pathName]);
	}
	//printf("DEBUG CFONTROL EndPJMap 2");
	return 1;
}

forward TimePassedDMPJ();
public TimePassedDMPJ()
{
	if(PJMAPInfo[dStarted] != 1 && PJMAPInfo[Al_Mils] != -1)
	{
		PJMAPInfo[Al_Mils] = -1;
	}
	if(PJMAPInfo[Al_Mils] != -1)
	{
		new strings[5][5], str[10];
		PJMAPInfo[Al_Mils]++;
		if(PJMAPInfo[Al_Mils] >= 99)
		{
		    PJMAPInfo[Al_Mils] = 0;
			PJMAPInfo[Al_Secs]++;
		}
		if(PJMAPInfo[Al_Secs] >= 59)
		{
		    PJMAPInfo[Al_Secs] = 0;
			PJMAPInfo[Al_Mins]++;
		}
		if(PJMAPInfo[Al_Mins] > 9)format(strings[0],5,"%d",PJMAPInfo[Al_Mins]);
	    else format(strings[0],5,"0%d",PJMAPInfo[Al_Mins]);

		if(PJMAPInfo[Al_Secs] > 9)format(strings[1],5,"%d",PJMAPInfo[Al_Secs]);
	    else format(strings[1],5,"0%d",PJMAPInfo[Al_Secs]);

		if(PJMAPInfo[Al_Mils] > 9)format(strings[2],5,"%d",PJMAPInfo[Al_Mils]);
	    else format(strings[2],5,"0%d",PJMAPInfo[Al_Mils]);

    	format(str,sizeof(str),"%s:%s:%s",strings[0],strings[1],strings[2]);
		TextDrawSetString(PJTXTD[Al_Time], str);
	}
	

	if(DMMAPInfo[dStarted] != 1 && DMMAPInfo[Al_Mils] != -1)
	{
		DMMAPInfo[Al_Mils] = -1;
	}
	if(DMMAPInfo[Al_Mils] != -1)
	{
		new strs[5][5], str[10];
		DMMAPInfo[Al_Mils]++;
		if(DMMAPInfo[Al_Mils] >= 99)
		{
		    DMMAPInfo[Al_Mils] = 0;
			DMMAPInfo[Al_Secs]++;
		}
		if(DMMAPInfo[Al_Secs] >= 59)
		{
		    DMMAPInfo[Al_Secs] = 0;
			DMMAPInfo[Al_Mins]++;
		}
		if(DMMAPInfo[Al_Mins] > 9)format(strs[0],5,"%d",DMMAPInfo[Al_Mins]);
	    else format(strs[0],5,"0%d",DMMAPInfo[Al_Mins]);

		if(DMMAPInfo[Al_Secs] > 9)format(strs[1],5,"%d",DMMAPInfo[Al_Secs]);
	    else format(strs[1],5,"0%d",DMMAPInfo[Al_Secs]);

		if(DMMAPInfo[Al_Mils] > 9)format(strs[2],5,"%d",DMMAPInfo[Al_Mils]);
	    else format(strs[2],5,"0%d",DMMAPInfo[Al_Mils]);

    	format(str,sizeof(str),"%s:%s:%s",strs[0],strs[1],strs[2]);
		TextDrawSetString(DMTXTD[Al_Time], str);
	}
	return 1;
}

stock ShowPJMapTime()
{
    new strings[5][5], string[30];
	if(PJMAPInfo[Al_Mils] > 9)format(strings[0],5,"%d",PJMAPInfo[Al_Mils]);
    else format(strings[0],5,"0%d",PJMAPInfo[Al_Mils]);

	if(PJMAPInfo[Al_Secs] > 9)format(strings[1],5,"%d",PJMAPInfo[Al_Secs]);
    else format(strings[1],5,"0%d",PJMAPInfo[Al_Secs]);

	if(PJMAPInfo[Al_Mins] > 9)format(strings[2],5,"%d",PJMAPInfo[Al_Mins]);
    else format(strings[2],5,"0%d",PJMAPInfo[Al_Mins]);
    format(string,sizeof string,"%s:%s:%s",strings[2],strings[1],strings[0]);
	return string;
}
stock CheckTopTimesPJ(playerid)
{
	//printf("DEBUG CFONTROL CheckTopTimesPJ 1");
    new string[100], pos = 5;
	forLoop(i, MAX_PJ_BEST_LINES)
	{
		if(PJBest[i][bMins] == 0 && PJBest[i][bSecs] == 0 && PJBest[i][bMils] == 0)
		{
		    PJBest[i][bMins] = 99;
	        PJBest[i][bSecs] = 99;
	        PJBest[i][bMils] = 99;
		}
	}
    forLoop(i, MAX_PJ_BEST_LINES)
	{
	    if(PJMAPInfo[Al_Mins] < PJBest[i][bMins])
        {
			pos = i;
			break;
        }
        else if(PJMAPInfo[Al_Mins] == PJBest[i][bMins])
        {
            if(PJMAPInfo[Al_Secs] < PJBest[i][bSecs])
            {
				pos = i;
				break;
            }
            else if(PJMAPInfo[Al_Secs] == PJBest[i][bSecs])
            {
                if(PJMAPInfo[Al_Mils] < PJBest[i][bMils])
                {
					pos = i;
					break;
                }
            }
        }
	}
	if(pos < 5)
	{
        if(pos == 0)
        {
            format(PJBest[4][Name], 50,"%s",PJBest[3][Name]);
		    PJBest[4][bMins] = PJBest[3][bMins];
	        PJBest[4][bSecs] = PJBest[3][bSecs];
	        PJBest[4][bMils] = PJBest[3][bMils];

	        format(PJBest[3][Name], 50,"%s",PJBest[2][Name]);
		    PJBest[3][bMins] = PJBest[2][bMins];
	        PJBest[3][bSecs] = PJBest[2][bSecs];
	        PJBest[3][bMils] = PJBest[2][bMils];

	        format(PJBest[2][Name], 50,"%s",PJBest[1][Name]);
		    PJBest[2][bMins] = PJBest[1][bMins];
	        PJBest[2][bSecs] = PJBest[1][bSecs];
	        PJBest[2][bMils] = PJBest[1][bMils];

	        format(PJBest[1][Name], 50,"%s",PJBest[0][Name]);
		    PJBest[1][bMins] = PJBest[0][bMins];
	        PJBest[1][bSecs] = PJBest[0][bSecs];
	        PJBest[1][bMils] = PJBest[0][bMils];

            format(PJBest[0][Name], 50,"%s",PlayerInfo[playerid][Name]);
		    PJBest[0][bMins] = PJMAPInfo[Al_Mins];
	        PJBest[0][bSecs] = PJMAPInfo[Al_Secs];
	        PJBest[0][bMils] = PJMAPInfo[Al_Mils];
	        format(string, sizeof string, "{33FF33}PJ MSG:{FFFFFF} %s has gotten the 1st Top Time!(+$500)",PlayerInfo[playerid][Name]);
	        SendMessageToMode(PJ,COLOR_WHITE, string);
		    GiveThePlayerMoney(playerid, 500);
        }
        if(pos == 1)
        {
	        format(PJBest[4][Name], 50,"%s",PJBest[3][Name]);
		    PJBest[4][bMins] = PJBest[3][bMins];
	        PJBest[4][bSecs] = PJBest[3][bSecs];
	        PJBest[4][bMils] = PJBest[3][bMils];

	        format(PJBest[3][Name], 50,"%s",PJBest[2][Name]);
		    PJBest[3][bMins] = PJBest[2][bMins];
	        PJBest[3][bSecs] = PJBest[2][bSecs];
	        PJBest[3][bMils] = PJBest[2][bMils];

	        format(PJBest[2][Name], 50,"%s",PJBest[1][Name]);
		    PJBest[2][bMins] = PJBest[1][bMins];
	        PJBest[2][bSecs] = PJBest[1][bSecs];
	        PJBest[2][bMils] = PJBest[1][bMils];

            format(PJBest[1][Name], 50,"%s",PlayerInfo[playerid][Name]);
		    PJBest[1][bMins] = PJMAPInfo[Al_Mins];
	        PJBest[1][bSecs] = PJMAPInfo[Al_Secs];
	        PJBest[1][bMils] = PJMAPInfo[Al_Mils];
	        format(string, sizeof string, "{33FF33}PJ MSG:{FFFFFF} %s has gotten the 2nd Top Time!",PlayerInfo[playerid][Name]);
	        SendMessageToMode(PJ,COLOR_WHITE, string);
        }
        if(pos == 2)
        {
	        format(PJBest[4][Name], 50,"%s",PJBest[3][Name]);
		    PJBest[4][bMins] = PJBest[3][bMins];
	        PJBest[4][bSecs] = PJBest[3][bSecs];
	        PJBest[4][bMils] = PJBest[3][bMils];

	        format(PJBest[3][Name], 50,"%s",PJBest[2][Name]);
		    PJBest[3][bMins] = PJBest[2][bMins];
	        PJBest[3][bSecs] = PJBest[2][bSecs];
	        PJBest[3][bMils] = PJBest[2][bMils];

            format(PJBest[2][Name], 50,"%s",PlayerInfo[playerid][Name]);
		    PJBest[2][bMins] = PJMAPInfo[Al_Mins];
	        PJBest[2][bSecs] = PJMAPInfo[Al_Secs];
	        PJBest[2][bMils] = PJMAPInfo[Al_Mils];
	        format(string, sizeof string, "{33FF33}PJ MSG:{FFFFFF} %s has gotten the 3rd Top Time!",PlayerInfo[playerid][Name]);
	        SendMessageToMode(PJ,COLOR_WHITE, string);
        }
        if(pos == 3)
        {
	        format(PJBest[4][Name], 50,"%s",PJBest[3][Name]);
		    PJBest[4][bMins] = PJBest[3][bMins];
	        PJBest[4][bSecs] = PJBest[3][bSecs];
	        PJBest[4][bMils] = PJBest[3][bMils];

            format(PJBest[3][Name], 50,"%s",PlayerInfo[playerid][Name]);
		    PJBest[3][bMins] = PJMAPInfo[Al_Mins];
	        PJBest[3][bSecs] = PJMAPInfo[Al_Secs];
	        PJBest[3][bMils] = PJMAPInfo[Al_Mils];
	        format(string, sizeof string, "{33FF33}PJ MSG:{FFFFFF} %s has gotten the 4th Top Time!",PlayerInfo[playerid][Name]);
	        SendMessageToMode(PJ,COLOR_WHITE, string);
        }
        if(pos == 4)
        {
	        format(PJBest[4][Name], 50,"%s",PlayerInfo[playerid][Name]);
		    PJBest[4][bMins] = PJMAPInfo[Al_Mins];
	        PJBest[4][bSecs] = PJMAPInfo[Al_Secs];
	        PJBest[4][bMils] = PJMAPInfo[Al_Mils];
	        format(string, sizeof string, "{33FF33}PJ MSG:{FFFFFF} %s has gotten the 5th Top Time!",PlayerInfo[playerid][Name]);
	        SendMessageToMode(PJ,COLOR_WHITE, string);
        }
        UpdatePJTTText();
        forLoop(i, MAX_PLAYERS)
		{
			if(IsPlayerConnected(i) && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][PlayerMode] == PJ && !IsPlayerNPC(i))
			{
			    ShowPJTTText(i);
			}
		}
	}
}

forward ChooseRandomMapPJ(pathname[]);
public ChooseRandomMapPJ(pathname[])
{
    new id, mnames[MAX_PJ_MAPS];
    forLoop(i, MAX_PJ_MAPS)
    {
    	if(PJMapsInfo[i][Exists] == 1)
    	{
    	    if(!(strfind(PJMapsInfo[i][pathName], pathname, true) != -1))
			{
			    mnames[id] = i;
                id++;
			}
    	}
    }
	if(id >= MAX_PJ_MAPS)id = MAX_PJ_MAPS-1;
    LoadPJMap(mnames[random(id)]);
}

stock SearchForMapNamePJ(mname[])
{
	new id = -1;
    forLoop(i, MAX_PJ_MAPS)
    {
    	if(PJMapsInfo[i][Exists] == 1)
    	{
    	    if(strfind(PJMapsInfo[i][mName], mname, true) != -1)
			{
			    id = i;
			    break;
			}
    	}
    }
	return id;
}

forward CheckPJMapItemsForPlayer(playerid);
public CheckPJMapItemsForPlayer(playerid)
{
	if(!IsPlayerConnected(playerid) || IsPlayerNPC(playerid))return 0;
	if(PlayerInfo[playerid][PlayerMode] == PJ && PlayerInfo[playerid][Spawned] == 1 && PJPlayerInfo[playerid][Alive] == 1 && PJMAPInfo[dStarted] == 1)
	{
	    new Float:x, Float:z;
		GetPlayerPos(playerid,x,x,z);
		if(z <= PJMAPInfo[LowestZ] && PJPlayerInfo[playerid][InDuel] == 0 && PJPlayerInfo[playerid][Respawning] == 0)
		{
		    if(PJMAPInfo[TimeLeft] >= 595)
		    {
            	ResetWeapons(playerid);
		        PJMapDisqualifyPlayer(playerid, 1 ,1);
		        return 0;
		    }
		    new string[180];
		    format(string, sizeof string, "~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~w~%s reached ~r~Duel",FixpInfoName(playerid));
		    forLoop(i, MAX_PLAYERS)
			{
				if(IsPlayerConnected(i) && PJMAPInfo[dStarted] == 1 && PJPlayerInfo[i][Alive] == 1 && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][PlayerMode] == PJ && !IsPlayerNPC(i))
				{
				    GameTextForPlayer(i, string, 2000, 3);
				}
			}
            ResetWeapons(playerid);
		    format(string, sizeof string, "{33FF33}PJ MSG:{FFFFFF} %s reached the {FF0000}DUEL!{FFFFFF}(%s)(+$250)",PlayerInfo[playerid][Name],ShowPJMapTime());
            SendMessageToMode(PJ,COLOR_WHITE, string);
			PJPlayerInfo[playerid][Finishes]++;
		    new duelers=0;
		    forLoop(i, MAX_PLAYERS)
			{
				if(IsPlayerConnected(i) && PJMAPInfo[dStarted] == 1 && PJPlayerInfo[i][Alive] == 1 && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][PlayerMode] == PJ && !IsPlayerNPC(i))
				{
				    if(PJPlayerInfo[i][InDuel] == 1)
				    {
						duelers++;
					}
				}
			}
			if(duelers == 0)
			{
			    KillTimer(PJMAPInfo[DuelTimer]);
			    PJMAPInfo[DuelTimer] = SetTimer("SlayAllNonDuelers", 12000, false);
            	SendMessageToMode(PJ,COLOR_WHITE, "{FF0000}PJ MSG:{FFFFFF} All non-dueling players will be slayed in 10 seconds.");
            }
			PJPlayerInfo[playerid][Camper] = 0;
		    if(PJPlayerInfo[playerid][rRespawn] == 0)CheckTopTimesPJ(playerid);
		    GiveThePlayerMoney(playerid, 250);
			ChangeModeScore(playerid, (PJMapAlivePlayers()-duelers)*3);
			if(PJMapAlivePlayers() == 1)
			{
			    PJMapDisqualifyPlayer(playerid, 1 ,1);
			}else PlaceInDuelPJ(playerid);
		}
		forLoop(id, MAX_PJ_ITEMS)
		{
		    if(PJMAPInfo[iExists][id] == 1)
			{
				if(IsPlayerInRangeOfPoint(playerid, 6.5, PJMAPInfo[iX][id],PJMAPInfo[iY][id],PJMAPInfo[iZ][id]))
				{
				    if(PJPlayerInfo[playerid][iEntered][id] == 0)
				    {
						switch(PJMAPInfo[iType][id])
						{
						    case 0:
						    {
						        GiveWeapon(playerid,WEAPON_PARACHUTE,1);
								PJPlayerInfo[playerid][iEntered][id] = 1;
						    }
						}
					}
				}else PJPlayerInfo[playerid][iEntered][id] = 0;
			}
		}
	}
	return 1;
}
forward SlayAllNonDuelers();
public SlayAllNonDuelers()
{
	//printf("DEBUG CFONTROL SlayAllNonDuelers 1");
    forLoop(i, MAX_PLAYERS)
	{
		if(IsPlayerConnected(i) && PJMAPInfo[dStarted] == 1 && PJPlayerInfo[i][Alive] == 1 && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][PlayerMode] == PJ && !IsPlayerNPC(i))
		{
		    if(PJPlayerInfo[i][InDuel] == 0)
		    {
		        ResetWeapons(i);
		        PJMapDisqualifyPlayer(i, 1 ,1);
		    }
		}
	}
	KillTimer(PJMAPInfo[DuelTimer]);
	//printf("DEBUG CFONTROL SlayAllNonDuelers 2");
}
forward GivePJDuelWeapons(playerid);
public GivePJDuelWeapons(playerid)
{
	//printf("DEBUG CFONTROL GivePJDuelWeapons 1");
	if(!(IsPlayerConnected(playerid) && PJMAPInfo[dStarted] == 1 && PJPlayerInfo[playerid][Alive] == 1 && PlayerInfo[playerid][Spawned] == 1 && PlayerInfo[playerid][PlayerMode] == PJ && !IsPlayerNPC(playerid)))
	    return 0;
    if(PJPlayerInfo[playerid][InDuel] == 0)return 0;
    GivePlayerWeapons(playerid,WEAPON_CHAINSAW,1,WEAPON_GRENADE,900,WEAPON_DEAGLE,900,WEAPON_SHOTGSPA,900);
	GivePlayerWeapons(playerid,WEAPON_MP5,900,WEAPON_M4,900,WEAPON_SNIPER,900,WEAPON_FIREEXTINGUISHER,1900);
	//printf("DEBUG CFONTROL GivePJDuelWeapons 2");
	return 1;
}
stock PlaceInDuelPJ(playerid)
{
	SetPlayerVirtualWorld(playerid, W_PJ_DUEL);
    SetPlayerInterior(playerid, 0);
    PJPlayerInfo[playerid][InDuel] = 1;
    SetPlayerTime(playerid, 12, 0);
 	SetPlayerWeather(playerid, 0);
    switch(random(8))
    {
		case 0:SetPlayerPosEx(playerid, -1819.0730, 576.3841, 235.6945, random(360));
		case 1:SetPlayerPosEx(playerid, -1805.0311, 576.3236, 235.8516, random(360));
		case 2:SetPlayerPosEx(playerid, -1784.5823, 567.2448, 235.4321, random(360));
		case 3:SetPlayerPosEx(playerid, -1793.7960, 547.7330, 235.4774, random(360));
		case 4:SetPlayerPosEx(playerid, -1812.9115, 535.6093, 235.2967, random(360));
		case 5:SetPlayerPosEx(playerid, -1819.5903, 545.8589, 235.1568, random(360));
		case 6:SetPlayerPosEx(playerid, -1826.3896, 557.4287, 234.8448, random(360));
		case 7:SetPlayerPosEx(playerid, -1832.9585, 576.2440, 235.0725, random(360));
	}
	forLoop(u, MAX_PLAYERS)
	{
	    if(IsPlayerConnected(u) && PlayerInfo[u][Spawned] == 1 && PlayerInfo[u][PlayerMode] == PJ && !IsPlayerNPC(u) && GetPlayerState(u) == PLAYER_STATE_SPECTATING && PJPlayerInfo[u][SpecID] == playerid)
		{
	       	PJ_StartSpectate(u, playerid);
		    SetPlayerTime(u, 12, 0);
		 	SetPlayerWeather(u, 0);
		}
	}
	SetTimerEx("GivePJDuelWeapons", 1000, false, "i", playerid);
}
//========================[DMDD]=========================
stock SaveDMMap()
{
	new string2[256], File:fwhnd;
	if(ServerInfo[DebugMode] == 1)printf("DM DEBUG: MAP START SAVING DIR: %s",DMMAPInfo[pathName]);
	format(string2, sizeof string2, "/pangea/DDDM/%s/Info.txt",DMMAPInfo[pathName]);
	if(fexist(string2))
	{
    	fwhnd=fopen(string2,io_write);
		format(string2,sizeof string2,"%s|%s|%d|%d|%d|%d|%s",DMMAPInfo[mName], DMMAPInfo[Author], ModeWeather[DM], ModeTime[DM]
			,DMMAPInfo[Type], DMMAPInfo[Rating], DMMAPInfo[sLink]);
		fwrite(fwhnd,string2);
		fwrite(fwhnd,"\r\n");
		fclose(fwhnd);
	}
	format(string2, sizeof string2, "/pangea/DDDM/%s/TTs.txt",DMMAPInfo[pathName]);
	if(fexist(string2))
	{
    	fwhnd=fopen(string2,io_write);
		forLoop(i, MAX_DM_BEST_LINES)
		{
			format(string2,sizeof string2,"%s|%d|%d|%d"
			,DMBest[i][Name],DMBest[i][bMins],DMBest[i][bSecs],DMBest[i][bMils]);
			fwrite(fwhnd,string2);
			fwrite(fwhnd,"\r\n");
		}
		fclose(fwhnd);
	}
	if(ServerInfo[DebugMode] == 1)printf("DM DEBUG: MAP STOP SAVING DIR: %s",DMMAPInfo[pathName]);
}

stock UpdateDMMaps()
{
    forLoop(i, MAX_DM_MAPS)
    {
        DMMapsInfo[i][Exists] = 0;
        forLoop(id, DM_MAX_OBJECTS)
	    {
	        DMMapsInfo[i][oExists][id] = 0;
	    }
	    forLoop(id, DM_MAX_MARKERS)
		{
	        DMMapsInfo[i][vExists][id] = 0;
		}
	    forLoop(id, MAX_DM_ITEMS)
	    {
	        DMMapsInfo[i][iExists][id] = 0;
	    }
	    forLoop(id, MAX_DM_CP)
		{
	        DMMapsInfo[i][cExists][id] = 0;
		}
	    forLoop(id, DM_MAX_SPOTS)
	    {
	        DMMapsInfo[i][sExists][id] = 0;
	    }
    }
	new itemID, objID, spawnID, cpID=-1, gID;
	new objecttype;
	new Float:ObjX;
	new Float:ObjY;
	new Float:ObjZ;
	new Float:ObjRot1;
	new Float:ObjRot2;
	new Float:ObjRot3;
	
	new name[50], File:file_ptr, line[256], id, filename[256], filename2[256], not, not2[2];
    new dir:handle=dir_open("scriptfiles/pangea/DDDM/"), fType;
	new	loop_breaker;
	while(dir_list(handle, filename, fType))
	{
		if(breakLoop(++loop_breaker, "UpdateDMMaps"))break;
	    if(fType == 1)
		{
		    if(strlen(filename) > 2 && !(strfind(filename, "DONT USE", true) != -1))
		    {
				format(filename2, sizeof filename2, "/pangea/DDDM/%s/Info.txt",filename);
				if(fexist(filename2))
				{
					file_ptr = fopen(filename2, io_read);
					if(file_ptr)
					{
						while(fread(file_ptr,line, sizeof(line)) > 0)
						{
						    sscanf(line,"p<|>s[50]s[50]dddds[50]",name, not2, not, not, not, not, not2);
							break;
						}
						if(id >= MAX_DM_MAPS)
						{
			    			printf("ERROR: DM ERROR MAX MAPS REACHED");
						    break;
						}
					}
					fclose(file_ptr);
				}
				else
				{
				    printf("ERROR: DM MAP DIR: %s HAS NO INFO - LOADING ANOTHER MAP",filename);
					continue;
				}
				format(filename2, sizeof filename2, "/pangea/DDDM/%s/Spawns.txt",filename);
				if(fexist(filename2))
				{
					file_ptr = fopen(filename2, io_read);
				    while(fread(file_ptr,line, sizeof(line)) > 0)
					{
					    if(spawnID >= DM_MAX_SPOTS)
						{
						    printf("ERROR: DM MAP DIR: %s MAX NUMBER OF SPAWNS REACHED",filename);
							continue;
						}
					    DMMapsInfo[id][sExists][spawnID] = 1;
					    sscanf(line,"p<|>dffff", DMMapsInfo[id][sVehID][spawnID],DMMapsInfo[id][sX][spawnID], DMMapsInfo[id][sY][spawnID],
						   DMMapsInfo[id][sZ][spawnID], DMMapsInfo[id][sAng][spawnID]);
						spawnID++;
					}
					fclose(file_ptr);
				}
				else
				{
				    printf("ERROR: DM MAP DIR: %s HAS NO SPAWNS - LOADING ANOTHER MAP",filename);
					continue;
				}
				if(spawnID == 0)
				{
				    printf("ERROR: DM MAP DIR: %s HAS NO SPAWNS - LOADING ANOTHER MAP",filename);
					continue;
				}

			    format(filename2, sizeof filename2, "/pangea/DDDM/%s/Objects.txt",filename);
				if(fexist(filename2))
				{
					file_ptr = fopen(filename2, io_read);
				    while(fread(file_ptr,line, sizeof(line)) > 0)
					{
					    if(objID >= DM_MAX_OBJECTS)
						{
						    printf("ERROR: DM MAP DIR: %s MAX NUMBER OF OBJECTS REACHED",filename);
							continue;
						}
					    sscanf(line,"p<,>dffffff",objecttype, ObjX, ObjY, ObjZ, ObjRot1, ObjRot2, ObjRot3);
			            if(!IsValidObjectModel(objecttype))
			            {
			                printf("ERROR: DM MAP DIR: %s INVALID OBJECT MODEL %d",filename,objecttype);
							continue;
			            }
			            DMMapsInfo[id][oExists][objID] = 1;
						DMMapsInfo[id][oModel][objID] = objecttype;
						DMMapsInfo[id][ox][objID] = ObjX;
						DMMapsInfo[id][oy][objID] = ObjY;
						DMMapsInfo[id][oz][objID] = ObjZ;
						DMMapsInfo[id][orx][objID] = ObjRot1;
						DMMapsInfo[id][ory][objID] = ObjRot2;
						DMMapsInfo[id][orz][objID] = ObjRot3;
						objID++;
					}
					fclose(file_ptr);
				}

				format(filename2, sizeof filename2, "/pangea/DDDM/%s/Items.txt",filename);
				if(fexist(filename2))
				{
					file_ptr = fopen(filename2, io_read);
				    while(fread(file_ptr,line, sizeof(line)) > 0)
					{
					    if(itemID >= MAX_DM_ITEMS)
						{
						    printf("ERROR: DM MAP DIR: %s MAX NUMBER OF ITEMS REACHED",filename);
							continue;
						}
						sscanf(line,"p<|>dfff", DMMapsInfo[id][iType][itemID],DMMapsInfo[id][iX][itemID], DMMapsInfo[id][iY][itemID], DMMapsInfo[id][iZ][itemID]);

						DMMapsInfo[id][iExists][itemID] = 1;
						itemID++;
					}
					fclose(file_ptr);
				}

				format(filename2, sizeof filename2, "/pangea/DDDM/%s/CPs.txt",filename);
				if(fexist(filename2))
				{
					file_ptr = fopen(filename2, io_read);
				    while(fread(file_ptr,line, sizeof(line)) > 0)
					{
					    if((cpID+1) >= MAX_DM_CP)
						{
						    printf("ERROR: DM MAP DIR: %s MAX NUMBER OF CPs REACHED",filename);
							continue;
						}
						new type, next, size;
					    sscanf(line,"p<|>ddddfff", cpID, type, next, size, ObjX, ObjY, ObjZ);

                        DMMapsInfo[id][cID][cpID] = cpID;
						DMMapsInfo[id][cType][cpID] = type;
						DMMapsInfo[id][cNext][cpID] = next;
						DMMapsInfo[id][cSize][cpID] = size;
						DMMapsInfo[id][cX][cpID] = ObjX;
						DMMapsInfo[id][cY][cpID] = ObjY;
						DMMapsInfo[id][cZ][cpID] = ObjZ;
						DMMapsInfo[id][cExists][cpID] = 1;
					}
					fclose(file_ptr);
				}

				format(filename2, sizeof filename2, "/pangea/DDDM/%s/Velos.txt",filename);
				if(fexist(filename2))
				{
					file_ptr = fopen(filename2, io_read);
				    while(fread(file_ptr,line, sizeof(line)) > 0)
					{
					    sscanf(line, "p<|>fffffddddfffdddfff"
						,DMMapsInfo[id][vpX][gID],DMMapsInfo[id][vpY][gID],DMMapsInfo[id][vpZ][gID],DMMapsInfo[id][vpRange][gID]
						,DMMapsInfo[id][vAng][gID],DMMapsInfo[id][vFreeze][gID]

						,DMMapsInfo[id][vtTypeX][gID],DMMapsInfo[id][vtTypeY][gID],DMMapsInfo[id][vtTypeZ][gID]
						,DMMapsInfo[id][vtX][gID],DMMapsInfo[id][vtY][gID],DMMapsInfo[id][vtZ][gID]
						,DMMapsInfo[id][vvTypeX][gID],DMMapsInfo[id][vvTypeY][gID],DMMapsInfo[id][vvTypeZ][gID]
						,DMMapsInfo[id][vvX][gID],DMMapsInfo[id][vvY][gID],DMMapsInfo[id][vvZ][gID]);
			        	DMMapsInfo[id][vExists][gID] = 1;
						gID++;
					}
					fclose(file_ptr);
				}
				objID = 0;
				gID = 0;
				itemID = 0;
				spawnID = 0;
				DMMapsInfo[id][Exists] = 1;
				format(DMMapsInfo[id][pathName], 50, "%s", filename);
				format(DMMapsInfo[id][mName], 50, "%s", name);
				id++;
			}
		}
	}
	dir_close(handle);
    /*forLoop(i, MAX_DM_MAPS)
    {
        if(DMMapsInfo[i][Exists] == 1)
        {
            printf("id %d - path %s - name %s", i, DMMapsInfo[i][pathName], DMMapsInfo[i][mName]);
        }
    }*/
}

stock LoadDMMap(id)
{
	new start = GetTickCount(), end;
	
	DeleteDMMapStuff();
	KillTimer(DMMAPInfo[rMapTimer]);
	KillTimer(DMMAPInfo[AllWorldTimer]);
    if(!LoadTheDMMap(id))//ChooseRandomMapDM(DMMAPInfo[pathName]);
     	DMMAPInfo[rMapTimer] = SetTimer("ChooseRandomMapDMTimer", 1000, false);
	db_UpdateSettings(DM);
    new strk[120];
	format(strk, sizeof strk, "~w~Map: ~h~~b~%s~n~~w~By: ~h~~b~%s~w~~n~~w~Rating: ~h~~b~%d/10",FixpInfoString(DMMAPInfo[mName], 0), FixpInfoString(DMMAPInfo[Author], 0), DMMAPInfo[Rating]);
	TextDrawSetString(DMTXTD[Text], strk);
	
	end = GetTickCount();
	printf("DEBUG CFONTROL LoadDMMap 2 s %d e %d = %d", start, end, end-start);
	return 1;
}
forward ChooseRandomMapDMTimer();
public ChooseRandomMapDMTimer()
{
	KillTimer(DMMAPInfo[rMapTimer]);
	KillTimer(DMMAPInfo[AllWorldTimer]);
    ChooseRandomMapDM(DMMAPInfo[pathName]);
}

stock LoadTheDMMap(i)
{
	new File:file_ptr;
	new folder[50];
	format(folder, sizeof folder, "%s", DMMapsInfo[i][pathName]);
	if(ServerInfo[DebugMode] == 1)printf("DM DEBUG: TRYING MAP DIR: %s",folder);

	new line[128], filename[256], string[100];
	new itemID, objID, spawnID, cpID = -1, gID, Float:yOffSet = 0.5;

	new worlds[DM_MAX_SPOTS];
	forLoop(w, sizeof worlds)worlds[w] = W_DM+w;

    //loading map info
	format(filename, sizeof filename, "/pangea/DDDM/%s/Info.txt",folder);
    if(fexist(filename))
	{
		file_ptr = fopen(filename, io_read);
		while(fread(file_ptr,line, sizeof(line)) > 0)
		{
		    sscanf(line,"p<|>s[50]s[50]dddds[50]",DMMAPInfo[mName], DMMAPInfo[Author], ModeWeather[DM], ModeTime[DM]
				,DMMAPInfo[Type], DMMAPInfo[Rating], DMMAPInfo[sLink]);
		    break;
		}
		fclose(file_ptr);
	}
	else
	{
        printf("ERROR: DM MAP DIR: %s - NO Info FILE - LOADING NEW MAP",folder);
		return false;
	}
    forLoop(id, DM_MAX_SPOTS)
    {
        if(DMMapsInfo[i][sExists][id] == 1)
        {
            DMMAPInfo[sExists][spawnID] = 1;
		    DMMAPInfo[sTaken][spawnID] = 0;

			DMMAPInfo[sVehID][spawnID] = DMMapsInfo[i][sVehID][id];
			DMMAPInfo[sX][spawnID] = DMMapsInfo[i][sX][id];
			DMMAPInfo[sY][spawnID]= DMMapsInfo[i][sY][id];
   			DMMAPInfo[sZ][spawnID] = DMMapsInfo[i][sZ][id];
			DMMAPInfo[sAng][spawnID] = DMMapsInfo[i][sAng][id];

		    DMMAPInfo[sZ][spawnID] += yOffSet;
			spawnID++;
        }
    }
	if(spawnID == 0)
	{
	    printf("ERROR: DM MAP DIR: %s HAS NO SPAWNS - LOADING ANOTHER MAP",folder);
		return false;
	}
	if(DMMAPInfo[sVehID][0]  < 400 || DMMAPInfo[sVehID][0] > 611)
	{
	    printf("ERROR: DM MAP DIR: %s HAS NO VEHICLE ON SPAWN - LOADING ANOTHER MAP",folder);
		return false;
	}

    forLoop(id, DM_MAX_OBJECTS)
    {
        if(DMMapsInfo[i][oExists][id] == 1)
        {
            DMObjects[objID][oExists] = 1;
			DMObjects[objID][oModel] = DMMapsInfo[i][oModel][id];
			DMObjects[objID][ox] = DMMapsInfo[i][ox][id];
			DMObjects[objID][oy] = DMMapsInfo[i][oy][id];
			DMObjects[objID][oz] = DMMapsInfo[i][oz][id]+yOffSet;
			DMObjects[objID][orx] = DMMapsInfo[i][orx][id];
			DMObjects[objID][ory] = DMMapsInfo[i][ory][id];
			DMObjects[objID][orz] = DMMapsInfo[i][orz][id];
			objID++;
        }
    }
    
    forLoop(id, DM_MAX_MARKERS)
	{
        if(DMMapsInfo[i][vExists][id] == 1)
        {
            DMMAPInfo[vpX][gID] = DMMapsInfo[i][vpX][id];
			DMMAPInfo[vpY][gID] = DMMapsInfo[i][vpY][id];
			DMMAPInfo[vpZ][gID] = DMMapsInfo[i][vpZ][id];
			DMMAPInfo[vpRange][gID] = DMMapsInfo[i][vpRange][id];
			DMMAPInfo[vAng][gID] = DMMapsInfo[i][vAng][id];
			DMMAPInfo[vFreeze][gID] = DMMapsInfo[i][vFreeze][id];

			DMMAPInfo[vtTypeX][gID] = DMMapsInfo[i][vtTypeX][id];
			DMMAPInfo[vtTypeY][gID] = DMMapsInfo[i][vtTypeY][id];
			DMMAPInfo[vtTypeZ][gID] = DMMapsInfo[i][vtTypeZ][id];
			DMMAPInfo[vtX][gID] = DMMapsInfo[i][vtX][id];
			DMMAPInfo[vtY][gID] = DMMapsInfo[i][vtY][id];
			DMMAPInfo[vtZ][gID] = DMMapsInfo[i][vtZ][id];
			DMMAPInfo[vvTypeX][gID] = DMMapsInfo[i][vvTypeX][id];
			DMMAPInfo[vvTypeY][gID] = DMMapsInfo[i][vvTypeY][id];
			DMMAPInfo[vvTypeZ][gID] = DMMapsInfo[i][vvTypeZ][id];
			DMMAPInfo[vvX][gID] = DMMapsInfo[i][vvX][id];
			DMMAPInfo[vvY][gID] = DMMapsInfo[i][vvY][id];
			DMMAPInfo[vvZ][gID] = DMMapsInfo[i][vvZ][id];
        	DMMAPInfo[vExists][gID] = 1;
			gID++;
        }
	}
    forLoop(id, MAX_DM_ITEMS)
    {
        if(DMMapsInfo[i][iExists][id] == 1)
        {
			DMMAPInfo[iType][itemID] = DMMapsInfo[i][iType][id];
			DMMAPInfo[iX][itemID] = DMMapsInfo[i][iX][id];
			DMMAPInfo[iY][itemID] = DMMapsInfo[i][iY][id];
			DMMAPInfo[iZ][itemID] = DMMapsInfo[i][iZ][id];

			switch(DMMAPInfo[iType][itemID])
			{
			    case 0:format(string,sizeof(string),"{FF0000}[{FFFFFF}REPAIR{FF0000}]");
			    case 1:format(string,sizeof(string),"{FF0000}[{FFFFFF}NITRO{FF0000}]");
			    default:format(string,sizeof(string),"{FF0000}[{FFFFFF}%s{FF0000}]",VehicleNames[DMMAPInfo[iType][itemID]-400]);
			}
			DMMAPInfo[iExists][itemID] = 1;
            DMMAPInfo[iZ][itemID] += yOffSet;
			DMMAPInfo[iText][itemID] = CreateDynamic3DTextLabelEx(string, 0xffffffAA, DMMAPInfo[iX][itemID],DMMAPInfo[iY][itemID],DMMAPInfo[iZ][itemID], 70, INVALID_PLAYER_ID, INVALID_VEHICLE_ID,
				0, STREAMER_3D_TEXT_LABEL_SD, worlds);
			itemID++;
        }
    }
    forLoop(id, MAX_DM_CP)
	{
        if(DMMapsInfo[i][cExists][id] == 1)
        {
            cpID = DMMapsInfo[i][cID][id];
			DMMAPInfo[cType][cpID] = DMMapsInfo[i][cType][id];
			DMMAPInfo[cNext][cpID] = DMMapsInfo[i][cNext][id];
			DMMAPInfo[cSize][cpID] = DMMapsInfo[i][cSize][id];
			DMMAPInfo[cX][cpID] = DMMapsInfo[i][cX][id];
			DMMAPInfo[cY][cpID] = DMMapsInfo[i][cY][id];
			DMMAPInfo[cZ][cpID] = DMMapsInfo[i][cZ][id]+yOffSet;
			DMMAPInfo[cExists][cpID] = 1;
			DMMAPInfo[Type] = DM_TYPE_RACE;
        }
	}
	
	forLoop(g, DM_MAX_MARKERS)
	{
	    if(DMMAPInfo[vExists][g] == 1)
	    {
	        format(string,sizeof(string),"{FF0000}[{FFFFFF}PANGEA{FF0000}]");
            DMMAPInfo[vText][g] =
				CreateDynamic3DTextLabelEx(string, 0xffffffAA, DMMAPInfo[vpX][g],DMMAPInfo[vpY][g],DMMAPInfo[vpZ][g], 70, INVALID_PLAYER_ID, INVALID_VEHICLE_ID,  0, 100.0, worlds);
		}
	}

	format(DMMAPInfo[pathName], 100, "%s",folder);//we now know that this map is valid

	//loading top times
	format(filename, sizeof filename, "/pangea/DDDM/%s/TTs.txt",folder);
    if(!fexist(filename))
	{
        forLoop(id, MAX_DM_BEST_LINES)
		{
	        format(DMBest[id][Name],100,"-");
	        DMBest[id][bMins] = 0;
	        DMBest[id][bSecs] = 0;
	        DMBest[id][bMils] = 0;
        }
		fcreate(filename);
	}
	else
	{
	    new bid;
		file_ptr = fopen(filename, io_read);
		while(fread(file_ptr,line, sizeof(line)) > 0)
		{
		    sscanf(line,"p<|>s[50]ddd"
			,DMBest[bid][Name],DMBest[bid][bMins],DMBest[bid][bSecs],DMBest[bid][bMils]);
			bid++;
		}
		fclose(file_ptr);
	}
	LoadDMObjects(0);
	if(ServerInfo[DebugMode] == 1)printf("DM DEBUG: MAP FULLY LOADED DIR: %s NAME: %s",folder, DMMAPInfo[mName]);
	return true;
}
forward LoadDMObjects(turn);
public LoadDMObjects(turn)
{
	//printf("DEBUG CFONTROL LoadDMObjects 1");
	new worlds[DM_MAX_SPOTS];
	forLoop(i, sizeof worlds) worlds[i] = W_DM+i;
	new objects = 500;
	forLoopV(id, (turn*objects), DM_MAX_OBJECTS)
    {
        #if defined DM_OBJECTS_ONE_BY_ONE
		if(id >= (turn*objects)+objects)
		{
		    turn++;
		    SetTimerEx("LoadDMObjects", 2000, false, "i", turn);
		    return 1;
		}
		#endif
    	if(DMObjects[id][oExists] == 1)
    	{
    	    DMObjects[id][oObject]=CreateDynamicObjectEx(
			DMObjects[id][oModel],
			DMObjects[id][ox],
			DMObjects[id][oy],
			DMObjects[id][oz],
			DMObjects[id][orx],
			DMObjects[id][ory],
			DMObjects[id][orz]
    	    , DRAW_DISTANCE, getVewDistance(DMObjects[id][oModel]), worlds);
    	}
    	else
		{
		    if(ServerInfo[DebugMode] == 1)
				printf("DM DEBUG: CURRENT MAP LOADING OBJECTS END");
            forLoop(i, MAX_PLAYERS)
		    {
				if(IsPlayerConnected(i) && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][PlayerMode] == DM)
				{
    				Streamer_Update(i);
				}
	        }
			return 0;
		}
	}
	//printf("DEBUG CFONTROL LoadDMObjects 2");
	return 1;
}

stock DeleteDMMapStuff()
{
	//printf("DEBUG CFONTROL DeleteDMMapStuff 1");
    DMMAPInfo[fColor] = 0;
    DMMAPInfo[fWeather] = 0;
    forLoop(id, DM_MAX_OBJECTS)
    {
    	if(DMObjects[id][oObject] != -1)DestroyTheDynamicObject(DMObjects[id][oObject]);
    	DMObjects[id][oObject] = -1;
    	DMObjects[id][oExists] = 0;
    }
    forLoop(p, DM_MAX_MARKERS)
	{
	    DMMAPInfo[vExists][p] = 0;
 		DMMAPInfo[vtTypeX][p] = 0;
 		DMMAPInfo[vtTypeY][p] = 0;
 		DMMAPInfo[vtTypeZ][p] = 0;
 		DMMAPInfo[vFreeze][p] = 0;
 		DMMAPInfo[vvTypeX][p] = 0;
 		DMMAPInfo[vvTypeY][p] = 0;
 		DMMAPInfo[vvTypeZ][p] = 0;
 		DMMAPInfo[vAng][p] = 20000.0;
 		DMMAPInfo[vvX][p] = 20000.0;
 		DMMAPInfo[vvY][p] = 20000.0;
 		DMMAPInfo[vvZ][p] = 20000.0;
 		DMMAPInfo[vtX][p] = 20000.0;
 		DMMAPInfo[vtY][p] = 20000.0;
 		DMMAPInfo[vtZ][p] = 20000.0;
    	DestroyTheDynamic3DTextLabel(DMMAPInfo[vText][p]);
	}
    forLoop(id, MAX_DM_ITEMS)
    {
        DMMAPInfo[iExists][id] = 0;
		DestroyTheDynamic3DTextLabel(DMMAPInfo[iText][id]);
    }
    forLoop(id, MAX_DM_CP)
	{
	    DMMAPInfo[cExists][id] = 0;
	}
    
    forLoop(i, MAX_DM_DB_LINES)
	{
		TextDrawSetString(DeathBoardDM[i][dText], "_");
	}
    forLoop(id, DM_MAX_SPOTS)
    {
        DMMAPInfo[sExists][id] = 0;
	    DMMAPInfo[sTaken][id] = 0;

	    DMMAPInfo[wTaken][id] = 0;
	    DMMAPInfo[wID][id] = W_DM+id;
    }
	//printf("DEBUG CFONTROL DeleteDMMapStuff 2");
}


stock DMMapAlivePlayers()
{
	//printf("DEBUG CFONTROL DMMapAlivePlayers 1");
	new count = 0;
	forLoop(i, MAX_PLAYERS) if(IsPlayerConnected(i) && DMPlayerInfo[i][Alive] == 1 && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][PlayerMode] == DM && !IsPlayerNPC(i))count++;
	//printf("DEBUG CFONTROL DMMapAlivePlayers 2");
	return count;
}
stock DMMapCampers()
{
	//printf("DEBUG CFONTROL DMMapCampers 1");
	new count = 0;
	forLoop(i, MAX_PLAYERS) if(IsPlayerConnected(i) && DMPlayerInfo[i][Camper] == 1 && DMPlayerInfo[i][Alive] == 1 && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][PlayerMode] == DM && !IsPlayerNPC(i))count++;
	//printf("DEBUG CFONTROL DMMapCampers 2");
	return count;
}

forward GiveDMCar(playerid, place);
public GiveDMCar(playerid, place)
{
	//printf("DEBUG CFONTROL GiveDMCar 1");
	if(!IsPlayerConnected(playerid) || IsPlayerNPC(playerid))return 0;
    if(PlayerInfo[playerid][Spawned] == 1 && PlayerInfo[playerid][PlayerMode] == DM)
	{
		new VehicleID, int1;
		int1 = GetPlayerInterior(playerid);
		VehicleID = AddStaticVehicleEx(DMMAPInfo[sVehID][place], DMMAPInfo[sX][place],DMMAPInfo[sY][place], DMMAPInfo[sZ][place]+2, DMMAPInfo[sAng][place], random(330), random(330),999999999999999);
		SetVehicleVirtualWorld(VehicleID,GetPlayerVirtualWorld(playerid));
		SetVehicleNumberPlate(VehicleID, DMPlayerInfo[playerid][sPlate]);
		if(DMPlayerInfo[playerid][Wheels] > 0)
			AddVehicleComponent(VehicleID, DMPlayerInfo[playerid][Wheels]);
		PlacePlayerInVehicle(playerid,VehicleID,0);
		LinkVehicleToInterior(VehicleID,int1);
		PlayerInfo[playerid][Vehicle] = VehicleID;
		//DMPlayerInfo[playerid][Alive] = 1;
		SetTimerEx("StartAudioForDDDM", 2000, false, "i", playerid);
	}
	//printf("DEBUG CFONTROL GiveDMCar 2");
	return 1;
}
forward StartAudioForDDDM(playerid);
public StartAudioForDDDM(playerid)
{
	//printf("DEBUG CFONTROL StartAudioForDDDM 1");
    if(!IsPlayerConnected(playerid) || IsPlayerNPC(playerid))return 0;
    if(PlayerInfo[playerid][Spawned] == 1 && PlayerInfo[playerid][PlayerMode] == DM)
	{
  		if(PlayerInfo[playerid][DisableSounds] == 0 && strlen(DMMAPInfo[sLink]) > 3)
		{
			new string[200];
			format(string, sizeof string, "%s",DMMAPInfo[pathName]);
			format(string, sizeof string, "%s",strreplace("[","",string));
			format(string, sizeof string, "%s",strreplace("]","_",string));
			format(string, sizeof string, "%s",strreplace(" ","_",string));
			format(string, sizeof string, "%s",strreplace("@","_at_",string));
			format(string, sizeof string, "%s",strreplace("$","_",string));
			format(string, sizeof string, "%s",strreplace("%","_",string));
			format(string, sizeof string, "http://k003.kiwi6.com/hotlink/%s/%s.mp3",DMMAPInfo[sLink],string);
			PlayAudioStreamForPlayer(playerid, string);
		}
	}
	//printf("DEBUG CFONTROL StartAudioForDDDM 2");
	return 1;
}


forward ChangeDMMapMap(pathname[]);
public ChangeDMMapMap(pathname[])
{
	//printf("DEBUG CFONTROL ChangeDMMapMap 1");
	if(DMMAPInfo[TimeLeft] >= 895)return 0;
    forLoop(i, MAX_DM_DB_LINES)
	{
		TextDrawSetString(DeathBoardDM[i][dText], "_");
	}
	DMMAPInfo[rRestart] = 0;
	if(strlen(pathname) < 2)
	{
	    DMMAPInfo[MapBought] = -1;
    	DMMAPInfo[dStarted] = 0;
		DMMAPInfo[TimeLeft] = 904;//+4 for if(DMMAPInfo[TimeLeft] >= 895)return 0;
		forLoop(i, MAX_PLAYERS)
		{
			if(IsPlayerConnected(i) && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][PlayerMode] == DM && !IsPlayerNPC(i))
			{
			    if(PlayerInfo[i][Vehicle] != -1) DestroyVehicle(PlayerInfo[i][Vehicle]);
				PlayerInfo[i][Vehicle]=-1;
				SetPVarInt(i, "MapRateDM", 1);
				DMPlayerInfo[i][Alive] = 1;
				DMPlayerInfo[i][Camper] = 0;
				DMPlayerInfo[i][Asked] = 0;
				DMPlayerInfo[i][rRespawn] = 0;
				TextDrawHideForPlayer(i,DMTXTD[mInfo]);
				HideDMAliveText(i);
				HideDMDDTexts(i);
		 		SetHealth(i,99.0);
				TogglePlayerControllable(i,false);
				ShowNewMapTextsDM(i);
				CheckPVPStatusDM(i);
				///SendClientMessage(i, white, "{FFFFFF}MAP VOTE: {33FF33}Vote for your desired map. Voting will last for 10 seconds.");
				if(GetPlayerState(i) != PLAYER_STATE_WASTED)
				{
					DM_StopSpectate(i);
					#if defined DM_SPAWN_DEADS
					SpawnPlayerTimer(i, 1000);
					#endif
				}
	            #if !defined DM_SPAWN_DEADS
	            SpawnPlayerTimer(i, DM_SPAWN_PLAYERS_TIME);
				#endif
			}
		}
	 	ChooseRandomMapDM("wadwdaa22");
		KillTimer(DMMAPInfo[Timer]);
		KillTimer(DMMAPInfo[AllWorldTimer]);
		DMMAPInfo[Timer] = SetTimer("StartDDMap", DM_START_GAME_TIME, false);
		return 1;
	}
    SaveDMMap();
    DMMAPInfo[dStarted] = 0;
	DMMAPInfo[TimeLeft] = 904;//+4 for if(DMMAPInfo[TimeLeft] >= 895)return 0;
    forLoop(i, MAX_PLAYERS)
	{
		if(IsPlayerConnected(i) && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][PlayerMode] == DM && !IsPlayerNPC(i))
		{
		    if(PlayerInfo[i][Vehicle] != -1) DestroyVehicle(PlayerInfo[i][Vehicle]);
			PlayerInfo[i][Vehicle]=-1;
			DMPlayerInfo[i][Alive] = 1;
			DMPlayerInfo[i][Camper] = 0;
			DMPlayerInfo[i][Asked] = 0;
			DMPlayerInfo[i][rRespawn] = 0;
			SetPVarInt(i, "MapRateDM", 1);
			TextDrawHideForPlayer(i,DMTXTD[mInfo]);
			HideDMAliveText(i);
			HideDMDDTexts(i);
		 	SetHealth(i,99.0);
			TogglePlayerControllable(i,false);
			ShowNewMapTextsDM(i);
			CheckPVPStatusDM(i);
			//SendClientMessage(i, white, "{FFFFFF}MAP VOTE: {33FF33}Vote for your desired map. Voting will last for 10 seconds.");
			if(GetPlayerState(i) != PLAYER_STATE_WASTED)
			{
				DM_StopSpectate(i);
    			#if defined DM_SPAWN_DEADS
				SpawnPlayerTimer(i, 1000);
				#endif
			}
            #if !defined DM_SPAWN_DEADS
            SpawnPlayerTimer(i, DM_SPAWN_PLAYERS_TIME);
			#endif
		}
	}
	if(DMMAPInfo[MapBought] != -1)
	{
	    LoadDMMap(DMMAPInfo[MapBought]);
	    DMMAPInfo[MapBought] = -1;
	}
	else ChooseRandomMapDM(pathname);
	KillTimer(DMMAPInfo[Timer]);
	KillTimer(DMMAPInfo[AllWorldTimer]);
	DMMAPInfo[Timer] = SetTimer("StartDDMap", DM_START_GAME_TIME, false);
	//LoadRandomMaps(id);
	//printf("DEBUG CFONTROL ChangeDMMapMap 2");
	return 1;
}

forward StartDDMap();
public StartDDMap()
{
	//printf("DEBUG CFONTROL StartDDMap 1");
	if(ModeCount(DM) > 0)
	{
		if(DMMAPInfo[Type] != DM_TYPE_DD)UpdateDMTTText();
	    forLoop(i, MAX_PLAYERS)
		{
			if(IsPlayerConnected(i) && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][PlayerMode] == DM && !IsPlayerNPC(i))
			{
				ToggleThePlayerSpectating(i, 0);
                if(IsPlayerInAnyVehicle(i))
                {
					RepairVehicle(GetPlayerVehicleID(i));
					if(DMMAPInfo[Type] != DM_TYPE_DD)ShowDMTTText(i);
    			}
				else DMMapDisqualifyPlayer(i, 1 ,1);
				HideNewMapTextsDM(i);
				TextDrawShowForPlayer(i,DMTXTD[mInfo]);
			}
		}
    }
    new strk[120];
	format(strk, sizeof strk, "Map: ~w~%s~n~~g~Next Map: ~w~Not set (/nextmap)",FixpInfoString(DMMAPInfo[mName], 0) );
	TextDrawSetString(DMTXTD[mInfo], strk);
	DMMAPInfo[dStarted] = 1;
	CountDownToStartDDMap(5);
	//printf("DEBUG CFONTROL StartDDMap 2");
}

forward CountDownToStartDDMap(time);
public CountDownToStartDDMap(time)
{
	//printf("DEBUG CFONTROL CountDownToStartDDMap 1");
    if(ModeCount(DM) == 0 || DMMAPInfo[dStarted] != 1)return 0;
	time--;
	if(time == 0)
	{
    	DMMAPInfo[AliveAtStart] = DMMapAlivePlayers();
    	if(DMMAPInfo[Type] == DM_TYPE_RACE || DMMAPInfo[Type] == DM_TYPE_DD)
    	{
    	    KillTimer(DMMAPInfo[AllWorldTimer]);
			SendMessageToMode(DM,red1,"{FF9900}MAP REMINDER:{FFFFFF} Everyone will be in the same world in less than 10 seconds, be prepared!");
        	DMMAPInfo[AllWorldTimer] = SetTimer("SetAllDMRaceWorld", 9000, false);
        }
        if(DMMAPInfo[Type] != DM_TYPE_RACE)
        {
			if(DMMapAlivePlayers() > MAX_DM_DB_LINES)
			{
				forLoop(i, MAX_DM_DB_LINES)
				{
				    format(DeathBoardDM[i][dStr], 50, "~g~.%d",DMMapAlivePlayers()-i);
					TextDrawSetString(DeathBoardDM[i][dText], DeathBoardDM[i][dStr]);
				}
			}
			else
			{
			    forLoop(i, MAX_DM_DB_LINES)
				{
					TextDrawSetString(DeathBoardDM[i][dText], "_");
				}
				forLoop(i, DMMapAlivePlayers())
				{
				    format(DeathBoardDM[i][dStr], 50, "~g~.%d",DMMapAlivePlayers()-i);
					TextDrawSetString(DeathBoardDM[i][dText], DeathBoardDM[i][dStr]);
				}
			}
		}
		else
		{
		    forLoop(i, MAX_DM_DB_LINES)
			{
				TextDrawSetString(DeathBoardDM[i][dText], "_");
			}
			forLoop(i, DMMapAlivePlayers())
			{
			    format(DeathBoardDM[i][dStr], 50, "~g~.%d",i+1);
				TextDrawSetString(DeathBoardDM[i][dText], DeathBoardDM[i][dStr]);
			}
		}
		/*if(DMMapAlivePlayers() < 3)
		{
		    forLoop(i, MAX_DM_DB_LINES)
			{
				TextDrawSetString(DeathBoardDM[i][dText], "_");
			}
		}*/
		DMMAPInfo[Al_Mils] = 0;
	    DMMAPInfo[Al_Secs] = 0;
	    DMMAPInfo[Al_Mins] = 0;
	    forLoop(i, MAX_PLAYERS)
		{
			if(IsPlayerConnected(i) && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][PlayerMode] == DM && !IsPlayerNPC(i))
			{
			    if(DMPlayerInfo[i][Alive] == 1)
			    {
				    GameTextForPlayer(i, " ~n~~r~ GO GO GO!", 2000, 3);
				    PlayerPlaySound(i,1057,0.0,0.0,0.0);
					ToggleThePlayerSpectating(i, 0);
					TogglePlayerControllable(i,true);
		    		DMPlayerInfo[i][PVPChecked] = 0;
					HideNewMapTextsDM(i);
					HideDMTTText(i);
				}
				ShowDMAliveText(i);
    			ShowDMDDTexts(i);
			}
		}
	    return 0;
    }
    else
    {
        new text[40];
		format(text,sizeof(text)," ~n~~w~ %d",time);
		forLoop(i, MAX_PLAYERS)
		{
			if(IsPlayerConnected(i) && DMMAPInfo[dStarted] == 1 && DMPlayerInfo[i][Alive] == 1 && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][PlayerMode] == DM && !IsPlayerNPC(i))
			{
			    GameTextForPlayer(i, text, 2000, 3);
			    PlayerPlaySound(i,1056,0.0,0.0,0.0);
			}
		}
    }
    SetTimerEx("CountDownToStartDDMap",1000,0, "i", time);
	//printf("DEBUG CFONTROL CountDownToStartDDMap 2");
    return 1;
}

forward SetAllDMRaceWorld();
public SetAllDMRaceWorld()
{
	if(DMMAPInfo[Type] == DM_TYPE_DM)return 0;
    forLoop(playerid, MAX_PLAYERS)
	{
		if(IsPlayerConnected(playerid) && DMPlayerInfo[playerid][Alive] == 1 && PlayerInfo[playerid][Spawned] == 1 && PlayerInfo[playerid][PlayerMode] == DM && !IsPlayerNPC(playerid))
		{
		  	new vehid = GetPlayerVehicleID(playerid), worldid = W_DM+2;
			SetVehicleVirtualWorld(vehid,worldid);
			SetPlayerVirtualWorld(playerid,worldid);
			PlacePlayerInVehicle(playerid,vehid,0);
			/*if(PlayerInfo[playerid][DisbleSpeedo] == 0)
			{
				if(PlayerInfo[playerid][RacePlaceObject] != -1)DestroyTheDynamicObject(PlayerInfo[playerid][RacePlaceObject]);
			    if(PlayerInfo[playerid][SpeedoObject] != -1)DestroyTheDynamicObject(PlayerInfo[playerid][SpeedoObject]);
			    PlayerInfo[playerid][SpeedoObject] = CreateDynamicObject(19483, 202.14845, 1755.43835, -17.83983,   0, 0, 0.00000, -1, -1, playerid);
                if(DMMAPInfo[Type] == DM_TYPE_RACE)
					PlayerInfo[playerid][RacePlaceObject] = CreateDynamicObject(19483, 202.14845, 1755.43835, -17.83983,   0, 0, 0.00000, -1, -1, playerid);

				PlayerInfo[playerid][SpeedoReset] = 1;
		    }*/
			forLoop(u, MAX_PLAYERS)
			{
			    if(IsPlayerConnected(u) && PlayerInfo[u][Spawned] == 1 && PlayerInfo[u][PlayerMode] == DM && !IsPlayerNPC(u) && GetPlayerState(u) == PLAYER_STATE_SPECTATING && DMPlayerInfo[u][SpecID] == playerid) {
			       DM_StartSpectate(u, playerid);
				}
			}
		}
	}
	return 0;
}

stock ShowDMAliveText(playerid)
{
	new text[20];
	format(text, sizeof text, "%d",DMMapAlivePlayers());
	TextDrawSetString(DMTXTD[Al_AliveNum], text);
	TextDrawHideForPlayer(playerid,DMTXTD[Al_AliveNum]);
	TextDrawShowForPlayer(playerid,DMTXTD[Al_AliveNum]);
	TextDrawShowForPlayer(playerid,DMTXTD[Al_Time]);
	forLoop(i, 3)TextDrawShowForPlayer(playerid,DMTXTD[Al_BGs][i]);
}
stock HideDMAliveText(playerid)
{
	TextDrawHideForPlayer(playerid,DMTXTD[Al_Time]);
	TextDrawHideForPlayer(playerid,DMTXTD[Al_AliveNum]);
	forLoop(i, 3)TextDrawHideForPlayer(playerid,DMTXTD[Al_BGs][i]);
}

stock ShowHideDMTopTimes(i)
{
	if(!DMPlayerInfo[i][DisableTT])
	{
	    HideDMTTText(i);
		DMPlayerInfo[i][DisableTT] = 1;
	}
	else
	{
		DMPlayerInfo[i][DisableTT] = 0;
	    ShowDMTTText(i);
	}
}
stock UpdateDMTTText()
{
    new string[100], strings[MAX_DM_BEST_LINES][5];
	forLoop(i, MAX_DM_BEST_LINES)
	{
		if(strlen(DMBest[i][Name])> 2)
		{
		    new thename[50];
			format(thename,sizeof thename,"%s",DMBest[i][Name]);

        	forLoop(p,strlen(thename))
		    {
			    if (thename[p] == ']')thename[p] = ')';
			    if (thename[p] == '[')thename[p] = '(';
			    if (thename[p] == '_')thename[p] = '-';
			}
			if(strlen(thename) > 14)
			{
				strdel(thename, 14, strlen(thename));
				format(thename,sizeof thename,"%s.",thename);
			}

			if(DMBest[i][bMins] > 9)format(strings[0],5,"%d",DMBest[i][bMins]);
		    else format(strings[0],5,"0%d",DMBest[i][bMins]);

			if(DMBest[i][bSecs] > 9)format(strings[1],5,"%d",DMBest[i][bSecs]);
		    else format(strings[1],5,"0%d",DMBest[i][bSecs]);

			if(DMBest[i][bMils] > 9)format(strings[2],5,"%d",DMBest[i][bMils]);
		    else format(strings[2],5,"0%d",DMBest[i][bMils]);

		    format(string,sizeof string ,"%d. %s",i+1,thename);
	        TextDrawSetString(DMTXTD[TT_bNames][i], string);
    		format(string,sizeof string,"%s:%s:%s",strings[0],strings[1],strings[2]);
	        TextDrawSetString(DMTXTD[TT_bTimes][i], string);
	    }
	    else
	    {
	        format(string,sizeof string ,"%d.  --",i+1);
	        TextDrawSetString(DMTXTD[TT_bTimes][i], "--:--:--");
	        TextDrawSetString(DMTXTD[TT_bNames][i], string);
	        format(DMBest[i][Name],100,"-");
	        DMBest[i][bMins] = 0;
	        DMBest[i][bSecs] = 0;
	        DMBest[i][bMils] = 0;
	    }
    }
}
stock ShowDMTTText(playerid)
{
	//printf("DEBUG CFONTROL ShowDMTTText 1");
	if(DMPlayerInfo[playerid][DisableTT] == 0)
	{
		TextDrawShowForPlayer(playerid,DMTXTD[TT_BG1]);
		TextDrawShowForPlayer(playerid,DMTXTD[TT_BG2]);
		TextDrawShowForPlayer(playerid,DMTXTD[TT_Text]);
		TextDrawShowForPlayer(playerid,DMTXTD[TT_Line]);
		TextDrawShowForPlayer(playerid,DMTXTD[TT_Line2]);
		forLoop(i, MAX_DM_BEST_LINES)
		{
			TextDrawShowForPlayer(playerid,DMTXTD[TT_bTimes][i]);
			TextDrawShowForPlayer(playerid,DMTXTD[TT_bNames][i]);
		}
	}
	//printf("DEBUG CFONTROL ShowDMTTText 2");
}

stock HideDMTTText(playerid)
{
    //printf("DEBUG CFONTROL HideDMTTText 1");
	TextDrawHideForPlayer(playerid,DMTXTD[TT_BG1]);
	TextDrawHideForPlayer(playerid,DMTXTD[TT_BG2]);
	TextDrawHideForPlayer(playerid,DMTXTD[TT_Text]);
	TextDrawHideForPlayer(playerid,DMTXTD[TT_Line]);
	TextDrawHideForPlayer(playerid,DMTXTD[TT_Line2]);
	forLoop(i, MAX_DM_BEST_LINES)
	{
		TextDrawHideForPlayer(playerid,DMTXTD[TT_bTimes][i]);
		TextDrawHideForPlayer(playerid,DMTXTD[TT_bNames][i]);
	}
    //printf("DEBUG CFONTROL HideDMTTText 2");
}
stock CreateDMTTTexts(id)
{
	TextDrawLetterSize(DMTXTD[TT_bNames][id], 0.147916, 1.288887);
	TextDrawAlignment(DMTXTD[TT_bNames][id], 1);
	TextDrawColor(DMTXTD[TT_bNames][id], -1);
	TextDrawSetShadow(DMTXTD[TT_bNames][id], 0);
	TextDrawSetOutline(DMTXTD[TT_bNames][id], 1);
	TextDrawBackgroundColor(DMTXTD[TT_bNames][id], 51);
	TextDrawFont(DMTXTD[TT_bNames][id], 2);
	TextDrawSetProportional(DMTXTD[TT_bNames][id], 1);

	TextDrawLetterSize(DMTXTD[TT_bTimes][id], 0.147916, 1.288887);
	TextDrawAlignment(DMTXTD[TT_bTimes][id], 1);
	TextDrawColor(DMTXTD[TT_bTimes][id], -1);
	TextDrawSetShadow(DMTXTD[TT_bTimes][id], 0);
	TextDrawSetOutline(DMTXTD[TT_bTimes][id], 1);
	TextDrawBackgroundColor(DMTXTD[TT_bTimes][id], 51);
	TextDrawFont(DMTXTD[TT_bTimes][id], 2);
	TextDrawSetProportional(DMTXTD[TT_bTimes][id], 1);
}


stock ShowNewMapTextsDM(playerid)
{
    TextDrawShowForPlayer(playerid,DMTXTD[BG]);
	TextDrawShowForPlayer(playerid,DMTXTD[Loading]);
	TextDrawHideForPlayer(playerid,DMTXTD[Text]);
}

stock HideNewMapTextsDM(playerid)
{
    TextDrawHideForPlayer(playerid,DMTXTD[BG]);
	TextDrawHideForPlayer(playerid,DMTXTD[Loading]);
	TextDrawHideForPlayer(playerid,DMTXTD[Text]);
}

stock StartDMMapSpecForPlayer(playerid)
{
	//printf("DEBUG CFONTROL StartDMMapSpecForPlayer 1");
	DMPlayerInfo[playerid][Alive] = 0;
    if(DMMapAlivePlayers() > 0)
	{
		forLoop(i, MAX_PLAYERS)
		{
			if(IsPlayerConnected(i) && i != playerid && DMPlayerInfo[i][Alive] == 1 && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][PlayerMode] == DM && !IsPlayerNPC(i))
			{
			    DM_StartSpectate(playerid, i);
			    break;
			}
		}
	}
	if(DMPlayerInfo[playerid][rRespawn] == 0 && DMMAPInfo[Type] == DM_TYPE_RACE && DMMapAlivePlayers() >= 2)
	{
	    SendClientMessage(playerid, white, "{FF0000}RACE MSG:{FFFFFF} You can use /respawn to rejoin the race...");
	}
	//printf("DEBUG CFONTROL StartDMMapSpecForPlayer 2");
}

stock DM_StartSpectate(playerid, specplayerid)
{
	//printf("DEBUG CFONTROL DM_StartSpectate 1");
	forLoop(x, MAX_PLAYERS)
	{
	    if(GetPlayerState(x) == PLAYER_STATE_SPECTATING && PlayerInfo[x][Level] > 0 && PlayerInfo[x][SpecID] == playerid)
		{
	       AdvanceSpectate(x);
		}
	}
	ShowSpecTexts(playerid, specplayerid);
	ToggleThePlayerSpectating(playerid, 1);
	SetPlayerInterior(playerid,GetPlayerInterior(specplayerid));
	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(specplayerid));
	if(IsPlayerInAnyVehicle(specplayerid))
		PlayerSpectateVehicle(playerid, GetPlayerVehicleID(specplayerid));
	else
	 	PlayerSpectatePlayer(playerid, specplayerid);
    DMPlayerInfo[playerid][SpecID] = specplayerid;
    
    if(PlayerInfo[playerid][DisbleSpeedo] == 0)
	{
	    if(PlayerInfo[playerid][SpeedoObject] != - 1)DestroyTheDynamicObject(PlayerInfo[playerid][SpeedoObject]);
	    if(PlayerInfo[playerid][RacePlaceObject] != -1)DestroyTheDynamicObject(PlayerInfo[playerid][RacePlaceObject]);
        PlayerInfo[playerid][SpeedoObject] = CreateDynamicObject(19483, 202.14845, 1755.43835, -17.83983,   0, 0, 0.00000,-1, -1, playerid);
	    if(PlayerInfo[playerid][PlayerMode] == DM && DMMAPInfo[Type] == DM_TYPE_RACE)
			PlayerInfo[playerid][RacePlaceObject] = CreateDynamicObject(19483, 202.14845, 1755.43835, -17.83983,   0, 0, 0.00000,-1, -1, playerid);
	    PlayerInfo[playerid][SpeedoReset] = 1;
    }
	//printf("DEBUG CFONTROL DM_StartSpectate 2");
	return 1;
}
stock DM_StopSpectate(playerid)
{
	if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING && DMPlayerInfo[playerid][SpecID] > -1)
	{
		ToggleThePlayerSpectating(playerid, 0);
		DMPlayerInfo[playerid][SpecID] = -1;
		HideSpecTexts(playerid);
		if(PlayerInfo[playerid][SpeedoObject] != - 1)DestroyTheDynamicObject(PlayerInfo[playerid][SpeedoObject]);
	    PlayerInfo[playerid][SpeedoObject] = -1;
	    if(PlayerInfo[playerid][RacePlaceObject] != -1)DestroyTheDynamicObject(PlayerInfo[playerid][RacePlaceObject]);
        PlayerInfo[playerid][RacePlaceObject] = -1;
	}
	return 1;
}
stock DM_AdvanceSpectate(playerid)
{
	if(DMMapAlivePlayers() > 0)
	{
	    if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING && DMPlayerInfo[playerid][SpecID] > -1)
		{
			printf("DEBUG CFONTROL DM_AdvanceSpectate 1 pid %d sid %d alive %d",playerid,DMPlayerInfo[playerid][SpecID],DMMapAlivePlayers());

			new player = -1;
			forLoop(x, MAX_PLAYERS)
			{
		        if(IsPlayerConnected(x) && x != playerid && DMPlayerInfo[x][Alive] == 1 && PlayerInfo[x][Spawned] == 1 && PlayerInfo[x][PlayerMode] == DM && !IsPlayerNPC(x) && x > DMPlayerInfo[playerid][SpecID])
				{
					if(GetPlayerState(x) == PLAYER_STATE_SPECTATING || (GetPlayerState(x) != 1 && GetPlayerState(x) != 2 && GetPlayerState(x) != 3))
					 	continue;
                	player = x;
					break;
				}
			}
			if(player == -1)
			{
				forLoop(x, MAX_PLAYERS)
				{
			        if(IsPlayerConnected(x) && x != playerid && DMPlayerInfo[x][Alive] == 1 && PlayerInfo[x][Spawned] == 1 && PlayerInfo[x][PlayerMode] == DM && !IsPlayerNPC(x))
					{
						if(GetPlayerState(x) == PLAYER_STATE_SPECTATING || (GetPlayerState(x) != 1 && GetPlayerState(x) != 2 && GetPlayerState(x) != 3))
						 	continue;
	                	player = x;
						break;
					}
				}
			}
			if(player != -1 && IsPlayerConnected(player))
				DM_StartSpectate(playerid, player);
				
			printf("DEBUG CFONTROL DM_AdvanceSpectate 2 pid %d sid %d alive %d",playerid,DMPlayerInfo[playerid][SpecID],DMMapAlivePlayers());
		}
	}
	return 1;

}

stock DM_ReverseSpectate(playerid)
{
    if(DMMapAlivePlayers() > 0)
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING && DMPlayerInfo[playerid][SpecID] > -1)
		{
			printf("DEBUG CFONTROL DM_ReverseSpectate 1 pid %d sid %d alive %d",playerid,DMPlayerInfo[playerid][SpecID],DMMapAlivePlayers());

            new player = -1;
			forLoopR(x,MAX_PLAYERS-1,-1)
			{
		        if(IsPlayerConnected(x) && x != playerid && DMPlayerInfo[x][Alive] == 1 && PlayerInfo[x][Spawned] == 1 && PlayerInfo[x][PlayerMode] == DM && !IsPlayerNPC(x) && x < DMPlayerInfo[playerid][SpecID])
				{
					if(GetPlayerState(x) == PLAYER_STATE_SPECTATING || (GetPlayerState(x) != 1 && GetPlayerState(x) != 2 && GetPlayerState(x) != 3))
					 	continue;
                	player = x;
					break;
				}
			}
			if(player == -1)
			{
				forLoopR(x,MAX_PLAYERS-1,-1)
				{
			        if(IsPlayerConnected(x) && x != playerid && DMPlayerInfo[x][Alive] == 1 && PlayerInfo[x][Spawned] == 1 && PlayerInfo[x][PlayerMode] == DM && !IsPlayerNPC(x))
					{
						if(GetPlayerState(x) == PLAYER_STATE_SPECTATING || (GetPlayerState(x) != 1 && GetPlayerState(x) != 2 && GetPlayerState(x) != 3))
						 	continue;
	                	player = x;
						break;
					}
				}
			}
			if(player != -1 && IsPlayerConnected(player))
				DM_StartSpectate(playerid, player);

			printf("DEBUG CFONTROL DM_ReverseSpectate 2 pid %d sid %d alive %d",playerid,DMPlayerInfo[playerid][SpecID],DMMapAlivePlayers());
		}
	}
	return 1;
}

stock CheckPVPStatusDM(playerid)//at the end of a map
{
	//printf("DEBUG CFONTROL CheckPVPStatusDM 1");
	if(DMPlayerInfo[playerid][PVPID] > -1 && DMPlayerInfo[playerid][PVPChecked] == 0)
	{
	    new pid = DMPlayerInfo[playerid][PVPID], string[180], skipsecond = 0;
	    DMPlayerInfo[playerid][PVPRounds]--;
	    DMPlayerInfo[pid][PVPRounds]--;
	    DMPlayerInfo[playerid][PVPChecked] = 1;
	    DMPlayerInfo[pid][PVPChecked] = 1;
	    if(DMPlayerInfo[playerid][PVPTime][0] > DMPlayerInfo[pid][PVPTime][0])
        {
			DMPlayerInfo[playerid][PVPWins]++;
            format(string, sizeof(string), "PVP Notice:{FFFFFF} You have won this round.{33FF33} Score: %d(you)-%d | Rounds left: %d",DMPlayerInfo[playerid][PVPWins],DMPlayerInfo[pid][PVPWins],DMPlayerInfo[playerid][PVPRounds]);
			SendClientMessage(playerid,red1, string);
			format(string, sizeof(string), "PVP Notice:{FFFFFF} You have lost this round.{33FF33} Score: %d(you)-%d | Rounds left: %d",DMPlayerInfo[pid][PVPWins],DMPlayerInfo[playerid][PVPWins],DMPlayerInfo[pid][PVPRounds]);
			SendClientMessage(pid,red1,string);
			skipsecond = 1;
        }
        else if(DMPlayerInfo[playerid][PVPTime][0] == DMPlayerInfo[pid][PVPTime][0])
        {
            if(DMPlayerInfo[playerid][PVPTime][1] > DMPlayerInfo[pid][PVPTime][1])
            {
				DMPlayerInfo[playerid][PVPWins]++;
	            format(string, sizeof(string), "PVP Notice:{FFFFFF} You have won this round.{33FF33} Score: %d(you)-%d | Rounds left: %d",DMPlayerInfo[playerid][PVPWins],DMPlayerInfo[pid][PVPWins],DMPlayerInfo[playerid][PVPRounds]);
				SendClientMessage(playerid,red1, string);
				format(string, sizeof(string), "PVP Notice:{FFFFFF} You have lost this round.{33FF33} Score: %d(you)-%d | Rounds left: %d",DMPlayerInfo[pid][PVPWins],DMPlayerInfo[playerid][PVPWins],DMPlayerInfo[pid][PVPRounds]);
				SendClientMessage(pid,red1,string);
				skipsecond = 1;
            }
            else if(DMPlayerInfo[playerid][PVPTime][1] == DMPlayerInfo[pid][PVPTime][1])
            {
                if(DMPlayerInfo[playerid][PVPTime][2] > DMPlayerInfo[pid][PVPTime][2])
                {
					DMPlayerInfo[playerid][PVPWins]++;
		            format(string, sizeof(string), "PVP Notice:{FFFFFF} You have won this round.{33FF33} Score: %d(you)-%d | Rounds left: %d",DMPlayerInfo[playerid][PVPWins],DMPlayerInfo[pid][PVPWins],DMPlayerInfo[playerid][PVPRounds]);
					SendClientMessage(playerid,red1, string);
					format(string, sizeof(string), "PVP Notice:{FFFFFF} You have lost this round.{33FF33} Score: %d(you)-%d | Rounds left: %d",DMPlayerInfo[pid][PVPWins],DMPlayerInfo[playerid][PVPWins],DMPlayerInfo[pid][PVPRounds]);
					SendClientMessage(pid,red1,string);
					skipsecond = 1;
                }
            }
        }

		if(skipsecond == 0)
		{
		    if(DMPlayerInfo[pid][PVPTime][0] > DMPlayerInfo[playerid][PVPTime][0])
	        {
	            DMPlayerInfo[pid][PVPWins]++;
	            format(string, sizeof(string), "PVP Notice:{FFFFFF} You have won this round.{33FF33} Score: %d(you)-%d | Rounds left: %d",DMPlayerInfo[pid][PVPWins],DMPlayerInfo[playerid][PVPWins],DMPlayerInfo[pid][PVPRounds]);
				SendClientMessage(pid,red1, string);
				format(string, sizeof(string), "PVP Notice:{FFFFFF} You have lost this round.{33FF33} Score: %d(you)-%d | Rounds left: %d",DMPlayerInfo[playerid][PVPWins],DMPlayerInfo[pid][PVPWins],DMPlayerInfo[playerid][PVPRounds]);
				SendClientMessage(playerid,red1,string);
	        }
	        else if(DMPlayerInfo[pid][PVPTime][0] == DMPlayerInfo[playerid][PVPTime][0])
	        {
	            if(DMPlayerInfo[pid][PVPTime][1] > DMPlayerInfo[playerid][PVPTime][1])
	            {
					DMPlayerInfo[pid][PVPWins]++;
		            format(string, sizeof(string), "PVP Notice:{FFFFFF} You have won this round.{33FF33} Score: %d(you)-%d | Rounds left: %d",DMPlayerInfo[pid][PVPWins],DMPlayerInfo[playerid][PVPWins],DMPlayerInfo[pid][PVPRounds]);
					SendClientMessage(pid,red1, string);
					format(string, sizeof(string), "PVP Notice:{FFFFFF} You have lost this round.{33FF33} Score: %d(you)-%d | Rounds left: %d",DMPlayerInfo[playerid][PVPWins],DMPlayerInfo[pid][PVPWins],DMPlayerInfo[playerid][PVPRounds]);
					SendClientMessage(playerid,red1,string);
	            }
	            else if(DMPlayerInfo[pid][PVPTime][1] == DMPlayerInfo[playerid][PVPTime][1])
	            {
	                if(DMPlayerInfo[pid][PVPTime][2] > DMPlayerInfo[playerid][PVPTime][2])
	                {
						DMPlayerInfo[pid][PVPWins]++;
			            format(string, sizeof(string), "PVP Notice:{FFFFFF} You have won this round.{33FF33} Score: %d(you)-%d | Rounds left: %d",DMPlayerInfo[pid][PVPWins],DMPlayerInfo[playerid][PVPWins],DMPlayerInfo[pid][PVPRounds]);
						SendClientMessage(pid,red1, string);
						format(string, sizeof(string), "PVP Notice:{FFFFFF} You have lost this round.{33FF33} Score: %d(you)-%d | Rounds left: %d",DMPlayerInfo[playerid][PVPWins],DMPlayerInfo[pid][PVPWins],DMPlayerInfo[playerid][PVPRounds]);
						SendClientMessage(playerid,red1,string);
	                }
	            }
	        }
		}
	    if(DMPlayerInfo[playerid][PVPRounds] == 0)
	    {
	        if(DMPlayerInfo[playerid][PVPWins] > DMPlayerInfo[pid][PVPWins])
	        {
	            DMPlayerInfo[playerid][PVPID] = -1;
	            DMPlayerInfo[pid][PVPID] = -1;
	            DMPlayerInfo[playerid][PVPRequest][0] = -1;
                DMPlayerInfo[pid][PVPRequest][0] = -1;

	            DMPlayerInfo[playerid][PVP]++;
	            GiveThePlayerMoney(playerid, DMPlayerInfo[playerid][PVPAmount]);
	            GiveThePlayerMoney(pid, -DMPlayerInfo[pid][PVPAmount]);
	            format(string, sizeof(string), "{33FF33}PVP {FFFFFF} %s has won a PVP against %s.{33FF33}(+$%d).", PlayerInfo[playerid][Name], PlayerInfo[pid][Name],DMPlayerInfo[playerid][PVPAmount]);
				SendMessageToMode(DM,COLOR_WHITE, string);
	        }
	        else if(DMPlayerInfo[playerid][PVPWins] < DMPlayerInfo[pid][PVPWins])
	        {
	            DMPlayerInfo[playerid][PVPID] = -1;
	            DMPlayerInfo[pid][PVPID] = -1;
	            DMPlayerInfo[playerid][PVPRequest][0] = -1;
                DMPlayerInfo[pid][PVPRequest][0] = -1;

	            DMPlayerInfo[pid][PVP]++;
	            GiveThePlayerMoney(pid, DMPlayerInfo[pid][PVPAmount]);
	            GiveThePlayerMoney(playerid, -DMPlayerInfo[playerid][PVPAmount]);
                format(string, sizeof(string), "{33FF33}PVP {FFFFFF} %s has won a PVP against %s.{33FF33}(+$%d).", PlayerInfo[pid][Name], PlayerInfo[playerid][Name],DMPlayerInfo[playerid][PVPAmount]);
				SendMessageToMode(DM,COLOR_WHITE, string);
	        }
	        else
	        {
	            DMPlayerInfo[playerid][PVPID] = -1;
	            DMPlayerInfo[pid][PVPID] = -1;
	            DMPlayerInfo[playerid][PVPRequest][0] = -1;
                DMPlayerInfo[pid][PVPRequest][0] = -1;
                format(string, sizeof(string), "{33FF33}PVP {FFFFFF}Score against %s and %s is equal. No one wins.", PlayerInfo[pid][Name], PlayerInfo[playerid][Name]);
				SendMessageToMode(DM,COLOR_WHITE, string);
	        }
	    }
	}
	//printf("DEBUG CFONTROL CheckPVPStatusDM 2");
}

stock PVPDisqualifyDM(playerid, reason)
{
	//printf("DEBUG CFONTROL PVPDisqualifyDM 1");
    if(DMPlayerInfo[playerid][PVPID] > -1)
	{
 		new pid = DMPlayerInfo[playerid][PVPID], string[180];
 		if(reason == 0) //crash? maybe?
 		{
 		    DMPlayerInfo[playerid][PVPID] = -1;
            DMPlayerInfo[pid][PVPID] = -1;
            DMPlayerInfo[playerid][PVPRequest][0] = -1;
            DMPlayerInfo[pid][PVPRequest][0] = -1;
            format(string, sizeof(string), "{33FF33}PVP {FFFFFF}between %s and %s has been canceled. (Player Crash)", PlayerInfo[pid][Name], PlayerInfo[playerid][Name]);
			SendMessageToMode(DM,COLOR_WHITE, string);
 		}
 		else//quitting mode or server
 		{
 		    DMPlayerInfo[playerid][PVPID] = -1;
            DMPlayerInfo[pid][PVPID] = -1;
            DMPlayerInfo[playerid][PVPRequest][0] = -1;
            DMPlayerInfo[pid][PVPRequest][0] = -1;

            DMPlayerInfo[pid][PVP]++;
            GiveThePlayerMoney(pid, DMPlayerInfo[pid][PVPAmount]);
            GiveThePlayerMoney(playerid, -DMPlayerInfo[playerid][PVPAmount]);
            format(string, sizeof(string), "{33FF33}PVP {FFFFFF} %s has won a PVP against %s.{33FF33}(+$%d) (Player Quit)", PlayerInfo[pid][Name], PlayerInfo[playerid][Name],DMPlayerInfo[playerid][PVPAmount]);
			SendMessageToMode(DM,COLOR_WHITE, string);
 		}
	}
	//printf("DEBUG CFONTROL PVPDisqualifyDM 2");
}
stock DMMapDisqualifyPlayer(playerid,reason,ereason)
{
	SetPlayerColor(playerid,0xFFFFFF00);
	if(DMMAPInfo[Type] != DM_TYPE_RACE)
	{
		GiveThePlayerMoney(playerid, (DMMAPInfo[AliveAtStart]-DMMapAlivePlayers()) * 5);
		ChangeModeScore(playerid, (DMMAPInfo[AliveAtStart]-DMMapAlivePlayers()) * 3);
		if(DMMapAlivePlayers() == 1)
		{
			new string[126];
		    PlayerPlaySound(playerid,5449,0.0,0.0,0.0);
		    format(string, sizeof(string), "{33FF33}Notice: {FFFFFF}%s is the last survivor! (+$%d)",PlayerInfo[playerid][Name],((DMMAPInfo[AliveAtStart]-DMMapAlivePlayers()) * 5));
			SendMessageToMode(DM,COLOR_WHITE, string);
			DMPlayerInfo[playerid][Wins] ++;
		}
	}
	if(PlayerInfo[playerid][Vehicle] != -1) DestroyVehicle(PlayerInfo[playerid][Vehicle]);
	PlayerInfo[playerid][Vehicle]=-1;
	
	
	DMPlayerInfo[playerid][Alive] = 0;
	DMPlayerInfo[playerid][Camper] = 0;
	if(DMMAPInfo[AliveAtStart] > DMMapAlivePlayers() && DMMapAlivePlayers() > 0)
	{
		forLoop(x, MAX_PLAYERS) {
		    if(GetPlayerState(x) == PLAYER_STATE_SPECTATING && DMPlayerInfo[x][SpecID] == playerid) {
		       DM_AdvanceSpectate(x);
			}
		}
	}
	if(DMMapAlivePlayers() > 0 && reason == 1 && ereason == 1 && GetPlayerState(playerid) != PLAYER_STATE_WASTED)StartDMMapSpecForPlayer(playerid);
	new text[20];
	format(text, sizeof text, "%d",DMMapAlivePlayers());
	TextDrawSetString(DMTXTD[Al_AliveNum], text);
	//if(DMMAPInfo[Type] != DM_TYPE_RACE) UpdateDeathBoardDM(playerid);
	if(DMMAPInfo[Type] != DM_TYPE_RACE)UpdateDeathBoardDM(playerid);
	if(DMPlayerInfo[playerid][rRespawn] == 0)
	{
		if(DMPlayerInfo[playerid][PVPID] > -1)
		{
			DMPlayerInfo[playerid][PVPTime][0] = DMMAPInfo[Al_Mins];
			DMPlayerInfo[playerid][PVPTime][1] = DMMAPInfo[Al_Secs];
			DMPlayerInfo[playerid][PVPTime][2] = DMMAPInfo[Al_Mils];
		}
	}
	DMPlayerInfo[playerid][rRespawn] = 0;
}
forward CheckDMMapEnd();
public CheckDMMapEnd()
{
	if(DMMAPInfo[dStarted] == 1)
	{
	    if(ModeCount(DM) > 0)
	    {
		    if(DMMapAlivePlayers() == 0)
		    {
				//printf("DEBUG CFONTROL CheckDMMapEnd 1.1");
		        ChangeDMMapMap(DMMAPInfo[pathName]);
				//printf("DEBUG CFONTROL CheckDMMapEnd 2.1");
		    }
		    if(DMMapAlivePlayers() == 1 && ModeCount(DM) > 1)
		    {
		        forLoop(i, MAX_PLAYERS)
				{
					if(IsPlayerConnected(i) && DMPlayerInfo[i][Alive] == 1 && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][PlayerMode] == DM && !IsPlayerNPC(i))
					{
						//printf("DEBUG CFONTROL CheckDMMapEnd 1.2");
					    if(DMMAPInfo[Type] == DM_TYPE_DM)
					    {
						    if(GetVehicleModel(GetPlayerVehicleID(i)) == 425 || GetVehicleModel(GetPlayerVehicleID(i)) == 520)
						    {
						        new string[160];
							    PlayerPlaySound(i,5449,0.0,0.0,0.0);
							    format(string, sizeof(string), "{33FF33}Notice: {FFFFFF}%s is the last survivor! (+$%d)",PlayerInfo[i][Name],((DMMAPInfo[AliveAtStart]-DMMapAlivePlayers()) * 5));
							    SendMessageToMode(DM,COLOR_WHITE, string);
								DMPlayerInfo[i][Wins] ++;
								GiveThePlayerMoney(i, (DMMAPInfo[AliveAtStart]-DMMapAlivePlayers()) * 5);
								ChangeModeScore(i, (DMMAPInfo[AliveAtStart]-DMMapAlivePlayers()) * 3);
                                if(DMPlayerInfo[i][rRespawn] == 0)
								{
									if(DMPlayerInfo[i][PVPID] > -1)
									{
										DMPlayerInfo[i][PVPTime][0] = DMMAPInfo[Al_Mins];
										DMPlayerInfo[i][PVPTime][1] = DMMAPInfo[Al_Secs];
										DMPlayerInfo[i][PVPTime][2] = DMMAPInfo[Al_Mils];
									}
								}
								DMPlayerInfo[i][rRespawn] = 0;
								DMPlayerInfo[i][Alive] = 0;
								if(PlayerInfo[i][Vehicle] != -1) DestroyVehicle(PlayerInfo[i][Vehicle]);
								PlayerInfo[i][Vehicle]=-1;
								ChangeDMMapMap(DMMAPInfo[pathName]);
						    }
						    if(GetVehicleModel(GetPlayerVehicleID(i)) != 425 && GetVehicleModel(GetPlayerVehicleID(i)) != 520)
						    {
						        if(DMPlayerInfo[i][Asked] == 0 && DMPlayerInfo[i][Camper] == 0)
						        {
								    SendClientMessage(i, white, "{FF0000}Notice: {FFFFFF}You are the last survivor, press N to buy a camper! (5 seconds)");
 									SetTimerEx("EndDDDMMap", 8000, false, "i", i);
								    DMPlayerInfo[i][Asked] = 1;
								    GameTextForPlayer(i, "~w~~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ PRESS N TO BUY CAMPER",2999, 3);
							    }
						    }
					    }
					    else if(DMMAPInfo[Type] == DM_TYPE_DD)
						{
						    if(DMPlayerInfo[i][Asked] == 0)
					        {
							    SendClientMessage(i, white, "{FF0000}Notice: {FFFFFF}You are the last alive in the map! (5 seconds)");
							    SetTimerEx("EndDDDMMap", 8000, false, "i", i);
							    DMPlayerInfo[i][Asked] = 1;
				    			DMPlayerInfo[i][Camper] = 0;
							    GameTextForPlayer(i, "~w~~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ LAST ALIVE",2999, 3);
						    }
						}
					    else
					    {
					        if(DMPlayerInfo[i][Asked] == 0 && DMPlayerInfo[i][rFinished] == 0)
					        {
							    SendClientMessage(i, white, "{FF0000}Notice: {FFFFFF}You are the last in race, you have ten (10) seconds to end this map.");
                                DMMAPInfo[rRestart] = 1;
                                SetTimerEx("EndDDDMMap", 12000, false, "i", i);
							    DMPlayerInfo[i][Asked] = 1;
				    			DMPlayerInfo[i][Camper] = 0;
							    GameTextForPlayer(i, "~w~~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ LAST IN RACE",2999, 3);
						    }
					    }
						//printf("DEBUG CFONTROL CheckDMMapEnd 2.2");
						break;
					}
				}
			}
		}
	}
}
forward EndDDDMMap(i);
public EndDDDMMap(i)
{
	//printf("DEBUG CFONTROL EndDDDMMap 1");
    if(DMMAPInfo[Type] != DM_TYPE_RACE)
	{
		if(IsPlayerConnected(i) && DMPlayerInfo[i][Asked] == 1 && DMPlayerInfo[i][Alive] == 1 && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][PlayerMode] == DM && !IsPlayerNPC(i) && DMPlayerInfo[i][Camper] == 0)
		{
		    new string[160];
		    PlayerPlaySound(i,5449,0.0,0.0,0.0);
		    format(string, sizeof(string), "{33FF33}Notice: {FFFFFF}%s is the last survivor! (+$%d)",PlayerInfo[i][Name],((DMMAPInfo[AliveAtStart]-DMMapAlivePlayers()) * 5));
		    SendMessageToMode(DM,COLOR_WHITE, string);
			DMPlayerInfo[i][Wins]++;
			GiveThePlayerMoney(i, (DMMAPInfo[AliveAtStart]-DMMapAlivePlayers()) * 5);
            ChangeModeScore(i, (DMMAPInfo[AliveAtStart]-DMMapAlivePlayers()) * 3);

			if(DMPlayerInfo[i][PVPID] > -1)
			{
				DMPlayerInfo[i][PVPTime][0] = DMMAPInfo[Al_Mins];
				DMPlayerInfo[i][PVPTime][1] = DMMAPInfo[Al_Secs];
				DMPlayerInfo[i][PVPTime][2] = DMMAPInfo[Al_Mils];
			}
			DMPlayerInfo[i][rRespawn] = 0;
			DMPlayerInfo[i][Alive] = 0;
			if(PlayerInfo[i][Vehicle] != -1) DestroyVehicle(PlayerInfo[i][Vehicle]);
			PlayerInfo[i][Vehicle]=-1;
			ChangeDMMapMap(DMMAPInfo[pathName]);
		}
	}
	else
	{
	    if(DMMAPInfo[rRestart] == 1)
	    {
		    if(IsPlayerConnected(i) && DMPlayerInfo[i][Asked] == 1 && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][PlayerMode] == DM && !IsPlayerNPC(i) && DMPlayerInfo[i][Camper] == 0)
			{
			    if(DMPlayerInfo[i][rRespawn] == 0)
				{
					if(DMPlayerInfo[i][PVPID] > -1)
					{
						DMPlayerInfo[i][PVPTime][0] = DMMAPInfo[Al_Mins];
						DMPlayerInfo[i][PVPTime][1] = DMMAPInfo[Al_Secs];
						DMPlayerInfo[i][PVPTime][2] = DMMAPInfo[Al_Mils];
					}
				}
				DMPlayerInfo[i][rRespawn] = 0;
				DMPlayerInfo[i][Alive] = 0;
				if(PlayerInfo[i][Vehicle] != -1) DestroyVehicle(PlayerInfo[i][Vehicle]);
				PlayerInfo[i][Vehicle]=-1;
			}
			ChangeDMMapMap(DMMAPInfo[pathName]);
		}
	}
	//printf("DEBUG CFONTROL EndDDDMMap 2");
	return 1;
}

stock CheckTopTimesDM(playerid)
{
	//printf("DEBUG CFONTROL CheckTopTimesDM 1");
    new string[100], pos = 5;
	forLoop(i, MAX_DM_BEST_LINES)
	{
		if(DMBest[i][bMins] == 0 && DMBest[i][bSecs] == 0 && DMBest[i][bMils] == 0)
		{
		    DMBest[i][bMins] = 99;
	        DMBest[i][bSecs] = 99;
	        DMBest[i][bMils] = 99;
		}
	}
    forLoop(i, MAX_DM_BEST_LINES)
	{
	    if(DMMAPInfo[Al_Mins] < DMBest[i][bMins])
        {
			pos = i;
			break;
        }
        else if(DMMAPInfo[Al_Mins] == DMBest[i][bMins])
        {
            if(DMMAPInfo[Al_Secs] < DMBest[i][bSecs])
            {
				pos = i;
				break;
            }
            else if(DMMAPInfo[Al_Secs] == DMBest[i][bSecs])
            {
                if(DMMAPInfo[Al_Mils] < DMBest[i][bMils])
                {
					pos = i;
					break;
                }
            }
        }
	}
	if(pos < 5)
	{
        if(pos == 0)
        {
            format(DMBest[4][Name], 50,"%s",DMBest[3][Name]);
		    DMBest[4][bMins] = DMBest[3][bMins];
	        DMBest[4][bSecs] = DMBest[3][bSecs];
	        DMBest[4][bMils] = DMBest[3][bMils];

	        format(DMBest[3][Name], 50,"%s",DMBest[2][Name]);
		    DMBest[3][bMins] = DMBest[2][bMins];
	        DMBest[3][bSecs] = DMBest[2][bSecs];
	        DMBest[3][bMils] = DMBest[2][bMils];

	        format(DMBest[2][Name], 50,"%s",DMBest[1][Name]);
		    DMBest[2][bMins] = DMBest[1][bMins];
	        DMBest[2][bSecs] = DMBest[1][bSecs];
	        DMBest[2][bMils] = DMBest[1][bMils];

	        format(DMBest[1][Name], 50,"%s",DMBest[0][Name]);
		    DMBest[1][bMins] = DMBest[0][bMins];
	        DMBest[1][bSecs] = DMBest[0][bSecs];
	        DMBest[1][bMils] = DMBest[0][bMils];

            format(DMBest[0][Name], 50,"%s",PlayerInfo[playerid][Name]);
		    DMBest[0][bMins] = DMMAPInfo[Al_Mins];
	        DMBest[0][bSecs] = DMMAPInfo[Al_Secs];
	        DMBest[0][bMils] = DMMAPInfo[Al_Mils];
	        format(string, sizeof string, "{33FF33}DM/DD MSG:{FFFFFF} %s has gotten the 1st Top Time!(+$500)",PlayerInfo[playerid][Name]);
	        SendMessageToMode(DM,COLOR_WHITE, string);
		    GiveThePlayerMoney(playerid, 500);
        }
        if(pos == 1)
        {
	        format(DMBest[4][Name], 50,"%s",DMBest[3][Name]);
		    DMBest[4][bMins] = DMBest[3][bMins];
	        DMBest[4][bSecs] = DMBest[3][bSecs];
	        DMBest[4][bMils] = DMBest[3][bMils];

	        format(DMBest[3][Name], 50,"%s",DMBest[2][Name]);
		    DMBest[3][bMins] = DMBest[2][bMins];
	        DMBest[3][bSecs] = DMBest[2][bSecs];
	        DMBest[3][bMils] = DMBest[2][bMils];

	        format(DMBest[2][Name], 50,"%s",DMBest[1][Name]);
		    DMBest[2][bMins] = DMBest[1][bMins];
	        DMBest[2][bSecs] = DMBest[1][bSecs];
	        DMBest[2][bMils] = DMBest[1][bMils];

            format(DMBest[1][Name], 50,"%s",PlayerInfo[playerid][Name]);
		    DMBest[1][bMins] = DMMAPInfo[Al_Mins];
	        DMBest[1][bSecs] = DMMAPInfo[Al_Secs];
	        DMBest[1][bMils] = DMMAPInfo[Al_Mils];
	        format(string, sizeof string, "{33FF33}DM/DD MSG:{FFFFFF} %s has gotten the 2nd Top Time!",PlayerInfo[playerid][Name]);
	        SendMessageToMode(DM,COLOR_WHITE, string);
        }
        if(pos == 2)
        {
	        format(DMBest[4][Name], 50,"%s",DMBest[3][Name]);
		    DMBest[4][bMins] = DMBest[3][bMins];
	        DMBest[4][bSecs] = DMBest[3][bSecs];
	        DMBest[4][bMils] = DMBest[3][bMils];

	        format(DMBest[3][Name], 50,"%s",DMBest[2][Name]);
		    DMBest[3][bMins] = DMBest[2][bMins];
	        DMBest[3][bSecs] = DMBest[2][bSecs];
	        DMBest[3][bMils] = DMBest[2][bMils];

            format(DMBest[2][Name], 50,"%s",PlayerInfo[playerid][Name]);
		    DMBest[2][bMins] = DMMAPInfo[Al_Mins];
	        DMBest[2][bSecs] = DMMAPInfo[Al_Secs];
	        DMBest[2][bMils] = DMMAPInfo[Al_Mils];
	        format(string, sizeof string, "{33FF33}DM/DD MSG:{FFFFFF} %s has gotten the 3rd Top Time!",PlayerInfo[playerid][Name]);
	        SendMessageToMode(DM,COLOR_WHITE, string);
        }
        if(pos == 3)
        {
	        format(DMBest[4][Name], 50,"%s",DMBest[3][Name]);
		    DMBest[4][bMins] = DMBest[3][bMins];
	        DMBest[4][bSecs] = DMBest[3][bSecs];
	        DMBest[4][bMils] = DMBest[3][bMils];

            format(DMBest[3][Name], 50,"%s",PlayerInfo[playerid][Name]);
		    DMBest[3][bMins] = DMMAPInfo[Al_Mins];
	        DMBest[3][bSecs] = DMMAPInfo[Al_Secs];
	        DMBest[3][bMils] = DMMAPInfo[Al_Mils];
	        format(string, sizeof string, "{33FF33}DM/DD MSG:{FFFFFF} %s has gotten the 4th Top Time!",PlayerInfo[playerid][Name]);
	        SendMessageToMode(DM,COLOR_WHITE, string);
        }
        if(pos == 4)
        {
	        format(DMBest[4][Name], 50,"%s",PlayerInfo[playerid][Name]);
		    DMBest[4][bMins] = DMMAPInfo[Al_Mins];
	        DMBest[4][bSecs] = DMMAPInfo[Al_Secs];
	        DMBest[4][bMils] = DMMAPInfo[Al_Mils];
	        format(string, sizeof string, "{33FF33}DM/DD MSG:{FFFFFF} %s has gotten the 5th Top Time!",PlayerInfo[playerid][Name]);
	        SendMessageToMode(DM,COLOR_WHITE, string);
        }
		UpdateDMTTText();
        forLoop(i, MAX_PLAYERS)
		{
			if(IsPlayerConnected(i) && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][PlayerMode] == DM && !IsPlayerNPC(i))
			{
			    ShowDMTTText(i);
			}
		}
	}
	//printf("DEBUG CFONTROL CheckTopTimesDM 2");
}

stock UpdateDeathBoardDM(playerid)
{
    new thename[25];
    if(DMMAPInfo[Type] != DM_TYPE_RACE)
    {
        new strings[5][5], string[50], place = (DMMapAlivePlayers()+1) ,alldone = 1;

        format(thename,sizeof thename,"%s",PlayerInfo[playerid][Name]);
		forLoop(i, strlen(thename))
	    {
		    if (thename[i] == ']')thename[i] = ')';
		    if (thename[i] == '[')thename[i] = '(';
		    if (thename[i] == '_')thename[i] = '-';
		}
		if(strlen(thename) >= 15)
		{
			strdel(thename, 15, strlen(thename));
			format(thename, sizeof thename,"%s.",thename);
		}
		if(DMMAPInfo[Al_Mils] > 9)format(strings[0],5,"%d",DMMAPInfo[Al_Mils]);
	    else format(strings[0],5,"0%d",DMMAPInfo[Al_Mils]);

		if(DMMAPInfo[Al_Secs] > 9)format(strings[1],5,"%d",DMMAPInfo[Al_Secs]);
	    else format(strings[1],5,"0%d",DMMAPInfo[Al_Secs]);

		if(DMMAPInfo[Al_Mins] > 9)format(strings[2],5,"%d",DMMAPInfo[Al_Mins]);
	    else format(strings[2],5,"0%d",DMMAPInfo[Al_Mins]);

	    format(string, sizeof string,"(%s:%s:%s)  ~w~%s~g~   .%d",strings[2],strings[1],strings[0],thename,place);

	    forLoop(i, MAX_DM_DB_LINES)
	    {
	        if(strlen(DeathBoardDM[i][dStr]) < 10)
	        {
	            alldone = 0;
	            break;
	        }
		}
		if(alldone == 0)
		{
		    forLoop(i, MAX_DM_DB_LINES)
		    {
		        if(strlen(DeathBoardDM[i][dStr]) < 10)
		        {
			        format(DeathBoardDM[i][dStr], 50, "%s",string);
					TextDrawSetString(DeathBoardDM[i][dText], DeathBoardDM[i][dStr]);
					break;
				}
		    }
		}
	    else
	    {
	        forLoop(i, (MAX_DM_DB_LINES-1))
		    {
		        format(DeathBoardDM[i][dStr], 50, "%s",DeathBoardDM[i+1][dStr]);
				TextDrawSetString(DeathBoardDM[i][dText], DeathBoardDM[i][dStr]);
		    }
		    format(DeathBoardDM[10][dStr], 50, "%s",string);
			TextDrawSetString(DeathBoardDM[10][dText], DeathBoardDM[10][dStr]);
	    }
    }
    else
    {
        forLoop(i, MAX_DM_DB_LINES)
		{
			TextDrawSetString(DeathBoardDM[i][dText], "_");
		}
        forLoop(i,DMMapAlivePlayers())
		{
		    new pid, finished =0;
			forLoop(p, MAX_PLAYERS)
			{
				if(IsPlayerConnected(p) && DMPlayerInfo[p][Alive] == 1 &&
					PlayerInfo[p][Spawned] == 1 && PlayerInfo[p][PlayerMode] == DM && !IsPlayerNPC(p))
				{
				    if(DMPlayerInfo[p][cRacePos] == i+1)
				    {
						if(DMPlayerInfo[p][rFinished] == 1) finished = 1;
				    	pid = p;
				    	break;
					}
				}
			}
		    format(thename,50,"%s",PlayerInfo[pid][Name]);
		    forLoop(d, strlen(thename))
		    {
			    if (thename[d] == ']')thename[d] = ')';
			    if (thename[d] == '[')thename[d] = '(';
			    if (thename[d] == '_')thename[d] = '-';
			}
			if(strlen(thename) >= 15)
			{
				strdel(thename, 15, strlen(thename));
				format(thename,50,"%s.",thename);
			}
		    if(finished == 0)format(DeathBoardDM[i][dStr], 50, "~w~%s~g~   .%d",thename,i+1);
			else format(DeathBoardDM[i][dStr], 50, "~r~(finished)~w~%s~g~   .%d",thename,i+1);
			TextDrawSetString(DeathBoardDM[i][dText], DeathBoardDM[i][dStr]);
		}
    }
	/*forLoop(i, MAX_PLAYERS)
	{
		if(IsPlayerConnected(i) && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][PlayerMode] == DM && !IsPlayerNPC(i))
		{
		    HideDMDDTexts(i);
			ShowDMDDTexts(i);
		}
	}*/
}

stock ShowHideDMDeathBoard(i)
{
	if(!DMPlayerInfo[i][DisableDB])
	{
	    HideDMDDTexts(i);
		DMPlayerInfo[i][DisableDB] = 1;
	}
	else
	{
		DMPlayerInfo[i][DisableDB] = 0;
	    ShowDMDDTexts(i);
	}
}
stock ShowDMDDTexts(playerid)
{
	if(DMPlayerInfo[playerid][DisableDB] == 0)
	    forLoop(u, MAX_DM_DB_LINES)
			TextDrawShowForPlayer(playerid,DeathBoardDM[u][dText]);
}
stock HideDMDDTexts(playerid)
{
    forLoop(u, MAX_DM_DB_LINES)
		TextDrawHideForPlayer(playerid,DeathBoardDM[u][dText]);
}
stock CreateDMDBTexts(id)
{
	TextDrawLetterSize(DeathBoardDM[id][dText], 0.153998, 1.168332);
	TextDrawAlignment(DeathBoardDM[id][dText], 3);
	TextDrawColor(DeathBoardDM[id][dText], 23439871);
	TextDrawSetShadow(DeathBoardDM[id][dText], 1);
	TextDrawSetOutline(DeathBoardDM[id][dText], 0);
	TextDrawBackgroundColor(DeathBoardDM[id][dText], 51);
	TextDrawFont(DeathBoardDM[id][dText], 2);
	TextDrawSetProportional(DeathBoardDM[id][dText], 1);
}
forward ChooseRandomMapDM(pathname[]);
public ChooseRandomMapDM(pathname[])
{
    new id, mnames[MAX_DM_MAPS];
    forLoop(i, MAX_DM_MAPS)
    {
    	if(DMMapsInfo[i][Exists] == 1)
    	{
    	    if(!(strfind(DMMapsInfo[i][pathName], pathname, true) != -1))
			{
                mnames[id] = i;
                id++;
			}
    	}
    }
	if(id >= MAX_DM_MAPS)id = MAX_DM_MAPS-1;
    LoadDMMap(mnames[random(id)]);
}

stock SearchForMapNameDM(mname[])
{
	new id = -1;
    forLoop(i, MAX_DM_MAPS)
    {
    	if(DMMapsInfo[i][Exists] == 1)
    	{
    	    if(strfind(DMMapsInfo[i][mName], mname, true) != -1)
			{
			    id = i;
			    break;
			}
    	}
    }
	return id;
}

stock IsPlayerOnBoat(playerid)
{
	new model = GetVehicleModel(GetPlayerVehicleID(playerid));
	switch(model)
	{
		case 473,472,493,595,539,484,430,453,452,446,454:  return true;
	}
	return false;
}

stock IsPlayerOnBicycle(playerid)
{
	new model = GetVehicleModel(GetPlayerVehicleID(playerid));
	switch(model)
	{
		case 481,509,510:  return true;
	}
	return false;
}

stock IsVehBicycle(vehid)
{
	new model = GetVehicleModel(vehid);
	switch(model)
	{
		case 481,509,510:  return true;
	}
	return false;
}

stock IsVehTrailer(vehid)
{
	new model = GetVehicleModel(vehid);
	switch(model)
	{
		case 435,450,569,570,584,590,591,606,607,608,610,611:  return true;
	}
	return false;
}

forward CheckDMMapZForPlayer();
public CheckDMMapZForPlayer()
{
    //if(DMMAPInfo[Type] != DM_TYPE_RACE)
    {
        forLoop(playerid, MAX_PLAYERS)
		{
			if(!IsPlayerConnected(playerid) || IsPlayerNPC(playerid))continue;
		    if(DMPlayerInfo[playerid][Alive] == 1 && DMMAPInfo[dStarted] == 1 && IsPlayerInAnyVehicle(playerid) && PlayerInfo[playerid][Spawned] == 1 && PlayerInfo[playerid][PlayerMode] == DM)
			{
				new Float:z,Float:x;
				GetPlayerPos(playerid, x, x, z);
				if(floatround(z) <= 0 && !IsPlayerOnBoat(playerid))
				{
					//printf("DEBUG CFONTROL CheckDMMapZForPlayer 1");
				    if(!(DMMAPInfo[Type] == DM_TYPE_RACE && DMPlayerInfo[playerid][rFinished] == 1))
						DMMapDisqualifyPlayer(playerid, 1, 1);
					//printf("DEBUG CFONTROL CheckDMMapZForPlayer 2");
				}
			}
		}
	}
	return 1;
}
forward CheckDMMapVTsForPlayer(playerid);
public CheckDMMapVTsForPlayer(playerid)
{
	if(!IsPlayerConnected(playerid) || IsPlayerNPC(playerid))return 0;
	if(PlayerInfo[playerid][PlayerMode] == DM && PlayerInfo[playerid][Spawned] == 1 && DMPlayerInfo[playerid][Alive] == 1 && DMMAPInfo[dStarted] == 1)
	{
	    forLoop(id, DM_MAX_MARKERS)
		{
		    if(DMMAPInfo[vExists][id] == 1)
			{
			    if(IsPlayerInRangeOfPoint(playerid, DMMAPInfo[vpRange][id], DMMAPInfo[vpX][id],DMMAPInfo[vpY][id],DMMAPInfo[vpZ][id]))
				{
				    if(DMPlayerInfo[playerid][vEntered][id] == 0)
				    {
						//printf("DEBUG CFONTROL CheckDMMapVTsForPlayer 1");
                        new Float:x, Float:y, Float:z
                        	,Float:vx, Float:vy, Float:vz
							,v_allowed = 1;
				    	GetVehiclePos(GetPlayerVehicleID(playerid),x,y,z);
				    	GetVehicleVelocity(GetPlayerVehicleID(playerid),vx,vy,vz);
				    	
					    if(DMMAPInfo[vAng][id] != 20000.0)SetVehicleZAngle(GetPlayerVehicleID(playerid), DMMAPInfo[vAng][id]);

					    if((DMMAPInfo[vvX][id] == 20000.0 && DMMAPInfo[vvY][id] == 20000.0 && DMMAPInfo[vvZ][id] == 20000.0))
					        v_allowed = 0;

					    if(!(DMMAPInfo[vtX][id] == 20000.0 && DMMAPInfo[vtY][id] == 20000.0 && DMMAPInfo[vtZ][id] == 20000.0))
					    {
							if(DMMAPInfo[vFreeze][id] == 1 && v_allowed == 0)
			    			{
								FreezeBeforeObjects(playerid);
							}
						    if(DMMAPInfo[vtTypeX][id] == 1)x += DMMAPInfo[vtX][id];
					    	else x = DMMAPInfo[vtX][id];
					    	if(DMMAPInfo[vtTypeY][id] == 1)y += DMMAPInfo[vtY][id];
					    	else y = DMMAPInfo[vtY][id];
					    	if(DMMAPInfo[vtTypeZ][id] == 1)z += DMMAPInfo[vtZ][id];
					    	else z = DMMAPInfo[vtZ][id];

						    SetVehiclePos(GetPlayerVehicleID(playerid),x,y,z+3);
			    			SetVehicleZAngle(GetPlayerVehicleID(playerid), DMMAPInfo[vAng][id]);
		    			}
						if(v_allowed == 1)
						{
					    	if(DMMAPInfo[vvTypeX][id] == 1)x += DMMAPInfo[vvX][id];
					    	else vx = DMMAPInfo[vvX][id];
					    	if(DMMAPInfo[vvTypeY][id] == 1)y += DMMAPInfo[vvY][id];
					    	else vy = DMMAPInfo[vvY][id];
					    	if(DMMAPInfo[vvTypeZ][id] == 1)z += DMMAPInfo[vvZ][id];
					    	else vz = DMMAPInfo[vvZ][id];
					    	SetVehicleVelocity(GetPlayerVehicleID(playerid),vx,vy,vz);
				    	}
				    	DMPlayerInfo[playerid][vEntered][id] = 1;
						//printf("DEBUG CFONTROL CheckDMMapVTsForPlayer 2");
					}
				}
				else DMPlayerInfo[playerid][vEntered][id] = 0;
			}
		}
	}
	return 1;
}

forward CheckDMMapItemsForPlayer(playerid);
public CheckDMMapItemsForPlayer(playerid)
{
	if(!IsPlayerConnected(playerid) || IsPlayerNPC(playerid))return 0;
	if(PlayerInfo[playerid][PlayerMode] == DM && PlayerInfo[playerid][Spawned] == 1 && DMPlayerInfo[playerid][Alive] == 1 && DMMAPInfo[dStarted] == 1)
	{
        forLoop(id, MAX_DM_ITEMS)
		{
		    if(DMMAPInfo[iExists][id] == 1)
			{
			    new Float:range = 3.5;
			    switch(DMMAPInfo[iType][id])
				{
				    case 0, 1, 425, 520:range = 6.5;
				    default:range = 3.5;
				}
				if(IsPlayerInRangeOfPoint(playerid, range, DMMAPInfo[iX][id],DMMAPInfo[iY][id],DMMAPInfo[iZ][id]))
				{
				    if(DMPlayerInfo[playerid][iEntered][id] == 0)
				    {
						//printf("DEBUG CFONTROL CheckDMMapItemsForPlayer 1");
						switch(DMMAPInfo[iType][id])
						{
						    case 0:
						    {
						        RepairVehicle(GetPlayerVehicleID(playerid));
								PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
								DMPlayerInfo[playerid][iEntered][id] = 1;
						    }
						    case 1:
						    {
			                    AddVehicleComponent(GetPlayerVehicleID(playerid), 1010);
								PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
								DMPlayerInfo[playerid][iEntered][id] = 1;
						    }
						    default:
						    {
						        if(GetVehicleModel(GetPlayerVehicleID(playerid)) != DMMAPInfo[iType][id])
						        {
									new Float:currspeed[3];
				        			new Float:x,Float:y,Float:z,Float:ang;
									DMPlayerInfo[playerid][iEntered][id] = 1;
				        			GetVehiclePos(GetPlayerVehicleID(playerid), x, y, z);
				        			GetVehicleZAngle(GetPlayerVehicleID(playerid), ang);
									GetVehicleVelocity(GetPlayerVehicleID(playerid), currspeed[0], currspeed[1], currspeed[2]);
				                    if(PlayerInfo[playerid][Vehicle] != -1) DestroyVehicle(PlayerInfo[playerid][Vehicle]);
									PlayerInfo[playerid][Vehicle]=-1;
									new vehid = AddStaticVehicle(DMMAPInfo[iType][id], x, y, z+1,ang, random(320), random(330));
				                	SetVehicleNumberPlate(vehid, DMPlayerInfo[playerid][sPlate]);
									if(DMPlayerInfo[playerid][Wheels] > 0)AddVehicleComponent(vehid, DMPlayerInfo[playerid][Wheels]);
					            	SetVehicleVirtualWorld(vehid,GetPlayerVirtualWorld(playerid));
									LinkVehicleToInterior(vehid,GetPlayerInterior(playerid));
									SetVehicleZAngle(vehid, ang);
		                            if(DMMAPInfo[iType][id] == 425)
		                                SetVehiclePos(vehid,x,y,z+50);
									PlacePlayerInVehicle(playerid,vehid,0);
									PlayerInfo[playerid][Vehicle]=vehid;

									SetVehicleVelocity(GetPlayerVehicleID(playerid), currspeed[0], currspeed[1], currspeed[2]);
				        			SetVehicleZAngle(GetPlayerVehicleID(playerid), ang);
                                    PlayerInfo[playerid][SpeedoReset] = 1;
									forLoop(u, MAX_PLAYERS)
									{
									    if(IsPlayerConnected(u) && PlayerInfo[u][Spawned] == 1 && PlayerInfo[u][PlayerMode] == DM && !IsPlayerNPC(u) && GetPlayerState(u) == PLAYER_STATE_SPECTATING && DMPlayerInfo[u][SpecID] == playerid) {
									       DM_StartSpectate(u, playerid);
										}
									}
									if(DMMAPInfo[Type] == DM_TYPE_DM)
									{
										if(DMMAPInfo[iType][id] == 425 || DMMAPInfo[iType][id] == 520)
										{
										    new string[180];
										    format(string, sizeof string, "~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~w~%s reached ~r~%s",FixpInfoName(playerid),VehicleNames[DMMAPInfo[iType][id]-400]);
										    forLoop(i, MAX_PLAYERS)
											{
												if(IsPlayerConnected(i) && DMMAPInfo[dStarted] == 1 && DMPlayerInfo[i][Alive] == 1 && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][PlayerMode] == DM && !IsPlayerNPC(i))
												{
												    GameTextForPlayer(i, string, 2000, 3);
												}
											}

										    format(string, sizeof string, "{33FF33}DM/DD FINISH: {FFFFFF}%s reached the {FF0000}%s!(%s)(+$250)",PlayerInfo[playerid][Name],VehicleNames[DMMAPInfo[iType][id]-400],ShowDMMapTime());
			                                SendMessageToMode(DM,COLOR_WHITE, string);
											DMPlayerInfo[playerid][Hunters]++;
										    new hunters=0;
										    forLoop(i, MAX_PLAYERS)
											{
												if(IsPlayerConnected(i) && DMMAPInfo[dStarted] == 1 && DMPlayerInfo[i][Alive] == 1 && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][PlayerMode] == DM && !IsPlayerNPC(i))
												{
												    if(GetVehicleModel(GetPlayerVehicleID(i)) == 425 || GetVehicleModel(GetPlayerVehicleID(i)) == 520)
												    {
														hunters++;
													}
												}
											}
											DMPlayerInfo[playerid][Camper] = 0;
										    if(DMPlayerInfo[playerid][rRespawn] == 0)CheckTopTimesDM(playerid);
											ChangeModeScore(playerid, (DMMapAlivePlayers()-hunters)*3);
										    GiveThePlayerMoney(playerid, 250);
										    if(hunters == 1 && DMMapAlivePlayers() > 1)
										    {
											    if(DMMAPInfo[Type] == DM_TYPE_DM)
					        					{
													forLoop(i, MAX_PLAYERS)
													{
														if(IsPlayerConnected(i) && i != playerid && DMPlayerInfo[i][Alive] == 1 && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][PlayerMode] == DM && !IsPlayerNPC(i))
														{
														    vehid = GetPlayerVehicleID(i);
											            	SetVehicleVirtualWorld(GetPlayerVehicleID(i),GetPlayerVirtualWorld(playerid));
															SetPlayerVirtualWorld(i,GetPlayerVirtualWorld(playerid));
															PlacePlayerInVehicle(i,vehid,0);
															forLoop(u, MAX_PLAYERS)
															{
															    if(IsPlayerConnected(u) && PlayerInfo[u][Spawned] == 1 && PlayerInfo[u][PlayerMode] == DM && !IsPlayerNPC(u) && GetPlayerState(u) == PLAYER_STATE_SPECTATING && DMPlayerInfo[u][SpecID] == i) {
															       DM_StartSpectate(u, i);
																}
															}
														}
													}
												}
											}
											if(DMMapAlivePlayers() == 1)
											{
											    DMMapDisqualifyPlayer(playerid, 1 ,1);
											}
										}
									}
								}
						    }
						}
						//printf("DEBUG CFONTROL CheckDMMapItemsForPlayer 2");
					}
				}
				else DMPlayerInfo[playerid][iEntered][id] = 0;
			}
		}
	}
	return 1;
}
//=====================[PTP]=============================
stock UpgradePTPRanks(playerid)
{
    new string[190];
	//printf("DEBUG CFONTROL UpgradePTPRanks 1");
	if (PTPPlayerInfo[playerid][Kills] >= 380)
	{
	    if(PTPPlayerInfo[playerid][Rank] < 1)
	    {
			PTPPlayerInfo[playerid][Rank] = 1;
			format(string,sizeof(string),"{FF0000}PTP:{FFFFFF} %s(ID:%d) just unlocked Rank: {FF0000}%s.",PlayerInfo[playerid][Name],playerid,ThePTPRanks[PTPPlayerInfo[playerid][Rank]]);
			SendMessageToMode(PTP,red1, string);
			format(string, sizeof(string), "[PTP] %s(ID:%d) just unlocked Rank: %s.",PlayerInfo[playerid][Name],playerid,ThePTPRanks[PTPPlayerInfo[playerid][Rank]]);
			db_SaveChat(-1, PTP,string);
		}
	}
	if (PTPPlayerInfo[playerid][Kills] >= 680)
	{
	    if(PTPPlayerInfo[playerid][Rank] < 2)
	    {
			PTPPlayerInfo[playerid][Rank] = 2;
			format(string,sizeof(string),"{FF0000}PTP:{FFFFFF} %s(ID:%d) just unlocked Rank: {FF0000}%s.",PlayerInfo[playerid][Name],playerid,ThePTPRanks[PTPPlayerInfo[playerid][Rank]]);
			SendMessageToMode(PTP,red1, string);
			format(string, sizeof(string), "[PTP] %s(ID:%d) just unlocked Rank: %s.",PlayerInfo[playerid][Name],playerid,ThePTPRanks[PTPPlayerInfo[playerid][Rank]]);
			db_SaveChat(-1, PTP,string);
		}
	}
	if (PTPPlayerInfo[playerid][Kills] >= 980)
	{
	    if(PTPPlayerInfo[playerid][Rank] < 3)
	    {
			PTPPlayerInfo[playerid][Rank] = 3;
			format(string,sizeof(string),"{FF0000}PTP:{FFFFFF} %s(ID:%d) just unlocked Rank: {FF0000}%s.",PlayerInfo[playerid][Name],playerid,ThePTPRanks[PTPPlayerInfo[playerid][Rank]]);
			SendMessageToMode(PTP,red1, string);
			format(string, sizeof(string), "[PTP] %s(ID:%d) just unlocked Rank: %s.",PlayerInfo[playerid][Name],playerid,ThePTPRanks[PTPPlayerInfo[playerid][Rank]]);
			db_SaveChat(-1, PTP,string);
		}
	}
	if (PTPPlayerInfo[playerid][Kills] >= 1380)
	{
	    if(PTPPlayerInfo[playerid][Rank] < 4)
	    {
			PTPPlayerInfo[playerid][Rank] = 4;
			format(string,sizeof(string),"{FF0000}PTP:{FFFFFF} %s(ID:%d) just unlocked Rank: {FF0000}%s.",PlayerInfo[playerid][Name],playerid,ThePTPRanks[PTPPlayerInfo[playerid][Rank]]);
			SendMessageToMode(PTP,red1, string);
			format(string, sizeof(string), "[PTP] %s(ID:%d) just unlocked Rank: %s.",PlayerInfo[playerid][Name],playerid,ThePTPRanks[PTPPlayerInfo[playerid][Rank]]);
			db_SaveChat(-1, PTP,string);
		}
	}
	if (PTPPlayerInfo[playerid][Kills] >= 1980)
	{
	    if(PTPPlayerInfo[playerid][Rank] < 5)
	    {
			PTPPlayerInfo[playerid][Rank] = 5;
			format(string,sizeof(string),"{FF0000}PTP:{FFFFFF} %s(ID:%d) just unlocked Rank: {FF0000}%s.",PlayerInfo[playerid][Name],playerid,ThePTPRanks[PTPPlayerInfo[playerid][Rank]]);
			SendMessageToMode(PTP,red1, string);
			format(string, sizeof(string), "[PTP] %s(ID:%d) just unlocked Rank: %s.",PlayerInfo[playerid][Name],playerid,ThePTPRanks[PTPPlayerInfo[playerid][Rank]]);
			db_SaveChat(-1, PTP,string);
		}
	}
	//printf("DEBUG CFONTROL UpgradePTPRanks 2");
}

stock EndPTPRound(team)
{
	//printf("DEBUG CFONTROL EndPTPRound 1");
	if(team == GOOD)
	{
	    forLoop(y, MAX_PLAYERS)
		{
			if(!IsPlayerConnected(y) || IsPlayerNPC(y))continue;
     		if(PlayerInfo[y][PlayerMode] == PTP && PlayerInfo[y][Spawned] == 1)
			{
				TogglePlayerControllable(y,false);
				SetPlayerWorldBounds(y, 20000.0000, -20000.0000, 20000.0000, -20000.0000 );
				SetPlayerPos(y, -2618.9778, 1442.3223, 8.4407);
				SetPlayerCameraPos(y, -2609.5032, 1447.3551, 22.3680);
				SetPlayerCameraLookAt(y, -2609.7451, 1448.3304, 22.5931);
	 			GameTextForPlayer(y," ",1000,6);

				if(PlayerInfo[y][pTeam] == BAD)
			    {
			        PTPPlayerInfo[y][RoundsLost]++;
		    		GiveThePlayerMoney(y,-1000);
					ChangeModeScore(y, -10);
			    }
			    if(PlayerInfo[y][pTeam] == GOOD)
				{
					PTPPlayerInfo[y][RoundsWon]++;
		    		GiveThePlayerMoney(y,1000);
					ChangeModeScore(y, 10);
				}
				if(PTPPlayerInfo[y][Class] == PRESIDENT)
				{
					PTPPlayerInfo[y][Survives]++;
					PTPPlayerInfo[y][AlreadyLeader] = 900;
					ChangeModeScore(y, 55);
					GiveThePlayerMoney(y, 25000);
				}
				if(PTPPlayerInfo[y][Class] == SECURITY)
				{
					GiveThePlayerMoney(y, 1000);
					ChangeModeScore(y, 15);
				}
                if(PTPPlayerInfo[y][Class] == PRESIDENT || PTPPlayerInfo[y][Class] == VICE || PTPPlayerInfo[y][Class] == SECURITY)
			    {
			        PTPPlayerInfo[y][Class] = CIVILIAN;
			    }
				SpawnPlayerTimer(y, 3000);
				hidePTPTexts(y);
			}
		}
		SendMessageToMode(PTP,white, "{33FF33}NEWS:{FFFFFF} The President has survived, terrorists have lost!");
		db_SaveChat(-1, PTP,"[NEWS] The President has survived, terrorists have lost!");
		KillTimer(PTPInfo[Timer]);
		ChangeMapPTP();
	}
	else
	{
	    forLoop(y, MAX_PLAYERS)
		{
			if(!IsPlayerConnected(y) || IsPlayerNPC(y))continue;
     		if(PlayerInfo[y][PlayerMode] == PTP && PlayerInfo[y][Spawned] == 1)
			{
				TogglePlayerControllable(y,false);
				SetPlayerWorldBounds(y, 20000.0000, -20000.0000, 20000.0000, -20000.0000 );
				SetPlayerPos(y, -2618.9778, 1442.3223, 8.4407);
				SetPlayerCameraPos(y, -2609.5032, 1447.3551, 22.3680);
				SetPlayerCameraLookAt(y, -2609.7451, 1448.3304, 22.5931);
	 			GameTextForPlayer(y," ",1000,6);

				if(PlayerInfo[y][pTeam] == GOOD)
			    {
			        PTPPlayerInfo[y][RoundsLost]++;
			        PTPPlayerInfo[y][Score] -=10;
		    		GiveThePlayerMoney(y,-1000);
			    }
			    if(PlayerInfo[y][pTeam] == BAD)
				{
					PTPPlayerInfo[y][RoundsWon]++;
           			PTPPlayerInfo[y][Score] +=10;
		    		GiveThePlayerMoney(y,1000);
				}
                if(PTPPlayerInfo[y][Class] == PRESIDENT || PTPPlayerInfo[y][Class] == VICE || PTPPlayerInfo[y][Class] == SECURITY)
			    {
			        PTPPlayerInfo[y][Class] = CIVILIAN;
			    }
				SpawnPlayerTimer(y, 3000);
				hidePTPTexts(y);
			}
		}
		SendMessageToMode(PTP,white, "{33FF33}NEWS:{FFFFFF} The President has died, terrorists have won!");
		db_SaveChat(-1, PTP,"[NEWS] The President has died, terrorists have won!");
		KillTimer(PTPInfo[Timer]);
		ChangeMapPTP();
	}
	//printf("DEBUG CFONTROL EndPTPRound 2");
}

stock GivethePTPWeapons(playerid)
{
	if(PTPPlayerInfo[playerid][Class] == PRESIDENT)
	{
		GivePlayerWeapons(playerid,0,0,WEAPON_DEAGLE,120,WEAPON_CANE,1,0,0);
		SetArmor(playerid,99.0);
	}
	else if(PTPPlayerInfo[playerid][Class] == VICE)
	{
	    GivePlayerWeapons(playerid,0,0,WEAPON_DEAGLE,120,WEAPON_SHOTGUN,270,WEAPON_CANE,1);
	}
	else if(PTPPlayerInfo[playerid][Class] == SECURITY)
	{
	    GivePlayerWeapons(playerid,WEAPON_DEAGLE,299,WEAPON_SHOTGSPA,1290,WEAPON_M4,2910,WEAPON_MP5, 1000);
		SetArmor(playerid,99.0);
	}
	else if(PTPPlayerInfo[playerid][Class] == CIVILIAN)
	{
		GivePlayerWeapons(playerid,WEAPON_RIFLE,90,WEAPON_DEAGLE,420,WEAPON_SHOTGUN,270,WEAPON_KATANA,1);
	}
	else
	{
        switch(PTPPlayerInfo[playerid][Rank])
        {
            case 0:
            {
                if(PTPPlayerInfo[playerid][Class] == POLICE)
	    		{
	    		    GivePlayerWeapons(playerid,WEAPON_COLT45,70,WEAPON_SHOTGUN,120,WEAPON_NITESTICK,1,WEAPON_RIFLE,60);
	    		    GivePlayerWeapons(playerid,WEAPON_UZI,240,0,0,0,0,0,0);
					SetArmor(playerid,0.0);
	    		}
	    		else if(PTPPlayerInfo[playerid][Class] == TERRORIST)
	    		{
                    GivePlayerWeapons(playerid,WEAPON_COLT45,70,WEAPON_SHOTGUN,120,WEAPON_KNIFE,1,WEAPON_RIFLE,60);
	    		    GivePlayerWeapons(playerid,WEAPON_TEC9,240,0,0,0,0,0,0);
					SetArmor(playerid,0.0);
	    		}
            }
            case 1:
            {
                if(PTPPlayerInfo[playerid][Class] == POLICE)
	    		{
	    		    GivePlayerWeapons(playerid,WEAPON_COLT45,140,WEAPON_SHOTGUN,240,WEAPON_NITESTICK,1,WEAPON_RIFLE,120);
	    		    GivePlayerWeapons(playerid,WEAPON_UZI,480,0,0,0,0,0,0);
					SetArmor(playerid,10.0);
	    		}
	    		else if(PTPPlayerInfo[playerid][Class] == TERRORIST)
	    		{
                    GivePlayerWeapons(playerid,WEAPON_COLT45,140,WEAPON_SHOTGUN,240,WEAPON_KNIFE,1,WEAPON_RIFLE,120);
	    		    GivePlayerWeapons(playerid,WEAPON_TEC9,480,0,0,0,0,0,0);
					SetArmor(playerid,10.0);
	    		}
            }
            case 2:
            {
                if(PTPPlayerInfo[playerid][Class] == POLICE)
	    		{
	    		    GivePlayerWeapons(playerid,WEAPON_DEAGLE,120,WEAPON_SHOTGUN,600,WEAPON_KATANA,1,WEAPON_RIFLE,240);
	    		    GivePlayerWeapons(playerid,WEAPON_UZI,900,WEAPON_M4,200,0,0,0,0);
					SetArmor(playerid,20.0);
	    		}
	    		else if(PTPPlayerInfo[playerid][Class] == TERRORIST)
	    		{
                    GivePlayerWeapons(playerid,WEAPON_DEAGLE,120,WEAPON_SHOTGUN,600,WEAPON_KATANA,1,WEAPON_RIFLE,240);
	    		    GivePlayerWeapons(playerid,WEAPON_TEC9,900,WEAPON_AK47,200,0,0,0,0);
					SetArmor(playerid,20.0);
	    		}
            }
            case 3:
            {
                if(PTPPlayerInfo[playerid][Class] == POLICE)
	    		{
	    		    GivePlayerWeapons(playerid,WEAPON_DEAGLE,420,WEAPON_SHOTGUN,900,WEAPON_KATANA,1,WEAPON_RIFLE,440);
	    		    GivePlayerWeapons(playerid,WEAPON_MP5,300,WEAPON_M4,600,WEAPON_GRENADE,8,0,0);
					SetArmor(playerid,30.0);
	    		}
	    		else if(PTPPlayerInfo[playerid][Class] == TERRORIST)
	    		{
                    GivePlayerWeapons(playerid,WEAPON_DEAGLE,420,WEAPON_SHOTGUN,900,WEAPON_KATANA,1,WEAPON_RIFLE,440);
	    		    GivePlayerWeapons(playerid,WEAPON_MP5,300,WEAPON_AK47,600,WEAPON_GRENADE,8,0,0);
					SetArmor(playerid,30.0);
	    		}
            }
            case 4:
            {
                if(PTPPlayerInfo[playerid][Class] == POLICE)
	    		{
	    		    GivePlayerWeapons(playerid,WEAPON_DEAGLE,800,WEAPON_SHOTGSPA,420,WEAPON_KATANA,1,WEAPON_SNIPER,170);
	    		    GivePlayerWeapons(playerid,WEAPON_MP5,700,WEAPON_M4,2000,WEAPON_GRENADE,16,WEAPON_BRASSKNUCKLE,1);
					SetArmor(playerid,60.0);
	    		}
	    		else if(PTPPlayerInfo[playerid][Class] == TERRORIST)
	    		{
                    GivePlayerWeapons(playerid,WEAPON_DEAGLE,800,WEAPON_SHOTGSPA,420,WEAPON_KATANA,1,WEAPON_SNIPER,170);
	    		    GivePlayerWeapons(playerid,WEAPON_MP5,700,WEAPON_AK47,2000,WEAPON_GRENADE,16,WEAPON_BRASSKNUCKLE,1);
					SetArmor(playerid,60.0);
	    		}
            }
            case 5:
            {
                if(PTPPlayerInfo[playerid][Class] == POLICE)
	    		{
	    		    GivePlayerWeapons(playerid,WEAPON_DEAGLE,1600,WEAPON_SAWEDOFF,1420,WEAPON_KATANA,1,WEAPON_SNIPER,1000);
	    		    GivePlayerWeapons(playerid,WEAPON_MP5,2700,WEAPON_M4,4000,WEAPON_GRENADE,30,WEAPON_BRASSKNUCKLE,1);
					SetArmor(playerid,99.0);
	    		}
	    		else if(PTPPlayerInfo[playerid][Class] == TERRORIST)
	    		{
                    GivePlayerWeapons(playerid,WEAPON_DEAGLE,1600,WEAPON_SAWEDOFF,1420,WEAPON_KATANA,1,WEAPON_SNIPER,1000);
	    		    GivePlayerWeapons(playerid,WEAPON_MP5,2700,WEAPON_AK47,4000,WEAPON_GRENADE,30,WEAPON_BRASSKNUCKLE,1);
					SetArmor(playerid,99.0);
	    		}
            }
        }
    }
}

forward LowerPTPTimer();
public LowerPTPTimer()
{
	//printf("DEBUG CFONTROL LowerPTPTime 1");
	new lepass = (ClassCountPTP(PRESIDENT) == 1);
	if(lepass)
	{
		PTPInfo[TimeLeft]--;
		if(PTPInfo[TimeLeft] <= 0 && lepass)
		{
		    EndPTPRound(GOOD);
		    return 0;
		}
    }
    updatePTPTexts(lepass);
    //KillTimer(PTPInfo[Timer]);
    //PTPInfo[Timer] = SetTimer("LowerPTPTimer", 1000, 0);
	//if(ClassCountPTP(PRESIDENT) == 0)TextDrawSetString(PTPInfo[TimeLeftTD], " ");
	//printf("DEBUG CFONTROL LowerPTPTime 2");
    return 0;
}

forward StartLowerPTPTimer();
public StartLowerPTPTimer()
{
    KillTimer(PTPInfo[Timer]);
    PTPInfo[Timer] = SetTimer("LowerPTPTimer", 1000, 1);
    return 0;
}

stock CreateThePTPCar(modelid, Float:spawn_x, Float:spawn_y, Float:spawn_z, Float:z_angle, color1, color2)
{
	//printf("DEBUG CFONTROL CreateThePTPCar 1");
    maxPTPvehicles++;
    PTPInfo[Vehicles][maxPTPvehicles]=AddStaticVehicleEx(modelid, Float:spawn_x, Float:spawn_y, Float:spawn_z, Float:z_angle, color1, color2, 120);
    SetVehicleVirtualWorld(PTPInfo[Vehicles][maxPTPvehicles],W_PTP);
    SetVehicleNumberPlate(PTPInfo[Vehicles][maxPTPvehicles], ServerInfo[lPlate]);
	//printf("DEBUG CFONTROL CreateThePTPCar 2");
}

stock updatePTPTexts(lepass)
{
	if(lepass)
	{
		new st[50], Float:health, Float:armour;
		PTPInfo[td_Checked] = 0;
	    forLoop(i, MAX_PLAYERS)
	    {
			if(IsPlayerConnected(i) && PTPPlayerInfo[i][Class] == PRESIDENT && PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][PlayerMode] == PTP && !IsPlayerNPC(i))
			{
			    GetPlayerHealth(i, Float:health);
			    GetPlayerArmour(i, Float:armour);
				format(st, sizeof(st), "%s", FixpInfoName(i));
				TextDrawSetString(PTPInfo[td_Pres], st);

				format(st, sizeof(st), "%d", (floatround(health) == 99 || floatround(health) == 232) ? 100 : floatround(health));
				TextDrawSetString(PTPInfo[td_HP], st);

				format(st, sizeof(st), "%d", floatround(armour) == 99 ? 100 : floatround(armour));
				TextDrawSetString(PTPInfo[td_AR], st);

				format(st, sizeof(st), "%s", TimeConvertTL(PTPInfo[TimeLeft]));
				TextDrawSetString(PTPInfo[td_Time], st);
			}
		}
	}
	else if(PTPInfo[td_Checked] == 0)
	{
	    PTPInfo[td_Checked] = 1;
		TextDrawSetString(PTPInfo[td_Pres], "/ptp");
		TextDrawSetString(PTPInfo[td_HP], "100");
		TextDrawSetString(PTPInfo[td_AR], "100");
		TextDrawSetString(PTPInfo[td_Time], "15:00");
	}
}

stock hidePTPTexts(playerid)
{
    TextDrawHideForPlayer(playerid,PTPInfo[td_Pres]);
    TextDrawHideForPlayer(playerid,PTPInfo[td_HP]);
    TextDrawHideForPlayer(playerid,PTPInfo[td_AR]);
    TextDrawHideForPlayer(playerid,PTPInfo[td_Time]);
    forLoop(i, 6)TextDrawHideForPlayer(playerid,PTPInfo[td_BGs][i]);
    forLoop(i, 4)TextDrawHideForPlayer(playerid,PTPInfo[td_Ts][i]);
}

stock showPTPTexts(playerid)
{
    TextDrawShowForPlayer(playerid,PTPInfo[td_Pres]);
    TextDrawShowForPlayer(playerid,PTPInfo[td_HP]);
    TextDrawShowForPlayer(playerid,PTPInfo[td_AR]);
    TextDrawShowForPlayer(playerid,PTPInfo[td_Time]);
    forLoop(i, 6)TextDrawShowForPlayer(playerid,PTPInfo[td_BGs][i]);
    forLoop(i, 4)TextDrawShowForPlayer(playerid,PTPInfo[td_Ts][i]);
}

stock ChangeMapPTP()
{
	//printf("DEBUG CFONTROL ChangeMapPTP 1");
    PTPInfo[Map]++;
    if(PTPInfo[Map] >= 4)PTPInfo[Map] = 0;
	PTPSettings();
	db_UpdateSettings(PTP);
	new str[196];
	format(str, sizeof(str), "[NEWS] The map has been changed to %s.",PTPMapNames[PTPInfo[Map]]);
	db_SaveChat(-1, PTP,str);
	format(str, sizeof str, "{33FF33}NEWS:{FFFFFF} The map has been changed to %s.",PTPMapNames[PTPInfo[Map]]);
 	SendMessageToMode(PTP,red1, str);
	if ((TeamCountPTP(BAD) > TeamCountPTP(GOOD) && (TeamCountPTP(BAD) - TeamCountPTP(GOOD)) >= 2) || (TeamCountPTP(BAD) < TeamCountPTP(GOOD) && (TeamCountPTP(GOOD) - TeamCountPTP(BAD)) >= 2))
	{
	    SendMessageToMode(PTP,COLOR_WHITE, "{FF0000}TEAM BALANCER{FFFFFF} Teams will be balanced in five seconds!");
	    SetTimerEx("BalanceModeTeams", 5000, false, "i", PTP);
	}
	//printf("DEBUG CFONTROL ChangeMapPTP 2");
}

stock PTPSettings()
{
	//printf("DEBUG CFONTROL PTPSettings 1");
    maxPTPvehicles=-1;
    PTPInfo[td_Checked] = 0;
    //TextDrawSetString(PTPInfo[TimeLeftTD], " ");
    KillTimer(PTPInfo[Timer]);
	PTPInfo[Timer] = SetTimer("StartLowerPTPTimer", 4000, 0);
	PTPInfo[TimeLeft] = PTP_MAP_TIME;
    updatePTPTexts(false);
	forLoop(id, PTP_MAX_VEHICLES)
    {
    	if(PTPInfo[Vehicles][id] != -1)DestroyVehicle(PTPInfo[Vehicles][id]);
    	PTPInfo[Vehicles][id] = -1;
    }
    DestroyTheDynamicPickup(PTPInfo[pHP]);
    DestroyTheDynamicPickup(PTPInfo[pArmor]);
    DestroyTheDynamicPickup(PTPInfo[pRefill]);
	PTPInfo[pHP] = CreateDynamicPickup(1240, 2, PTPHPPlace[PTPInfo[Map]][0],PTPHPPlace[PTPInfo[Map]][1],PTPHPPlace[PTPInfo[Map]][2],W_PTP);//health
	PTPInfo[pArmor] = CreateDynamicPickup(1242, 2, PTPArmorPlace[PTPInfo[Map]][0],PTPArmorPlace[PTPInfo[Map]][1],PTPArmorPlace[PTPInfo[Map]][2],W_PTP);//armor
	PTPInfo[pRefill] = CreateDynamicPickup(1210, 2, PTPRefillPlace[PTPInfo[Map]][0],PTPRefillPlace[PTPInfo[Map]][1],PTPRefillPlace[PTPInfo[Map]][2], W_PTP);//refill police

    if(PTPInfo[Map]==PTP_SF)
	{
	    CreateThePTPCar(580,-2398.4639,328.7798,34.8926,150.1330,1,1); //
		CreateThePTPCar(551,-2403.5986,320.0582,34.9080,152.5263,0,0); //
		CreateThePTPCar(551,-2393.8127,336.7809,34.9211,147.9879,0,0); //
		CreateThePTPCar(490,-2386.4189,353.2946,35.2305,232.2335,0,0); //
		CreateThePTPCar(490,-2383.9692,358.5452,35.4219,229.7169,0,0); //
		CreateThePTPCar(490,-2380.1250,364.4275,35.4287,227.2861,0,0); //
		CreateThePTPCar(401,-2431.2087,307.4043,34.9404,252.9056,0,0); //
		CreateThePTPCar(562,-2435.2393,300.4637,34.7192,249.4601,0,0); //
		CreateThePTPCar(490,-2415.9255,307.7358,35.2807,244.2884,0,0); //
		CreateThePTPCar(490,-2425.8528,291.1338,35.4219,241.8948,0,0); //
		CreateThePTPCar(490,-2427.6487,287.1014,35.4219,244.5770,0,0); //
		CreateThePTPCar(451,-2461.4094,254.4802,34.8791,358.3270,0,0); //
		CreateThePTPCar(431,-2268.5071,149.3443,35.1914,269.5594,109,82); //
		CreateThePTPCar(500,-2266.3806,141.0622,35.1545,272.1583,100,17); //
		CreateThePTPCar(445,-2266.8206,137.6906,35.0374,268.8621,7,75); //
		CreateThePTPCar(405,-2265.3442,133.2138,35.0984,268.9673,12,82); //
		CreateThePTPCar(545,-2266.3096,129.0985,34.8625,270.9728,14,74); //
		CreateThePTPCar(480,-2265.7539,124.9648,34.9804,266.3854,19,53); //
		CreateThePTPCar(509,-2266.2031,112.3926,34.6839,273.0799,27,19); //
		CreateThePTPCar(481,-2265.9844,109.4565,34.6865,267.2891,1,95); //
		CreateThePTPCar(600,-2274.8516,-121.9015,35.0187,92.6434,33,31); //
		CreateThePTPCar(451,-2645.4675,1336.0660,6.8741,266.2885,119,79); //
		CreateThePTPCar(541,-2646.2983,1340.1605,6.7905,270.2634,92,70); //
		CreateThePTPCar(411,-2645.7971,1344.7032,6.8943,271.7226,11,106); //
		CreateThePTPCar(415,-2646.0474,1348.8215,6.9402,267.6313,50,23); //
		CreateThePTPCar(558,-2646.2383,1353.4760,6.7993,268.5522,0,124); //
		CreateThePTPCar(587,-2646.4619,1359.0284,6.9214,263.5575,67,89); //
		CreateThePTPCar(411,-2634.1819,1332.5483,6.9224,3.9446,11,106); //
		CreateThePTPCar(411,-2629.7107,1331.5959,6.9455,6.4008,2,2); //
		CreateThePTPCar(522,-2624.6182,1335.4655,6.7675,48.3880,99,99); //
		CreateThePTPCar(522,-2623.3450,1336.8971,6.7559,48.3879,112,112); //
		CreateThePTPCar(522,-2621.4121,1338.7058,6.6670,48.3879,68,68); //
		CreateThePTPCar(522,-2619.6733,1340.2004,6.6758,48.3878,92,92); //
		CreateThePTPCar(522,-2617.5562,1342.4832,6.6750,48.3878,172,172); //
		CreateThePTPCar(522,-2627.0605,1337.5767,6.6695,31.4677,11,11); //
		CreateThePTPCar(522,-2624.8188,1339.9989,6.6720,41.2437,99,99); //
		CreateThePTPCar(522,-2622.9954,1342.8705,6.6661,43.8758,124,124); //
		CreateThePTPCar(522,-2620.1206,1344.6190,6.6910,53.5265,70,70); //
		CreateThePTPCar(468,-2617.5706,1347.8378,6.8566,75.9774,0,0); //
		CreateThePTPCar(468,-2617.0120,1349.9415,6.8596,85.7875,0,0); //
		CreateThePTPCar(468,-2617.4883,1352.8129,6.7349,83.6500,0,0); //
		CreateThePTPCar(468,-2617.1926,1355.7098,6.7134,87.9120,0,0); //
		CreateThePTPCar(593,-2604.0813,1381.3164,7.6631,268.3122,0,0); //
		CreateThePTPCar(417,-2610.3835,1414.5929,7.4849,13.5446,0,0); //
		CreateThePTPCar(589,-2646.5205,1370.7255,6.8633,265.5552,47,32); //
		CreateThePTPCar(579,-2636.8950,1395.1490,7.0297,207.3953,0,0); //
		CreateThePTPCar(579,-2631.1265,1397.2203,7.1081,215.1255,0,0); //
		CreateThePTPCar(579,-2645.3801,1390.8964,7.1123,202.1908,0,0); //
		CreateThePTPCar(579,-2640.6289,1393.7969,7.1110,195.0095,0,0); //
		CreateThePTPCar(579,-2653.8574,1390.7955,7.1141,195.3122,0,0); //
		CreateThePTPCar(430,-2567.3918,1423.2694,-0.1698,277.9855,0,0); //
		CreateThePTPCar(493,-2570.8923,1433.8739,-0.2394,277.9010,68,68); //
		CreateThePTPCar(460,-2569.6357,1443.8650,1.5610,275.1720,0,0); //
		CreateThePTPCar(502,-2619.5032,1377.2184,7.0214,181.7011,80,76); //
		CreateThePTPCar(589,-2623.1931,1377.7211,6.8011,183.0599,123,104); //
		CreateThePTPCar(477,-2628.2910,1377.2405,6.8928,181.6447,62,82); //
		CreateThePTPCar(541,-2633.2625,1378.0710,6.7651,180.4329,77,113); //
		CreateThePTPCar(541,-2639.1792,1378.3265,6.7725,173.4095,77,113); //
		CreateThePTPCar(503,-2646.1101,1377.7053,7.0522,248.8962,43,112); //
		CreateThePTPCar(517,-1976.5940,1335.9424,7.0336,281.0544,102,103); //
		CreateThePTPCar(497,-1679.1620,705.7978,30.8516,102.7782,2,1); //
		CreateThePTPCar(597,-1628.2679,652.9020,6.9582,181.8055,2,1); //
		CreateThePTPCar(597,-1622.4349,651.8939,6.9546,179.7771,2,1); //
		CreateThePTPCar(597,-1616.3912,652.9311,6.9832,179.7295,2,1); //
		CreateThePTPCar(597,-1610.5587,652.1545,6.9805,178.2274,2,1); //
		CreateThePTPCar(597,-1604.7770,651.9650,6.9780,185.3489,2,1); //
		CreateThePTPCar(597,-1598.3787,651.9630,6.9808,187.1200,2,1); //
		CreateThePTPCar(523,-1612.3148,674.5858,6.6637,6.4252,16,16); //
		CreateThePTPCar(523,-1609.0931,674.8403,6.7663,0.9728,18,18); //
		CreateThePTPCar(523,-1606.7560,674.2267,6.6660,0.9728,68,68); //
		CreateThePTPCar(523,-1604.5319,674.2230,6.6598,0.8833,11,11); //
		CreateThePTPCar(523,-1602.2820,674.2852,6.6714,0.8834,73,73); //
		CreateThePTPCar(523,-1600.2733,674.1217,6.7621,0.8492,172,172); //
		CreateThePTPCar(523,-1598.1934,673.7458,6.6750,0.5090,31,31); //
		CreateThePTPCar(523,-1596.7076,677.2458,-5.6834,182.5098,31,31); //
		CreateThePTPCar(523,-1598.2561,677.4025,-5.6871,188.0299,31,31); //
		CreateThePTPCar(523,-1601.6915,676.8960,-5.6814,172.7299,31,31); //
		CreateThePTPCar(523,-1605.1016,675.8147,-5.6779,173.7232,31,31); //
		CreateThePTPCar(523,-1609.5647,674.3202,-5.6759,170.8028,31,31); //
		CreateThePTPCar(523,-1615.1669,675.9427,-5.3353,4.0139,31,31); //
		CreateThePTPCar(523,-1619.4850,675.4434,-5.3352,358.7259,31,31); //
		CreateThePTPCar(523,-1620.6554,680.1619,-5.5636,12.5872,31,31); //
		CreateThePTPCar(523,-1617.3461,680.7632,-5.5254,9.1968,31,31); //
		CreateThePTPCar(523,-1612.7443,680.1075,-5.5224,358.5461,31,31); //
		CreateThePTPCar(523,-1608.3148,680.6354,-5.6783,3.7097,31,31); //
		CreateThePTPCar(523,-1605.2208,680.5601,-5.6807,359.5285,31,31); //
		CreateThePTPCar(523,-1601.6238,679.5120,-5.6718,2.0526,31,31); //
		CreateThePTPCar(601,-1604.5662,691.8726,-5.4885,359.0218,0,0); //
		CreateThePTPCar(597,-1612.5144,692.2983,-5.4458,355.6210,2,1); //
		CreateThePTPCar(597,-1616.8434,691.1708,-5.4506,0.4397,2,1); //
		CreateThePTPCar(597,-1620.9420,691.4001,-5.4484,354.0727,2,1); //
		CreateThePTPCar(597,-1625.5050,691.8638,-5.4552,9.5098,2,1); //
		CreateThePTPCar(597,-1628.8783,692.0245,-5.4547,1.0496,2,1); //
		CreateThePTPCar(597,-1632.4025,691.3072,-5.4539,357.7533,2,1); //
		CreateThePTPCar(597,-1638.6091,687.3307,-5.4508,85.4032,2,1); //
		CreateThePTPCar(597,-1637.8165,681.6367,-5.4526,86.3182,2,1); //
		CreateThePTPCar(475,-1574.0281,709.9634,-5.4345,271.2264,2,1); //
		CreateThePTPCar(402,-1574.6957,718.4734,-5.4098,266.6487,2,1); //
		CreateThePTPCar(429,-1574.5632,726.3986,-5.5484,269.4522,2,1); //
		CreateThePTPCar(541,-1575.3571,730.3090,-5.6169,271.4861,2,1); //
		CreateThePTPCar(541,-1573.6174,735.3167,-5.6142,269.3864,2,1); //
		CreateThePTPCar(559,-1573.4022,742.9074,-5.5859,268.6114,2,1); //
		CreateThePTPCar(506,-1573.7350,738.6420,-5.5375,272.5831,2,1); //
		CreateThePTPCar(597,-1592.4128,748.5724,-5.4468,358.8024,2,1); //
		CreateThePTPCar(597,-1600.3458,748.0322,-5.4551,358.4515,2,1); //
		CreateThePTPCar(430,-1471.0865,702.4247,-0.3141,264.4324,2,1); //
		CreateThePTPCar(430,-1473.5596,691.6301,-0.1921,271.0384,2,1); //
		CreateThePTPCar(430,-1474.0723,682.5144,-0.1347,279.5025,2,1); //
		CreateThePTPCar(493,-1477.2157,673.6442,-0.1619,262.1103,2,1); //
		CreateThePTPCar(411,-1699.3345,697.1884,24.6177,93.6143,68,68); //
		CreateThePTPCar(405,-1916.2272,488.7316,35.1017,284.3393,84,2); //
		CreateThePTPCar(411,-1895.6145,249.2576,40.7739,170.3981,68,68); //
		CreateThePTPCar(522,-1899.6621,249.0761,40.5164,179.7167,68,68); //
		CreateThePTPCar(431,-1934.4286,111.5131,25.9941,181.2427,37,116); //
		CreateThePTPCar(407,-2018.2251,91.9699,28.0556,271.4271,3,1); //
		CreateThePTPCar(467,-1991.3464,137.9196,27.2789,355.8929,76,101); //
		CreateThePTPCar(600,-2027.9856,138.8537,28.6190,93.8224,29,56); //
		CreateThePTPCar(600,-2447.3350,-85.2005,33.8472,184.1270,29,56); //
		CreateThePTPCar(600,-2617.3506,-23.1384,4.0462,359.4463,29,56); //
		CreateThePTPCar(480,-2624.4043,-36.0451,4.1432,182.7029,30,72); //
		CreateThePTPCar(445,-2623.1902,-54.5915,4.1251,180.2463,10,106); //
		CreateThePTPCar(510,-2630.2788,-54.9471,3.8905,174.7566,102,113); //
		CreateThePTPCar(471,-2633.6499,-53.9517,4.0838,176.9256,123,46); //
		CreateThePTPCar(471,-2636.3076,-54.2027,3.8169,175.6199,122,86); //
		CreateThePTPCar(468,-2640.1836,-54.8117,4.0147,179.1801,0,0); //
		CreateThePTPCar(468,-2643.0291,-52.6703,4.0106,179.1801,2,2); //
		CreateThePTPCar(474,-2656.7766,-54.9049,4.0737,358.9928,50,1); //
		CreateThePTPCar(544,-2669.2834,-36.5692,4.5711,1.2960,93,11); //
		CreateThePTPCar(405,-2682.8867,-23.8879,4.2639,1.2630,38,58); //
		CreateThePTPCar(572,-2689.7261,-54.3394,3.9442,178.0348,73,85); //
		CreateThePTPCar(495,-2856.4546,-113.6174,9.9773,178.4783,0,0); //
		CreateThePTPCar(495,-2867.6760,-128.3935,8.1646,114.0908,0,0); //
		CreateThePTPCar(531,-2883.1138,-134.7445,4.5798,103.1479,0,0); //
		CreateThePTPCar(474,-2773.7061,-312.5909,6.7188,3.4697,118,109); //
		CreateThePTPCar(542,-2775.0774,-296.5458,6.7784,356.4459,76,18); //
		CreateThePTPCar(509,-2771.6169,-281.4121,6.4509,359.7736,20,73); //
		CreateThePTPCar(471,-2779.3704,-282.0613,6.5659,2.2788,37,93); //
		CreateThePTPCar(522,-2766.3467,-282.7974,6.6123,179.9312,121,69); //
		CreateThePTPCar(542,-2754.5374,-281.9854,6.8535,179.8321,9,53); //
		CreateThePTPCar(407,-2746.4211,-281.2794,7.3025,170.6817,51,1); //
		CreateThePTPCar(505,-2739.9766,-280.6562,7.1823,181.6268,30,95); //
		CreateThePTPCar(542,-2734.2983,-281.1920,6.7858,174.9808,29,68); //
		CreateThePTPCar(552,-2727.3223,-281.0753,6.6858,176.5874,61,43); //
		CreateThePTPCar(411,-2732.7002,-292.7826,6.7694,50.0980,101,110); //
		CreateThePTPCar(587,-2736.3777,-295.5494,6.7415,50.0272,71,121); //
		CreateThePTPCar(496,-2752.8276,-295.2665,6.7549,183.8118,22,55); //
		CreateThePTPCar(541,-2760.1238,-295.8501,6.7023,356.4759,43,85); //
		CreateThePTPCar(593,-2828.2317,-306.4142,8.4461,32.2378,0,0); //
		CreateThePTPCar(545,-2741.0830,-299.8723,6.8234,231.0750,94,7); //
		CreateThePTPCar(576,-2744.4634,-302.8349,6.6326,229.6770,48,60); //
		CreateThePTPCar(542,-2747.2192,-306.2982,6.8029,229.6078,16,94); //
		CreateThePTPCar(419,-2750.6194,-308.9308,6.8367,228.6952,47,88); //
		CreateThePTPCar(555,-2758.1438,-311.8896,6.7168,1.1050,27,4); //
		CreateThePTPCar(467,-2763.4492,-312.3626,6.7798,2.8785,52,89); //
		CreateThePTPCar(545,-2768.3933,-312.9763,6.7757,359.3418,84,92); //
		CreateThePTPCar(474,-2773.7053,-312.5904,6.7193,3.4979,118,109); //
		CreateThePTPCar(587,-2770.0149,-296.6050,6.7638,177.1618,49,32); //
		CreateThePTPCar(402,-2764.8367,-294.9728,6.8628,179.9246,9,4); //
		CreateThePTPCar(417,-2819.6172,-362.8495,7.2813,120.4913,0,0); //
		CreateThePTPCar(487,-2850.1736,-361.0962,14.4627,356.9581,0,0); //
		CreateThePTPCar(463,-2833.9426,863.8267,43.5990,99.7182,0,0); //
		CreateThePTPCar(416,-2637.8447,607.7921,14.7031,174.4213,1,3); //
		CreateThePTPCar(477,-2589.0435,622.4449,14.2135,79.5791,62,82); //
		CreateThePTPCar(422,-2573.7161,631.9912,14.4550,274.5015,34,38); //
		CreateThePTPCar(415,-2572.0159,647.0201,14.2259,88.4849,32,125); //
		CreateThePTPCar(429,-2589.0830,647.2689,14.0982,84.8060,26,107); //
		CreateThePTPCar(477,-2455.9539,740.8225,34.7702,359.4694,62,82); //
		CreateThePTPCar(506,-2469.0017,740.4401,34.6301,1.4902,55,117); //
		CreateThePTPCar(503,-2477.7290,740.7048,34.9081,4.9236,46,114); //
		CreateThePTPCar(545,-2240.4097,544.3714,34.9783,260.0414,1,97); //
		CreateThePTPCar(433,-2240.1311,537.7033,35.5679,262.1184,69,85); //
		CreateThePTPCar(505,-2240.9302,528.7318,35.3146,266.0888,38,22); //
		CreateThePTPCar(467,-2120.8447,-164.6943,35.1180,0.7816,77,1); //
		CreateThePTPCar(515,-2128.3826,-130.8849,36.4483,180.7818,0,0); //
		CreateThePTPCar(591,-2128.3726,-119.7704,35.9770,181.7047,116,58); //
		CreateThePTPCar(486,-2079.2793,237.4389,35.6665,248.9117,56,56); //
		CreateThePTPCar(405,-1681.3329,-541.1771,14.0776,289.1560,121,88); //
		CreateThePTPCar(476,-1501.9594,-244.9716,14.9260,358.3376,99,99); //
		CreateThePTPCar(476,-1537.8558,-256.4324,14.9240,16.9751,99,99); //
		CreateThePTPCar(476,-1578.5413,-220.2268,14.9246,328.5076,99,99); //
		CreateThePTPCar(476,-1540.9922,-186.0884,14.9333,328.3402,99,99); //
		CreateThePTPCar(476,-1509.4871,-154.8787,14.9414,323.7084,99,99); //
		CreateThePTPCar(476,-1473.9872,-119.1479,14.9379,327.2437,99,99); //
		CreateThePTPCar(476,-1439.6140,-85.4115,14.9323,336.3973,99,99); //
		CreateThePTPCar(476,-1411.8121,-56.8135,14.9293,345.7432,99,99); //
		CreateThePTPCar(476,-1583.4828,-277.5536,14.9255,42.4496,99,99); //
		CreateThePTPCar(476,-1594.9604,-299.3736,14.9265,52.3367,99,99); //
		CreateThePTPCar(476,-1642.7355,-291.2554,14.9273,339.9622,99,99); //
		CreateThePTPCar(476,-1623.9902,-206.4579,14.9319,338.2345,99,99); //
		CreateThePTPCar(476,-1378.4672,-226.3545,14.9256,308.7184,99,99); //
		CreateThePTPCar(592,-1349.5137,-236.2735,15.3430,298.4409,97,97); //
		CreateThePTPCar(593,-1326.1982,-246.9677,14.6084,345.9186,97,97); //
		CreateThePTPCar(593,-1318.0956,-257.3567,14.6255,281.3847,97,97); //
		CreateThePTPCar(593,-1344.0563,111.0800,14.6047,47.5446,97,97); //
		CreateThePTPCar(407,-1320.2651,86.8745,14.3836,251.7880,97,97); //
	}
    if(PTPInfo[Map]==PTP_LS)
	{
	    CreateThePTPCar(600,1281.3809,-1317.1837,13.0774,90.2924,76,70); //
		CreateThePTPCar(478,1281.6533,-1324.0483,13.3948,90.9195,89,37); //
		CreateThePTPCar(418,1281.2111,-1336.2748,13.4671,90.7032,67,29); //
		CreateThePTPCar(407,1241.1936,-1427.5568,15.4982,173.3559,2,1); //
		CreateThePTPCar(405,1210.6111,-1346.3931,13.3517,1.9245,102,125); //
		CreateThePTPCar(604,1191.5665,-1308.8829,13.1341,0.5286,63,81); //
		CreateThePTPCar(554,1210.8813,-1320.3788,13.5615,358.3426,54,102); //
		CreateThePTPCar(471,1210.5094,-1328.1611,12.8830,4.0107,119,40); //
		CreateThePTPCar(509,1210.5770,-1332.9666,12.9101,358.0133,43,33); //
		CreateThePTPCar(522,1219.0331,-1334.9469,13.0440,180.4324,99,99); //
		CreateThePTPCar(522,1273.5699,-1355.2233,13.0699,171.9847,99,99); //
		CreateThePTPCar(517,1278.9586,-1537.8956,13.4047,91.6319,82,105); //
		CreateThePTPCar(497,1555.3064,-1611.5210,13.6328,1.8564,2,1); //
		CreateThePTPCar(497,1564.7992,-1612.4271,13.5550,3.9253,2,1); //
		CreateThePTPCar(596,1602.7894,-1629.2004,13.2145,271.5046,2,1); //
		CreateThePTPCar(596,1602.1973,-1623.1736,13.2388,262.2237,2,1); //
		CreateThePTPCar(596,1601.9741,-1618.4612,13.2072,270.4203,2,1); //
		CreateThePTPCar(596,1601.0154,-1613.4808,13.1923,271.6460,2,1); //
		CreateThePTPCar(523,1597.7336,-1606.3116,13.0084,3.0068,99,99); //
		CreateThePTPCar(523,1592.3276,-1606.7058,12.9443,174.1054,99,99); //
		CreateThePTPCar(523,1589.7092,-1606.5876,12.9553,179.0297,99,99); //
		CreateThePTPCar(523,1586.4116,-1606.0192,12.9548,181.2350,99,99); //
		CreateThePTPCar(523,1583.5891,-1606.3107,12.9438,178.6239,99,99); //
		CreateThePTPCar(523,1579.3258,-1605.8405,12.9542,186.8400,99,99); //
		CreateThePTPCar(523,1574.2032,-1605.2720,12.9543,182.0529,99,99); //
		CreateThePTPCar(523,1526.8650,-1642.5695,5.4516,262.3933,99,99); //
		CreateThePTPCar(523,1526.5138,-1644.6433,5.4626,265.3000,99,99); //
		CreateThePTPCar(523,1526.4692,-1647.5941,5.4619,259.9224,99,99); //
		CreateThePTPCar(523,1525.9733,-1648.9755,5.4622,273.4704,99,99); //
		CreateThePTPCar(523,1530.7131,-1648.3512,5.4557,276.9691,99,99); //
		CreateThePTPCar(523,1530.1235,-1645.7203,5.4617,266.6752,99,99); //
		CreateThePTPCar(523,1530.1090,-1643.4408,5.4611,260.8167,99,99); //
		CreateThePTPCar(523,1530.5823,-1641.8352,5.4618,267.4996,99,99); //
		CreateThePTPCar(523,1535.0603,-1642.2567,5.4539,271.7939,99,99); //
		CreateThePTPCar(523,1534.0804,-1643.7668,5.4621,273.9980,99,99); //
		CreateThePTPCar(523,1534.5654,-1645.5759,5.4638,269.0261,99,99); //
		CreateThePTPCar(523,1534.3126,-1648.7100,5.4621,266.8932,99,99); //
		CreateThePTPCar(596,1544.2528,-1650.8990,5.6380,269.3585,2,1); //
		CreateThePTPCar(596,1544.0349,-1654.8113,5.6358,265.9871,2,1); //
		CreateThePTPCar(596,1544.6210,-1658.8474,5.6379,263.8564,2,1); //
		CreateThePTPCar(599,1546.0685,-1668.4069,6.0861,88.9202,2,1); //
		CreateThePTPCar(599,1545.0737,-1672.5555,6.0885,89.5619,2,1); //
		CreateThePTPCar(599,1544.8707,-1675.9030,6.0702,90.4699,2,1); //
		CreateThePTPCar(523,1545.9063,-1681.1229,5.4639,92.4251,114,111); //
		CreateThePTPCar(601,1546.0178,-1684.5073,5.6712,89.8185,11,46); //
		CreateThePTPCar(546,1559.3016,-1710.2947,5.5893,180.6284,11,41); //
		CreateThePTPCar(411,1565.4740,-1709.1428,5.6434,180.6284,44,5); //
		CreateThePTPCar(587,1569.9384,-1709.9552,5.6170,183.8392,2,1); //
		CreateThePTPCar(546,1574.2280,-1709.7247,5.6149,181.6613,2,1); //
		CreateThePTPCar(502,1578.2676,-1708.3599,5.7820,181.7744,2,1); //
		CreateThePTPCar(415,1591.6976,-1709.8000,5.6616,184.3808,2,1); //
		CreateThePTPCar(546,1587.5924,-1710.7012,5.6919,182.5893,2,1); //
		CreateThePTPCar(596,1601.0081,-1695.8800,5.6096,270.8141,2,1); //
		CreateThePTPCar(596,1601.9353,-1692.0437,5.6119,271.7189,2,1); //
		CreateThePTPCar(596,1602.0568,-1688.1610,5.6080,272.9999,2,1); //
		CreateThePTPCar(596,1601.7686,-1684.6216,5.6085,271.6120,2,1); //
		CreateThePTPCar(580,1153.8121,-2036.2766,68.8042,178.2087,1,1); //
		CreateThePTPCar(490,1156.3763,-2050.4709,69.2506,267.6194,0,0); //
		CreateThePTPCar(490,1157.1603,-2056.7927,69.1379,265.9819,0,0); //
		CreateThePTPCar(490,1156.5760,-2062.4229,69.2578,265.8272,0,0); //
		CreateThePTPCar(490,1153.6622,-2027.4860,69.2506,275.4403,0,0); //
		CreateThePTPCar(490,1153.7156,-2020.8491,69.2506,263.5348,0,0); //
		CreateThePTPCar(490,1153.6370,-2013.8470,69.1345,272.6215,0,0); //
		CreateThePTPCar(580,1148.2412,-2035.8180,68.8581,181.2025,1,1); //
		CreateThePTPCar(551,1145.9431,-2046.2500,68.8313,267.5580,0,0); //
		CreateThePTPCar(551,1142.5413,-2025.2279,68.8378,272.3458,0,0); //
		CreateThePTPCar(551,1142.9124,-2017.4696,68.8363,271.9698,0,0); //
		CreateThePTPCar(551,1143.7839,-2054.2920,68.8269,267.2322,0,0); //
		CreateThePTPCar(558,1245.9153,-2014.6279,59.4561,269.7772,69,121); //
		CreateThePTPCar(558,1245.5477,-2019.7632,59.4895,273.5897,89,83); //
		CreateThePTPCar(402,1245.6583,-2024.3616,59.5595,270.3149,68,50); //
		CreateThePTPCar(468,1123.1542,-2205.9705,60.6276,94.6052,97,97); //
		CreateThePTPCar(411,1518.3368,-2212.6980,13.2778,358.3718,88,97); //
		CreateThePTPCar(517,1512.0726,-2212.4172,13.4065,356.1744,26,55); //
		CreateThePTPCar(533,1508.7476,-2212.6343,13.2608,359.4324,104,59); //
		CreateThePTPCar(461,1529.5121,-2212.4932,13.1563,355.0334,21,50); //
		CreateThePTPCar(522,1535.9656,-2212.9607,13.0236,358.1669,3,53); //
		CreateThePTPCar(509,1539.3020,-2212.2637,13.0685,358.6058,112,26); //
		CreateThePTPCar(461,1559.8434,-2315.6021,13.1497,267.6995,43,47); //
		CreateThePTPCar(471,1552.7019,-2360.6052,13.0778,176.7689,115,16); //
		CreateThePTPCar(581,1546.1019,-2359.8877,13.0493,180.5285,54,46); //
		CreateThePTPCar(407,1536.2627,-2360.5171,13.8047,176.6425,111,0); //
		CreateThePTPCar(609,1518.5632,-2359.1199,13.6183,179.8866,76,46); //
		CreateThePTPCar(592,1914.8004,-2287.9910,14.7418,173.2864,97,97); //
		CreateThePTPCar(519,1942.3733,-2272.7610,14.4673,178.4357,97,97); //
		CreateThePTPCar(593,2029.3983,-2469.8081,14.0104,88.6152,97,97); //
		CreateThePTPCar(593,2029.1285,-2453.1125,14.0238,89.6298,97,97); //
		CreateThePTPCar(476,1940.4058,-2472.5359,14.3162,101.2170,99,99); //
		CreateThePTPCar(476,1892.1826,-2473.3276,14.3163,98.8346,99,99); //
		CreateThePTPCar(476,1841.5798,-2473.9543,14.3325,113.1962,99,99); //
		CreateThePTPCar(476,1809.4014,-2473.0642,14.3365,115.3593,99,99); //
		CreateThePTPCar(476,1774.5731,-2473.8567,14.3329,109.1260,99,99); //
		CreateThePTPCar(476,1753.1665,-2474.1357,14.3330,112.3951,99,99); //
		CreateThePTPCar(476,1725.7427,-2474.4692,14.3372,116.3212,99,99); //
		CreateThePTPCar(476,1686.2510,-2474.7720,14.3357,103.8122,99,99); //
		CreateThePTPCar(476,1665.7617,-2473.8862,14.3355,112.7324,99,99); //
		CreateThePTPCar(476,1638.8252,-2473.8223,14.3400,104.8355,99,99); //
		CreateThePTPCar(476,1599.2710,-2474.5879,14.3316,107.4918,99,99); //
		CreateThePTPCar(476,1927.1285,-2612.4680,14.3247,58.4681,99,99); //
		CreateThePTPCar(476,1886.3865,-2611.4617,14.3390,71.3201,99,99); //
		CreateThePTPCar(476,1853.4626,-2613.3325,14.3294,61.4613,99,99); //
		CreateThePTPCar(476,1817.0963,-2613.8149,14.3303,72.2700,99,99); //
		CreateThePTPCar(476,1768.7159,-2615.1719,14.3284,60.9089,99,99); //
		CreateThePTPCar(476,1727.3691,-2612.7822,14.3311,57.9276,99,99); //
		CreateThePTPCar(476,1671.4482,-2612.2991,14.3276,63.9389,99,99); //
		CreateThePTPCar(476,1640.7992,-2614.0198,14.3285,82.4645,99,99); //
		CreateThePTPCar(593,1512.4473,-2645.1836,14.0234,15.0288,97,97); //
		CreateThePTPCar(551,1528.5077,-2645.9382,13.3738,358.1088,44,71); //
		CreateThePTPCar(480,1533.5712,-2646.8711,13.3541,2.5330,110,45); //
		CreateThePTPCar(480,1537.5320,-2648.0063,13.3548,353.9727,22,116); //
		CreateThePTPCar(544,1541.7266,-2648.8193,13.7969,354.2485,99,31); //
		CreateThePTPCar(499,1822.3828,-2410.3518,13.5348,193.3100,50,27); //
		CreateThePTPCar(582,1828.7947,-2408.8855,13.5960,195.3874,23,35); //
		CreateThePTPCar(552,1948.0439,-2111.1575,13.2581,94.3534,97,115); //
		CreateThePTPCar(467,1951.5352,-1777.1589,13.2875,0.9632,68,70); //
		CreateThePTPCar(522,1885.3356,-1400.0649,13.1327,193.2270,99,99); //
		CreateThePTPCar(481,1888.8872,-1398.9557,13.0089,235.0540,99,99); //
		CreateThePTPCar(431,1518.5430,-1273.5728,14.6203,180.4939,116,49); //
		CreateThePTPCar(437,1522.2203,-1272.9161,14.6077,180.4666,97,97); //
		CreateThePTPCar(409,1449.0405,-1044.0237,23.6273,92.0150,0,0); //
		CreateThePTPCar(575,1648.3872,-1107.0159,23.5164,272.3146,24,110); //
		CreateThePTPCar(418,1647.5078,-1102.1904,24.0014,271.5129,34,23); //
		CreateThePTPCar(419,1648.3097,-1098.4203,23.7044,266.5253,75,94); //
		CreateThePTPCar(551,1691.5569,-1070.0046,23.7350,0.1583,55,14); //
		CreateThePTPCar(480,1689.7363,-1046.1052,23.6820,0.6187,42,40); //
		CreateThePTPCar(479,1647.0134,-1036.5415,23.6966,356.8123,116,53); //
		CreateThePTPCar(479,1698.9885,-1035.0178,23.6858,178.4881,112,36); //
		CreateThePTPCar(438,1703.2821,-1034.0172,23.9155,179.1249,6,6); //
		CreateThePTPCar(461,1708.2024,-1059.7775,23.4931,183.4221,41,42); //
		CreateThePTPCar(461,1704.7096,-1068.1149,23.4941,5.1853,41,42); //
		CreateThePTPCar(461,1701.0779,-1061.7963,23.4941,175.3995,41,42); //
		CreateThePTPCar(522,1698.9366,-1070.3466,23.4678,177.0220,19,6); //
		CreateThePTPCar(522,1697.5286,-1084.8867,23.4666,178.3218,19,6); //
		CreateThePTPCar(402,1558.0571,-1013.4457,23.7366,0.5713,70,15); //
		CreateThePTPCar(475,1566.5494,-1012.8319,23.7313,356.6466,49,56); //
		CreateThePTPCar(451,1575.6735,-1013.8333,23.6139,359.4545,58,74); //
		CreateThePTPCar(415,1585.8773,-1011.0195,23.6031,5.2403,46,72); //
		CreateThePTPCar(510,1016.4811,-1344.1609,12.9376,131.5261,107,119); //
		CreateThePTPCar(467,1015.8893,-1364.1406,13.1007,92.3634,69,12); //
		CreateThePTPCar(422,992.7282,-1381.8307,13.1862,179.9823,96,104); //
		CreateThePTPCar(429,752.4896,-1333.4833,13.2225,359.9296,40,110); //
		CreateThePTPCar(451,755.9879,-1333.6970,13.2453,359.9146,23,113); //
		CreateThePTPCar(415,760.1037,-1333.6189,13.3152,0.9763,50,58); //
		CreateThePTPCar(603,763.7407,-1333.5894,13.3636,355.5208,95,5); //
		CreateThePTPCar(587,767.9971,-1334.2565,13.2831,0.0402,7,31); //
		CreateThePTPCar(411,771.8251,-1333.8011,13.2690,358.8339,99,99); //
		CreateThePTPCar(579,783.1865,-1341.4364,13.4726,91.1226,0,0); //
		CreateThePTPCar(579,782.9351,-1346.0973,13.3067,84.7574,0,0); //
		CreateThePTPCar(579,783.1256,-1351.6281,13.4779,91.8308,0,0); //
		CreateThePTPCar(579,782.9037,-1356.3285,13.3085,75.4676,0,0); //
		CreateThePTPCar(579,782.7891,-1361.6633,13.4384,89.6053,0,0); //
		CreateThePTPCar(579,782.8497,-1366.6277,13.3066,89.7523,0,0); //
		CreateThePTPCar(579,783.0427,-1370.8236,13.3152,80.4110,0,0); //
		CreateThePTPCar(579,782.6801,-1375.4652,13.3693,64.5978,0,0); //
		CreateThePTPCar(522,747.5504,-1333.0632,13.0235,182.2899,99,99); //
		CreateThePTPCar(522,744.7571,-1332.6516,13.1189,182.4671,99,99); //
		CreateThePTPCar(522,742.3749,-1332.6959,13.1205,185.8179,99,99); //
		CreateThePTPCar(522,740.4784,-1332.8988,13.1154,182.6276,99,99); //
		CreateThePTPCar(522,738.0939,-1332.9320,13.1179,185.8095,99,99); //
		CreateThePTPCar(522,735.8347,-1333.2562,13.1175,184.6442,99,99); //
		CreateThePTPCar(522,736.1189,-1336.7495,13.0994,184.6431,99,99); //
		CreateThePTPCar(522,740.2706,-1336.4503,13.1065,182.0106,99,99); //
		CreateThePTPCar(522,742.2690,-1335.5862,13.1106,178.6746,99,99); //
		CreateThePTPCar(522,744.4536,-1335.4705,13.1111,176.8086,99,99); //
		CreateThePTPCar(522,746.8208,-1335.4709,13.0944,173.4665,99,99); //
		CreateThePTPCar(522,749.5259,-1335.4094,13.1111,177.2626,99,99); //
		CreateThePTPCar(522,734.7530,-1346.9375,13.0683,263.5374,99,99); //
		CreateThePTPCar(522,735.3906,-1344.3628,13.0878,267.4954,99,99); //
		CreateThePTPCar(522,735.3235,-1340.3451,13.0997,265.3182,99,99); //
		CreateThePTPCar(522,734.6327,-1336.6096,13.1072,252.4233,99,99); //
		CreateThePTPCar(468,763.6100,-1380.9786,13.3385,1.7532,97,97); //
		CreateThePTPCar(468,768.0623,-1382.8387,13.3505,0.7777,97,97); //
		CreateThePTPCar(468,772.2888,-1382.9512,13.3575,7.7945,97,97); //
		CreateThePTPCar(468,760.6569,-1383.1200,13.3476,0.7367,97,97); //
		CreateThePTPCar(417,739.5477,-1369.1348,25.9422,213.7411,97,97); //
		CreateThePTPCar(593,722.3259,-1333.9130,29.3943,182.0493,97,97); //
		CreateThePTPCar(593,699.0654,-1335.4263,29.4035,182.2201,97,97); //
		CreateThePTPCar(511,676.6074,-1334.4915,30.2215,181.4263,97,97); //
		CreateThePTPCar(419,886.0419,-1199.7207,16.8934,0.1119,31,25); //
		CreateThePTPCar(478,916.9958,-1198.2122,16.8826,353.9170,97,97); //
		CreateThePTPCar(402,2431.9282,-1230.1674,24.7994,61.0104,50,97); //
		CreateThePTPCar(411,2427.2090,-1242.0576,23.9637,141.4910,99,99); //
		CreateThePTPCar(495,2412.6650,-1366.6947,25.0549,176.4454,97,97); //
		CreateThePTPCar(576,2659.6814,-1691.0804,8.9044,265.8677,39,46); //
		CreateThePTPCar(456,2659.2615,-1707.1604,9.5012,91.5327,65,5); //
		CreateThePTPCar(498,2676.7881,-1673.9185,9.4051,7.2283,37,102); //
		CreateThePTPCar(482,2701.2117,-1842.2225,9.6223,329.0891,90,102); //
		CreateThePTPCar(461,2715.9526,-1847.2583,9.1307,333.7899,119,17); //
		CreateThePTPCar(461,2160.5823,-2308.1970,13.1426,137.0766,119,17); //
		CreateThePTPCar(401,2183.4373,-2318.3909,13.2677,306.4119,86,31); //
		CreateThePTPCar(517,2181.6340,-2298.7876,13.4281,36.4118,104,14); //
		CreateThePTPCar(402,2179.4602,-2303.4089,13.2602,46.7143,7,121); //
		CreateThePTPCar(551,2176.1960,-2307.3169,13.3736,62.1800,19,39); //
		CreateThePTPCar(439,2172.4060,-2311.1201,13.4418,67.5605,119,2); //
		CreateThePTPCar(480,2159.8000,-2300.5671,13.2920,321.1010,111,89); //
		CreateThePTPCar(604,2156.1375,-2295.0608,13.2662,311.8164,95,81); //
		CreateThePTPCar(522,2159.8433,-2281.6335,12.8580,207.0652,29,112); //
		CreateThePTPCar(471,2160.7932,-2277.9915,12.8844,213.7153,124,29); //
		CreateThePTPCar(581,2164.9980,-2275.4343,12.8707,222.7981,97,2); //
		CreateThePTPCar(521,2167.7019,-2273.2151,12.8373,242.6867,21,23); //
		CreateThePTPCar(521,2172.0613,-2269.0632,12.9640,228.2954,73,36); //
		CreateThePTPCar(510,2175.1631,-2266.9626,12.9456,250.4933,29,55); //
		CreateThePTPCar(456,2184.7573,-2293.8760,13.6903,32.9572,8,39); //
		CreateThePTPCar(591,2199.3501,-2276.0823,14.1874,49.9336,8,53); //
		CreateThePTPCar(515,2203.0476,-2260.7380,14.6836,315.0324,97,97); //
		CreateThePTPCar(417,2203.8438,-2234.6780,13.5791,318.0536,42,28); //
		CreateThePTPCar(411,2197.5974,-2220.2446,14.8982,224.1719,99,99); //
		CreateThePTPCar(533,2206.2783,-2213.4314,14.8883,226.7559,52,34); //
		CreateThePTPCar(481,2215.7705,-2202.9829,12.9729,222.0079,14,39); //
		CreateThePTPCar(521,2217.0891,-2201.5740,13.1198,223.4289,58,43); //
		CreateThePTPCar(506,2240.8835,-2226.3813,13.1548,47.0153,25,40); //
		CreateThePTPCar(589,2239.4697,-2237.2759,13.1615,41.1218,17,52); //
		CreateThePTPCar(506,2243.0181,-2233.8359,13.1671,47.8551,47,41); //
		CreateThePTPCar(593,2260.7683,-2151.8892,6.5348,44.3839,97,97); //
		CreateThePTPCar(506,2169.3660,-2284.1201,13.1887,134.2962,25,40); //
		CreateThePTPCar(487,2213.3325,-2265.3806,20.7556,315.1324,97,97); //
		CreateThePTPCar(593,2218.4280,-2287.3574,24.4784,316.4056,97,97); //
	}

	if(PTPInfo[Map]==PTP_LV)
	{
	    CreateThePTPCar(580,1476.7499,2769.8884,10.6652,180.0443,1,1); //
		CreateThePTPCar(545,1482.3672,2770.6482,10.6248,180.2554,0,0); //
		CreateThePTPCar(551,1476.8971,2779.8276,10.6130,180.5152,0,0); //
		CreateThePTPCar(551,1477.3094,2789.2954,10.6445,175.9209,0,0); //
		CreateThePTPCar(490,1482.0283,2779.0999,10.9472,185.7472,0,0); //
		CreateThePTPCar(490,1486.6320,2772.5532,10.9497,180.2299,0,0); //
		CreateThePTPCar(533,1478.2880,2878.5911,10.5294,359.8636,1,1); //
		CreateThePTPCar(431,1465.3696,2844.8264,10.9179,358.5146,31,94); //
		CreateThePTPCar(505,1423.1958,2834.2344,10.9644,271.5315,79,15); //
		CreateThePTPCar(490,1482.9375,2787.5051,10.9495,178.3029,0,0); //
		CreateThePTPCar(402,1505.3087,2795.8367,10.6139,213.7483,93,104); //
		CreateThePTPCar(477,1505.2797,2752.4758,10.4947,318.7498,86,37); //
		CreateThePTPCar(444,1468.1234,2901.9478,9.0861,285.0769,97,97); //
		CreateThePTPCar(445,1482.5494,2878.6274,10.6953,177.0977,52,62); //
		CreateThePTPCar(572,1317.8052,2756.5200,10.4330,106.9346,99,99); //
		CreateThePTPCar(503,2336.1511,2576.9338,10.7091,181.6404,77,80); //
		CreateThePTPCar(522,2348.5105,2577.7378,10.2902,356.3611,99,99); //
		CreateThePTPCar(541,2362.1921,2577.7004,10.4448,3.2579,117,48); //
		CreateThePTPCar(604,2366.5317,2578.0007,10.5320,358.0143,14,20); //
		CreateThePTPCar(468,2510.1157,2516.5762,10.3960,281.2146,97,97); //
		CreateThePTPCar(551,2528.5967,2501.9475,10.6207,269.7784,43,63); //
		CreateThePTPCar(589,2529.9143,2511.4050,10.4636,267.5799,113,4); //
		CreateThePTPCar(486,2487.9583,2356.5020,4.4306,268.8322,99,99); //
		CreateThePTPCar(503,2445.3999,1629.6071,10.7149,181.6567,77,80); //
		CreateThePTPCar(404,2458.5969,1629.7540,10.6017,176.4473,28,46); //
		CreateThePTPCar(475,2467.2961,1629.6887,10.6981,182.1751,88,70); //
		CreateThePTPCar(481,2470.1003,1658.5446,10.3394,357.5451,75,84); //
		CreateThePTPCar(413,2475.9363,1658.3658,10.8945,356.9807,108,32); //
		CreateThePTPCar(609,2331.9211,1426.5289,10.8817,268.2814,79,37); //
		CreateThePTPCar(480,2331.8862,1437.1426,10.5944,268.7025,125,23); //
		CreateThePTPCar(431,2348.2771,1428.5732,10.9235,227.9140,89,78); //
		CreateThePTPCar(471,2299.8098,1412.2205,10.3047,90.5452,106,30); //
		CreateThePTPCar(461,2302.2168,1408.1888,10.4123,88.8550,112,3); //
		CreateThePTPCar(545,2104.1816,1408.2972,10.6296,178.7476,117,108); //
		CreateThePTPCar(468,2025.5718,1559.7430,10.4263,266.4023,97,97); //
		CreateThePTPCar(475,2017.0089,1535.8038,10.5261,269.6942,116,48); //
		CreateThePTPCar(601,2281.5913,2475.0903,3.0323,359.0333,77,38); //
		CreateThePTPCar(598,2263.3115,2472.9199,3.0731,2.0877,2,1); //
		CreateThePTPCar(598,2241.5857,2475.8127,3.0205,90.3112,2,1); //
		CreateThePTPCar(598,2240.7153,2465.7036,3.0175,89.7017,2,1); //
		CreateThePTPCar(598,2241.1902,2456.3540,3.0301,90.4111,2,1); //
		CreateThePTPCar(598,2241.1257,2451.0125,3.0171,88.7303,2,1); //
		CreateThePTPCar(598,2241.1653,2447.0066,3.0068,89.1846,2,1); //
		CreateThePTPCar(523,2241.5679,2442.3862,2.7429,93.2714,99,99); //
		CreateThePTPCar(523,2241.3235,2437.7822,2.7447,88.3207,99,99); //
		CreateThePTPCar(523,2241.9167,2440.2454,2.8489,96.5301,99,99); //
		CreateThePTPCar(523,2241.9431,2435.7590,2.7454,99.1621,99,99); //
		CreateThePTPCar(523,2241.7771,2433.0208,2.8365,81.3398,99,99); //
		CreateThePTPCar(523,2241.7087,2430.4114,2.8526,85.8139,99,99); //
		CreateThePTPCar(598,2247.2451,2431.3047,3.0006,178.9872,2,1); //
		CreateThePTPCar(598,2255.1951,2432.3838,3.0799,182.6866,2,1); //
		CreateThePTPCar(599,2281.4844,2430.6179,3.4653,179.2710,2,1); //
		CreateThePTPCar(599,2289.7571,2431.3730,3.4665,177.9478,2,1); //
		CreateThePTPCar(544,2295.3206,2431.6301,3.5124,181.8587,99,99); //
		CreateThePTPCar(402,2313.5273,2480.6208,3.1050,272.1237,2,1); //
		CreateThePTPCar(475,2313.3418,2475.4504,3.1461,268.8903,2,1); //
		CreateThePTPCar(503,2313.2764,2470.2930,3.1697,267.3766,2,1); //
		CreateThePTPCar(541,2313.6753,2460.4456,2.8992,269.8301,2,1); //
		CreateThePTPCar(411,2314.3789,2455.8203,3.0011,268.7614,2,1); //
		CreateThePTPCar(402,2256.4912,2460.4380,10.6521,176.6637,2,1); //
		CreateThePTPCar(599,2256.7454,2444.3130,11.0124,180.3764,2,1); //
		CreateThePTPCar(497,2202.3459,2475.0652,17.3438,267.5882,2,1); //
		CreateThePTPCar(497,2182.0107,2471.6604,16.1953,359.3723,2,1); //
		CreateThePTPCar(418,2044.8430,2468.8423,10.9133,84.7800,18,62); //
		CreateThePTPCar(419,2095.6045,2407.8533,10.6183,270.4400,15,120); //
		CreateThePTPCar(534,2095.5190,2416.7837,10.5438,268.3738,108,118); //
		CreateThePTPCar(480,1693.0486,2053.8389,11.2261,99.4542,6,43); //
		CreateThePTPCar(474,1508.3029,2145.4324,10.4964,267.2190,114,32); //
		CreateThePTPCar(415,1509.1553,2135.2842,10.5893,269.6531,113,98); //
		CreateThePTPCar(496,1509.2416,2128.8232,10.5361,266.2098,25,100); //
		CreateThePTPCar(502,1509.0223,2125.4111,10.7105,267.4946,58,106); //
		CreateThePTPCar(558,1508.9221,2121.8389,10.4750,267.8109,6,59); //
		CreateThePTPCar(468,1508.2156,2115.3823,10.5012,266.2944,97,97); //
		CreateThePTPCar(468,1508.3280,2111.2480,10.3945,266.2944,97,97); //
		CreateThePTPCar(482,1508.9797,2108.4312,10.9419,270.5323,85,3); //
		CreateThePTPCar(555,1509.4343,2101.5205,10.5040,270.9988,66,37); //
		CreateThePTPCar(416,1594.9441,1839.9998,10.9754,1.8644,1,3); //
		CreateThePTPCar(487,1650.5758,1536.2080,11.0299,176.1367,97,97); //
		CreateThePTPCar(487,1631.9714,1539.5348,11.0482,160.2819,97,97); //
		CreateThePTPCar(417,1586.9008,1457.6713,11.0532,83.1988,97,97); //
		CreateThePTPCar(548,1592.5681,1425.8030,12.3862,68.6564,54,37); //
		CreateThePTPCar(592,1357.9972,1621.8608,12.0152,176.6012,97,97); //
		CreateThePTPCar(511,1277.8270,1466.8947,12.1966,270.7422,97,97); //
		CreateThePTPCar(511,1276.9518,1445.1656,12.1909,266.8254,97,97); //
		CreateThePTPCar(593,1273.6307,1423.6610,11.2805,268.4614,97,97); //
		CreateThePTPCar(593,1272.3135,1407.3828,11.2807,268.9623,97,97); //
		CreateThePTPCar(476,1307.1083,1321.4126,11.5979,309.9196,99,99); //
		CreateThePTPCar(513,1278.3469,1363.5969,11.3807,265.0639,97,97); //
		CreateThePTPCar(476,1331.7915,1299.1194,11.5977,315.2191,99,99); //
		CreateThePTPCar(431,1285.9973,1306.9865,10.9306,268.9293,106,52); //
		CreateThePTPCar(439,1306.6427,1278.8042,10.7169,178.5672,96,61); //
		CreateThePTPCar(575,1312.8383,1279.0365,10.4197,177.7588,21,30); //
		CreateThePTPCar(471,1319.5261,1278.8011,10.3011,178.5566,21,6); //
		CreateThePTPCar(509,1322.2155,1278.9630,10.3318,187.5291,33,66); //
		CreateThePTPCar(461,1328.4397,1279.2578,10.3862,178.5789,46,95); //
		CreateThePTPCar(476,1411.0975,1492.6237,11.5982,341.4754,99,99); //
		CreateThePTPCar(476,1412.9603,1532.9296,11.5983,331.8112,99,99); //
		CreateThePTPCar(476,1413.1957,1575.0121,11.5973,328.0103,99,99); //
		CreateThePTPCar(476,1411.8885,1616.3141,11.5976,339.8012,99,99); //
		CreateThePTPCar(476,1455.3302,1633.7068,11.5908,158.9921,99,99); //
		CreateThePTPCar(476,1454.0050,1593.6709,11.5938,163.0014,99,99); //
		CreateThePTPCar(476,1452.6100,1562.9590,11.5934,160.0106,99,99); //
		CreateThePTPCar(476,1454.7886,1534.3801,11.5976,162.6748,99,99); //
		CreateThePTPCar(476,1454.0327,1504.9385,11.6014,162.9854,99,99); //
		CreateThePTPCar(476,1453.6293,1430.9880,11.6026,157.7209,99,99); //
		CreateThePTPCar(476,1453.3188,1390.8058,11.5974,161.5484,99,99); //
		CreateThePTPCar(476,1452.9899,1352.5454,11.5934,154.8460,99,99); //
		CreateThePTPCar(476,1413.5918,1321.4753,11.5957,335.6907,99,99); //
		CreateThePTPCar(476,1411.4332,1356.5076,11.5976,345.6524,99,99); //
		CreateThePTPCar(476,1412.0133,1392.1532,11.5972,336.0545,99,99); //
		CreateThePTPCar(476,1412.3923,1425.6855,11.5971,341.5815,99,99); //
		CreateThePTPCar(476,1526.3033,1814.2405,11.5976,115.1233,99,99); //
		CreateThePTPCar(519,1397.0093,1773.6487,11.7701,177.9306,97,97); //
		CreateThePTPCar(401,1695.5571,1306.1570,10.5960,177.1417,110,18); //
		CreateThePTPCar(503,1686.2117,1297.5447,10.7328,186.9095,0,36); //
		CreateThePTPCar(605,2038.5414,1019.8124,10.4953,357.8090,89,1); //
		CreateThePTPCar(468,2027.7828,1004.6848,10.4907,288.5052,97,97); //
		CreateThePTPCar(468,2024.0188,1327.7085,10.4871,55.6779,97,97); //
		CreateThePTPCar(475,2451.5818,1267.7513,10.6939,176.4901,77,94); //
		CreateThePTPCar(468,2772.9097,1259.8893,10.4172,171.9649,97,97); //
		CreateThePTPCar(468,2774.5454,1260.3801,10.4178,175.0897,97,97); //
		CreateThePTPCar(468,2776.2917,1259.8364,10.4184,183.5809,97,97); //
		CreateThePTPCar(468,2778.1602,1259.9222,10.4182,187.1149,97,97); //
		CreateThePTPCar(468,2779.9810,1259.3480,10.4189,174.4430,97,97); //
		CreateThePTPCar(468,2782.5591,1259.2437,10.4189,188.9210,97,97); //
		CreateThePTPCar(468,2781.2070,1264.7167,10.4188,177.3061,97,97); //
		CreateThePTPCar(468,2778.1543,1262.6338,10.4174,171.0598,97,97); //
		CreateThePTPCar(468,2775.5200,1261.8040,10.4188,173.4036,97,97); //
		CreateThePTPCar(468,2772.9067,1261.0623,10.4193,170.2574,97,97); //
		CreateThePTPCar(468,2768.6536,1259.7863,10.4184,183.7682,97,97); //
		CreateThePTPCar(546,2832.1128,1260.9440,10.4676,269.5845,83,122); //
		CreateThePTPCar(579,2831.3213,1266.4246,10.6644,267.1404,0,0); //
		CreateThePTPCar(579,2831.0305,1272.8879,10.5387,266.6504,0,0); //
		CreateThePTPCar(579,2831.0442,1278.9994,10.7889,266.1642,0,0); //
		CreateThePTPCar(579,2830.2466,1284.5103,10.7880,272.8676,0,0); //
		CreateThePTPCar(579,2829.7363,1290.4554,10.6596,271.1907,0,0); //
		CreateThePTPCar(411,2829.8201,1296.2596,10.4982,271.9485,99,99); //
		CreateThePTPCar(411,2829.7285,1301.1210,10.5239,277.8697,99,99); //
		CreateThePTPCar(411,2829.1589,1306.7021,10.4978,263.5302,99,99); //
		CreateThePTPCar(411,2829.2234,1311.5016,10.4994,270.8256,112,69); //
		CreateThePTPCar(603,2829.2090,1316.8452,10.6089,265.5270,99,57); //
		CreateThePTPCar(522,2814.0852,1295.1434,10.3228,95.0117,99,99); //
		CreateThePTPCar(522,2814.5166,1290.0087,10.3213,90.2143,99,99); //
		CreateThePTPCar(522,2814.0889,1287.0796,10.3233,83.9565,99,99); //
		CreateThePTPCar(522,2814.7920,1284.2216,10.3290,76.4910,99,99); //
		CreateThePTPCar(522,2814.4287,1281.7648,10.3219,86.0451,99,99); //
		CreateThePTPCar(522,2814.7869,1279.3984,10.3203,84.6780,99,99); //
		CreateThePTPCar(522,2810.9255,1280.8525,10.3133,84.7793,99,99); //
		CreateThePTPCar(522,2811.2356,1284.1290,10.3287,97.1211,99,99); //
		CreateThePTPCar(522,2811.9509,1286.6167,10.3284,96.8600,99,99); //
		CreateThePTPCar(522,2811.3870,1288.9291,10.3259,97.9787,99,99); //
		CreateThePTPCar(522,2811.1372,1291.1208,10.3237,95.5070,99,99); //
		CreateThePTPCar(522,2811.5222,1292.6058,10.3211,80.0145,99,99); //
		CreateThePTPCar(522,2811.7644,1294.9186,10.3221,89.3760,99,99); //
		CreateThePTPCar(479,2794.8491,1295.7887,10.5416,182.7515,66,62); //
		CreateThePTPCar(513,2854.6775,1395.4520,11.4173,20.2600,0,1); //
		CreateThePTPCar(593,2844.0132,1390.3713,11.3270,2.3207,97,97); //
		CreateThePTPCar(593,2812.6975,1389.5161,11.3714,356.7879,97,97); //
		CreateThePTPCar(482,2839.2976,1375.0348,10.8912,180.5175,3,20); //
		CreateThePTPCar(475,2849.0098,1375.6578,10.6129,175.8310,104,2); //
		CreateThePTPCar(477,2853.9832,1367.4858,10.5738,86.4263,85,1); //
		CreateThePTPCar(503,2853.2205,1361.3027,10.7077,89.5339,43,117); //
		CreateThePTPCar(444,2854.2107,1354.7174,11.2209,88.8901,97,97); //
		CreateThePTPCar(603,2854.0208,1346.1584,10.6505,83.7286,113,111); //
		CreateThePTPCar(510,2857.9399,1302.5182,10.9370,283.2889,97,97); //
		CreateThePTPCar(510,2858.1140,1308.8887,10.9412,265.7869,97,97); //
		CreateThePTPCar(495,2859.5928,1319.7874,11.6404,274.5591,97,97); //
		CreateThePTPCar(495,2860.0017,1325.3622,11.6405,273.6011,97,97); //
		CreateThePTPCar(505,2763.1489,1288.2646,10.9933,274.3879,119,23); //
		CreateThePTPCar(495,1537.1244,1126.7307,11.1339,17.7331,97,97); //
		CreateThePTPCar(534,1530.3065,728.6832,10.5464,0.4526,55,83); //
		CreateThePTPCar(555,1526.2498,728.7845,10.5175,1.7105,86,121); //
		CreateThePTPCar(530,1520.9313,728.0220,10.5857,356.8544,121,53); //
		CreateThePTPCar(505,1516.4768,727.8205,10.9616,2.1593,22,123); //
		CreateThePTPCar(505,1510.3962,727.3287,11.0703,0.7295,23,15); //
		CreateThePTPCar(480,1505.7817,726.8348,10.5916,0.6662,109,27); //
		CreateThePTPCar(545,1501.0693,726.3674,10.6316,355.6947,84,58); //
		CreateThePTPCar(545,1496.4100,728.8720,10.6245,359.7486,83,13); //
		CreateThePTPCar(402,1482.3236,729.2516,10.6519,3.5261,36,103); //
		CreateThePTPCar(559,1474.5887,729.7189,10.4767,181.6324,44,39); //
		CreateThePTPCar(496,1470.2678,730.6041,10.6047,180.8651,5,124); //
		CreateThePTPCar(541,1466.4344,730.4600,10.4516,177.7803,46,84); //
		CreateThePTPCar(559,1462.4967,730.9634,10.4766,180.0642,111,106); //
		CreateThePTPCar(563,1448.7008,729.5933,11.5492,170.6121,0,1); //
		CreateThePTPCar(563,1420.3702,747.3834,11.5554,78.5803,3,1); //
		CreateThePTPCar(417,1422.4399,767.6968,10.8534,307.9785,122,112); //
		CreateThePTPCar(510,1449.3319,786.8842,10.3829,353.5376,114,29); //
		CreateThePTPCar(481,1447.1154,787.6631,10.3360,0.1834,40,114); //
		CreateThePTPCar(522,1445.2388,786.4518,10.3922,0.4327,118,45); //
		CreateThePTPCar(522,1451.3225,787.3611,10.3956,201.8431,118,45); //
		CreateThePTPCar(522,1456.8163,788.2252,10.3925,357.8987,118,45); //
		CreateThePTPCar(522,1462.7719,787.4548,10.3919,175.0256,118,45); //
		CreateThePTPCar(593,1424.2887,656.4013,11.1310,85.9398,97,97); //
		CreateThePTPCar(522,1762.8755,699.3601,10.3849,354.9270,118,45); //
		CreateThePTPCar(522,2057.3643,1038.3488,11.0368,354.7306,118,45); //
	}
	if(PTPInfo[Map]==PTP_DESERT)
	{
        CreateThePTPCar(404,-526.9843,2617.1082,53.1452,268.3231,54,58); //
		CreateThePTPCar(575,-528.0163,2609.6033,52.9840,269.8776,7,116); //
		CreateThePTPCar(522,-527.3116,2604.4524,52.9857,268.7371,96,16); //
		CreateThePTPCar(461,-527.7070,2606.9312,52.9959,268.7370,92,9); //
		CreateThePTPCar(578,-530.4076,2579.3384,54.0444,267.7251,124,74); //
		CreateThePTPCar(403,-234.6122,2596.6921,63.3097,177.8963,72,86); //
		CreateThePTPCar(419,-222.7345,2595.4502,62.5122,178.8332,114,79); //
		CreateThePTPCar(438,-210.3821,2608.6948,62.6796,359.3552,6,6); //
		CreateThePTPCar(542,-201.4164,2609.2971,62.4466,357.1345,102,63); //
		CreateThePTPCar(460,250.9936,2937.0393,1.1604,358.5980,97,97); //
		CreateThePTPCar(471,420.9145,2533.3350,16.0530,92.4322,38,91); //
		CreateThePTPCar(581,422.1398,2530.4707,16.2221,95.9977,38,54); //
		CreateThePTPCar(417,365.7766,2539.3318,16.6849,180.2392,91,92); //
		CreateThePTPCar(450,271.9907,2548.9297,17.4732,182.1457,32,49); //
		CreateThePTPCar(512,248.0664,2548.0042,17.0739,179.8595,113,57); //
		CreateThePTPCar(513,193.7635,2548.5073,17.0316,184.2673,79,1); //
		CreateThePTPCar(476,246.1513,2531.1714,17.5409,104.8254,113,57); //
		CreateThePTPCar(476,223.8730,2530.8726,17.5116,108.1690,113,57); //
		CreateThePTPCar(476,192.4712,2531.8508,17.4853,119.8095,113,57); //
		CreateThePTPCar(476,160.8008,2532.2673,17.4613,115.9524,113,57); //
		CreateThePTPCar(476,123.0286,2531.6226,17.4824,112.3142,113,57); //
		CreateThePTPCar(476,94.7334,2531.0632,17.3728,109.6171,113,57); //
		CreateThePTPCar(476,217.5130,2473.3979,17.2638,55.3072,113,57); //
		CreateThePTPCar(476,189.3865,2474.2644,17.2580,55.8008,113,57); //
		CreateThePTPCar(476,152.2308,2472.8994,17.2569,54.3842,113,57); //
		CreateThePTPCar(476,109.9391,2471.0476,17.2578,56.0116,113,57); //
		CreateThePTPCar(476,77.3292,2471.8276,17.2562,56.0497,113,57); //
		CreateThePTPCar(593,67.7377,2448.9248,16.8548,88.8131,97,97); //
		CreateThePTPCar(511,68.5960,2430.7944,17.7762,91.2319,97,97); //
		CreateThePTPCar(519,405.6205,2449.9827,17.4261,3.1545,97,97); //
		CreateThePTPCar(498,387.7502,2590.1345,16.5448,191.5735,34,125); //
		CreateThePTPCar(513,325.6597,2543.7681,17.3474,178.4441,171,1); //
		CreateThePTPCar(592,303.2609,2046.5601,18.8368,179.5191,97,97); //
		CreateThePTPCar(476,267.6679,2003.9713,18.4184,203.5228,99,99); //
		CreateThePTPCar(476,266.0367,1966.7813,18.4184,203.5217,99,99); //
		CreateThePTPCar(468,219.8990,1941.4362,17.3203,90.5818,97,97); //
		CreateThePTPCar(433,227.4261,1925.3328,18.0780,177.3400,97,97); //
		CreateThePTPCar(470,234.0335,1899.4146,17.6404,91.3907,97,97); //
		CreateThePTPCar(463,-94.1240,1339.1913,9.9887,186.1707,97,97); //
		CreateThePTPCar(543,-84.8797,1340.0125,10.6574,186.8434,1,121); //
		CreateThePTPCar(416,-331.2917,1062.8346,19.8891,269.4089,1,3); //
		CreateThePTPCar(555,-80.7814,1077.5864,19.4472,181.1487,40,67); //
		CreateThePTPCar(576,-87.5835,1077.3654,19.4185,181.3618,71,79); //
		CreateThePTPCar(581,-44.5646,1166.5950,19.1552,179.7449,33,114); //
		CreateThePTPCar(515,22.5588,1180.0675,20.3496,355.3914,22,36); //
		CreateThePTPCar(479,667.3262,1728.1450,6.7850,218.8301,1,1); //
		CreateThePTPCar(575,661.3430,1722.5062,6.5566,223.5439,124,89); //
		CreateThePTPCar(406,634.5349,878.6119,-41.3433,302.7875,97,97); //
		CreateThePTPCar(493,-421.1840,1155.1364,-0.0902,94.8096,101,26); //
		CreateThePTPCar(595,-421.6871,1169.7241,0.1412,66.5374,92,24); //
		CreateThePTPCar(595,-658.0691,872.8874,0.1648,225.2690,92,24); //
		CreateThePTPCar(580,-681.3102,916.1792,11.9347,92.0569,1,1); //
		CreateThePTPCar(551,-672.4741,916.2581,11.9051,89.9814,1,1); //
		CreateThePTPCar(551,-690.3411,916.0239,11.9959,90.7041,1,1); //
		CreateThePTPCar(551,-668.4065,922.6815,11.9326,92.3888,0,0); //
		CreateThePTPCar(490,-668.0008,928.2704,12.2613,91.9271,0,0); //
		CreateThePTPCar(490,-669.6393,946.0757,12.2598,85.9222,0,0); //
		CreateThePTPCar(437,-677.5405,965.8808,12.2663,89.7545,97,97); //
		CreateThePTPCar(490,-702.5726,932.7827,12.4936,177.5873,0,0); //
		CreateThePTPCar(490,-706.9780,932.9467,12.5600,180.2983,0,0); //
		CreateThePTPCar(551,-669.5389,951.6960,11.9334,92.0096,0,0); //
		CreateThePTPCar(510,-682.9166,939.7399,16.3793,359.7916,97,97); //
		CreateThePTPCar(505,-886.3240,1520.2365,26.0638,269.1627,23,12); //
		CreateThePTPCar(468,-867.4030,1533.9789,22.2406,356.2494,97,97); //
		CreateThePTPCar(600,-865.5689,1561.1731,24.0659,270.3473,36,27); //
		CreateThePTPCar(576,-866.1833,1548.0042,22.8706,266.9924,83,19); //
		CreateThePTPCar(430,-919.7175,1667.5656,-0.2251,271.1859,1,79); //
		CreateThePTPCar(430,-1145.6239,2651.9690,40.3202,254.3779,1,79); //
		CreateThePTPCar(430,-908.5029,2666.5681,40.3223,140.7656,1,79); //
		CreateThePTPCar(484,-946.1235,2672.9500,40.8993,140.8366,116,117); //
		CreateThePTPCar(468,-663.1719,2306.7161,135.7752,85.3408,97,97); //
		CreateThePTPCar(522,-662.6063,2305.4790,135.6543,93.4079,99,99); //
		CreateThePTPCar(471,-662.2848,2302.0259,135.5360,93.6539,97,97); //
		CreateThePTPCar(417,-1300.9352,2504.7173,87.0377,353.4760,123,104); //
		CreateThePTPCar(593,-1305.5498,2483.1431,87.6117,98.1033,97,97); //
		CreateThePTPCar(495,-2293.2939,2656.5920,56.3781,357.0186,97,97); //
		CreateThePTPCar(430,-2413.8328,2299.0176,-0.3554,220.3488,97,97); //
		CreateThePTPCar(430,-2416.9180,2291.0542,-0.2797,222.1149,97,97); //
		CreateThePTPCar(453,-2420.6953,2287.2886,-0.4775,220.9792,85,116); //
		CreateThePTPCar(460,-2403.4548,2300.4944,1.1041,215.2490,97,97); //
		CreateThePTPCar(472,-2231.2239,2485.4370,-0.0428,332.7846,99,72); //
		CreateThePTPCar(453,-2240.0225,2489.7444,-0.4314,330.5581,1,102); //
		CreateThePTPCar(468,-1206.7222,1815.1521,41.3883,52.3870,97,97); //
		CreateThePTPCar(468,-1476.5038,1878.0006,32.3020,13.5172,97,97); //
		CreateThePTPCar(531,-1506.5626,1965.0449,48.3110,277.7696,97,97); //
		CreateThePTPCar(572,-1510.3555,1967.3995,47.9960,282.3123,99,99); //
		CreateThePTPCar(493,-1341.4543,1678.5054,0.2415,167.1651,0,105); //
		CreateThePTPCar(484,-1351.9751,1679.5040,0.0361,179.1821,123,68); //
		CreateThePTPCar(545,-1930.0723,2369.5872,49.3032,292.5989,123,23); //
		CreateThePTPCar(534,-1924.4191,2355.0149,48.6538,294.2132,2,122); //
		CreateThePTPCar(541,-1191.4945,1825.6530,41.3437,224.6765,101,89); //
		CreateThePTPCar(503,-1209.2852,1840.0352,41.6542,42.1161,49,102); //
		CreateThePTPCar(545,-899.2947,1701.6205,27.4497,33.4018,123,23); //
		CreateThePTPCar(545,-664.7512,918.4633,11.8770,90.9272,0,0); //
		CreateThePTPCar(587,-699.0332,929.8220,12.0347,173.5875,2,2); //
		CreateThePTPCar(602,-710.9059,938.3190,12.2094,91.4649,22,118); //
		CreateThePTPCar(602,-1451.8767,2657.3147,55.6432,356.4480,79,1); //
		CreateThePTPCar(506,-1455.9707,2657.9883,55.5403,0.5992,2,1); //
		CreateThePTPCar(596,-1400.3192,2656.7837,55.4076,270.6773,2,1); //
		CreateThePTPCar(601,-1437.9808,2651.8643,55.5963,270.3567,2,1); //
		CreateThePTPCar(599,-1401.0704,2652.5737,55.8791,269.6102,2,1); //
		CreateThePTPCar(596,-1400.2153,2648.2468,55.4068,271.3999,2,1); //
		CreateThePTPCar(598,-1400.4976,2644.5132,55.4157,270.4007,2,1); //
		CreateThePTPCar(598,-1400.8600,2640.6067,55.4174,269.8679,2,1); //
		CreateThePTPCar(523,-1400.8600,2637.2817,55.1697,267.9753,99,99); //
		CreateThePTPCar(523,-1400.9025,2634.7703,55.2929,264.5012,99,99); //
		CreateThePTPCar(523,-1400.5222,2631.7522,55.2318,264.3064,99,99); //
		CreateThePTPCar(497,-1419.1047,2666.9502,56.0099,355.9847,2,1); //
		CreateThePTPCar(497,-1353.4568,2682.7844,50.6288,267.5630,2,1); //
		CreateThePTPCar(523,-1400.8811,2628.5662,55.3273,272.7989,99,99); //
		CreateThePTPCar(603,-1472.9485,2656.9001,55.6738,0.4963,2,1); //
		CreateThePTPCar(415,-1478.6766,2657.0828,55.6056,357.4911,2,1); //
		CreateThePTPCar(468,-1438.8506,2660.5496,55.4222,260.5729,97,97); //
		CreateThePTPCar(468,-1438.8872,2658.2209,55.4196,260.5730,97,97); //
		CreateThePTPCar(522,-1443.6010,2660.7468,55.3909,262.1573,99,99); //
		CreateThePTPCar(522,-1442.6846,2658.3870,55.4008,255.2859,2,1); //
		CreateThePTPCar(522,-1439.1306,2656.0486,55.3210,266.8916,2,1); //
		CreateThePTPCar(596,-1401.6755,2619.3953,55.4735,265.5688,2,1); //
		CreateThePTPCar(597,-1410.0247,2625.6179,55.4812,260.8255,2,1); //
		CreateThePTPCar(523,-1400.3816,2633.2837,55.3051,267.1114,2,1); //
		CreateThePTPCar(597,-1410.8269,2631.7637,55.4373,270.2605,2,1); //
		CreateThePTPCar(597,-1446.3164,2587.0266,55.5536,178.1380,2,1); //
		CreateThePTPCar(411,-1464.4368,2586.3164,55.4642,356.9645,99,99); //
		CreateThePTPCar(411,-1295.5868,2714.2744,49.7896,8.4621,99,99); //
		CreateThePTPCar(414,-1289.9559,2712.8152,50.1562,183.1764,49,125); //
		CreateThePTPCar(411,-905.9946,1985.3812,60.6411,131.6807,99,99); //
		CreateThePTPCar(502,-910.2025,1992.0415,60.8055,130.4593,119,92); //
		CreateThePTPCar(475,-914.5989,1996.4453,60.7181,129.7311,121,87); //
		CreateThePTPCar(510,-375.7768,2252.8093,42.0942,288.0721,97,97); //
		CreateThePTPCar(468,-399.3919,2252.7856,41.9164,102.6003,97,97); //
		CreateThePTPCar(468,-249.2190,2717.9819,62.3561,179.1348,97,97); //
		CreateThePTPCar(506,284.9284,1369.9148,10.2905,83.9318,37,31); //
		CreateThePTPCar(415,285.2867,1365.1565,10.3578,90.0175,70,98); //
		CreateThePTPCar(411,285.5594,1359.5731,10.3134,88.5026,40,104); //
		CreateThePTPCar(558,285.7466,1355.3282,10.2173,88.9248,9,42); //
		CreateThePTPCar(558,285.7218,1350.5128,10.2161,95.8436,56,112); //
		CreateThePTPCar(522,286.0800,1345.5875,10.1606,97.7323,99,99); //
		CreateThePTPCar(522,285.8939,1342.7930,10.1601,97.4873,99,99); //
		CreateThePTPCar(522,285.7174,1339.6243,10.1606,93.5252,99,99); //
		CreateThePTPCar(522,285.9262,1336.8248,10.1610,79.5320,99,99); //
		CreateThePTPCar(522,281.9932,1347.5592,10.1556,91.5777,99,99); //
		CreateThePTPCar(522,281.9754,1344.2461,10.1565,87.0654,99,99); //
		CreateThePTPCar(522,281.3701,1341.3506,10.1587,84.2540,99,99); //
		CreateThePTPCar(522,280.9113,1337.7097,10.1597,82.5155,99,99); //
		CreateThePTPCar(411,284.6250,1388.8835,10.3130,100.7757,40,104); //
		CreateThePTPCar(411,285.3562,1383.5300,10.3130,89.6724,40,104); //
		CreateThePTPCar(411,284.2858,1376.7922,10.3130,85.7396,40,104); //
		CreateThePTPCar(578,281.3956,1426.3932,11.2016,92.1131,99,99); //
		CreateThePTPCar(506,284.0043,1436.8903,10.2904,90.6173,22,109); //
		CreateThePTPCar(468,285.4193,1442.2546,10.2518,96.6844,97,97); //
		CreateThePTPCar(468,285.8092,1446.7759,10.2547,91.3922,97,97); //
		CreateThePTPCar(468,284.9428,1451.4535,10.2548,86.4323,97,97); //
		CreateThePTPCar(468,284.8730,1455.6299,10.2543,87.6405,97,97); //
		CreateThePTPCar(468,285.4373,1459.0944,10.2540,88.0523,97,97); //
		CreateThePTPCar(468,280.7393,1441.7439,10.2544,92.0076,97,97); //
		CreateThePTPCar(468,281.0779,1445.1603,10.2542,89.1402,97,97); //
		CreateThePTPCar(451,252.7527,1444.2178,10.3318,88.8444,45,46); //
		CreateThePTPCar(415,252.8159,1448.1211,10.3556,87.5533,25,65); //
		CreateThePTPCar(451,248.9679,1398.2878,10.2910,267.5430,58,48); //
		CreateThePTPCar(496,246.8922,1392.8480,10.3115,271.0014,19,34); //
		CreateThePTPCar(578,258.9810,1382.1832,11.2263,179.0471,99,99); //
		CreateThePTPCar(593,297.5208,1392.0100,10.4019,271.4773,97,97); //
		CreateThePTPCar(513,297.4156,1378.0249,10.5328,180.1569,97,97); //
		CreateThePTPCar(579,259.2837,1447.7760,10.5186,86.4049,0,0); //
		CreateThePTPCar(579,259.5233,1443.7531,10.5112,85.8890,0,0); //
		CreateThePTPCar(579,261.1570,1404.5620,10.4362,271.2733,0,0); //
		CreateThePTPCar(579,261.4125,1410.7330,10.4323,268.1142,0,0); //
		CreateThePTPCar(579,261.3462,1415.1057,10.4268,267.4433,0,0); //
		CreateThePTPCar(579,261.2115,1401.1808,10.4878,270.8994,0,0); //
		CreateThePTPCar(451,-228.8470,2594.8564,62.4083,177.5855,58,48); //
		CreateThePTPCar(471,-251.3984,2598.1440,62.3863,273.2870,97,97); //
		CreateThePTPCar(500,-269.4493,2672.3718,62.6450,89.3452,97,97); //
	}
	//printf("DEBUG CFONTROL PTPSettings 2");
}
//======================[RP]=============================
stock LoadRPSettings()
{
	LoadRPInteriors();
	LoadRPVehicles();
	LoadRPItems();
	LoadRPDeads();
	LoadRPNotes();
	LoadRPBags();
	LoadRPFuels();
}

stock SaveRPSettings()
{
    SaveRPInteriors();
    SaveRPVehicles();
    SaveRPItems();
    SaveRPDeads();
    SaveRPNotes();
    SaveRPBags();
	SaveRPFuels();
}

stock RPGivePlayerStats(playerid)
{
	new pstr[RP_MAX_NAME_LEN*3];
	SetPlayerScore(playerid, 0);
	SetPlayerArmedWeapon(playerid, 0);
	RPPlayerInfo[playerid][SelectedItem] = -1;
	RPPlayerInfo[playerid][isRepairing] = 0;
    RPPlayerInfo[playerid][isFueling] = 0;
    KillTimer(RPPlayerInfo[playerid][Timer]);
    
	updateRPStats(playerid);
    SetPlayerSkin(playerid,RPPlayerInfo[playerid][SkinID]);
    SetPlayerVirtualWorld(playerid, RPPlayerInfo[playerid][dPosWorld]);
	SetPlayerInterior(playerid,	RPPlayerInfo[playerid][dPosInt]);
    SetPlayerPosEx(playerid, RPPlayerInfo[playerid][dPosX], RPPlayerInfo[playerid][dPosY], RPPlayerInfo[playerid][dPosZ], RPPlayerInfo[playerid][dAngle]);
    FreezeBeforeObjects(playerid);
    
	SetPlayerChatBubble(playerid, " ", 0xEEEEEEFF, 0.1, 1000);

    format(pstr,sizeof pstr, "{FFFFFF}%s %s",RPPlayerInfo[playerid][rpfName],RPPlayerInfo[playerid][rplName]);
	UpdateDynamic3DTextLabelText(RPPlayerInfo[playerid][NameLabel], 0x33FF33AA, pstr);

    PlayerTextDrawSetString(playerid, RPPlayerInfo[playerid][selItem], " ");

	if(RPPlayerInfo[playerid][dPosInt] == 0 && RPPlayerInfo[playerid][dPosWorld] != W_RP)
    	SetPlayerVirtualWorld(playerid, W_RP);

	if(RPPlayerInfo[playerid][BagType] == RP_BAG_SMALL)
        SetPlayerAttachedObjectEx(playerid, 1, 3026, 1, -0.173001, -0.074997, -0.021999, -3.199918, -3.899974, -0.199999, 0.981999, 1.110000, 1.175999);
    else if(RPPlayerInfo[playerid][BagType] == RP_BAG_BIG)
        SetPlayerAttachedObjectEx(playerid, 1, 1550, 1, 0.025998, -0.203997, 0.000000, 178.000076, 121.799972, -0.499997, 1.000000, 1.000000, 1.000000);
    ResetWeapons(playerid);

    PlayerTextDrawShow(playerid, RPPlayerInfo[playerid][p_HP]);
    PlayerTextDrawShow(playerid, RPPlayerInfo[playerid][p_TH]);
    PlayerTextDrawShow(playerid, RPPlayerInfo[playerid][p_HU]);
    PlayerTextDrawShow(playerid, RPPlayerInfo[playerid][p_CA]);
    PlayerTextDrawShow(playerid, RPPlayerInfo[playerid][p_AL]);
    PlayerTextDrawShow(playerid, RPPlayerInfo[playerid][selItem]);
	TextDrawShowForPlayer(playerid, RPInfo[TD_Time]);
	
	forLoop(i,6)TextDrawShowForPlayer(playerid,RPInfo[Figures][i]);
	TextDrawShowForPlayer(playerid,RPInfo[StatsBackground]);
}

stock RPSavePlayerStats(playerid)
{
	GetPlayerPos(playerid,RPPlayerInfo[playerid][dPosX],RPPlayerInfo[playerid][dPosY],RPPlayerInfo[playerid][dPosZ]);
	GetPlayerFacingAngle(playerid, RPPlayerInfo[playerid][dAngle]);
	RPPlayerInfo[playerid][dPosInt] = GetPlayerInterior(playerid);
	RPPlayerInfo[playerid][dPosWorld] = GetPlayerVirtualWorld(playerid);
    GetPlayerHealth(playerid, RPPlayerInfo[playerid][Health]);
    //RPCreateBag(playerid, GetThePlayerMoney(playerid));
}

stock FixRPName(const string[])
{
 	new name[RP_MAX_NAME_LEN];
    name[0]=toupper(string[0]);
	for (new i = 1; i < strlen(string); i++)
	{
        name[i]=tolower(string[i]);
	}
	return name;
}

stock IsValidRPName(const string[]) {
	if(strlen(string) < 2) return false;
	for (new i = 0; i < strlen(string); i++)
	{
        if ((string[i] < 'a' || string[i] > 'z') && (string[i] < 'A' || string[i] > 'Z'))
			return false;
	}
	return true;
}

stock IsValidRPNote(string[]) {
	if(!TextLenCheck(string, 5) || strlen(string) >= 70 || CheckIP(string)) return false;
	for (new i = 0; i < strlen(string); i++)
	{
        if (string[i] == '|' || string[i] == '%' || string[i] == '\r' || string[i] == '\n')
			return false;
	}
	return true;
}

stock IsValidRPRadioText(string[]) {
	if(!TextLenCheck(string, 2) || strlen(string) >= 70 || CheckIP(string)) return false;
	return true;
}

forward RPHideBlackScreen(playerid);
public RPHideBlackScreen(playerid)
{
    TextDrawHideForPlayer(playerid,RPInfo[DarkScreen]);
}

stock RPTimeConverter(sec)
{
    new string[40];
    new emin = floatround(sec/60);
    new hr = floatround(emin/60);
    new dy = floatround(hr/24);
    new wk = floatround(dy/24);
    format(string,sizeof(string),"%d secs",sec);
    if(emin > 0)format(string,sizeof(string),"%d mins",emin);
    if(hr > 0)format(string,sizeof(string),"%d hrs",hr);
    if(dy > 0)format(string,sizeof(string),"%d days",hr);
    if(wk > 0)format(string,sizeof(string),"%d weeks",hr);
	return string;
}

stock updateRPStats(playerid)
{
	new pstr[RP_MAX_NAME_LEN*3];
    if(RPPlayerInfo[playerid][Health]>100.0)RPPlayerInfo[playerid][Health] = 99.9;
    if(RPPlayerInfo[playerid][Hunger]>100.0)RPPlayerInfo[playerid][Hunger] = 100.0;
    if(RPPlayerInfo[playerid][Thirst]>100.0)RPPlayerInfo[playerid][Thirst] = 100.0;

    if(RPPlayerInfo[playerid][Health] < 30.0)TextDrawShowForPlayer(playerid,RPInfo[DarkScreen]);
    else TextDrawHideForPlayer(playerid,RPInfo[DarkScreen]);
	SetHealth(playerid, RPPlayerInfo[playerid][Health]);
    
    format(pstr,sizeof pstr, "%d%",floatround(RPPlayerInfo[playerid][Health]));
    PlayerTextDrawSetString(playerid, RPPlayerInfo[playerid][p_HP], pstr);
    format(pstr,sizeof pstr, "%d%",floatround(RPPlayerInfo[playerid][Thirst]));
    PlayerTextDrawSetString(playerid, RPPlayerInfo[playerid][p_TH], pstr);
    format(pstr,sizeof pstr, "%d%",floatround(RPPlayerInfo[playerid][Hunger]));
    PlayerTextDrawSetString(playerid, RPPlayerInfo[playerid][p_HU], pstr);
    format(pstr,sizeof pstr, "%d",RPPlayerInfo[playerid][Money]);
    PlayerTextDrawSetString(playerid, RPPlayerInfo[playerid][p_CA], pstr);
    return 1;
}

forward RPLowerVehicleFuel(playerid, rrstate);
public RPLowerVehicleFuel(playerid, rrstate)
{
	if(!IsPlayerInAnyVehicle(playerid) || RPGetVehicleID(GetPlayerVehicleID(playerid)) == -1 || GetPlayerState(playerid) != PLAYER_STATE_DRIVER
		|| IsPlayerOnBicycle(playerid))return 0;
	new i = RPGetVehicleID(GetPlayerVehicleID(playerid));
	if(RPVehicles[i][Fuel] > 10)
	{
		if(rrstate == 1)RPVehicles[i][Fuel]-=2;
	}
    else
	{
		SetVehicleEngineState(RPVehicles[i][ID], false);
		RPVehicles[i][Fuel] = 9;
		Streamer_Update(playerid);
		GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~r~NO FUEL", 5000, 3);
		return 0;
	}
 	rrstate = 1;
 	SetTimerEx("RPLowerVehicleFuel", 30000, false, "ii", playerid,rrstate);
	return 1;
}

forward RPLowerPlayerThirstHunger();
public RPLowerPlayerThirstHunger()
{
	forLoop(playerid, MAX_PLAYERS)
	{
	    if(!IsPlayerConnected(playerid) || IsPlayerNPC(playerid)) continue;
	    if(PlayerInfo[playerid][Spawned] == 1 && PlayerInfo[playerid][PlayerMode] == TRP)
	    {
	        if(random(2) == 1)
	        {
			    if(RPPlayerInfo[playerid][Thirst]>0)RPPlayerInfo[playerid][Thirst]-=0.8;
			    else
				{
				    RPPlayerInfo[playerid][Health]-=0.7;
					SetHealth(playerid, RPPlayerInfo[playerid][Health]);
				}
			}
			if(random(2) == 1)
	        {
			    if(RPPlayerInfo[playerid][Hunger]>0)RPPlayerInfo[playerid][Hunger]-=0.4;
			    else
				{
				    RPPlayerInfo[playerid][Health]-=0.3;
					SetHealth(playerid, RPPlayerInfo[playerid][Health]);
				}
			}
			updateRPStats(playerid);
		}
	}
	return 0;
}

stock playerRPPickUpItem(playerid, id, item, fromstate)
{
	new success = false, slot = -1;
	
    forLoop(i, RP_MAX_BAG_ITEMS)
    {
		if(RPPlayerInfo[playerid][BagItems][i] == 0)
		{
		    slot = i;
		    break;
		}
	}

	switch(fromstate)
	{
	    case RP_ITEM_FROM_BAG:
	    {
	        if(slot != -1)
	        {
    			if(id < 0 || id >= RP_MAX_BAGS || RPBags[id][Exists] == 0)return false;
    			
			    RPPlayerInfo[playerid][BagItems][slot] = RPBags[id][BagItems][item];
				RPPlayerInfo[playerid][BagItemsValue][slot] = RPBags[id][BagItemsValue][item];

		   		RPBags[id][BagItems][item] = 0;
		   		RPBags[id][BagItemsValue][item] = 0;
	            success = true;
	        }
	    }
	    case RP_ITEM_FROM_VEH:
	    {
	        if(slot != -1)
	        {
    			if(id < 0 || id >= RP_MAX_VEHICLES || RPVehicles[id][Exists] == 0)return false;
    			
	            RPPlayerInfo[playerid][BagItems][slot] = RPVehicles[id][BagItems][item];
		   		RPPlayerInfo[playerid][BagItemsValue][slot] = RPVehicles[id][BagItemsValue][item];

		   		RPVehicles[id][BagItems][item] = 0;
		   		RPVehicles[id][BagItemsValue][item] = 0;
	            success = true;
	        }
	    }
	    case RP_ITEM_FROM_GROUND:
	    {
	        if(slot != -1)
	        {
	            if(RPItems[id][Exists] == 0)return false;
	            
	            RPPlayerInfo[playerid][BagItems][slot] = RPItems[id][Model];
		   		RPPlayerInfo[playerid][BagItemsValue][slot] = RPItems[id][Value];

            	RPItems[id][Model] = 0;
				RPItems[id][Value] = 0;
				RPDestroyItem(id);
		        success = true;
			}
	    }
	}
	if(id != -1 && fromstate != RP_ITEM_FROM_GROUND)
	{
		forLoop(u, MAX_PLAYERS)
		{
		    if(IsPlayerConnected(u) && PlayerInfo[u][Spawned] == 1 && PlayerInfo[u][PlayerMode] == TRP && u != playerid)
			{
			    if(PlayerInfo[u][SelectMenuOption][SELECT_MENU_OPTIONS-1] == id && (PlayerInfo[playerid][SelectMenu] == THE_G_BAG_RP || PlayerInfo[playerid][SelectMenu] == THE_V_BAG_RP))
			    {
			        PlayerInfo[u][SelectMenu] = -1;
					forLoop(a, SELECT_MENU_OPTIONS)PlayerInfo[u][SelectMenuOption][a] = -1;
			        ShowPlayerDialog(u, 4511, DIALOG_STYLE_MSGBOX,"RP Bag", "{FF0000}Notice:{FFFFFF} Items have been taken...", "Close", "");
			    }
	    	}
	    }
    }
	return success;
}

stock getRPGroundBagItems(playerid, id)
{
    if(id < 0 || id >= RP_MAX_BAGS || RPBags[id][Exists] == 0)return false;
	new items = 0;
    forLoop(i, RP_MAX_BAG_ITEMS)
		if(RPBags[id][BagItems][i] != 0) items++;
	if(items != 0)
	{
	    new mid, pstring[800], str[40], cell = 1;
	    format(pstring,sizeof pstring,"\nPickup Bag");

	    forLoop(i, RP_MAX_BAG_ITEMS)
	    {
			if(RPBags[id][BagItems][i] != 0)
			{
			    mid = GetItemInfoID(RPBags[id][BagItems][i]);
			    if(RPItemInfo[mid][Type] == WEAPON)
			    {
			        new type = GetWeaponTypeFromID(RPItemInfo[mid][ID]);
			        //if(RPBags[id][BagItemsValue][i] == 0 && type == EXPLOSIVE)
			        if(RPBags[id][BagItemsValue][i] == 0)
			        {
			            RPBags[id][BagItems][i] = 0;
			            continue;
			        }
			        if(type == PISTOLS || type == RIFLE || type == RIFLE)
						format(str,sizeof str,"\n%s - %d ammo",RPItemInfo[mid][Name],RPBags[id][BagItemsValue][i]);
					else if(type == EXPLOSIVE)
							format(str,sizeof str,"\n%d %s(s)",RPBags[id][BagItemsValue][i],RPItemInfo[mid][Name]);
					else format(str,sizeof str,"\n%s",RPItemInfo[mid][Name]);
			    }
			    else if(RPItemInfo[mid][Type] == GAS_CAN || RPItemInfo[mid][Type] == BOTTLE)
			    	format(str,sizeof str,"\n%d/100 %s",RPBags[id][BagItemsValue][i],RPItemInfo[mid][Name]);
			    else if(RPItemInfo[mid][Type] == HEALTH_PACK)
			    	format(str,sizeof str,"\n%s +60HP",RPItemInfo[mid][Name]);
			    else format(str,sizeof str,"\n%s",RPItemInfo[mid][Name]);

			    strcat(pstring, str);
			    PlayerInfo[playerid][SelectMenuOption][cell++] = i;
			}
		}
	    PlayerInfo[playerid][SelectMenu] = THE_G_BAG_RP;
		ShowPlayerDialog(playerid, SELMENU, DIALOG_STYLE_LIST, "Looting Bag on Ground",pstring, "Select", "Cancel");
	}
	else
	{
	    PlayerInfo[playerid][SelectMenu] = THE_G_BAG_RP;
		ShowPlayerDialog(playerid, SELMENU, DIALOG_STYLE_LIST, "Looting Bag on Ground","\nPickup Bag", "Select", "Cancel");
	}
	return (items != 0);
}

stock getRPItems(playerid)
{
	new items = 0;
    forLoop(i, RP_MAX_BAG_ITEMS)
		if(RPPlayerInfo[playerid][BagItems][i] != 0) items++;
	if(items != 0)
	{
   		forLoop(i, SELECT_MENU_OPTIONS)PlayerInfo[playerid][SelectMenuOption][i] = -1;
	    new mid, pstring[820], str[40], cell = 0, bool:selected = false;
	    
	    if(RPPlayerInfo[playerid][SelectedItem] != -1)
	    {
	    	new id = RPPlayerInfo[playerid][SelectedItem];
            if(id < RP_MAX_BAG_ITEMS && id >= 0)
            {
	    		mid = GetItemInfoID(RPPlayerInfo[playerid][BagItems][id]);
	    		if(RPItemInfo[mid][Type] != WEAPON)
			        selected = true;
		  	}
		}
		else
		{
		    new slot = GetWeaponSlot(GetPlayerWeapon(playerid));
		    if(GetPlayerWeapon(playerid) != 0 && GetPlayerWeapon(playerid) == RPPlayerInfo[playerid][selWeap][slot])
		    	selected = true;
		}
		if(selected)
	    {
	        cell = 2;
	        PlayerInfo[playerid][SelectMenuOption][SELECT_MENU_OPTIONS-1] = 1;
			format(pstring,sizeof pstring,"\nPlace item in bag\nDrop Item");
	    }
	    
	    forLoop(i, RP_MAX_BAG_ITEMS)
	    {
			if(RPPlayerInfo[playerid][BagItems][i] != 0)
			{
			    mid = GetItemInfoID(RPPlayerInfo[playerid][BagItems][i]);
			    if(RPItemInfo[mid][Type] == WEAPON)
			    {
			        new type = GetWeaponTypeFromID(RPItemInfo[mid][ID]);
			        //if(RPPlayerInfo[playerid][BagItemsValue][i] == 0 && type == EXPLOSIVE)
			        if(RPPlayerInfo[playerid][BagItemsValue][i] == 0)
			        {
			            RPPlayerInfo[playerid][BagItems][i] = 0;
			            continue;
			        }
			        if(type == PISTOLS || type == RIFLE || type == RIFLE)
						format(str,sizeof str,"\n%s - %d ammo",RPItemInfo[mid][Name],RPPlayerInfo[playerid][BagItemsValue][i]);
					else if(type == EXPLOSIVE)
							format(str,sizeof str,"\n%d %s(s)",RPPlayerInfo[playerid][BagItemsValue][i],RPItemInfo[mid][Name]);
					else format(str,sizeof str,"\n%s",RPItemInfo[mid][Name]);
			    }
			    else if(RPItemInfo[mid][Type] == GAS_CAN || RPItemInfo[mid][Type] == BOTTLE)
			    	format(str,sizeof str,"\n%d/100 %s",RPPlayerInfo[playerid][BagItemsValue][i],RPItemInfo[mid][Name]);
			    else if(RPItemInfo[mid][Type] == HEALTH_PACK)
			    	format(str,sizeof str,"\n%s +60HP",RPItemInfo[mid][Name]);
			    else format(str,sizeof str,"\n%s",RPItemInfo[mid][Name]);

			    strcat(pstring, str);
			    PlayerInfo[playerid][SelectMenuOption][cell++] = i;
			}
		}
	    PlayerInfo[playerid][SelectMenu] = THE_BAG_RP;

        if(RPPlayerInfo[playerid][BagType] == RP_BAG_SMALL)
            format(str,sizeof str, "Your small bag (%d/%d)",items,RP_BAG_SMALL_MAX);
        else if(RPPlayerInfo[playerid][BagType] == RP_BAG_BIG)
            format(str,sizeof str, "Your big bag (%d/%d)",items,RP_BAG_BIG_MAX);

		ShowPlayerDialog(playerid, SELMENU, DIALOG_STYLE_LIST, str, pstring, "Select", "Cancel");
	}
	return (items != 0);
}


forward RPFuelingUp(playerid, sid, type, id);
public RPFuelingUp(playerid, sid, type, id)
{
    if(!IsPlayerConnected(playerid) || IsPlayerNPC(playerid))return 0;
    if(PlayerInfo[playerid][PlayerMode] == TRP && PlayerInfo[playerid][Spawned] == 1 && RPPlayerInfo[playerid][FirstTime] == 1 && !IsPlayerInAnyVehicle(playerid) && GetPlayerVirtualWorld(playerid) == W_RP)
	{
	    if((!PlayerToVehicle(playerid, RPVehicles[id][ID], 4.0) && type == 0) || (type == 1 && RPGetClosestFuel(playerid, 2.0) != id) || IsPlayerInAnyVehicle(playerid)
			|| GetPlayerAnimationIndex(playerid) != 168 || RPPlayerInfo[playerid][isFueling] == 0)
	    {
			ClearAnimations(playerid);
			Sync(playerid);
	        RPPlayerInfo[playerid][isFueling] = 0;
	        KillTimer(RPPlayerInfo[playerid][Timer]);
			GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~r~Fueling Stopped", 2000, 3);
	        return 0;
	    }
	    new mid = GetItemInfoID(RPPlayerInfo[playerid][BagItems][sid]);
		if(type == 0)//fueling up car
		{
		    if(RPVehicles[id][Fuel] >= 100)
            {
		        ClearAnimations(playerid);
				Sync(playerid);
		        RPPlayerInfo[playerid][isFueling] = 0;
		        KillTimer(RPPlayerInfo[playerid][Timer]);
		        return GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~r~TANK IS FULL", 2000, 3);
      		}
            if(RPPlayerInfo[playerid][BagItemsValue][sid] <= 0)
            {
		        ClearAnimations(playerid);
				Sync(playerid);
		        RPPlayerInfo[playerid][isFueling] = 0;
		        KillTimer(RPPlayerInfo[playerid][Timer]);
		        return GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~r~NO FUEL IN CAN", 2000, 3);
      		}
		    if(RPPlayerInfo[playerid][BagItemsValue][sid] < 10)RPVehicles[id][Fuel]+=RPPlayerInfo[playerid][BagItemsValue][sid];
			else RPVehicles[id][Fuel]+=10;
		    RPPlayerInfo[playerid][BagItemsValue][sid]-= 10;
	        SetVehicleEngineState(RPVehicles[id][ID], true);
	        if(RPVehicles[id][Fuel] > 100)RPVehicles[id][Fuel] = 100;
			if(RPPlayerInfo[playerid][BagItemsValue][sid] < 0)RPPlayerInfo[playerid][BagItemsValue][sid] = 0;
		    GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~w~FUEL ADDED", 2000, 3);
		}
		else
		{
            if(RPPlayerInfo[playerid][BagItemsValue][sid] >= 100)
            {
		        ClearAnimations(playerid);
				Sync(playerid);
		        RPPlayerInfo[playerid][isFueling] = 0;
		        RPPlayerInfo[playerid][BagItemsValue][sid] = 100;
		        KillTimer(RPPlayerInfo[playerid][Timer]);
		        return GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~r~CAN IS FULL", 2000, 3);
			}
       		RPPlayerInfo[playerid][BagItemsValue][sid]+=10;
    		if(RPPlayerInfo[playerid][BagItemsValue][sid] > 100)RPPlayerInfo[playerid][BagItemsValue][sid] = 100;
			GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~w~FUEL ADDED IN CAN", 2000, 3);
		}
	    updateSelItem(playerid, mid, sid);
		GameTextForPlayer(playerid, "~n~ ~n~ ~n~ ~n~ ~w~Fueling..", 2000,3);
		KillTimer(RPPlayerInfo[playerid][Timer]);
		RPPlayerInfo[playerid][Timer] = SetTimerEx("RPFuelingUp",900,0,"dddd", playerid, sid, type, id);
	}
	return 0;
}

forward RPRepairVehicle(playerid, sid, veh, time);
public RPRepairVehicle(playerid, sid, veh, time)
{
    if(!IsPlayerConnected(playerid) || IsPlayerNPC(playerid))return 0;
    if(PlayerInfo[playerid][PlayerMode] == TRP && PlayerInfo[playerid][Spawned] == 1 && RPPlayerInfo[playerid][FirstTime] == 1 && !IsPlayerInAnyVehicle(playerid) && GetPlayerVirtualWorld(playerid) == W_RP)
	{
	    if(!PlayerToVehicle(playerid, veh, 4.0) || IsPlayerInAnyVehicle(playerid)
			|| GetPlayerAnimationIndex(playerid) != 168 || RPPlayerInfo[playerid][isRepairing] == 0)
	    {
			ClearAnimations(playerid);
			Sync(playerid);
	        RPPlayerInfo[playerid][isRepairing] = 0;
	        KillTimer(RPPlayerInfo[playerid][Timer]);
			GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~r~Repair failed", 2000, 3);
	        return 0;
	    }
	    time--;
	    if(time <= 0)
	    {
	        RepairVehicle(veh);
			ClearAnimations(playerid);
			Sync(playerid);
			RPPlayerInfo[playerid][isRepairing] = 0;
			GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~w~Vehicle repaired", 2000, 3);
			RPPlayerInfo[playerid][SelectedItem] = -1;
			KillTimer(RPPlayerInfo[playerid][Timer]);
			RemovePlayerAttachedObjectEx(playerid, RP_ATTACHMENT_INDEX);
			PlayerTextDrawSetString(playerid,RPPlayerInfo[playerid][selItem], " ");
			RPPlayerInfo[playerid][BagItems][sid] = 0;
			return 0;
	    }
		GameTextForPlayer(playerid, "~n~ ~n~ ~n~ ~n~ ~w~Repairing", 2000,3);
		KillTimer(RPPlayerInfo[playerid][Timer]);
		RPPlayerInfo[playerid][Timer] = SetTimerEx("RPRepairVehicle",900,0,"dddd", playerid, sid, veh, time);
	}
	return 0;
}

forward RPRespawnItems();
public RPRespawnItems()
{
    new id = -1, type, infoID, Float: x, Float: y, Float: z, world, interior, model, value;
    
    new File:file_ptr, line[126], i=0;
    file_ptr = fopen("/pangea/RP/ItemSpawn.ini",filemode:io_read);
	if(!file_ptr) return 0;

    
    forLoopV(u, 0, RP_MAX_ITEMS)
	{
	    if(RPItems[u][Exists] == 1 && RPItems[u][cGround] == 1)
	    {
			RPDestroyItem(u);
	    }
	}
	while(fread(file_ptr,line, sizeof(line)) > 0)
	{
	    id = -1;
	    forLoopV(u, 0, RP_MAX_ITEMS)
		{
		    if(RPItems[u][Exists] == 0)
		    {
				id = u;
				break;
		    }
		}
		if(id == -1)break;

    	sscanf(line,"p<,>fffdd",x, y, z, interior, world);

		switch(random(4))
		{
		    case 0:type = 0;//food
		    case 1:type = 2;//weapon
		    case 2:type = 5;//repair
		    case 3:type = 6;//medkit
		}
		forLoop(u, sizeof(RPItemInfo))
		{
		    if(RPItemInfo[u][Type] == type)
			{
			    infoID = u;
				break;
			}
		}
	    value = RPItemInfo[infoID][Amount];
	    if(type == WEAPON)
	    {
			switch(random(15))//go 16 when you fix the goggles
			{
			    case 0:model = 333;//gold club
			    case 1:model = 334;//nite stick
			    case 2:model = 335;//knife
			    case 3:model = 336;//bat
			    case 4:model = 337;//shovel
			    case 5:model = 339;//katana
			    case 6:model = 342;//nade
			    case 7:model = 344;//molot
			    case 8:model = 348;//psitol
			    case 9:model = 349;//shotgun
			    case 10:model = 355;//ak
			    case 11:model = 356;//m4
			    case 12:model = 357;//rifle
			    case 13:model = 358;//snipe
			    case 14:model = 367;//camera
			    //case 15:model = 368;//goggles
			}
			forLoop(u, sizeof(RPItemInfo))
			{
			    if(RPItemInfo[u][Model] == model)
				{
				    infoID = u;
					break;
				}
			}
			value = RPItemInfo[infoID][Amount];
	    }
	    else if(type == FOOD)
	    {
	        switch(random(5))
			{
			    case 0:model = 1582;
			    case 1:model = 2866;
			    case 2:model = 2861;
			    case 3:model = 2663;
			    case 4:model = 2867;
			}
	    }
	    else if(type == VEH_REPAIR) model = 18633;
	    else if(type == HEALTH_PACK) model = 1240;

		RPCreateItem(model, value, x, y, z-1.0,world,interior, true);
		i++;
	}
	fclose(file_ptr);
    if(i > 0)
	{
		SendMessageToMode(TRP,COLOR_WHITE, "{FF0000}ITEMS{FFFFFF} Ground items have been respawned!");
		printf("RP ItemRespawn %d loaded", i);
	}
	return 1;
}

stock RPGetCloseItemsToPoint(Float:x,Float:y,Float:z,world, interior, Float:distance)
{
	new Float:dist, items;
    forLoop(u, RP_MAX_ITEMS)
	{
	    if(RPItems[u][Exists] == 1 && RPItems[u][cInt] == interior && RPItems[u][cWorld] == world)
	    {
		    dist = GetPointToPointDistance(RPItems[u][cPosX],RPItems[u][cPosY],RPItems[u][cPosZ],x, y, z);
			if(dist < distance)
			{
    			items++;
			}
		}
	}
	return items;
}


stock GetPointToPointDistance(Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2)
{
	new Float:tmpdis;
	tmpdis = floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2)+floatpower(floatabs(floatsub(y2,y1)),2)+floatpower(floatabs(floatsub(z2,z1)),2));
	return floatround(tmpdis);
}

forward RPChangeTime();
public RPChangeTime()
{
    new string[90], str[4][10], year,month,day,minute,second;
	getdate(year, month, day);
	gettime(ModeTime[TRP],minute,second);

	if(ModeTime[TRP] > 9)format(str[0], 10, "%d",ModeTime[TRP]);
	else format(str[0], 10, "0%d",ModeTime[TRP]);

	if(minute > 9)format(str[1], 10, "%d",minute);
	else format(str[1], 10, "0%d",minute);
	
	if(second > 9)format(str[2], 10, "%d",second);
	else format(str[2], 10, "0%d",second);
	
	if(day > 9)format(str[3], 10, "%d",day);
	else format(str[3], 10, "0%d",day);

	format(string, sizeof(string), "%s %s %d %s:%s:%s",MonthNames[month-1],str[3],year+70,str[0],str[1],str[2]);
	TextDrawSetString(RPInfo[TD_Time], string);
}

forward RPWeatherChanger();
public RPWeatherChanger()
{
	if(random(10) != 1) return 0;//chance to update weather is 1/10
	if(ModeTime[TRP] > 7 && ModeTime[TRP] < 17) ModeWeather[TRP] = RPWeatherUpdateDay();
	else ModeWeather[TRP] = RPWeatherUpdateNight();
	return 1;
}

stock RPWeatherUpdateDay()
{
	if((ModeWeather[TRP] >= 0 && ModeWeather[TRP] <= 6) || (ModeWeather[TRP] >= 10 && ModeWeather[TRP] <= 14)) return RandomSet(4,7,20);
	if(ModeWeather[TRP] == 7) return RandomSet(0,1,2,3,5,6,10,11,13,14);
	if(ModeWeather[TRP] == 4) return RandomSet(8,7, 16);
	if(ModeWeather[TRP] == 20) return RandomSet(8);
	if(ModeWeather[TRP] == 8) return RandomSet(20, 4, 9);
	return RandomSet(2,4,7,8,9,12,15);
}
stock RPWeatherUpdateNight()
{
	if((ModeWeather[TRP] >= 0 && ModeWeather[TRP] <= 6) || (ModeWeather[TRP] >= 10 && ModeWeather[TRP] <= 14)) return RandomSet(4,7,20);
	if(ModeWeather[TRP] == 7) return RandomSet(4,8, 16);
	if(ModeWeather[TRP] == 4) return RandomSet(8,7, 16);
	if(ModeWeather[TRP] == 20) return RandomSet(8);
	if(ModeWeather[TRP] == 8) return RandomSet(20, 4, 9);
	return RandomSet(2,4,7,8,9,12,15);
}

stock RandomSet(...) return getarg(random(numargs()));

stock TalkMessage(Float:dist, playerid, prefix[], message[])
{
	new Msg[180];
	if(!strlen(message)) return;
	if(IsPlayerConnected(playerid))
	{
		new Float:fPlayerX, Float:fPlayerY, Float:fPlayerZ;
		new Float:fPlayerToPlayerDist;
		new Float:fNormDistance;
		new ColorScale;
		new ColorValue;
		
		format(Msg, sizeof(Msg), "%s",message);
        SetPlayerChatBubble(playerid, Msg, 0xEEEEEEFF, dist, 6000);//for 6 secs

		if(strlen(prefix) > 0)
			format(Msg, sizeof(Msg), "%s %s %s {FFFFFF}%s", RPPlayerInfo[playerid][rpfName], RPPlayerInfo[playerid][rplName], prefix, message);
		else format(Msg, sizeof(Msg), "%s %s {FFFFFF}%s", RPPlayerInfo[playerid][rpfName], RPPlayerInfo[playerid][rplName], message);
        SendClientMessage(playerid, 0xD0D0D0FF, Msg);

		GetPlayerPos(playerid, fPlayerX, fPlayerY, fPlayerZ);

		forLoop(i, MAX_PLAYERS)
		{
		    if(IsPlayerConnected(i) && (i != playerid) && IsPlayerStreamedIn(playerid,i)
				&& PlayerInfo[i][Spawned] == 1 && PlayerInfo[i][PlayerMode] == TRP)
			{
		        fPlayerToPlayerDist = GetPlayerDistanceFromPoint(i, fPlayerX, fPlayerY, fPlayerZ);
				if(fPlayerToPlayerDist < dist) { // receiving player is within the specified distance
					// get normalized distance to create a fade.
					fNormDistance = 1.0 - (fPlayerToPlayerDist / dist);
  					if(fNormDistance > 0.75) ColorScale = 220;
					else ColorScale = floatround(96.0 + (128.0 * fNormDistance));
					ColorValue = 0x000000FF | ColorScale << 24 | ColorScale << 16 | ColorScale << 8;
					SendClientMessage(i, ColorValue, Msg);
				}
			}
		}
	}
}

stock RPGetClosestType(playerid, Float:distance, &closeid, &atype)
{
	new Float:dist, Float:closedist=9999;
	/*if(RPGetCloseDeads(playerid, distance) >= 1)
	{
	    forLoop(i, RP_MAX_DEADS)
		{
		    if(RPDeads[i][Exists] == 1 && GetPlayerInterior(playerid) == RPDeads[i][cInt] && GetPlayerVirtualWorld(playerid) == RPDeads[i][cWorld])
		    {
			    dist = GetPlayerDistanceFromPoint(playerid, RPDeads[i][cPosX],RPDeads[i][cPosY],RPDeads[i][cPosZ]);
				if(dist < closedist && dist < distance)
				{
					closedist = dist;
					closeid = i;
					atype = RP_TYPE_DEAD;
				}
			}
		}
	    return 0;
	}*/
	forLoop(i, RP_MAX_DEADS)
	{
	    if(RPDeads[i][Exists] == 1 && GetPlayerInterior(playerid) == RPDeads[i][cInt] && GetPlayerVirtualWorld(playerid) == RPDeads[i][cWorld])
	    {
		    dist = GetPlayerDistanceFromPoint(playerid, RPDeads[i][cPosX],RPDeads[i][cPosY],RPDeads[i][cPosZ]);
			if(dist < closedist && dist < distance)
			{
				closedist = dist;
				closeid = i;
				atype = RP_TYPE_DEAD;
				return 0;
			}
		}
	}
	forLoop(i, RP_MAX_NOTES)
	{
	    if(RPNotes[i][Exists] == 1 && GetPlayerInterior(playerid) == RPNotes[i][cInt] && GetPlayerVirtualWorld(playerid) == RPNotes[i][cWorld])
	    {
		    dist = GetPlayerDistanceFromPoint(playerid, RPNotes[i][cPosX],RPNotes[i][cPosY],RPNotes[i][cPosZ]);
			if(dist < closedist && dist < distance)
			{
				closedist = dist;
				closeid = i;
				atype = RP_TYPE_NOTE;
				return 0;
			}
		}
	}
	
	if(RPGetCloseItems(playerid, distance) >= 3)return getRPCloseItems(playerid, 4.0);
	if(RPGetCloseBags(playerid, distance) >= 2)return getRPCloseBags(playerid, 4.0);
	forLoop(i, RP_MAX_ITEMS)
	{
	    if(RPItems[i][Exists] == 1 && GetPlayerInterior(playerid) == RPItems[i][cInt] && GetPlayerVirtualWorld(playerid) == RPItems[i][cWorld])
	    {
		    dist = GetPlayerDistanceFromPoint(playerid, RPItems[i][cPosX],RPItems[i][cPosY],RPItems[i][cPosZ]);
			if(dist < closedist && dist < distance)
			{
				closedist = dist;
				closeid = i;
				atype = RP_TYPE_ITEM;
			}
		}
	}
	forLoop(i, RP_MAX_BAGS)
	{
	    if(RPBags[i][Exists] == 1 && GetPlayerInterior(playerid) == RPBags[i][cInt] && GetPlayerVirtualWorld(playerid) == RPBags[i][cWorld])
	    {
		    dist = GetPlayerDistanceFromPoint(playerid, RPBags[i][cPosX],RPBags[i][cPosY],RPBags[i][cPosZ]);
			if(dist < closedist && dist < distance)
			{
				closedist = dist;
				closeid = i;
				atype = RP_TYPE_BAGS;
			}
		}
	}
	return 1;
}

stock getRPCloseItems(playerid, Float:distance)
{
    new Float:dist, id = 0, mid, pstring[800], str[40];
    forLoop(oid, RP_MAX_ITEMS)
	{
		if(id >= SELECT_MENU_OPTIONS-3)break;
		if(RPItems[oid][Exists] == 1 && GetPlayerInterior(playerid) == RPItems[oid][cInt] &&
			GetPlayerVirtualWorld(playerid) == RPItems[oid][cWorld])
		{
		    dist = GetPlayerDistanceFromPoint(playerid, RPItems[oid][cPosX],RPItems[oid][cPosY],RPItems[oid][cPosZ]);
			if(dist < distance)
			{
			    mid = GetItemInfoID(RPItems[oid][Model]);
			    if(RPItemInfo[mid][Type] == WEAPON)
			    {
			        new type = GetWeaponTypeFromID(RPItemInfo[mid][ID]);
			        if(type == PISTOLS || type == RIFLE || type == RIFLE)
						format(str,sizeof str,"\n%s - %d ammo",RPItemInfo[mid][Name],RPItems[oid][Value]);
					else if(type == EXPLOSIVE)
							format(str,sizeof str,"\n%d %s(s)",RPItems[oid][Value],RPItemInfo[mid][Name]);
					else format(str,sizeof str,"\n%s",RPItemInfo[mid][Name]);
			    }
			    else if(RPItemInfo[mid][Type] == GAS_CAN || RPItemInfo[mid][Type] == BOTTLE)
			    	format(str,sizeof str,"\n%d/100 %s",RPItems[oid][Value],RPItemInfo[mid][Name]);
			    else if(RPItemInfo[mid][Type] == HEALTH_PACK)
			    	format(str,sizeof str,"\n%s +60HP",RPItemInfo[mid][Name]);
			    else format(str,sizeof str,"\n%s",RPItemInfo[mid][Name]);

			    strcat(pstring, str);
			    PlayerInfo[playerid][SelectMenuOption][id] = oid;
			    id++;
		    }
		}
	}
    PlayerInfo[playerid][SelectMenu] = THE_N_ITEMS_RP;
	ShowPlayerDialog(playerid, SELMENU, DIALOG_STYLE_LIST, "Looting items",pstring, "Select", "Cancel");
	return (id != 0);
}



stock RPGetCloseItems(playerid, Float:distance)
{
	new Float:dist, items;
	forLoop(i, RP_MAX_ITEMS)
	{
	    if(RPItems[i][Exists] == 1 && GetPlayerInterior(playerid) == RPItems[i][cInt] && GetPlayerVirtualWorld(playerid) == RPItems[i][cWorld])
	    {
		    dist = GetPlayerDistanceFromPoint(playerid, RPItems[i][cPosX],RPItems[i][cPosY],RPItems[i][cPosZ]);
			if(dist < distance)
			{
    			items++;
			}
		}
	}
	return items;
}

stock RPGetCloseBags(playerid, Float:distance)
{
	new Float:dist, items;
	forLoop(i, RP_MAX_BAGS)
	{
	    if(RPBags[i][Exists] == 1 && GetPlayerInterior(playerid) == RPBags[i][cInt] && GetPlayerVirtualWorld(playerid) == RPBags[i][cWorld])
	    {
		    dist = GetPlayerDistanceFromPoint(playerid, RPBags[i][cPosX],RPBags[i][cPosY],RPBags[i][cPosZ]);
			if(dist < distance)
			{
				items++;
			}
		}
	}
	return items;
}

stock RPGetCloseDeads(playerid, Float:distance)
{
	new Float:dist, items;
	forLoop(i, RP_MAX_DEADS)
	{
	    if(RPDeads[i][Exists] == 1 && GetPlayerInterior(playerid) == RPDeads[i][cInt] && GetPlayerVirtualWorld(playerid) == RPDeads[i][cWorld])
	    {
		    dist = GetPlayerDistanceFromPoint(playerid, RPDeads[i][cPosX],RPDeads[i][cPosY],RPDeads[i][cPosZ]);
			if(dist < distance)
			{
				items++;
			}
		}
	}
	return items;
}

stock RPDestroyItem(i)
{
	if(i == -1 || i >= RP_MAX_ITEMS) return 0;
	RPItems[i][Exists] = 0;
	RPItems[i][cGround] = 0;
	DestroyTheDynamicObject(RPItems[i][ObjectID]);
	DestroyTheDynamic3DTextLabel(RPItems[i][Label]);
	return 1;
}

stock RPCreateItem(model, value, Float: x, Float: y, Float: z, world, interior, sp = 0)
{
	new i = -1;
    forLoopV(u, 0, RP_MAX_ITEMS)
	{
	    if(RPItems[u][Exists] == 0)
	    {
			i = u;
			break;
	    }
	}
	if(i == -1)
	{
	    printf("ERROR: RP CreateItem no more spots left");
		return 0;
	}
	new id, Float:rx, Float:ry, Float:rz, str[120];

    RPItems[i][Exists] = 1;
	RPItems[i][Model] = model;
	RPItems[i][Value] = value;

	RPItems[i][cPosX] = floatround(x);
	RPItems[i][cPosY] = floatround(y);
	RPItems[i][cPosZ] = z;
	RPItems[i][cWorld] = world;
	RPItems[i][cInt] = interior;

	RPItems[i][cGround] = sp;
	
	id = GetItemInfoID(RPItems[i][Model]);
	rx = RPItemInfo[id][prX];
	ry = RPItemInfo[id][prY] == 361.0 ? random(360)+2.0 : RPItemInfo[id][prY];
	rz = RPItemInfo[id][prZ] == 361.0 ? random(360)+2.0 : RPItemInfo[id][prZ];

    RPItems[i][ObjectID] = CreateTheDynamicObject(RPItems[i][Model], x,y,z+RPItemInfo[id][offSet], rx, ry, rz, world,interior, -1);
    format(str,sizeof str,"{CCCCCC}Press '{33AA33}ALT{CCCCCC}' to pick up %s",RPItemInfo[id][Name]);
	RPItems[i][Label]=CreateDynamic3DTextLabel(str, 0xCCCCCCAA, x,y,z, 2,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,0, world,interior, -1, 100);

    //printf("CreateObject(%d, %f,%f,%f, %f,%f,%f);",RPItems[i][Model], x,y,z+RPItemInfo[id][offSet], rx, ry, rz);

	forLoop(u, MAX_PLAYERS)
	{
	    if(IsPlayerConnected(u) && GetPlayerVirtualWorld(u) == world && PlayerInfo[u][Spawned] == 1 && PlayerInfo[u][PlayerMode] == TRP)
		{
		    if(IsPlayerInRangeOfPoint(u, 50,x, y, z))
		    {
	    		Streamer_Update(u);
			}
    	}
    }
    return 1;
}
stock SaveRPItems()
{
    new File:fwhnd;
	fwhnd=fopen("/pangea/RP/Items.ini",io_write);
	new string[120];
	forLoop(i, RP_MAX_ITEMS)
	{
	    if(RPItems[i][Exists] == 1)
	    {
		    format(string,sizeof string,"%d|%d|%d|%d|%f|%d|%d|%d"
			,RPItems[i][Model]
			,RPItems[i][Value],RPItems[i][cPosX],RPItems[i][cPosY]
			,RPItems[i][cPosZ],RPItems[i][cWorld],RPItems[i][cInt]
			,RPItems[i][cGround]);
	    	fwrite(fwhnd,string);
			fwrite(fwhnd,"\r\n");
		}
	}
	fclose(fwhnd);
}
stock LoadRPItems()
{
	forLoop(i, RP_MAX_ITEMS)
	 	RPDestroyItem(i);

	new File:file_ptr, line[256], i=0, mid;
    file_ptr = fopen("/pangea/RP/Items.ini",filemode:io_read);
	if(!file_ptr) return 0;

	while(fread(file_ptr,line, sizeof(line)) > 0)
	{
    	sscanf(line,"p<|>ddddfddd"
		,RPItems[i][Model]
		,RPItems[i][Value],RPItems[i][cPosX],RPItems[i][cPosY]
		,RPItems[i][cPosZ],RPItems[i][cWorld],RPItems[i][cInt],RPItems[i][cGround]);

		//if(RPGetCloseItemsToPoint(RPItems[i][cPosX],RPItems[i][cPosY],RPItems[i][cPosZ],RPItems[i][cWorld],RPItems[i][cInt], 3) >= 4)
		//	continue;
		
		mid = GetItemInfoID(RPItems[i][Model]);
	    //if(RPItemInfo[mid][Type] == WEAPON && GetWeaponTypeFromID(RPItemInfo[mid][ID]) == EXPLOSIVE && RPItems[i][Value] == 0)
	    if(RPItemInfo[mid][Type] == WEAPON && RPItems[i][Value] == 0) continue;
		RPCreateItem(RPItems[i][Model], RPItems[i][Value], RPItems[i][cPosX]+0.1,RPItems[i][cPosY]+0.1,RPItems[i][cPosZ],RPItems[i][cWorld],RPItems[i][cInt],RPItems[i][cGround]);
		i++;
	}

	fclose(file_ptr);
 	printf("RP Items: %d items have been loaded.",i);
 	return 1;
}

CMD:rpnote(playerid,params[])
{
    if(PlayerInfo[playerid][PlayerMode] != TRP) return 0;
	if(IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid,blue,"{FF0000}Error:{FFFFFF} You cannot use this comamnd in any vehicle");
    if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING || GetPlayerState(playerid) == PLAYER_STATE_WASTED
		|| IsPlayerFalling(playerid) || IsPlayerSwimming(playerid))return SendClientMessage(playerid,blue,"{FF0000}Error:{FFFFFF} You cannot use this comamnd now.");
	new text[70];
	if (sscanf(params, "s[70]",text))
	   	return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /rpnote <text>");
	if(!IsValidRPNote(text))
	   	return SendClientMessage(playerid, red1, "ERROR:{FFFFFF} Don't use weird chars and too many numbers. Between 5 - 69 chars");
    RPCreateNote(playerid, text);
	return 1;
}


CMD:me(playerid,params[])
{
    if(PlayerInfo[playerid][PlayerMode] != TRP) return 0;
	if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING || GetPlayerState(playerid) == PLAYER_STATE_WASTED)
		return SendClientMessage(playerid,blue,"{FF0000}Error:{FFFFFF} You cannot use this comamnd now.");
	new text[120];
	if (sscanf(params, "s[70]",text)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /me <message>");
	if(!IsValidRPRadioText(text))
	   	return SendClientMessage(playerid, red1, "ERROR:{FFFFFF} Don't use weird chars and too many numbers. Between 2 - 69 chars");
    TalkMessage(25.0, playerid, "", text);
	return 1;
}

CMD:r(playerid,params[])
{
    if(PlayerInfo[playerid][PlayerMode] != TRP) return 0;
	if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING || GetPlayerState(playerid) == PLAYER_STATE_WASTED)
		return SendClientMessage(playerid,blue,"{FF0000}Error:{FFFFFF} You cannot use this comamnd now.");
	new text[120];
	if (sscanf(params, "s[70]",text)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /r <message>");
	if(!IsValidRPRadioText(text))
	   	return SendClientMessage(playerid, red1, "ERROR:{FFFFFF} Don't use weird chars and too many numbers. Between 2 - 69 chars");
    format(text,sizeof(text), "[Radio CH:%d] {FFFFFF}%s %s: %s",RPPlayerInfo[playerid][Freq], RPPlayerInfo[playerid][rpfName], RPPlayerInfo[playerid][rplName], text);
    SendClientMessage(playerid, yellow, text);
	forLoop(i, MAX_PLAYERS)
    {
        if(IsPlayerConnected(i) && i != playerid && PlayerInfo[i][PlayerMode] == TRP && PlayerInfo[i][Spawned] == 1)
        {
			if(RPPlayerInfo[i][Freq] == RPPlayerInfo[playerid][Freq])
			{
			    SendClientMessage(i, yellow, text);
			}
        }
    }
	return 1;
}

CMD:rchan(playerid,params[])
{
    if(PlayerInfo[playerid][PlayerMode] != TRP) return 0;
	if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING || GetPlayerState(playerid) == PLAYER_STATE_WASTED)
		return SendClientMessage(playerid,blue,"{FF0000}Error:{FFFFFF} You cannot use this comamnd now.");
	new chan;
	if(sscanf(params, "d",chan)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /rchan <channel>");
	if(chan < 5 || chan > 300)return SendClientMessage(playerid, red1, "ERROR:{FFFFFF} Channel must be between 5 - 300");
	RPPlayerInfo[playerid][Freq] = chan;
	SendClientMessage(playerid, green1, "Notice:{FFFFFF} Channel has been set.");
	return 1;
}

CMD:rpitem(playerid,params[])
{
	if(PlayerInfo[playerid][Level] >= 3) {
	    new type;
   		if (sscanf(params, "d",type))
   		{
   		    SendClientMessage(playerid, red1, "Usage:{FFFFFF} /rpitem <type>");
		   	return SendClientMessage(playerid, white, "Type: 0=food, 1=bottle,2=weapon,3=nothing,4=gas,5=veh fix,6=medkit,7=map");
		}
		if(type < 0 || type > 7 || type == 3)return SendClientMessage(playerid, red1, "Error:{FFFFFF} Wrong type id.");
        new id = -1, Float:x, Float:y, Float:z, infoID, model, value;
        forLoopV(u, 0, RP_MAX_ITEMS)
		{
		    if(RPItems[u][Exists] == 0)
		    {
				id = u;
				break;
		    }
		}
		if(id == -1)return SendClientMessage(playerid, red1, "Error:{FFFFFF} No more item spots left.");
	    forLoop(u, sizeof(RPItemInfo))
		{
		    if(RPItemInfo[u][Type] == type)
			{
			    infoID = u;
				break;
			}
		}
        if(type == BOTTLE || type == GAS_CAN)value = random(100);
        else value = RPItemInfo[infoID][Amount];
        if(type == WEAPON)
        {
			switch(random(15))//go 16 when you fix the goggles
			{
			    case 0:model = 333;//gold club
			    case 1:model = 334;//nite stick
			    case 2:model = 335;//knife
			    case 3:model = 336;//bat
			    case 4:model = 337;//shovel
			    case 5:model = 339;//katana
			    case 6:model = 342;//nade
			    case 7:model = 344;//molot
			    case 8:model = 348;//psitol
			    case 9:model = 349;//shotgun
			    case 10:model = 355;//ak
			    case 11:model = 356;//m4
			    case 12:model = 357;//rifle
			    case 13:model = 358;//snipe
			    case 14:model = 367;//camera
			    //case 15:model = 368;//goggles
			}
			forLoop(u, sizeof(RPItemInfo))
			{
			    if(RPItemInfo[u][Model] == model)
				{
				    infoID = u;
					break;
				}
			}
			value = RPItemInfo[infoID][Amount];
        }
        else if(type == FOOD)
        {
            switch(random(5))
			{
			    case 0:model = 1582;
			    case 1:model = 2866;
			    case 2:model = 2861;
			    case 3:model = 2663;
			    case 4:model = 2867;
			}
        }
        else if(type == BOTTLE)
        {
            switch(random(2))
			{
			    case 0:model = 1484;
			    case 1:model = 2958;
			}
        }
        else if(type == GAS_CAN) model = 1650;
        else if(type == VEH_REPAIR) model = 18633;
        else if(type == HEALTH_PACK) model = 1240;
        else if(type == RP_MAP) model = 19165;
        
		GetXYInFrontOfPlayer(playerid, x, y, z, 0.7);
		RPCreateItem(model, value, x, y, z-1.0,GetPlayerVirtualWorld(playerid),GetPlayerInterior(playerid), true);
        SendClientMessage(playerid, white, "Done.");
		return 1;
	} else return 0;
}

CMD:rpditem(playerid,params[]) {
	if(PlayerInfo[playerid][Level] >= 3) {
	    new id;
   		if (sscanf(params, "d",id))
		   	return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /rpditem <id>");
        if(id == -1 || id >= RP_MAX_ITEMS) return SendClientMessage(playerid, red1, "Error:{FFFFFF} Wrong id.");
        if(RPItems[id][Exists] == 0) return SendClientMessage(playerid, red1, "Error:{FFFFFF} ID doesn't exist.");
        RPDestroyItem(id);
        SendClientMessage(playerid, white, "Done.");
		return 1;
	} else return 0;
}

stock updateSelItem(playerid, mid, oid)
{
    PlayerTextDrawSetString(playerid,RPPlayerInfo[playerid][selItem], " ");
	if(RPPlayerInfo[playerid][SelectedItem] != -1)
	{
	    new str[70];
	    if(RPItemInfo[mid][Type] == GAS_CAN || RPItemInfo[mid][Type] == BOTTLE)
	    	format(str,sizeof str,"\n%d/100 %s",RPPlayerInfo[playerid][BagItemsValue][oid],RPItemInfo[mid][Name]);
	    else if(RPItemInfo[mid][Type] == HEALTH_PACK)
	    	format(str,sizeof str,"\n%s +60HP",RPItemInfo[mid][Name]);
	    else format(str,sizeof str,"\n%s",RPItemInfo[mid][Name]);
		PlayerTextDrawSetString(playerid,RPPlayerInfo[playerid][selItem], str);
	}
	else
	{
	    new str[70];
	 	new slot = GetWeaponSlot(GetPlayerWeapon(playerid));
	    if(GetPlayerWeapon(playerid) == RPPlayerInfo[playerid][selWeap][slot])
	    {
	        oid = RPPlayerInfo[playerid][selWeapID][slot];
	        mid = GetItemInfoID(RPPlayerInfo[playerid][BagItems][oid]);
	        if(RPItemInfo[mid][Type] == WEAPON)
		    {
		        new type = GetWeaponTypeFromID(RPItemInfo[mid][ID]);
		        if(type == PISTOLS || type == RIFLE)
					format(str,sizeof str,"\n%s - %d ammo",RPItemInfo[mid][Name],RPPlayerInfo[playerid][BagItemsValue][oid]);
				else if(type == EXPLOSIVE)
						format(str,sizeof str,"\n%d %s(s)",RPPlayerInfo[playerid][BagItemsValue][oid],RPItemInfo[mid][Name]);
				else format(str,sizeof str,"\n%s",RPItemInfo[mid][Name]);
				PlayerTextDrawSetString(playerid,RPPlayerInfo[playerid][selItem], str);
		    }else PlayerTextDrawSetString(playerid,RPPlayerInfo[playerid][selItem], " ");
	    }else PlayerTextDrawSetString(playerid,RPPlayerInfo[playerid][selItem], " ");
	}
	return 1;
}

stock GetWeaponTypeFromID(weapid)
{
	new type=0;
	switch(weapid)
	{
	    case 2..9: type = MELEE;
	    case 16..18: type = EXPLOSIVE;
	    case 22..24: type = PISTOLS;
	    case 25,30,31,33,34: type = RIFLE;
	    case 43: type = CAMERA;
	    case 46: type = PARACHUTE; // parachute
	    case 44: type = GOGGLES;
	}
	return type;
}

stock RPGetBackPackItems(playerid)
{
    new bagItems = 0;
    forLoop(i, RP_MAX_BAG_ITEMS)
		if(RPPlayerInfo[playerid][BagItems][i] != 0) bagItems++;
		
    if((RPPlayerInfo[playerid][BagType] == RP_BAG_SMALL && bagItems >= RP_BAG_SMALL_MAX) ||
		(RPPlayerInfo[playerid][BagType] == RP_BAG_BIG && bagItems >= RP_BAG_BIG_MAX))
	{
	    GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~r~BACKPACK FULL", 2000, 3);
	    return 0;
	}
	return 1;
}

stock RPGetClosestItem(playerid, Float:distance)
{
	new Float:dist, Float:closedist = 9999, closeid = -1;
	forLoop(i, RP_MAX_ITEMS)
	{
	    if(RPItems[i][Exists] == 1 && GetPlayerInterior(playerid) == RPItems[i][cInt] && GetPlayerVirtualWorld(playerid) == RPItems[i][cWorld])
	    {
		    dist = GetPlayerDistanceFromPoint(playerid, RPItems[i][cPosX],RPItems[i][cPosY],RPItems[i][cPosZ]);
			if(dist < closedist && dist < distance)
			{
				closedist = dist;
				closeid = i;
			}
		}
	}
	return closeid;
}

stock GetItemInfoID(modelid)
{
	new u;
    forLoop(i, sizeof(RPItemInfo))
	{
	    if(RPItemInfo[i][Model] == modelid)
		{
		    u = i;
			break;
		}
	}
	return u;
}

stock GetItemAttachInfoID(type)
{
	new u;
    forLoop(i, sizeof(RPItemAttachInfo))
	{
	    if(RPItemAttachInfo[i][Type] == type)
		{
		    u = i;
			break;
		}
	}
	return u;
}

stock RPGetClosestBag(playerid, Float:distance)
{
	new Float:dist, Float:closedist=9999, closeid = -1;
	forLoop(i, RP_MAX_BAGS)
	{
	    if(RPBags[i][Exists] == 1 && GetPlayerInterior(playerid) == RPBags[i][cInt] && GetPlayerVirtualWorld(playerid) == RPBags[i][cWorld])
	    {
		    dist = GetPlayerDistanceFromPoint(playerid, RPBags[i][cPosX],RPBags[i][cPosY],RPBags[i][cPosZ]);
			if(dist < closedist && dist < distance)
			{
				closedist = dist;
				closeid = i;
			}
		}
	}
	return closeid;
}


CMD:rpbag(playerid,params[]) {
	if(PlayerInfo[playerid][Level] >= 3) {
	    new type;
   		if (sscanf(params, "d",type))
   		{
   		    SendClientMessage(playerid, red1, "Usage:{FFFFFF} /rpbag <type>");
		   	return SendClientMessage(playerid, white, "Type: 0=small, 1=big");
		}
		if(type < 0 || type > 1)return SendClientMessage(playerid, red1, "Error:{FFFFFF} Wrong type id.");
        new i = -1;
        
        new model, id, Float:x, Float:y, Float:z,Float:rx, Float:ry, Float:rz
			,interior = GetPlayerInterior(playerid), world = GetPlayerVirtualWorld(playerid);
        
        forLoop(u, RP_MAX_BAGS)
		{
		    if(RPBags[u][Exists] == 0)
		    {
				i = u;
				break;
		    }
		}
		if(i == -1)return SendClientMessage(playerid, red1, "Error:{FFFFFF} No more bags left.");
		GetXYInFrontOfPlayer(playerid, x, y, z, 0.7);
		RPDestroyBag(i);
		RPBags[i][Exists] = 1;
		
		RPBags[i][cPosX] = floatround(x);
		RPBags[i][cPosY] = floatround(y);
		RPBags[i][cPosZ] = z-1.0;
		RPBags[i][cWorld] = world;
		RPBags[i][cInt] = interior;

	    RPBags[i][Type] = type;
	    forLoop(oid, RP_MAX_BAG_ITEMS)
		{
		    RPBags[i][BagItems][oid] = 0;
		    RPBags[i][BagItemsValue][oid] = 0;
		}

	    switch(RPBags[i][Type])
	    {
	        case RP_BAG_SMALL: model = 3026;
	        case RP_BAG_BIG: model = 1550;
	    }

	    id = GetItemInfoID(model);
		rx = RPItemInfo[id][prX];
		ry = RPItemInfo[id][prY] == 361.0 ? random(360)+2.0 : RPItemInfo[id][prY];
		rz = RPItemInfo[id][prZ] == 361.0 ? random(360)+2.0 : RPItemInfo[id][prZ];

		RPBags[i][Label]=CreateDynamic3DTextLabel("{CCCCCC}Press '{33AA33}ALT{CCCCCC}' to loot", 0xCCCCCCAA,
			x, y, RPBags[i][cPosZ]+0.3, 5,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,0, world,interior, -1, 100);
	    RPBags[i][Objects] = CreateTheDynamicObject(model, x,y,RPBags[i][cPosZ]+RPItemInfo[id][offSet], rx, ry, rz, world,interior, -1);
        SendClientMessage(playerid, white, "Done.");
		return 1;
	} else return 0;
}
stock RPDestroyBag(i)
{
    RPBags[i][Exists] = 0;
 	DestroyTheDynamicObject(RPBags[i][Objects]);
    DestroyTheDynamic3DTextLabel(RPBags[i][Label]);
}

stock RPPickUpBag(playerid, i)
{
	new model, id, Float:rx, Float:ry, Float:rz
	,items[RP_MAX_BAG_ITEMS],values[RP_MAX_BAG_ITEMS], bagtype;
    
	RPDestroyBag(i);
	RPBags[i][Exists] = 1;
	
	//placeging new bag at the same spot, no need to redo the whole thing
	new Float:x, Float:y, Float:z
		,interior = GetPlayerInterior(playerid)
		,world = GetPlayerVirtualWorld(playerid);
    GetXYInFrontOfPlayer(playerid, x, y, z, 0.7);

	RPBags[i][cPosX] = floatround(x);
	RPBags[i][cPosY] = floatround(y);
	RPBags[i][cPosZ] = z-1.0;
	RPBags[i][cWorld] = world;
	RPBags[i][cInt] = interior;

    bagtype = RPPlayerInfo[playerid][BagType];//player's bag
    RPPlayerInfo[playerid][BagType] = RPBags[i][Type];
    RPBags[i][Type] = bagtype; // making new bag with player's bag type
    
    new inc = 0;
    //saving the items of player so the go to bag on ground
    forLoop(oid, RP_MAX_BAG_ITEMS)
    {
		if(RPPlayerInfo[playerid][BagItems][oid] != 0)
		{
			items[inc] = RPPlayerInfo[playerid][BagItems][oid];
			values[inc] = RPPlayerInfo[playerid][BagItemsValue][oid];
			inc++;
		}
    }

	//everything in the picked  up bag goes to the player
    forLoop(oid, RP_MAX_BAG_ITEMS)
	{
	    RPPlayerInfo[playerid][BagItems][oid] = RPBags[i][BagItems][oid];
	    RPPlayerInfo[playerid][BagItemsValue][oid] = RPBags[i][BagItemsValue][oid];
	}
	
	//player's shit goes on ground
    forLoop(oid, RP_MAX_BAG_ITEMS)
	{
	    RPBags[i][BagItems][oid] = items[oid];
	    RPBags[i][BagItemsValue][oid] = values[oid];
	}

    ResetWeapons(playerid);
	RPPlayerInfo[playerid][SelectedItem] = -1;
    forLoop(a, 14)RPPlayerInfo[playerid][selWeap][a] = -1;
	RemovePlayerAttachedObjectEx(playerid, RP_ATTACHMENT_INDEX);
	forLoop(a, SELECT_MENU_OPTIONS)PlayerInfo[playerid][SelectMenuOption][a] = -1;

    switch(RPBags[i][Type])
    {
        case RP_BAG_SMALL: model = 3026;
        case RP_BAG_BIG: model = 1550;
    }
    ResetWeapons(playerid);
    id = GetItemInfoID(model);
	rx = RPItemInfo[id][prX];
	ry = RPItemInfo[id][prY] == 361.0 ? random(360)+2.0 : RPItemInfo[id][prY];
	rz = RPItemInfo[id][prZ] == 361.0 ? random(360)+2.0 : RPItemInfo[id][prZ];

	RPBags[i][Label]=CreateDynamic3DTextLabel("{CCCCCC}Press '{33AA33}ALT{CCCCCC}' to loot", 0xCCCCCCAA,
		RPBags[i][cPosX], RPBags[i][cPosY], RPBags[i][cPosZ]+0.3, 5,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,0, RPBags[i][cWorld], RPBags[i][cInt], -1, 100);
    RPBags[i][Objects] = CreateTheDynamicObject(model, RPBags[i][cPosX],RPBags[i][cPosY],RPBags[i][cPosZ]+RPItemInfo[id][offSet], rx, ry, rz, RPBags[i][cWorld], RPBags[i][cInt], -1);

	forLoop(u, MAX_PLAYERS)
	{
	    if(IsPlayerConnected(u) && PlayerInfo[u][Spawned] == 1 && PlayerInfo[u][PlayerMode] == TRP)
		{
		    if(PlayerInfo[u][SelectMenuOption][SELECT_MENU_OPTIONS-1] == i && PlayerInfo[playerid][SelectMenu] == THE_G_BAG_RP)
		    {
		        PlayerInfo[u][SelectMenu] = -1;
				forLoop(a, SELECT_MENU_OPTIONS)PlayerInfo[u][SelectMenuOption][a] = -1;
		        ShowPlayerDialog(playerid, 4511, DIALOG_STYLE_MSGBOX,"RP Bag", "{FF0000}Notice:{FFFFFF} Bag has been taken...", "Close", "");
		    }
		    if(IsPlayerInRangeOfPoint(u, 10, RPBags[i][cPosX], RPBags[i][cPosY], RPBags[i][cPosZ]))
		    {
	    		Streamer_Update(u);
			}
    	}
    }
    
    if(RPPlayerInfo[playerid][BagType] == RP_BAG_SMALL)
        SetPlayerAttachedObjectEx(playerid, 1, 3026, 1, -0.173001, -0.074997, -0.021999, -3.199918, -3.899974, -0.199999, 0.981999, 1.110000, 1.175999);
    else if(RPPlayerInfo[playerid][BagType] == RP_BAG_BIG)
        SetPlayerAttachedObjectEx(playerid, 1, 1550, 1, 0.025998, -0.203997, 0.000000, 178.000076, 121.799972, -0.499997, 1.000000, 1.000000, 1.000000);
}

stock RPGetClosestFuel(playerid, Float:distance)
{
	new Float:dist, Float:closedist=9999, closeid = -1;
	forLoop(i, RP_MAX_FUELS)
	{
	    if(RPFuels[i][Exists] == 1 && GetPlayerInterior(playerid) == RPFuels[i][cInt] && GetPlayerVirtualWorld(playerid) == RPFuels[i][cWorld])
	    {
	        if(RPFuels[i][Vehicle] == -1)
		    	dist = GetPlayerDistanceFromPoint(playerid, RPFuels[i][cPosX],RPFuels[i][cPosY],RPFuels[i][cPosZ]);
			else
			{
			    new Float:x, Float:y, Float:z, veh = RPGetVehiclerID(RPFuels[i][Vehicle]);
			    if(veh != -1)
			    {
					GetVehiclePos(RPVehicles[veh][ID], x, y, z);
				    dist = GetPlayerDistanceFromPoint(playerid, x, y, z);
			    }
			    else dist = 9999;
			}
			if(dist < closedist && dist < distance)
			{
				closedist = dist;
				closeid = i;
			}
		}
	}
	return closeid;
}

stock updateRPFuelSpot(i)
{
	new string[120];
	format(string, sizeof string, "{FFFFFF}Hold '{33AA33}N{FFFFFF}' to fuel up\n{CCCCCC}(ID:%d)",i);
	UpdateDynamic3DTextLabelText(RPFuels[i][Label], 0xFFFFFFAA, string);
}

stock RPDestroyFuel(i)
{
    RPFuels[i][Exists] = 0;
    RPFuels[i][Vehicle] = -1;
    DestroyTheDynamic3DTextLabel(RPFuels[i][Label]);
}

stock SaveRPFuels()
{
    new File:fwhnd;
	fwhnd=fopen("/pangea/RP/Fuels.ini",io_write);
	new string[256];
	forLoop(i, RP_MAX_FUELS)
	{
	    if(RPFuels[i][Exists] == 1)
	    {
		    format(string,sizeof string,"%d|%d|%d|%d|%d|%d"
			,RPFuels[i][Vehicle],RPFuels[i][cPosX],RPFuels[i][cPosY],RPFuels[i][cPosZ]
			,RPFuels[i][cWorld],RPFuels[i][cInt]);
	    	fwrite(fwhnd,string);
			fwrite(fwhnd,"\r\n");
		}
	}
	fclose(fwhnd);
}

stock LoadRPFuels()
{
	forLoop(i, RP_MAX_FUELS) RPDestroyFuel(i);
	new File:file_ptr, line[256], i;
    file_ptr = fopen("/pangea/RP/Fuels.ini",filemode:io_read);
	if(!file_ptr) return 0;

	while(fread(file_ptr,line) > 0)
	{
	    if(i >= RP_MAX_FUELS)break;
	    RPFuels[i][Exists] = 1;
    	sscanf(line,"p<|>dddddd"
		,RPFuels[i][Vehicle],RPFuels[i][cPosX],RPFuels[i][cPosY],RPFuels[i][cPosZ]
		,RPFuels[i][cWorld],RPFuels[i][cInt]);


		if(RPFuels[i][Vehicle] == -1)
	        RPFuels[i][Label]=CreateDynamic3DTextLabel(" ", 0xCCCCCCAA, RPFuels[i][cPosX], RPFuels[i][cPosY], RPFuels[i][cPosZ], 7,
				INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 0, RPFuels[i][cWorld],RPFuels[i][cInt], -1, 100);
		else
		{
		    new veh = RPGetVehiclerID(RPFuels[i][Vehicle]);
		    
			if(veh != -1)
				RPFuels[i][Label] = CreateDynamic3DTextLabel(" ", 0xCCCCCCAA, 0.0, 0.0, 1.0, 7,
					INVALID_PLAYER_ID, RPVehicles[veh][ID], 1, RPFuels[i][cWorld], RPFuels[i][cInt], -1, 100);
			else
			{
			    RPFuels[i][Exists] = 0;
			    continue;
			}
		}
		updateRPFuelSpot(i);
 		i++;
	}

	fclose(file_ptr);
 	printf("RP fuels: %d fuels have been loaded.",i);
 	return 1;
}

CMD:rpfuel(playerid,params[])
{
	if(PlayerInfo[playerid][Level] >= 3) {
	    new id;
   		if (sscanf(params, "d",id)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /rpfuel <car id> use -1 for ground");
   		
	    new i = -1;
        new Float:x, Float:y, Float:z
			,interior = GetPlayerInterior(playerid), world = GetPlayerVirtualWorld(playerid);

        forLoop(u, RP_MAX_FUELS)
		{
		    if(RPFuels[u][Exists] == 0)
		    {
				i = u;
				break;
		    }
		}
		if(i == -1)return SendClientMessage(playerid, red1, "Error:{FFFFFF} No more fuels left.");
		RPDestroyFuel(i);
		RPFuels[i][Exists] = 1;
		RPFuels[i][cWorld] = world;
		RPFuels[i][cInt] = interior;
		
		if(id == -1)
		{
			GetXYInFrontOfPlayer(playerid, x, y, z, 0.7);
			RPFuels[i][cPosX] = floatround(x);
			RPFuels[i][cPosY] = floatround(y);
			RPFuels[i][cPosZ] = floatround(z);

			RPFuels[i][Label]=CreateDynamic3DTextLabel(" ", 0xCCCCCCAA, RPFuels[i][cPosX], RPFuels[i][cPosY], RPFuels[i][cPosZ], 7,
				INVALID_PLAYER_ID,INVALID_VEHICLE_ID, 0, RPFuels[i][cWorld],RPFuels[i][cInt], -1, 100);
		}
		else if(RPGetVehicleID(id) != -1)
		{
			new veh = RPGetVehicleID(id);
		    RPFuels[i][Vehicle] = RPVehicles[veh][rID];
			RPFuels[i][Label]=CreateDynamic3DTextLabel(" ", 0xCCCCCCAA, 0.0, 0.0, 1.0, 7,
				INVALID_PLAYER_ID, RPVehicles[veh][ID], 1, RPFuels[i][cWorld],RPFuels[i][cInt], -1, 100);
		}
		updateRPFuelSpot(i);
        SendClientMessage(playerid, white, "Done.");
		return 1;
	} else return 0;
}

CMD:rpdfuel(playerid,params[])
{
	if(PlayerInfo[playerid][Level] >= 3) {
	    new id;
   		if (sscanf(params, "d",id)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /rpdfuel <id>");
		if(id < 0 || id >= RP_MAX_FUELS)return SendClientMessage(playerid, red1, "Error:{FFFFFF} Wrong fuel id.");
		if(RPFuels[id][Exists] == 0)return SendClientMessage(playerid, red1, "Error:{FFFFFF} Fuel id doesn't exist.");
        RPDestroyFuel(id);
        SendClientMessage(playerid, white, "Done.");
		return 1;
	} else return 0;
}

stock RPCreateBag(playerid, bagtype)
{
	new model, id, i = -1, order = -1, Float:x, Float:y, Float:z,Float:rx, Float:ry, Float:rz
	,interior = GetPlayerInterior(playerid), world = GetPlayerVirtualWorld(playerid);
	//highest order
    forLoop(d, RP_MAX_BAGS)
	{
	    if(RPBags[d][Exists] == 1 && RPBags[d][Order] > order)
	    {
	        order = RPBags[d][Order];
		}
	}
	if(order == -1)order = 0;
    forLoop(d, RP_MAX_BAGS)//if there is an empty spot
	{
	    if(RPBags[d][Exists] == 0)
	    {
	        i = d;
	        break;
	    }
	}
	if(i == -1)
	{
		order = RP_MAX_BAGS;
		forLoop(d, RP_MAX_BAGS)//the lowest order to destroy
		{
		    if(RPBags[d][Exists] == 1 && RPBags[d][Order] < order)
		    {
		        order = RPBags[d][Order];
		        i = d;
			}
		}

		forLoop(d, RP_MAX_BAGS)
		{
		    if(RPBags[d][Exists] == 1)
	    	{
		        RPBags[d][Order]--;
		    }
		}
		order = RP_MAX_BAGS-1;
	}
	
	RPDestroyBag(i);
	RPBags[i][Exists] = 1;
	RPBags[i][Order] = order+1;
	if(bagtype == 0)GetPlayerPos(playerid,x,y,z);
	else GetXYInFrontOfPlayer(playerid, x, y, z, 0.7);
	RPBags[i][cPosX] = floatround(x);
	RPBags[i][cPosY] = floatround(y);
	RPBags[i][cPosZ] = z-1.0;
	RPBags[i][cWorld] = world;
	RPBags[i][cInt] = interior;
    RPBags[i][Type] = RPPlayerInfo[playerid][BagType];

    forLoop(oid, RP_MAX_BAG_ITEMS)
    {
	    RPBags[i][BagItems][oid] = RPPlayerInfo[playerid][BagItems][oid];
	    RPBags[i][BagItemsValue][oid] = RPPlayerInfo[playerid][BagItemsValue][oid];
    }

    switch(RPPlayerInfo[playerid][BagType])
    {
        case RP_BAG_SMALL: model = 3026;
        case RP_BAG_BIG: model = 1550;
    }

    id = GetItemInfoID(model);
	rx = RPItemInfo[id][prX];
	ry = RPItemInfo[id][prY] == 361.0 ? random(360)+2.0 : RPItemInfo[id][prY];
	rz = RPItemInfo[id][prZ] == 361.0 ? random(360)+2.0 : RPItemInfo[id][prZ];

	RPBags[i][Label]=CreateDynamic3DTextLabel("{CCCCCC}Press '{33AA33}ALT{CCCCCC}' to loot", 0xCCCCCCAA,
		x, y, RPBags[i][cPosZ]+0.3, 5,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,0, world,interior, -1, 100);
    RPBags[i][Objects] = CreateTheDynamicObject(model, x,y,RPBags[i][cPosZ]+RPItemInfo[id][offSet], rx, ry, rz, world,interior, -1);

	forLoop(u, MAX_PLAYERS)
	{
	    if(IsPlayerConnected(u) && PlayerInfo[u][Spawned] == 1 && PlayerInfo[u][PlayerMode] == TRP && u != playerid)
		{
		    if(IsPlayerInRangeOfPoint(u, 10, x, y, z))
		    {
	    		Streamer_Update(u);
			}
    	}
    }
}

stock SaveRPBags()
{
    new File:fwhnd;
	fwhnd=fopen("/pangea/RP/Bags.ini",io_write);
	new string[556], str[20];
	forLoop(i, RP_MAX_BAGS)
	{
	    if(RPBags[i][Exists] == 1)
	    {
		    format(string,sizeof string,"");
			forLoop(b, RP_MAX_BAG_ITEMS)
			{
			    format(str,sizeof str,"|%d|%d",RPBags[i][BagItems][b],RPBags[i][BagItemsValue][b]);
		        strcat(string, str);
	        }
	        
		    format(string,sizeof string,"%d|%d|%d|%d|%f|%d|%d%s"
			,RPBags[i][Order],RPBags[i][Type],RPBags[i][cPosX],RPBags[i][cPosY]
			,RPBags[i][cPosZ],RPBags[i][cWorld],RPBags[i][cInt], string);
	    	fwrite(fwhnd,string);
			fwrite(fwhnd,"\r\n");
		}
	}
	fclose(fwhnd);
}
stock LoadRPBags()
{
	forLoop(i, RP_MAX_BAGS)
	{
	    RPDestroyBag(i);
	}

	new File:file_ptr;
	new line[556], string[120];
	new i, id, Float:x, Float:y, Float:z, interior, world, model
		,Float:rx, Float:ry, Float:rz, m[RP_MAX_BAG_ITEMS], v[RP_MAX_BAG_ITEMS];
    file_ptr = fopen("/pangea/RP/Bags.ini",filemode:io_read);
	if(!file_ptr) return 0;

	while(fread(file_ptr,line) > 0)
	{
	    if(i >= RP_MAX_BAGS)break;
	    RPBags[i][Exists] = 1;

		format(string,sizeof string,"");
		forLoop(b, RP_MAX_BAG_ITEMS) strcat(string, "dd");
		
		format(string,sizeof string,"p<|>ddddfdd%s",string);
	    
    	sscanf(line,string,RPBags[i][Order],RPBags[i][Type],RPBags[i][cPosX]
		,RPBags[i][cPosY],RPBags[i][cPosZ],RPBags[i][cWorld],RPBags[i][cInt]
		,m[0],v[0],m[1],v[1],m[2],v[2],m[3],v[3],m[4],v[4],m[5],v[5],m[6],v[6]
		,m[7],v[7],m[8],v[8],m[9],v[9],m[10],v[10],m[11],v[11],m[12],v[12],m[13]
		,v[13],m[14],v[14],m[15],v[15],m[16],v[16],m[17],v[17],m[18],v[18],m[19]
		,v[19],m[20],v[20],m[21],v[21],m[22],v[22],m[23],v[23],m[24],v[24],m[25]
		,v[25],m[26],v[26],m[27],v[27],m[28],v[28],m[29],v[29],m[30],v[30],m[31]
		,v[31],m[32],v[32],m[33],v[33],m[34],v[34],m[35],v[35],m[36],v[36],m[37]
		,v[37],m[38],v[38],m[39],v[39],m[40],v[40],m[41],v[41],m[42],v[42]);

        forLoop(b, RP_MAX_BAG_ITEMS)
        {
		    RPBags[i][BagItems][b] = m[b];
			RPBags[i][BagItemsValue][b] = v[b];
        }

        x = RPBags[i][cPosX];
		y = RPBags[i][cPosY];
		z = RPBags[i][cPosZ];

        interior = RPBags[i][cInt];
		world = RPBags[i][cWorld];

	    switch(RPBags[i][Type])
	    {
	        case RP_BAG_SMALL: model = 3026;
	        case RP_BAG_BIG: model = 1550;
	    }

	    id = GetItemInfoID(model);
		rx = RPItemInfo[id][prX];
		ry = RPItemInfo[id][prY] == 361.0 ? random(360)+2.0 : RPItemInfo[id][prY];
		rz = RPItemInfo[id][prZ] == 361.0 ? random(360)+2.0 : RPItemInfo[id][prZ];

        RPBags[i][Label]=CreateDynamic3DTextLabel("{CCCCCC}Press '{33AA33}ALT{CCCCCC}' to loot", 0xCCCCCCAA,
		x, y, z+0.3, 5,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,0, world,interior, -1, 100);
		
	    RPBags[i][Objects] = CreateTheDynamicObject(model, x,y,z+RPItemInfo[id][offSet], rx, ry, rz, world,interior, -1);
	    i++;
	}

	fclose(file_ptr);
 	printf("RP bags: %d bags have been loaded.",i);
 	return 1;
}

stock RPGetClosestDead(playerid, Float:distance)
{
	new Float:dist, Float:closedist=9999, closeid = -1;
	forLoop(i, RP_MAX_DEADS)
	{
	    if(RPDeads[i][Exists] == 1 && GetPlayerInterior(playerid) == RPDeads[i][cInt] && GetPlayerVirtualWorld(playerid) == RPDeads[i][cWorld])
	    {
		    dist = GetPlayerDistanceFromPoint(playerid, RPDeads[i][cPosX],RPDeads[i][cPosY],RPDeads[i][cPosZ]);
			if(dist < closedist && dist < distance)
			{
				closedist = dist;
				closeid = i;
			}
		}
	}
	return closeid;
}

stock RPDestroyDeadBody(i)
{
    RPDeads[i][Exists] = 0;
    RPDeads[i][Money] = 0;
 	DestroyTheDynamicObject(RPDeads[i][Objects]);
    DestroyTheDynamic3DTextLabel(RPDeads[i][Label]);
}

stock RPCreateDeadBody(playerid)
{
	if(GetThePlayerMoney(playerid) > 0)
	{
	    new i = -1, order = -1, Float:x, Float:y, Float:z,
			interior = GetPlayerInterior(playerid), world = GetPlayerVirtualWorld(playerid);
		forLoop(d, RP_MAX_DEADS)
		{
		    if(RPDeads[d][Exists] == 1 && RPDeads[d][Order] > order)
		    {
		        order = RPDeads[d][Order];
			}
		}
		if(order == -1)order = 0;
	    forLoop(d, RP_MAX_DEADS)//if there is an empty spot
		{
		    if(RPDeads[d][Exists] == 0)
		    {
		        i = d;
		        break;
		    }
		}
		if(i == -1)
		{
			order = RP_MAX_DEADS;
			forLoop(d, RP_MAX_DEADS)//the lowest order to destroy
			{
			    if(RPDeads[d][Exists] == 1 && RPDeads[d][Order] < order)
			    {
			        order = RPDeads[d][Order];
			        i = d;
				}
			}

			forLoop(d, RP_MAX_DEADS)
			{
			    if(RPDeads[d][Exists] == 1)
		    	{
			        RPDeads[d][Order]--;
			    }
			}
			order = RP_MAX_DEADS-1;
		}
		RPDestroyDeadBody(i);
		RPDeads[i][Exists] = 1;
		RPDeads[i][Order] = order+1;
		GetPlayerPos(playerid,x,y,z);
		RPDeads[i][cPosX] = floatround(x);
		RPDeads[i][cPosY] = floatround(y);
		RPDeads[i][cPosZ] = z-1.0;
		RPDeads[i][cWorld] = world;
		RPDeads[i][cInt] = interior;
		RPDeads[i][Money] = GetThePlayerMoney(playerid);

		RPDeads[i][Label]=CreateDynamic3DTextLabel("{CCCCCC}Press '{33AA33}ALT{CCCCCC}' to loot", 0xCCCCCCAA,
			x, y, RPDeads[i][cPosZ]+0.3, 5,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,0, world,interior, -1, 100);
	  	RPDeads[i][Objects] = CreateTheDynamicObject(2907, x, y, RPDeads[i][cPosZ], 0.000000, 178.000000, random(360), world,interior,-1);
	  	
	  	forLoop(u, MAX_PLAYERS)
		{
		    if(IsPlayerConnected(u) && PlayerInfo[u][Spawned] == 1 && PlayerInfo[u][PlayerMode] == TRP && u != playerid)
			{
			    if(IsPlayerInRangeOfPoint(u, 10, x, y, z))
			    {
		    		Streamer_Update(u);
				}
	    	}
	    }
  	}
  	
  	RPCreateBag(playerid, GetThePlayerMoney(playerid));

	RPPlayerInfo[playerid][isRepairing] = 0;
    RPPlayerInfo[playerid][isFueling] = 0;
    KillTimer(RPPlayerInfo[playerid][Timer]);
    
    /*SetPlayerPos(playerid, -2771.5818, 2188.2383, 85.9918);
    SetPlayerCameraPos(playerid, -2766.4375, 2160.2202, 87.3119);
	SetPlayerCameraLookAt(playerid, -2766.0850, 2159.2815, 87.3369);
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, playerid+3003);*/
    TextDrawHideForPlayer(playerid,RPInfo[DarkScreen]);
    GameTextForPlayer(playerid, "~n~ ~n~ ~n~ ~n~ ~r~You're dead", 5000, 3);
}

stock SaveRPDeads()
{
    new File:fwhnd;
	fwhnd=fopen("/pangea/RP/Deads.ini",io_write);
	new string[156];
	forLoop(i, RP_MAX_DEADS)
	{
	    if(RPDeads[i][Exists] == 1)
	    {
		    format(string,sizeof string,"%d|%d|%d|%d|%f|%d|%d"
			,RPDeads[i][Order],RPDeads[i][Money],RPDeads[i][cPosX]
			,RPDeads[i][cPosY],RPDeads[i][cPosZ],RPDeads[i][cWorld]
			,RPDeads[i][cInt]);
	    	fwrite(fwhnd,string);
			fwrite(fwhnd,"\r\n");
		}
	}
	fclose(fwhnd);
}
stock LoadRPDeads()
{
	forLoop(i, RP_MAX_DEADS)
	{
	    RPDestroyDeadBody(i);
	}

	new File:file_ptr;
	new line[156];
	new i, Float:x, Float:y, Float:z, interior, world;
    file_ptr = fopen("/pangea/RP/Deads.ini",filemode:io_read);
	if(!file_ptr) return 0;

	while(fread(file_ptr,line, sizeof(line)) > 0)
	{
	    if(i >= RP_MAX_DEADS)break;
	    RPDeads[i][Exists] = 1;
    	sscanf(line,"p<|>ddddfdd"
		,RPDeads[i][Order],RPDeads[i][Money],RPDeads[i][cPosX]
		,RPDeads[i][cPosY],RPDeads[i][cPosZ],RPDeads[i][cWorld]
		,RPDeads[i][cInt]);

		if(RPDeads[i][Money] == 0)
		{
		    RPDeads[i][Exists] = 0;
		    continue;
		}
        x = RPDeads[i][cPosX];
		y = RPDeads[i][cPosY];
		z = RPDeads[i][cPosZ];

        interior = RPDeads[i][cInt];
		world = RPDeads[i][cWorld];

        RPDeads[i][Label]=CreateDynamic3DTextLabel("{CCCCCC}Press '{33AA33}ALT{CCCCCC}' to loot", 0xCCCCCCAA,
			x, y, z+0.3, 3,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,0, world,interior, -1, 100);

        RPDeads[i][Objects] = CreateTheDynamicObject(2907, x, y, z, 0.000000, 178.000000, random(360),world,interior,-1);
	    i++;
	}

	fclose(file_ptr);
 	printf("RP Deads: %d bodies have been loaded.",i);
 	return 1;
}

stock RPDestroyNote(i)
{
    RPNotes[i][Exists] = 0;
 	DestroyTheDynamicObject(RPNotes[i][Object]);
    DestroyTheDynamic3DTextLabel(RPNotes[i][Label]);
}

stock RPCreateNote(playerid, note[])
{
    new i = -1, order = -1, Float:x, Float:y, Float:z,
		interior = GetPlayerInterior(playerid), world = GetPlayerVirtualWorld(playerid);
	forLoop(d, RP_MAX_NOTES)
	{
	    if(RPNotes[d][Exists] == 1 && RPNotes[d][Order] > order)
	    {
	        order = RPNotes[d][Order];
		}
	}
	if(order == -1)order = 0;
    forLoop(d, RP_MAX_NOTES)//if there is an empty spot
	{
	    if(RPNotes[d][Exists] == 0)
	    {
	        i = d;
	        break;
	    }
	}
	if(i == -1)
	{
		order = RP_MAX_NOTES;
		forLoop(d, RP_MAX_NOTES)//the lowest order to destroy
		{
		    if(RPNotes[d][Exists] == 1 && RPNotes[d][Order] < order)
		    {
		        order = RPNotes[d][Order];
		        i = d;
			}
		}

		forLoop(d, RP_MAX_NOTES)
		{
		    if(RPNotes[d][Exists] == 1)
	    	{
		        RPNotes[d][Order]--;
		    }
		}
		order = RP_MAX_NOTES-1;
	}
	RPDestroyNote(i);
	RPNotes[i][Exists] = 1;
	RPNotes[i][Order] = order+1;
	GetPlayerPos(playerid,x,y,z);
	RPNotes[i][cPosX] = floatround(x);
	RPNotes[i][cPosY] = floatround(y);
	RPNotes[i][cPosZ] = z-1.0;
	RPNotes[i][cWorld] = world;
	RPNotes[i][cInt] = interior;
	format(RPNotes[i][Note], 70, note);

	RPNotes[i][Label]=CreateDynamic3DTextLabel("{CCCCCC}Press '{33AA33}ALT{CCCCCC}' to read note", 0xCCCCCCAA,
		x, y, RPNotes[i][cPosZ]+0.2, 5,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,0, world,interior, -1, 100);
  	RPNotes[i][Object] = CreateTheDynamicObject(2646, x, y, RPNotes[i][cPosZ]+0.2, -90.0, 0.000000, random(360), world,interior,-1);

	forLoop(u, MAX_PLAYERS)
	{
	    if(IsPlayerConnected(u) && PlayerInfo[u][Spawned] == 1 && PlayerInfo[u][PlayerMode] == TRP)
		{
		    if(IsPlayerInRangeOfPoint(u, 10, x, y, z))
		    {
	    		Streamer_Update(u);
			}
    	}
    }
}

stock SaveRPNotes()
{
    new File:fwhnd;
	fwhnd=fopen("/pangea/RP/Notes.ini",io_write);
	new string[156];
	forLoop(i, RP_MAX_NOTES)
	{
	    if(RPNotes[i][Exists] == 1 && RPNotes[i][Order] > 0)
	    {
		    format(string,sizeof string,"%d|%d|%d|%f|%d|%d|%s"
			,RPNotes[i][Order],RPNotes[i][cPosX],RPNotes[i][cPosY]
			,RPNotes[i][cPosZ],RPNotes[i][cWorld],RPNotes[i][cInt]
			,RPNotes[i][Note]);
	    	fwrite(fwhnd,string);
			fwrite(fwhnd,"\r\n");
		}
	}
	fclose(fwhnd);
}
stock LoadRPNotes()
{
	forLoop(i, RP_MAX_NOTES)
	{
	    RPDestroyNote(i);
	}

	new File:file_ptr;
	new line[156];
	new i, Float:x, Float:y, Float:z, interior, world;
    file_ptr = fopen("/pangea/RP/Notes.ini",filemode:io_read);
	if(!file_ptr) return 0;

	while(fread(file_ptr,line, sizeof(line)) > 0)
	{
	    if(i >= RP_MAX_NOTES)break;
	    RPNotes[i][Exists] = 1;
    	sscanf(line,"p<|>dddfdds[70]"
		,RPNotes[i][Order],RPNotes[i][cPosX],RPNotes[i][cPosY]
		,RPNotes[i][cPosZ],RPNotes[i][cWorld],RPNotes[i][cInt]
		,RPNotes[i][Note]);

        x = RPNotes[i][cPosX];
		y = RPNotes[i][cPosY];
		z = RPNotes[i][cPosZ];

        interior = RPNotes[i][cInt];
		world = RPNotes[i][cWorld];

		RPNotes[i][Label]=CreateDynamic3DTextLabel("{CCCCCC}Press '{33AA33}ALT{CCCCCC}' to read note", 0xCCCCCCAA,
			x, y, RPNotes[i][cPosZ]+0.2, 5,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,0, world,interior, -1, 100);
	  	RPNotes[i][Object] = CreateTheDynamicObject(2646, x, y, z+0.2, -90.0, 0.000000, random(360), world,interior,-1);
	    i++;
	}

	fclose(file_ptr);
 	printf("RP Notes: %d notes have been loaded.",i);
 	return 1;
}

stock SaveRPVehicles()
{
    new File:fwhnd;
	fwhnd=fopen("/pangea/RP/Vehicles.ini",io_write);
	new string[556], str[20],Float:hp,Float:x,Float:y,Float:z,Float:ang;
	forLoop(i, RP_MAX_VEHICLES)
	{
	    if(RPVehicles[i][Exists] == 1)
	    {
	        GetVehicleHealth(RPVehicles[i][ID], hp);
	        GetVehicleZAngle(RPVehicles[i][ID], ang);
	        GetVehiclePos(RPVehicles[i][ID], x, y, z);
	        RPVehicles[i][cPosX] = floatround(x);
			RPVehicles[i][cPosY] = floatround(y);
			RPVehicles[i][cPosZ] = floatround(z);
			RPVehicles[i][cAngle] = floatround(ang);
	        RPVehicles[i][Health] = floatround(hp);
	        GetVehicleDamageStatus(RPVehicles[i][ID], RPVehicles[i][Panels],RPVehicles[i][Doors],RPVehicles[i][Lights],RPVehicles[i][Tires]);

			if(RPVehicles[i][rID] == 0)
			    RPVehicles[i][rID] = i+1;
	        
		    format(string,sizeof string,"");
			forLoop(b, RP_MAX_BAG_ITEMS)
			{
			    format(str,sizeof str,"|%d|%d",RPVehicles[i][BagItems][b],RPVehicles[i][BagItemsValue][b]);
		        strcat(string, str);
	        }
	        
		    format(string,sizeof string,"%s|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d%s"
			,RPVehicles[i][Plate],RPVehicles[i][Model],RPVehicles[i][rID],RPVehicles[i][Health]
	 		,RPVehicles[i][Fuel],RPVehicles[i][cPosX],RPVehicles[i][cPosY],RPVehicles[i][cPosZ]
	 		,RPVehicles[i][cAngle],RPVehicles[i][Panels],RPVehicles[i][Doors],RPVehicles[i][Lights]
			,RPVehicles[i][Tires],RPVehicles[i][Color][0],RPVehicles[i][Color][1],string);
	    	fwrite(fwhnd,string);
			fwrite(fwhnd,"\r\n");
		}
	}
	fclose(fwhnd);
}
stock LoadRPVehicles()
{
	forLoop(i, RP_MAX_VEHICLES)
	{
		RPVehicles[i][Exists] = 0;
	}

	new File:file_ptr;
	new line[556], string[120];
	new i, m[RP_MAX_BAG_ITEMS], v[RP_MAX_BAG_ITEMS];
    file_ptr = fopen("/pangea/RP/Vehicles.ini",filemode:io_read);
	if(!file_ptr) return 0;
	new loop_breaker;
	while(fread(file_ptr,line, sizeof(line)) > 0)
	{
	    if(breakLoop(++loop_breaker, "LoadRPVehicles"))break;

		format(string,sizeof string,"");
		forLoop(b, RP_MAX_BAG_ITEMS) strcat(string, "dd");
		format(string,sizeof string,"p<|>s[10]dddddddddddddd%s",string);
		
  		sscanf(line,string
 		,RPVehicles[i][Plate],RPVehicles[i][Model],RPVehicles[i][rID],RPVehicles[i][Health]
 		,RPVehicles[i][Fuel],RPVehicles[i][cPosX],RPVehicles[i][cPosY],RPVehicles[i][cPosZ]
 		,RPVehicles[i][cAngle],RPVehicles[i][Panels],RPVehicles[i][Doors],RPVehicles[i][Lights]
		,RPVehicles[i][Tires],RPVehicles[i][Color][0],RPVehicles[i][Color][1]
		,m[0],v[0],m[1],v[1],m[2],v[2],m[3],v[3],m[4],v[4],m[5],v[5],m[6],v[6]
		,m[7],v[7],m[8],v[8],m[9],v[9],m[10],v[10],m[11],v[11],m[12],v[12],m[13]
		,v[13],m[14],v[14],m[15],v[15],m[16],v[16],m[17],v[17],m[18],v[18],m[19]
		,v[19],m[20],v[20],m[21],v[21],m[22],v[22],m[23],v[23],m[24],v[24],m[25]
		,v[25],m[26],v[26],m[27],v[27],m[28],v[28],m[29],v[29],m[30],v[30],m[31]
		,v[31],m[32],v[32],m[33],v[33],m[34],v[34],m[35],v[35],m[36],v[36],m[37]
		,v[37],m[38],v[38],m[39],v[39],m[40],v[40],m[41],v[41],m[42],v[42]);

        forLoop(b, RP_MAX_BAG_ITEMS)
        {
		    RPVehicles[i][BagItems][b] = m[b];
			RPVehicles[i][BagItemsValue][b] = v[b];
        }

    	RPVehicles[i][Exists] = 1;
		RPVehicles[i][ID] = AddStaticVehicleEx(RPVehicles[i][Model], RPVehicles[i][cPosX],RPVehicles[i][cPosY],RPVehicles[i][cPosZ],RPVehicles[i][cAngle], RPVehicles[i][Color][0],RPVehicles[i][Color][1],999999999999999999999);

		SetVehicleVirtualWorld(RPVehicles[i][ID], W_RP);
    	SetVehicleHealth(RPVehicles[i][ID], RPVehicles[i][Health]);
    	SetVehicleNumberPlate(RPVehicles[i][ID], RPVehicles[i][Plate]);

    	SetVehicleEngineState(RPVehicles[i][ID], RPVehicles[i][Fuel] <= 0 ? false : true);

		UpdateVehicleDamageStatus(RPVehicles[i][ID], RPVehicles[i][Panels],RPVehicles[i][Doors],RPVehicles[i][Lights],RPVehicles[i][Tires]);
		i++;
	}

	fclose(file_ptr);
 	printf("RP Vehicles: %d vehicles have been loaded.",i);
 	return 1;
}


stock getRPVehicleItems(playerid, id)
{
    if(id < 0 || id >= RP_MAX_VEHICLES || RPVehicles[id][Exists] == 0)return false;
	new items = 0;
    forLoop(i, RP_MAX_BAG_ITEMS)
		if(RPVehicles[id][BagItems][i] != 0) items++;
	if(items != 0)
	{
	    new mid, pstring[800], str[40], cell = 0;

	    forLoop(i, RP_MAX_BAG_ITEMS)
	    {
			if(RPVehicles[id][BagItems][i] != 0)
			{
			    mid = GetItemInfoID(RPVehicles[id][BagItems][i]);
			    if(RPItemInfo[mid][Type] == WEAPON)
			    {
			        new type = GetWeaponTypeFromID(RPItemInfo[mid][ID]);
			        //if(RPVehicles[id][BagItemsValue][i] == 0 && type == EXPLOSIVE)
			        if(RPVehicles[id][BagItemsValue][i] == 0)
			        {
			            RPVehicles[id][BagItems][i] = 0;
			            continue;
			        }
			        if(type == PISTOLS || type == RIFLE || type == RIFLE)
						format(str,sizeof str,"\n%s - %d ammo",RPItemInfo[mid][Name],RPVehicles[id][BagItemsValue][i]);
					else if(type == EXPLOSIVE)
							format(str,sizeof str,"\n%d %s(s)",RPVehicles[id][BagItemsValue][i],RPItemInfo[mid][Name]);
					else format(str,sizeof str,"\n%s",RPItemInfo[mid][Name]);
			    }
			    else if(RPItemInfo[mid][Type] == GAS_CAN || RPItemInfo[mid][Type] == BOTTLE)
			    	format(str,sizeof str,"\n%d/100 %s",RPVehicles[id][BagItemsValue][i],RPItemInfo[mid][Name]);
			    else if(RPItemInfo[mid][Type] == HEALTH_PACK)
			    	format(str,sizeof str,"\n%s +60HP",RPItemInfo[mid][Name]);
			    else format(str,sizeof str,"\n%s",RPItemInfo[mid][Name]);

			    strcat(pstring, str);
			    PlayerInfo[playerid][SelectMenuOption][cell++] = i;
			}
		}
	    PlayerInfo[playerid][SelectMenu] = THE_V_BAG_RP;

        format(str,sizeof str, "Vehicle Items (%d/%d)",items,RPFindVehicleType(RPVehicles[id][Model]));
		ShowPlayerDialog(playerid, SELMENU, DIALOG_STYLE_LIST, str, pstring, "Select", "Cancel");
	}
	return (items != 0);
}


stock playerRPPlaceItemInVehicle(playerid, item, veh)
{
    if(veh < 0 || veh >= RP_MAX_VEHICLES || RPVehicles[veh][Exists] == 0)return false;
	new success = false;
    forLoop(i, RP_MAX_BAG_ITEMS)
    {
		if(RPVehicles[veh][BagItems][i] == 0)
		{
		    RPVehicles[veh][BagItems][i] = RPPlayerInfo[playerid][BagItems][item];
		    RPVehicles[veh][BagItemsValue][i] = RPPlayerInfo[playerid][BagItemsValue][item];
		    
		    RPPlayerInfo[playerid][BagItems][item] = 0;
		    RPPlayerInfo[playerid][BagItemsValue][item] = 0;
		    success = true;
		    break;
		}
	}
    return success;
}

stock RPGetVehicleItems(playerid, id)
{
    new items = 0;
    forLoop(i, RP_MAX_BAG_ITEMS)
		if(RPVehicles[id][BagItems][i] != 0) items++;
    if(items >= RPFindVehicleType(RPVehicles[id][Model]))
	{
	    GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~r~VEHICLE FULL", 2000, 3);
	    return 0;
	}
	return 1;
}


stock RPFindVehicleType(model)
{
	new u = 0;
    forLoop(i, sizeof(RP_med))
	{
	    if(RP_med[i] == model && u == 0)
		{
		    u = 20;
			break;
		}
	}
    forLoop(i, sizeof(RP_big))
	{
	    if(RP_big[i] == model && u == 0)
		{
		    u = 30;
			break;
		}
	}
    forLoop(i, sizeof(RP_huge))
	{
	    if(RP_huge[i] == model && u == 0)
		{
		    u = 40;
			break;
		}
	}
    forLoop(i, sizeof(RP_bic))
	{
	    if(RP_bic[i] == model && u == 0)
		{
		    u = 2;
			break;
		}
	}
    forLoop(i, sizeof(RP_small))
	{
	    if(RP_small[i] == model && u == 0)
		{
		    u = 5;
			break;
		}
	}
	return u;
}


stock RandomVehiclePlate()
{
	const len = 7, hyphenpos = 4;
	new plate[len+1];
	for (new i = 0; i < len; i++)
	{
		if (i + 1 == hyphenpos)
		{
		  plate[i] = '-';
		  continue;
		}
		if(random(2)) // letter or number?
		{ // letter
		  plate[i] = 'A' + random(26);
		}
		else
		{ // number
		  plate[i] = '0' + random(10);
		}
	}
	return plate;
}

stock RPGetVehicleID(vehicleid)
{
    forLoop(i, RP_MAX_VEHICLES)
	{
		if(RPVehicles[i][Exists] == 1 && RPVehicles[i][ID] == vehicleid)
	    {
	        return i;
	    }
    }
    return -1;
}

stock RPGetVehiclerID(ridida)
{
    forLoop(i, RP_MAX_VEHICLES)
	{
		if(RPVehicles[i][Exists] == 1 && RPVehicles[i][rID] == ridida)
	    {
	        return i;
	    }
    }
    return -1;
}

stock SetVehicleEngineState(vid, setstate)
{
     new engine,lights,alarm,doors,bonnet,boot,objective;
     GetVehicleParamsEx(vid,engine,lights,alarm,doors,bonnet,boot,objective);
	 if(setstate) SetVehicleParamsEx(vid,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);
	 else SetVehicleParamsEx(vid,VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective);
}

CMD:rpcar(playerid,params[]) {
	if(PlayerInfo[playerid][Level] >= 3) {
	    new model[50],color[2],car;
	    color[0]=-1,color[1]=-1;
   		if (sscanf(params, "s[50]DD",model,color[0],color[1])) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /rpcar <model id/name> <col1> <col2>");
		if(!IsNumericForID(model)) car = GetVehicleModelIDFromName(model); else car = strval(model);
		if(car < 400 || car > 611) return  SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} Invalid Vehicle ID");
		if(color[0] == -1) color[0] = random(126);
		if(color[1] == -1) color[1] = random(126);
	    new i,Float:X,Float:Y,Float:Z, Float:Angle, rid = 0;

	    forLoop(v, RP_MAX_VEHICLES)
		{
			if(RPVehicles[v][Exists] == 0)
		    {
		        i = v;
		        break;
		    }
	    }

	    forLoop(v, RP_MAX_VEHICLES)
		{
			if(RPVehicles[v][Exists] == 1 && RPVehicles[v][rID] > rid)
		    {
		        rid = RPVehicles[v][rID];
		    }
	    }

		GetPlayerPos(playerid, X,Y,Z);
		GetPlayerFacingAngle(playerid,Angle);
		RPVehicles[i][ID] = AddStaticVehicleEx(car, X,Y,Z, Angle, color[0], color[1],999999999999999);
		SetVehicleVirtualWorld(RPVehicles[i][ID],GetPlayerVirtualWorld(playerid));
		LinkVehicleToInterior(RPVehicles[i][ID],GetPlayerInterior(playerid));
		RPVehicles[i][Exists] = 1;
		RPVehicles[i][Model] = car;
		RPVehicles[i][rID] = (rid+1);
		if(!IsVehBicycle(RPVehicles[i][ID]))
		{
			RPVehicles[i][Health] = random(749)+250;
			RPVehicles[i][Fuel] = random(90)+10;
		}
		else
		{
			RPVehicles[i][Health] = 999;
			RPVehicles[i][Fuel] = 100;
		}
		RPVehicles[i][Color][0] = color[0];
		RPVehicles[i][Color][1] = color[1];
		RPVehicles[i][cPosX] = floatround(X);
		RPVehicles[i][cPosY] = floatround(Y);
		RPVehicles[i][cPosZ] = floatround(Z);
		RPVehicles[i][cAngle]= floatround(Angle);

		format(RPVehicles[i][Plate], 10, "%s", RandomVehiclePlate());
		SetVehicleNumberPlate(RPVehicles[i][ID], RPVehicles[i][Plate]);

	   	SetVehicleHealth(RPVehicles[i][ID], RPVehicles[i][Health]);
		PutPlayerInVehicle(playerid,RPVehicles[i][ID],0);
		return 1;
	} else return 0;
}

CMD:rpdcar(playerid,params[]) {
	if(PlayerInfo[playerid][Level] >= 3) {
	    if(!IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid, red1, "Error:{FFFFFF} You must be in the vehicle.");
   		if(RPGetVehicleID(GetPlayerVehicleID(playerid)) == -1)return SendClientMessage(playerid, red1, "Error:{FFFFFF} This isn't a RP vehicle.");
		new i = RPGetVehicleID(GetPlayerVehicleID(playerid));
		CarDeleter(GetPlayerVehicleID(playerid));
		RPVehicles[i][Exists] = 0;
		SendClientMessage(playerid,white,"Vehicle destroyed...");
		return 1;
	} else return 0;
}

CMD:rpcc(playerid,params[])
{
	new color[2];
	if (sscanf(params, "dd",color[0],color[1])) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /carcolor <col id> <col id>");
	if(!IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid, red1, "Error:{FFFFFF} You must be in the vehicle.");
   	if(RPGetVehicleID(GetPlayerVehicleID(playerid)) == -1)return SendClientMessage(playerid, red1, "Error:{FFFFFF} This isn't a RP vehicle.");
	new i = RPGetVehicleID(GetPlayerVehicleID(playerid));
	ChangeVehicleColor(GetPlayerVehicleID(playerid), color[0],color[1]);
	RPVehicles[i][Color][0] = color[0];
	RPVehicles[i][Color][1] = color[1];
	return 1;
}

stock SaveRPInteriors()
{
    new File:fwhnd;
	fwhnd=fopen("/pangea/RP/Interiors.ini",io_write);
	new string[80];
	forLoop(i, RP_MAX_INTERIORS)
	{
	    if(RPInterior[i][Exists])
	    {
		    format(string,sizeof string,"%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d"
			,RPInterior[i][iPosX],RPInterior[i][iPosY],RPInterior[i][iPosZ],RPInterior[i][iAngle],RPInterior[i][iInt],RPInterior[i][iWorld]
 			,RPInterior[i][oPosX],RPInterior[i][oPosY],RPInterior[i][oPosZ],RPInterior[i][oAngle],RPInterior[i][oInt],RPInterior[i][oWorld]
		 	,RPInterior[i][iE],RPInterior[i][oE]);
	    	fwrite(fwhnd,string);
			fwrite(fwhnd,"\r\n");
		}
	}
	fclose(fwhnd);
}
stock LoadRPInteriors()
{
	forLoop(i, RP_MAX_INTERIORS)
	{
		RPInterior[i][Exists] = 0;
		RPInterior[i][iE] = 0;
		RPInterior[i][oE] = 0;
	}

	new File:file_ptr;
	new line[556], str[120];
	new i;
    file_ptr = fopen("/pangea/RP/Interiors.ini",filemode:io_read);
	if(!file_ptr) return 0;

	new loop_breaker;
	while(fread(file_ptr,line, sizeof(line)) > 0)
	{
	    if(breakLoop(++loop_breaker, "LoadRPInteriors"))break;
	    RPInterior[i][Exists] = 1;
  		sscanf(line,"p<|>dddddddddddddd"
 		,RPInterior[i][iPosX],RPInterior[i][iPosY],RPInterior[i][iPosZ],RPInterior[i][iAngle],RPInterior[i][iInt],RPInterior[i][iWorld]
 		,RPInterior[i][oPosX],RPInterior[i][oPosY],RPInterior[i][oPosZ],RPInterior[i][oAngle],RPInterior[i][oInt],RPInterior[i][oWorld]
		,RPInterior[i][iE],RPInterior[i][oE]);
	    //RPInterior[i][iTXT]=CreateDynamic3DTextLabel("{CCCCCC}Press '{33FF33}~k~~VEHICLE_ENTER_EXIT~ {CCCCCC}' to exit", 0xCCCCCCAA, RPInterior[i][iPosX],RPInterior[i][iPosY],RPInterior[i][iPosZ], 4,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,0, RPInterior[i][iWorld], RPInterior[i][iInt], -1, 100);
	    //RPInterior[i][oTXT]=CreateDynamic3DTextLabel("{CCCCCC}Press '{33FF33}~k~~VEHICLE_ENTER_EXIT~ {CCCCCC}' to enter", 0xCCCCCCAA, RPInterior[i][oPosX],RPInterior[i][oPosY],RPInterior[i][oPosZ], 4,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,0, RPInterior[i][oWorld], RPInterior[i][oInt], -1, 100);
        if(RPInterior[i][iE] == 1)
		{
			format(str,sizeof str,"{FFFFFF}Press '{33AA33}ENTER{FFFFFF}' to exit\n{CCCCCC}(ID: %d)",i);
			RPInterior[i][iTXT]=CreateDynamic3DTextLabel(str, 0xCCCCCCAA, RPInterior[i][iPosX],RPInterior[i][iPosY],RPInterior[i][iPosZ], 6,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,0, RPInterior[i][iWorld], RPInterior[i][iInt], -1, 100);
	        RPInterior[i][iObj]=CreateTheDynamicObject(19134, RPInterior[i][iPosX],RPInterior[i][iPosY],RPInterior[i][iPosZ]-0.7, 0.00000, 180.00000, RPInterior[i][iAngle]+90.0,RPInterior[i][iWorld],RPInterior[i][iInt],-1);
		}
		if(RPInterior[i][oE] == 1)
		{
			format(str,sizeof str,"{FFFFFF}Press '{33AA33}ENTER{FFFFFF}' to enter\n{CCCCCC}(ID: %d)",i);
			RPInterior[i][oTXT]=CreateDynamic3DTextLabel(str, 0xCCCCCCAA, RPInterior[i][oPosX],RPInterior[i][oPosY],RPInterior[i][oPosZ], 6,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,0, RPInterior[i][oWorld], RPInterior[i][oInt], -1, 100);
	        RPInterior[i][oObj]=CreateTheDynamicObject(19134, RPInterior[i][oPosX],RPInterior[i][oPosY],RPInterior[i][oPosZ]-0.7, 0.00000, 180.00000, RPInterior[i][oAngle]+90.0,RPInterior[i][oWorld],RPInterior[i][oInt],-1);
        }
        i++;
	}

	fclose(file_ptr);
 	printf("RP Interiors: %d interiors have been loaded.",i);
 	return 1;
}

CMD:rpint(playerid,params[]) {
	if(PlayerInfo[playerid][Level] > 3)
	{
		new side;
		if (sscanf(params, "d", side))return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /createinterior <0=in/1=out>");
		RPCreateInterior(playerid, side);
		SendClientMessage(playerid,green1,"Notice:{FFFFFF} You have created an interior.");
		return 1;
	} else return 0;
}
CMD:rpeint(playerid,params[]) {
	if(PlayerInfo[playerid][Level] > 3)
	{
	    new string[128], intid, side;
		if (sscanf(params, "dd",intid, side))return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /editinterior <interior id> <0=in/1=out>");
		if(intid < 0 || intid >= RP_MAX_INTERIORS)return SendClientMessage(playerid, red1, "Error:{FFFFFF} Invalid interior ID.");
		if(RPInterior[intid][Exists] == 0)return SendClientMessage(playerid, red1, "Error:{FFFFFF} Interior doesn't exist.");
		RPEditInterior(playerid, intid, side);
		format(string, sizeof(string), "Notice:{FFFFFF} You have just edited interior(ID:%d).",intid);
		SendClientMessage(playerid,green1,string);
		return 1;
	} else return 0;
}
CMD:rpdint(playerid,params[]) {
	if(PlayerInfo[playerid][Level] > 3) {
	    new intid, string[128];
		if (sscanf(params, "d",intid)) return SendClientMessage(playerid, red1, "Usage:{FFFFFF} /destroyinterior <interior id> ");
        if(intid < 0 || intid >= RP_MAX_INTERIORS)return SendClientMessage(playerid, red1, "Error:{FFFFFF} Invalid interior ID.");
		if(RPInterior[intid][Exists] == 0)return SendClientMessage(playerid, red1, "Error:{FFFFFF} Interior doesn't exist.");
		RPDeleteInterior(intid);
		format(string, sizeof(string), "Notice:{FFFFFF} You have just destroyed interior(ID:%d).",intid);
		SendClientMessage(playerid,red1,string);
		return 1;
	} else return 0;
}

stock RPCreateInterior(playerid, side)
{
    new i;
    forLoop(u, RP_MAX_INTERIORS)
	{
		if(RPInterior[u][Exists] == 0)
		{
		    i = u;
			break;
		}
	}
	RPInterior[i][Exists] = 1;
    new Float:x,Float:y,Float:z, Float:ang, str[100];
	GetPlayerPos(playerid,x,y,z);
	GetPlayerFacingAngle(playerid, ang);
	if(side == 0)
	{
		RPInterior[i][iE] = 1;
		RPInterior[i][iPosX] = floatround(x);
		RPInterior[i][iPosY] = floatround(y);
		RPInterior[i][iPosZ] = floatround(z);
		RPInterior[i][iAngle]= floatround(ang);
		RPInterior[i][iInt] = GetPlayerInterior(playerid);
		RPInterior[i][iWorld] = i+3000;
		format(str,sizeof str,"{CCCCCC}(ID: %d)Press '{33FF33}ENTER{CCCCCC}' to exit",i);
		RPInterior[i][iTXT]=CreateDynamic3DTextLabel(str, 0xCCCCCCAA, RPInterior[i][iPosX],RPInterior[i][iPosY],RPInterior[i][iPosZ], 4,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,0, RPInterior[i][iWorld], RPInterior[i][iInt], -1, 100);
		RPInterior[i][iObj]=CreateTheDynamicObject(19134, RPInterior[i][iPosX],RPInterior[i][iPosY],RPInterior[i][iPosZ]-0.7, 0.00000, 180.00000, RPInterior[i][iAngle]+90.0,RPInterior[i][iWorld],RPInterior[i][iInt],-1);
	}
	else
	{
		RPInterior[i][oE] = 1;
	    RPInterior[i][oPosX] = floatround(x);
		RPInterior[i][oPosY] = floatround(y);
		RPInterior[i][oPosZ] = floatround(z);
		RPInterior[i][oAngle]= floatround(ang);
		RPInterior[i][oInt] = GetPlayerInterior(playerid);
		RPInterior[i][oWorld] = GetPlayerVirtualWorld(playerid);
		format(str,sizeof str,"{CCCCCC}(ID: %d)Press '{33FF33}ENTER{CCCCCC}' to enter",i);
		RPInterior[i][oTXT]=CreateDynamic3DTextLabel(str, 0xCCCCCCAA, RPInterior[i][oPosX],RPInterior[i][oPosY],RPInterior[i][oPosZ], 4,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,0, RPInterior[i][oWorld], RPInterior[i][oInt], -1, 100);
		RPInterior[i][oObj]=CreateTheDynamicObject(19134, RPInterior[i][oPosX],RPInterior[i][oPosY],RPInterior[i][oPosZ]-0.7, 0.00000, 180.00000, RPInterior[i][oAngle]+90.0,RPInterior[i][oWorld],RPInterior[i][oInt],-1);
	}
	SaveRPInteriors();
}
stock RPEditInterior(playerid, i, side)
{
    new Float:x,Float:y,Float:z, Float:ang, str[100];
	GetPlayerPos(playerid,x,y,z);
	GetPlayerFacingAngle(playerid, ang);
	if(side == 0)
	{
	    RPInterior[i][iPosX] = floatround(x);
		RPInterior[i][iPosY] = floatround(y);
		RPInterior[i][iPosZ] = floatround(z);
		RPInterior[i][iAngle]= floatround(ang);
		RPInterior[i][iInt] = GetPlayerInterior(playerid);
		RPInterior[i][iWorld] = i+3000;
	    format(str,sizeof str,"{CCCCCC}(ID: %d)Press '{33FF33}ENTER{CCCCCC}' to exit",i);
	    if(RPInterior[i][iE] == 1)
		{
			DestroyTheDynamic3DTextLabel(RPInterior[i][iTXT]);
			DestroyTheDynamicObject(RPInterior[i][iObj]);
		}
    	RPInterior[i][iE] = 1;
		RPInterior[i][iTXT]=CreateDynamic3DTextLabel(str, 0xCCCCCCAA, RPInterior[i][iPosX],RPInterior[i][iPosY],RPInterior[i][iPosZ], 4,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,0, RPInterior[i][iWorld], RPInterior[i][iInt], -1, 100);
		RPInterior[i][iObj]=CreateTheDynamicObject(19134, RPInterior[i][iPosX],RPInterior[i][iPosY],RPInterior[i][iPosZ]-0.7, 0.00000, 180.00000, RPInterior[i][iAngle]+90.0,RPInterior[i][iWorld],RPInterior[i][iInt],-1);
	}
	else
	{
	    RPInterior[i][oPosX] = floatround(x);
		RPInterior[i][oPosY] = floatround(y);
		RPInterior[i][oPosZ] = floatround(z);
		RPInterior[i][oAngle]= floatround(ang);
		RPInterior[i][oInt] = GetPlayerInterior(playerid);
		RPInterior[i][oWorld] = GetPlayerVirtualWorld(playerid);
		format(str,sizeof str,"{CCCCCC}(ID: %d)Press '{33FF33}ENTER{CCCCCC}' to enter",i);
	    if(RPInterior[i][oE] == 1)
		{
			DestroyTheDynamic3DTextLabel(RPInterior[i][oTXT]);
			DestroyTheDynamicObject(RPInterior[i][iObj]);
		}
    	RPInterior[i][oE] = 1;
		RPInterior[i][oTXT]=CreateDynamic3DTextLabel(str, 0xCCCCCCAA, RPInterior[i][oPosX],RPInterior[i][oPosY],RPInterior[i][oPosZ], 4,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,0, RPInterior[i][oWorld], RPInterior[i][oInt], -1, 100);
		RPInterior[i][oObj]=CreateTheDynamicObject(19134, RPInterior[i][oPosX],RPInterior[i][oPosY],RPInterior[i][oPosZ]-0.7, 0.00000, 180.00000, RPInterior[i][oAngle]+90.0,RPInterior[i][oWorld],RPInterior[i][oInt],-1);
	}
	SaveRPInteriors();
}
stock RPDeleteInterior(i)
{
    RPInterior[i][Exists] = 0;
    if(RPInterior[i][iE] == 1)
	{
		DestroyTheDynamic3DTextLabel(RPInterior[i][iTXT]);
		DestroyTheDynamicObject(RPInterior[i][iObj]);
	}
    if(RPInterior[i][oE] == 1)
	{
		DestroyTheDynamic3DTextLabel(RPInterior[i][oTXT]);
		DestroyTheDynamicObject(RPInterior[i][oObj]);
	}
    RPInterior[i][iE] = 0;
    RPInterior[i][oE] = 0;
	SaveRPInteriors();
}

//=====================[VW]=============================
stock createVWTexts(playerid)
{
	//tab class
	VWPlayerInfo[playerid][L_Class_Guns][VW_MEDIC] = CreatePlayerTextDraw(playerid, 433.749847, 260.814788, " ");
	PlayerTextDrawLetterSize(playerid, VWPlayerInfo[playerid][L_Class_Guns][VW_MEDIC], 0.137500, 0.972593);
	PlayerTextDrawAlignment(playerid, VWPlayerInfo[playerid][L_Class_Guns][VW_MEDIC], 1);
	PlayerTextDrawColor(playerid, VWPlayerInfo[playerid][L_Class_Guns][VW_MEDIC], -1);
	PlayerTextDrawSetShadow(playerid, VWPlayerInfo[playerid][L_Class_Guns][VW_MEDIC], 0);
	PlayerTextDrawSetOutline(playerid, VWPlayerInfo[playerid][L_Class_Guns][VW_MEDIC], 1);
	PlayerTextDrawBackgroundColor(playerid, VWPlayerInfo[playerid][L_Class_Guns][VW_MEDIC], 51);
	PlayerTextDrawFont(playerid, VWPlayerInfo[playerid][L_Class_Guns][VW_MEDIC], 2);
	PlayerTextDrawSetProportional(playerid, VWPlayerInfo[playerid][L_Class_Guns][VW_MEDIC], 1);

	VWPlayerInfo[playerid][L_Class_Guns][VW_SNIPER] = CreatePlayerTextDraw(playerid, 514.333496, 261.296264, " ");
	PlayerTextDrawLetterSize(playerid, VWPlayerInfo[playerid][L_Class_Guns][VW_SNIPER], 0.137500, 0.972593);
	PlayerTextDrawAlignment(playerid, VWPlayerInfo[playerid][L_Class_Guns][VW_SNIPER], 2);
	PlayerTextDrawColor(playerid, VWPlayerInfo[playerid][L_Class_Guns][VW_SNIPER], -1);
	PlayerTextDrawSetShadow(playerid, VWPlayerInfo[playerid][L_Class_Guns][VW_SNIPER], 0);
	PlayerTextDrawSetOutline(playerid, VWPlayerInfo[playerid][L_Class_Guns][VW_SNIPER], 1);
	PlayerTextDrawBackgroundColor(playerid, VWPlayerInfo[playerid][L_Class_Guns][VW_SNIPER], 51);
	PlayerTextDrawFont(playerid, VWPlayerInfo[playerid][L_Class_Guns][VW_SNIPER], 2);
	PlayerTextDrawSetProportional(playerid, VWPlayerInfo[playerid][L_Class_Guns][VW_SNIPER], 1);

	VWPlayerInfo[playerid][L_Class_Guns][VW_ENGINEER] = CreatePlayerTextDraw(playerid, 592.417114, 261.259277, " ");
	PlayerTextDrawLetterSize(playerid, VWPlayerInfo[playerid][L_Class_Guns][VW_ENGINEER], 0.137500, 0.972593);
	PlayerTextDrawAlignment(playerid, VWPlayerInfo[playerid][L_Class_Guns][VW_ENGINEER], 3);
	PlayerTextDrawColor(playerid, VWPlayerInfo[playerid][L_Class_Guns][VW_ENGINEER], -1);
	PlayerTextDrawSetShadow(playerid, VWPlayerInfo[playerid][L_Class_Guns][VW_ENGINEER], 0);
	PlayerTextDrawSetOutline(playerid, VWPlayerInfo[playerid][L_Class_Guns][VW_ENGINEER], 1);
	PlayerTextDrawBackgroundColor(playerid, VWPlayerInfo[playerid][L_Class_Guns][VW_ENGINEER], 51);
	PlayerTextDrawFont(playerid, VWPlayerInfo[playerid][L_Class_Guns][VW_ENGINEER], 2);
	PlayerTextDrawSetProportional(playerid, VWPlayerInfo[playerid][L_Class_Guns][VW_ENGINEER], 1);
	
	new Float:pic_start = 415.0;
	forLoop(id, VW_MAX_CLASSES)
	{
		VWPlayerInfo[playerid][L_Class_Pic][id]  = CreatePlayerTextDraw(playerid, pic_start, 165.0, " ");
		PlayerTextDrawFont(playerid, VWPlayerInfo[playerid][L_Class_Pic][id] , TEXT_DRAW_FONT_MODEL_PREVIEW);
		PlayerTextDrawColor(playerid, VWPlayerInfo[playerid][L_Class_Pic][id] , 0xFFFFFFFF);
		PlayerTextDrawBackgroundColor(playerid, VWPlayerInfo[playerid][L_Class_Pic][id] , 0x00000000);
		PlayerTextDrawTextSize(playerid, VWPlayerInfo[playerid][L_Class_Pic][id] , 80.0, 100.0);
		PlayerTextDrawSetPreviewModel(playerid, VWPlayerInfo[playerid][L_Class_Pic][id] , 123);
		PlayerTextDrawSetPreviewRot(playerid, VWPlayerInfo[playerid][L_Class_Pic][id] , 1, 1, 0, 1);
		pic_start+= 60.0;
	}
	
	//tab class end
	
	VWPlayerInfo[playerid][L_Spawn_In] = CreatePlayerTextDraw(playerid, 582.083251, 317.851928, "spawn in 99");
	PlayerTextDrawLetterSize(playerid, VWPlayerInfo[playerid][L_Spawn_In], 0.137916, 1.610370);
	PlayerTextDrawTextSize(playerid, VWPlayerInfo[playerid][L_Spawn_In], 607.500000, 40.444442);
	PlayerTextDrawAlignment(playerid, VWPlayerInfo[playerid][L_Spawn_In], 2);
	PlayerTextDrawColor(playerid, VWPlayerInfo[playerid][L_Spawn_In], -1);
	PlayerTextDrawUseBox(playerid, VWPlayerInfo[playerid][L_Spawn_In], true);
	PlayerTextDrawBoxColor(playerid, VWPlayerInfo[playerid][L_Spawn_In], -1061109505);
	PlayerTextDrawSetShadow(playerid, VWPlayerInfo[playerid][L_Spawn_In], 0);
	PlayerTextDrawSetOutline(playerid, VWPlayerInfo[playerid][L_Spawn_In], 1);
	PlayerTextDrawBackgroundColor(playerid, VWPlayerInfo[playerid][L_Spawn_In], 51);
	PlayerTextDrawFont(playerid, VWPlayerInfo[playerid][L_Spawn_In], 2);
	PlayerTextDrawSetProportional(playerid, VWPlayerInfo[playerid][L_Spawn_In], 1);

	VWPlayerInfo[playerid][L_Expl] = CreatePlayerTextDraw(playerid, 426.249938, 317.333374, " ");
	PlayerTextDrawLetterSize(playerid, VWPlayerInfo[playerid][L_Expl], 0.152914, 1.646666);
	PlayerTextDrawTextSize(playerid, VWPlayerInfo[playerid][L_Expl], 556.667053, -41.481475);
	PlayerTextDrawAlignment(playerid, VWPlayerInfo[playerid][L_Expl], 1);
	PlayerTextDrawColor(playerid, VWPlayerInfo[playerid][L_Expl], -1);
	PlayerTextDrawUseBox(playerid, VWPlayerInfo[playerid][L_Expl], true);
	PlayerTextDrawBoxColor(playerid, VWPlayerInfo[playerid][L_Expl], 102);
	PlayerTextDrawSetShadow(playerid, VWPlayerInfo[playerid][L_Expl], 0);
	PlayerTextDrawSetOutline(playerid, VWPlayerInfo[playerid][L_Expl], 1);
	PlayerTextDrawBackgroundColor(playerid, VWPlayerInfo[playerid][L_Expl], 51);
	PlayerTextDrawFont(playerid, VWPlayerInfo[playerid][L_Expl], 2);
	PlayerTextDrawSetProportional(playerid, VWPlayerInfo[playerid][L_Expl], 1);
	
	VWPlayerInfo[playerid][R_Name] = CreatePlayerTextDraw(playerid, 500.416564, 3.629614, " ");
	PlayerTextDrawLetterSize(playerid, VWPlayerInfo[playerid][R_Name], 0.115833, 1.537778);
	PlayerTextDrawAlignment(playerid, VWPlayerInfo[playerid][R_Name], 1);
	PlayerTextDrawColor(playerid, VWPlayerInfo[playerid][R_Name], -1);
	PlayerTextDrawSetShadow(playerid, VWPlayerInfo[playerid][R_Name], 0);
	PlayerTextDrawSetOutline(playerid, VWPlayerInfo[playerid][R_Name], 1);
	PlayerTextDrawBackgroundColor(playerid, VWPlayerInfo[playerid][R_Name], 51);
	PlayerTextDrawFont(playerid, VWPlayerInfo[playerid][R_Name], 2);
	PlayerTextDrawSetProportional(playerid, VWPlayerInfo[playerid][R_Name], 1);

	VWPlayerInfo[playerid][R_Score] = CreatePlayerTextDraw(playerid, 605.166564, 3.592577, " ");
	PlayerTextDrawLetterSize(playerid, VWPlayerInfo[playerid][R_Score], 0.115833, 1.537778);
	PlayerTextDrawAlignment(playerid, VWPlayerInfo[playerid][R_Score], 3);
	PlayerTextDrawColor(playerid, VWPlayerInfo[playerid][R_Score], -1);
	PlayerTextDrawSetShadow(playerid, VWPlayerInfo[playerid][R_Score], 0);
	PlayerTextDrawSetOutline(playerid, VWPlayerInfo[playerid][R_Score], 1);
	PlayerTextDrawBackgroundColor(playerid, VWPlayerInfo[playerid][R_Score], 51);
	PlayerTextDrawFont(playerid, VWPlayerInfo[playerid][R_Score], 2);
	PlayerTextDrawSetProportional(playerid, VWPlayerInfo[playerid][R_Score], 1);

	VWPlayerInfo[playerid][P_Score] = CreatePlayerTextDraw(playerid, 323.749969, 424.148132, " ");
	PlayerTextDrawLetterSize(playerid, VWPlayerInfo[playerid][P_Score], 0.219583, 1.522221);
	PlayerTextDrawAlignment(playerid, VWPlayerInfo[playerid][P_Score], 2);
	PlayerTextDrawColor(playerid, VWPlayerInfo[playerid][P_Score], -1);
	PlayerTextDrawSetShadow(playerid, VWPlayerInfo[playerid][P_Score], 0);
	PlayerTextDrawSetOutline(playerid, VWPlayerInfo[playerid][P_Score], 1);
	PlayerTextDrawBackgroundColor(playerid, VWPlayerInfo[playerid][P_Score], 51);
	PlayerTextDrawFont(playerid, VWPlayerInfo[playerid][P_Score], 2);
	PlayerTextDrawSetProportional(playerid, VWPlayerInfo[playerid][P_Score], 1);

	VWCreatePlayerWeapsSelect(playerid);
}
stock destroyVWTexts(playerid)
{
	PlayerTextDrawDestroy(playerid, VWPlayerInfo[playerid][R_Name]);
	PlayerTextDrawDestroy(playerid, VWPlayerInfo[playerid][R_Score]);
	PlayerTextDrawDestroy(playerid, VWPlayerInfo[playerid][P_Score]);
	PlayerTextDrawDestroy(playerid, VWPlayerInfo[playerid][L_Expl]);
	PlayerTextDrawDestroy(playerid, VWPlayerInfo[playerid][L_Spawn_In]);
    forLoop(id, VW_MAX_CLASSES)
    {
        PlayerTextDrawDestroy(playerid,VWPlayerInfo[playerid][L_Class_Pic][id]);
        PlayerTextDrawDestroy(playerid,VWPlayerInfo[playerid][L_Class_Guns][id]);
    }
    forLoop(id, VW_MAX_WEAPS)
    {
        PlayerTextDrawDestroy(playerid,VWPlayerInfo[playerid][L_Weaps_Name][id]);
        PlayerTextDrawDestroy(playerid,VWPlayerInfo[playerid][L_Weaps_Ammo][id]);
    }
}
stock VWCreatePlayerWeapsSelect(playerid)
{
	new Float: start = 171.1;
    forLoop(id, VW_MAX_WEAPS)
    {
	    VWPlayerInfo[playerid][L_Weaps_Name][id] = CreatePlayerTextDraw(playerid, 472.500091, start, "Flame Thrower");
		PlayerTextDrawLetterSize(playerid, VWPlayerInfo[playerid][L_Weaps_Name][id], 0.143749, 1.548148);
		PlayerTextDrawAlignment(playerid, VWPlayerInfo[playerid][L_Weaps_Name][id], 1);
		PlayerTextDrawColor(playerid, VWPlayerInfo[playerid][L_Weaps_Name][id], -1);
		PlayerTextDrawSetShadow(playerid, VWPlayerInfo[playerid][L_Weaps_Name][id], 0);
		PlayerTextDrawSetOutline(playerid, VWPlayerInfo[playerid][L_Weaps_Name][id], 1);
		PlayerTextDrawBackgroundColor(playerid, VWPlayerInfo[playerid][L_Weaps_Name][id], 51);
		PlayerTextDrawFont(playerid, VWPlayerInfo[playerid][L_Weaps_Name][id], 2);
		PlayerTextDrawSetProportional(playerid, VWPlayerInfo[playerid][L_Weaps_Name][id], 1);

		VWPlayerInfo[playerid][L_Weaps_Ammo][id] = CreatePlayerTextDraw(playerid, 583.083312, start, "Ammo: ");
		PlayerTextDrawLetterSize(playerid, VWPlayerInfo[playerid][L_Weaps_Ammo][id], 0.143749, 1.548148);
		PlayerTextDrawAlignment(playerid, VWPlayerInfo[playerid][L_Weaps_Ammo][id], 3);
		PlayerTextDrawColor(playerid, VWPlayerInfo[playerid][L_Weaps_Ammo][id], -1);
		PlayerTextDrawSetShadow(playerid, VWPlayerInfo[playerid][L_Weaps_Ammo][id], 0);
		PlayerTextDrawSetOutline(playerid, VWPlayerInfo[playerid][L_Weaps_Ammo][id], 1);
		PlayerTextDrawBackgroundColor(playerid, VWPlayerInfo[playerid][L_Weaps_Ammo][id], 51);
		PlayerTextDrawFont(playerid, VWPlayerInfo[playerid][L_Weaps_Ammo][id], 2);
		PlayerTextDrawSetProportional(playerid, VWPlayerInfo[playerid][L_Weaps_Ammo][id], 1);

		start += 40.1;
	}
}
stock VWCreateWeapsSelect()
{
	new Float: arrow_start = 165.0, Float: type_start = 156.0;
    forLoop(id, VW_MAX_WEAPS)
    {
	    VWInfo[L_Weaps_Type][id] = TextDrawCreate(539.750061, type_start, VW_WeapTypeNames[id]);
		TextDrawLetterSize(VWInfo[L_Weaps_Type][id], 0.143749, 1.548148);
		TextDrawAlignment(VWInfo[L_Weaps_Type][id], 2);
		TextDrawColor(VWInfo[L_Weaps_Type][id], -1);
		TextDrawSetShadow(VWInfo[L_Weaps_Type][id], 0);
		TextDrawSetOutline(VWInfo[L_Weaps_Type][id], 1);
		TextDrawBackgroundColor(VWInfo[L_Weaps_Type][id], 51);
		TextDrawFont(VWInfo[L_Weaps_Type][id], 2);
		TextDrawSetProportional(VWInfo[L_Weaps_Type][id], 1);

		VWInfo[L_Weaps_Left][id] = TextDrawCreate(427.916687, arrow_start, " <");
		TextDrawLetterSize(VWInfo[L_Weaps_Left][id], 0.205833, 1.859259);
		TextDrawTextSize(VWInfo[L_Weaps_Left][id], 441.250091, 16.0);
		TextDrawAlignment(VWInfo[L_Weaps_Left][id], 1);
		TextDrawColor(VWInfo[L_Weaps_Left][id], -1);
		TextDrawUseBox(VWInfo[L_Weaps_Left][id], true);
		TextDrawBoxColor(VWInfo[L_Weaps_Left][id], -2139062017);
		TextDrawSetShadow(VWInfo[L_Weaps_Left][id], 0);
		TextDrawSetOutline(VWInfo[L_Weaps_Left][id], 1);
		TextDrawBackgroundColor(VWInfo[L_Weaps_Left][id], 51);
		TextDrawFont(VWInfo[L_Weaps_Left][id], 2);
		TextDrawSetProportional(VWInfo[L_Weaps_Left][id], 1);
		TextDrawSetSelectable(VWInfo[L_Weaps_Left][id], true);

		VWInfo[L_Weaps_Right][id] = TextDrawCreate(586.833312, arrow_start, " >");
		TextDrawLetterSize(VWInfo[L_Weaps_Right][id], 0.205833, 1.859259);
		TextDrawTextSize(VWInfo[L_Weaps_Right][id], 600.000183, 16.0);
		TextDrawAlignment(VWInfo[L_Weaps_Right][id], 1);
		TextDrawColor(VWInfo[L_Weaps_Right][id], -1);
		TextDrawUseBox(VWInfo[L_Weaps_Right][id], true);
		TextDrawBoxColor(VWInfo[L_Weaps_Right][id], -2139062017);
		TextDrawSetShadow(VWInfo[L_Weaps_Right][id], 0);
		TextDrawSetOutline(VWInfo[L_Weaps_Right][id], 1);
		TextDrawBackgroundColor(VWInfo[L_Weaps_Right][id], 51);
		TextDrawFont(VWInfo[L_Weaps_Right][id], 2);
		TextDrawSetProportional(VWInfo[L_Weaps_Right][id], 1);
		TextDrawSetSelectable(VWInfo[L_Weaps_Right][id], true);

		type_start += 39.5;
		arrow_start += 40.0;
	}

	new model, Float: x, Float:y, Float: size_x, Float:size_y, Float:rot[4];
	forLoop(id, VW_MAX_WEAPS_STATS)
	{
		model = VWWeaponStats[id][2];
		x = VWWeaponCoords[id][0];
		y = VWWeaponCoords[id][1];
		size_x = VWWeaponCoords[id][2];
		size_y = VWWeaponCoords[id][3];
		rot[0] = VWWeaponCoords[id][4];
		rot[1] = VWWeaponCoords[id][5];
		rot[2] = VWWeaponCoords[id][6];
		rot[3] = VWWeaponCoords[id][7];

	    VWInfo[L_Weaps_Img][id] = TextDrawCreate(x, y, " ");
		TextDrawFont(VWInfo[L_Weaps_Img][id], TEXT_DRAW_FONT_MODEL_PREVIEW);
		TextDrawColor(VWInfo[L_Weaps_Img][id], 0xFFFFFFFF);
		TextDrawBackgroundColor(VWInfo[L_Weaps_Img][id], 0x00000000);
		TextDrawTextSize(VWInfo[L_Weaps_Img][id], size_x, size_y);
		TextDrawSetPreviewModel(VWInfo[L_Weaps_Img][id], model);
		TextDrawSetPreviewRot(VWInfo[L_Weaps_Img][id], rot[0],rot[1],rot[2],rot[3]);
	}
}
stock VWCreateDeploySelect()
{
	new Float: start = 161.3, Float:name_start = 168.0;
    forLoop(id, VW_MAX_OBJECTIVES_TXT)
    {
        VWInfo[L_Deploy_BG][id] = TextDrawCreate(428.333404, start, "_");
		TextDrawLetterSize(VWInfo[L_Deploy_BG][id], 0.443333, 3.528887);
		TextDrawTextSize(VWInfo[L_Deploy_BG][id], 599.583435, 30.0);
		TextDrawAlignment(VWInfo[L_Deploy_BG][id], 1);
		TextDrawColor(VWInfo[L_Deploy_BG][id], -1);
		TextDrawUseBox(VWInfo[L_Deploy_BG][id], true);
		TextDrawBoxColor(VWInfo[L_Deploy_BG][id], 0x00000033);
		TextDrawSetShadow(VWInfo[L_Deploy_BG][id], 0);
		TextDrawSetOutline(VWInfo[L_Deploy_BG][id], 1);
		TextDrawBackgroundColor(VWInfo[L_Deploy_BG][id], 51);
		TextDrawFont(VWInfo[L_Deploy_BG][id], 2);
		TextDrawSetProportional(VWInfo[L_Deploy_BG][id], 1);
		TextDrawSetSelectable(VWInfo[L_Deploy_BG][id], true);
		
		VWInfo[L_Deploy_BG_A][id] = TextDrawCreate(428.333404, start, "_");
		TextDrawLetterSize(VWInfo[L_Deploy_BG_A][id], 0.443333, 3.528887);
		TextDrawTextSize(VWInfo[L_Deploy_BG_A][id], 599.583435, 30.0);
		TextDrawAlignment(VWInfo[L_Deploy_BG_A][id], 1);
		TextDrawColor(VWInfo[L_Deploy_BG_A][id], -1);
		TextDrawUseBox(VWInfo[L_Deploy_BG_A][id], true);
		TextDrawBoxColor(VWInfo[L_Deploy_BG_A][id], 0xffffff66);
		TextDrawSetShadow(VWInfo[L_Deploy_BG_A][id], 0);
		TextDrawSetOutline(VWInfo[L_Deploy_BG_A][id], 1);
		TextDrawBackgroundColor(VWInfo[L_Deploy_BG_A][id], 51);
		TextDrawFont(VWInfo[L_Deploy_BG_A][id], 2);
		TextDrawSetProportional(VWInfo[L_Deploy_BG_A][id], 1);

		VWInfo[L_Deploy_Name][id] = TextDrawCreate(511.666717, name_start, " ");
		TextDrawLetterSize(VWInfo[L_Deploy_Name][id], 0.152916, 1.807405);
		TextDrawAlignment(VWInfo[L_Deploy_Name][id], 2);
		TextDrawColor(VWInfo[L_Deploy_Name][id], -1);
		TextDrawSetShadow(VWInfo[L_Deploy_Name][id], 0);
		TextDrawSetOutline(VWInfo[L_Deploy_Name][id], 1);
		TextDrawBackgroundColor(VWInfo[L_Deploy_Name][id], 51);
		TextDrawFont(VWInfo[L_Deploy_Name][id], 2);
		TextDrawSetProportional(VWInfo[L_Deploy_Name][id], 1);

		start += 38.8;
		name_start += 40.0;
	}
}

stock VWKillCamera(playerid, killerid)
{
	//show the td here
}
stock showVWTexts(playerid, bool:showlobby)
{
    TextDrawShowForPlayer(playerid,VWInfo[ObjTXT]);
    TextDrawShowForPlayer(playerid,VWInfo[Score_BG]);
    TextDrawShowForPlayer(playerid,VWInfo[Rank_BG]);
	PlayerTextDrawShow(playerid, VWPlayerInfo[playerid][R_Name]);
	PlayerTextDrawShow(playerid, VWPlayerInfo[playerid][R_Score]);
	PlayerTextDrawShow(playerid, VWPlayerInfo[playerid][P_Score]);
	VWUpdateRankTxT(playerid);
	
    forLoop(id, VW_MAX_TEAMS)
    	TextDrawShowForPlayer(playerid,VWInfo[Score][id]);
	if(showlobby)
	{
    	PlayerInfo[playerid][TagState] = 1;

		SetHealth(playerid,100000);
    	SetPlayerSkin(playerid,231);
		SetPlayerColor(playerid,grey12);
		TogglePlayerControllable(playerid,false);

		TextDrawShowForPlayer(playerid,VWInfo[L_BG]);
	    PlayerTextDrawShow(playerid, VWPlayerInfo[playerid][L_Expl]);
	    PlayerTextDrawShow(playerid, VWPlayerInfo[playerid][L_Spawn_In]);

        VWPlayerInfo[playerid][DeployIn] = 10;
		if(!VWCanSpawnObjective(playerid))
		    VWGetOfficialObjective(playerid);

    	VWUpdateSkins(playerid);
    	forLoop(id, VW_MAX_CLASSES)
			VWUpdateClassWeaps(playerid, id);
		VWSetActiveTab(playerid, VW_TAB_DEPLOY);
		SelectTextDraw(playerid, SELECT_TEXT_DRAW);
	}
}
stock hideVWTexts(playerid)
{
    TextDrawHideForPlayer(playerid,VWInfo[ObjTXT]);
    TextDrawHideForPlayer(playerid,VWInfo[Score_BG]);
    TextDrawHideForPlayer(playerid,VWInfo[Rank_BG]);
	TextDrawHideForPlayer(playerid,VWInfo[L_BG]);
	TextDrawHideForPlayer(playerid,VWInfo[L_Spawn]);
    PlayerTextDrawHide(playerid, VWPlayerInfo[playerid][L_Expl]);
    PlayerTextDrawHide(playerid, VWPlayerInfo[playerid][L_Spawn_In]);
	PlayerTextDrawHide(playerid, VWPlayerInfo[playerid][R_Name]);
	PlayerTextDrawHide(playerid, VWPlayerInfo[playerid][R_Score]);
	PlayerTextDrawHide(playerid, VWPlayerInfo[playerid][P_Score]);
    forLoop(id, VW_MAX_TABS)
    {
        TextDrawHideForPlayer(playerid,VWInfo[L_Tab][id]);
        TextDrawHideForPlayer(playerid,VWInfo[L_Tab_A][id]);
    }
    VWHideTabTexts(playerid);
    forLoop(id, VW_MAX_TEAMS)
    	TextDrawHideForPlayer(playerid,VWInfo[Score][id]);
}

stock isClickingVWTexts(playerid, Text:clickedid)
{
	if(clickedid == VWInfo[L_Spawn])
	{
	    if(VWPlayerInfo[playerid][DeployIn] == 0)
	    {
	        VWPlayerInfo[playerid][Deployed] = 1;
	        CancelSelectTextDraw(playerid);
			A_SpawnPlayer(playerid);
	    }
	    return 1;
	}
	forLoop(id, VW_MAX_TABS)
    {
        if(clickedid == VWInfo[L_Tab][id])
        {
			VWSetActiveTab(playerid, id);
            return 1;
        }
    }
	forLoop(id, VW_MAX_OBJECTIVES_TXT)
    {
        if(clickedid == VWInfo[L_Deploy_BG][id])
        {
            new objid = -1;
            
            if(PlayerInfo[playerid][pTeam] == VW_USA)
    	    	objid = VWInfo[L_Deply_USA][id];
    	    else
    	    	objid = VWInfo[L_Deply_VIETNAM][id];

			if(objid != -1)
			{
			    if(VWObjectiveInfo[objid][Team] != PlayerInfo[playerid][pTeam])
			    {
			        GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~r~CAN'T SPAWN HERE", 2000, 3);
					return 1;
			    }
			    GameTextForPlayer(playerid, " ", 1000, 3);
			    VWPlayerInfo[playerid][Objective] = objid;
				VWSetActiveDeploy(playerid);
			}
            return 1;
        }
    }
	forLoop(id, VW_MAX_TEAMS)
    {
        if(clickedid == VWInfo[L_Team_Name][id])
        {
            switch(id)
            {
	            case VW_USA:
				{
					if(TeamCountVW(VW_USA) > TeamCountVW(VW_VIETNAM))
					{
						GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~w~TEAM IS FULL", 2000, 3);
						return 1;
					}
				}
			    case VW_VIETNAM:
				{
					if(TeamCountVW(VW_USA) < TeamCountVW(VW_VIETNAM))
					{
						GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~w~TEAM IS FULL", 2000, 3);
						return 1;
					}
				}
			}
			GameTextForPlayer(playerid, " ", 1000, 3);
			PlayerInfo[playerid][pTeam] = id;
			VWSetActiveTeam(playerid);
            return 1;
        }
        
    }
	forLoop(id, VW_MAX_CLASSES)
    {
        if(clickedid == VWInfo[L_Class_BG][id])
        {
			VWPlayerInfo[playerid][Class] = id;
			VWSetActiveClass(playerid);
            return 1;
        }
    }
	forLoop(id, VW_MAX_WEAPS)
    {
        if(clickedid == VWInfo[L_Weaps_Left][id])
        {
            new class_id = VWPlayerInfo[playerid][Class];
            if(--VWWeaponInfo[playerid][class_id][id] < 0)
				VWWeaponInfo[playerid][class_id][id] = 4;

            forLoop(i, 5)
            {
				if(VWGetWeaponSelectModel(playerid, class_id, id) == 0)
				    VWWeaponInfo[playerid][class_id][id]--;
				else break;
            }

            VWUpdateWeaponSelect(playerid, id);
            return 1;
        }
        else if(clickedid == VWInfo[L_Weaps_Right][id])
        {
            new class_id = VWPlayerInfo[playerid][Class];
            if(++VWWeaponInfo[playerid][class_id][id] > 4)
				VWWeaponInfo[playerid][class_id][id] = 0;

			if(VWGetWeaponSelectModel(playerid, class_id, id) == 0)
			    VWWeaponInfo[playerid][class_id][id] = 0;

            VWUpdateWeaponSelect(playerid, id);
            return 1;
        }
    }
    return 0;
}
stock VWSetActiveTab(playerid, tabid)
{
	forLoop(id, VW_MAX_TABS)
    {
        TextDrawShowForPlayer(playerid,VWInfo[L_Tab][id]);
        TextDrawHideForPlayer(playerid,VWInfo[L_Tab_A][id]);
    }
    TextDrawHideForPlayer(playerid,VWInfo[L_Tab][tabid]);
    TextDrawShowForPlayer(playerid,VWInfo[L_Tab_A][tabid]);
    
	VWPlayerInfo[playerid][Tab] = tabid;
    VWHideTabTexts(playerid);
	switch(tabid)
	{
	    case VW_TAB_DEPLOY:
		{
		    forLoop(id, VW_MAX_OBJECTIVES_TXT)
		     	TextDrawShowForPlayer(playerid,VWInfo[L_Deploy_Name][id]);
		    VWSetActiveDeploy(playerid);
		}
	    case VW_TAB_WEAPS:
		{
		    forLoop(id, VW_MAX_WEAPS)
		    {
		        VWUpdateWeaponSelect(playerid, id);
		        TextDrawShowForPlayer(playerid,VWInfo[L_Weaps_Type][id]);
		        TextDrawShowForPlayer(playerid,VWInfo[L_Weaps_Left][id]);
		        TextDrawShowForPlayer(playerid,VWInfo[L_Weaps_Right][id]);
		        PlayerTextDrawShow(playerid,VWPlayerInfo[playerid][L_Weaps_Ammo][id]);
		        PlayerTextDrawShow(playerid,VWPlayerInfo[playerid][L_Weaps_Name][id]);
		    }
		}
	    case VW_TAB_CLASS:
		{
		    forLoop(id, VW_MAX_CLASSES)
		    {
		        PlayerTextDrawShow(playerid,VWPlayerInfo[playerid][L_Class_Pic][id]);
		        PlayerTextDrawShow(playerid,VWPlayerInfo[playerid][L_Class_Guns][id]);
		    }
		    TextDrawShowForPlayer(playerid,VWInfo[L_Class_Names]);
		    VWSetActiveClass(playerid);
		}
	    case VW_TAB_TEAM:
		{
			forLoop(id, VW_MAX_TEAMS)
		    	TextDrawShowForPlayer(playerid,VWInfo[L_Team_Name][id]);
		    VWSetActiveTeam(playerid);
		}
	}
    return 0;
}
stock VWHideTabTexts(playerid)
{
    forLoop(id, VW_MAX_TEAMS)
    {
        TextDrawHideForPlayer(playerid,VWInfo[L_Team_BG][id]);
        TextDrawHideForPlayer(playerid,VWInfo[L_Team_Name][id]);
    }
    forLoop(id, VW_MAX_OBJECTIVES_TXT)
    {
        TextDrawHideForPlayer(playerid,VWInfo[L_Deploy_BG][id]);
        TextDrawHideForPlayer(playerid,VWInfo[L_Deploy_BG_A][id]);
        TextDrawHideForPlayer(playerid,VWInfo[L_Deploy_Name][id]);
    }
    forLoop(id, VW_MAX_CLASSES)
    {
        TextDrawHideForPlayer(playerid,VWInfo[L_Class_BG][id]);
        TextDrawHideForPlayer(playerid,VWInfo[L_Class_BG_A][id]);

        TextDrawHideForPlayer(playerid,VWInfo[L_Class_Names]);
        PlayerTextDrawHide(playerid,VWPlayerInfo[playerid][L_Class_Pic][id]);
        PlayerTextDrawHide(playerid,VWPlayerInfo[playerid][L_Class_Guns][id]);
    }
    forLoop(id, VW_MAX_WEAPS)
    {
        TextDrawHideForPlayer(playerid,VWInfo[L_Weaps_Type][id]);
        TextDrawHideForPlayer(playerid,VWInfo[L_Weaps_Left][id]);
        TextDrawHideForPlayer(playerid,VWInfo[L_Weaps_Right][id]);
        PlayerTextDrawHide(playerid,VWPlayerInfo[playerid][L_Weaps_Name][id]);
        PlayerTextDrawHide(playerid,VWPlayerInfo[playerid][L_Weaps_Ammo][id]);
    }
    forLoop(id, VW_MAX_WEAPS_STATS)
    {
        TextDrawHideForPlayer(playerid,VWInfo[L_Weaps_Img][id]);
	}
}
stock VWSetActiveDeploy(playerid)
{
    if(VWPlayerInfo[playerid][Tab] == VW_TAB_DEPLOY)
    {
	    new objid = -1;
	    forLoop(id, VW_MAX_OBJECTIVES_TXT)
	    {
            TextDrawShowForPlayer(playerid,VWInfo[L_Deploy_BG][id]);
	        TextDrawHideForPlayer(playerid,VWInfo[L_Deploy_BG_A][id]);
	        
	        if(PlayerInfo[playerid][pTeam] == VW_USA)
    	    {
		        if(VWInfo[L_Deply_USA][id] == VWPlayerInfo[playerid][Objective])
		        	objid = id;
    	    }
    	    else
    	    {
		        if(VWInfo[L_Deply_VIETNAM][id] == VWPlayerInfo[playerid][Objective])
		        	objid = id;
    	    }
	    }
		if(objid != -1)
		{
	        TextDrawHideForPlayer(playerid,VWInfo[L_Deploy_BG][objid]);
	        TextDrawShowForPlayer(playerid,VWInfo[L_Deploy_BG_A][objid]);
		}
	    
    }
    VWCameraInObjective(playerid);
	VWUpdateExpl(playerid);
    return 0;
}
stock VWSetActiveClass(playerid)
{
    forLoop(id, VW_MAX_CLASSES)
    {
        TextDrawShowForPlayer(playerid,VWInfo[L_Class_BG][id]);
        TextDrawHideForPlayer(playerid,VWInfo[L_Class_BG_A][id]);
    }
    new id = VWPlayerInfo[playerid][Class];
    TextDrawHideForPlayer(playerid,VWInfo[L_Class_BG][id]);
    TextDrawShowForPlayer(playerid,VWInfo[L_Class_BG_A][id]);
    VWUpdateRankTxT(playerid);
	VWUpdateExpl(playerid);
    return 0;
}
stock VWSetActiveTeam(playerid)
{
    forLoop(id, VW_MAX_TEAMS)
    {
        TextDrawHideForPlayer(playerid,VWInfo[L_Team_BG][id]);
    }
    new id = PlayerInfo[playerid][pTeam];
    TextDrawShowForPlayer(playerid,VWInfo[L_Team_BG][id]);

	if(!VWCanSpawnObjective(playerid))
	{
	    VWGetOfficialObjective(playerid);
    	VWCameraInObjective(playerid);
    }
    VWUpdateSkins(playerid);
	VWUpdateExpl(playerid);
    return 0;
}
stock VWUpdateSkins(playerid)
{
    new team_id = PlayerInfo[playerid][pTeam];
    forLoop(id, VW_MAX_CLASSES)
		PlayerTextDrawSetPreviewModel(playerid, VWPlayerInfo[playerid][L_Class_Pic][id] , VW_ClassSkins[team_id][id]);
    return 0;
}
stock VWUpdateClassWeaps(playerid, classid)
{
	new str[252], weaps[50], weapon, ammo;
    forLoop(id, VW_MAX_WEAPS)
 	{
		ammo = VWGetWeaponSelectAmmo(playerid, classid, id);
		weapon = VWGetWeaponSelectModel(playerid, classid, id);
		switch(weapon)
		{
		    case WEAPON_MOLTOV:
		    {
		        weaps = "Molotov";
		    }
		    case WEAPON_DEAGLE:
		    {
		        weaps = "Deagle";
		    }
		    case WEAPON_SILENCED:
		    {
		        weaps = "Silenced";
		    }
		    case WEAPON_FIREEXTINGUISHER:
		    {
		        weaps = "Fire ex";
		    }
		    case WEAPON_FLAMETHROWER:
		    {
		        weaps = "Flame";
		    }
		    case WEAPON_ROCKETLAUNCHER:
		    {
		        weaps = "Rocket";
		    }
		    case WEAPON_BAT:
		    {
		        weaps = "Bat";
		    }
		    case WEAPON_SHOTGSPA:
		    {
		        weaps = "Combat";
		    }
		    case WEAPON_SNIPER:
		    {
		        weaps = "Sniper";
		    }
		    default:
		    {
				GetWeaponName(weapon, weaps, sizeof weaps);
		    }
		}
		format(weaps, sizeof weaps,"%s - %d~n~", weaps, ammo);
		strcat(str, weaps);
 	}
    PlayerTextDrawSetString(playerid, VWPlayerInfo[playerid][L_Class_Guns][classid], str);
    return 0;
}
stock VWUpdateExpl(playerid)
{
	new str[125];
    format(str, sizeof str,"  ~w~(~g~%s~w~) ~w~- %s - %s%s"
		,VWObjectiveInfo[VWPlayerInfo[playerid][Objective]][Name]
		,VW_ClassNames[VWPlayerInfo[playerid][Class]]
		,VWZoneTxTCol[PlayerInfo[playerid][pTeam]],TeamNamesVW[PlayerInfo[playerid][pTeam]]);
	PlayerTextDrawSetString(playerid, VWPlayerInfo[playerid][L_Expl], str);
    return 0;
}
stock VWGetWeaponSelectModel(playerid, class_id, type)
{
    new slot, weapon, rank = VWPlayerInfo[playerid][Rank];
    slot = VWWeaponInfo[playerid][class_id][type];

    switch(class_id)
    {
        case VW_MEDIC:
        {
            weapon = VW_MedicWeaps[rank][type][slot];
        }
        case VW_SNIPER:
        {
            weapon = VW_SniperWeaps[rank][type][slot];
        }
        case VW_ENGINEER:
        {
            weapon = VW_EngineerWeaps[rank][type][slot];
        }
    }
    return weapon;
}
stock VWGetWeaponSelectAmmo(playerid, class_id, type)
{
    new slot, ammo, rank = VWPlayerInfo[playerid][Rank];
    slot = VWWeaponInfo[playerid][class_id][type];

    switch(class_id)
    {
        case VW_MEDIC:
        {
            ammo = VW_MedicAmmo[rank][type][slot];
        }
        case VW_SNIPER:
        {
            ammo = VW_SniperAmmo[rank][type][slot];
        }
        case VW_ENGINEER:
        {
            ammo = VW_EngineerAmmo[rank][type][slot];
        }
    }
    return ammo;
}
stock VWGetWeaponStatsID(weapon)
{
    forLoop(id, VW_MAX_WEAPS_STATS)
	{
	    if(VWWeaponStats[id][1] == weapon)
	        return id;
	}
	return -1;
}

stock VWGiveWeapons(playerid)
{
    new ammo, weapon, class_id;
    class_id = VWPlayerInfo[playerid][Class];
    forLoop(id, VW_MAX_WEAPS)
	{
		ammo = VWGetWeaponSelectAmmo(playerid, class_id, id);
		weapon = VWGetWeaponSelectModel(playerid, class_id, id);
		GiveWeapon(playerid, weapon, ammo);
	}
}

stock VWDestroyPlayerAction(playerid)
{
    forLoop(i, MAX_CLASS_ACTIONS)
    {
    	if(VWClassAction[i][Exists] == 1 && VWClassAction[i][Player] == playerid)
    	{
    	    VWDestroyClassAction(i);
    	    break;
    	}
	}
}
stock VWDestroyClassAction(id)
{
    DestroyTheDynamicPickup(VWClassAction[id][Pickup]);
    DestroyTheDynamicArea(VWClassAction[id][Area]);
    DestroyTheDynamic3DTextLabel(VWClassAction[id][pLabel]);
    VWClassAction[id][Exists] = 0;
    VWClassAction[id][Player] = -1;
}
stock VWCreateClassAction(playerid)
{
    new id = -1;
    forLoop(i, MAX_CLASS_ACTIONS)
    {
    	if(VWClassAction[i][Exists] == 0)
    	{
    	    id = i;
    	    break;
    	}
   	}
   	if(id != -1)
   	{
	    VWDestroyClassAction(id);
        VWDestroyPlayerAction(playerid);
        
	    VWClassAction[id][Player] = playerid;
	    VWClassAction[id][Exists] = 1;

	    new str[90], Float:x, Float:y, Float:z, objid, world, interior;
		if(VWPlayerInfo[playerid][Class] == VW_MEDIC)
		{
            objid = 1240;
		    VWClassAction[id][Type] = CLASS_ACTION_HEAL;
		    format(str, sizeof str, "{CCCCCC}Press '{33AA33}N{CCCCCC}' heal");
		}
		else if(VWPlayerInfo[playerid][Class] == VW_ENGINEER)
		{
            objid = 2358;
		    VWClassAction[id][Type] = CLASS_ACTION_AMMO;
		    format(str, sizeof str, "{CCCCCC}Press '{33AA33}N{CCCCCC}' refill ammo");
		}

		GetXYInFrontOfPlayer(playerid, x, y, z, 0.7);
		world = GetPlayerVirtualWorld(playerid);
		interior = GetPlayerInterior(playerid);
		VWPlayerInfo[playerid][LastCreate] = 15;

		VWClassAction[id][pLabel] = CreateDynamic3DTextLabel(str, 0xCCCCCCAA, x,y,z+0.5, 6,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,0, world,interior, -1, 100);


		VWClassAction[id][Area] = CreateDynamicSphere(x, y, z, 6.0, world, interior, -1);
		VWClassAction[id][Pickup] = CreateDynamicPickup(objid, 1, x, y, z, world, interior);
		forLoop(i, MAX_PLAYERS)
	    {
			if(IsPlayerConnected(i) && GetPlayerVirtualWorld(i) == world)
			{
			    if(IsPlayerInRangeOfPoint(i, 50,x, y, z))
			    {
		    		Streamer_Update(i);
				}
	    	}
        }
	}
	return id;
}



stock VWUpdateWeaponSelect(playerid, type)
{
	new str[32], weapon, ammo, class_id, weapon_img;
    class_id = VWPlayerInfo[playerid][Class];
	weapon = VWGetWeaponSelectModel(playerid, class_id, type);
	ammo = VWGetWeaponSelectAmmo(playerid, class_id, type);
	weapon_img = VWGetWeaponStatsID(weapon);
	
	GetWeaponName(weapon,str, sizeof str);
	if(weapon == 18) str = "Molotov";
	PlayerTextDrawSetString(playerid, VWPlayerInfo[playerid][L_Weaps_Name][type], str);
	format(str, sizeof str,"Ammo %d", ammo);
	PlayerTextDrawSetString(playerid, VWPlayerInfo[playerid][L_Weaps_Ammo][type], str);
	VWUpdateClassWeaps(playerid, VWPlayerInfo[playerid][Class]);
	
	forLoop(id, VW_MAX_WEAPS_STATS)
	{
	    if(VWWeaponStats[id][0] == type)
	        TextDrawHideForPlayer(playerid, VWInfo[L_Weaps_Img][id]);
	}
	if(weapon_img != -1)
		TextDrawShowForPlayer(playerid, VWInfo[L_Weaps_Img][weapon_img]);
    return 0;
}
stock VWUpdateSpawnTxt(playerid)
{
	if(VWPlayerInfo[playerid][LastLoad] > 0)
		VWPlayerInfo[playerid][LastLoad]--;
	if(VWPlayerInfo[playerid][LastCreate] > 0)
	    VWPlayerInfo[playerid][LastCreate]--;
	    
	if(VWPlayerInfo[playerid][DeployIn] > 1)
    {
		new str[65];
		VWPlayerInfo[playerid][DeployIn]--;
		format(str, sizeof str,"Spawn in %d", VWPlayerInfo[playerid][DeployIn]);
		PlayerTextDrawSetString(playerid, VWPlayerInfo[playerid][L_Spawn_In], str);
	}
	else if(VWPlayerInfo[playerid][DeployIn] == 1)
	{
	    VWPlayerInfo[playerid][DeployIn] = 0;
		TextDrawShowForPlayer(playerid,VWInfo[L_Spawn]);
	    PlayerTextDrawHide(playerid, VWPlayerInfo[playerid][L_Spawn_In]);
	}
    return 0;
}

stock VWGetOfficialObjective(playerid)
{
    forLoop(id, VW_MAX_OBJECTIVES)
    {
    	if(VWObjectiveInfo[id][Exists] == 1 && VWObjectiveInfo[id][Type] == 0 && VWObjectiveInfo[id][Team] == PlayerInfo[playerid][pTeam])
    	{
    		VWPlayerInfo[playerid][Objective] = id;
    	}
	}
}
stock VWCanSpawnObjective(playerid)
{
	new id = VWPlayerInfo[playerid][Objective];
 	return (VWObjectiveInfo[id][Exists] == 1 && VWObjectiveInfo[id][Team] == PlayerInfo[playerid][pTeam]);
}
stock VWSpawnInObjective(playerid, id)
{
	forLoop(i, VW_MAX_OBJ_RANDS)
    {
    	if(VWObjectiveInfo[id][randE][i] == 1)
    	{
    	    if(random(3) == 1)
    	    {
   				SetPlayerVirtualWorld(playerid, VWObjectiveInfo[id][posWorld]);
   				SetPlayerInterior(playerid, VWObjectiveInfo[id][posInterior]);
				SetPlayerPosEx(playerid, VWObjectiveInfo[id][randX][i], VWObjectiveInfo[id][randY][i], VWObjectiveInfo[id][randZ][i], VWObjectiveInfo[id][randA][i]);
	    	    return 1;
    	    }
    	}
   	}
   	SetPlayerVirtualWorld(playerid, VWObjectiveInfo[id][posWorld]);
   	SetPlayerInterior(playerid, VWObjectiveInfo[id][posInterior]);
   	SetPlayerPosEx(playerid, VWObjectiveInfo[id][randX][0], VWObjectiveInfo[id][randY][0], VWObjectiveInfo[id][randZ][0], VWObjectiveInfo[id][randA][0]);
   	return 0;
}

stock VWCameraInObjective(playerid)
{
	new id = VWPlayerInfo[playerid][Objective];
   	SetPlayerVirtualWorld(playerid, VWObjectiveInfo[id][posWorld]);
   	SetPlayerInterior(playerid, VWObjectiveInfo[id][posInterior]);
	SetPlayerPos(playerid, VWObjectiveInfo[id][campX], VWObjectiveInfo[id][campY], VWObjectiveInfo[id][campZ]);
    SetPlayerCameraPos(playerid, VWObjectiveInfo[id][camX], VWObjectiveInfo[id][camY], VWObjectiveInfo[id][camZ]);
	SetPlayerCameraLookAt(playerid, VWObjectiveInfo[id][posX], VWObjectiveInfo[id][posY], VWObjectiveInfo[id][posZ]);
}
stock VWDestroyObjective(id)
{
    DestroyTheDynamicArea(VWObjectiveInfo[id][Area]);
    DestroyTheDynamic3DTextLabel(VWObjectiveInfo[id][pLabel]);
    DestroyTheDynamicObject(VWObjectiveInfo[id][Object]);
    VWObjectiveInfo[id][Exists] = 0;
    forLoop(i, VW_MAX_OBJ_RANDS)
    	VWObjectiveInfo[id][randE][i] = 0;
}
stock VWCreateObjective(team, type, name[], world, interior, Float:x, Float:y, Float:z, Float:cax, Float:cay, Float:caz, Float:capx, Float:capy, Float:capz)
{
    new id = -1;
    forLoop(i, VW_MAX_OBJECTIVES)
    {
    	if(VWObjectiveInfo[i][Exists] == 0)
    	{
    	    id = i;
    	    break;
    	}
   	}
   	if(id != -1)
   	{
		new worlds[3];
		worlds[0] = W_VW;
		worlds[1] = W_VW_VIETNAM;
		worlds[2] = W_VW_USA;
	
	    VWDestroyObjective(id);
	    VWObjectiveInfo[id][Exists] = 1;
	    VWObjectiveInfo[id][State] = 0;
	    VWObjectiveInfo[id][sColor] = 0;
		VWObjectiveInfo[id][cTime] = VW_CAPTURE_TIME;

	    VWObjectiveInfo[id][posX] = x;
	    VWObjectiveInfo[id][posY] = y;
	    VWObjectiveInfo[id][posZ] = z;

		format(VWObjectiveInfo[id][Name], 5,"%s",name);
		VWObjectiveInfo[id][Type] = type;

		VWObjectiveInfo[id][Team] = team;
		VWObjectiveInfo[id][posWorld] = world;
		VWObjectiveInfo[id][posInterior] = interior;

		VWObjectiveInfo[id][camX] = cax;
		VWObjectiveInfo[id][camY] = cay;
		VWObjectiveInfo[id][camZ] = caz;
		VWObjectiveInfo[id][campX] = capx;
		VWObjectiveInfo[id][campY] = capy;
		VWObjectiveInfo[id][campZ] = capz;

    	if(type == 1)
	    {
	        VWObjectiveInfo[id][Area] = CreateDynamicSphere(x, y, z, 80.0, world, interior, -1);
	    	VWObjectiveInfo[id][pLabel] = CreateDynamic3DTextLabelEx("lele", 0xffffffAA, x, y, z+1, 950, INVALID_PLAYER_ID, INVALID_VEHICLE_ID,  0, 600.0, worlds);
	        VWObjectiveInfo[id][Object] = CreateTheDynamicObject(11245, x, y, z, 0.0000, -70.0, 0.0000, world, interior);
	        VWUpdateObjective(id);
		}
		else VWObjectiveInfo[id][Area] = CreateDynamicSphere(x, y, z, 200.0, world, interior, -1);
	}
	return id;
}

stock VWGetAreaPlayers(team, id)
{
	new plateam;
	forLoop(y, MAX_PLAYERS)
	{
		if(!IsPlayerConnected(y) || IsPlayerNPC(y))continue;
 		if(PlayerInfo[y][PlayerMode] == VW && PlayerInfo[y][Spawned] == 1 && PlayerInfo[y][pTeam] == team && VWPlayerInfo[y][Deployed])
		{
			if(IsPlayerInDynamicArea(y, VWObjectiveInfo[id][Area]))
			{
			    plateam++;
			}
		}
	}
	return plateam;
}

stock VWExitSpawnArea(playerid, areaid)
{
    if(PlayerInfo[playerid][PlayerMode] == VW && PlayerInfo[playerid][Spawned] == 1 && VWPlayerInfo[playerid][Deployed])
    {
		forLoop(id, VW_MAX_OBJECTIVES)
	    {
	    	if(VWObjectiveInfo[id][Exists] == 1 && VWObjectiveInfo[id][Type] == 0 && VWObjectiveInfo[id][Team] == PlayerInfo[playerid][pTeam])
	    	{
	    		if(VWObjectiveInfo[id][Area] == areaid)
	    		{
					SetPlayerVirtualWorld(playerid, W_VW);
	    		    if(IsPlayerInAnyVehicle(playerid))
					{
		    		    new vehid = GetPlayerVehicleID(playerid), seat = GetPlayerVehicleSeat(playerid);
					    if(GetVehicleVirtualWorld(vehid) != W_VW)
							SetVehicleVirtualWorld(vehid, W_VW);
						PlacePlayerInVehicle(playerid,vehid,seat);
					}
	    		    return true;
	    		}
	    	}
		}
	}
	return false;
}

stock VWEnterSpawnArea(playerid, areaid)
{
    if(PlayerInfo[playerid][PlayerMode] == VW && PlayerInfo[playerid][Spawned] == 1 && VWPlayerInfo[playerid][Deployed])
    {
		forLoop(id, VW_MAX_OBJECTIVES)
	    {
	    	if(VWObjectiveInfo[id][Exists] == 1 && VWObjectiveInfo[id][Type] == 0 && VWObjectiveInfo[id][Team] == PlayerInfo[playerid][pTeam])
	    	{
	    		if(VWObjectiveInfo[id][Area] == areaid)
	    		{
	    		    GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~w~enter spawn area", 26000, 3);
	    		    return true;
	    		}
	    	}
		}
	}
	return false;
}
stock VWCheckRank(playerid)
{
    if(VWPlayerInfo[playerid][Rank]+1 != VW_MAX_RANKS)
    {
        if(VWPlayerInfo[playerid][Score] >= VWRankScores[VWPlayerInfo[playerid][Rank]+1])
        {
            VWPlayerInfo[playerid][Rank]++;
		    new str[95];
		    format(str, sizeof str, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~(~g~Promoted~w~)~n~~y~]~w~] ~r~%s ~w~]~y~]",VWRankNames[VWPlayerInfo[playerid][Rank]]);
			GameTextForPlayer(playerid, str, 6000, 3);
            PlayerPlaySound(playerid,1085,0.0,0.0,0.0);
        }
   	}
}
stock VWUpdateRankTxT(playerid)
{
    new str[55];
    format(str, sizeof str, "%s %s",VWRankNames[VWPlayerInfo[playerid][Rank]],VW_ClassNames[VWPlayerInfo[playerid][Class]]);
    PlayerTextDrawSetString(playerid, VWPlayerInfo[playerid][R_Name], str);

    if(VWPlayerInfo[playerid][Rank]+1 != VW_MAX_RANKS)
    	format(str, sizeof str, "%d/%d", VWPlayerInfo[playerid][Score], VWRankScores[VWPlayerInfo[playerid][Rank]+1]);
	else format(str, sizeof str, "%d", VWPlayerInfo[playerid][Score]);
    PlayerTextDrawSetString(playerid, VWPlayerInfo[playerid][R_Score], str);
}
stock VWGiveScore(playerid, score, reason[])
{
    ChangeModeScore(playerid, score);
    VWCheckRank(playerid);
    VWUpdateRankTxT(playerid);
    
    new str[55];
    if(strlen(reason) > 0)
	{
	    if(score > 0)
			format(str, sizeof str, "+%d ~g~%s", score, reason);
		else
			format(str, sizeof str, "~g~%s", reason);
	}
    else format(str, sizeof str, "+%d", score);
    PlayerTextDrawSetString(playerid, VWPlayerInfo[playerid][P_Score], str);
    
    SetTimerEx("VWResetScoreText", 2000, false, "i", playerid);
}

forward VWResetScoreText(playerid);
public VWResetScoreText(playerid)
{
    PlayerTextDrawSetString(playerid, VWPlayerInfo[playerid][P_Score], "_");
}

stock VWRewardAreaPlayers(team, id, type)
{
	forLoop(y, MAX_PLAYERS)
	{
		if(!IsPlayerConnected(y) || IsPlayerNPC(y))continue;
 		if(PlayerInfo[y][PlayerMode] == VW && PlayerInfo[y][Spawned] == 1 && PlayerInfo[y][pTeam] == team && VWPlayerInfo[y][Deployed])
		{
			if(IsPlayerInDynamicArea(y, VWObjectiveInfo[id][Area]))
			{
			    if(type == 0)
			    	VWGiveScore(y, 80, "Neutralize");
			    else if(type == 1)
			    	VWGiveScore(y, 100, "Capture");
			    else
			    	VWGiveScore(y, 50, "Protect");
                PlayerPlaySound(y,1085,0.0,0.0,0.0);
			}
		}
	}
}

stock VWCountTeamObjectives(team)
{
	new objs;
	forLoop(id, VW_MAX_OBJECTIVES)
	{
    	if(VWObjectiveInfo[id][Exists] == 1 && VWObjectiveInfo[id][Type] == 1)
    	{
    	    if(VWObjectiveInfo[id][Team] == team)
    	        objs++;
		}
 	}
 	return objs;
}
stock VWReduceTeamScores()
{
   	VWInfo[changeScore] = (VWInfo[changeScore] == 1)?0:1;
    if(VWInfo[changeScore] == 0)return 1;
   		
	if(ModeCount(VW) > 0)
	{
	    VWInfo[tScore][VW_USA]--;
		VWInfo[tScore][VW_VIETNAM]--;
		new objs[VW_MAX_TEAMS];
		objs[VW_USA] = VWCountTeamObjectives(VW_USA);
		objs[VW_VIETNAM] = VWCountTeamObjectives(VW_VIETNAM);
		
		if(objs[VW_USA] > objs[VW_VIETNAM])
			VWInfo[tScore][VW_VIETNAM]-= (objs[VW_USA] - objs[VW_VIETNAM]);
		else if(objs[VW_VIETNAM] > objs[VW_USA])
			VWInfo[tScore][VW_USA]-= (objs[VW_VIETNAM] - objs[VW_USA]);

        forLoop(id, VW_MAX_TEAMS)
		{
		    if(VWInfo[tScore][id] < 0)
		    {
		        VWInfo[tScore][id] = 0;
		    }
		}

        if(VWInfo[tScore][VW_USA] != VWInfo[tScore][VW_VIETNAM] && (VWInfo[tScore][VW_VIETNAM] == 0 || VWInfo[tScore][VW_USA] == 0))
        {
			forLoop(id, VW_MAX_TEAMS)
			{
			    if(VWInfo[tScore][id] == 0)
			    {
			        new winner = (id == VW_USA)?VW_VIETNAM:VW_USA;
		            forLoop(y, MAX_PLAYERS)
					{
						if(!IsPlayerConnected(y) || IsPlayerNPC(y))continue;
				 		if(PlayerInfo[y][PlayerMode] == VW && PlayerInfo[y][Spawned] == 1)
						{
						    if(PlayerInfo[y][pTeam] == winner)
						    {
						        VWPlayerInfo[y][RoundsWon]++;
					    		VWGiveScore(y, 400, "Victory");
								GameTextForPlayer(y, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~(~g~Well done~w~)~n~~y~]~w~] ~r~Victory ~w~]~y~]", 5000, 3);
					            PlayerPlaySound(y,1085,0.0,0.0,0.0);
						    }
						    else
						    {
						        VWPlayerInfo[y][RoundsLost]++;
					        	GameTextForPlayer(y, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~r~defeated", 2000, 3);
							}
						    VWPlayerInfo[y][Deployed] = 0;

		                    hideVWTexts(y);
		                    ChangeModePictureForPlayer(y);
							if(GetPlayerState(y) != PLAYER_STATE_WASTED)
							{
								SpawnPlayerTimer(y, 6000);
							}
						}
					}
					new str[156];
					format(str, sizeof(str), "[NEWS] %s is victorious [score: %d]. %s has been defeated [score: %d].", TeamNamesVW[winner], VWInfo[tScore][winner], TeamNamesVW[id], VWInfo[tScore][id]);
					db_SaveChat(-1, VW,str);
					format(str, sizeof str, "NEWS: %s%s {FFFFFF}is victorious [score: %d]. %s%s {FFFFFF}has been defeated [score: %d].",VWZoneLabelCol[winner], TeamNamesVW[winner], VWInfo[tScore][winner], VWZoneLabelCol[id], TeamNamesVW[id], VWInfo[tScore][id]);
				 	SendMessageToMode(VW,COLOR_YELLOW, str);
				    VWChangeMap();
				    return 1;
			    }
			}
		}
		if(VWInfo[tScore][VW_USA] == VWInfo[tScore][VW_VIETNAM] && VWInfo[tScore][VW_VIETNAM] <= 1)
        {
		    VWInfo[tScore][VW_USA]+=100;
			VWInfo[tScore][VW_VIETNAM]+=100;
			db_SaveChat(-1, VW, "[NEWS] Both nations have obtained 100 score to extend the round.");
			SendMessageToMode(VW,COLOR_YELLOW, "NEWS: {FFFFFF}Both nations have obtained 100 score to extend the round.");
        }
		VWUpdateTeamScores();
	}
	return 1;
}

stock VWUpdateTeamScores()
{
	new str[60], score[15];
	forLoop(id, VW_MAX_TEAMS)
	{
	    if(VWInfo[tScore][id] >= 100)
			format(score,sizeof(score),"~g~%d",VWInfo[tScore][id]);
	    else if(VWInfo[tScore][id] < 100 && VWInfo[tScore][id] > 50)
			format(score,sizeof(score),"~y~%d",VWInfo[tScore][id]);
	    else
			format(score,sizeof(score),"~r~%d",VWInfo[tScore][id]);
	    if(id == VW_USA)
			format(str,sizeof(str),"USA: %s",score);
		else
			format(str,sizeof(str),"%s: %s", TeamNamesVW[id],score);
		TextDrawSetString(VWInfo[Score][id], str);
	}
}

stock VWCountDownAreaPlayers(id)
{
	if(VWObjectiveInfo[id][State] != 0)
	{
		new str[40];
		format(str,sizeof(str),"_~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~%d",VWObjectiveInfo[id][cTime]);
		forLoop(y, MAX_PLAYERS)
		{
			if(!IsPlayerConnected(y) || IsPlayerNPC(y))continue;
	 		if(PlayerInfo[y][PlayerMode] == VW && PlayerInfo[y][Spawned] == 1 && VWPlayerInfo[y][Deployed])
			{
				if(IsPlayerInDynamicArea(y, VWObjectiveInfo[id][Area]))
				{
					GameTextForPlayer(y, str, 1100, 6);
				}
			}
		}
	}
}
stock VWCheckObjectiveStates()
{
    forLoop(id, VW_MAX_OBJECTIVES)
    {
    	if(VWObjectiveInfo[id][Exists] == 1 && VWObjectiveInfo[id][Type] == 1)
    	{
    	    new americans = VWGetAreaPlayers(VW_USA, id),
				vietnamese = VWGetAreaPlayers(VW_VIETNAM, id);

			if(vietnamese == 0 && americans == 0)
			{
			    VWObjectiveInfo[id][State] = 0;
			    VWObjectiveInfo[id][cTime] = VW_CAPTURE_TIME;
			    continue;
			}
            if((vietnamese > americans && VWObjectiveInfo[id][Team] == VW_USA)
				|| (americans > vietnamese && VWObjectiveInfo[id][Team] == VW_VIETNAM)
				|| ((vietnamese > 0 || americans > 0) && VWObjectiveInfo[id][Team] == VW_NEUTRAL))
			    VWObjectiveInfo[id][State] = 1;
			    
			if(vietnamese == 0 && americans == 0)
			    VWObjectiveInfo[id][cTime] = VW_CAPTURE_TIME;

    	    if(VWObjectiveInfo[id][Team] == VW_USA)
    	    {
    	        if(vietnamese > americans)
    	        {
    	            if(--VWObjectiveInfo[id][cTime] == 0)
    	            {
	    	            VWSetObjectiveTeam(id, VW_NEUTRAL);
	                    VWRewardAreaPlayers(VW_VIETNAM, id, 0);
                    }
    	        }
    	        else //if(vietnamese < americans)
    	        {
    	            if(++VWObjectiveInfo[id][cTime] >= VW_CAPTURE_TIME)
    	            {
    	                VWObjectiveInfo[id][cTime] = VW_CAPTURE_TIME;
    	                VWObjectiveInfo[id][State] = 0;
					}
    	        }
    	    }
    	    else if(VWObjectiveInfo[id][Team] == VW_VIETNAM)
    	    {
    	        if(vietnamese < americans)
    	        {
    	            if(--VWObjectiveInfo[id][cTime] == 0)
    	            {
	    	            VWSetObjectiveTeam(id, VW_NEUTRAL);
	                    VWRewardAreaPlayers(VW_USA, id, 0);
                    }
    	        }
    	        else //if(vietnamese > americans)
    	        {
    	            if(++VWObjectiveInfo[id][cTime] >= VW_CAPTURE_TIME)
    	            {
    	                VWObjectiveInfo[id][cTime] = VW_CAPTURE_TIME;
    	                VWObjectiveInfo[id][State] = 0;
					}
    	        }
    	    }
    	    else
    	    {
    	        if(vietnamese > americans)
    	        {
    	            if(--VWObjectiveInfo[id][cTime] == 0)
    	            {
	    	            VWSetObjectiveTeam(id, VW_VIETNAM);
	                    VWRewardAreaPlayers(VW_VIETNAM, id, 1);
					}
    	        }
    	        else if(vietnamese < americans)
    	        {
    	            if(--VWObjectiveInfo[id][cTime] == 0)
    	            {
	    	            VWSetObjectiveTeam(id, VW_USA);
	                    VWRewardAreaPlayers(VW_USA, id, 1);
					}
    	        }
             	else
				{
				 	if(++VWObjectiveInfo[id][cTime] >= VW_CAPTURE_TIME)
		            {
		                VWObjectiveInfo[id][cTime] = VW_CAPTURE_TIME;
		                VWObjectiveInfo[id][State] = 0;
					}
				}
    	    }
    		VWCountDownAreaPlayers(id);
		}
	}
	VWUpdateObjectiveTxT();
}
stock VWObjectiveAddSpawn(id, Float:x, Float:y, Float:z, Float:ang)
{
	new rid = -1;
    forLoop(i, VW_MAX_OBJ_RANDS)
    {
    	if(VWObjectiveInfo[id][randE][i] == 0)
    	{
    	    rid = i;
    	    break;
    	}
   	}
   	if(rid != -1)
   	{
    	VWObjectiveInfo[id][randE][rid] = 1;
    	VWObjectiveInfo[id][randX][rid] = x;
    	VWObjectiveInfo[id][randY][rid] = y;
    	VWObjectiveInfo[id][randZ][rid] = z;
    	VWObjectiveInfo[id][randA][rid] = ang;
	}
}

stock VWUpdateDeployObjectives()
{
	new objs = 1, str[90];
    forLoop(id, VW_MAX_OBJECTIVES)
    {
    	if(VWObjectiveInfo[id][Exists] == 1)
    	{
    	    if(VWObjectiveInfo[id][Type] == 0)
    	    {
	    	    if(VWObjectiveInfo[id][Team] == VW_USA)
	    	    	VWInfo[L_Deply_USA][0] = id;
	    	    else
	    	    	VWInfo[L_Deply_VIETNAM][0] = id;
	    	    	
		    	format(str,sizeof(str),"Head Quarters");
    	    	TextDrawSetString(VWInfo[L_Deploy_Name][0], str);
    		}
    		else
    		{
	    	  	VWInfo[L_Deply_VIETNAM][objs] = id;
	    	  	VWInfo[L_Deply_USA][objs] = id;

	    	    format(str,sizeof(str),"~w~Objective (%s%s~w~)", VWZoneTxTCol[VWObjectiveInfo[id][Team]], VWObjectiveInfo[id][Name]);
    	    	TextDrawSetString(VWInfo[L_Deploy_Name][objs], str);
	    		objs++;
    		}
    	}
	}
}
stock VWUpdateObjectiveTxT()
{
	new str[252], saww2[50];
    forLoop(id, VW_MAX_OBJECTIVES)
    {
    	if(VWObjectiveInfo[id][Exists] == 1 && VWObjectiveInfo[id][Type] == 1)
    	{
    	    if(VWObjectiveInfo[id][State] == 1 && VWObjectiveInfo[id][sColor] == 0)
    	    {
    	    	format(saww2, sizeof saww2,"~w~(~y~%s~w~)_", VWObjectiveInfo[id][Name]);
			    VWObjectiveInfo[id][sColor] = 1;
			}
    	    else
    	    {
				format(saww2, sizeof saww2,"~w~(%s%s~w~)_", VWZoneTxTCol[VWObjectiveInfo[id][Team]], VWObjectiveInfo[id][Name]);
				if(VWObjectiveInfo[id][State] == 1 && VWObjectiveInfo[id][sColor] == 1)
				    VWObjectiveInfo[id][sColor] = 0;
			}
			strcat(str, saww2);
		}
 	}
	TextDrawSetString(VWInfo[ObjTXT], str);
}
stock VWSetObjectiveTeam(id, team)
{
    forLoop(y, MAX_PLAYERS)
	{
		if(!IsPlayerConnected(y) || IsPlayerNPC(y))continue;
 		if(PlayerInfo[y][PlayerMode] == VW && PlayerInfo[y][Spawned] == 1)
		{
		    if(VWPlayerInfo[y][Objective] == id)
		    {
		    	VWGetOfficialObjective(y);
		    	if(!VWPlayerInfo[y][Deployed])VWSetActiveDeploy(y);
		    }
		}
	}
	VWObjectiveInfo[id][cTime] = VW_CAPTURE_TIME;
	VWObjectiveInfo[id][State] = 0;
	VWObjectiveInfo[id][sColor] = 0;
	VWObjectiveInfo[id][Team] = team;
	VWUpdateObjective(id);
	VWUpdateDeployObjectives();
	VWUpdateObjectiveTxT();
}
stock VWUpdateObjective(id)
{
    if(VWObjectiveInfo[id][Type] == 1)
    {
	    new string[158];
		format(string,sizeof(string),"[{FFFFFF}Objective {33FF33}%s{FF0000}]\n\n{FFFFFF}[%s%s{FFFFFF}]",VWObjectiveInfo[id][Name], VWZoneLabelCol[VWObjectiveInfo[id][Team]], TeamNamesVW[VWObjectiveInfo[id][Team]]);
		UpdateDynamic3DTextLabelText(VWObjectiveInfo[id][pLabel], 0xFF0000AA, string);
		
		if(VWObjectiveInfo[id][Team] == VW_VIETNAM)
			SetDynamicObjectMaterial(VWObjectiveInfo[id][Object], 0, -1, "none", "none", 0xFEE00000);
		else if(VWObjectiveInfo[id][Team] == VW_NEUTRAL)
			SetDynamicObjectMaterial(VWObjectiveInfo[id][Object], 0, -1, "none", "none", 0xFF0000AA);
		else
			SetDynamicObjectMaterial(VWObjectiveInfo[id][Object], 0, -1, "none", "none", 0xFFFFFFAA);
	}
}

stock DestroyTheVWCar(id)
{
    VWVehicles[id][Exists] = 0;
	if(VWVehicles[id][ID] != -1)DestroyVehicle(VWVehicles[id][ID]);
	VWVehicles[id][ID] = -1;
}
stock CreateTheVWCar(team, modelid, Float:spawn_x, Float:spawn_y, Float:spawn_z, Float:z_angle, color1, color2, respawn_delay)
{
    new id = -1;
    forLoop(i, MAX_VW_VEHICLES)
	{
		if(VWVehicles[i][Exists] == 0)
	    {
			id = i;
			break;
		}
	}
    if(id != -1)
    {
        new world = W_VW;
        if(team == VW_VIETNAM)
        	world = W_VW_VIETNAM;
        else if(team == VW_USA)
            world = W_VW_USA;
            
	    new vehid = AddStaticVehicleEx(modelid, Float:spawn_x, Float:spawn_y, Float:spawn_z, Float:z_angle, color1, color2, respawn_delay);

	    SetVehicleVirtualWorld(vehid, world);
	    LinkVehicleToInterior(vehid, 0);
	    SetVehicleNumberPlate(vehid, ServerInfo[lPlate]);
	    VWVehicles[id][ID] = vehid;
	    VWVehicles[id][posWorld] = world;
	    VWVehicles[id][Team] = team;
    	VWVehicles[id][Exists] = 1;
    	return vehid;
    }
    return -1;
}

stock VWChangeMap()
{
    if(++VWInfo[Map] >= sizeof(VWMapNames))VWInfo[Map] = 0;
	VWSettings();
	new str[126];
	format(str, sizeof(str), "[NEWS] Enemies will now face each other in %s.",VWMapNames[VWInfo[Map]]);
	db_SaveChat(-1, VW,str);
	format(str, sizeof str, "{33FF33}NEWS:{FFFFFF} Enemies will now face each other in %s.",VWMapNames[VWInfo[Map]]);
 	SendMessageToMode(VW,COLOR_WHITE, str);
	if ((TeamCountVW(VW_USA) > TeamCountVW(VW_VIETNAM) && (TeamCountVW(VW_USA) - TeamCountVW(VW_VIETNAM)) >= 2)
		|| (TeamCountVW(VW_USA) < TeamCountVW(VW_VIETNAM) && (TeamCountVW(VW_VIETNAM) - TeamCountVW(VW_USA)) >= 2))
	{
	    SendMessageToMode(VW,COLOR_WHITE, "{FF0000}TEAM BALANCER{FFFFFF} Teams will be balanced in five seconds!");
	    SetTimerEx("BalanceModeTeams", 5000, false, "i", VW);
	}
	db_UpdateSettings(VW);
}
stock VWSettings()
{
	new objID = -1;
    forLoop(id, MAX_VW_VEHICLES)
    {
    	if(VWVehicles[id][Exists] == 1)
			DestroyTheVWCar(id);
    }
    forLoop(id, VW_MAX_OBJECTIVES)
	    VWDestroyObjective(id);
    forLoop(i, MAX_CLASS_ACTIONS)
		VWDestroyClassAction(i);

	VWInfo[changeScore] = 0;
	VWInfo[tScore][VW_USA] = 920;
	VWInfo[tScore][VW_VIETNAM] = 920;
    if(VWInfo[Map] == VW_MOUNT)
	{
	    objID = VWCreateObjective(VW_USA, 0, "HQ", W_VW_USA, 0, -1579.8679, -2742.9312, 48.2257, -1523.1830, -2807.7385, 59.4518, -1553.9137, -2733.3293, 50.0979);
	    if(objID != -1)
	    {
	        VWObjectiveAddSpawn(objID, -1528.8381, -2739.7329, 49.2126,190.0);
	    }
	    
	    objID = VWCreateObjective(VW_VIETNAM, 0, "HQ", W_VW_VIETNAM, 0, -1574.4810, -1547.1172, 37.1282, -1758.5035, -1558.8962, 51.4443, -1647.2225, -1560.8977, 6.5942);
	    if(objID != -1)
	    {
	        VWObjectiveAddSpawn(objID, -1578.0634, -1477.3867, 39.2581,90);
	    }
	    
	    objID = VWCreateObjective(VW_NEUTRAL, 1, "A", W_VW, 0, -2147.2822,-2446.9446,30.6250, -2163.6746, -2570.9702, 78.7862, -2137.8538, -2440.9075, 31.3653);
	    if(objID != -1)
	    {
	        VWObjectiveAddSpawn(objID, -2201.6204,-2421.6516,30.6250,329.3146); // area 1 spawn 1
			VWObjectiveAddSpawn(objID, -2057.0305,-2450.9451,30.6250,130.0561); // area 1 spawn 2
			VWObjectiveAddSpawn(objID, -2097.7444,-2369.8389,30.6250,64.8821); // area 1 spawn 3
			VWObjectiveAddSpawn(objID, -2190.1204,-2323.7954,30.6250,87.1290); // area 1 spawn 4
			VWObjectiveAddSpawn(objID, -2288.6138,-2369.9031,34.0293,236.2771); // area 1 spawn 5
			VWObjectiveAddSpawn(objID, -2052.5073,-2520.7319,30.6250,60.5187); // area 1 spawn 6
	    }
	    objID = VWCreateObjective(VW_NEUTRAL, 1, "B", W_VW, 0, -1858.8364,-1650.8579,26.6815, -1744.6809, -1520.7260, 59.2404, -1795.8182, -1610.0087, 22.7998);
	    if(objID != -1)
	    {
			VWObjectiveAddSpawn(objID, -1797.5007,-1677.1960,21.9946,120.4171); // area 3 spawn 1
			VWObjectiveAddSpawn(objID, -1905.5109,-1637.0437,21.7500,226.3014); // area 3 spawn 2
			VWObjectiveAddSpawn(objID, -1917.9041,-1708.2739,21.7500,248.8616); // area 3 spawn 3
			VWObjectiveAddSpawn(objID, -1874.9781,-1602.5868,21.7500,175.5409); // area 3 spawn 4
			VWObjectiveAddSpawn(objID, -1953.7125,-1600.2719,87.6676,165.8040); // area 3 spawn 5
			VWObjectiveAddSpawn(objID, -1859.3665,-1727.2634,21.7500,52.3996); // area 3 spawn 6
	    }
	    objID = VWCreateObjective(VW_NEUTRAL, 1, "C", W_VW, 0, -2308.1108,-1655.5354,483.6862, -2214.2974, -1697.4657, 488.6646, -2234.8481, -1739.3876, 476.3910);
	    if(objID != -1)
	    {
			VWObjectiveAddSpawn(objID, -2244.6970,-1742.1421,479.6559,340.4271); // area 4 spawn 1
			VWObjectiveAddSpawn(objID, -2398.2749,-1668.9418,479.4604,126.4418); // area 4 spawn 2
			VWObjectiveAddSpawn(objID, -2382.6924,-1581.6052,501.3648,220.7560); // area 4 spawn 3
			VWObjectiveAddSpawn(objID, -2317.8357,-1733.9946,477.3441,295.9568); // area 4 spawn 4
			VWObjectiveAddSpawn(objID, -2291.2307,-1575.9639,475.8492,144.6387); // area 4 spawn 5
			VWObjectiveAddSpawn(objID, -2364.5457,-1729.5941,482.6192,307.8635); // area 4 spawn 6
	    }

	    CreateTheVWCar(VW_VIETNAM,432,-1606.6198,-1506.8921,37.7407,172.2589, -1,-1, 70); // viet
		CreateTheVWCar(VW_VIETNAM,432,-1619.4305,-1506.1223,37.5725,169.0359, -1,-1, 70); //
		CreateTheVWCar(VW_VIETNAM,432,-1632.8843,-1505.0636,37.0872,165.8898, -1,-1, 70); //
		CreateTheVWCar(VW_VIETNAM,432,-1625.5745,-1505.0820,37.3308,168.2079, -1,-1, 70); //
		CreateTheVWCar(VW_VIETNAM,425,-1663.6396,-1524.5188,36.1646,127.8847, -1,-1, 70); //
		CreateTheVWCar(VW_VIETNAM,476,-1670.3066,-1513.6931,36.5604,101.3005, -1,-1, 70); //
		CreateTheVWCar(VW_VIETNAM,476,-1708.3840,-1486.0725,35.3870,115.5012, -1,-1, 70); //
		CreateTheVWCar(VW_VIETNAM,432,-1639.4988,-1503.2717,36.5597,165.0689, -1,-1, 70); //
		CreateTheVWCar(VW_VIETNAM,425,-1654.7535,-1532.3369,36.3694,144.0163, -1,-1, 70); //
		CreateTheVWCar(VW_VIETNAM,520,-1638.4741,-1545.6266,36.2234,182.4826, -1,-1, 70); //
		CreateTheVWCar(VW_VIETNAM,520,-1625.9984,-1551.2396,36.1466,112.7689, -1,-1, 70); //
		CreateTheVWCar(VW_VIETNAM,500,-1600.9425,-1598.0793,35.7127,17.3198, -1,-1, 70); //
		CreateTheVWCar(VW_VIETNAM,500,-1606.6854,-1600.2208,35.9368,21.9291, -1,-1, 70); //
		CreateTheVWCar(VW_VIETNAM,500,-1546.7050,-1496.2504,36.7043,142.7779, -1,-1, 70); //
		CreateTheVWCar(VW_VIETNAM,468,-1543.5525,-1501.3563,36.7790,106.0513, -1,-1, 70); //
		CreateTheVWCar(VW_VIETNAM,468,-1542.5824,-1504.5172,37.1116,112.3315, -1,-1, 70); //
		CreateTheVWCar(VW_VIETNAM,468,-1540.5201,-1507.2468,37.3584,110.0050, -1,-1, 70); //
		CreateTheVWCar(VW_VIETNAM,432,-1528.1041,-1536.7698,38.0938,113.3982, -1,-1, 70); //
		CreateTheVWCar(VW_VIETNAM,432,-1524.9592,-1550.8181,38.1601,108.2720, -1,-1, 70); //
		CreateTheVWCar(VW_VIETNAM,432,-1518.6930,-1562.6733,38.1923,94.5503, -1,-1, 70); //
		CreateTheVWCar(VW_VIETNAM,432,-1517.2496,-1571.0109,38.2974,95.8327, -1,-1, 70); //
		CreateTheVWCar(VW_VIETNAM,471,-1537.5498,-1510.6987,37.3191,137.3660, -1,-1, 70); //
		CreateTheVWCar(VW_VIETNAM,471,-1535.8619,-1513.3875,37.3671,152.6165, -1,-1, 70); //
		CreateTheVWCar(VW_VIETNAM,447,-1612.3785,-1559.9792,35.4616,116.5578, -1,-1, 70); //
		CreateTheVWCar(VW_VIETNAM,447,-1606.4753,-1569.6191,35.3931,117.4090, -1,-1, 70); //
		CreateTheVWCar(VW_VIETNAM,447,-1605.3384,-1544.0262,35.3385,114.4428, -1,-1, 70); //
		CreateTheVWCar(VW_VIETNAM,447,-1595.5851,-1557.9966,35.7148,122.5859, -1,-1, 70); //
		CreateTheVWCar(VW_VIETNAM,487,-1583.7189,-1537.8816,36.8358,109.5571, -1,-1, 70); //
		CreateTheVWCar(VW_VIETNAM,487,-1611.7511,-1535.3743,36.0714,120.0234, -1,-1, 70); //
		CreateTheVWCar(VW_VIETNAM,548,-1575.3141,-1569.9827,39.5575,114.1226, -1,-1, 70); //
		CreateTheVWCar(VW_VIETNAM,487,-1575.1642,-1548.6735,36.4301,135.8347, -1,-1, 70); //
		CreateTheVWCar(VW_VIETNAM,425,-1625.1943,-1565.0338,36.0431,115.3938, -1,-1, 70); //
		CreateTheVWCar(VW_VIETNAM,580,-1513.8760,-1585.5851,38.5253,113.0684, -1,-1, 70); //
		CreateTheVWCar(VW_VIETNAM,400,-1511.4034,-1588.1030,39.0532,116.3765, -1,-1, 70); //
		CreateTheVWCar(VW_VIETNAM,578,-1511.0260,-1593.9581,39.7719,93.7269, -1,-1, 70); //
		CreateTheVWCar(VW_VIETNAM,422,-1515.2362,-1580.3064,38.5030,109.4094, -1,-1, 70); //
		CreateTheVWCar(VW_VIETNAM,563,-1561.5269,-1585.1627,38.8248,92.5675, -1,-1, 70); //
		CreateTheVWCar(VW_VIETNAM,520,-1610.1854,-1580.2001,36.4143,103.7497, -1,-1, 70); //
		CreateTheVWCar(VW_VIETNAM,447,-1587.7208,-1564.8772,35.9833,120.5836, -1,-1, 70); //
		
		CreateTheVWCar(VW_USA,432,-1552.4460,-2747.8496,48.5429,156.6841, -1,-1, 70); // usa cars
		CreateTheVWCar(VW_USA,432,-1561.7668,-2742.6699,48.6112,150.5493, -1,-1, 70); //
		CreateTheVWCar(VW_USA,476,-1547.5446,-2820.4065,47.6970,77.8523, -1,-1, 70); //
		CreateTheVWCar(VW_USA,476,-1519.5598,-2846.5005,47.6995,84.0085, -1,-1, 70); //
		CreateTheVWCar(VW_USA,476,-1514.5199,-2830.8994,47.7604,78.9165, -1,-1, 70); //
		CreateTheVWCar(VW_USA,476,-1493.5200,-2853.7598,47.9381,79.4277, -1,-1, 70); //
		CreateTheVWCar(VW_USA,447,-1624.3960,-2708.6750,48.4713,335.0444, -1,-1, 70); //
		CreateTheVWCar(VW_USA,425,-1640.5321,-2696.9641,49.3021,156.6146, -1,-1, 70); //
		CreateTheVWCar(VW_USA,425,-1652.9794,-2686.8103,49.2081,155.9957, -1,-1, 70); //
		CreateTheVWCar(VW_USA,520,-1590.4497,-2709.6277,49.2594,144.3949, -1,-1, 70); //
		CreateTheVWCar(VW_USA,520,-1580.6631,-2717.5981,49.2720,157.9936, -1,-1, 70); //
		CreateTheVWCar(VW_USA,520,-1596.5791,-2724.1609,49.2690,147.2148, -1,-1, 70); //
		CreateTheVWCar(VW_USA,520,-1586.4290,-2730.6191,49.2688,146.9212, -1,-1, 70); //
		CreateTheVWCar(VW_USA,432,-1566.9534,-2740.5164,48.6101,144.4538, -1,-1, 70); //
		CreateTheVWCar(VW_USA,432,-1572.6444,-2735.4304,48.6090,149.7987, -1,-1, 70); //
		CreateTheVWCar(VW_USA,432,-1577.8778,-2732.3833,48.6101,145.4604, -1,-1, 70); //
		CreateTheVWCar(VW_USA,548,-1597.6443,-2790.2180,48.6905,123.3967, -1,-1, 70); //
		CreateTheVWCar(VW_USA,563,-1554.7415,-2794.9102,48.4778,232.9820, -1,-1, 70); //
		CreateTheVWCar(VW_USA,520,-1503.7191,-2798.4856,49.2591,85.7672, -1,-1, 70); //
		CreateTheVWCar(VW_USA,432,-1505.6868,-2786.2815,48.6107,106.8225, -1,-1, 70); //
		CreateTheVWCar(VW_USA,432,-1509.4183,-2776.8723,48.6056,129.9800, -1,-1, 70); //
		CreateTheVWCar(VW_USA,468,-1517.0073,-2750.8762,48.1285,132.9950, -1,-1, 70); //
		CreateTheVWCar(VW_USA,468,-1514.6865,-2753.0686,48.2206,151.4956, -1,-1, 70); //
		CreateTheVWCar(VW_USA,471,-1513.5463,-2756.9958,48.0652,93.4657, -1,-1, 70); //
		CreateTheVWCar(VW_USA,580,-1550.1525,-2722.1760,48.3327,234.2856, -1,-1, 70); //
		CreateTheVWCar(VW_USA,489,-1523.6914,-2748.0457,48.6833,142.4256, -1,-1, 70); //
		CreateTheVWCar(VW_USA,489,-1519.9562,-2749.6404,48.6616,154.7514, -1,-1, 70); //
		CreateTheVWCar(VW_USA,487,-1540.8920,-2771.9861,48.7835,4.7610, -1,-1, 70); //

		CreateTheVWCar(VW_NEUTRAL,520,-2344.0818,-1614.3354,484.3929,254.5787, -1,-1, 70); // obj C cars
		CreateTheVWCar(VW_NEUTRAL,476,-2327.2080,-1595.9082,484.4379,189.5028, -1,-1, 70); //
		CreateTheVWCar(VW_NEUTRAL,476,-2311.3386,-1604.5629,484.5821,189.0339, -1,-1, 70); //
		CreateTheVWCar(VW_NEUTRAL,520,-2325.1084,-1612.1257,484.4571,200.3964, -1,-1, 70); //
		CreateTheVWCar(VW_NEUTRAL,425,-2346.5852,-1626.8434,484.2979,278.2819, -1,-1, 70); //
		CreateTheVWCar(VW_NEUTRAL,500,-2349.7876,-1637.8947,483.7547,273.3099, -1,-1, 70); //
		CreateTheVWCar(VW_NEUTRAL,500,-2350.2244,-1642.0922,483.7538,261.0607, -1,-1, 70); //
		CreateTheVWCar(VW_NEUTRAL,468,-2350.6721,-1647.2981,483.3797,288.6845, -1,-1, 70); //
		CreateTheVWCar(VW_NEUTRAL,468,-2349.1633,-1650.2650,483.3805,288.6845, -1,-1, 70); //
		CreateTheVWCar(VW_NEUTRAL,593,-2344.6431,-1656.3083,484.1669,283.6080, -1,-1, 70); //
		CreateTheVWCar(VW_NEUTRAL,471,-2316.9910,-1708.4266,481.1414,169.0422, -1,-1, 70); //
		CreateTheVWCar(VW_NEUTRAL,481,-2240.9382,-1747.8220,480.2926,217.8584, -1,-1, 70); //
		CreateTheVWCar(VW_NEUTRAL,510,-2244.6331,-1748.2712,479.8936,194.9202, -1,-1, 70); //
		CreateTheVWCar(VW_NEUTRAL,520,-1827.6320,-1650.5989,22.6843,120.6622, -1,-1, 70); // b
		CreateTheVWCar(VW_NEUTRAL,500,-1831.3661,-1668.1023,21.8265,32.6041, -1,-1, 70); //
		CreateTheVWCar(VW_NEUTRAL,468,-1876.5430,-1680.2655,21.4192,20.2007, -1,-1, 70); //
		CreateTheVWCar(VW_NEUTRAL,425,-1883.6248,-1586.8750,22.3765,16.3057, -1,-1, 70); //
		CreateTheVWCar(VW_NEUTRAL,447,-1891.8605,-1570.8406,21.7794,292.6677, -1,-1, 70); //
		CreateTheVWCar(VW_NEUTRAL,468,-1850.7998,-1574.7377,21.4268,222.4152, -1,-1, 70); //
		CreateTheVWCar(VW_NEUTRAL,471,-1848.6105,-1596.7789,21.2758,273.2482, -1,-1, 70); //  A
		CreateTheVWCar(VW_NEUTRAL,500,-2147.6223,-2475.3328,30.6818,206.6668, -1,-1, 70); //
		CreateTheVWCar(VW_NEUTRAL,500,-2121.3267,-2493.2944,30.6755,230.4286, -1,-1, 70); //
		CreateTheVWCar(VW_NEUTRAL,468,-2137.6172,-2426.0137,30.3017,33.0110, -1,-1, 70); //
		CreateTheVWCar(VW_NEUTRAL,447,-2156.5129,-2456.0283,35.3417,317.9379, -1,-1, 70); //
		CreateTheVWCar(VW_NEUTRAL,463,-2170.2681,-2522.8853,30.1982,145.3265, -1,-1, 70); //
		CreateTheVWCar(VW_NEUTRAL,425,-2042.9003,-2365.7751,41.4905,100.0418, -1,-1, 70); //
		CreateTheVWCar(VW_NEUTRAL,520,-2028.9635,-2374.5535,36.6135,305.7374, -1,-1, 70); //
		CreateTheVWCar(VW_NEUTRAL,468,-2103.9229,-2371.5806,30.2938,40.8125, -1,-1, 70); //
		CreateTheVWCar(VW_NEUTRAL,500,-2212.8335,-2285.4727,30.7270,114.1662, -1,-1, 70); //
	}
	VWUpdateDeployObjectives();
	VWUpdateObjectiveTxT();
}
//=====================[VW]=============================

//=====================[ctf]=============================
stock CreateTheCTFCar(modelid, Float:spawn_x, Float:spawn_y, Float:spawn_z, Float:z_angle, color1, color2, respawn_delay)
{
	//printf("DEBUG CFONTROL CreateTheCTFCar 1");
	if(maxCTFvehicles >= MAX_CTF_VEHICLES)return -1;
    maxCTFvehicles++;
    CTFInfo[Vehicles][maxCTFvehicles]=AddStaticVehicleEx(modelid, Float:spawn_x, Float:spawn_y, Float:spawn_z, Float:z_angle, color1, color2, respawn_delay);
    SetVehicleVirtualWorld(CTFInfo[Vehicles][maxCTFvehicles],W_CTF);
    LinkVehicleToInterior(CTFInfo[Vehicles][maxCTFvehicles],CTFSpawnInterior[CTFInfo[Map]]);
    SetVehicleNumberPlate(CTFInfo[Vehicles][maxCTFvehicles], ServerInfo[lPlate]);
    return CTFInfo[Vehicles][maxCTFvehicles];
	//printf("DEBUG CFONTROL CreateTheCTFCar 2");
}

stock ChangeMapCTF()
{
	//printf("DEBUG CFONTROL ChangeMapCTF 1");
    if(++CTFInfo[Map] >= sizeof(CTFSpawnInterior))CTFInfo[Map] = 0;
	CTFSettings();
	db_UpdateSettings(CTF);
	new str[196];
	format(str, sizeof(str), "[NEWS] The Blues will face the Reds in %s.",CTFMapNames[CTFInfo[Map]]);
	db_SaveChat(-1, CTF,str);
	format(str, sizeof str, "{33FF33}NEWS:{FFFFFF} The Blues will face the Reds in %s.",CTFMapNames[CTFInfo[Map]]);
 	SendMessageToMode(CTF,COLOR_WHITE, str);
	if ((RedCountCTF() > BlueCountCTF() && (RedCountCTF() - BlueCountCTF()) >= 2) || (RedCountCTF() < BlueCountCTF() && (BlueCountCTF() - RedCountCTF()) >= 2))
	{
	    SendMessageToMode(CTF,COLOR_WHITE, "{FF0000}TEAM BALANCER{FFFFFF} Teams will be balanced in five seconds!");
	    SetTimerEx("BalanceModeTeams", 5000, false, "i", CTF);
	}
	//printf("DEBUG CFONTROL ChangeMapCTF 2");
}



stock PlaceFlagAtPlayerPos(playerid)
{
	//printf("DEBUG CFONTROL PlaceFlagAtPlayerPos 1");
	new str[128];
    new Float:x, Float:y, Float:z;
    new team = PlayerInfo[playerid][pTeam];
	new enemy = PlayerInfo[playerid][pTeam] == RED ? BLUE : RED;
	GetXYInFrontOfPlayer(playerid, x, y, z, 2.3);
    CTFFlagInfo[enemy][State] = 1;
    PlaceFlagAtPos(enemy, x,y,z);
    CreateFlagLabel(enemy, x, y, z);
    CTFEditFlagString(enemy, -1);
	CTFPlayerInfo[playerid][Capturing] = 0;
	RemovePlayerAttachedObjectEx(playerid, 8);
    if(PlayerInfo[playerid][pTeam] == RED)
	{
		//format(str,128,"{33FF33}NEWS:{FFFFFF} %s(ID:%d) dropped the {375FFF}%s{FFFFFF} flag!",PlayerInfo[playerid][Name],playerid,TeamNamesCTF[enemy]);
		//SendMessageToMode(CTF,white, str);
		format(str, sizeof(str), "[NEWS] %s[%d] dropped the %s flag!",PlayerInfo[playerid][Name],playerid,TeamNamesCTF[enemy]);
		db_SaveChat(-1, CTF,str);

		format(str,sizeof(str),"~r~~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ %s ~w~team dropped the flag",TeamNamesCTF[team]);
		GameTextForMode(CTF, str,2000, 3);
	}
	else
	{
		//format(str,128,"{33FF33}NEWS:{FFFFFF} %s(ID:%d) dropped the {FF0000}%s{FFFFFF} flag!",PlayerInfo[playerid][Name],playerid,TeamNamesCTF[enemy]);
		//SendMessageToMode(CTF,white, str);
		format(str, sizeof(str), "[NEWS] %s[%d] dropped the %s flag!",PlayerInfo[playerid][Name],playerid,TeamNamesCTF[enemy]);
		db_SaveChat(-1, CTF,str);

		format(str,sizeof(str),"~b~~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ %s ~w~team dropped the flag",TeamNamesCTF[team]);
		GameTextForMode(CTF, str,2000, 3);
	}

	KillTimer(CTFFlagInfo[enemy][Timer]);
    CTFFlagInfo[enemy][Timer] = SetTimerEx("ReturnTheFlag", 15000, false, "i", enemy);
	//printf("DEBUG CFONTROL PlaceFlagAtPlayerPos 2");
}
forward ReturnTheFlag(team);
public ReturnTheFlag(team)
{
    KillTimer(CTFFlagInfo[team][Timer]);
    if(CTFFlagInfo[team][State] == 1)
    {
        new str[100], color[2][9];
		CTFFlagInfo[team][State] = 0;
		if(team == BLUE)
		{
		    format(color[0], 9, "{375FFF}");
		    format(color[1], 9, "~b~");
		    CreateFlagLabel(team, CTFBlueFlagPlace[CTFInfo[Map]][1], CTFBlueFlagPlace[CTFInfo[Map]][2], CTFBlueFlagPlace[CTFInfo[Map]][3]);
			PlaceFlagAtPos(team, CTFBlueFlagPlace[CTFInfo[Map]][1], CTFBlueFlagPlace[CTFInfo[Map]][2], CTFBlueFlagPlace[CTFInfo[Map]][3]);
		}
		else
		{
		    format(color[0], 9, "{FF0000}");
		    format(color[1], 9, "~r~");
		    CreateFlagLabel(team, CTFRedFlagPlace[CTFInfo[Map]][1], CTFRedFlagPlace[CTFInfo[Map]][2], CTFRedFlagPlace[CTFInfo[Map]][3]);
			PlaceFlagAtPos(team, CTFRedFlagPlace[CTFInfo[Map]][1], CTFRedFlagPlace[CTFInfo[Map]][2], CTFRedFlagPlace[CTFInfo[Map]][3]);
		}
	    format(str,128,"{33FF33}NEWS:{FFFFFF} %s%s{FFFFFF} team flag return!",color[0],TeamNamesCTF[team]);
		SendMessageToMode(CTF,white, str);
    	CTFEditFlagString(team, -2);
		format(str, sizeof(str), "[NEWS] %s team flag return!",TeamNamesCTF[team]);
		db_SaveChat(-1, CTF,str);
		format(str,sizeof(str),"%s~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ %s ~w~team flag return",color[1],TeamNamesCTF[team]);
		GameTextForMode(CTF, str,3000, 3);
    }
	return 0;
}

forward MapIconOnFlag(i);
public MapIconOnFlag(i)
{
	new Float:x, Float:y, Float:z;
	if(PlayerInfo[i][PlayerMode] == CTF && PlayerInfo[i][Spawned] == 1)
	{
		forLoop(a, 7)
	    	RemovePlayerMapIcon(i,a);
        forLoopV(id, 1, 3)
		{
		    if(CTFFlagInfo[id][State] != 2)
    		{
    		    GetDynamicObjectPos(CTFFlagInfo[id][Object][0], x,y,z);
    		    if(id == BLUE)SetPlayerMapIcon(i,1,x,y,z,30,0,1);
			    else SetPlayerMapIcon(i,2,x,y,z,20,0,1);
    		}
    		else
    		{
    		    forLoop(u, MAX_PLAYERS)
				{
					if(IsPlayerConnected(u))
					{
						if(PlayerInfo[u][PlayerMode] == CTF && PlayerInfo[u][Spawned] == 1 && CTFPlayerInfo[u][Capturing] == 1)
						{
						    GetPlayerPos(u, x,y,z);
						    if(PlayerInfo[u][pTeam] == RED)SetPlayerMapIcon(i,3,x,y,z,30,0,1);
						    else SetPlayerMapIcon(i,4,x,y,z,20,0,1);
						}
					}
				}
    		}
		}
	    if(CTFPlayerInfo[i][Capturing] == 1)
	    {
		    if(PlayerInfo[i][pTeam] == BLUE)SetPlayerMapIcon(i,5,CTFBlueFlagPlace[CTFInfo[Map]][1], CTFBlueFlagPlace[CTFInfo[Map]][2], CTFBlueFlagPlace[CTFInfo[Map]][3],31,0,1);
		    else SetPlayerMapIcon(i,6,CTFRedFlagPlace[CTFInfo[Map]][1], CTFRedFlagPlace[CTFInfo[Map]][2], CTFRedFlagPlace[CTFInfo[Map]][3],31,0,1);
	    }
	}
	return 0;
}

stock CheckCTFFlagStates(playerid, areaid)
{
    if(PlayerInfo[playerid][PlayerMode] == CTF && PlayerInfo[playerid][Spawned] == 1 && PlayerInfo[playerid][ZoneDead] == 0 && !IsPlayerInAnyVehicle(playerid) && GetPlayerVirtualWorld(playerid)==W_CTF)
	{
		new enemy = PlayerInfo[playerid][pTeam] == RED ? BLUE : RED;
		new team = PlayerInfo[playerid][pTeam];
        new str[120], color[2][9];
		//protect your flag msg
		if(CTFFlagInfo[team][State] == 0 && areaid == CTFFlagInfo[team][Area])
	    	GameTextForPlayer(playerid, "~w~~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ Protect your flag",900, 3);
		//returning flag
		if(CTFFlagInfo[team][State] == 1 && areaid == CTFFlagInfo[team][Area])
	    {
            CTFFlagInfo[team][State] = 0;
			if(PlayerInfo[playerid][pTeam] == RED)
			{
			    format(color[0], 9, "{FF0000}");
			    format(color[1], 9, "~r~");
		    	CreateFlagLabel(team, CTFRedFlagPlace[CTFInfo[Map]][1], CTFRedFlagPlace[CTFInfo[Map]][2], CTFRedFlagPlace[CTFInfo[Map]][3]);
				PlaceFlagAtPos(team, CTFRedFlagPlace[CTFInfo[Map]][1], CTFRedFlagPlace[CTFInfo[Map]][2], CTFRedFlagPlace[CTFInfo[Map]][3]); // return to spawn
			}
			else
			{
			    format(color[0], 9, "{375FFF}");
			    format(color[1], 9, "~b~");
		    	CreateFlagLabel(team, CTFBlueFlagPlace[CTFInfo[Map]][1], CTFBlueFlagPlace[CTFInfo[Map]][2], CTFBlueFlagPlace[CTFInfo[Map]][3]);
				PlaceFlagAtPos(team, CTFBlueFlagPlace[CTFInfo[Map]][1], CTFBlueFlagPlace[CTFInfo[Map]][2], CTFBlueFlagPlace[CTFInfo[Map]][3]); // return to spawn
			}
    		CTFEditFlagString(team, -2);
			format(str,128,"{33FF33}NEWS:{FFFFFF} %s(ID:%d) returned the %s%s{FFFFFF} flag!",PlayerInfo[playerid][Name],playerid,color[0],TeamNamesCTF[PlayerInfo[playerid][pTeam]]);
			SendMessageToMode(CTF,white, str);
			format(str, sizeof(str), "[NEWS] %s[%d] returned the %s flag!",PlayerInfo[playerid][Name],playerid,TeamNamesCTF[PlayerInfo[playerid][pTeam]]);
			db_SaveChat(-1, CTF,str);
			format(str,sizeof(str),"%s~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ %s ~w~team flag return",color[1],TeamNamesCTF[PlayerInfo[playerid][pTeam]]);
			GameTextForMode(CTF, str,3000, 3);
			return 1;
	    }

	    //capturing flag
		if(CTFFlagInfo[enemy][State] != 2)//not being captured
	    {
	        if(areaid == CTFFlagInfo[enemy][Area])
			{
	            if(PlayerInfo[playerid][pTeam] == RED)
				{
			    	format(color[0], 9, "{375FFF}");
			    	format(color[1], 9, "~r~");
				}
				else
				{
			    	format(color[0], 9, "{FF0000}");
			    	format(color[1], 9, "~b~");
				}

				format(str,sizeof(str),"{33FF33}NEWS:{FFFFFF} %s(ID:%d) picked up the %s%s{FFFFFF} flag!",PlayerInfo[playerid][Name],playerid,color[0],TeamNamesCTF[enemy]);
				if(CTFFlagInfo[enemy][State] == 0)SendMessageToMode(CTF,white, str);
				format(str, sizeof(str), "[NEWS] %s[%d] picked up the %s flag!",PlayerInfo[playerid][Name],playerid,TeamNamesCTF[enemy]);
				db_SaveChat(-1, CTF,str);
				format(str,sizeof(str),"%s~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ %s ~w~team has the flag",color[1],TeamNamesCTF[PlayerInfo[playerid][pTeam]]);
				GameTextForMode(CTF, str,2000, 3);

	            SetPlayerAttachedObjectEx(playerid,8,11245,1,-0.025000,-0.195000,-0.147000,-42.399929,30.800006,13.900002,0.342999,0.125000,0.316999);
				CTFFlagInfo[enemy][State] = 2;
	            CTFPlayerInfo[playerid][Capturing] = 1;
    			DestroyTheDynamic3DTextLabel(CTFFlagInfo[enemy][pLabel]);
				
				CTFEditFlagString(team, playerid);
	            PlaceFlagAtPos(enemy, 0, 0, -66);
				return 1;
			}
	    }

	    //rreturning capturing flag or scoring in other words
		if(CTFPlayerInfo[playerid][Capturing] == 1 && CTFFlagInfo[enemy][State] == 2 && areaid == CTFFlagInfo[team][Area])
	    {
	       	if(CTFFlagInfo[team][State] != 0)return
	            GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~r~YOUR FLAG ISN't AT SPAWN", 2000, 3);
			if(PlayerInfo[playerid][pTeam] == BLUE)
			{
			    format(color[0], 9, "{375FFF}");
			    format(color[1], 9, "~b~");
		    	CreateFlagLabel(enemy, CTFRedFlagPlace[CTFInfo[Map]][1], CTFRedFlagPlace[CTFInfo[Map]][2], CTFRedFlagPlace[CTFInfo[Map]][3]);
				PlaceFlagAtPos(enemy, CTFRedFlagPlace[CTFInfo[Map]][1], CTFRedFlagPlace[CTFInfo[Map]][2], CTFRedFlagPlace[CTFInfo[Map]][3]); // return to spawn
			}
			if(PlayerInfo[playerid][pTeam] == RED)
			{
			    format(color[0], 9, "{FF0000}");
			    format(color[1], 9, "~r~");
		    	CreateFlagLabel(enemy, CTFBlueFlagPlace[CTFInfo[Map]][1], CTFBlueFlagPlace[CTFInfo[Map]][2], CTFBlueFlagPlace[CTFInfo[Map]][3]);
				PlaceFlagAtPos(enemy, CTFBlueFlagPlace[CTFInfo[Map]][1], CTFBlueFlagPlace[CTFInfo[Map]][2], CTFBlueFlagPlace[CTFInfo[Map]][3]); // return to spawn
			}
			CTFFlagInfo[enemy][State] = 0;
			CTFEditFlagString(enemy, -2);
			CTFPlayerInfo[playerid][Captures]++;
			ChangeModeScore(playerid, 35);
			RemovePlayerAttachedObject(playerid, 8);
			CTFPlayerInfo[playerid][Capturing] = 0;
			CTFInfo[Captures][team]++;

    		format(str, sizeof(str),"{33FF33}NEWS:{FFFFFF} %s(ID:%d) has scored for the %s%s{FFFFFF} team!",PlayerInfo[playerid][Name],playerid,color[0],TeamNamesCTF[team]);
			SendMessageToMode(CTF,white, str);
			format(str, sizeof(str), "[NEWS] %s[%d] has scored for the %s team!",PlayerInfo[playerid][Name],playerid,TeamNamesCTF[team]);
			db_SaveChat(-1, CTF,str);
			format(str,sizeof(str),"%s~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ %s ~w~team scored!",color[1],TeamNamesCTF[team]);
			GameTextForMode(CTF, str,2000, 3);
            updateCTFTexts();
			if(CTFInfo[Captures][team] >= 5)//red wins the round
			{
			    ChangeMapCTF();
	    		format(str,128,"{33FF33}NEWS:{FFFFFF} The %s%s{FFFFFF} team wins!",color[0],TeamNamesCTF[team]);
				SendMessageToMode(CTF,white, str);
				format(str, sizeof(str), "[NEWS] The %s team wins!",PlayerInfo[playerid][Name],playerid,TeamNamesCTF[team]);
				db_SaveChat(-1, CTF,str);
				format(str,sizeof(str),"%s~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ %s ~w~team wins!",color[1],TeamNamesCTF[team]);
				GameTextForMode(CTF, str,3000, 3);

				forLoop(i, MAX_PLAYERS)
				{
					if(IsPlayerConnected(i))
					{
						if(PlayerInfo[i][PlayerMode] == CTF && PlayerInfo[i][Spawned] == 1)
						{
							CTFPlayerInfo[i][Capturing] = 0;
							RemovePlayerAttachedObject(i, 8);
						    if(PlayerInfo[i][pTeam] == team)
						    {
						        CTFPlayerInfo[i][RoundsWon]++;
								ChangeModeScore(i, 25);
						    }
						    else
						    {
						        CTFPlayerInfo[i][RoundsLost]++;
								ChangeModeScore(i, -25);
						    }

							TogglePlayerControllable(i,false);
							SetPlayerWorldBounds(i, 20000.0000, -20000.0000, 20000.0000, -20000.0000 );
							SetPlayerPos(i, -2618.9778, 1442.3223, 8.4407);
							SetPlayerCameraPos(i, -2609.5032, 1447.3551, 22.3680);
							SetPlayerCameraLookAt(i, -2609.7451, 1448.3304, 22.5931);
                            SpawnPlayerTimer(i, 3000);
							hideCTFTexts(i);
						}
					}
				}
			}
			return 1;
	    }
   	}
   	return 0;
}

stock PlaceFlagAtPos(team, Float:x, Float:y, Float:z)
{
    DestroyTheDynamicArea(CTFFlagInfo[team][Area]);
    CTFFlagInfo[team][Area] = CreateDynamicSphere(x, y, z, 2.0, W_CTF, -1, -1);
    SetDynamicObjectPos(CTFFlagInfo[team][Object][0], x, y, z+1);
}

stock CreateFlagLabel(team, Float:x, Float:y, Float:z)
{
    DestroyTheDynamic3DTextLabel(CTFFlagInfo[team][pLabel]);
	if(team == BLUE)
		CTFFlagInfo[team][pLabel] = CreateDynamic3DTextLabel("[{375FFF}BLUE{FFFFFF}]",0xFFFFFFAA,x, y, z, 15000, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, W_CTF, -1, -1, 15000);
	else
		CTFFlagInfo[team][pLabel] = CreateDynamic3DTextLabel("[{FF0000}RED{FFFFFF}]",0xFFFFFFAA,x, y, z, 15000, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, W_CTF, -1, -1, 15000);
}

stock CTFEditFlagString(team, awdstate)
{
	switch(awdstate)
	{
	    case -1:
	    {
	        if(team == RED)TextDrawSetString(CTFInfo[td_RedInfo], "ON THE GROUND");
	        else TextDrawSetString(CTFInfo[td_BlueInfo], "ON THE GROUND");
	    }
	    case -2:
	    {
	        if(team == RED)TextDrawSetString(CTFInfo[td_RedInfo], "AT HOME");
	        else TextDrawSetString(CTFInfo[td_BlueInfo], "AT HOME");
	    }
	    default:
	    {
	        new str[120];
	        if(team == BLUE)
			{
	        	format(str, sizeof(str), "%s has the ~r~Red ~w~flag",FixpInfoName(awdstate));
				TextDrawSetString(CTFInfo[td_RedInfo], str);
			}
	        else
			{
	        	format(str, sizeof(str), "%s has the ~b~Blue ~w~flag",FixpInfoName(awdstate));
				TextDrawSetString(CTFInfo[td_BlueInfo], str);
			}
	    }
	}
}

stock CreateFlag(team, Float:x, Float:y, Float:z)
{
    DestroyTheDynamicArea(CTFFlagInfo[team][Area]);
    DestroyTheDynamic3DTextLabel(CTFFlagInfo[team][pLabel]);
    DestroyTheDynamicObject(CTFFlagInfo[team][Object][0]);
    DestroyTheDynamicObject(CTFFlagInfo[team][Object][1]);
    CTFFlagInfo[team][Area] = CreateDynamicSphere(x, y, z, 2.0, W_CTF, -1, -1);
    CTFFlagInfo[team][Object][0] = CreateTheDynamicObject(11245, x, y, z+1, 0.0000, -70.0, 0.0000, W_CTF);
    CTFFlagInfo[team][Object][1] = CreateTheDynamicObject(3252, x-0.25, y, z-12.2, 0.0, 0.0, 0.0000, W_CTF);

    CTFFlagInfo[team][State] = 0;
    CreateFlagLabel(team, x, y, z);
	if(team == BLUE)
	{
		SetDynamicObjectMaterial(CTFFlagInfo[team][Object][0], 0, -1, "none", "none", 0xFF0000AA);
		SetDynamicObjectMaterial(CTFFlagInfo[team][Object][1], 0, -1, "none", "none", 0xFF2C0FFF);
	}
	else
	{
		SetDynamicObjectMaterial(CTFFlagInfo[team][Object][0], 0, -1, "none", "none", 0xFEE00000);
		SetDynamicObjectMaterial(CTFFlagInfo[team][Object][1], 0, -1, "none", "none", 0xFEE00000);
	}
}
stock CreateCTFPicks(id,Float:x,Float:y)
{
	CTFWeaps[id][Golf]=CreateDynamicPickup(333,1,x-6,y+9,GetGroundZ(x-6,y+9)+1,W_CTF);
	CTFWeaps[id][Knife]=CreateDynamicPickup(335,1,x-6,y-9,GetGroundZ(x-6,y-9)+1,W_CTF);
	CTFWeaps[id][NiteStick]=CreateDynamicPickup(334,1,x+6,y-9,GetGroundZ(x+6,y-9)+1,W_CTF);
	CTFWeaps[id][Bat]=CreateDynamicPickup(336,1,x+6,y+9,GetGroundZ(x+6,y+9)+1,W_CTF);
	CTFWeaps[id][Shovel]=CreateDynamicPickup(337,1,x-9,y-12,GetGroundZ(x-9,y-12)+1,W_CTF);
	CTFWeaps[id][Pool]=CreateDynamicPickup(338,1,x+9,y+12,GetGroundZ(x+9,y+12)+1,W_CTF);
	CTFWeaps[id][Katana]=CreateDynamicPickup(339,1,x+9,y-12,GetGroundZ(x+9,y-12)+1,W_CTF);
	CTFWeaps[id][Chainsaw]=CreateDynamicPickup(341,1,x-9,y+12,GetGroundZ(x-9,y+12)+1,W_CTF);
	CTFWeaps[id][Dildo]=CreateDynamicPickup(321,1,x-12,y-9,GetGroundZ(x-12,y-9)+1,W_CTF);
	CTFWeaps[id][Cane]=CreateDynamicPickup(326,1,x-12,y+9,GetGroundZ(x-12,y+9)+1,W_CTF);
	CTFWeaps[id][Colt]=CreateDynamicPickup(346,1,x+12,y-9,GetGroundZ(x+12,y-9)+1,W_CTF);
	CTFWeaps[id][Silenced]=CreateDynamicPickup(347,1,x+12,y+9,GetGroundZ(x+12,y+9)+1,W_CTF);

	CTFWeaps[id][Rocket]=CreateDynamicPickup(359, 1,x+3,y,GetGroundZ(x+3,y)+1,W_CTF); // rocket
	CTFWeaps[id][Deagle]=CreateDynamicPickup(348,1,x,y+3,GetGroundZ(x,y+3)+1,W_CTF); // deagle
	CTFWeaps[id][Sniper]=CreateDynamicPickup(358, 1,x+3,y+3,GetGroundZ(x+3,y+3)+1,W_CTF); // sniper
	CTFWeaps[id][M4]=CreateDynamicPickup(356, 1,x+6,y,GetGroundZ(x+6,y)+1,W_CTF); // m4
	CTFWeaps[id][Ak]=CreateDynamicPickup(355, 1,x,y+6,GetGroundZ(x,y+6)+1,W_CTF); // ak
	CTFWeaps[id][Molotov]=CreateDynamicPickup(344,1,x+6,y+6,GetGroundZ(x+6,y+6)+1,W_CTF); // molotov
	CTFWeaps[id][Mp5]=CreateDynamicPickup(353, 1,x+9,y,GetGroundZ(x+9,y)+1,W_CTF); // mp5
	CTFWeaps[id][UZI]=CreateDynamicPickup(352, 1,x,y+9,GetGroundZ(x,y+9)+1,W_CTF); // uzi
	CTFWeaps[id][Tec]=CreateDynamicPickup(372, 1,x+9,y+9,GetGroundZ(x+9,y+9)+1,W_CTF); // tec
	CTFWeaps[id][Grenade]=CreateDynamicPickup(342, 1,x-3,y,GetGroundZ(x-3,y)+1,W_CTF); // grenade
	CTFWeaps[id][Shotgun]=CreateDynamicPickup(349, 1,x,y-3,GetGroundZ(x,y-3)+1,W_CTF); // shutgun
	CTFWeaps[id][Sawed]=CreateDynamicPickup(350, 1,x-3,y-3,GetGroundZ(x-3,y-3)+1,W_CTF); // sawedoff
	CTFWeaps[id][Spac]=CreateDynamicPickup(351,1,x-6,y,GetGroundZ(x-6,y)+1,W_CTF); // spac
	CTFWeaps[id][Rifle]=CreateDynamicPickup(357, 1,x,y-6,GetGroundZ(x,y-6)+1,W_CTF); // rifle
	CTFWeaps[id][gHP]=CreateDynamicPickup(1240, 2,x-9,y-9,GetGroundZ(x-9,y-9)+1,W_CTF);//health
	CTFWeaps[id][gArmor]=CreateDynamicPickup(1242, 2,x-6,y-6,GetGroundZ(x-6,y-6)+1,W_CTF);//armor
}
stock DestroyCTFPicks(id)
{
	//printf("DEBUG CFONTROL DestroyCTFPicks 1");
	DestroyTheDynamicPickup(CTFWeaps[id][Golf]);
	DestroyTheDynamicPickup(CTFWeaps[id][Knife]);
	DestroyTheDynamicPickup(CTFWeaps[id][NiteStick]);
	DestroyTheDynamicPickup(CTFWeaps[id][Bat]);
	DestroyTheDynamicPickup(CTFWeaps[id][Shovel]);
	DestroyTheDynamicPickup(CTFWeaps[id][Pool]);
	DestroyTheDynamicPickup(CTFWeaps[id][Katana]);
	DestroyTheDynamicPickup(CTFWeaps[id][Chainsaw]);
	DestroyTheDynamicPickup(CTFWeaps[id][Dildo]);
	DestroyTheDynamicPickup(CTFWeaps[id][Cane]);
	DestroyTheDynamicPickup(CTFWeaps[id][Colt]);
	DestroyTheDynamicPickup(CTFWeaps[id][Silenced]);

	DestroyTheDynamicPickup(CTFWeaps[id][Rocket]);
	DestroyTheDynamicPickup(CTFWeaps[id][Deagle]);
	DestroyTheDynamicPickup(CTFWeaps[id][Sniper]);
	DestroyTheDynamicPickup(CTFWeaps[id][M4]);
	DestroyTheDynamicPickup(CTFWeaps[id][Ak]);
	DestroyTheDynamicPickup(CTFWeaps[id][Molotov]);
	DestroyTheDynamicPickup(CTFWeaps[id][Mp5]);
	DestroyTheDynamicPickup(CTFWeaps[id][UZI]);
	DestroyTheDynamicPickup(CTFWeaps[id][Tec]);
	DestroyTheDynamicPickup(CTFWeaps[id][Grenade]);
	DestroyTheDynamicPickup(CTFWeaps[id][Shotgun]);
	DestroyTheDynamicPickup(CTFWeaps[id][Sawed]);
	DestroyTheDynamicPickup(CTFWeaps[id][Spac]);
	DestroyTheDynamicPickup(CTFWeaps[id][Rifle]);
	DestroyTheDynamicPickup(CTFWeaps[id][gHP]);
	DestroyTheDynamicPickup(CTFWeaps[id][gArmor]);
	//printf("DEBUG CFONTROL DestroyCTFPicks 2");
}


stock updateCTFTexts()
{
	new st[5];
	format(st, sizeof(st), "%d", CTFInfo[Captures][RED]);
	TextDrawSetString(CTFInfo[td_Red], st);
	format(st, sizeof(st), "%d", CTFInfo[Captures][BLUE]);
	TextDrawSetString(CTFInfo[td_Blue], st);
}

stock hideCTFTexts(playerid)
{
    TextDrawHideForPlayer(playerid,CTFInfo[td_Blue]);
    TextDrawHideForPlayer(playerid,CTFInfo[td_Red]);
    TextDrawHideForPlayer(playerid,CTFInfo[td_BlueInfo]);
    TextDrawHideForPlayer(playerid,CTFInfo[td_RedInfo]);
    forLoop(i, 3)TextDrawHideForPlayer(playerid,CTFInfo[td_BGs][i]);
    forLoop(i, 2)TextDrawHideForPlayer(playerid,CTFInfo[td_Fracs][i]);
}

stock showCTFTexts(playerid)
{
    TextDrawShowForPlayer(playerid,CTFInfo[td_Blue]);
    TextDrawShowForPlayer(playerid,CTFInfo[td_Red]);
    TextDrawShowForPlayer(playerid,CTFInfo[td_BlueInfo]);
    TextDrawShowForPlayer(playerid,CTFInfo[td_RedInfo]);
    forLoop(i, 3)TextDrawShowForPlayer(playerid,CTFInfo[td_BGs][i]);
    forLoop(i, 2)TextDrawShowForPlayer(playerid,CTFInfo[td_Fracs][i]);
}

stock CTFSettings()
{
	//printf("DEBUG CFONTROL CTFSettings 1");
    maxCTFvehicles=-1;
	forLoop(id, MAX_CTF_VEHICLES)
    {
    	if(CTFInfo[Vehicles][id] != -1)DestroyVehicle(CTFInfo[Vehicles][id]);
    	CTFInfo[Vehicles][id] = -1;
    }
    CTFInfo[Captures][RED] = 0;
    CTFInfo[Captures][BLUE] = 0;
    updateCTFTexts();
    DestroyCTFPicks(0);
    DestroyCTFPicks(1);
    TextDrawSetString(CTFInfo[td_RedInfo], "AT HOME");
	TextDrawSetString(CTFInfo[td_BlueInfo], "AT HOME");

	CreateFlag(BLUE, CTFBlueFlagPlace[CTFInfo[Map]][1], CTFBlueFlagPlace[CTFInfo[Map]][2], CTFBlueFlagPlace[CTFInfo[Map]][3]);//blue
    CreateFlag(RED, CTFRedFlagPlace[CTFInfo[Map]][1], CTFRedFlagPlace[CTFInfo[Map]][2], CTFRedFlagPlace[CTFInfo[Map]][3]);//red

    if(CTFInfo[Map]==KICK_STA)
	{
	    CreateTheCTFCar(468,-1479.4512,1642.8354,1052.2091,266.3836,79,79,120); // kickstart
		CreateTheCTFCar(468,-1479.2094,1641.3378,1052.1985,278.4793,79,79,120); // kickstart blue
		CreateTheCTFCar(468,-1478.3071,1638.5702,1052.2026,278.6364,79,79,120); // kickstart blue
		CreateTheCTFCar(468,-1356.8999,1570.7571,1052.1985,90.2254,3,3,120); // ks red
		CreateTheCTFCar(468,-1356.6907,1574.8508,1052.1984,89.8822,3,3,120); // ks red
		CreateTheCTFCar(468,-1356.7830,1578.0725,1052.1991,88.5036,3,3,120); // ks red
	}
    if(CTFInfo[Map]==RC_BF)
	{
	    CreateTheCTFCar(468,-998.2761,1097.8822,1342.5397,166.9007,79,79,120); // rc battle blue
		CreateTheCTFCar(468,-1115.3427,1019.7001,1343.6910,5.5442,3,3,120); // red rc
	}
    if(CTFInfo[Map]==BLOOD)
	{
	    CreateTheCTFCar(468,-1286.9445,1015.7027,1037.2675,115.1972,79,79,120); // boodbowl
		CreateTheCTFCar(468,-1289.7036,1020.7123,1037.3568,131.9963,79,79,120); // boodbowl blue
		CreateTheCTFCar(468,-1291.9230,1024.8386,1037.4246,115.5372,79,79,120); // boodbowl blue
		CreateTheCTFCar(468,-1297.3956,1028.9355,1037.4985,114.3533,79,79,120); // boodbowl blue
		CreateTheCTFCar(468,-1301.8711,1031.7543,1037.5601,121.0018,79,79,120); // boodbowl blue
		CreateTheCTFCar(468,-1306.3136,1035.0059,1037.6216,125.1303,79,79,120); // boodbowl blue
		CreateTheCTFCar(504,-1309.6924,1039.1711,1037.8192,140.8285,79,79,120); //
		CreateTheCTFCar(504,-1318.2974,1043.7949,1037.9120,149.0523,79,79,120); //
		CreateTheCTFCar(504,-1328.1953,1047.2922,1037.9873,147.1900,79,79,120); //
		CreateTheCTFCar(504,-1338.0878,1051.1187,1038.0680,145.1807,79,79,120); //
		CreateTheCTFCar(406,-1389.6967,997.5214,1025.6447,171.6596,88,88,120); //
		CreateTheCTFCar(556,-1383.0831,954.7729,1027.3088,63.6151,40,40,120); //
		CreateTheCTFCar(571,-1369.9860,987.4393,1023.2069,162.8484,40,40,120); //
		CreateTheCTFCar(571,-1398.7280,986.2276,1023.2370,93.1868,40,40,120); //
		CreateTheCTFCar(468,-1513.0544,1025.9612,1037.8386,232.9885,3,3,120); // bood red cars
		CreateTheCTFCar(468,-1515.1420,1021.8594,1037.7611,230.0041,3,3,120); //
		CreateTheCTFCar(468,-1516.9143,1019.6673,1037.7286,236.0826,3,3,120); //
		CreateTheCTFCar(468,-1518.2410,1017.8000,1037.6963,238.1001,3,3,120); //
		CreateTheCTFCar(468,-1519.5045,1015.3056,1037.6553,241.0349,3,3,120); //
		CreateTheCTFCar(468,-1520.1450,1013.3675,1037.6256,259.9323,3,3,120); //
		CreateTheCTFCar(504,-1516.7665,976.2985,1037.1686,302.0244,3,3,120); //
		CreateTheCTFCar(504,-1511.5616,966.8306,1037.0344,310.5608,3,3,120); //
		CreateTheCTFCar(504,-1503.5404,958.4780,1036.7906,315.0624,3,3,120); //
		CreateTheCTFCar(504,-1494.3837,951.6151,1036.6833,337.6192,3,3,120); //
	}
	if(CTFInfo[Map]==LS)
	{
	    CreateCTFPicks(0,2604.9844,-1492.1744);
	    CreateCTFPicks(1,176.1733,-1855.1251);

        CreateTheCTFCar(411,165.5722,-1821.7610,3.7829,270.3022,3,3, 120); // LS RED CARS
		CreateTheCTFCar(520,171.7853,-1777.5842,4.7578,242.5130,3,3, 120); //
		CreateTheCTFCar(520,189.3016,-1776.5828,4.4791,248.0633,3,3, 120); //
		CreateTheCTFCar(520,210.0153,-1777.2651,4.4846,241.1041,3,3, 120); //
		CreateTheCTFCar(520,225.0212,-1776.9086,4.7342,243.8509,3,3, 120); //
		CreateTheCTFCar(520,240.8890,-1777.4974,4.8195,236.3668,3,3, 120); //
		CreateTheCTFCar(476,168.3184,-1788.6699,4.8247,265.6171,3,3, 120); //
		CreateTheCTFCar(476,167.5714,-1801.8427,4.8170,268.7231,3,3, 120); //
		CreateTheCTFCar(425,153.9020,-1778.7819,4.7554,187.0177,3,3, 120); //
		CreateTheCTFCar(425,154.9145,-1811.7339,4.2607,142.7157,3,3, 120); //
		CreateTheCTFCar(593,168.0313,-1814.2640,4.6544,270.9618,3,3, 120); //
		CreateTheCTFCar(411,165.4180,-1826.4651,3.7050,272.3589,3,3, 120); //
		CreateTheCTFCar(411,165.2895,-1830.2758,3.6112,269.8253,3,3, 120); //
		CreateTheCTFCar(411,164.9828,-1834.2688,3.5531,264.5916,3,3, 120); //
		CreateTheCTFCar(522,189.5886,-1874.2820,2.0239,348.8189,3,3, 120); //
		CreateTheCTFCar(522,191.2317,-1874.9652,1.8306,345.9119,3,3, 120); //
		CreateTheCTFCar(522,192.7561,-1874.5371,1.9684,345.9576,3,3, 120); //
		CreateTheCTFCar(522,194.4064,-1874.8859,1.9183,345.9016,3,3, 120); //
		CreateTheCTFCar(522,188.8881,-1879.6611,1.4310,358.9889,3,3, 120); //
		CreateTheCTFCar(522,191.2345,-1880.6366,1.4500,359.0304,3,3, 120); //
		CreateTheCTFCar(522,194.2520,-1880.3008,1.4219,0.7258,3,3, 120); //
		CreateTheCTFCar(471,192.7547,-1880.2678,1.3408,1.7089,3,3, 120); //
		CreateTheCTFCar(471,189.9786,-1880.0391,1.3996,357.7324,3,3, 120); //
		CreateTheCTFCar(510,186.6900,-1875.1219,2.0080,355.6951,3,3, 120); //
		CreateTheCTFCar(510,184.7902,-1875.1914,2.0254,15.3961,3,3, 120); //
		CreateTheCTFCar(468,186.8103,-1880.0325,1.6329,359.7502,3,3, 120); //
		CreateTheCTFCar(468,184.1577,-1880.1245,1.6636,16.7284,3,3, 120); //
		CreateTheCTFCar(468,185.6904,-1880.1708,1.6431,2.7612,3,3, 120); //
		CreateTheCTFCar(460,172.4434,-1905.4624,1.6621,197.4507,3,3, 120); //
		CreateTheCTFCar(460,184.7133,-1902.7393,1.6443,189.2334,3,3, 120); //
		CreateTheCTFCar(493,193.7426,-1904.4856,-0.1732,193.0232,3,3, 120); //
		CreateTheCTFCar(493,203.3405,-1903.4745,0.1328,216.8071,3,3, 120); //
		CreateTheCTFCar(430,219.4520,-1905.7347,-0.2667,213.2294,3,3, 120); //
		CreateTheCTFCar(430,227.1520,-1904.9778,-0.3039,195.9042,3,3, 120); //
		CreateTheCTFCar(432,210.5875,-1862.3402,3.0458,0.6675,7,7, 120); //
		CreateTheCTFCar(432,219.8077,-1862.9425,2.9908,6.9356,3,3, 120); //
		CreateTheCTFCar(432,226.3993,-1862.0958,2.9842,0.8795,3,3, 120); //
		CreateTheCTFCar(432,234.6540,-1862.6466,2.9230,358.6863,3,3, 120); //
		CreateTheCTFCar(578,199.6715,-1863.1383,3.5503,3.0653,3,3, 120); //
		CreateTheCTFCar(431,205.0725,-1862.7739,3.0012,3.7135,3,3, 120); //
		CreateTheCTFCar(500,209.0711,-1875.5181,2.2504,353.9102,3,3, 120); //
		CreateTheCTFCar(500,213.4949,-1876.7634,2.0976,359.6924,3,3, 120); //
		CreateTheCTFCar(500,218.4172,-1877.0968,2.0190,355.9952,3,3, 120); //
		CreateTheCTFCar(500,223.1745,-1876.9545,1.9799,356.7929,3,3, 120); //
		CreateTheCTFCar(470,208.5340,-1882.9211,1.5396,353.9556,3,3, 120); //
		CreateTheCTFCar(470,212.5677,-1883.4496,1.4573,352.5533,3,3, 120); //
		CreateTheCTFCar(470,218.0533,-1883.4674,1.4410,353.0202,3,3, 120); //
		CreateTheCTFCar(470,222.5808,-1883.2340,1.4225,353.4369,3,3, 120); //
		CreateTheCTFCar(539,229.6655,-1877.7388,1.1203,357.5601,3,3, 120); //

		CreateTheCTFCar(471,2622.4634,-1504.9503,15.2367,161.9720,79,79, 120); // LS BLUE CARS
		CreateTheCTFCar(471,2621.2441,-1509.6093,14.8817,166.5169,79,79, 120); //
		CreateTheCTFCar(471,2621.7009,-1507.2394,15.1556,162.2198,7,7, 120); //
		CreateTheCTFCar(470,2619.9016,-1516.3752,14.9546,131.6232,79,79, 120); //
		CreateTheCTFCar(470,2619.0466,-1523.7904,14.3879,137.1830,79,79, 120); //
		CreateTheCTFCar(470,2618.3625,-1531.5356,13.7236,139.7733,79,79, 120); //
		CreateTheCTFCar(470,2618.3672,-1538.2076,12.9998,141.6530,79,79, 120); //
		CreateTheCTFCar(468,2585.4971,-1472.8009,16.3724,1.8527,79,79, 120); //
		CreateTheCTFCar(468,2585.6721,-1476.6506,16.3168,2.1424,79,79, 120); //
		CreateTheCTFCar(468,2586.6677,-1481.7333,16.2541,263.3636,79,79, 120); //
		CreateTheCTFCar(468,2586.5901,-1483.6050,16.2246,266.1454,79,79, 120); //
		CreateTheCTFCar(510,2586.7380,-1486.3113,16.1155,274.7437,79,79, 120); //
		CreateTheCTFCar(510,2586.5386,-1488.0116,16.0875,273.2495,79,79, 120); //
		CreateTheCTFCar(522,2586.5474,-1488.9324,16.0454,280.5236,79,79, 120); //
		CreateTheCTFCar(522,2589.7893,-1488.4845,16.0366,264.4135,79,79, 120); //
		CreateTheCTFCar(522,2588.8811,-1491.3870,15.9969,250.9884,79,79, 120); //
		CreateTheCTFCar(522,2585.8855,-1491.4960,15.9035,272.6737,79,79, 120); //
		CreateTheCTFCar(522,2585.9700,-1493.3771,15.9668,269.9173,79,79, 120); //
		CreateTheCTFCar(522,2589.3516,-1493.6057,15.9506,267.1815,79,79, 120); //
		CreateTheCTFCar(411,2588.0781,-1498.0923,16.0196,267.6494,79,79, 120); //
		CreateTheCTFCar(411,2588.0208,-1503.5219,15.5925,260.6977,79,79, 120); //
		CreateTheCTFCar(411,2587.5039,-1508.5070,15.0872,260.8061,79,79, 120); //
		CreateTheCTFCar(411,2586.4236,-1514.0283,14.5156,254.0542,79,79, 120); //
		CreateTheCTFCar(500,2584.7913,-1519.9327,14.2792,256.0299,79,79, 120); //
		CreateTheCTFCar(500,2583.0681,-1526.9166,13.4347,258.6593,79,79, 120); //
		CreateTheCTFCar(425,2579.7688,-1546.4651,10.9794,164.3749,79,79, 120); //
		CreateTheCTFCar(425,2606.2009,-1553.5273,11.4585,168.1061,7,7, 120); //
		CreateTheCTFCar(447,2611.2742,-1572.9390,7.8642,77.6721,79,79, 120); //
		CreateTheCTFCar(539,2568.9612,-1556.5824,7.8139,70.9807,79,79, 120); //
		CreateTheCTFCar(539,2567.1929,-1561.0681,7.0965,68.6427,79,79, 120); //
		CreateTheCTFCar(578,2559.7781,-1580.6890,5.6742,166.3006,79,79, 120); //
		CreateTheCTFCar(431,2558.2593,-1593.3461,4.3238,176.3910,79,79, 120); //
		CreateTheCTFCar(593,2570.9297,-1596.7117,4.6177,163.0579,79,79, 120); //
		CreateTheCTFCar(593,2584.2424,-1598.3148,4.6233,171.4079,79,79, 120); //
		CreateTheCTFCar(476,2606.6252,-1603.2689,4.6657,160.4235,79,79, 120); //
		CreateTheCTFCar(520,2591.6458,-1614.2653,4.2241,177.6390,79,79, 120); //
		CreateTheCTFCar(520,2578.8662,-1611.7069,4.2862,174.8645,79,79, 120); //
		CreateTheCTFCar(520,2564.2656,-1610.5525,4.4093,171.8012,79,79, 120); //
		CreateTheCTFCar(432,2605.9653,-1662.0680,2.0516,87.8733,79,79, 120); //
		CreateTheCTFCar(432,2605.3196,-1669.1390,1.8930,90.2406,79,79, 120); //
		CreateTheCTFCar(432,2606.4375,-1676.8179,1.7167,90.8196,79,79, 120); //
		CreateTheCTFCar(432,2607.6462,-1684.4973,1.6553,90.6962,79,79, 120); //
	}
	if(CTFInfo[Map]==SF)
	{
	    CreateCTFPicks(0,-2054.5427,-886.6977);
	    CreateCTFPicks(1,-2634.5969,1377.7726);

		CreateTheCTFCar(476,-2700.0686,1380.2640,7.8130,356.6001,3,3, 120); // SF RED CARS
		CreateTheCTFCar(468,-2689.7231,1390.5643,6.7660,79.6292,3,3, 120); //
		CreateTheCTFCar(468,-2688.6331,1394.0928,6.6841,82.0403,3,3, 120); //
		CreateTheCTFCar(468,-2688.0955,1397.2875,6.6807,79.7001,3,3, 120); //
		CreateTheCTFCar(468,-2687.5012,1399.8390,6.7638,76.4527,3,3, 120); //
		CreateTheCTFCar(471,-2654.8938,1373.0909,6.6254,356.5201,3,3, 120); //
		CreateTheCTFCar(468,-2651.4675,1394.2548,6.7631,198.5790,3,3, 120); //
		CreateTheCTFCar(468,-2649.1460,1394.6104,6.7750,188.0761,3,3, 120); //
		CreateTheCTFCar(468,-2646.6738,1395.1844,6.7600,189.5048,3,3, 120); //
		CreateTheCTFCar(500,-2637.0786,1396.5747,7.2142,198.0394,3,3, 120); //
		CreateTheCTFCar(500,-2632.1418,1398.1005,7.2029,204.8207,3,3, 120); //
		CreateTheCTFCar(470,-2614.5225,1433.1442,7.1703,187.7592,3,3, 120); //
		CreateTheCTFCar(470,-2616.7590,1439.1410,7.1352,178.3403,3,3, 120); //
		CreateTheCTFCar(470,-2623.6592,1440.8967,7.1501,172.6633,3,3, 120); //
		CreateTheCTFCar(520,-2607.7290,1398.7294,7.8521,180.7858,3,3, 120); //
		CreateTheCTFCar(520,-2607.4290,1382.6052,7.9171,183.8342,3,3, 120); //
		CreateTheCTFCar(520,-2594.9604,1382.3910,7.8505,179.2402,3,3, 120); //
		CreateTheCTFCar(520,-2584.2202,1384.8035,7.8602,187.6100,3,3, 120); //
		CreateTheCTFCar(520,-2571.7078,1386.0472,7.9044,189.6812,3,3, 120); //
		CreateTheCTFCar(539,-2579.7581,1398.1876,6.5462,3.5678,3,3, 120); //
		CreateTheCTFCar(539,-2584.2129,1398.7706,6.5462,344.2031,3,3, 120); //
		CreateTheCTFCar(593,-2560.0679,1388.5591,7.6526,254.4941,3,3, 120); //
		CreateTheCTFCar(476,-2541.5981,1388.0597,7.8758,253.3193,3,3, 120); //
		CreateTheCTFCar(425,-2605.1494,1352.2070,7.7789,262.5555,3,3, 120); //
		CreateTheCTFCar(447,-2632.8506,1352.6152,7.1439,90.0803,7,7, 120); //
		CreateTheCTFCar(447,-2634.1448,1339.7235,7.2050,94.1513,3,3, 120); //
		CreateTheCTFCar(425,-2605.1575,1329.6298,7.6891,230.6139,3,3, 120); //
		CreateTheCTFCar(425,-2616.9600,1315.2382,7.6360,229.4428,3,3, 120); //
		CreateTheCTFCar(431,-2638.8108,1318.8722,7.1613,269.7827,3,3, 120); //
		CreateTheCTFCar(432,-2653.4578,1302.9886,7.1870,274.6943,3,3, 120); //
		CreateTheCTFCar(432,-2652.2695,1310.6997,7.0568,270.1150,3,3, 120); //
		CreateTheCTFCar(432,-2654.1914,1318.9460,7.0299,272.3939,3,3, 120); //
		CreateTheCTFCar(522,-2654.8323,1324.8878,6.6776,280.3015,3,3, 120); //
		CreateTheCTFCar(522,-2654.5842,1327.1882,6.5837,254.7957,3,3, 120); //
		CreateTheCTFCar(522,-2654.1858,1329.6611,6.5963,281.6031,3,3, 120); //
		CreateTheCTFCar(522,-2654.2422,1331.9343,6.6955,272.0027,3,3, 120); //
		CreateTheCTFCar(522,-2657.3582,1331.6300,6.6178,270.5595,3,3, 120); //
		CreateTheCTFCar(522,-2657.0984,1325.3149,6.6234,265.8552,3,3, 120); //
		CreateTheCTFCar(522,-2657.2009,1327.1858,6.6085,287.6811,3,3, 120); //
		CreateTheCTFCar(522,-2657.3989,1329.5637,6.5138,275.1796,3,3, 120); //
		CreateTheCTFCar(411,-2654.6045,1335.0353,6.8426,268.5180,3,3, 120); //
		CreateTheCTFCar(411,-2654.6338,1339.1162,6.8359,269.0910,3,3, 120); //
		CreateTheCTFCar(411,-2654.9883,1343.3065,6.8304,270.7516,3,3, 120); //
		CreateTheCTFCar(411,-2655.5088,1348.0016,6.8114,269.8454,3,3, 120); //
		CreateTheCTFCar(411,-2655.8127,1352.0005,6.8094,269.7757,3,3, 120); //
		CreateTheCTFCar(411,-2656.0227,1356.1571,6.7547,271.1802,3,3, 120); //
		CreateTheCTFCar(578,-2637.5259,1324.9630,7.7964,271.8386,3,3, 120); //

		CreateTheCTFCar(520,-2146.5867,-874.4456,32.7466,358.4934,7,7, 120); // SF BLUE CARS
		CreateTheCTFCar(520,-2135.7549,-877.2182,32.7467,4.7178,79,79, 120); //
		CreateTheCTFCar(520,-2120.4004,-872.6112,32.7472,0.6072,7,7, 120); //
		CreateTheCTFCar(520,-2109.4873,-873.4551,32.8951,3.8494,79,79, 120); //
		CreateTheCTFCar(425,-2117.9407,-896.0366,32.5719,358.9348,7,7, 120); //
		CreateTheCTFCar(425,-2141.8855,-896.5212,32.5715,359.2432,7,7, 120); //
		CreateTheCTFCar(432,-2148.2371,-923.5669,32.0945,359.1335,7,7, 120); //
		CreateTheCTFCar(432,-2133.8984,-923.9269,32.0988,358.1691,7,7, 120); //
		CreateTheCTFCar(432,-2125.3140,-923.6451,32.1042,0.5976,7,7, 120); //
		CreateTheCTFCar(432,-2116.8977,-923.7103,32.0988,1.1011,7,7, 120); //
		CreateTheCTFCar(447,-2119.8264,-938.4787,32.0576,0.9996,79,79, 120); //
		CreateTheCTFCar(447,-2141.3691,-938.4867,31.9473,359.3492,79,79, 120); //
		CreateTheCTFCar(470,-2078.5737,-889.9172,32.1966,293.4323,79,79, 120); //
		CreateTheCTFCar(470,-2077.2817,-885.0810,32.1998,295.6565,79,79, 120); //
		CreateTheCTFCar(470,-2076.5454,-880.1951,32.0658,298.1270,79,79, 120); //
		CreateTheCTFCar(470,-2070.5071,-877.1071,32.0528,296.4956,79,79, 120); //
		CreateTheCTFCar(470,-2071.4233,-882.4747,32.0573,296.3256,79,79, 120); //
		CreateTheCTFCar(470,-2072.3433,-887.6039,32.2002,294.9481,79,79, 120); //
		CreateTheCTFCar(470,-2078.5667,-889.9283,32.1992,293.3642,79,79, 120); //
		CreateTheCTFCar(431,-2060.9749,-855.0023,32.3385,1.1989,79,79, 120); //
		CreateTheCTFCar(431,-2065.5784,-841.9662,32.1407,0.3142,79,79, 120); //
		CreateTheCTFCar(471,-2070.2410,-843.2321,31.6663,311.2982,79,79, 120); //
		CreateTheCTFCar(471,-2071.6929,-841.1014,31.6442,301.2459,79,79, 120); //
		CreateTheCTFCar(471,-2072.7500,-839.0687,31.6442,301.3734,79,79, 120); //
		CreateTheCTFCar(471,-2072.7627,-839.0569,31.6397,301.1648,79,79, 120); //
		CreateTheCTFCar(471,-2075.3579,-840.7722,31.6300,305.3166,79,79, 120); //
		CreateTheCTFCar(471,-2074.1184,-842.8131,31.6480,302.2377,79,79, 120); //
		CreateTheCTFCar(471,-2073.3679,-844.7642,31.6503,301.6148,79,79, 120); //
		CreateTheCTFCar(578,-2076.2449,-837.7185,32.8854,300.7641,79,79, 120); //
		CreateTheCTFCar(578,-2082.6887,-837.3881,32.7998,300.7875,79,79, 120); //
		CreateTheCTFCar(593,-2060.1619,-823.1453,32.5792,318.9701,79,79, 120); //
		CreateTheCTFCar(593,-2058.0996,-812.0424,32.5855,324.3302,79,79, 120); //
		CreateTheCTFCar(476,-2044.4325,-848.5944,32.8424,1.5042,79,79, 120); //
		CreateTheCTFCar(411,-2034.6116,-856.8015,31.8280,269.4738,79,79, 120); //
		CreateTheCTFCar(411,-2028.4060,-856.8803,31.8266,268.2315,79,79, 120); //
		CreateTheCTFCar(411,-2022.0458,-857.0079,31.9076,274.3947,79,79, 120); //
		CreateTheCTFCar(411,-2015.0878,-857.0884,31.8400,268.1605,79,79, 120); //
		CreateTheCTFCar(411,-2008.9985,-856.9344,31.8305,270.4599,79,79, 120); //
		CreateTheCTFCar(476,-2000.4186,-847.1266,32.8320,358.7922,79,79, 120); //
		CreateTheCTFCar(468,-2010.9794,-859.7666,31.8409,268.7741,79,79, 120); //
		CreateTheCTFCar(468,-2015.8578,-860.3361,31.8324,270.6544,79,79, 120); //
		CreateTheCTFCar(468,-2019.7281,-860.5090,31.8257,265.6533,79,79, 120); //
		CreateTheCTFCar(522,-2023.7291,-860.8422,31.7338,267.9226,79,79, 120); //
		CreateTheCTFCar(522,-2027.4839,-860.6644,31.7366,270.9957,79,79, 120); //
		CreateTheCTFCar(522,-2032.3967,-860.6963,31.7410,268.1022,79,79, 120); //
		CreateTheCTFCar(447,2526.7925,2749.6382,10.8313,78.1043,79,79, 120); //
	}
	if(CTFInfo[Map]==LV)
	{
	    CreateCTFPicks(0,2525.9319,2786.4802);
	    CreateCTFPicks(1,1076.6573,1041.2341);

		CreateTheCTFCar(411,2534.9797,2853.6824,10.5478,178.8895,79,79, 120); // LV BLUE CARS
		CreateTheCTFCar(411,2531.1321,2853.5774,10.4820,179.8885,79,79, 120); //
		CreateTheCTFCar(411,2525.6790,2840.8391,10.5440,176.7156,79,79, 120); //
		CreateTheCTFCar(411,2521.4790,2841.1365,10.5416,179.9997,79,79, 120); //
		CreateTheCTFCar(411,2516.7688,2841.1428,10.5507,175.8749,79,79, 120); //
		CreateTheCTFCar(411,2512.2708,2841.4460,10.5465,177.9323,79,79, 120); //
		CreateTheCTFCar(468,2509.6819,2826.6636,10.4810,268.8350,79,79, 120); //
		CreateTheCTFCar(468,2510.1265,2829.0676,10.4866,269.1993,79,79, 120); //
		CreateTheCTFCar(468,2509.9553,2832.0251,10.4873,247.7503,79,79, 120); //
		CreateTheCTFCar(468,2510.2751,2833.9719,10.4879,255.9877,79,79, 120); //
		CreateTheCTFCar(468,2510.3557,2835.6565,10.4879,253.4943,79,79, 120); //
		CreateTheCTFCar(522,2505.4780,2821.6943,10.3921,266.9387,79,79, 120); //
		CreateTheCTFCar(522,2505.1064,2824.4465,10.3868,265.7374,79,79, 120); //
		CreateTheCTFCar(522,2508.9241,2819.0247,10.3989,183.2186,79,79, 120); //
		CreateTheCTFCar(522,2509.0818,2815.9336,10.3756,181.2950,79,79, 120); //
		CreateTheCTFCar(522,2509.3181,2812.7241,10.3902,181.5955,79,79, 120); //
		CreateTheCTFCar(470,2546.8369,2792.1072,10.8121,179.7209,79,79, 120); //
		CreateTheCTFCar(470,2552.4390,2792.0662,10.7093,179.3422,79,79, 120); //
		CreateTheCTFCar(500,2562.2932,2792.2542,10.9229,178.9724,79,79, 120); //
		CreateTheCTFCar(500,2568.2717,2793.1868,10.8661,182.2675,79,79, 120); //
		CreateTheCTFCar(500,2573.7463,2793.7881,10.9274,172.0873,79,79, 120); //
		CreateTheCTFCar(425,2581.8591,2787.5530,11.3924,93.3801,7,7, 120); //
		CreateTheCTFCar(425,2579.7051,2773.6357,11.3619,86.2728,7,7, 120); //
		CreateTheCTFCar(520,2580.0635,2760.2563,11.5436,104.6697,79,79, 120); //
		CreateTheCTFCar(520,2581.2004,2747.8870,11.5436,80.7110,79,79, 120); //
		CreateTheCTFCar(520,2566.0137,2758.6995,11.5436,91.9196,79,79, 120); //
		CreateTheCTFCar(520,2565.0247,2747.7463,11.5436,90.6555,79,79, 120); //
		CreateTheCTFCar(431,2544.3828,2760.6238,10.9197,90.1390,79,79, 120); //
		CreateTheCTFCar(431,2544.4141,2745.4812,10.9187,88.4426,79,79, 120); //
		CreateTheCTFCar(447,2526.7930,2749.6387,10.8319,78.1361,79,79, 120); //
		CreateTheCTFCar(578,2504.0271,2734.9795,11.4381,0.6609,79,79, 120); //
		CreateTheCTFCar(432,2509.7263,2712.7432,10.8277,358.3452,79,79, 120); //
		CreateTheCTFCar(432,2519.9810,2712.8276,10.8273,1.2775,79,79, 120); //
		CreateTheCTFCar(432,2529.0527,2713.3157,10.8277,1.4489,79,79, 120); //
		CreateTheCTFCar(432,2538.6602,2713.0508,10.8258,359.9151,79,79, 120); //
		CreateTheCTFCar(425,2571.4568,2733.6082,11.4603,88.8940,7,7, 120); //
		CreateTheCTFCar(471,2528.2065,2820.9509,10.2998,154.4980,79,79, 120); //
		CreateTheCTFCar(471,2525.8855,2821.0483,10.2912,180.1594,79,79, 120); //
		CreateTheCTFCar(471,2523.2090,2820.8999,10.2971,200.2686,79,79, 120); //
		CreateTheCTFCar(471,2520.4915,2820.9158,10.2885,182.3148,79,79, 120); //
		CreateTheCTFCar(476,2485.5576,2744.2424,11.4826,108.5699,79,79, 120); //
		CreateTheCTFCar(476,2487.7329,2728.7009,11.4803,113.0263,79,79, 120); //
		CreateTheCTFCar(593,2489.6326,2711.1472,11.2489,96.6759,79,79, 120); //
		CreateTheCTFCar(476,2485.2495,2696.2866,11.4820,65.9105,79,79, 120); //

		CreateTheCTFCar(500,1075.5338,1000.0100,11.1288,343.4859,3,3, 120); // LV RED CARS
		CreateTheCTFCar(500,1077.5131,1006.4153,11.1029,348.0989,3,3, 120); //
		CreateTheCTFCar(411,1073.5255,1007.1432,10.7201,347.6081,3,3, 120); //
		CreateTheCTFCar(411,1067.6359,1008.7253,10.7214,344.0739,3,3, 120); //
		CreateTheCTFCar(411,1062.3353,1010.5580,10.7276,340.6567,3,3, 120); //
		CreateTheCTFCar(431,1093.4572,1021.2364,10.2436,91.2719,3,3, 120); //
		CreateTheCTFCar(578,1074.6886,1023.0496,10.7725,71.2164,3,3, 120); //
		CreateTheCTFCar(522,1068.4493,999.5516,10.5683,340.4222,3,3, 120); //
		CreateTheCTFCar(522,1065.4768,1000.7447,10.5693,340.2574,3,3, 120); //
		CreateTheCTFCar(522,1062.0551,1001.4692,10.5656,351.2681,3,3, 120); //
		CreateTheCTFCar(522,1059.1434,1002.4614,10.5534,343.9263,3,3, 120); //
		CreateTheCTFCar(522,1057.0825,1003.2778,10.5786,335.9844,3,3, 120); //
		CreateTheCTFCar(431,1056.7795,1031.4441,10.2830,52.3130,3,3, 120); //
		CreateTheCTFCar(578,1045.2855,1043.0969,10.7921,29.6758,3,3, 120); //
		CreateTheCTFCar(411,1037.7871,1032.9602,10.7276,306.6981,3,3, 120); //
		CreateTheCTFCar(411,1034.2533,1037.8877,10.7226,305.4821,3,3, 120); //
		CreateTheCTFCar(411,1030.6216,1042.4570,10.7067,310.9861,3,3, 120); //
		CreateTheCTFCar(500,1028.4908,1047.9167,11.1080,295.8239,3,3, 120); //
		CreateTheCTFCar(468,1028.0562,1027.7070,10.6689,336.7337,3,3, 120); //
		CreateTheCTFCar(468,1026.8767,1030.3907,10.6753,302.5554,3,3, 120); //
		CreateTheCTFCar(468,1024.6475,1033.1481,10.6727,301.1507,3,3, 120); //
		CreateTheCTFCar(468,1022.2734,1035.8622,10.6751,306.2730,3,3, 120); //
		CreateTheCTFCar(468,1020.1066,1039.1365,10.6737,307.0539,3,3, 120); //
		CreateTheCTFCar(500,1019.6445,1044.8130,11.1047,296.4072,3,3, 120); //
		CreateTheCTFCar(470,1024.5646,1052.2631,10.9936,326.0953,3,3, 120); //
		CreateTheCTFCar(470,1021.9611,1056.6110,10.9937,326.3959,3,3, 120); //
		CreateTheCTFCar(470,1038.6543,1052.6949,10.1531,310.8803,3,3, 120); //
		CreateTheCTFCar(470,1037.5190,1059.0629,10.1503,309.1425,3,3, 120); //
		CreateTheCTFCar(470,1036.2100,1064.7490,10.1502,312.1730,3,3, 120); //
		CreateTheCTFCar(471,1046.5266,1056.6302,9.6660,284.4788,3,3, 120); //
		CreateTheCTFCar(471,1049.3979,1057.7980,9.6882,293.2030,3,3, 120); //
		CreateTheCTFCar(471,1052.5718,1059.3739,9.6993,297.1587,3,3, 120); //
		CreateTheCTFCar(471,1058.2344,1063.1041,9.7102,302.6143,3,3, 120); //
		CreateTheCTFCar(471,1055.7162,1061.1702,9.6859,299.3422,3,3, 120); //
		CreateTheCTFCar(471,1061.0995,1065.0648,9.7442,312.9626,3,3, 120); //
		CreateTheCTFCar(432,1014.5992,1069.7938,11.0068,355.1977,3,3, 120); //
		CreateTheCTFCar(432,1014.3321,1081.5927,11.0821,350.8817,3,3, 120); //
		CreateTheCTFCar(432,1018.6851,1093.1525,11.0076,339.2800,3,3, 120); //
		CreateTheCTFCar(432,1024.0449,1107.0083,11.0072,329.0517,3,3, 120); //
		CreateTheCTFCar(520,986.0251,1108.4648,11.5435,275.7645,3,3, 120); //
		CreateTheCTFCar(520,990.1420,1121.6089,11.5435,265.8234,3,3, 120); //
		CreateTheCTFCar(520,992.8165,1136.6075,11.5435,268.7061,3,3, 120); //
		CreateTheCTFCar(520,992.1180,1150.4373,11.5435,270.5865,3,3, 120); //
		CreateTheCTFCar(476,968.2949,1177.3898,11.5298,334.9514,3,3, 120); //
		CreateTheCTFCar(593,982.8550,1186.3840,11.2046,3.0758,3,3, 120); //
		CreateTheCTFCar(476,960.4756,1197.7391,11.4542,328.6757,3,3, 120); //
		CreateTheCTFCar(476,960.2452,1220.1765,11.4256,336.1284,3,3, 120); //
		CreateTheCTFCar(539,980.8638,1089.4337,10.1559,278.3246,3,3, 120); //
		CreateTheCTFCar(447,993.3546,1089.7457,10.8564,266.4211,7,7, 120); //
		CreateTheCTFCar(539,981.2925,1081.2097,10.1730,263.9237,3,3, 120); //
		CreateTheCTFCar(500,983.2675,1072.1099,10.8679,352.9341,3,3, 120); //
		CreateTheCTFCar(500,991.0849,1071.0645,10.8687,347.0892,3,3, 120); //
	}
	if(CTFInfo[Map]==FOREST)
	{
	    CreateCTFPicks(0,-181.1398,-224.4300);
	    CreateCTFPicks(1,1858.1749,163.1109);

		CreateTheCTFCar(425,-220.8165,-145.4833,3.4485,0.1590,79,79, 120); // FOREST BLUE CARS
		CreateTheCTFCar(425,-235.2439,-141.8919,3.4286,344.9013,79,79, 120); //
		CreateTheCTFCar(425,-248.6146,-138.8832,3.5301,342.2419,79,79, 120); //
		CreateTheCTFCar(520,-261.1233,-134.9970,3.6445,348.5929,79,79, 120); //
		CreateTheCTFCar(520,-277.0290,-129.1903,3.6040,342.9429,79,79, 120); //
		CreateTheCTFCar(520,-287.4766,-123.4288,2.9979,337.7456,79,79, 120); //
		CreateTheCTFCar(520,-299.9392,-115.8800,2.2190,284.8000,79,79, 120); //
		CreateTheCTFCar(593,-293.0323,-100.2707,2.2973,311.8000,79,79, 120); //
		CreateTheCTFCar(476,-292.1273,-67.3832,2.4292,313.5628,79,79, 120); //
		CreateTheCTFCar(476,-288.7424,-50.1578,2.4481,302.5871,79,79, 120); //
		CreateTheCTFCar(476,-294.0795,-86.0810,2.4095,300.7833,79,79, 120); //
		CreateTheCTFCar(447,-222.4480,-198.2353,1.3628,245.8722,79,79, 120); //
		CreateTheCTFCar(447,-229.7020,-207.4559,1.4675,258.1920,79,79, 120); //
		CreateTheCTFCar(539,-212.9797,-238.1715,0.7819,359.7619,79,79, 120); //
		CreateTheCTFCar(539,-212.6842,-244.2316,0.7821,356.9944,79,79, 120); //
		CreateTheCTFCar(432,-207.4691,-265.7320,1.4338,177.3995,7,7, 120); //
		CreateTheCTFCar(432,-198.3988,-289.5077,1.4371,89.4517,7,7, 120); //
		CreateTheCTFCar(432,-188.8043,-282.2275,1.4370,42.3530,7,7, 120); //
		CreateTheCTFCar(468,-196.3731,-272.2265,1.1068,90.6851,79,79, 120); //
		CreateTheCTFCar(468,-191.3128,-272.2189,1.0887,89.2359,79,79, 120); //
		CreateTheCTFCar(432,-178.0358,-281.9996,1.4342,38.1829,7,7, 120); //
		CreateTheCTFCar(470,-167.5592,-281.8852,2.9403,90.0337,79,79, 120); //
		CreateTheCTFCar(470,-167.6235,-276.7169,2.9216,90.3154,79,79, 120); //
		CreateTheCTFCar(470,-167.7526,-271.9501,2.9008,89.1743,79,79, 120); //
		CreateTheCTFCar(500,-167.0034,-265.8350,3.1654,88.9953,79,79, 120); //
		CreateTheCTFCar(500,-166.6749,-261.7602,3.2706,86.5729,79,79, 120); //
		CreateTheCTFCar(500,-166.6794,-257.1891,3.2945,83.9654,79,79, 120); //
		CreateTheCTFCar(500,-177.5198,-254.4098,1.5589,359.1252,79,79, 120); //
		CreateTheCTFCar(500,-181.7497,-253.8953,1.5284,358.8841,79,79, 120); //
		CreateTheCTFCar(500,-185.7442,-253.7359,1.5563,1.4707,79,79, 120); //
		CreateTheCTFCar(411,-189.9966,-253.7766,1.1475,1.0330,79,79, 120); //
		CreateTheCTFCar(470,-190.2511,-244.7627,1.4057,268.2147,79,79, 120); //
		CreateTheCTFCar(470,-190.4623,-240.3575,1.4151,270.0410,79,79, 120); //
		CreateTheCTFCar(578,-202.0930,-239.2586,2.0489,359.5287,79,79, 120); //
		CreateTheCTFCar(578,-163.8368,-240.1127,2.0535,4.8698,79,79, 120); //
		CreateTheCTFCar(431,-156.6075,-240.6497,1.5215,359.7311,7,7, 120); //
		CreateTheCTFCar(500,-155.0934,-228.3574,1.5284,358.3252,79,79, 120); //
		CreateTheCTFCar(471,-163.2346,-195.6932,0.9027,166.7635,79,79, 120); //
		CreateTheCTFCar(471,-160.4834,-196.0122,0.9112,169.0129,79,79, 120); //
		CreateTheCTFCar(471,-157.9546,-196.1632,0.8950,177.8459,79,79, 120); //
		CreateTheCTFCar(471,-155.1693,-196.2777,0.8962,165.9939,79,79, 120); //
		CreateTheCTFCar(468,-153.2304,-196.8943,0.9909,163.1621,79,79, 120); //
		CreateTheCTFCar(468,-151.9962,-197.0963,1.0903,170.3655,79,79, 120); //
		CreateTheCTFCar(522,-149.6558,-197.8537,1.0005,161.7036,79,79, 120); //
		CreateTheCTFCar(522,-146.5965,-198.4294,0.9971,149.4491,79,79, 120); //
		CreateTheCTFCar(522,-143.9914,-198.8615,0.9964,152.9854,79,79, 120); //
		CreateTheCTFCar(522,-141.0893,-199.3475,0.9052,144.7002,79,79, 120); //
		CreateTheCTFCar(411,-135.6279,-201.7421,1.1573,152.3935,79,79, 120); //
		CreateTheCTFCar(522,-139.3349,-200.7242,0.9064,150.4371,79,79, 120); //
		CreateTheCTFCar(411,-131.3300,-202.7850,1.1561,153.3465,79,79, 120); //
		CreateTheCTFCar(411,-126.6648,-203.8576,1.1573,156.3226,79,79, 120); //
		CreateTheCTFCar(411,-125.7221,-220.4157,1.1571,24.6916,79,79, 120); //
		CreateTheCTFCar(411,-130.8463,-220.8608,1.1514,26.9445,79,79, 120); //
		CreateTheCTFCar(411,-136.1144,-220.5288,1.1491,30.9957,79,79, 120); //

		CreateTheCTFCar(432,1966.0115,39.3972,32.5798,178.2657,3,3, 120); // FOREST RED CARS
		CreateTheCTFCar(432,1954.0070,39.7421,33.0267,0.3435,3,3, 120); //
		CreateTheCTFCar(432,1942.1478,40.5184,33.4638,350.7549,3,3, 120); //
		CreateTheCTFCar(471,1947.0352,127.7013,30.2176,159.4588,3,3, 120); //
		CreateTheCTFCar(471,1944.5922,128.9457,30.4821,162.4604,3,3, 120); //
		CreateTheCTFCar(471,1941.9082,129.9996,30.8761,162.6506,3,3, 120); //
		CreateTheCTFCar(471,1939.3600,131.0880,31.1858,157.5835,3,3, 120); //
		CreateTheCTFCar(471,1936.3229,132.2068,31.6568,158.4919,3,3, 120); //
		CreateTheCTFCar(468,1933.0516,133.6248,32.2392,96.5885,3,3, 120); //
		CreateTheCTFCar(468,1929.8625,134.9382,32.6505,96.8372,3,3, 120); //
		CreateTheCTFCar(468,1926.3619,136.3346,33.0832,97.3619,3,3, 120); //
		CreateTheCTFCar(468,1922.6173,137.7473,33.5029,97.9837,3,3, 120); //
		CreateTheCTFCar(468,1918.9531,139.3811,33.8640,92.7031,3,3, 120); //
		CreateTheCTFCar(468,1915.0197,141.2422,34.1732,85.0894,3,3, 120); //
		CreateTheCTFCar(468,1911.3654,142.7338,34.4224,97.7320,3,3, 120); //
		CreateTheCTFCar(468,1908.8381,143.9945,34.6084,91.0426,3,3, 120); //
		CreateTheCTFCar(411,1927.5071,131.6660,33.0830,67.1889,3,3, 120); //
		CreateTheCTFCar(411,1916.0928,136.0365,34.3387,66.7076,3,3, 120); //
		CreateTheCTFCar(411,1907.4984,138.8695,34.9937,68.3877,3,3, 120); //
		CreateTheCTFCar(411,1899.1000,142.8585,35.3473,58.8920,3,3, 120); //
		CreateTheCTFCar(411,1893.0399,146.8314,35.1148,57.4750,3,3, 120); //
		CreateTheCTFCar(520,1896.3848,128.7063,36.4851,83.8591,3,3, 120); //
		CreateTheCTFCar(520,1895.0004,115.9517,35.6524,89.1385,3,3, 120); //
		CreateTheCTFCar(425,1902.6056,96.1750,33.8846,77.8178,3,3, 120); //
		CreateTheCTFCar(425,1880.6538,95.2478,34.2013,60.1043,3,3, 120); //
		CreateTheCTFCar(447,1882.7567,110.9721,34.6788,75.4205,3,3, 120); //
		CreateTheCTFCar(520,1895.0004,115.9610,35.6530,89.5102,3,3, 120); //
		CreateTheCTFCar(520,1896.3845,128.7202,36.4860,84.3262,3,3, 120); //
		CreateTheCTFCar(520,1876.5459,121.9786,36.0764,88.9445,3,3, 120); //
		CreateTheCTFCar(520,1877.1978,135.5107,36.9758,84.4589,3,3, 120); //
		CreateTheCTFCar(476,1866.0962,144.9850,36.7026,98.1217,3,3, 120); //
		CreateTheCTFCar(476,1842.4612,147.6953,36.4268,104.8012,3,3, 120); //
		CreateTheCTFCar(593,1828.4222,154.2511,35.2215,106.9251,3,3, 120); //
		CreateTheCTFCar(500,1902.8490,156.7988,37.2565,68.6621,3,3, 120); //
		CreateTheCTFCar(500,1907.9869,154.6958,37.2903,79.4680,3,3, 120); //
		CreateTheCTFCar(500,1912.8575,153.1547,37.3113,69.9456,3,3, 120); //
		CreateTheCTFCar(500,1918.6621,150.9558,37.3589,64.7914,3,3, 120); //
		CreateTheCTFCar(522,1923.1632,149.3351,36.8409,65.8303,3,3, 120); //
		CreateTheCTFCar(522,1926.4821,148.2139,36.8513,69.5093,3,3, 120); //
		CreateTheCTFCar(522,1929.6697,147.0358,36.8452,70.8081,3,3, 120); //
		CreateTheCTFCar(522,1932.4211,146.5413,36.8488,67.0213,3,3, 120); //
		CreateTheCTFCar(522,1937.0397,144.5855,36.8355,70.7647,3,3, 120); //
		CreateTheCTFCar(522,1940.5692,143.4748,36.8284,71.6366,3,3, 120); //
		CreateTheCTFCar(468,1943.5991,147.3570,36.7969,161.6959,3,3, 120); //
		CreateTheCTFCar(468,1944.6250,150.5142,36.7445,159.3732,3,3, 120); //
		CreateTheCTFCar(468,1945.7181,153.3681,36.6754,157.0023,3,3, 120); //
		CreateTheCTFCar(468,1946.9788,156.2973,36.6099,158.0327,3,3, 120); //
		CreateTheCTFCar(468,1948.1248,160.0227,36.6896,164.6234,3,3, 120); //
		CreateTheCTFCar(470,1947.2921,166.8865,37.2479,71.4116,7,7, 120); //
		CreateTheCTFCar(470,1941.4333,168.6796,37.2755,67.5615,7,7, 120); //
		CreateTheCTFCar(470,1935.4805,170.7047,37.3357,71.0555,7,7, 120); //
		CreateTheCTFCar(470,1928.7791,173.2443,37.2789,71.1120,7,7, 120); //
		CreateTheCTFCar(470,1922.0599,175.9907,37.2501,71.8936,7,7, 120); //
		CreateTheCTFCar(578,1902.6934,165.5378,37.8699,343.5051,3,3, 120); //
		CreateTheCTFCar(431,1898.2800,168.4521,37.2979,338.9436,3,3, 120); //
	}
	if(CTFInfo[Map]==DESERT)
	{
	    CreateCTFPicks(0,-2263.7708,2344.1719);
	    CreateCTFPicks(1,190.6089,1886.9785);

		CreateTheCTFCar(411,229.4626,1916.2345,17.3676,90.1882,3,3,120); // DESERT RED CARS
		CreateTheCTFCar(522,230.0990,1912.1362,17.2126,89.7179,3,3,120); //
		CreateTheCTFCar(522,230.4843,1909.8469,17.2118,90.2679,3,3,120); //
		CreateTheCTFCar(522,230.8396,1907.1614,17.1078,88.5110,3,3,120); //
		CreateTheCTFCar(468,230.4330,1904.7404,17.3168,92.6035,3,3,120); //
		CreateTheCTFCar(468,230.8775,1902.4041,17.2249,89.2691,3,3,120); //
		CreateTheCTFCar(471,230.2336,1900.7513,17.1290,95.3677,3,3,120); //
		CreateTheCTFCar(411,229.9017,1920.3021,17.3677,86.7946,3,3,120); //
		CreateTheCTFCar(470,178.4507,1926.6760,18.0305,178.1683,3,3,120); //
		CreateTheCTFCar(470,173.3461,1927.4299,18.1254,179.3046,3,3,120); //
		CreateTheCTFCar(500,177.7004,1936.0770,18.1876,181.2419,3,3,120); //
		CreateTheCTFCar(500,173.2284,1935.5227,18.3057,176.0238,3,3,120); //
		CreateTheCTFCar(510,157.7794,1908.6136,18.3711,2.8273,3,3,120); //
		CreateTheCTFCar(510,160.2024,1908.3622,18.2421,5.6482,3,3,120); //
		CreateTheCTFCar(539,162.4003,1907.9427,17.9616,4.6194,3,3,120); //
		CreateTheCTFCar(539,166.1994,1907.2468,17.8424,359.9346,3,3,120); //
		CreateTheCTFCar(539,158.3656,1901.7972,18.0431,358.0804,3,3,120); //
		CreateTheCTFCar(578,173.1050,1903.5200,18.8847,0.7954,3,3,120); //
		CreateTheCTFCar(578,167.5336,1930.7651,19.0726,183.1607,3,3,120); //
		CreateTheCTFCar(432,151.0459,1934.5222,19.1458,191.9023,3,3,120); //
		CreateTheCTFCar(432,144.9996,1932.6151,19.2975,182.0551,3,3,120); //
		CreateTheCTFCar(432,149.0325,1948.5487,19.2682,188.3065,3,3,120); //
		CreateTheCTFCar(432,143.8421,1947.6575,19.3750,182.6888,3,3,120); //
		CreateTheCTFCar(432,137.6199,1934.3226,19.2617,179.7967,3,3,120); //
		CreateTheCTFCar(432,137.4962,1948.7313,19.4482,184.2090,3,3,120); //
		CreateTheCTFCar(447,174.9282,1958.1281,18.1849,289.3270,3,3,120); //
		CreateTheCTFCar(447,173.2522,1972.9703,18.2739,262.4450,3,3,120); //
		CreateTheCTFCar(425,181.7670,1983.4888,18.4429,265.1854,3,3,120); //
		CreateTheCTFCar(425,184.9980,2000.1960,18.2804,263.2447,3,3,120); //
		CreateTheCTFCar(425,184.8470,2015.4686,18.2764,261.6240,3,3,120); //
		CreateTheCTFCar(476,207.2162,1952.7239,18.2993,348.7819,3,3,120); //
		CreateTheCTFCar(476,219.7236,1949.0862,18.2972,328.2273,3,3,120); //
		CreateTheCTFCar(520,248.6369,1929.1796,18.3722,356.1158,3,3,120); //
		CreateTheCTFCar(520,261.7102,1924.4528,18.3647,359.4373,3,3,120); //
		CreateTheCTFCar(520,273.4522,1919.2457,18.3634,4.2000,3,3,120); //
		CreateTheCTFCar(520,284.7289,1913.2051,18.3648,3.5108,3,3,120); //
		CreateTheCTFCar(476,322.7607,1914.2974,18.3507,13.0800,3,3,120); //
		CreateTheCTFCar(476,324.0037,1936.1951,18.3522,32.7531,3,3,120); //
		CreateTheCTFCar(520,355.3574,1944.8168,18.3611,80.2082,3,3,120); //
		CreateTheCTFCar(520,361.6207,1959.1566,18.3611,94.2456,3,3,120); //
		CreateTheCTFCar(425,363.6793,1971.0060,18.5150,90.6064,3,3,120); //
		CreateTheCTFCar(425,366.0131,1985.5527,18.1275,93.5562,3,3,120); //
		CreateTheCTFCar(500,357.0787,1929.5040,17.7642,82.3869,3,3,120); //
		CreateTheCTFCar(500,357.3487,1923.6636,17.6904,78.3116,3,3,120); //
		CreateTheCTFCar(470,356.8469,1917.5547,17.5236,81.1191,3,3,120); //
		CreateTheCTFCar(431,225.4119,1880.7542,17.7498,359.4634,3,3,120); //
		CreateTheCTFCar(411,124.0405,1897.3827,18.2129,83.7592,3,3,120); //
		CreateTheCTFCar(411,124.4923,1905.3848,18.3909,91.4807,3,3,120); //
		CreateTheCTFCar(522,230.7851,1896.9546,17.1179,87.4962,3,3,120); //
		CreateTheCTFCar(522,231.0011,1893.3491,17.1250,102.5137,3,3,120); //
		CreateTheCTFCar(468,231.2375,1895.0797,17.3090,95.5575,3,3,120); //
		CreateTheCTFCar(471,231.3261,1898.6193,17.1715,85.4055,3,3,120); //
		CreateTheCTFCar(593,192.9630,1954.5109,18.0997,345.5901,3,3,120); //
		CreateTheCTFCar(470,-2228.9148,2350.7063,4.9814,132.2854,79,79,120); // DESERT BLUE CARS
		CreateTheCTFCar(470,-2225.7480,2347.0637,4.9857,124.7663,79,79,120); //
		CreateTheCTFCar(411,-2219.0322,2358.3079,4.7103,130.6124,79,79,120); //
		CreateTheCTFCar(411,-2216.3257,2355.0828,4.7096,135.0529,79,79,120); //
		CreateTheCTFCar(411,-2212.9436,2351.1743,4.7093,133.1062,79,79,120); //
		CreateTheCTFCar(411,-2209.4817,2346.6084,4.7115,129.3399,79,79,120); //
		CreateTheCTFCar(411,-2206.7732,2342.0747,4.7115,130.6117,79,79,120); //
		CreateTheCTFCar(411,-2203.8330,2337.9402,4.7109,122.1129,79,79,120); //
		CreateTheCTFCar(522,-2202.1494,2335.5225,4.5578,121.6802,79,79,120); //
		CreateTheCTFCar(522,-2201.3855,2333.7725,4.5544,129.2974,79,79,120); //
		CreateTheCTFCar(522,-2200.7261,2331.2805,4.5612,116.7062,79,79,120); //
		CreateTheCTFCar(522,-2200.5793,2329.7920,4.5578,106.4105,79,79,120); //
		CreateTheCTFCar(522,-2200.0181,2327.7634,4.5549,91.4313,79,79,120); //
		CreateTheCTFCar(522,-2199.6904,2324.4595,4.5548,88.4317,79,79,120); //
		CreateTheCTFCar(468,-2199.3281,2322.3865,4.6529,90.4662,79,79,120); //
		CreateTheCTFCar(468,-2199.7698,2320.4939,4.6528,92.6139,79,79,120); //
		CreateTheCTFCar(468,-2200.0825,2318.3862,4.6510,84.1528,79,79,120); //
		CreateTheCTFCar(471,-2212.1821,2330.8984,4.5065,277.5861,79,79,120); //
		CreateTheCTFCar(510,-2212.2417,2328.7073,4.5346,273.5128,79,79,120); //
		CreateTheCTFCar(510,-2212.2625,2326.8674,4.5879,269.5648,79,79,120); //
		CreateTheCTFCar(500,-2231.5684,2341.3179,5.0334,87.2264,79,79,120); //
		CreateTheCTFCar(432,-2266.6736,2382.5408,5.0047,317.0548,79,79,120); //
		CreateTheCTFCar(432,-2271.6060,2386.3191,4.9582,316.5580,79,79,120); //
		CreateTheCTFCar(432,-2276.7852,2391.4465,4.9311,316.1814,79,79,120); //
		CreateTheCTFCar(432,-2281.6323,2397.1887,4.9213,315.0457,79,79,120); //
		CreateTheCTFCar(500,-2265.9561,2407.4771,5.1488,135.5659,79,79,120); //
		CreateTheCTFCar(500,-2262.2441,2403.6101,5.1679,131.5959,79,79,120); //
		CreateTheCTFCar(500,-2268.8022,2410.7192,5.0814,137.8656,79,79,120); //
		CreateTheCTFCar(425,-2227.2756,2326.0833,8.0235,8.4921,79,79,120); //
		CreateTheCTFCar(520,-2294.8757,2278.5037,5.7038,158.6493,79,79,120); //
		CreateTheCTFCar(520,-2282.7222,2278.4224,5.6887,199.3208,79,79,120); //
		CreateTheCTFCar(520,-2275.3223,2292.9792,5.6482,265.5457,79,79,120); //
		CreateTheCTFCar(520,-2274.0227,2302.7825,5.5799,265.6972,79,79,120); //
		CreateTheCTFCar(425,-2250.8843,2280.3093,5.5971,359.9273,0,0,120); //
		CreateTheCTFCar(578,-2305.6128,2335.6860,5.6252,359.0465,79,79,120); //
		CreateTheCTFCar(431,-2316.2559,2344.5447,5.0802,359.7093,79,79,120); //
		CreateTheCTFCar(593,-2339.6760,2354.4834,5.7130,198.3053,79,79,120); //
		CreateTheCTFCar(460,-2226.2974,2459.1790,1.7708,265.9009,79,79,120); //
		CreateTheCTFCar(460,-2226.3013,2473.7964,1.5231,237.4166,79,79,120); //
		CreateTheCTFCar(493,-2226.0552,2447.7615,-0.1641,240.3506,79,79,120); //
		CreateTheCTFCar(493,-2223.9099,2434.7314,-0.2399,265.5643,79,79,120); //
		CreateTheCTFCar(493,-2203.8801,2427.5930,0.0270,277.0936,79,79,120); //
		CreateTheCTFCar(460,-2179.0972,2395.7793,1.8898,216.5925,79,79,120); //
		CreateTheCTFCar(430,-2173.6418,2407.5083,-0.3159,229.2211,79,79,120); //
		CreateTheCTFCar(430,-2167.0159,2419.4988,-0.2096,205.4460,79,79,120); //
		CreateTheCTFCar(447,-2271.7449,2317.6167,4.7559,280.2010,79,79,120); //
		CreateTheCTFCar(447,-2287.7952,2343.9658,5.6876,10.6371,79,79,120); //
		CreateTheCTFCar(520,-2240.0315,2464.5010,5.7059,148.9750,79,79,120); //
		CreateTheCTFCar(520,-2257.9099,2448.3425,5.6962,143.8863,79,79,120); //
		CreateTheCTFCar(425,-2288.7302,2414.5732,5.4980,41.4063,79,79,120); //
	}
	//printf("DEBUG CFONTROL CTFSettings 2");
}
//====================================[TL]================================

stock ChangeMapTL()
{
	//printf("DEBUG CFONTROL ChangeMapTL 1");
    TLInfo[Map]++;
    if(TLInfo[Map] >= 8)TLInfo[Map] = 0;
	TLSettings();
	db_UpdateSettings(TL);
	new str[196];
	format(str, sizeof(str), "[WAR NEWS] The powers will fight in the battle of %s.",TLMapNames[TLInfo[Map]]);
	db_SaveChat(-1, TL,str);
	format(str, sizeof str, "{33FF33}WAR NEWS:{FFFFFF} The powers will fight in the battle of %s.",TLMapNames[TLInfo[Map]]);
 	SendMessageToMode(TL,COLOR_WHITE, str);
	//printf("DEBUG CFONTROL ChangeMapTL 2");
}
stock CreateTLAATower(team,Float:X,Float:Y,Float:Z)
{
	//printf("DEBUG CFONTROL CreateTLAATower 1");
	if(maxTLtowers >= MAX_TL_TOWERS)return -1;
    maxTLtowers++;
    TLAATower[maxTLtowers][Exists] = 1;
	TLAATower[maxTLtowers][Team] = team;
	TLAATower[maxTLtowers][AreaID] = CreateDynamicSphere(X, Y, Z, 3.0, W_TL, -1, -1);
	return TLAATower[maxTLtowers][AreaID];
	//printf("DEBUG CFONTROL CreateTLAATower 2");
}
stock CreateTheTLDynamicObject(modelid, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	if(maxTLobjects >= MAX_TL_OBJECTS)return -1;
    maxTLobjects++;
    TLInfo[Objects][maxTLobjects]=CreateTheDynamicObject(modelid, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz,W_TL);
	return TLInfo[Objects][maxTLobjects];
}
stock TLSettings()
{
	//printf("DEBUG CFONTROL TLSettings 1");
    maxTLobjects=-1;
    maxTLtowers=-1;
    KillTimer(TLInfo[Timer]);
    TextDrawSetString(TLInfo[TimeleftTD], " ");
	forLoop(id, MAX_TL_OBJECTS)
    {
    	if(TLInfo[Objects][id] != -1)DestroyTheDynamicObject(TLInfo[Objects][id]);
    	TLInfo[Objects][id] = -1;
    }
	forLoop(id, MAX_TL_VEHICLES)
    {
    	if(TLInfo[Vehicles][id] != -1)DestroyVehicle(TLInfo[Vehicles][id]);
    	TLInfo[Vehicles][id] = -1;
    }
	forLoop(id, MAX_SHIPS)
	{
	    if(ShipInfo[id][Exists]==1 && ShipInfo[id][Mode] == TL)
	    {
	        DestroyShip(id);
	    }
	}
	forLoop(id, MAX_SUPPLIES)
    {
	    if(Supplies[id][Exists] == 1 && Supplies[id][gMode] == TL)
		{
		    Supplies[id][Exists] = 0;
		    DestroyTheDynamicPickup(Supplies[id][gHP]);
		    DestroyTheDynamicPickup(Supplies[id][gArmor]);
		    DestroyTheDynamicPickup(Supplies[id][Ak]);
			DestroyTheDynamicPickup(Supplies[id][Sniper]);
			DestroyTheDynamicPickup(Supplies[id][Deagle]);
			DestroyTheDynamicPickup(Supplies[id][Grenade]);
			DestroyTheDynamicPickup(Supplies[id][Shotgun]);
		}
	}
	forLoop(id, MAX_TL_TOWERS)
	{
		if(TLAATower[id][Exists] == 1)
	    {
			TLAATower[id][Exists]=0;
			DestroyTheDynamicArea(TLAATower[id][AreaID]);
			TLAATower[id][AreaID] = -1;
		}
	}
    DestroyTheDynamicArea(TLInfo[AreaID]);
    TLInfo[AreaID] = -123;
	if(TLInfo[Map]==DDAY || TLInfo[Map]==MIDWAY || TLInfo[Map]==RAMELLE) ModeWeather[TL]=4,ModeTime[TL]=12;
    if(TLInfo[Map]==AIRBORNE) ModeWeather[TL]=4,ModeTime[TL]=0;
    if(TLInfo[Map]==PEARLHARBOR) ModeWeather[TL]=5,ModeTime[TL]=12;
    if(TLInfo[Map]==OFBRITAIN) ModeWeather[TL]=4,ModeTime[TL]=7;
    if(TLInfo[Map]==STALINGRAD || TLInfo[Map]==TANKBATTLE) ModeWeather[TL]=8,ModeTime[TL]=12;

    if(TLInfo[Map]==MIDWAY)
	{
	    CreateShip(TL,"American ship, Enterprise","Enterprise",100,ALLIES,SHIP,-3313,1138,4,0,0,0);
	    CreateShip(TL,"American ship, Yorktown","Yorktown",100,ALLIES,SHIP,-3270,1229,4,0,0,0);
	    CreateShip(TL,"American ship, Saratoga","Saratoga",100,ALLIES,SHIP,-3214,1294,4,0,0,0);
	    CreateShip(TL,"American ship, Hornet","Hornet",100,ALLIES,SHIP,-3211,1079,4,0,0,0);
        TLInfo[AllyShips] = 4;

	    CreateShip(TL,"Japanese ship, Akagi","Akagi",100,AXIS,SHIP,-3215,1947,4,0,0,0);
	    CreateShip(TL,"Japanese ship, Kaga","Kaga",100,AXIS,SHIP,-3164,2053,4,0,0,0);
	    CreateShip(TL,"Japanese ship, Soryu","Soryu",100,AXIS,SHIP,-3206,2171,4,0,0,0);
	    CreateShip(TL,"Japanese ship, Hiryu","Hiryu",100,AXIS,SHIP,-3252,2297,4,0,0,0);
	    TLInfo[AxisShips] = 4;
	}
    if(TLInfo[Map]==PEARLHARBOR)
    {
		TLInfo[TimeLeft]=60*10;
    	TLInfo[Timer] = SetTimer("StartLowerTLTimer", 4000, 0);
    	CreateShip(TL,"American ship, Monaghan","Monaghan",100,ALLIES,SHIP,2654.7422,-2696,4,0,0,0);
	    CreateShip(TL,"American ship, Maryland","Maryland",100,ALLIES,SHIP,2611.5671,-2799,4,0,0,0);
	    CreateShip(TL,"American ship, Conyngham","Conyngham",100,ALLIES,SHIP,2476.9585,-2956,4,0,0,0);
	    CreateShip(TL,"American ship, New Orleans","New Orleans",100,ALLIES,SHIP,2835.8689,-2606,4,0,0,0);
        TLInfo[AllyShips] = 4;
        TLInfo[Vehicles][0]=AddStaticVehicleEx(511,2779.2996,-2229.1167,10.4096,250.3285,2,1,60); //
		TLInfo[Vehicles][1]=AddStaticVehicleEx(476,2772.9253,-2251.6807,10.1224,271.8396,2,1,60); //
		TLInfo[Vehicles][2]=AddStaticVehicleEx(476,2790.2305,-2257.6753,10.1320,275.3672,2,1,60); //
		TLInfo[Vehicles][3]=AddStaticVehicleEx(476,2818.1687,-2267.0325,10.2034,278.2543,2,1,60); //
		TLInfo[Vehicles][4]=AddStaticVehicleEx(476,2837.6399,-2275.6780,10.1123,281.6591,2,1,60); //
		TLInfo[Vehicles][5]=AddStaticVehicleEx(476,2856.5171,-2280.0032,10.2036,271.9978,2,1,60); //
		TLInfo[Vehicles][6]=AddStaticVehicleEx(476,2820.1863,-2221.3074,10.0952,223.2209,2,1,60); //
		TLInfo[Vehicles][7]=AddStaticVehicleEx(476,2841.6626,-2230.3115,9.9941,216.8299,2,1,60); //
		TLInfo[Vehicles][8]=AddStaticVehicleEx(476,2867.3015,-2237.3689,10.1802,204.1546,2,1,60); //
        forLoop(id, MAX_TL_VEHICLES)
	    {
	    	if(TLInfo[Vehicles][id] != -1)SetVehicleVirtualWorld(TLInfo[Vehicles][id],W_TL);
	    }
        CreateTheTLDynamicObject(10766, 2786.79, -2231.43, 6.09,   0.00, 0.00, -110.34);
		CreateTheTLDynamicObject(3753, 2774.22, -2263.98, -2.37,   356.86, 0.00, 157.08);
		CreateTheTLDynamicObject(3279, 2836.61, -2529.56, 15.10,   0.00, 0.00, -2.58);
		CreateTheTLDynamicObject(3279, 2844.76, -2448.04, 16.38,   0.00, 0.00, 1.20);
		CreateTheTLDynamicObject(3279, 2671.64, -2562.43, 10.28,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(3279, 2522.83, -2676.36, 11.42,   0.00, 0.00, 9.30);
		CreateTheTLDynamicObject(3279, 2796.98, -2557.51, 11.34,   0.00, 0.00, -87.90);
		CreateTheTLDynamicObject(3279, 2795.27, -2335.95, 10.40,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(1447, 2812.57, -2436.59, 12.61,   90.00, 0.00, 2.22);
		CreateTheTLDynamicObject(1447, 2817.36, -2436.38, 12.61,   90.00, 0.00, 2.22);
		CreateTheTLDynamicObject(1447, 2822.36, -2436.48, 11.59,   2947.84, 79.16, -79.22);

		CreateTLAATower(ALLIES,2796.6816,-2556.4490,28.418);
 		CreateTLAATower(ALLIES,2837.1633,-2529.2688,32.17);
 		CreateTLAATower(ALLIES,2844.6841,-2448.9756,33.45);
 		CreateTLAATower(ALLIES,2795.1841,-2335.9480,27.47);
 		CreateTLAATower(ALLIES,2670.8262,-2562.8071,27.35);
 		CreateTLAATower(ALLIES,2523.0793,-2675.7673,28.49);
    }
    if(TLInfo[Map]==RAMELLE)
    {
        TLInfo[TimeLeft]=60*15;
    	TLInfo[Timer] = SetTimer("StartLowerTLTimer", 4000, 0);
		
        TLInfo[AreaID] = CreateDynamicSphere(-238.5190,196.3742,10.0163, 3.0, W_TL, -1, -1);
    	TLInfo[Vehicles][0]=AddStaticVehicleEx(432,-137.6759,579.1420,2.8448,187.6868,6,70,60); //
		TLInfo[Vehicles][1]=AddStaticVehicleEx(432,-126.8862,585.8248,2.4799,192.7744,14,7,60); //
		TLInfo[Vehicles][2]=AddStaticVehicleEx(432,-117.8437,586.2253,2.9061,191.5736,64,35,60); //
		TLInfo[Vehicles][3]=AddStaticVehicleEx(432,-105.0524,590.1189,3.0075,185.0266,100,59,60); //
		TLInfo[Vehicles][4]=AddStaticVehicleEx(432,-94.8295,591.3235,3.2245,175.9423,56,117,60); //
		TLInfo[Vehicles][5]=AddStaticVehicleEx(509,-145.3651,573.9759,3.1851,102.6673,22,56,60); //
        forLoop(id, MAX_TL_VEHICLES)
	    {
	    	if(TLInfo[Vehicles][id] != -1)SetVehicleVirtualWorld(TLInfo[Vehicles][id],W_TL);
	    }
    	CreateTheTLDynamicObject(11011, -200.60, 208.00, 13.50,   356.00, 0.00, 154.39);
		CreateTheTLDynamicObject(18267, -171.30, 211.70, 10.80,   0.00, 0.00, 76.00);
		CreateTheTLDynamicObject(12991, -219.60, 175.60, 6.20,   1.98, 352.00, 66.28);
		CreateTheTLDynamicObject(11502, -214.40, 183.10, 7.20,   0.00, 8.00, 244.00);
		CreateTheTLDynamicObject(11002, -105.00, 186.30, 7.70,   4.00, 0.00, 72.00);
		CreateTheTLDynamicObject(3648, -243.20, 177.40, 7.40,   352.00, 0.00, 158.00);
		CreateTheTLDynamicObject(3646, -251.80, 161.20, 6.40,   5.94, 8.04, 339.16);
		CreateTheTLDynamicObject(3644, -264.50, 44.30, 2.40,   0.00, 0.00, 251.75);
		CreateTheTLDynamicObject(3415, -245.70, 168.40, 3.50,   4.00, 0.00, 342.00);
		CreateTheTLDynamicObject(3414, -254.90, 147.50, 4.40,   9.99, 357.97, 70.35);
		CreateTheTLDynamicObject(18266, -235.70, 208.30, 13.00,   6.00, 0.00, 336.00);
		CreateTheTLDynamicObject(11092, -143.10, 208.60, 9.30,   0.00, 6.00, 345.25);
		CreateTheTLDynamicObject(10398, -184.90, 49.20, 29.40,   0.00, 0.00, 27.15);
		CreateTheTLDynamicObject(9361, -103.30, 163.30, 4.80,   0.00, 0.00, 117.25);
		CreateTheTLDynamicObject(3644, -286.10, 62.00, 2.50,   0.00, 0.00, 209.75);
		CreateTheTLDynamicObject(11092, -221.50, 155.90, 5.60,   0.00, 352.00, 69.25);
		CreateTheTLDynamicObject(18266, -268.60, 119.40, 4.20,   360.00, 0.00, 339.24);
		CreateTheTLDynamicObject(11502, -276.50, 90.60, 0.10,   358.00, 358.00, 249.93);
		CreateTheTLDynamicObject(11502, -279.40, 82.30, 0.40,   358.00, 360.00, 249.99);
		CreateTheTLDynamicObject(11011, -251.30, 78.40, 4.20,   0.00, 0.00, 159.14);
		CreateTheTLDynamicObject(3651, -242.30, 105.10, 3.10,   0.00, 0.00, 337.00);
		CreateTheTLDynamicObject(3651, -237.60, 115.90, 3.10,   0.00, 0.00, 336.99);
		CreateTheTLDynamicObject(11441, -182.70, 122.30, 2.50,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(11440, -207.10, 126.60, 2.10,   0.00, 0.00, 56.00);
		CreateTheTLDynamicObject(11088, -181.48, 138.50, 9.69,   354.00, 0.00, 156.00);
		CreateTheTLDynamicObject(11088, -181.50, 138.50, 7.49,   354.00, 0.00, 155.99);
		CreateTheTLDynamicObject(11088, -181.50, 138.50, 6.17,   354.00, 0.00, 155.99);
		CreateTheTLDynamicObject(18266, -131.00, 148.60, 6.35,   359.99, 0.00, 339.24);
		CreateTheTLDynamicObject(11011, -150.20, 112.90, 5.57,   0.00, 0.00, 159.13);
		CreateTheTLDynamicObject(11441, -195.20, 127.50, 2.50,   0.00, 0.00, 278.00);
		CreateTheTLDynamicObject(11441, -199.50, 115.90, 2.50,   0.00, 0.00, 183.75);
		CreateTheTLDynamicObject(11428, -189.00, 119.00, 7.50,   0.00, 0.00, 58.00);
		CreateTheTLDynamicObject(11441, -188.90, 110.10, 2.50,   0.00, 0.00, 239.75);
		CreateTheTLDynamicObject(2060, -214.90, 222.70, 10.90,   0.00, 0.00, 2.00);
		CreateTheTLDynamicObject(2060, -214.90, 222.70, 11.10,   0.00, 0.00, 2.00);
		CreateTheTLDynamicObject(2060, -214.90, 222.70, 11.30,   0.00, 0.00, 2.00);
		CreateTheTLDynamicObject(2060, -214.90, 222.70, 11.50,   0.00, 0.00, 2.00);
		CreateTheTLDynamicObject(2060, -214.90, 222.70, 11.70,   0.00, 0.00, 2.00);
		CreateTheTLDynamicObject(2060, -214.00, 222.60, 10.90,   0.00, 0.00, 344.00);
		CreateTheTLDynamicObject(2060, -214.00, 222.60, 11.10,   0.00, 0.00, 344.00);
		CreateTheTLDynamicObject(2060, -214.00, 222.60, 11.40,   0.00, 0.00, 344.00);
		CreateTheTLDynamicObject(2060, -214.00, 222.60, 11.60,   0.00, 0.00, 344.00);
		CreateTheTLDynamicObject(2060, -214.00, 222.60, 11.70,   0.00, 0.00, 344.00);
		CreateTheTLDynamicObject(2060, -213.10, 222.20, 10.90,   0.00, 0.00, 329.25);
		CreateTheTLDynamicObject(2060, -213.10, 222.20, 11.10,   0.00, 0.00, 329.24);
		CreateTheTLDynamicObject(2060, -213.10, 222.20, 11.30,   0.00, 0.00, 329.24);
		CreateTheTLDynamicObject(2060, -213.10, 222.30, 11.50,   0.00, 0.00, 329.24);
		CreateTheTLDynamicObject(2060, -213.10, 222.20, 11.70,   0.00, 0.00, 329.24);
		CreateTheTLDynamicObject(2060, -212.40, 221.60, 10.90,   0.00, 0.00, 309.74);
		CreateTheTLDynamicObject(2060, -212.40, 221.60, 11.10,   0.00, 0.00, 309.74);
		CreateTheTLDynamicObject(2060, -212.40, 221.60, 11.30,   0.00, 0.00, 309.74);
		CreateTheTLDynamicObject(2060, -212.40, 221.60, 11.50,   0.00, 0.00, 309.74);
		CreateTheTLDynamicObject(2060, -212.40, 221.60, 11.70,   0.00, 0.00, 309.74);
		CreateTheTLDynamicObject(2060, -213.30, 209.60, 10.20,   0.00, 0.00, 2.00);
		CreateTheTLDynamicObject(2060, -213.30, 209.60, 10.50,   0.00, 0.00, 2.00);
		CreateTheTLDynamicObject(2060, -213.30, 209.60, 10.70,   0.00, 0.00, 2.00);
		CreateTheTLDynamicObject(2060, -213.30, 209.60, 10.90,   0.00, 0.00, 2.00);
		CreateTheTLDynamicObject(2060, -213.30, 209.60, 11.10,   0.00, 0.00, 2.00);
		CreateTheTLDynamicObject(2060, -212.40, 209.60, 10.20,   0.00, 0.00, 351.50);
		CreateTheTLDynamicObject(2060, -211.60, 209.40, 10.20,   0.00, 0.00, 337.50);
		CreateTheTLDynamicObject(2060, -210.80, 208.90, 10.20,   0.00, 0.00, 323.49);
		CreateTheTLDynamicObject(2060, -212.40, 209.60, 10.40,   0.00, 0.00, 351.50);
		CreateTheTLDynamicObject(2060, -212.40, 209.60, 10.70,   0.00, 0.00, 351.50);
		CreateTheTLDynamicObject(2060, -212.40, 209.60, 10.90,   0.00, 0.00, 351.50);
		CreateTheTLDynamicObject(2060, -212.40, 209.60, 11.20,   0.00, 0.00, 351.50);
		CreateTheTLDynamicObject(2060, -211.60, 209.40, 10.40,   0.00, 0.00, 337.49);
		CreateTheTLDynamicObject(2060, -211.60, 209.40, 10.60,   0.00, 0.00, 337.49);
		CreateTheTLDynamicObject(2060, -211.60, 209.40, 10.90,   0.00, 0.00, 337.49);
		CreateTheTLDynamicObject(2060, -211.60, 209.40, 11.20,   0.00, 0.00, 337.49);
		CreateTheTLDynamicObject(2060, -210.80, 208.90, 10.40,   0.00, 0.00, 323.49);
		CreateTheTLDynamicObject(2060, -210.80, 208.90, 10.70,   0.00, 0.00, 323.49);
		CreateTheTLDynamicObject(2060, -210.80, 208.90, 11.00,   0.00, 0.00, 323.49);
		CreateTheTLDynamicObject(2060, -210.80, 208.90, 11.20,   0.00, 0.00, 323.49);
		CreateTheTLDynamicObject(2060, -213.30, 209.60, 11.20,   0.00, 0.00, 2.00);
		CreateTheTLDynamicObject(2060, -214.90, 222.70, 11.80,   0.00, 0.00, 2.00);
		CreateTheTLDynamicObject(2060, -214.00, 222.60, 11.80,   0.00, 0.00, 344.00);
		CreateTheTLDynamicObject(2060, -213.10, 222.20, 11.80,   0.00, 0.00, 329.24);
		CreateTheTLDynamicObject(2060, -212.40, 221.60, 11.80,   0.00, 0.00, 309.74);
		CreateTheTLDynamicObject(2060, -197.90, 226.00, 12.00,   0.00, 0.00, 334.49);
		CreateTheTLDynamicObject(2060, -197.10, 225.60, 11.90,   0.00, 0.00, 334.49);
		CreateTheTLDynamicObject(2060, -196.30, 225.20, 11.90,   0.00, 0.00, 334.49);
		CreateTheTLDynamicObject(2060, -195.60, 224.80, 11.80,   0.00, 0.00, 334.49);
		CreateTheTLDynamicObject(2060, -195.60, 224.80, 12.00,   0.00, 0.00, 334.49);
		CreateTheTLDynamicObject(2060, -195.60, 224.80, 12.20,   0.00, 0.00, 334.49);
		CreateTheTLDynamicObject(2060, -196.30, 225.30, 12.10,   0.00, 0.00, 334.49);
		CreateTheTLDynamicObject(2060, -196.30, 225.20, 12.20,   0.00, 0.00, 334.49);
		CreateTheTLDynamicObject(2060, -197.90, 226.00, 12.20,   0.00, 0.00, 334.49);
		CreateTheTLDynamicObject(2060, -197.90, 226.00, 12.40,   0.00, 0.00, 334.49);
		CreateTheTLDynamicObject(2060, -197.90, 226.00, 12.60,   0.00, 0.00, 334.49);
		CreateTheTLDynamicObject(2060, -197.10, 225.60, 12.10,   0.00, 0.00, 334.49);
		CreateTheTLDynamicObject(2060, -197.10, 225.60, 12.30,   0.00, 0.00, 334.49);
		CreateTheTLDynamicObject(2060, -197.10, 225.60, 12.50,   0.00, 0.00, 334.49);
		CreateTheTLDynamicObject(2060, -197.10, 225.60, 12.60,   0.00, 0.00, 334.49);
		CreateTheTLDynamicObject(2060, -196.30, 225.20, 12.40,   0.00, 0.00, 334.49);
		CreateTheTLDynamicObject(2060, -196.40, 225.20, 12.60,   0.00, 0.00, 334.49);
		CreateTheTLDynamicObject(2060, -195.60, 224.80, 12.40,   0.00, 0.00, 334.49);
		CreateTheTLDynamicObject(2060, -195.60, 224.80, 12.60,   0.00, 0.00, 334.49);
		CreateTheTLDynamicObject(7955, -204.60, 224.60, 11.30,   0.00, 0.00, 334.00);
		CreateTheTLDynamicObject(7955, -204.60, 224.60, 11.50,   0.00, 0.00, 334.00);
		CreateTheTLDynamicObject(7955, -204.60, 224.60, 11.50,   0.00, 0.00, 334.00);
		CreateTheTLDynamicObject(7955, -204.60, 224.60, 11.60,   0.00, 0.00, 334.00);
		CreateTheTLDynamicObject(7955, -207.80, 215.50, 11.40,   0.00, 0.00, 64.25);
		CreateTheTLDynamicObject(1411, -234.80, 236.00, 9.80,   0.00, 0.00, 246.00);
		CreateTheTLDynamicObject(1411, -216.70, 223.80, 10.30,   0.00, 0.00, 155.49);
		CreateTheTLDynamicObject(1411, -205.20, 218.80, 10.70,   0.00, 0.00, 155.49);
		CreateTheTLDynamicObject(854, -206.50, 221.70, 11.10,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(854, -205.00, 222.10, 11.10,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(854, -203.90, 223.30, 11.10,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(854, -202.80, 224.20, 11.10,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(853, -207.80, 209.90, 10.70,   4.00, 0.00, 0.00);
		CreateTheTLDynamicObject(852, -205.90, 214.60, 10.60,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(852, -197.80, 228.70, 11.00,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(852, -195.00, 226.60, 11.40,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(852, -190.90, 222.40, 11.40,   0.00, 0.00, 302.00);
		CreateTheTLDynamicObject(851, -222.10, 216.00, 11.00,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(851, -231.50, 202.00, 9.60,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(849, -217.10, 190.80, 8.80,   0.00, 0.00, 332.00);
		CreateTheTLDynamicObject(3098, -226.30, 205.70, 12.10,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(3098, -235.80, 186.90, 9.10,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(1462, -225.50, 210.50, 10.20,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(12957, -228.80, 166.50, 4.60,   5.99, 355.98, 20.42);
		CreateTheTLDynamicObject(13591, -227.10, 137.10, 1.80,   0.00, 0.00, 140.00);
		CreateTheTLDynamicObject(18249, -215.20, 195.30, 5.00,   8.00, 0.00, 334.00);
		CreateTheTLDynamicObject(854, -221.90, 204.00, 9.60,   2.00, 0.00, 358.00);
		CreateTheTLDynamicObject(854, -221.70, 205.10, 9.60,   2.00, 0.00, 357.99);
		CreateTheTLDynamicObject(854, -220.90, 204.70, 9.60,   2.00, 0.00, 357.99);
		CreateTheTLDynamicObject(852, -235.40, 181.20, 5.80,   10.00, 0.00, 0.00);
		CreateTheTLDynamicObject(18249, -249.80, 145.90, -4.80,   8.00, 0.00, 158.00);
		CreateTheTLDynamicObject(854, -237.90, 166.60, 3.80,   8.00, 0.00, 0.00);
		CreateTheTLDynamicObject(854, -229.00, 170.30, 4.60,   8.00, 0.00, 0.00);
		CreateTheTLDynamicObject(854, -228.90, 182.80, 6.70,   8.00, 0.00, 0.00);
		CreateTheTLDynamicObject(1411, -78.10, 196.50, 0.40,   0.00, 0.00, 251.99);
		CreateTheTLDynamicObject(1411, -76.50, 201.40, 0.40,   0.00, 0.00, 251.99);
		CreateTheTLDynamicObject(1411, -74.90, 206.30, 0.40,   0.00, 0.00, 251.99);
		CreateTheTLDynamicObject(1411, -73.40, 211.20, 0.70,   0.00, 0.00, 251.99);
		CreateTheTLDynamicObject(1411, -71.80, 216.10, 0.70,   0.00, 0.00, 251.99);
		CreateTheTLDynamicObject(1411, -70.20, 221.10, 0.70,   0.00, 0.00, 251.99);
		CreateTheTLDynamicObject(1411, -69.50, 224.40, 0.10,   0.00, 0.00, 251.99);
		CreateTheTLDynamicObject(1411, -227.90, 188.70, 6.80,   0.00, 0.00, 335.99);
		CreateTheTLDynamicObject(1411, -219.30, 193.70, 7.90,   0.00, 0.00, 335.99);
		CreateTheTLDynamicObject(1411, -219.40, 205.40, 8.90,   0.00, 0.00, 335.99);
		CreateTheTLDynamicObject(12957, -251.40, 121.60, 0.70,   3.99, 355.99, 22.28);
		CreateTheTLDynamicObject(18249, -257.40, 86.60, -3.20,   360.00, 0.00, 338.00);
		CreateTheTLDynamicObject(18249, -265.70, 102.40, -4.60,   359.99, 0.00, 337.99);
		CreateTheTLDynamicObject(854, -233.50, 157.70, 2.90,   8.00, 0.00, 0.00);
		CreateTheTLDynamicObject(854, -233.80, 162.30, 3.30,   8.00, 0.00, 0.00);
		CreateTheTLDynamicObject(854, -241.70, 156.00, 2.40,   8.00, 0.00, 0.00);
		CreateTheTLDynamicObject(701, -244.60, 158.10, 3.20,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(701, -244.40, 157.90, 3.20,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(701, -229.40, 158.60, 3.30,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(18249, -100.10, 219.90, -0.90,   356.00, 0.00, 250.00);
		CreateTheTLDynamicObject(18249, -139.80, 217.00, 1.90,   355.99, 0.00, 251.99);
		CreateTheTLDynamicObject(7955, -170.80, 227.70, 9.90,   358.00, 0.00, 260.00);
		CreateTheTLDynamicObject(12957, -167.90, 241.20, 10.70,   5.98, 355.97, 20.41);
		CreateTheTLDynamicObject(1411, -181.70, 236.40, 9.60,   0.00, 0.00, 77.49);
		CreateTheTLDynamicObject(1411, -172.90, 227.80, 9.00,   0.00, 0.00, 77.49);
		CreateTheTLDynamicObject(1411, -145.20, 226.80, 6.70,   0.00, 0.00, 77.49);
		CreateTheTLDynamicObject(1411, -128.30, 219.70, 4.50,   0.00, 0.00, 75.49);
		CreateTheTLDynamicObject(18249, -94.10, 210.80, -3.70,   355.99, 0.00, 159.99);
		CreateTheTLDynamicObject(2060, -164.90, 224.70, 9.30,   0.00, 0.00, 291.24);
		CreateTheTLDynamicObject(2060, -165.00, 225.70, 9.30,   0.00, 0.00, 265.24);
		CreateTheTLDynamicObject(2060, -164.80, 226.60, 9.30,   0.00, 0.00, 245.24);
		CreateTheTLDynamicObject(2060, -164.20, 227.40, 9.30,   0.00, 0.00, 227.24);
		CreateTheTLDynamicObject(2060, -163.30, 228.00, 9.30,   0.00, 0.00, 203.24);
		CreateTheTLDynamicObject(2060, -164.90, 224.70, 9.50,   0.00, 0.00, 291.24);
		CreateTheTLDynamicObject(2060, -164.90, 224.70, 9.70,   0.00, 0.00, 291.24);
		CreateTheTLDynamicObject(2060, -164.90, 224.70, 9.90,   0.00, 0.00, 291.24);
		CreateTheTLDynamicObject(2060, -164.90, 224.70, 10.10,   0.00, 0.00, 291.24);
		CreateTheTLDynamicObject(2060, -165.00, 225.70, 9.50,   0.00, 0.00, 265.24);
		CreateTheTLDynamicObject(2060, -165.00, 225.70, 9.70,   0.00, 0.00, 265.24);
		CreateTheTLDynamicObject(2060, -165.00, 225.70, 9.90,   0.00, 0.00, 265.24);
		CreateTheTLDynamicObject(2060, -165.00, 225.70, 10.10,   0.00, 0.00, 265.24);
		CreateTheTLDynamicObject(2060, -164.80, 226.60, 9.50,   0.00, 0.00, 245.24);
		CreateTheTLDynamicObject(2060, -164.80, 226.60, 9.70,   0.00, 0.00, 245.24);
		CreateTheTLDynamicObject(2060, -164.80, 226.60, 9.90,   0.00, 0.00, 245.24);
		CreateTheTLDynamicObject(2060, -164.80, 226.60, 10.10,   0.00, 0.00, 245.24);
		CreateTheTLDynamicObject(2060, -164.20, 227.40, 9.50,   0.00, 0.00, 227.24);
		CreateTheTLDynamicObject(2060, -164.20, 227.40, 9.60,   0.00, 0.00, 227.24);
		CreateTheTLDynamicObject(2060, -164.20, 227.40, 9.80,   0.00, 0.00, 227.24);
		CreateTheTLDynamicObject(2060, -164.20, 227.40, 9.90,   0.00, 0.00, 227.24);
		CreateTheTLDynamicObject(2060, -164.20, 227.40, 10.10,   0.00, 0.00, 227.24);
		CreateTheTLDynamicObject(2060, -163.30, 228.00, 9.50,   0.00, 0.00, 203.23);
		CreateTheTLDynamicObject(2060, -163.30, 228.00, 9.70,   0.00, 0.00, 203.23);
		CreateTheTLDynamicObject(2060, -163.30, 228.00, 9.90,   0.00, 0.00, 203.23);
		CreateTheTLDynamicObject(2060, -163.30, 228.00, 10.10,   0.00, 0.00, 203.23);
		CreateTheTLDynamicObject(3887, -290.10, 178.80, 10.70,   0.00, 0.00, 294.00);
		CreateTheTLDynamicObject(3866, -274.00, 217.10, 12.50,   0.00, 0.00, 104.00);
		CreateTheTLDynamicObject(3866, -270.20, 230.90, 16.40,   0.00, 0.00, 74.00);
		CreateTheTLDynamicObject(3887, -264.50, 239.40, 13.20,   2.00, 0.00, 255.00);
		CreateTheTLDynamicObject(3866, -297.50, 157.10, 10.10,   0.00, 0.00, 115.99);
		CreateTheTLDynamicObject(3866, -279.40, 164.00, 10.10,   0.00, 0.00, 109.98);
		CreateTheTLDynamicObject(3887, -301.60, 202.20, 11.20,   2.00, 0.00, 114.99);
		CreateTheTLDynamicObject(3887, -169.30, 245.90, 13.00,   2.00, 0.00, 257.00);
		CreateTheTLDynamicObject(3887, -117.60, 231.80, 11.10,   356.00, 0.00, 252.99);
		CreateTheTLDynamicObject(3866, -84.30, 210.70, 7.50,   0.00, 0.00, 72.00);
		CreateTheTLDynamicObject(3866, -82.90, 214.40, 7.50,   0.00, 0.00, 251.99);
		CreateTheTLDynamicObject(3887, -234.20, 265.70, 11.70,   0.00, 0.00, 252.00);
		CreateTheTLDynamicObject(3887, -235.00, 263.50, 11.70,   0.00, 0.00, 76.00);
		CreateTheTLDynamicObject(3887, -313.20, 218.90, 17.40,   0.00, 0.00, 344.00);
		CreateTheTLDynamicObject(3887, -309.50, 231.10, 10.00,   0.00, 0.00, 345.99);
		CreateTheTLDynamicObject(3887, -309.50, 231.10, 17.30,   0.00, 0.00, 345.99);
		CreateTheTLDynamicObject(3887, -284.70, 275.80, 9.50,   2.00, 0.00, 259.00);
		CreateTheTLDynamicObject(1337, -279.04, 252.03, 8.80,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(3866, -263.20, 185.90, 11.24,   0.00, 0.00, 109.98);
		CreateTheTLDynamicObject(18249, -216.00, 199.20, 3.50,   8.00, 0.00, 334.00);
		CreateTheTLDynamicObject(18249, -217.20, 199.70, 3.50,   8.00, 0.00, 334.00);
		CreateTheTLDynamicObject(18249, -216.20, 199.90, 3.50,   8.00, 0.00, 356.00);
		CreateTheTLDynamicObject(18249, -220.80, 198.70, 3.50,   8.00, 0.00, 318.00);
		CreateTheTLDynamicObject(18249, -222.50, 204.10, 3.50,   8.00, 0.00, 324.00);
		CreateTheTLDynamicObject(18249, -222.30, 200.40, 3.50,   8.00, 0.00, 334.00);
		CreateTheTLDynamicObject(18249, -219.80, 203.00, 3.50,   8.00, 0.00, 334.00);
		CreateTheTLDynamicObject(18249, -233.50, 176.90, -0.50,   7.99, 0.00, 317.99);
		CreateTheTLDynamicObject(18249, -229.70, 178.90, -0.50,   7.99, 0.00, 317.99);
		CreateTheTLDynamicObject(18249, -233.40, 173.10, -1.30,   7.99, 0.00, 317.99);
		CreateTheTLDynamicObject(18249, -227.40, 178.50, 0.00,   7.99, 0.00, 317.99);
		CreateTheTLDynamicObject(18249, -228.30, 176.40, -0.80,   7.99, 0.00, 341.99);
		CreateTheTLDynamicObject(18249, -230.50, 173.70, -1.50,   7.99, 0.00, 341.99);
		CreateTheTLDynamicObject(18249, -237.40, 172.70, -1.80,   7.99, 0.00, 341.99);
		CreateTheTLDynamicObject(18249, -235.20, 152.30, -3.00,   7.99, 0.00, 317.99);
		CreateTheTLDynamicObject(18249, -237.20, 155.60, -3.00,   7.99, 0.00, 353.99);
		CreateTheTLDynamicObject(18249, -239.50, 154.30, -3.00,   7.99, 0.00, 353.99);
		CreateTheTLDynamicObject(18249, -240.50, 159.70, -3.30,   7.99, 0.00, 353.99);
		CreateTheTLDynamicObject(18249, -265.70, 96.90, -4.60,   359.99, 0.00, 337.99);
		CreateTheTLDynamicObject(18249, -262.10, 98.80, -5.60,   359.99, 0.00, 337.99);
		CreateTheTLDynamicObject(18249, -267.30, 89.00, -5.60,   359.99, 0.00, 337.99);
		CreateTheTLDynamicObject(18249, -256.80, 94.10, -5.60,   359.99, 0.00, 337.99);
		CreateTheTLDynamicObject(18249, -249.90, 95.90, -5.60,   359.99, 0.00, 337.99);
		CreateTheTLDynamicObject(18249, -250.00, 102.70, -5.60,   359.99, 0.00, 337.99);
		CreateTheTLDynamicObject(18249, -241.80, 128.70, -5.00,   7.99, 0.00, 353.99);
		CreateTheTLDynamicObject(18249, -242.70, 129.70, -5.00,   7.99, 0.00, 353.99);
		CreateTheTLDynamicObject(18249, -244.00, 135.40, -5.00,   7.99, 0.00, 25.99);
		CreateTheTLDynamicObject(18249, -95.80, 205.30, -3.70,   355.99, 0.00, 159.99);
		CreateTheTLDynamicObject(18249, -86.60, 201.00, -3.70,   355.99, 0.00, 159.99);
		CreateTheTLDynamicObject(18249, -88.80, 201.30, -3.70,   355.99, 0.00, 159.99);
		CreateTheTLDynamicObject(18249, -134.70, 229.50, 0.90,   355.99, 0.00, 251.99);
		CreateTheTLDynamicObject(18249, -114.00, 232.20, -0.10,   355.99, 0.00, 251.99);
		CreateTheTLDynamicObject(18249, -125.80, 236.30, 0.40,   355.99, 0.00, 251.99);
		CreateTheTLDynamicObject(18249, -152.60, 242.70, 5.40,   355.99, 0.00, 251.99);
		CreateTheTLDynamicObject(18249, -165.70, 246.10, 5.40,   355.99, 0.00, 251.99);
		CreateTheTLDynamicObject(18249, -174.20, 247.70, 6.20,   355.99, 0.00, 251.99);
		CreateTheTLDynamicObject(18249, -216.00, 261.90, 6.20,   355.99, 0.00, 251.99);
		CreateTheTLDynamicObject(18249, -231.00, 253.20, 5.20,   1.99, 0.00, 251.99);
		CreateTheTLDynamicObject(18249, -238.20, 253.10, 3.70,   1.99, 0.00, 251.99);
		CreateTheTLDynamicObject(18249, -240.00, 252.20, 3.20,   1.99, 0.00, 251.99);
		CreateTheTLDynamicObject(18249, -248.50, 244.90, 3.20,   1.99, 0.00, 251.99);
		CreateTheTLDynamicObject(18249, -246.40, 245.10, 3.20,   1.99, 0.00, 251.99);
		CreateTheTLDynamicObject(18249, -248.70, 248.10, 3.20,   1.99, 0.00, 251.99);
		CreateTheTLDynamicObject(18249, -242.50, 247.20, 3.20,   1.99, 0.00, 251.99);
		CreateTheTLDynamicObject(18249, -277.80, 253.30, 0.70,   1.99, 0.00, 251.99);
		CreateTheTLDynamicObject(18249, -276.70, 275.30, 0.70,   1.99, 0.00, 251.99);
		CreateTheTLDynamicObject(18249, -289.70, 278.10, 0.20,   1.99, 0.00, 251.99);
		CreateTheTLDynamicObject(18249, -296.50, 250.00, 0.20,   1.99, 0.00, 251.99);
		CreateTheTLDynamicObject(18249, -295.30, 239.90, 8.20,   1.99, 0.00, 251.99);
		CreateTheTLDynamicObject(18249, -290.30, 238.70, 8.20,   1.99, 0.00, 251.99);
		CreateTheTLDynamicObject(18249, -311.00, 225.20, 4.90,   1.99, 0.00, 163.99);
		CreateTheTLDynamicObject(18249, -310.60, 231.20, 5.70,   1.98, 0.00, 163.99);
		CreateTheTLDynamicObject(18249, -279.60, 256.50, -0.10,   1.99, 0.00, 251.99);
		CreateTheTLDynamicObject(18249, -284.10, 259.30, -1.90,   1.99, 0.00, 251.99);
		CreateTheTLDynamicObject(18249, -278.00, 260.00, -0.40,   1.99, 0.00, 251.99);
		CreateTheTLDynamicObject(18249, -286.80, 259.80, -1.40,   1.99, 0.00, 207.99);
		CreateTheTLDynamicObject(18249, -301.90, 272.60, -1.40,   1.98, 0.00, 255.99);
		CreateTheTLDynamicObject(3866, -204.30, 80.50, 7.87,   0.00, 0.00, 73.98);
		CreateTheTLDynamicObject(3887, -220.80, 69.00, 5.54,   2.00, 0.00, 114.99);
		CreateTheTLDynamicObject(3887, -203.70, 97.20, 8.77,   2.00, 0.00, 241.75);
		CreateTheTLDynamicObject(3866, -223.80, 82.20, 6.30,   0.00, 0.00, 69.98);
		CreateTheTLDynamicObject(3887, -303.10, 161.70, 11.20,   2.00, 0.00, 24.99);
		CreateTheTLDynamicObject(3887, -110.40, 138.20, 8.63,   0.00, 0.00, 337.99);
		CreateTheTLDynamicObject(3887, -123.70, 125.30, 9.27,   0.00, 0.00, 157.98);
		CreateTheTLDynamicObject(3887, -162.10, 186.70, 9.60,   2.00, 0.00, 245.74);
		CreateTheTLDynamicObject(3887, -189.80, 179.20, 9.90,   2.00, 0.00, 299.74);
		CreateTheTLDynamicObject(1411, -191.53, 222.60, 10.70,   0.00, 0.00, 155.49);
		CreateTheTLDynamicObject(3276, -145.92, 84.83, 2.89,   90.00, 0.00, 25.50);
		CreateTheTLDynamicObject(3276, -136.22, 89.83, 4.97,   90.00, 0.00, 25.86);
		CreateTheTLDynamicObject(3276, -145.11, 85.37, 7.53,   90.00, 0.00, 25.86);
		CreateTheTLDynamicObject(3276, -152.38, 80.73, 9.37,   90.00, 0.00, 25.86);
		CreateTheTLDynamicObject(3276, -158.65, 76.89, 11.00,   90.00, 0.00, 25.86);
		CreateTheTLDynamicObject(3276, -153.76, 73.47, 13.83,   90.00, 0.00, 27.59);
		CreateTheTLDynamicObject(3276, -144.52, 78.28, 16.03,   90.00, 0.00, 27.59);
		CreateTheTLDynamicObject(3276, -135.09, 83.09, 17.82,   90.00, 0.00, 26.27);
		CreateTheTLDynamicObject(3276, -146.71, 77.14, 20.47,   90.00, 0.00, 27.59);
		CreateTheTLDynamicObject(3276, -153.75, 73.25, 21.75,   90.00, 0.00, 26.88);
		CreateTheTLDynamicObject(3276, -162.48, 69.33, 23.08,   90.00, 0.00, 26.88);
		CreateTheTLDynamicObject(3276, -153.21, 74.04, 25.60,   90.00, 0.00, 26.88);
		CreateTheTLDynamicObject(3276, -147.20, 77.50, 26.98,   90.00, 0.00, -66.06);
		CreateTheTLDynamicObject(3276, -146.20, 77.87, 26.98,   90.00, 0.00, -66.06);
		CreateTheTLDynamicObject(3276, -148.16, 76.85, 26.98,   90.00, 0.00, -66.06);
		CreateTheTLDynamicObject(3276, -146.95, 76.71, 26.98,   90.00, 0.00, 26.88);
		CreateTheTLDynamicObject(3276, -139.81, 72.25, 37.04,   100.28, -83.68, 74.76);
		CreateTheTLDynamicObject(3276, -171.41, 63.19, 45.96,   90.00, 0.00, 387.84);
		CreateTheTLDynamicObject(3276, -170.76, 61.93, 45.96,   90.00, 0.00, 387.84);
		CreateTheTLDynamicObject(3276, -171.41, 63.21, 47.62,   90.00, 0.00, 387.84);
		CreateTheTLDynamicObject(3276, -174.36, 58.71, 44.81,   90.00, 0.00, 295.74);
		CreateTheTLDynamicObject(3276, -169.71, 49.07, 44.81,   90.00, 0.00, 295.74);
		CreateTheTLDynamicObject(3276, -169.91, 74.49, 48.29,   90.00, 0.00, 476.52);
		CreateTheTLDynamicObject(3276, -176.91, 73.99, 50.02,   90.00, 0.00, 207.02);
		CreateTheTLDynamicObject(3276, -177.48, 75.18, 50.02,   90.00, 0.00, 207.02);
		CreateTheTLDynamicObject(2060, -178.18, 70.34, 52.07,   0.00, 0.00, 39.78);
		CreateTheTLDynamicObject(2060, -176.84, 71.24, 52.08,   0.00, 0.00, 24.06);
		CreateTheTLDynamicObject(2060, -176.29, 71.43, 52.09,   0.00, 0.00, 24.06);
		CreateTheTLDynamicObject(2060, -175.02, 71.98, 52.10,   0.00, 0.00, 24.06);
		CreateTheTLDynamicObject(2060, -173.75, 72.59, 52.11,   0.00, 0.00, 24.06);
		CreateTheTLDynamicObject(2060, -173.11, 72.88, 51.75,   0.00, 0.00, 24.06);
		CreateTheTLDynamicObject(2060, -178.18, 70.34, 51.34,   0.00, 0.00, 39.78);
		CreateTheTLDynamicObject(2060, -177.48, 70.86, 51.34,   0.00, 0.00, 34.62);
		CreateTheTLDynamicObject(2060, -176.84, 71.24, 51.34,   0.00, 0.00, 24.06);
		CreateTheTLDynamicObject(2060, -176.29, 71.43, 51.34,   0.00, 0.00, 24.06);
		CreateTheTLDynamicObject(2060, -175.02, 71.98, 51.34,   0.00, 0.00, 24.06);
		CreateTheTLDynamicObject(2060, -174.36, 72.32, 51.34,   0.00, 0.00, 24.06);
		CreateTheTLDynamicObject(2060, -173.75, 72.59, 51.34,   0.00, 0.00, 24.06);
		CreateTheTLDynamicObject(2060, -178.18, 70.34, 51.55,   0.00, 0.00, 39.78);
		CreateTheTLDynamicObject(2060, -177.48, 70.86, 51.55,   0.00, 0.00, 34.62);
		CreateTheTLDynamicObject(2060, -176.84, 71.24, 51.56,   0.00, 0.00, 24.06);
		CreateTheTLDynamicObject(2060, -176.29, 71.43, 51.56,   0.00, 0.00, 24.06);
		CreateTheTLDynamicObject(2060, -175.02, 71.98, 51.56,   0.00, 0.00, 24.06);
		CreateTheTLDynamicObject(2060, -174.36, 72.32, 51.56,   0.00, 0.00, 24.06);
		CreateTheTLDynamicObject(2060, -173.75, 72.59, 51.56,   0.00, 0.00, 24.06);
		CreateTheTLDynamicObject(2060, -178.18, 70.34, 51.76,   0.00, 0.00, 39.78);
		CreateTheTLDynamicObject(2060, -177.48, 70.86, 51.76,   0.00, 0.00, 34.62);
		CreateTheTLDynamicObject(2060, -176.84, 71.24, 51.77,   0.00, 0.00, 24.06);
		CreateTheTLDynamicObject(2060, -176.29, 71.43, 51.77,   0.00, 0.00, 24.06);
		CreateTheTLDynamicObject(2060, -175.02, 71.98, 51.78,   0.00, 0.00, 24.06);
		CreateTheTLDynamicObject(2060, -174.36, 72.32, 51.78,   0.00, 0.00, 24.06);
		CreateTheTLDynamicObject(2060, -173.75, 72.59, 51.78,   0.00, 0.00, 24.06);
		CreateTheTLDynamicObject(2060, -178.18, 70.34, 51.97,   0.00, 0.00, 39.78);
		CreateTheTLDynamicObject(2060, -176.84, 71.24, 51.98,   0.00, 0.00, 24.06);
		CreateTheTLDynamicObject(2060, -176.29, 71.43, 51.99,   0.00, 0.00, 24.06);
		CreateTheTLDynamicObject(2060, -175.02, 71.98, 51.99,   0.00, 0.00, 24.06);
		CreateTheTLDynamicObject(2060, -173.75, 72.59, 52.00,   0.00, 0.00, 24.06);
		CreateTheTLDynamicObject(2060, -173.11, 72.88, 51.34,   0.00, 0.00, 24.06);
		CreateTheTLDynamicObject(2060, -173.11, 72.88, 51.55,   0.00, 0.00, 24.06);

    }
	if(TLInfo[Map]==DDAY)
	{
	    TLInfo[AreaID] = CreateDynamicSphere(-2447.7444,-2761.9514,4.0249, 3.0, W_TL, -1, -1);
	    CreateDDShip(0,-2482.97, -3037.53,1,-2462.8101, -2876.8804, 1);
    	CreateDDShip(1,-2460.65,-3048.66,1,-2427.9580,-2873.3032,1);
    	TLInfo[TimeLeft]=60*15;
    	TLInfo[Timer] = SetTimer("StartLowerTLTimer", 20000, 0);

    	CreateTLAATower(AXIS,-2439.5581,-2791.5391,6.5454);
		CreateTLAATower(AXIS,-2427.3391,-2793.5618,6.6728);
		CreateTLAATower(AXIS,-2456.0840,-2786.7183,6.6728);
		CreateTLAATower(AXIS,-2455.4917,-2772.3516,13.3245);

        CreateTheTLDynamicObject(3887, -2506.35, -2816.56, -1.11,   0.00, 0.00, -102.48);
		CreateTheTLDynamicObject(3887, -2431.01, -2773.06, 4.63,   -0.90, -1.26, -284.64);
		CreateTheTLDynamicObject(3887, -2444.02, -2767.70, 3.60,   0.00, 0.00, -105.96);
    	CreateTheTLDynamicObject(1411, -2447.01, -2789.67, 1.35,   26.40, 1.68, -15.96);
		CreateTheTLDynamicObject(1411, -2411.03, -2798.34, 1.35,   26.40, 1.68, -19.44);
		CreateTheTLDynamicObject(1411, -2406.35, -2799.50, 1.35,   26.40, 1.68, -17.04);
		CreateTheTLDynamicObject(1411, -2401.19, -2801.16, 1.35,   26.40, 1.68, -22.32);
		CreateTheTLDynamicObject(1411, -2405.84, -2798.59, 1.35,   26.40, 1.68, -12.84);
		CreateTheTLDynamicObject(1411, -2472.99, -2786.51, 1.35,   26.40, 1.68, -1.08);
		CreateTheTLDynamicObject(1411, -2472.61, -2796.35, 1.35,   26.40, 1.68, 1.86);
		CreateTheTLDynamicObject(1411, -2468.47, -2786.57, 1.35,   26.40, 1.68, 1.86);
		CreateTheTLDynamicObject(1411, -2478.01, -2786.51, 1.35,   26.40, 1.68, -1.14);
		CreateTheTLDynamicObject(1411, -2483.44, -2786.49, 1.35,   26.40, 1.68, -1.08);
		CreateTheTLDynamicObject(1411, -2487.17, -2786.49, 1.35,   26.40, 1.68, -1.08);
		CreateTheTLDynamicObject(1411, -2471.13, -2785.70, 1.35,   26.40, 1.68, -19.56);
		CreateTheTLDynamicObject(1411, -2475.96, -2784.90, 1.35,   26.40, 1.68, -4.98);
		CreateTheTLDynamicObject(1411, -2480.18, -2785.01, 1.35,   26.40, 1.68, 0.54);
		CreateTheTLDynamicObject(1411, -2485.46, -2786.08, 1.35,   26.40, 1.68, 18.90);
		CreateTheTLDynamicObject(1411, -2488.60, -2785.52, 1.35,   26.40, 1.68, -13.50);
		CreateTheTLDynamicObject(1411, -2491.36, -2795.51, 1.35,   26.40, 1.68, -13.50);
		CreateTheTLDynamicObject(1411, -2490.05, -2796.46, 1.35,   26.40, 1.68, -1.08);
		CreateTheTLDynamicObject(1411, -2488.46, -2796.03, 1.35,   26.40, 1.68, 18.90);
		CreateTheTLDynamicObject(1411, -2486.56, -2796.43, 1.35,   26.40, 1.68, -1.08);
		CreateTheTLDynamicObject(1411, -2483.42, -2794.93, 1.35,   26.40, 1.68, 0.54);
		CreateTheTLDynamicObject(1411, -2481.38, -2796.42, 1.35,   26.40, 1.68, -1.14);
		CreateTheTLDynamicObject(1411, -2479.44, -2794.80, 1.35,   26.40, 1.68, -4.98);
		CreateTheTLDynamicObject(1411, -2476.60, -2796.38, 1.35,   26.40, 1.68, -1.08);
		CreateTheTLDynamicObject(1411, -2474.80, -2795.57, 1.35,   26.40, 1.68, -19.56);
		CreateTheTLDynamicObject(1411, -2469.26, -2796.87, 1.35,   26.40, 1.68, -6.84);
		CreateTheTLDynamicObject(1411, -2467.73, -2796.30, 1.35,   26.40, 1.68, -6.84);
		CreateTheTLDynamicObject(1411, -2464.06, -2797.71, 1.35,   26.40, 1.68, -10.86);
		CreateTheTLDynamicObject(1411, -2462.61, -2796.94, 1.35,   26.40, 1.68, -6.84);
		CreateTheTLDynamicObject(1411, -2459.03, -2798.56, 1.35,   26.40, 1.68, -7.80);
		CreateTheTLDynamicObject(1411, -2461.36, -2796.45, 1.35,   26.40, 1.68, 9.54);
		CreateTheTLDynamicObject(1411, -2456.76, -2796.33, 1.35,   26.40, 1.68, -10.86);
		CreateTheTLDynamicObject(1411, -2454.51, -2798.54, 1.35,   26.40, 1.68, 4.74);
		CreateTheTLDynamicObject(1411, -2451.83, -2797.01, 1.35,   26.40, 1.68, -4.92);
		CreateTheTLDynamicObject(1411, -2472.61, -2796.35, 1.35,   26.40, 1.68, 1.86);
		CreateTheTLDynamicObject(1411, -2451.19, -2799.45, 1.35,   26.40, 1.68, -15.96);
		CreateTheTLDynamicObject(1411, -2447.85, -2798.84, 1.35,   26.40, 1.68, -10.92);
		CreateTheTLDynamicObject(1411, -2446.89, -2798.47, 1.35,   26.40, 1.68, -28.14);
		CreateTheTLDynamicObject(1411, -2445.24, -2800.98, 1.35,   26.40, 1.68, -18.84);
		CreateTheTLDynamicObject(1411, -2441.40, -2800.57, 1.35,   26.40, 1.68, -25.98);
		CreateTheTLDynamicObject(1411, -2438.05, -2803.09, 1.35,   26.40, 1.68, -15.96);
		CreateTheTLDynamicObject(1411, -2435.33, -2802.34, 1.35,   26.40, 1.68, -15.96);
		CreateTheTLDynamicObject(1411, -2435.96, -2800.64, 1.35,   26.40, 1.68, -5.04);
		CreateTheTLDynamicObject(1411, -2438.56, -2800.31, 1.35,   26.40, 1.68, -24.90);
		CreateTheTLDynamicObject(1411, -2440.98, -2799.34, 1.35,   26.40, 1.68, -5.04);
		CreateTheTLDynamicObject(1411, -2434.07, -2803.86, 1.35,   26.40, 1.68, -15.96);
		CreateTheTLDynamicObject(1411, -2430.31, -2803.49, 1.35,   26.40, 1.68, -11.70);
		CreateTheTLDynamicObject(1411, -2426.62, -2804.18, 1.35,   26.40, 1.68, -12.84);
		CreateTheTLDynamicObject(1411, -2426.66, -2805.06, 1.35,   26.40, 1.68, -5.04);
		CreateTheTLDynamicObject(1411, -2426.89, -2802.14, 1.35,   26.40, 1.68, -24.90);
		CreateTheTLDynamicObject(1411, -2421.55, -2805.05, 1.35,   26.40, 1.68, -12.84);
		CreateTheTLDynamicObject(1411, -2421.28, -2806.24, 1.35,   26.40, 1.68, -23.94);
		CreateTheTLDynamicObject(1411, -2416.68, -2807.93, 1.35,   26.40, 1.68, -19.44);
		CreateTheTLDynamicObject(1411, -2416.35, -2806.26, 1.35,   26.40, 1.68, -22.32);
		CreateTheTLDynamicObject(1411, -2411.77, -2808.16, 1.35,   26.40, 1.68, -12.84);
		CreateTheTLDynamicObject(1411, -2412.43, -2809.06, 1.35,   26.40, 1.68, -17.04);
		CreateTheTLDynamicObject(1411, -2407.42, -2810.70, 1.35,   26.40, 1.68, -22.32);
		CreateTheTLDynamicObject(1411, -2404.93, -2786.25, 1.35,   26.40, 1.68, -17.04);
		CreateTheTLDynamicObject(1411, -2387.46, -2786.65, 1.35,   26.40, 1.68, -12.84);
		CreateTheTLDynamicObject(1411, -2388.01, -2787.53, 1.35,   26.40, 1.68, -17.04);
		CreateTheTLDynamicObject(1411, -2382.89, -2789.15, 1.35,   26.40, 1.68, -22.32);
		CreateTheTLDynamicObject(1411, -2493.18, -2770.73, 1.35,   26.40, 1.68, -13.50);
		CreateTheTLDynamicObject(1411, -2491.80, -2771.65, 1.35,   26.40, 1.68, -1.08);
		CreateTheTLDynamicObject(1411, -2490.13, -2771.19, 1.35,   26.40, 1.68, 18.90);
		CreateTheTLDynamicObject(1411, -2488.16, -2771.56, 1.35,   26.40, 1.68, -1.08);
		CreateTheTLDynamicObject(1411, -2484.95, -2770.03, 1.35,   26.40, 1.68, 0.54);
		CreateTheTLDynamicObject(1411, -2407.44, -2784.88, 1.35,   26.40, 1.68, -22.32);
		CreateTheTLDynamicObject(1411, -2498.04, -2797.10, 1.35,   26.40, 1.68, -13.50);
		CreateTheTLDynamicObject(1411, -2496.65, -2798.10, 1.35,   26.40, 1.68, -1.08);
		CreateTheTLDynamicObject(1411, -2494.97, -2797.71, 1.35,   26.40, 1.68, 18.90);
		CreateTheTLDynamicObject(1411, -2492.99, -2798.15, 1.35,   26.40, 1.68, -1.08);
		CreateTheTLDynamicObject(1411, -2489.76, -2796.69, 1.35,   26.40, 1.68, 0.54);
		CreateTheTLDynamicObject(1411, -2487.63, -2798.22, 1.35,   26.40, 1.68, -1.14);
		CreateTheTLDynamicObject(1411, -2485.61, -2796.64, 1.35,   26.40, 1.68, -4.98);
		CreateTheTLDynamicObject(1411, -2482.68, -2798.27, 1.35,   26.40, 1.68, -1.08);
		CreateTheTLDynamicObject(1411, -2480.86, -2797.49, 1.35,   26.40, 1.68, -19.56);
		CreateTheTLDynamicObject(1411, -2475.30, -2798.83, 1.35,   26.40, 1.68, -6.84);
		CreateTheTLDynamicObject(1411, -2473.75, -2798.30, 1.35,   26.40, 1.68, -6.84);
		CreateTheTLDynamicObject(1411, -2470.07, -2799.74, 1.35,   26.40, 1.68, -10.86);
		CreateTheTLDynamicObject(1411, -2468.60, -2799.00, 1.35,   26.40, 1.68, -6.84);
		CreateTheTLDynamicObject(1411, -2465.01, -2800.66, 1.35,   26.40, 1.68, -7.80);
		CreateTheTLDynamicObject(1411, -2467.32, -2798.59, 1.35,   26.40, 1.68, 9.54);
		CreateTheTLDynamicObject(1411, -2462.70, -2798.48, 1.35,   26.40, 1.68, -10.86);
		CreateTheTLDynamicObject(1411, -2460.42, -2800.71, 1.35,   26.40, 1.68, 4.74);
		CreateTheTLDynamicObject(1411, -2457.72, -2799.19, 1.35,   26.40, 1.68, -4.92);
		CreateTheTLDynamicObject(1411, -2478.47, -2798.54, 1.35,   26.40, 1.68, 1.86);
		CreateTheTLDynamicObject(1411, -2457.02, -2801.66, 1.35,   26.40, 1.68, -15.96);
		CreateTheTLDynamicObject(1411, -2453.65, -2801.06, 1.35,   26.40, 1.68, -10.92);
		CreateTheTLDynamicObject(1411, -2452.66, -2800.71, 1.35,   26.40, 1.68, -28.14);
		CreateTheTLDynamicObject(1411, -2450.99, -2803.22, 1.35,   26.40, 1.68, -18.84);
		CreateTheTLDynamicObject(1411, -2447.11, -2802.83, 1.35,   26.40, 1.68, -25.98);
		CreateTheTLDynamicObject(1411, -2443.74, -2805.36, 1.35,   26.40, 1.68, -15.96);
		CreateTheTLDynamicObject(1411, -2440.99, -2804.62, 1.35,   26.40, 1.68, -15.96);
		CreateTheTLDynamicObject(1411, -2441.59, -2802.93, 1.35,   26.40, 1.68, -5.04);
		CreateTheTLDynamicObject(1411, -2444.15, -2802.61, 1.35,   26.40, 1.68, -24.90);
		CreateTheTLDynamicObject(1411, -2446.53, -2801.69, 1.35,   26.40, 1.68, -5.04);
		CreateTheTLDynamicObject(1411, -2439.55, -2806.26, 1.35,   26.40, 1.68, -15.96);
		CreateTheTLDynamicObject(1411, -2435.71, -2805.96, 1.35,   26.40, 1.68, -11.70);
		CreateTheTLDynamicObject(1411, -2431.96, -2806.70, 1.35,   26.40, 1.68, -12.84);
		CreateTheTLDynamicObject(1411, -2431.92, -2807.64, 1.35,   26.40, 1.68, -5.04);
		CreateTheTLDynamicObject(1411, -2432.07, -2804.77, 1.35,   26.40, 1.68, -24.90);
		CreateTheTLDynamicObject(1411, -2426.66, -2807.73, 1.35,   26.40, 1.68, -12.84);
		CreateTheTLDynamicObject(1411, -2426.30, -2808.98, 1.35,   26.40, 1.68, -23.94);
		CreateTheTLDynamicObject(1411, -2421.62, -2810.73, 1.35,   26.40, 1.68, -19.44);
		CreateTheTLDynamicObject(1411, -2421.22, -2809.12, 1.35,   26.40, 1.68, -22.32);
		CreateTheTLDynamicObject(1411, -2416.55, -2811.08, 1.35,   26.40, 1.68, -12.84);
		CreateTheTLDynamicObject(1411, -2417.12, -2812.03, 1.35,   26.40, 1.68, -17.04);
		CreateTheTLDynamicObject(1411, -2412.03, -2813.73, 1.35,   26.40, 1.68, -22.32);
		CreateTheTLDynamicObject(1411, -2484.92, -2798.94, 1.35,   26.40, 1.68, -13.50);
		CreateTheTLDynamicObject(1411, -2483.47, -2799.95, 1.35,   26.40, 1.68, -1.08);
		CreateTheTLDynamicObject(1411, -2481.74, -2799.58, 1.35,   26.40, 1.68, 18.90);
		CreateTheTLDynamicObject(1411, -2479.70, -2800.03, 1.35,   26.40, 1.68, -1.08);
		CreateTheTLDynamicObject(1411, -2476.42, -2798.58, 1.35,   26.40, 1.68, 0.54);
		CreateTheTLDynamicObject(1411, -2474.23, -2800.13, 1.35,   26.40, 1.68, -1.14);
		CreateTheTLDynamicObject(1411, -2472.15, -2798.56, 1.35,   26.40, 1.68, -4.98);
		CreateTheTLDynamicObject(1411, -2469.17, -2800.21, 1.35,   26.40, 1.68, -1.08);
		CreateTheTLDynamicObject(1411, -2467.29, -2799.44, 1.35,   26.40, 1.68, -19.56);
		CreateTheTLDynamicObject(1411, -2461.68, -2800.79, 1.35,   26.40, 1.68, -6.84);
		CreateTheTLDynamicObject(1411, -2460.07, -2800.27, 1.35,   26.40, 1.68, -6.84);
		CreateTheTLDynamicObject(1411, -2456.33, -2801.73, 1.35,   26.40, 1.68, -10.86);
		CreateTheTLDynamicObject(1411, -2454.80, -2801.01, 1.35,   26.40, 1.68, -6.84);
		CreateTheTLDynamicObject(1411, -2451.15, -2802.68, 1.35,   26.40, 1.68, -7.80);
		CreateTheTLDynamicObject(1411, -2453.39, -2800.62, 1.35,   26.40, 1.68, 9.54);
		CreateTheTLDynamicObject(1411, -2448.73, -2800.53, 1.35,   26.40, 1.68, -10.86);
		CreateTheTLDynamicObject(1411, -2446.41, -2802.77, 1.35,   26.40, 1.68, 4.74);
		CreateTheTLDynamicObject(1411, -2443.67, -2801.26, 1.35,   26.40, 1.68, -4.92);
		CreateTheTLDynamicObject(1411, -2464.37, -2800.63, 1.35,   26.40, 1.68, 1.86);
		CreateTheTLDynamicObject(1411, -2442.88, -2803.76, 1.35,   26.40, 1.68, -15.96);
		CreateTheTLDynamicObject(1411, -2439.47, -2803.18, 1.35,   26.40, 1.68, -10.92);
		CreateTheTLDynamicObject(1411, -2438.44, -2802.84, 1.35,   26.40, 1.68, -28.14);
		CreateTheTLDynamicObject(1411, -2436.72, -2805.37, 1.35,   26.40, 1.68, -18.84);
		CreateTheTLDynamicObject(1411, -2432.80, -2804.99, 1.35,   26.40, 1.68, -25.98);
		CreateTheTLDynamicObject(1411, -2429.38, -2807.54, 1.35,   26.40, 1.68, -15.96);
		CreateTheTLDynamicObject(1411, -2426.58, -2806.82, 1.35,   26.40, 1.68, -15.96);
		CreateTheTLDynamicObject(1411, -2427.13, -2805.14, 1.35,   26.40, 1.68, -5.04);
		CreateTheTLDynamicObject(1411, -2429.65, -2804.83, 1.35,   26.40, 1.68, -24.90);
		CreateTheTLDynamicObject(1411, -2431.98, -2803.93, 1.35,   26.40, 1.68, -5.04);
		CreateTheTLDynamicObject(1411, -2424.95, -2808.52, 1.35,   26.40, 1.68, -15.96);
		CreateTheTLDynamicObject(1411, -2421.07, -2808.23, 1.35,   26.40, 1.68, -11.70);
		CreateTheTLDynamicObject(1411, -2417.26, -2808.99, 1.35,   26.40, 1.68, -12.84);
		CreateTheTLDynamicObject(1411, -2417.18, -2809.94, 1.35,   26.40, 1.68, -5.04);
		CreateTheTLDynamicObject(1411, -2417.28, -2807.09, 1.35,   26.40, 1.68, -24.90);
		CreateTheTLDynamicObject(1411, -2411.81, -2810.07, 1.35,   26.40, 1.68, -12.84);
		CreateTheTLDynamicObject(1411, -2411.40, -2811.34, 1.35,   26.40, 1.68, -23.94);
		CreateTheTLDynamicObject(1411, -2406.67, -2813.11, 1.35,   26.40, 1.68, -19.44);
		CreateTheTLDynamicObject(1411, -2406.21, -2811.51, 1.35,   26.40, 1.68, -22.32);
		CreateTheTLDynamicObject(1411, -2401.50, -2813.49, 1.35,   26.40, 1.68, -12.84);
		CreateTheTLDynamicObject(1411, -2402.01, -2814.46, 1.35,   26.40, 1.68, -17.04);
		CreateTheTLDynamicObject(1411, -2396.86, -2816.18, 1.35,   26.40, 1.68, -22.32);
		CreateTheTLDynamicObject(684, -2469.26, -2856.77, 3.02,   -25.92, 3.30, 178.74);
		CreateTheTLDynamicObject(684, -2483.10, -2858.36, 3.02,   -25.92, 3.30, 158.10);
		CreateTheTLDynamicObject(684, -2459.19, -2857.28, 3.02,   -25.92, 3.30, 160.38);
		CreateTheTLDynamicObject(684, -2475.90, -2856.52, 3.02,   -25.92, 3.30, 200.22);
		CreateTheTLDynamicObject(684, -2462.82, -2848.25, 3.02,   -25.92, 3.30, 169.98);
		CreateTheTLDynamicObject(684, -2450.25, -2849.97, 3.02,   -25.92, 3.30, 171.90);
		CreateTheTLDynamicObject(684, -2445.22, -2858.14, 3.02,   -25.92, 3.30, 157.50);
		CreateTheTLDynamicObject(684, -2439.33, -2855.46, 3.02,   -25.92, 3.30, 170.34);
		CreateTheTLDynamicObject(684, -2433.48, -2850.50, 3.02,   -25.92, 3.30, 170.34);
		CreateTheTLDynamicObject(684, -2425.92, -2855.58, 3.02,   -25.92, 3.30, 153.24);
		CreateTheTLDynamicObject(684, -2440.65, -2843.93, 3.02,   -25.92, 3.30, 168.72);
		CreateTheTLDynamicObject(684, -2427.56, -2838.22, 3.02,   -25.92, 3.30, 168.72);
		CreateTheTLDynamicObject(684, -2454.22, -2838.18, 3.02,   -25.92, 3.30, 168.72);
		CreateTheTLDynamicObject(684, -2469.21, -2841.53, 3.02,   -25.92, 3.30, 186.06);
		CreateTheTLDynamicObject(684, -2479.21, -2842.07, 3.02,   -25.92, 3.30, 186.06);
		CreateTheTLDynamicObject(684, -2486.00, -2842.04, 3.02,   -25.92, 3.30, 163.62);
		CreateTheTLDynamicObject(684, -2488.76, -2852.15, 3.02,   -25.92, 3.30, 183.96);
		CreateTheTLDynamicObject(684, -2426.27, -2851.40, 1.24,   -46.98, -6.12, 36.14);
		CreateTheTLDynamicObject(684, -2422.85, -2852.17, 1.24,   -46.98, -6.12, -54.10);
		CreateTheTLDynamicObject(684, -2451.74, -2834.58, 1.24,   -46.98, -6.12, -54.10);
		CreateTheTLDynamicObject(684, -2456.27, -2834.85, 1.24,   -46.98, -6.12, 64.52);
		CreateTheTLDynamicObject(684, -2467.46, -2838.49, 1.24,   -46.98, -6.12, -54.10);
		CreateTheTLDynamicObject(684, -2471.83, -2838.49, 1.24,   -46.98, -6.12, 64.52);
		CreateTheTLDynamicObject(684, -2477.29, -2838.49, 1.24,   -46.98, -6.12, -54.10);
		CreateTheTLDynamicObject(684, -2481.89, -2839.16, 1.24,   -46.98, -6.12, 64.52);
		CreateTheTLDynamicObject(684, -2483.26, -2838.49, 1.24,   -46.98, -6.12, -54.10);
		CreateTheTLDynamicObject(684, -2487.85, -2838.78, 1.24,   -46.98, -6.12, 64.52);
		CreateTheTLDynamicObject(684, -2486.98, -2848.91, 1.24,   -46.98, -6.12, -54.10);
		CreateTheTLDynamicObject(684, -2491.59, -2849.11, 1.24,   -46.98, -6.12, 64.52);
		CreateTheTLDynamicObject(684, -2480.32, -2854.98, 1.24,   -46.98, -6.12, -54.10);
		CreateTheTLDynamicObject(684, -2484.60, -2855.23, 1.24,   -46.98, -6.12, 64.52);
		CreateTheTLDynamicObject(684, -2467.22, -2853.19, 1.24,   -46.98, -6.12, -54.10);
		CreateTheTLDynamicObject(684, -2471.61, -2853.71, 1.24,   -46.98, -6.12, 64.52);
		CreateTheTLDynamicObject(684, -2460.23, -2844.07, 1.24,   -46.98, -6.12, -54.10);
		CreateTheTLDynamicObject(684, -2464.74, -2844.38, 1.24,   -46.98, -6.12, 64.52);
		CreateTheTLDynamicObject(684, -2448.00, -2846.42, 1.24,   -46.98, -6.12, -54.10);
		CreateTheTLDynamicObject(684, -2452.29, -2846.79, 1.24,   -46.98, -6.12, 64.52);
		CreateTheTLDynamicObject(684, -2456.16, -2853.61, 1.24,   -46.98, -6.12, -54.10);
		CreateTheTLDynamicObject(684, -2460.66, -2853.83, 1.24,   -46.98, -6.12, 64.52);
		CreateTheTLDynamicObject(684, -2437.87, -2840.36, 1.24,   -46.98, -6.12, -54.10);
		CreateTheTLDynamicObject(684, -2442.34, -2840.85, 1.24,   -46.98, -6.12, 64.52);
		CreateTheTLDynamicObject(684, -2425.23, -2834.72, 1.24,   -46.98, -6.12, -54.10);
		CreateTheTLDynamicObject(684, -2429.57, -2835.15, 1.24,   -46.98, -6.12, 64.52);
		CreateTheTLDynamicObject(684, -2431.00, -2846.88, 1.24,   -46.98, -6.12, -54.10);
		CreateTheTLDynamicObject(684, -2435.40, -2847.49, 1.24,   -46.98, -6.12, 64.52);
		CreateTheTLDynamicObject(684, -2437.00, -2851.85, 1.24,   -46.98, -6.12, -54.10);
		CreateTheTLDynamicObject(684, -2441.36, -2852.30, 1.24,   -46.98, -6.12, 64.52);
		CreateTheTLDynamicObject(684, -2442.36, -2854.80, 1.24,   -46.98, -6.12, -54.10);
		CreateTheTLDynamicObject(684, -2446.54, -2855.14, 1.24,   -46.98, -6.12, 64.52);
		CreateTheTLDynamicObject(684, -2479.13, -2854.12, 1.24,   -46.98, -6.12, 77.84);
		CreateTheTLDynamicObject(684, -2475.02, -2852.75, 1.24,   -46.98, -6.12, -40.72);
		CreateTheTLDynamicObject(11435, -2471.92, -2812.76, -0.21,   28.62, -193.86, -72.30);
		CreateTheTLDynamicObject(11435, -2474.76, -2811.50, -0.21,   28.62, -193.86, 46.62);
		CreateTheTLDynamicObject(11435, -2474.50, -2814.59, -0.21,   28.62, -193.86, 169.68);
		CreateTheTLDynamicObject(11435, -2455.75, -2821.13, -0.21,   28.62, -193.86, 169.68);
		CreateTheTLDynamicObject(11435, -2453.34, -2819.31, -0.21,   28.62, -193.86, -72.18);
		CreateTheTLDynamicObject(11435, -2456.10, -2817.99, -0.21,   28.62, -193.86, 46.62);
		CreateTheTLDynamicObject(11435, -2451.12, -2822.31, -0.21,   28.62, -193.86, 169.68);
		CreateTheTLDynamicObject(11435, -2448.66, -2820.51, -0.21,   28.62, -193.86, -72.18);
		CreateTheTLDynamicObject(11435, -2451.37, -2819.20, -0.21,   28.62, -193.86, 46.62);
		CreateTheTLDynamicObject(11435, -2453.16, -2830.32, -0.21,   28.62, -193.86, 169.68);
		CreateTheTLDynamicObject(11435, -2450.73, -2828.59, -0.21,   28.62, -193.86, -72.18);
		CreateTheTLDynamicObject(11435, -2453.45, -2827.37, -0.21,   28.62, -193.86, 46.62);
		CreateTheTLDynamicObject(11435, -2464.67, -2827.60, -0.21,   28.62, -193.86, 169.68);
		CreateTheTLDynamicObject(11435, -2462.35, -2825.85, -0.21,   28.62, -193.86, -72.18);
		CreateTheTLDynamicObject(11435, -2465.19, -2824.59, -0.21,   28.62, -193.86, 46.62);
		CreateTheTLDynamicObject(11435, -2479.91, -2828.23, -0.21,   28.62, -193.86, 169.68);
		CreateTheTLDynamicObject(11435, -2477.42, -2826.38, -0.21,   28.62, -193.86, -72.18);
		CreateTheTLDynamicObject(11435, -2480.19, -2825.04, -0.21,   28.62, -193.86, 46.62);
		CreateTheTLDynamicObject(11435, -2477.46, -2820.45, -0.21,   28.62, -193.86, 169.68);
		CreateTheTLDynamicObject(11435, -2475.06, -2818.78, -0.21,   28.62, -193.86, -72.18);
		CreateTheTLDynamicObject(11435, -2477.74, -2817.44, -0.21,   28.62, -193.86, 46.62);
		CreateTheTLDynamicObject(11435, -2469.86, -2816.04, -0.21,   28.62, -193.86, 169.68);
		CreateTheTLDynamicObject(11435, -2467.25, -2814.25, -0.21,   28.62, -193.86, -72.18);
		CreateTheTLDynamicObject(11435, -2470.12, -2812.87, -0.21,   28.62, -193.86, 46.62);
		CreateTheTLDynamicObject(11435, -2460.74, -2813.15, -0.21,   28.62, -193.86, 169.68);
		CreateTheTLDynamicObject(11435, -2458.30, -2811.41, -0.21,   28.62, -193.86, -72.30);
		CreateTheTLDynamicObject(11435, -2461.02, -2809.96, -0.21,   28.62, -193.86, 46.62);
		CreateTheTLDynamicObject(11435, -2438.87, -2825.70, -0.21,   28.62, -193.86, 169.68);
		CreateTheTLDynamicObject(11435, -2436.44, -2823.96, -0.21,   28.62, -193.86, -72.30);
		CreateTheTLDynamicObject(11435, -2439.26, -2822.63, -0.21,   28.62, -193.86, 46.62);
		CreateTheTLDynamicObject(11435, -2442.43, -2834.11, -0.21,   28.62, -193.86, 169.68);
		CreateTheTLDynamicObject(11435, -2439.98, -2832.15, -0.21,   28.62, -193.86, -72.30);
		CreateTheTLDynamicObject(11435, -2442.66, -2830.93, -0.21,   28.62, -193.86, 46.62);
		CreateTheTLDynamicObject(11435, -2441.80, -2817.31, -0.21,   28.62, -193.86, 169.68);
		CreateTheTLDynamicObject(11435, -2439.41, -2815.71, -0.21,   28.62, -193.86, -72.30);
		CreateTheTLDynamicObject(11435, -2442.22, -2814.34, -0.21,   28.62, -193.86, 46.62);
		CreateTheTLDynamicObject(11435, -2448.16, -2812.22, -0.21,   28.62, -193.86, 169.68);
		CreateTheTLDynamicObject(11435, -2445.81, -2810.39, -0.21,   28.62, -193.86, -72.30);
		CreateTheTLDynamicObject(11435, -2448.40, -2808.99, -0.21,   28.62, -193.86, 46.62);
		CreateTheTLDynamicObject(11435, -2432.82, -2818.15, -0.21,   28.62, -193.86, 169.68);
		CreateTheTLDynamicObject(11435, -2430.38, -2816.24, -0.21,   28.62, -193.86, -72.30);
		CreateTheTLDynamicObject(11435, -2433.09, -2814.91, -0.21,   28.62, -193.86, 46.62);
		CreateTheTLDynamicObject(11435, -2429.31, -2826.46, -0.21,   28.62, -193.86, 169.68);
		CreateTheTLDynamicObject(11435, -2426.89, -2824.69, -0.21,   28.62, -193.86, -72.30);
		CreateTheTLDynamicObject(11435, -2429.65, -2823.35, -0.21,   28.62, -193.86, 46.62);
		CreateTheTLDynamicObject(11435, -2425.77, -2817.23, -0.21,   28.62, -193.86, 169.68);
		CreateTheTLDynamicObject(11435, -2423.35, -2815.50, -0.21,   28.62, -193.86, -72.30);
		CreateTheTLDynamicObject(11435, -2426.17, -2814.14, -0.21,   28.62, -193.86, 46.62);
		CreateTheTLDynamicObject(11435, -2428.13, -2800.70, -0.21,   28.62, -193.86, 169.68);
		CreateTheTLDynamicObject(11435, -2425.79, -2799.05, -0.21,   28.62, -193.86, -72.30);
		CreateTheTLDynamicObject(11435, -2428.53, -2797.84, -0.21,   28.62, -193.86, 46.62);
		CreateTheTLDynamicObject(11435, -2432.33, -2800.88, -0.21,   28.62, -193.86, 169.68);
		CreateTheTLDynamicObject(11435, -2429.88, -2799.15, -0.21,   28.62, -193.86, -72.30);
		CreateTheTLDynamicObject(11435, -2432.65, -2797.76, -0.21,   28.62, -193.86, 46.62);
		CreateTheTLDynamicObject(11435, -2415.59, -2804.80, -0.21,   28.62, -193.86, 169.68);
		CreateTheTLDynamicObject(11435, -2413.09, -2802.95, -0.21,   28.62, -193.86, -72.30);
		CreateTheTLDynamicObject(11435, -2415.83, -2801.60, -0.21,   28.62, -193.86, 46.62);
		CreateTheTLDynamicObject(11435, -2477.14, -2816.47, -0.21,   28.62, -193.86, 169.68);
		CreateTheTLDynamicObject(11435, -2474.63, -2814.68, -0.21,   28.62, -193.86, -72.30);
		CreateTheTLDynamicObject(11435, -2477.43, -2813.46, -0.21,   28.62, -193.86, 46.62);
		CreateTheTLDynamicObject(11435, -2484.31, -2813.08, -0.21,   28.62, -193.86, 169.68);
		CreateTheTLDynamicObject(11435, -2481.88, -2811.25, -0.21,   28.62, -193.86, -72.30);
		CreateTheTLDynamicObject(11435, -2484.64, -2810.14, -0.21,   28.62, -193.86, 46.62);
		CreateTheTLDynamicObject(3049, -2460.99, -2789.21, 5.46,   0.00, 0.00, -13.86);
		CreateTheTLDynamicObject(3049, -2456.78, -2790.25, 5.46,   0.00, 0.00, -13.86);
		CreateTheTLDynamicObject(3049, -2452.55, -2791.37, 5.46,   0.00, 0.00, -14.40);
		CreateTheTLDynamicObject(3049, -2448.28, -2792.43, 5.46,   0.00, 0.00, -13.86);
		CreateTheTLDynamicObject(3049, -2439.66, -2794.31, 5.46,   0.00, 0.00, -13.86);
		CreateTheTLDynamicObject(3049, -2435.46, -2795.40, 5.46,   0.00, 0.00, -13.86);
		CreateTheTLDynamicObject(3049, -2431.26, -2796.48, 5.46,   0.00, 0.00, -13.86);
		CreateTheTLDynamicObject(3049, -2426.99, -2797.55, 5.46,   0.00, 0.00, -13.86);
		CreateTheTLDynamicObject(3049, -2423.05, -2798.50, 5.46,   0.00, 0.00, -13.86);
		CreateTheTLDynamicObject(3049, -2418.56, -2798.57, 5.46,   0.00, 0.00, -0.48);
		CreateTheTLDynamicObject(3049, -2414.26, -2798.74, 5.46,   0.00, 0.00, -1.62);
		CreateTheTLDynamicObject(3049, -2465.22, -2788.06, 5.46,   0.00, 0.00, -37.08);
		CreateTheTLDynamicObject(3049, -2468.77, -2785.33, 5.46,   0.00, 0.00, -37.98);
		CreateTheTLDynamicObject(3049, -2447.26, -2788.08, 5.46,   0.00, 0.00, 75.48);
		CreateTheTLDynamicObject(3049, -2444.17, -2793.40, 5.46,   0.00, 0.00, -103.74);
		CreateTheTLDynamicObject(3095, -2451.87, -2786.84, 4.99,   0.00, 0.00, -14.28);
		CreateTheTLDynamicObject(3095, -2459.71, -2784.85, 4.99,   0.00, 0.00, -14.34);
		CreateTheTLDynamicObject(3095, -2465.90, -2781.58, 4.99,   0.00, 0.00, -38.22);
		CreateTheTLDynamicObject(3095, -2438.55, -2789.97, 4.99,   0.00, 0.00, -13.86);
		CreateTheTLDynamicObject(3095, -2429.86, -2792.16, 4.99,   0.00, 0.00, -13.86);
		CreateTheTLDynamicObject(3095, -2425.58, -2793.23, 4.99,   0.00, 0.00, -13.86);
		CreateTheTLDynamicObject(3095, -2418.25, -2794.06, 4.99,   0.00, 0.00, -0.90);
		CreateTheTLDynamicObject(3095, -2452.54, -2790.80, 1.03,   0.00, 90.00, -104.46);
		CreateTheTLDynamicObject(3095, -2439.65, -2793.77, 1.03,   0.00, 90.00, -103.86);
		CreateTheTLDynamicObject(3095, -2431.04, -2795.97, 1.03,   0.00, 90.00, -104.28);
		CreateTheTLDynamicObject(3095, -2418.65, -2798.07, 1.03,   0.00, 90.00, -91.14);
		CreateTheTLDynamicObject(3095, -2427.29, -2796.88, 1.03,   0.00, 90.00, -104.34);
		CreateTheTLDynamicObject(3095, -2460.62, -2788.74, 1.03,   0.00, 90.00, -103.98);
		CreateTheTLDynamicObject(3095, -2447.70, -2787.92, 1.05,   0.00, 90.00, -14.46);
		CreateTheTLDynamicObject(3095, -2442.58, -2788.96, 1.03,   0.00, 90.00, -194.76);
		CreateTheTLDynamicObject(3095, -2450.55, -2782.98, 1.03,   0.00, 90.00, 75.00);
		CreateTheTLDynamicObject(3095, -2437.65, -2785.97, 1.03,   0.00, 90.00, -283.80);
		CreateTheTLDynamicObject(3095, -2429.47, -2788.06, 1.03,   0.00, 90.00, -283.80);
		CreateTheTLDynamicObject(3095, -2468.35, -2784.98, 1.03,   0.00, 90.00, -127.68);
		CreateTheTLDynamicObject(3049, -2410.19, -2796.93, 5.46,   0.00, 0.00, 23.22);
		CreateTheTLDynamicObject(3049, -2406.14, -2795.16, 5.46,   0.00, 0.00, 23.34);
		CreateTheTLDynamicObject(3095, -2421.59, -2790.00, 1.03,   0.00, 90.00, -282.54);
		CreateTheTLDynamicObject(3095, -2410.29, -2796.36, 1.03,   0.00, 90.00, -66.24);
		CreateTheTLDynamicObject(3095, -2412.11, -2792.80, 4.99,   0.00, 0.00, 24.18);
		CreateTheTLDynamicObject(3095, -2407.32, -2788.93, 4.99,   0.00, 0.00, 55.32);
		CreateTheTLDynamicObject(3095, -2417.24, -2789.81, 1.03,   0.00, 90.00, -261.42);
		CreateTheTLDynamicObject(3095, -2413.23, -2788.85, 1.03,   0.00, 90.00, -233.40);
		CreateTheTLDynamicObject(3095, -2410.77, -2786.43, 1.03,   0.00, 90.00, -214.26);
		CreateTheTLDynamicObject(3095, -2406.17, -2773.89, 2.35,   0.00, 90.00, -182.88);
		CreateTheTLDynamicObject(1411, -2445.80, -2792.03, 1.26,   26.40, 1.68, -13.38);
		CreateTheTLDynamicObject(1411, -2445.94, -2788.60, 1.37,   26.40, 1.68, -14.64);
		CreateTheTLDynamicObject(1411, -2444.70, -2787.05, 2.18,   26.40, 1.68, -14.64);
		CreateTheTLDynamicObject(16093, -2428.23, -2793.44, 5.54,   0.00, 0.00, -14.28);
		CreateTheTLDynamicObject(16093, -2456.41, -2786.57, 5.54,   0.00, 0.00, -14.16);
		CreateTheTLDynamicObject(3095, -2458.95, -2780.76, 1.03,   0.00, 90.00, 75.00);
		CreateTheTLDynamicObject(3524, -2434.22, -2834.81, 3.50,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(18359, -2413.71, -2790.81, -39.51,   90.00, 0.00, -285.42);
		CreateTheTLDynamicObject(18359, -2485.17, -2813.25, -39.51,   90.00, 0.00, -470.22);
		CreateTheTLDynamicObject(18359, -2435.37, -2738.76, -39.51,   90.00, 0.00, -558.48);
		CreateTheTLDynamicObject(18359, -2460.56, -2971.55, -92.31,   90.00, 0.00, -282.96);
		CreateTheTLDynamicObject(18359, -2537.45, -3042.81, -92.31,   90.00, 0.00, -358.08);
		CreateTheTLDynamicObject(18359, -2507.84, -2979.48, -84.24,   90.00, 0.00, -440.52);
		CreateTheTLDynamicObject(3049, -2472.11, -2782.64, 5.46,   0.00, 0.00, -51.60);
		CreateTheTLDynamicObject(3049, -2474.83, -2779.23, 5.46,   0.00, 0.00, -52.50);
		CreateTheTLDynamicObject(3049, -2477.49, -2775.85, 8.19,   0.00, 0.00, -109.50);
		CreateTheTLDynamicObject(3049, -2476.04, -2771.76, 8.19,   0.00, 0.00, -109.50);
		CreateTheTLDynamicObject(3049, -2474.62, -2767.52, 9.72,   0.00, 0.00, -110.88);
		CreateTheTLDynamicObject(3095, -2474.35, -2778.93, 1.03,   0.00, 90.00, -142.14);
		CreateTheTLDynamicObject(3095, -2475.42, -2771.56, 3.62,   0.00, 90.00, -199.50);
		CreateTheTLDynamicObject(3095, -2471.05, -2776.61, 4.99,   0.00, 0.00, -51.36);
		CreateTheTLDynamicObject(3095, -2471.73, -2773.23, 7.46,   0.00, 0.00, -109.44);
		CreateTheTLDynamicObject(3095, -2468.68, -2764.95, 9.74,   0.00, 0.00, -112.14);
		CreateTheTLDynamicObject(3095, -2463.95, -2777.91, 1.03,   0.00, 90.00, 50.16);
		CreateTheTLDynamicObject(3095, -2467.99, -2774.58, 3.50,   0.00, 90.00, -19.26);
		CreateTheTLDynamicObject(3095, -2473.08, -2777.02, 3.43,   0.00, 90.00, -109.68);
		CreateTheTLDynamicObject(3049, -2403.55, -2791.45, 5.46,   0.00, 0.00, 55.56);
		CreateTheTLDynamicObject(3049, -2401.06, -2787.87, 5.86,   0.00, 0.00, 55.20);
		CreateTheTLDynamicObject(3049, -2399.43, -2783.78, 6.82,   0.00, 0.00, 69.06);
		CreateTheTLDynamicObject(3049, -2397.83, -2779.68, 6.82,   0.00, 0.00, 69.06);
		CreateTheTLDynamicObject(3049, -2397.65, -2775.24, 6.80,   0.00, 0.00, 88.44);
		CreateTheTLDynamicObject(3095, -2403.98, -2791.08, 1.03,   0.00, 90.00, -34.68);
		CreateTheTLDynamicObject(3095, -2399.92, -2783.60, 2.37,   0.00, 90.00, -21.30);
		CreateTheTLDynamicObject(3095, -2398.18, -2775.19, 2.37,   0.00, 90.00, -1.98);
		CreateTheTLDynamicObject(3095, -2398.68, -2766.55, 3.64,   0.00, 90.00, 8.64);
		CreateTheTLDynamicObject(3095, -2402.60, -2759.55, 5.24,   0.00, 90.00, 50.22);
		CreateTheTLDynamicObject(3095, -2410.00, -2754.87, 5.24,   0.00, 90.00, 65.46);
		CreateTheTLDynamicObject(3095, -2418.32, -2751.64, 5.24,   0.00, 90.00, 72.18);
		CreateTheTLDynamicObject(3095, -2426.80, -2748.92, 5.24,   0.00, 90.00, 72.18);
		CreateTheTLDynamicObject(3095, -2438.16, -2745.28, 5.24,   0.00, 90.00, 72.18);
		CreateTheTLDynamicObject(3095, -2443.33, -2743.61, 5.24,   0.00, 90.00, 72.18);
		CreateTheTLDynamicObject(3095, -2451.87, -2741.99, 5.24,   0.00, 90.00, 85.98);
		CreateTheTLDynamicObject(3095, -2459.64, -2744.12, 5.24,   0.00, 90.00, 123.96);
		CreateTheTLDynamicObject(3095, -2465.80, -2749.97, 5.24,   0.00, 90.00, 142.98);
		CreateTheTLDynamicObject(3095, -2469.98, -2757.23, 5.24,   0.00, 90.00, 157.80);
		CreateTheTLDynamicObject(3095, -2472.51, -2763.52, 5.29,   0.00, 90.00, 159.30);
		CreateTheTLDynamicObject(3049, -2473.46, -2777.51, 8.19,   0.00, 0.00, -19.92);
		CreateTheTLDynamicObject(3049, -2469.30, -2778.98, 8.19,   0.00, 0.00, -19.92);
		CreateTheTLDynamicObject(3095, -2470.21, -2768.71, 5.76,   0.00, 90.00, -111.66);
		CreateTheTLDynamicObject(3049, -2470.46, -2769.16, 9.78,   0.00, 0.00, -20.82);
		CreateTheTLDynamicObject(3095, -2464.93, -2766.52, 5.75,   0.00, 90.00, -22.68);
		CreateTheTLDynamicObject(3049, -2473.02, -2763.35, 9.73,   0.00, 0.00, -110.64);
		CreateTheTLDynamicObject(3049, -2471.37, -2759.27, 9.74,   0.00, 0.00, -111.84);
		CreateTheTLDynamicObject(3049, -2470.47, -2757.11, 9.74,   0.00, 0.00, -111.00);
		CreateTheTLDynamicObject(3049, -2468.83, -2753.02, 9.75,   0.00, 0.00, -127.74);
		CreateTheTLDynamicObject(3049, -2466.30, -2749.72, 9.76,   0.00, 0.00, -126.66);
		CreateTheTLDynamicObject(3049, -2463.66, -2746.19, 9.77,   0.00, 0.00, -146.04);
		CreateTheTLDynamicObject(3049, -2460.07, -2743.77, 9.77,   0.00, 0.00, -145.32);
		CreateTheTLDynamicObject(3049, -2456.38, -2741.12, 9.78,   0.00, 0.00, -184.08);
		CreateTheTLDynamicObject(3049, -2451.99, -2741.41, 9.79,   0.00, 0.00, -184.08);
		CreateTheTLDynamicObject(3049, -2447.59, -2741.71, 9.79,   0.00, 0.00, -196.92);
		CreateTheTLDynamicObject(3049, -2443.42, -2742.98, 9.80,   0.00, 0.00, -197.88);
		CreateTheTLDynamicObject(3049, -2439.24, -2744.37, 9.81,   0.00, 0.00, -197.88);
		CreateTheTLDynamicObject(3049, -2435.06, -2745.61, 11.79,   0.00, 0.00, -197.88);
		CreateTheTLDynamicObject(3049, -2430.98, -2746.98, 9.82,   0.00, 0.00, -197.88);
		CreateTheTLDynamicObject(3049, -2426.84, -2748.33, 9.83,   0.00, 0.00, -197.88);
		CreateTheTLDynamicObject(3049, -2422.51, -2749.70, 9.84,   0.00, 0.00, -197.88);
		CreateTheTLDynamicObject(3049, -2418.28, -2751.06, 9.84,   0.00, 0.00, -197.88);
		CreateTheTLDynamicObject(3049, -2414.14, -2752.42, 9.85,   0.00, 0.00, -203.64);
		CreateTheTLDynamicObject(3049, -2410.08, -2754.23, 9.86,   0.00, 0.00, -204.60);
		CreateTheTLDynamicObject(3049, -2405.94, -2756.10, 9.86,   0.00, 0.00, -219.42);
		CreateTheTLDynamicObject(3049, -2402.49, -2758.96, 9.87,   0.00, 0.00, -219.72);
		CreateTheTLDynamicObject(3049, -2398.80, -2762.05, 8.03,   0.00, 0.00, -261.48);
		CreateTheTLDynamicObject(3049, -2398.13, -2766.40, 8.04,   0.00, 0.00, -261.48);
		CreateTheTLDynamicObject(3049, -2397.51, -2770.90, 6.80,   0.00, 0.00, 88.44);
		CreateTheTLDynamicObject(3095, -2403.62, -2782.20, 6.40,   0.00, 0.00, 68.58);
		CreateTheTLDynamicObject(3095, -2402.24, -2775.17, 6.40,   0.00, 0.00, 87.12);
		CreateTheTLDynamicObject(3095, -2402.70, -2767.08, 7.61,   0.00, 0.00, 98.82);
		CreateTheTLDynamicObject(3095, -2405.19, -2762.74, 9.67,   0.00, 0.00, 140.52);
		CreateTheTLDynamicObject(3095, -2411.96, -2758.42, 9.67,   0.00, 0.00, 155.40);
		CreateTheTLDynamicObject(3095, -2419.66, -2755.53, 9.68,   0.00, 0.00, 161.94);
		CreateTheTLDynamicObject(3095, -2427.95, -2752.79, 9.68,   0.00, 0.00, 161.94);
		CreateTheTLDynamicObject(3095, -2436.23, -2750.11, 9.68,   0.00, 0.00, 161.94);
		CreateTheTLDynamicObject(3095, -2431.74, -2751.50, 5.24,   0.00, 90.00, 163.50);
		CreateTheTLDynamicObject(3095, -2435.75, -2750.20, 5.24,   0.00, 90.00, -20.04);
		CreateTheTLDynamicObject(3095, -2444.07, -2747.58, 9.69,   0.00, 0.00, 161.94);
		CreateTheTLDynamicObject(3095, -2451.91, -2746.00, 9.69,   0.00, 0.00, 175.80);
		CreateTheTLDynamicObject(3095, -2457.37, -2747.42, 9.70,   0.00, 0.00, 214.02);
		CreateTheTLDynamicObject(3095, -2462.58, -2752.37, 9.71,   0.00, 0.00, 232.38);
		CreateTheTLDynamicObject(3095, -2466.29, -2758.81, 9.70,   0.00, 0.00, 248.16);
		CreateTheTLDynamicObject(3095, -2461.56, -2758.04, 5.75,   0.00, 90.00, -22.68);
		CreateTheTLDynamicObject(3095, -2458.67, -2754.11, 5.75,   0.00, 90.00, -40.92);
		CreateTheTLDynamicObject(3095, -2452.86, -2750.34, 5.75,   0.00, 90.00, -71.46);
		CreateTheTLDynamicObject(3095, -2447.63, -2751.01, 5.75,   0.00, 90.00, -103.02);
		CreateTheTLDynamicObject(3095, -2440.95, -2752.81, 5.65,   0.00, 90.00, -107.22);
		CreateTheTLDynamicObject(3095, -2429.09, -2756.64, 5.65,   0.00, 90.00, -108.54);
		CreateTheTLDynamicObject(3095, -2420.52, -2759.46, 5.65,   0.00, 90.00, -108.54);
		CreateTheTLDynamicObject(3095, -2412.51, -2762.72, 5.65,   0.00, 90.00, -116.10);
		CreateTheTLDynamicObject(3095, -2407.75, -2765.88, 5.65,   0.00, 90.00, -128.40);
		CreateTheTLDynamicObject(3095, -2402.07, -2765.28, 5.65,   0.00, 90.00, -38.70);
		CreateTheTLDynamicObject(3095, -2402.08, -2771.04, 3.67,   0.00, 90.00, -81.66);
		CreateTheTLDynamicObject(3095, -2406.71, -2767.63, 3.67,   0.00, 90.00, -171.54);
		CreateTheTLDynamicObject(3095, -2407.35, -2780.71, 2.35,   0.00, 90.00, -201.54);
		CreateTheTLDynamicObject(3095, -2405.20, -2785.89, 2.35,   0.00, 90.00, -111.90);
		CreateTheTLDynamicObject(3049, -2401.15, -2788.11, 6.82,   0.00, 0.00, -21.48);
		CreateTheTLDynamicObject(3049, -2397.55, -2770.94, 8.04,   0.00, 0.00, -351.30);
		CreateTheTLDynamicObject(3049, -2398.87, -2762.12, 9.87,   0.00, 0.00, -308.64);
		CreateTheTLDynamicObject(16093, -2468.62, -2762.26, 10.27,   0.00, 0.00, -111.96);
		CreateTheTLDynamicObject(16093, -2442.56, -2747.41, 10.27,   0.00, 0.00, -197.70);
		CreateTheTLDynamicObject(16093, -2411.28, -2758.00, 10.27,   0.00, 0.00, -205.50);
		CreateTheTLDynamicObject(16093, -2402.20, -2778.77, 6.83,   0.00, 0.00, -280.62);
		CreateTheTLDynamicObject(744, -2434.65, -2795.30, -0.97,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(744, -2463.10, -2788.25, -0.97,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(744, -2470.24, -2755.59, 3.29,   0.00, 0.00, -86.52);
		CreateTheTLDynamicObject(744, -2436.64, -2745.83, 3.29,   0.00, 0.00, -52.02);
		CreateTheTLDynamicObject(744, -2404.30, -2756.27, 3.29,   0.00, 0.00, -198.12);
		CreateTheTLDynamicObject(744, -2398.43, -2785.26, -0.01,   0.00, 0.00, -269.88);
		CreateTheTLDynamicObject(2060, -2440.40, -2793.44, 6.85,   0.00, 0.00, -10.44);
		CreateTheTLDynamicObject(2060, -2438.16, -2793.21, 6.82,   0.00, 0.00, 21.66);
		CreateTheTLDynamicObject(2060, -2439.44, -2793.53, 5.54,   0.00, 0.00, 2.70);
		CreateTheTLDynamicObject(2060, -2438.51, -2793.36, 5.54,   0.00, 0.00, 21.66);
		CreateTheTLDynamicObject(2060, -2437.95, -2793.03, 5.54,   0.00, 0.00, 49.26);
		CreateTheTLDynamicObject(2060, -2440.40, -2793.44, 5.54,   0.00, 0.00, -10.44);
		CreateTheTLDynamicObject(2060, -2441.18, -2793.00, 5.54,   0.00, 0.00, -39.72);
		CreateTheTLDynamicObject(2060, -2441.68, -2792.37, 5.54,   0.00, 0.00, -62.82);
		CreateTheTLDynamicObject(2060, -2439.44, -2793.53, 5.75,   0.00, 0.00, 2.70);
		CreateTheTLDynamicObject(2060, -2438.51, -2793.36, 5.75,   0.00, 0.00, 21.66);
		CreateTheTLDynamicObject(2060, -2437.95, -2793.03, 5.75,   0.00, 0.00, 49.26);
		CreateTheTLDynamicObject(2060, -2440.40, -2793.44, 5.75,   0.00, 0.00, -10.44);
		CreateTheTLDynamicObject(2060, -2441.18, -2793.00, 5.76,   0.00, 0.00, -39.72);
		CreateTheTLDynamicObject(2060, -2441.68, -2792.37, 5.76,   0.00, 0.00, -62.82);
		CreateTheTLDynamicObject(2060, -2439.44, -2793.53, 5.95,   0.00, 0.00, 2.70);
		CreateTheTLDynamicObject(2060, -2438.51, -2793.36, 5.96,   0.00, 0.00, 21.66);
		CreateTheTLDynamicObject(2060, -2437.95, -2793.03, 5.96,   0.00, 0.00, 49.26);
		CreateTheTLDynamicObject(2060, -2440.40, -2793.44, 5.97,   0.00, 0.00, -10.44);
		CreateTheTLDynamicObject(2060, -2441.18, -2793.00, 5.97,   0.00, 0.00, -39.72);
		CreateTheTLDynamicObject(2060, -2441.68, -2792.37, 5.98,   0.00, 0.00, -62.82);
		CreateTheTLDynamicObject(2060, -2439.44, -2793.53, 6.16,   0.00, 0.00, 2.70);
		CreateTheTLDynamicObject(2060, -2438.51, -2793.36, 6.17,   0.00, 0.00, 21.66);
		CreateTheTLDynamicObject(2060, -2437.95, -2793.03, 6.17,   0.00, 0.00, 49.26);
		CreateTheTLDynamicObject(2060, -2440.40, -2793.44, 6.18,   0.00, 0.00, -10.44);
		CreateTheTLDynamicObject(2060, -2441.18, -2793.00, 6.19,   0.00, 0.00, -39.72);
		CreateTheTLDynamicObject(2060, -2441.68, -2792.37, 6.19,   0.00, 0.00, -62.82);
		CreateTheTLDynamicObject(2060, -2439.44, -2793.53, 6.37,   0.00, 0.00, 2.70);
		CreateTheTLDynamicObject(2060, -2438.51, -2793.36, 6.37,   0.00, 0.00, 21.66);
		CreateTheTLDynamicObject(2060, -2437.95, -2793.03, 6.38,   0.00, 0.00, 49.26);
		CreateTheTLDynamicObject(2060, -2440.40, -2793.44, 6.39,   0.00, 0.00, -10.44);
		CreateTheTLDynamicObject(2060, -2441.18, -2793.00, 6.40,   0.00, 0.00, -39.72);
		CreateTheTLDynamicObject(2060, -2441.68, -2792.37, 6.41,   0.00, 0.00, -62.82);
		CreateTheTLDynamicObject(2060, -2438.51, -2793.36, 6.62,   0.00, 0.00, 21.66);
		CreateTheTLDynamicObject(2060, -2437.95, -2793.03, 6.63,   0.00, 0.00, 49.26);
		CreateTheTLDynamicObject(2060, -2440.14, -2793.50, 6.64,   0.00, 0.00, -10.44);
		CreateTheTLDynamicObject(2060, -2441.68, -2792.37, 6.66,   0.00, 0.00, -62.82);
		CreateTheTLDynamicObject(2060, -2440.70, -2793.36, 6.64,   0.00, 0.00, -17.28);
		CreateTheTLDynamicObject(2060, -2455.41, -2774.75, 13.68,   0.00, 0.00, -11.76);
		CreateTheTLDynamicObject(2060, -2456.19, -2774.47, 13.67,   0.00, 0.00, -26.34);
		CreateTheTLDynamicObject(2060, -2453.90, -2774.69, 13.71,   0.00, 0.00, 27.60);
		CreateTheTLDynamicObject(2060, -2457.11, -2773.19, 12.28,   0.00, 0.00, -76.56);
		CreateTheTLDynamicObject(2060, -2456.79, -2773.94, 12.28,   0.00, 0.00, -52.02);
		CreateTheTLDynamicObject(2060, -2456.19, -2774.47, 12.28,   0.00, 0.00, -26.34);
		CreateTheTLDynamicObject(2060, -2455.41, -2774.75, 12.28,   0.00, 0.00, -11.76);
		CreateTheTLDynamicObject(2060, -2454.68, -2774.84, 12.28,   0.00, 0.00, 4.80);
		CreateTheTLDynamicObject(2060, -2453.90, -2774.69, 12.28,   0.00, 0.00, 27.60);
		CreateTheTLDynamicObject(2060, -2453.31, -2774.27, 12.28,   0.00, 0.00, 52.68);
		CreateTheTLDynamicObject(2060, -2457.11, -2773.19, 12.49,   0.00, 0.00, -76.56);
		CreateTheTLDynamicObject(2060, -2456.79, -2773.94, 12.49,   0.00, 0.00, -52.02);
		CreateTheTLDynamicObject(2060, -2456.19, -2774.47, 12.50,   0.00, 0.00, -26.34);
		CreateTheTLDynamicObject(2060, -2455.41, -2774.75, 12.50,   0.00, 0.00, -11.76);
		CreateTheTLDynamicObject(2060, -2454.68, -2774.84, 12.50,   0.00, 0.00, 4.80);
		CreateTheTLDynamicObject(2060, -2453.90, -2774.69, 12.50,   0.00, 0.00, 27.60);
		CreateTheTLDynamicObject(2060, -2453.31, -2774.27, 12.50,   0.00, 0.00, 52.68);
		CreateTheTLDynamicObject(2060, -2457.11, -2773.19, 12.70,   0.00, 0.00, -76.56);
		CreateTheTLDynamicObject(2060, -2456.79, -2773.94, 12.70,   0.00, 0.00, -52.02);
		CreateTheTLDynamicObject(2060, -2456.19, -2774.47, 12.71,   0.00, 0.00, -26.34);
		CreateTheTLDynamicObject(2060, -2455.41, -2774.75, 12.71,   0.00, 0.00, -11.76);
		CreateTheTLDynamicObject(2060, -2454.68, -2774.84, 12.72,   0.00, 0.00, 4.80);
		CreateTheTLDynamicObject(2060, -2453.90, -2774.69, 12.72,   0.00, 0.00, 27.60);
		CreateTheTLDynamicObject(2060, -2453.31, -2774.27, 12.72,   0.00, 0.00, 52.68);
		CreateTheTLDynamicObject(2060, -2457.11, -2773.19, 12.80,   0.00, 0.00, -76.56);
		CreateTheTLDynamicObject(2060, -2456.79, -2773.94, 12.80,   0.00, 0.00, -52.02);
		CreateTheTLDynamicObject(2060, -2456.19, -2774.47, 12.81,   0.00, 0.00, -26.34);
		CreateTheTLDynamicObject(2060, -2455.41, -2774.75, 12.81,   0.00, 0.00, -11.76);
		CreateTheTLDynamicObject(2060, -2454.68, -2774.84, 12.82,   0.00, 0.00, 4.80);
		CreateTheTLDynamicObject(2060, -2453.90, -2774.69, 12.83,   0.00, 0.00, 27.60);
		CreateTheTLDynamicObject(2060, -2453.31, -2774.27, 12.83,   0.00, 0.00, 52.68);
		CreateTheTLDynamicObject(2060, -2457.11, -2773.19, 13.01,   0.00, 0.00, -76.56);
		CreateTheTLDynamicObject(2060, -2456.79, -2773.94, 13.01,   0.00, 0.00, -52.02);
		CreateTheTLDynamicObject(2060, -2456.19, -2774.47, 13.02,   0.00, 0.00, -26.34);
		CreateTheTLDynamicObject(2060, -2455.41, -2774.75, 13.03,   0.00, 0.00, -11.76);
		CreateTheTLDynamicObject(2060, -2454.68, -2774.84, 13.04,   0.00, 0.00, 4.80);
		CreateTheTLDynamicObject(2060, -2453.90, -2774.69, 13.04,   0.00, 0.00, 27.60);
		CreateTheTLDynamicObject(2060, -2453.31, -2774.27, 13.05,   0.00, 0.00, 52.68);
		CreateTheTLDynamicObject(2060, -2457.11, -2773.19, 13.23,   0.00, 0.00, -76.56);
		CreateTheTLDynamicObject(2060, -2456.79, -2773.94, 13.24,   0.00, 0.00, -52.02);
		CreateTheTLDynamicObject(2060, -2456.19, -2774.47, 13.25,   0.00, 0.00, -26.34);
		CreateTheTLDynamicObject(2060, -2455.41, -2774.75, 13.26,   0.00, 0.00, -11.76);
		CreateTheTLDynamicObject(2060, -2454.68, -2774.84, 13.27,   0.00, 0.00, 4.80);
		CreateTheTLDynamicObject(2060, -2453.90, -2774.69, 13.28,   0.00, 0.00, 27.60);
		CreateTheTLDynamicObject(2060, -2453.31, -2774.27, 13.29,   0.00, 0.00, 52.68);
		CreateTheTLDynamicObject(2060, -2457.11, -2773.19, 13.44,   0.00, 0.00, -76.56);
		CreateTheTLDynamicObject(2060, -2456.19, -2774.47, 13.46,   0.00, 0.00, -26.34);
		CreateTheTLDynamicObject(2060, -2455.41, -2774.75, 13.47,   0.00, 0.00, -11.76);
		CreateTheTLDynamicObject(2060, -2453.65, -2774.54, 13.49,   0.00, 0.00, 27.60);
		CreateTheTLDynamicObject(2060, -2453.88, -2774.63, 13.49,   0.00, 0.00, 23.82);
		CreateTheTLDynamicObject(8614, -2450.04, -2781.83, 4.31,   0.00, 0.00, 166.08);
		CreateTheTLDynamicObject(8572, -2439.03, -2784.29, 4.22,   0.00, 0.00, 166.20); // trea
	    CreateTheTLDynamicObject(18359, -2440.42, -2990.94, -65.25,   -1.26, -12.24, 84.44);
		CreateTheTLDynamicObject(18359, -2377.66, -2995.00, -65.25,   -6.42, -15.48, 84.44);
		CreateTheTLDynamicObject(18359, -2442.16, -2938.63, -39.51,   90.00, 0.00, -277.38);
		CreateTheTLDynamicObject(18359, -2430.07, -2679.20, -39.51,   90.00, 0.00, -468.42);

	}
	if(TLInfo[Map]==AIRBORNE)
	{
	    TLInfo[TimeLeft]=60*20;
    	TLInfo[AreaID] = CreateDynamicSphere(90.0977,-312.0271,1.5781, 3.0, W_TL, -1, -1);
    	TLInfo[Timer] = SetTimer("StartLowerTLTimer", 4000, 0);
    	
    	//airborne , realease the prisoners
		CreateTheTLDynamicObject(18451, 308.52, -80.63, 1.09,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(18567, 264.96, -71.19, 1.57,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(16304, 40.86, -219.63, 5.46,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(16317, 156.91, -132.70, 0.36,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(18569, 240.21, -118.42, 1.90,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(4819, 134.47, -144.94, 0.53,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(16317, 121.69, -139.66, 0.36,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(16304, 223.07, -63.13, 5.08,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(3564, 135.19, -144.03, 2.06,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(3134, 141.96, -162.01, 1.07,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(1348, 193.18, -217.76, 1.28,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(5260, 215.62, -157.38, 2.29,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(5262, 288.30, -88.36, 3.45,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(10811, 21.14, -158.17, 11.05,   0.00, 0.00, 4.00);
		CreateTheTLDynamicObject(9585, 80.41, 8.74, 8.13,   0.00, 180.00, 294.00);
		CreateTheTLDynamicObject(9958, 12.28, 191.48, 9.00,   354.00, 0.00, 0.00);
		CreateTheTLDynamicObject(6295, -56.86, 170.51, 24.61,   0.00, 0.00, 140.00);
		CreateTheTLDynamicObject(9237, -145.81, -419.39, 15.12,   0.00, 0.00, 270.00);
		CreateTheTLDynamicObject(1383, 18.34, 70.91, 11.65,   0.00, 70.00, 356.00);
		CreateTheTLDynamicObject(920, 175.89, -13.36, 1.07,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(934, 225.10, -100.91, 1.91,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(3259, 217.63, -87.03, 0.27,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(3258, 206.56, -68.92, 0.13,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(3637, 130.18, -271.07, 8.06,   0.00, 0.00, 158.00);
		CreateTheTLDynamicObject(3636, -50.93, -112.72, 10.00,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(3673, -35.05, -86.39, 20.96,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(6928, -160.52, -21.46, 25.58,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(6928, -143.47, 16.55, 25.58,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(6928, -177.54, -63.01, 25.58,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(6928, -183.82, 30.61, 25.58,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(6928, -197.12, -4.54, 25.58,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(6928, -203.94, -43.82, 5.58,   45.00, 0.00, 0.00);
		CreateTheTLDynamicObject(17001, -152.22, 69.36, 1.97,   0.00, 0.00, 344.00);
		CreateTheTLDynamicObject(3107, 243.15, -150.33, 0.58,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(16613, 207.29, -141.82, 0.08,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(16613, -15.29, -36.04, 0.08,   0.00, 0.00, 338.00);
		CreateTheTLDynamicObject(10357, -220.05, -209.95, 83.61,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(3673, -51.10, -12.28, 20.96,   0.00, 0.00, 338.00);
		CreateTheTLDynamicObject(3673, -41.96, 10.89, 20.96,   0.00, 0.00, 338.00);
		CreateTheTLDynamicObject(3673, -126.93, 92.75, 20.96,   0.00, 0.00, 344.00);
		CreateTheTLDynamicObject(3673, -165.90, 104.87, 20.96,   0.00, 0.00, 344.00);
		CreateTheTLDynamicObject(3866, -32.23, -178.98, 8.14,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(3866, -17.38, -178.64, 6.69,   0.00, 0.00, 174.00);
		CreateTheTLDynamicObject(3887, 60.13, -94.87, 5.43,   0.00, 0.00, 260.00);
		CreateTheTLDynamicObject(11428, 4.36, -155.50, 5.21,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(11428, 14.08, -178.98, 5.21,   0.00, 0.00, 172.00);
		CreateTheTLDynamicObject(1463, -3.17, -48.06, 2.44,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(13004, 207.38, -222.83, 0.59,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(12808, 332.28, -137.93, 2.00,   0.00, 0.00, 318.00);
		CreateTheTLDynamicObject(771, 314.03, -132.76, 0.08,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(771, 323.82, -97.53, 0.08,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(771, 358.28, -81.77, 0.08,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(771, 369.75, -78.87, 0.08,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(771, 318.49, -9.44, 0.08,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(771, 289.32, -33.15, 0.08,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(771, 159.52, 12.77, 0.08,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(771, 152.17, 9.90, 0.08,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(771, 147.84, 21.00, 0.08,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(771, 160.10, 17.17, 0.08,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(771, 173.20, 22.28, 0.08,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(771, 170.89, 24.06, 0.08,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(771, 167.40, 17.87, 0.08,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(771, 148.04, 15.38, 0.08,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(731, 139.47, 17.12, -0.43,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(731, 137.99, -65.35, -0.43,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(731, 205.70, -84.01, -0.43,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(731, 183.83, -108.05, -0.43,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(731, 122.49, -140.48, -0.43,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(731, 105.02, -95.38, -0.43,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(731, 75.11, -85.11, -0.43,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(731, 77.42, -100.89, -0.43,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(731, 0.83, -134.71, -0.43,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(731, 371.30, -44.88, -0.43,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(731, 374.30, -83.97, -0.43,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(731, 309.95, -191.83, -0.43,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(731, 215.31, -167.74, -0.43,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(731, 266.24, -114.32, -0.43,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(731, 299.99, -89.01, -0.43,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(16304, 267.59, -58.99, 5.08,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(16304, 296.49, -37.97, 5.08,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(16304, 276.44, -2.78, 5.08,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(952, 291.84, -79.69, 1.77,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(917, 279.97, -66.27, 0.71,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(853, 285.13, -76.50, 0.83,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(853, 257.66, -72.07, 0.83,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(852, 285.51, -111.71, 0.43,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(852, 282.00, -109.29, 0.43,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(852, 285.85, -148.28, 0.43,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(852, 303.33, -140.75, 0.43,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(852, 330.53, -158.33, 0.43,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(852, 336.82, -106.12, 0.43,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(852, 325.90, -69.35, 0.43,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(850, 236.79, -94.84, 0.54,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(850, 232.61, -110.68, 0.54,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(850, 228.99, -102.01, 0.54,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(850, 229.76, -149.13, 0.54,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(850, 234.76, -146.83, 0.54,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(850, 232.12, -176.39, 0.54,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(849, 229.89, -38.37, 0.74,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(849, 232.07, -20.34, 0.74,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(849, 220.63, -18.68, 0.74,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(849, 243.51, -38.91, 0.74,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(849, 229.92, 17.72, 0.74,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(849, 176.55, -18.88, 0.74,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(849, 184.40, -51.99, 0.74,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(2908, 194.59, -78.60, 0.66,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(2907, 194.20, -79.35, 0.74,   270.00, 0.00, 0.00);
		CreateTheTLDynamicObject(2906, 193.49, -79.26, 0.65,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(2905, 193.85, -79.41, 0.97,   270.00, 0.00, 274.00);
		CreateTheTLDynamicObject(1441, 194.95, -68.57, 1.08,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(1441, 201.68, -75.39, 1.08,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(1441, 190.19, -53.58, 1.08,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(1441, 175.54, -47.56, 1.08,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(12957, 188.62, -174.11, 1.46,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(12957, 125.51, -231.29, 1.46,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(12957, 103.00, -186.61, 1.46,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(12954, 145.23, -221.61, 0.82,   0.00, 0.00, 90.00);
		CreateTheTLDynamicObject(2676, 143.15, -204.85, 0.68,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(3594, 322.59, -172.99, 1.21,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(3594, 298.70, -203.92, 1.21,   0.00, 0.00, 280.00);
		CreateTheTLDynamicObject(3594, 290.55, -217.56, 1.21,   0.00, 0.00, 268.00);
		CreateTheTLDynamicObject(3594, 217.58, -221.05, 1.21,   0.00, 0.00, 267.99);
		CreateTheTLDynamicObject(3594, 232.19, -230.69, 1.21,   0.00, 0.00, 267.99);
		CreateTheTLDynamicObject(3594, 207.23, -263.81, 1.21,   0.00, 0.00, 267.99);
		CreateTheTLDynamicObject(3594, 188.61, -277.11, 1.21,   0.00, 0.00, 243.99);
		CreateTheTLDynamicObject(3594, 150.02, -207.18, 1.21,   0.00, 0.00, 167.99);
		CreateTheTLDynamicObject(3594, 155.16, -169.00, 1.21,   0.00, 0.00, 89.99);
		CreateTheTLDynamicObject(3594, 188.31, -133.43, 1.21,   0.00, 0.00, 359.98);
		CreateTheTLDynamicObject(13591, 198.13, -159.02, 0.74,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(13591, 213.69, -256.52, 0.74,   0.00, 0.00, 280.00);
		CreateTheTLDynamicObject(13591, 250.97, -291.44, 0.74,   0.00, 0.00, 280.00);
		CreateTheTLDynamicObject(13591, 181.46, -297.42, 0.74,   0.00, 0.00, 280.00);
		CreateTheTLDynamicObject(18246, 18.03, 6.57, 4.60,   0.00, 0.00, 330.00);
		CreateTheTLDynamicObject(18248, -34.41, -68.41, 9.75,   0.00, 0.00, 70.00);
		CreateTheTLDynamicObject(18248, -69.39, -162.93, 9.75,   0.00, 0.00, 358.00);
		CreateTheTLDynamicObject(6865, -83.35, -213.51, 35.14,   0.00, 0.00, 222.00);
		CreateTheTLDynamicObject(3426, 8.32, -71.88, 0.83,   0.00, 0.00, 266.00);
		CreateTheTLDynamicObject(3426, 47.40, -24.54, 0.83,   0.00, 0.00, 322.00);
		CreateTheTLDynamicObject(1225, 145.25, -130.10, 0.98,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(1225, 162.96, -49.19, 0.98,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(1225, 344.86, -103.90, 0.75,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(2985, 213.54, -61.47, 10.08,   0.00, 0.00, 278.00);
		CreateTheTLDynamicObject(3271, -100.25, 115.19, 2.11,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(3271, -154.15, 134.15, 2.11,   0.00, 0.00, 90.00);
		CreateTheTLDynamicObject(3279, 271.55, -24.69, 0.07,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(16641, -130.78, 34.68, 3.87,   0.00, 0.00, 342.00);
		CreateTheTLDynamicObject(3279, -91.15, -217.91, 39.02,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(5715, 228.50, 94.82, 11.58,   0.00, 0.00, 358.00);
		CreateTheTLDynamicObject(5714, 212.49, 108.29, 4.18,   0.00, 0.00, 270.00);
		CreateTheTLDynamicObject(16061, 195.36, 94.71, 2.09,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(16061, 246.04, 90.45, 2.09,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(3517, 228.33, 88.62, 13.06,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(3517, 218.36, 101.99, 13.06,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(3517, 233.60, 103.10, 13.06,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(3517, 232.62, 116.49, 13.06,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(3517, 216.92, 115.34, 13.06,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(3517, 205.70, 114.51, 13.06,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(3517, 246.35, 128.16, 13.06,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(926, 273.43, -197.77, 0.83,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(924, 292.03, -200.14, 0.76,   0.00, 0.00, 260.00);
		CreateTheTLDynamicObject(911, 291.17, -198.65, 1.14,   0.00, 0.00, 272.00);
		CreateTheTLDynamicObject(852, 312.21, -211.59, 0.38,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(852, 294.09, -213.49, 0.38,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(852, 328.10, -204.77, 0.38,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(852, 318.35, -194.62, 0.38,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(852, 325.08, -184.16, 0.38,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(852, 336.23, -181.30, 0.38,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(852, 332.18, -163.88, 0.38,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(852, 320.63, -149.36, 0.38,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(852, 359.46, -144.74, 0.38,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(852, 386.89, -139.14, 0.38,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(852, 333.80, -113.07, 0.38,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(852, 329.35, -83.13, 0.38,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(852, 247.45, -67.29, 0.38,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(852, 170.10, -59.67, 0.38,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(852, 157.39, -76.18, 0.38,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(852, 173.89, -8.42, 0.38,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(5291, 295.71, -165.69, 4.38,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(3302, 106.74, -209.55, 0.51,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(3302, 73.90, -238.58, 0.51,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(3302, 60.21, -210.68, 0.51,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(3092, -99.93, -223.63, 79.29,   0.00, 270.00, 0.00);
		CreateTheTLDynamicObject(17026, -212.94, 10.39, 0.00,   0.00, 0.00, 150.00);
		CreateTheTLDynamicObject(17026, 377.66, -207.85, 0.00,   0.00, 0.00, 150.00);
		CreateTheTLDynamicObject(771, 213.09, -29.49, 0.08,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(3279, -524.67, -182.31, 76.26,   0.00, 0.00, 358.00);
		CreateTheTLDynamicObject(3271, -124.61, 198.42, 2.11,   0.00, 0.00, 86.00);
		CreateTheTLDynamicObject(3271, -87.28, 153.77, 2.11,   0.00, 0.00, 340.00);
		CreateTheTLDynamicObject(10757, 99.01, -285.96, 13.95,   8.58, 1.62, 565.44);
		CreateTheTLDynamicObject(2060, 95.24, -294.51, 1.61,   0.00, 0.00, -19.56);
		CreateTheTLDynamicObject(2060, 93.59, -294.19, 1.59,   0.00, 0.00, -10.98);
		CreateTheTLDynamicObject(2060, 91.89, -294.26, 1.57,   0.00, 0.00, 16.86);
		CreateTheTLDynamicObject(2060, 85.07, -294.13, 1.56,   0.00, 0.00, 4.20);
		CreateTheTLDynamicObject(2060, 86.77, -294.25, 1.54,   0.00, 0.00, -7.92);
		CreateTheTLDynamicObject(2060, 88.15, -294.43, 1.52,   0.00, 0.00, -7.80);
		CreateTheTLDynamicObject(2060, 88.75, -294.69, 1.51,   0.00, 0.00, -37.38);
		CreateTheTLDynamicObject(2060, 88.75, -294.69, 0.57,   0.00, 0.00, -37.38);
		CreateTheTLDynamicObject(2060, 88.15, -294.43, 0.57,   0.00, 0.00, -7.80);
		CreateTheTLDynamicObject(2060, 87.45, -294.35, 0.57,   0.00, 0.00, -10.74);
		CreateTheTLDynamicObject(2060, 86.77, -294.25, 0.57,   0.00, 0.00, -7.92);
		CreateTheTLDynamicObject(2060, 85.91, -294.17, 0.57,   0.00, 0.00, -2.46);
		CreateTheTLDynamicObject(2060, 85.07, -294.13, 0.57,   0.00, 0.00, 4.20);
		CreateTheTLDynamicObject(2060, 91.89, -294.26, 0.57,   0.00, 0.00, 16.86);
		CreateTheTLDynamicObject(2060, 92.75, -294.11, 0.57,   0.00, 0.00, -2.88);
		CreateTheTLDynamicObject(2060, 93.59, -294.19, 0.57,   0.00, 0.00, -10.98);
		CreateTheTLDynamicObject(2060, 94.45, -294.33, 0.57,   0.00, 0.00, -10.98);
		CreateTheTLDynamicObject(2060, 95.24, -294.51, 0.57,   0.00, 0.00, -19.56);
		CreateTheTLDynamicObject(2060, 88.75, -294.69, 0.79,   0.00, 0.00, -37.38);
		CreateTheTLDynamicObject(2060, 88.15, -294.43, 0.79,   0.00, 0.00, -7.80);
		CreateTheTLDynamicObject(2060, 87.45, -294.35, 0.79,   0.00, 0.00, -10.74);
		CreateTheTLDynamicObject(2060, 86.77, -294.25, 0.80,   0.00, 0.00, -7.92);
		CreateTheTLDynamicObject(2060, 85.91, -294.17, 0.80,   0.00, 0.00, -2.46);
		CreateTheTLDynamicObject(2060, 85.07, -294.13, 0.80,   0.00, 0.00, 4.20);
		CreateTheTLDynamicObject(2060, 91.89, -294.26, 0.80,   0.00, 0.00, 16.86);
		CreateTheTLDynamicObject(2060, 92.75, -294.11, 0.81,   0.00, 0.00, -2.88);
		CreateTheTLDynamicObject(2060, 93.59, -294.19, 0.81,   0.00, 0.00, -10.98);
		CreateTheTLDynamicObject(2060, 94.45, -294.33, 0.81,   0.00, 0.00, -10.98);
		CreateTheTLDynamicObject(2060, 95.24, -294.51, 0.81,   0.00, 0.00, -19.56);
		CreateTheTLDynamicObject(2060, 88.75, -294.69, 1.00,   0.00, 0.00, -37.38);
		CreateTheTLDynamicObject(2060, 88.15, -294.43, 1.01,   0.00, 0.00, -7.80);
		CreateTheTLDynamicObject(2060, 87.45, -294.35, 1.01,   0.00, 0.00, -10.74);
		CreateTheTLDynamicObject(2060, 86.77, -294.25, 1.02,   0.00, 0.00, -7.92);
		CreateTheTLDynamicObject(2060, 85.91, -294.17, 1.02,   0.00, 0.00, -2.46);
		CreateTheTLDynamicObject(2060, 85.07, -294.13, 1.02,   0.00, 0.00, 4.20);
		CreateTheTLDynamicObject(2060, 91.89, -294.26, 1.03,   0.00, 0.00, 16.86);
		CreateTheTLDynamicObject(2060, 92.75, -294.11, 1.03,   0.00, 0.00, -2.88);
		CreateTheTLDynamicObject(2060, 93.59, -294.19, 1.04,   0.00, 0.00, -10.98);
		CreateTheTLDynamicObject(2060, 94.45, -294.33, 1.04,   0.00, 0.00, -10.98);
		CreateTheTLDynamicObject(2060, 95.24, -294.51, 1.05,   0.00, 0.00, -19.56);
		CreateTheTLDynamicObject(2060, 88.75, -294.69, 1.21,   0.00, 0.00, -37.38);
		CreateTheTLDynamicObject(2060, 88.15, -294.43, 1.22,   0.00, 0.00, -7.80);
		CreateTheTLDynamicObject(2060, 87.45, -294.35, 1.23,   0.00, 0.00, -10.74);
		CreateTheTLDynamicObject(2060, 86.77, -294.25, 1.23,   0.00, 0.00, -7.92);
		CreateTheTLDynamicObject(2060, 85.91, -294.17, 1.24,   0.00, 0.00, -2.46);
		CreateTheTLDynamicObject(2060, 85.07, -294.13, 1.25,   0.00, 0.00, 4.20);
		CreateTheTLDynamicObject(2060, 91.89, -294.26, 1.25,   0.00, 0.00, 16.86);
		CreateTheTLDynamicObject(2060, 92.75, -294.11, 1.26,   0.00, 0.00, -2.88);
		CreateTheTLDynamicObject(2060, 93.59, -294.19, 1.27,   0.00, 0.00, -10.98);
		CreateTheTLDynamicObject(2060, 94.45, -294.33, 1.27,   0.00, 0.00, -10.98);
		CreateTheTLDynamicObject(2060, 95.24, -294.51, 1.28,   0.00, 0.00, -19.56);
		CreateTheTLDynamicObject(2060, 88.75, -294.69, 1.41,   0.00, 0.00, -37.38);
		CreateTheTLDynamicObject(2060, 88.15, -294.43, 1.42,   0.00, 0.00, -7.80);
		CreateTheTLDynamicObject(2060, 87.45, -294.35, 1.43,   0.00, 0.00, -10.74);
		CreateTheTLDynamicObject(2060, 86.77, -294.25, 1.44,   0.00, 0.00, -7.92);
		CreateTheTLDynamicObject(2060, 85.91, -294.17, 1.45,   0.00, 0.00, -2.46);
		CreateTheTLDynamicObject(2060, 85.07, -294.13, 1.46,   0.00, 0.00, 4.20);
		CreateTheTLDynamicObject(2060, 91.89, -294.26, 1.47,   0.00, 0.00, 16.86);
		CreateTheTLDynamicObject(2060, 92.75, -294.11, 1.47,   0.00, 0.00, -2.88);
		CreateTheTLDynamicObject(2060, 93.59, -294.19, 1.48,   0.00, 0.00, -10.98);
		CreateTheTLDynamicObject(2060, 94.45, -294.33, 1.49,   0.00, 0.00, -10.98);
		CreateTheTLDynamicObject(2060, 95.24, -294.51, 1.50,   0.00, 0.00, -19.56);
	}
	if(TLInfo[Map]==OFBRITAIN)
	{
	    TLInfo[AllyShips] = 0;
		TLInfo[AxisShips] = 0;
		TLInfo[TimeLeft]=60*15;
    	TLInfo[Timer] = SetTimer("StartLowerTLTimer", 4000, 0);
    	TLInfo[Vehicles][0]=AddStaticVehicleEx(476,103.6735,-10.4616,1.7593,72.0640,77,87,60); //
		TLInfo[Vehicles][1]=AddStaticVehicleEx(476,100.9606,-25.2733,1.9509,72.4920,103,102,60); //
		TLInfo[Vehicles][2]=AddStaticVehicleEx(476,95.7537,-39.0586,1.8165,79.3409,119,117,60); //
		TLInfo[Vehicles][3]=AddStaticVehicleEx(476,106.2916,-57.4016,2.2623,83.6654,89,91,60); //
		TLInfo[Vehicles][4]=AddStaticVehicleEx(476,103.7536,-77.5700,2.2275,80.4018,1,6,60); //
		TLInfo[Vehicles][5]=AddStaticVehicleEx(476,97.7641,-92.5716,2.0219,72.3774,7,6,60); //
        forLoop(id, MAX_TL_VEHICLES)
	    {
	    	if(TLInfo[Vehicles][id] != -1)SetVehicleVirtualWorld(TLInfo[Vehicles][id],W_TL);
	    }
	}
	if(TLInfo[Map]==TANKBATTLE)
	{
	    TLInfo[AllyShips] = 0;
		TLInfo[AxisShips] = 0;
		TLInfo[TimeLeft]=60*15;
    	TLInfo[Timer] = SetTimer("StartLowerTLTimer", 4000, 0);
    	//allies
    	TLInfo[Vehicles][0]=AddStaticVehicleEx(432,311.3078,120.4098,4.2086,176.2814,43,0,60); //
    	TLInfo[Vehicles][1]=AddStaticVehicleEx(432,311.3078-7,120.4098,4.2086,176.2814,43,0,60); //
    	TLInfo[Vehicles][2]=AddStaticVehicleEx(432,311.3078-14,120.4098,4.2086,176.2814,43,0,60); //
    	TLInfo[Vehicles][3]=AddStaticVehicleEx(432,311.3078-21,120.4098,4.2086,176.2814,43,0,60); //
    	TLInfo[Vehicles][4]=AddStaticVehicleEx(432,311.3078-28,120.4098,4.2086,176.2814,43,0,60); //
    	TLInfo[Vehicles][5]=AddStaticVehicleEx(432,311.3078-35,120.4098,4.2086,176.2814,43,0,60); //
    	TLInfo[Vehicles][6]=AddStaticVehicleEx(432,311.3078-42,120.4098,4.2086,176.2814,43,0,60); //
    	TLInfo[Vehicles][7]=AddStaticVehicleEx(432,311.3078-49,120.4098,4.2086,176.2814,43,0,60); //
    	TLInfo[Vehicles][8]=AddStaticVehicleEx(432,311.3078-56,120.4098,4.2086,176.2814,43,0,60); //
    	TLInfo[Vehicles][9]=AddStaticVehicleEx(432,311.3078-63,120.4098,4.2086,176.2814,43,0,60); //
    	TLInfo[Vehicles][10]=AddStaticVehicleEx(432,311.3078,120.4098-7,4.2086,176.2814,43,0,60); //
    	TLInfo[Vehicles][11]=AddStaticVehicleEx(432,311.3078-7,120.4098-7,4.2086,176.2814,43,0,60); //
    	TLInfo[Vehicles][12]=AddStaticVehicleEx(432,311.3078-14,120.4098-7,4.2086,176.2814,43,0,60); //
    	TLInfo[Vehicles][13]=AddStaticVehicleEx(432,311.3078-21,120.4098-7,4.2086,176.2814,43,0,60); //
    	TLInfo[Vehicles][14]=AddStaticVehicleEx(432,311.3078-28,120.4098-7,4.2086,176.2814,43,0,60); //
    	TLInfo[Vehicles][15]=AddStaticVehicleEx(432,311.3078-35,120.4098-7,4.2086,176.2814,43,0,60); //
    	TLInfo[Vehicles][16]=AddStaticVehicleEx(432,311.3078-42,120.4098-7,4.2086,176.2814,43,0,60); //
    	TLInfo[Vehicles][17]=AddStaticVehicleEx(432,311.3078-49,120.4098-7,4.2086,176.2814,43,0,60); //
    	TLInfo[Vehicles][18]=AddStaticVehicleEx(432,311.3078-56,120.4098-7,4.2086,176.2814,43,0,60); //
    	TLInfo[Vehicles][19]=AddStaticVehicleEx(432,311.3078-63,120.4098-7,4.2086,176.2814,43,0,60); //
    	//axis
    	TLInfo[Vehicles][20]=AddStaticVehicleEx(432,-52.3028,-125.9763,3.1754,247.9618,43,0,60); //
    	TLInfo[Vehicles][21]=AddStaticVehicleEx(432,-52.3028,-125.9763+7,3.1754,247.9618,43,0,60); //
    	TLInfo[Vehicles][22]=AddStaticVehicleEx(432,-52.3028,-125.9763+14,3.1754,247.9618,43,0,60); //
    	TLInfo[Vehicles][23]=AddStaticVehicleEx(432,-52.3028,-125.9763+21,3.1754,247.9618,43,0,60); //
    	TLInfo[Vehicles][24]=AddStaticVehicleEx(432,-52.3028,-125.9763+28,3.1754,247.9618,43,0,60); //
    	TLInfo[Vehicles][25]=AddStaticVehicleEx(432,-52.3028,-125.9763+35,3.1754,247.9618,43,0,60); //
    	TLInfo[Vehicles][26]=AddStaticVehicleEx(432,-52.3028,-125.9763+42,3.1754,247.9618,43,0,60); //
    	TLInfo[Vehicles][27]=AddStaticVehicleEx(432,-52.3028,-125.9763+49,3.1754,247.9618,43,0,60); //
    	TLInfo[Vehicles][28]=AddStaticVehicleEx(432,-52.3028,-125.9763+56,3.1754,247.9618,43,0,60); //
        TLInfo[Vehicles][29]=AddStaticVehicleEx(432,-52.3028,-125.9763+63,3.1754,247.9618,43,0,60); //
        TLInfo[Vehicles][30]=AddStaticVehicleEx(432,-52.3028+7,-125.9763,3.1754,247.9618,43,0,60); //
    	TLInfo[Vehicles][31]=AddStaticVehicleEx(432,-52.3028+7,-125.9763+7,3.1754,247.9618,43,0,60); //
    	TLInfo[Vehicles][32]=AddStaticVehicleEx(432,-52.3028+7,-125.9763+14,3.1754,247.9618,43,0,60); //
    	TLInfo[Vehicles][33]=AddStaticVehicleEx(432,-52.3028+7,-125.9763+21,3.1754,247.9618,43,0,60); //
    	TLInfo[Vehicles][34]=AddStaticVehicleEx(432,-52.3028+7,-125.9763+28,3.1754,247.9618,43,0,60); //
    	TLInfo[Vehicles][35]=AddStaticVehicleEx(432,-52.3028+7,-125.9763+35,3.1754,247.9618,43,0,60); //
    	TLInfo[Vehicles][36]=AddStaticVehicleEx(432,-52.3028+7,-125.9763+42,3.1754,247.9618,43,0,60); //
    	TLInfo[Vehicles][37]=AddStaticVehicleEx(432,-52.3028+7,-125.9763+49,3.1754,247.9618,43,0,60); //
    	TLInfo[Vehicles][38]=AddStaticVehicleEx(432,-52.3028+7,-125.9763+56,3.1754,247.9618,43,0,60); //
        TLInfo[Vehicles][39]=AddStaticVehicleEx(432,-52.3028+7,-125.9763+63,3.1754,247.9618,43,0,60); //


		forLoop(id, MAX_TL_VEHICLES)
	    {
	    	if(TLInfo[Vehicles][id] != -1)SetVehicleVirtualWorld(TLInfo[Vehicles][id],W_TL);
	    }

		CreateTheTLDynamicObject(3887, 139.41, -14.09, 3.38,   0.00, 0.00, 387.93);
		CreateTheTLDynamicObject(3887, 111.29, 144.14, 0.16,   0.00, 0.00, 245.37);
    	CreateTheTLDynamicObject(3887, 185.70, -123.00, 8.50,   0.00, 0.00, 90.00);
		CreateTheTLDynamicObject(3887, 151.10, -104.50, 8.50,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(3887, 176.40, -86.00, 8.50,   0.00, 0.00, 270.00);
		CreateTheTLDynamicObject(3887, 214.50, -104.50, 8.50,   0.00, 0.00, 180.00);
		CreateTheTLDynamicObject(3887, 196.10, -122.90, 8.50,   0.00, 0.00, 90.00);
		CreateTheTLDynamicObject(3887, 196.20, -86.10, 8.50,   0.00, 0.00, 270.00);
		CreateTheTLDynamicObject(3866, 153.30, -117.90, 8.30,   0.00, 0.00, 90.00);
		CreateTheTLDynamicObject(11088, 216.50, -250.80, 6.50,   0.00, 0.00, 180.00);
		CreateTheTLDynamicObject(3887, 148.90, -176.40, 8.50,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(3887, 166.80, -176.50, 8.50,   0.00, 0.00, 179.99);
		CreateTheTLDynamicObject(3866, 151.20, -189.70, 8.30,   0.00, 0.00, 90.00);
		CreateTheTLDynamicObject(3866, 164.50, -163.20, 8.30,   0.00, 0.00, 270.00);
		CreateTheTLDynamicObject(3887, 216.70, -177.10, 8.50,   0.00, 0.00, 179.99);
		CreateTheTLDynamicObject(3887, 198.90, -177.00, 8.50,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(3866, 201.00, -189.90, 8.30,   0.00, 0.00, 90.00);
		CreateTheTLDynamicObject(3866, 214.50, -163.80, 8.30,   0.00, 0.00, 270.00);
		CreateTheTLDynamicObject(3866, 253.40, -188.60, 8.30,   0.00, 0.00, 90.00);
		CreateTheTLDynamicObject(3866, 264.20, -188.60, 8.30,   0.00, 0.00, 90.00);
		CreateTheTLDynamicObject(3866, 261.50, -191.50, 8.30,   0.00, 0.00, 180.00);
		CreateTheTLDynamicObject(3866, 261.50, -170.00, 8.30,   0.00, 0.00, 179.99);
		CreateTheTLDynamicObject(3866, 261.50, -162.50, 8.30,   0.00, 0.00, 179.99);
		CreateTheTLDynamicObject(3866, 264.50, -165.00, 8.30,   0.00, 0.00, 269.99);
		CreateTheTLDynamicObject(3866, 253.30, -165.00, 8.30,   0.00, 0.00, 269.99);
		CreateTheTLDynamicObject(3866, 253.40, -171.00, 8.30,   0.00, 0.00, 90.00);
		CreateTheTLDynamicObject(3866, 261.50, -191.50, 24.00,   0.00, 0.00, 179.99);
		CreateTheTLDynamicObject(3866, 253.40, -188.60, 24.00,   0.00, 0.00, 90.00);
		CreateTheTLDynamicObject(3866, 253.40, -171.00, 24.00,   0.00, 0.00, 90.00);
		CreateTheTLDynamicObject(3866, 253.30, -165.00, 24.00,   0.00, 0.00, 269.99);
		CreateTheTLDynamicObject(3866, 261.50, -162.50, 24.00,   0.00, 0.00, 179.99);
		CreateTheTLDynamicObject(3866, 261.50, -170.00, 20.40,   0.00, 0.00, 179.99);
		CreateTheTLDynamicObject(3866, 261.60, -121.20, 8.30,   0.00, 0.00, 179.99);
		CreateTheTLDynamicObject(3866, 261.60, -99.70, 8.30,   0.00, 0.00, 179.99);
		CreateTheTLDynamicObject(3866, 261.60, -90.20, 8.30,   0.00, 0.00, 179.99);
		CreateTheTLDynamicObject(3866, 253.30, -93.10, 8.30,   0.00, 0.00, 269.99);
		CreateTheTLDynamicObject(3866, 253.40, -118.30, 8.30,   0.00, 0.00, 90.00);
		CreateTheTLDynamicObject(3866, 253.40, -93.80, 8.30,   0.00, 0.00, 90.00);
		CreateTheTLDynamicObject(3866, 261.60, -90.20, 19.90,   0.00, 0.00, 179.99);
		CreateTheTLDynamicObject(3866, 253.30, -93.10, 24.00,   0.00, 0.00, 269.99);
		CreateTheTLDynamicObject(3866, 253.40, -93.80, 23.90,   0.00, 0.00, 90.00);
		CreateTheTLDynamicObject(3866, 253.40, -118.30, 23.90,   0.00, 0.00, 90.00);
		CreateTheTLDynamicObject(3866, 261.60, -121.20, 24.00,   0.00, 0.00, 179.99);
		CreateTheTLDynamicObject(3887, 251.20, -36.70, 8.50,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(3887, 251.20, 4.20, 8.50,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(3887, 271.40, 35.70, 8.50,   0.00, 0.00, 285.75);
		CreateTheTLDynamicObject(3887, 311.50, 50.80, 8.50,   0.00, 0.00, 299.75);
		CreateTheTLDynamicObject(3887, 251.20, 11.50, 8.50,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(3887, 331.90, -55.10, 8.20,   0.00, 0.00, 91.24);
		CreateTheTLDynamicObject(3887, 291.00, -56.00, 8.20,   0.00, 0.00, 91.23);
		CreateTheTLDynamicObject(3887, 269.80, -56.40, 8.20,   0.00, 0.00, 91.23);
		CreateTheTLDynamicObject(3887, 311.50, 50.80, 25.00,   0.00, 0.00, 299.75);
		CreateTheTLDynamicObject(3887, 271.40, 35.70, 25.00,   0.00, 0.00, 285.75);
		CreateTheTLDynamicObject(3887, 251.20, 11.50, 24.90,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(3887, 251.20, -36.70, 24.80,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(3887, 269.80, -56.40, 24.60,   0.00, 0.00, 91.23);
		CreateTheTLDynamicObject(3887, 291.00, -56.00, 24.60,   0.00, 0.00, 91.23);
		CreateTheTLDynamicObject(3866, 214.50, -43.10, 8.30,   0.00, 0.00, 269.99);
		CreateTheTLDynamicObject(3866, 203.90, -40.10, 8.30,   0.00, 0.00, 359.99);
		CreateTheTLDynamicObject(3866, 200.90, -50.50, 8.30,   0.00, 0.00, 89.98);
		CreateTheTLDynamicObject(3866, 211.50, -53.50, 8.30,   0.00, 0.00, 179.98);
		CreateTheTLDynamicObject(3887, 144.00, -32.80, 8.50,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(3887, 157.10, -32.90, 8.50,   0.00, 0.00, 180.00);
		CreateTheTLDynamicObject(3866, 146.30, -46.30, 8.30,   0.00, 0.00, 90.00);
		CreateTheTLDynamicObject(3866, 154.80, -19.50, 8.30,   0.00, 0.00, 270.00);
		CreateTheTLDynamicObject(3887, 209.30, 14.70, 8.50,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(3887, 214.40, 14.60, 8.50,   0.00, 0.00, 180.00);
		CreateTheTLDynamicObject(3887, 192.40, -3.90, 8.50,   0.00, 0.00, 90.00);
		CreateTheTLDynamicObject(3887, 269.70, -256.30, 8.50,   0.00, 0.00, 90.00);
		CreateTheTLDynamicObject(3887, 276.00, -230.20, 8.50,   0.00, 0.00, 270.00);
		CreateTheTLDynamicObject(3866, 256.30, -232.40, 8.30,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(3866, 256.30, -247.10, 8.30,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(3866, 289.30, -254.00, 8.30,   0.00, 0.00, 180.00);
		CreateTheTLDynamicObject(3866, 289.20, -239.30, 8.30,   0.00, 0.00, 179.99);
		CreateTheTLDynamicObject(3887, 311.50, 50.80, 8.50,   0.00, 0.00, 121.75);
		CreateTheTLDynamicObject(3887, 277.80, 30.00, 8.50,   0.00, 0.00, 121.74);
		CreateTheTLDynamicObject(3887, 251.70, -6.00, 8.50,   0.00, 0.00, 185.74);
		CreateTheTLDynamicObject(3887, 253.60, -25.80, 8.50,   0.00, 0.00, 185.74);
		CreateTheTLDynamicObject(3887, 278.30, -54.40, 8.50,   0.00, 0.00, 271.74);
		CreateTheTLDynamicObject(3887, 319.20, -52.60, 8.50,   0.00, 0.00, 273.49);
		CreateTheTLDynamicObject(3887, 331.40, -51.70, 8.50,   0.00, 0.00, 273.48);
		CreateTheTLDynamicObject(3887, 331.40, -51.70, 24.60,   0.00, 0.00, 273.48);
		CreateTheTLDynamicObject(3887, 319.20, -52.60, 24.60,   0.00, 0.00, 273.48);
		CreateTheTLDynamicObject(3887, 278.30, -54.40, 24.60,   0.00, 0.00, 271.74);
		CreateTheTLDynamicObject(3887, 253.60, -25.80, 24.60,   0.00, 0.00, 185.74);
		CreateTheTLDynamicObject(3887, 251.70, -6.00, 24.60,   0.00, 0.00, 185.74);
		CreateTheTLDynamicObject(3887, 277.80, 30.00, 24.60,   0.00, 0.00, 121.74);
		CreateTheTLDynamicObject(3887, 311.50, 50.80, 24.70,   0.00, 0.00, 121.74);
		CreateTheTLDynamicObject(3887, 331.90, -55.10, 24.70,   0.00, 0.00, 91.23);
		CreateTheTLDynamicObject(3887, 354.60, -90.30, 8.20,   0.00, 0.00, 0.23);
		CreateTheTLDynamicObject(3887, 354.60, -90.30, 24.70,   0.00, 0.00, 0.23);
		CreateTheTLDynamicObject(3887, 354.50, -104.20, 8.20,   0.00, 0.00, 0.23);
		CreateTheTLDynamicObject(3887, 354.50, -104.20, 21.30,   0.00, 0.00, 0.23);
		CreateTheTLDynamicObject(3887, 354.50, -104.20, 14.80,   0.00, 0.00, 0.23);
		CreateTheTLDynamicObject(3887, 354.50, -104.20, 25.00,   0.00, 0.00, 0.23);
		CreateTheTLDynamicObject(3887, 354.50, -104.20, 8.20,   0.00, 0.00, 180.23);
		CreateTheTLDynamicObject(3887, 354.30, -69.30, 8.20,   0.00, 0.00, 180.22);
		CreateTheTLDynamicObject(3887, 354.30, -69.30, 21.30,   0.00, 0.00, 180.22);
		CreateTheTLDynamicObject(3887, 354.50, -104.20, 24.50,   0.00, 0.00, 180.22);
		CreateTheTLDynamicObject(3887, 354.30, -69.30, 14.50,   0.00, 0.00, 180.22);
		CreateTheTLDynamicObject(3887, 354.30, -69.30, 24.50,   0.00, 0.00, 180.22);
		CreateTheTLDynamicObject(3866, 313.60, -94.90, 8.30,   0.00, 0.00, 269.99);
		CreateTheTLDynamicObject(3866, 305.20, -92.00, 8.30,   0.00, 0.00, 359.99);
		CreateTheTLDynamicObject(3866, 305.30, -109.30, 8.30,   0.00, 0.00, 359.98);
		CreateTheTLDynamicObject(3866, 305.30, -122.80, 8.30,   0.00, 0.00, 359.98);
		CreateTheTLDynamicObject(3866, 302.40, -119.90, 8.30,   0.00, 0.00, 89.98);
		CreateTheTLDynamicObject(3866, 310.60, -122.80, 8.30,   0.00, 0.00, 179.98);
		CreateTheTLDynamicObject(3866, 310.60, -116.80, 8.30,   0.00, 0.00, 179.98);
		CreateTheTLDynamicObject(3866, 113.00, -160.40, 8.30,   0.00, 0.00, 270.00);
		CreateTheTLDynamicObject(3866, 110.10, -190.90, 8.30,   0.00, 0.00, 180.00);
		CreateTheTLDynamicObject(3866, 88.80, -188.00, 8.30,   0.00, 0.00, 90.00);
		CreateTheTLDynamicObject(3866, 91.70, -157.50, 8.30,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(3866, 91.70, -164.50, 8.30,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(3866, 110.10, -184.00, 8.30,   0.00, 0.00, 179.99);
		CreateTheTLDynamicObject(3866, 110.10, -190.90, 23.90,   0.00, 0.00, 179.99);
		CreateTheTLDynamicObject(3866, 88.80, -188.00, 24.00,   0.00, 0.00, 90.00);
		CreateTheTLDynamicObject(3866, 91.70, -164.50, 24.00,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(3866, 91.70, -157.50, 24.00,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(3866, 113.00, -160.40, 24.00,   0.00, 0.00, 270.00);
		CreateTheTLDynamicObject(3866, 110.10, -184.00, 23.90,   0.00, 0.00, 179.99);
		CreateTheTLDynamicObject(3887, 315.60, -176.80, 8.50,   0.00, 0.00, 180.00);
		CreateTheTLDynamicObject(3887, 302.60, -176.80, 8.50,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(12961, 317.40, -142.00, 0.10,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(12961, 330.90, -109.80, 0.30,   0.00, 0.00, 288.00);
		CreateTheTLDynamicObject(12961, 330.90, -103.50, 0.30,   0.00, 0.00, 288.00);
		CreateTheTLDynamicObject(12961, 317.60, -75.40, 0.30,   0.00, 0.00, 334.00);
		CreateTheTLDynamicObject(12961, 311.90, -75.20, 0.30,   0.00, 0.00, 334.00);
		CreateTheTLDynamicObject(12961, 302.90, -74.90, 0.30,   0.00, 0.00, 334.00);
		CreateTheTLDynamicObject(12961, 274.90, -92.40, 0.30,   0.00, 0.00, 292.00);
		CreateTheTLDynamicObject(12961, 282.00, -116.30, 0.30,   0.00, 0.00, 291.99);
		CreateTheTLDynamicObject(12961, 274.10, -162.80, 0.30,   0.00, 0.00, 239.99);
		CreateTheTLDynamicObject(12961, 281.60, -183.90, 0.30,   0.00, 0.00, 291.99);
		CreateTheTLDynamicObject(12961, 269.50, -217.80, 0.20,   0.00, 0.00, 30.00);
		CreateTheTLDynamicObject(12961, 257.10, -215.80, 0.20,   0.00, 0.00, 336.00);
		CreateTheTLDynamicObject(12961, 232.00, -179.70, 0.30,   0.00, 0.00, 290.00);
		CreateTheTLDynamicObject(12961, 232.30, -173.20, 0.30,   0.00, 0.00, 268.00);
		CreateTheTLDynamicObject(12961, 230.30, -120.80, 0.20,   0.00, 0.00, 267.99);
		CreateTheTLDynamicObject(12961, 239.10, -107.80, 0.20,   0.00, 0.00, 139.99);
		CreateTheTLDynamicObject(12961, 228.40, -96.40, 0.20,   0.00, 0.00, 243.99);
		CreateTheTLDynamicObject(12961, 250.40, -71.80, 0.20,   0.00, 0.00, 177.99);
		CreateTheTLDynamicObject(12961, 256.60, -71.80, 0.20,   0.00, 0.00, 177.99);
		CreateTheTLDynamicObject(12961, 234.80, -56.80, 0.20,   0.00, 0.00, 93.99);
		CreateTheTLDynamicObject(12961, 235.30, -34.00, 0.20,   0.00, 0.00, 93.99);
		CreateTheTLDynamicObject(12961, 237.70, -4.80, 0.80,   0.00, 0.00, 55.99);
		CreateTheTLDynamicObject(12961, 229.30, 6.00, 1.30,   0.00, 0.00, 295.99);
		CreateTheTLDynamicObject(12961, 228.90, 21.50, 1.30,   0.00, 0.00, 245.98);
		CreateTheTLDynamicObject(12961, 212.70, -22.50, 0.20,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(12961, 200.30, -29.00, 0.20,   0.00, 0.00, 318.00);
		CreateTheTLDynamicObject(12961, 186.00, -37.50, 0.20,   0.00, 0.00, 46.00);
		CreateTheTLDynamicObject(12961, 168.70, -44.50, 0.20,   0.00, 0.00, 314.00);
		CreateTheTLDynamicObject(12961, 173.30, -53.40, 0.20,   0.00, 0.00, 275.99);
		CreateTheTLDynamicObject(12961, 213.00, -74.80, 0.20,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(12961, 203.80, -74.30, 0.20,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(12961, 156.70, -73.40, 0.20,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(12961, 144.00, -78.00, 0.20,   0.00, 0.00, 46.00);
		CreateTheTLDynamicObject(12961, 127.90, -96.30, 0.20,   0.00, 0.00, 308.00);
		CreateTheTLDynamicObject(12961, 131.30, -106.20, 0.20,   0.00, 0.00, 272.00);
		CreateTheTLDynamicObject(12961, 130.10, -118.20, 0.20,   0.00, 0.00, 243.99);
		CreateTheTLDynamicObject(12961, 132.80, -156.20, 0.20,   0.00, 0.00, 84.00);
		CreateTheTLDynamicObject(12961, 139.60, -179.00, 0.10,   0.00, 0.00, 40.00);
		CreateTheTLDynamicObject(12961, 126.40, -194.20, 0.10,   0.00, 0.00, 308.00);
		CreateTheTLDynamicObject(12961, 237.60, -76.20, 0.20,   0.00, 0.00, 49.99);
		CreateTheTLDynamicObject(12961, 184.80, -72.90, 0.20,   0.00, 0.00, 42.00);
		CreateTheTLDynamicObject(12961, 151.10, -142.20, 0.30,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(12961, 169.60, -143.10, 0.30,   0.00, 0.00, 324.00);
		CreateTheTLDynamicObject(12961, 185.00, -153.10, 0.30,   0.00, 0.00, 56.00);
		CreateTheTLDynamicObject(12961, 184.60, -171.90, 0.30,   0.00, 0.00, 118.00);
		CreateTheTLDynamicObject(12961, 184.60, -189.20, 0.30,   0.00, 0.00, 89.99);
		CreateTheTLDynamicObject(12961, 299.30, -214.20, 0.20,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(12961, 281.50, -216.00, 0.20,   0.00, 0.00, 320.00);
		CreateTheTLDynamicObject(12961, 278.80, -197.60, 0.20,   0.00, 0.00, 262.00);
		CreateTheTLDynamicObject(12961, 324.90, -205.10, -0.40,   0.00, 0.00, 224.00);
		CreateTheTLDynamicObject(12961, 317.80, -205.40, 0.00,   0.00, 0.00, 199.99);
		CreateTheTLDynamicObject(12961, 309.00, -230.20, 0.20,   0.00, 0.00, 263.99);
		CreateTheTLDynamicObject(12961, 308.10, -245.50, 0.30,   0.00, 0.00, 295.98);
		CreateTheTLDynamicObject(12961, 325.40, -184.30, -0.20,   0.00, 0.00, 295.99);
		CreateTheTLDynamicObject(12961, 326.20, -174.30, -0.20,   0.00, 0.00, 243.99);
		CreateTheTLDynamicObject(12961, 326.20, -167.30, 0.00,   0.00, 0.00, 265.99);
		CreateTheTLDynamicObject(12961, 325.70, -156.30, 0.30,   0.00, 0.00, 293.98);
		CreateTheTLDynamicObject(12961, 329.20, -134.30, 0.20,   0.00, 0.00, 244.00);
		CreateTheTLDynamicObject(12961, 297.40, -145.90, 0.20,   0.00, 0.00, 20.00);
		CreateTheTLDynamicObject(12961, 287.10, -149.80, 0.20,   0.00, 0.00, 70.00);
		CreateTheTLDynamicObject(12961, 286.90, -127.20, 0.10,   0.00, 0.00, 79.99);
		CreateTheTLDynamicObject(16305, 310.00, -133.30, 2.60,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(16305, 325.50, -84.70, 2.80,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(16305, 343.30, -67.40, 2.80,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(16305, 261.80, -73.90, 2.30,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(16305, 241.30, -103.20, 3.10,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(16305, 222.90, -89.40, 2.60,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(16305, 229.70, -163.00, 2.30,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(16305, 248.90, -204.20, 2.30,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(16305, 269.10, -218.50, 2.80,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(16305, 294.20, -170.30, 2.80,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(16305, 276.30, -171.80, 1.50,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(16305, 271.00, -110.40, 5.60,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(16305, 199.80, -63.30, 2.60,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(16305, 215.00, -79.90, 2.60,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(16305, 169.30, -22.10, 3.30,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(16305, 189.10, -46.70, 2.60,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(16305, 222.10, -9.50, 2.40,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(16305, 241.50, 5.00, 3.70,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(16305, 239.50, -40.70, 1.90,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(16305, 228.30, -41.10, 1.90,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(16305, 250.60, 36.40, 3.60,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(16305, 259.00, 38.50, 3.60,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(16305, 269.20, 37.60, 3.60,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(16305, 281.30, 43.70, 3.60,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(16305, 292.30, 47.70, 3.60,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(16305, 311.70, 58.10, 3.10,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(16305, 328.80, 69.50, 4.10,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(16305, 326.90, 58.80, 7.20,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(16305, 266.40, -31.20, 3.20,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(16305, 298.00, -41.20, 2.50,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(16305, 357.50, -94.00, 3.70,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(16305, 348.20, -126.90, 2.50,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(16305, 191.70, -181.80, 3.30,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(16305, 175.00, -158.80, 2.60,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(16305, 157.20, -150.90, 2.60,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(16305, 166.50, -131.30, 2.10,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(16305, 129.50, -101.70, 2.60,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(16305, 138.10, -106.30, 2.60,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(16305, 121.40, -127.80, 2.30,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(16305, 141.90, -161.90, 2.30,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(16305, 124.90, -180.40, 2.30,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(16305, 87.40, -197.70, 3.60,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(16305, 120.90, -198.40, 2.10,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(16305, 166.90, -203.00, 2.10,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(16305, 146.60, -199.40, 2.10,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(16305, 206.70, -202.80, 2.10,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(16305, 325.10, -162.70, 3.70,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(16305, 317.00, -171.20, 3.70,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(16305, 316.50, -197.80, 3.50,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(16305, 151.80, -85.70, 4.60,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(6296, 207.60, -136.20, 2.60,   0.00, 0.00, 269.75);
		CreateTheTLDynamicObject(3887, 74.17, 83.69, 3.38,   0.00, 0.00, 412.41);
		CreateTheTLDynamicObject(3887, 101.29, 50.25, 3.38,   0.00, 0.00, 391.59);
		CreateTheTLDynamicObject(3887, 124.13, 14.48, 3.38,   0.00, 0.00, 387.93);
		CreateTheTLDynamicObject(3887, 69.26, 111.19, 3.38,   0.00, 0.00, 332.07);
		CreateTheTLDynamicObject(3887, 78.58, 135.16, 2.44,   0.00, 0.00, 348.45);
		CreateTheTLDynamicObject(3887, 74.76, -228.66, 3.38,   0.00, 0.00, 274.83);
		CreateTheTLDynamicObject(3887, 187.79, 64.22, 3.38,   0.00, 0.00, 201.45);
		CreateTheTLDynamicObject(3887, 168.30, 95.68, 3.38,   0.00, 0.00, 219.51);
		CreateTheTLDynamicObject(3887, 143.77, 123.22, 3.38,   0.00, 0.00, 226.41);
	}
	if(TLInfo[Map]==STALINGRAD)
	{
     	TLInfo[AllyShips] = 0;
		TLInfo[AxisShips] = 0;
		TLInfo[TimeLeft]=60*15;
    	TLInfo[Timer] = SetTimer("StartLowerTLTimer", 4000, 0);
    	CreateTheTLDynamicObject(3887, 588.90, -512.50, 22.90,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(3866, 622.90, -555.50, 22.00,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(3866, 617.00, -570.10, 22.00,   0.00, 0.00, 90.00);
		CreateTheTLDynamicObject(3866, 622.90, -555.50, 29.30,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(3866, 617.00, -570.10, 29.80,   0.00, 0.00, 90.00);
		CreateTheTLDynamicObject(3866, 617.20, -573.00, 23.30,   0.00, 0.00, 179.49);
		CreateTheTLDynamicObject(3866, 620.20, -558.40, 23.50,   0.00, 0.00, 270.00);
		CreateTheTLDynamicObject(3866, 617.20, -573.00, 29.80,   0.00, 0.00, 179.49);
		CreateTheTLDynamicObject(3866, 620.20, -558.40, 29.30,   0.00, 0.00, 270.00);
		CreateTheTLDynamicObject(3866, 619.20, -552.90, 23.30,   0.00, 90.00, 270.00);
		CreateTheTLDynamicObject(3866, 617.60, -575.90, 23.30,   0.00, 90.00, 270.00);
		CreateTheTLDynamicObject(3866, 616.70, -557.50, 23.30,   0.00, 90.00, 359.25);
		CreateTheTLDynamicObject(3887, 686.00, -468.50, 22.90,   0.00, 0.00, 90.00);
		CreateTheTLDynamicObject(3887, 659.70, -450.00, 22.90,   0.00, 0.00, 0.50);
		CreateTheTLDynamicObject(3887, 687.10, -431.20, 22.90,   0.00, 0.00, 270.49);
		CreateTheTLDynamicObject(3887, 705.10, -450.00, 22.90,   0.00, 0.00, 179.24);
		CreateTheTLDynamicObject(3866, 697.60, -509.80, 21.90,   0.00, 0.00, 90.00);
		CreateTheTLDynamicObject(3866, 700.50, -512.40, 22.20,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(3866, 702.20, -508.60, 22.20,   0.00, 0.00, 270.00);
		CreateTheTLDynamicObject(3866, 702.30, -509.80, 21.90,   0.00, 0.00, 90.00);
		CreateTheTLDynamicObject(3866, 697.60, -509.80, 33.60,   0.00, 0.00, 90.00);
		CreateTheTLDynamicObject(3866, 702.20, -508.60, 34.50,   0.00, 0.00, 270.00);
		CreateTheTLDynamicObject(3887, 638.00, -512.70, 22.90,   0.00, 0.00, 90.00);
		CreateTheTLDynamicObject(3887, 638.10, -503.50, 22.90,   0.00, 0.00, 270.00);
		CreateTheTLDynamicObject(3866, 662.60, -507.10, 21.90,   0.00, 0.00, 91.00);
		CreateTheTLDynamicObject(3887, 638.10, -503.50, 29.20,   0.00, 0.00, 270.00);
		CreateTheTLDynamicObject(3887, 638.00, -512.70, 29.40,   0.00, 0.00, 90.00);
		CreateTheTLDynamicObject(3866, 662.60, -507.10, 26.20,   0.00, 0.00, 91.00);
		CreateTheTLDynamicObject(3866, 662.60, -508.70, 22.20,   0.00, 0.00, 270.25);
		CreateTheTLDynamicObject(3866, 742.30, -506.90, 21.90,   0.00, 0.00, 90.00);
		CreateTheTLDynamicObject(3866, 763.50, -506.90, 21.90,   0.00, 0.00, 90.00);
		CreateTheTLDynamicObject(3866, 784.60, -506.90, 21.90,   0.00, 0.00, 90.00);
		CreateTheTLDynamicObject(3866, 805.80, -506.90, 21.90,   0.00, 0.00, 90.00);
		CreateTheTLDynamicObject(3866, 821.50, -506.80, 21.90,   0.00, 0.00, 90.00);
		CreateTheTLDynamicObject(3887, 764.50, -512.00, 22.90,   0.00, 0.00, 89.74);
		CreateTheTLDynamicObject(3887, 796.70, -511.90, 22.90,   0.00, 0.00, 89.99);
		CreateTheTLDynamicObject(3887, 740.00, -492.90, 22.90,   0.00, 0.00, 359.99);
		CreateTheTLDynamicObject(3887, 758.80, -474.40, 22.90,   0.00, 0.00, 269.98);
		CreateTheTLDynamicObject(3887, 805.60, -474.40, 22.90,   0.00, 0.00, 269.98);
		CreateTheTLDynamicObject(3887, 824.10, -492.90, 22.90,   0.00, 0.00, 180.48);
		CreateTheTLDynamicObject(3866, 756.40, -487.70, 21.90,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(3866, 766.00, -491.10, 21.90,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(3866, 777.40, -487.40, 21.90,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(3866, 787.90, -497.20, 21.90,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(3866, 804.70, -490.80, 21.90,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(3866, 814.90, -499.10, 21.90,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(3866, 766.00, -491.10, 28.90,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(3866, 784.60, -506.90, 32.20,   0.00, 0.00, 90.00);
		CreateTheTLDynamicObject(3866, 804.70, -490.80, 33.40,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(3866, 805.80, -506.90, 30.40,   0.00, 0.00, 90.00);
		CreateTheTLDynamicObject(3887, 764.50, -512.00, 29.40,   0.00, 0.00, 89.74);
		CreateTheTLDynamicObject(3887, 796.70, -511.90, 29.50,   0.00, 0.00, 89.99);
		CreateTheTLDynamicObject(3887, 588.90, -553.50, 22.90,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(3887, 657.70, -564.60, 22.90,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(3887, 663.40, -564.70, 22.90,   0.00, 0.00, 179.99);
		CreateTheTLDynamicObject(3887, 704.90, -564.40, 22.90,   0.00, 0.00, 179.99);
		CreateTheTLDynamicObject(3887, 698.20, -564.30, 22.90,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(3887, 740.10, -567.00, 23.10,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(3887, 754.90, -548.30, 23.10,   0.00, 0.00, 270.00);
		CreateTheTLDynamicObject(3887, 773.40, -567.50, 23.10,   0.00, 0.00, 180.00);
		CreateTheTLDynamicObject(3887, 758.20, -594.20, 23.10,   0.00, 0.00, 89.99);
		CreateTheTLDynamicObject(3887, 767.80, -574.40, 23.10,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(3887, 754.90, -564.70, 23.10,   0.00, 0.00, 270.00);
		CreateTheTLDynamicObject(3887, 747.90, -567.90, 23.10,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(3866, 809.90, -572.90, 23.00,   0.00, 0.00, 90.00);
		CreateTheTLDynamicObject(3866, 809.90, -552.90, 23.00,   0.00, 0.00, 90.00);
		CreateTheTLDynamicObject(3866, 812.90, -549.90, 23.00,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(3866, 815.80, -552.90, 23.00,   0.00, 0.00, 270.00);
		CreateTheTLDynamicObject(3866, 815.80, -572.90, 23.00,   0.00, 0.00, 270.00);
		CreateTheTLDynamicObject(3866, 812.80, -575.90, 23.00,   0.00, 0.00, 180.00);
		CreateTheTLDynamicObject(3866, 812.80, -575.90, 38.50,   0.00, 0.00, 179.99);
		CreateTheTLDynamicObject(3866, 809.90, -552.90, 38.50,   0.00, 0.00, 90.00);
		CreateTheTLDynamicObject(3866, 812.90, -549.90, 38.50,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(3866, 815.80, -552.90, 38.40,   0.00, 0.00, 270.00);
		CreateTheTLDynamicObject(3866, 809.90, -572.90, 38.50,   0.00, 0.00, 90.00);
		CreateTheTLDynamicObject(3866, 815.80, -572.90, 38.60,   0.00, 0.00, 270.00);
		CreateTheTLDynamicObject(3887, 805.60, -636.40, 23.10,   0.00, 0.00, 89.99);
		CreateTheTLDynamicObject(3887, 820.10, -636.10, 23.10,   0.00, 0.00, 89.99);
		CreateTheTLDynamicObject(3887, 820.60, -618.90, 23.10,   0.00, 0.00, 269.99);
		CreateTheTLDynamicObject(3887, 805.80, -618.90, 23.10,   0.00, 0.00, 269.99);
		CreateTheTLDynamicObject(3866, 789.30, -624.00, 23.00,   0.00, 0.00, 90.00);
		CreateTheTLDynamicObject(3866, 792.30, -621.00, 23.00,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(3866, 843.00, -624.00, 23.00,   0.00, 0.00, 270.00);
		CreateTheTLDynamicObject(3866, 839.60, -633.90, 23.00,   0.00, 0.00, 180.00);
		CreateTheTLDynamicObject(3866, 839.60, -633.90, 38.30,   0.00, 0.00, 179.99);
		CreateTheTLDynamicObject(3866, 792.30, -621.00, 38.80,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(3887, 704.80, -632.50, 22.90,   0.00, 0.00, 179.99);
		CreateTheTLDynamicObject(3887, 697.90, -632.40, 22.90,   0.00, 0.00, 359.99);
		CreateTheTLDynamicObject(3866, 661.00, -641.40, 23.30,   0.00, 0.00, 179.49);
		CreateTheTLDynamicObject(3866, 661.10, -620.20, 23.30,   0.00, 0.00, 359.49);
		CreateTheTLDynamicObject(3866, 663.80, -623.00, 23.30,   0.00, 0.00, 269.49);
		CreateTheTLDynamicObject(3866, 660.90, -641.30, 23.30,   0.00, 0.00, 359.49);
		CreateTheTLDynamicObject(3866, 661.10, -620.20, 38.60,   0.00, 0.00, 359.49);
		CreateTheTLDynamicObject(3866, 661.00, -641.40, 34.80,   0.00, 0.00, 179.49);
		CreateTheTLDynamicObject(3866, 660.90, -641.30, 31.50,   0.00, 0.00, 359.49);
		CreateTheTLDynamicObject(3866, 660.90, -641.30, 39.60,   0.00, 0.00, 359.49);
		CreateTheTLDynamicObject(3866, 663.80, -623.00, 38.60,   0.00, 0.00, 269.48);
		CreateTheTLDynamicObject(16305, 712.10, -509.30, 17.50,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(16305, 745.90, -518.60, 16.70,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(16305, 740.70, -536.80, 16.70,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(16305, 628.30, -544.50, 17.90,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(16305, 689.40, -576.80, 17.80,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(12961, 676.70, -489.90, 15.00,   0.00, 0.00, 320.00);
		CreateTheTLDynamicObject(12961, 689.40, -484.00, 14.50,   4.00, 0.00, 194.00);
		CreateTheTLDynamicObject(12961, 711.40, -484.20, 15.00,   360.00, 0.00, 194.00);
		CreateTheTLDynamicObject(12961, 714.60, -526.20, 14.90,   359.99, 0.00, 143.99);
		CreateTheTLDynamicObject(12961, 710.00, -534.50, 14.90,   359.99, 0.00, 351.99);
		CreateTheTLDynamicObject(12961, 716.00, -547.80, 14.90,   359.98, 0.00, 315.99);
		CreateTheTLDynamicObject(12961, 717.30, -574.90, 14.90,   359.98, 0.00, 237.98);
		CreateTheTLDynamicObject(12961, 698.40, -598.00, 14.90,   359.98, 0.00, 179.98);
		CreateTheTLDynamicObject(12961, 682.70, -615.70, 14.90,   359.98, 0.00, 103.98);
		CreateTheTLDynamicObject(12961, 655.60, -603.90, 14.90,   359.98, 0.00, 25.97);
		CreateTheTLDynamicObject(12961, 658.60, -604.10, 14.90,   359.98, 0.00, 25.97);
		CreateTheTLDynamicObject(12961, 665.20, -603.00, 14.90,   359.98, 0.00, 25.97);
		CreateTheTLDynamicObject(12961, 642.90, -572.80, 14.90,   359.98, 0.00, 69.97);
		CreateTheTLDynamicObject(12961, 642.50, -558.60, 14.90,   359.98, 0.00, 117.97);
		CreateTheTLDynamicObject(12961, 632.80, -532.30, 14.90,   359.98, 0.00, 339.97);
		CreateTheTLDynamicObject(12961, 618.20, -488.10, 14.90,   359.98, 0.00, 339.96);
		CreateTheTLDynamicObject(12961, 640.50, -497.70, 14.90,   359.98, 0.00, 295.96);
		CreateTheTLDynamicObject(16305, 672.50, -557.10, 17.80,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(16305, 769.10, -523.40, 16.70,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(16305, 810.10, -536.20, 16.70,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(16305, 730.10, -506.90, 16.80,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(10398, 541.25, -540.20, 40.17,   0.00, 0.00, -83.70);
		CreateTheTLDynamicObject(3276, 544.27, -558.51, 59.11,   90.00, 0.00, 7.02);
		CreateTheTLDynamicObject(3276, 544.20, -557.16, 59.11,   90.00, 0.00, 7.02);
		CreateTheTLDynamicObject(2060, 559.11, -553.99, 62.97,   0.00, 0.00, -77.76);
		CreateTheTLDynamicObject(2060, 559.25, -555.61, 62.96,   0.00, 0.00, -88.44);
		CreateTheTLDynamicObject(2060, 559.22, -556.05, 62.95,   0.00, 0.00, -88.44);
		CreateTheTLDynamicObject(2060, 559.17, -557.64, 62.94,   0.00, 0.00, -88.44);
		CreateTheTLDynamicObject(2060, 559.28, -559.21, 62.93,   0.00, 0.00, -88.44);
		CreateTheTLDynamicObject(2060, 559.30, -559.61, 62.92,   0.00, 0.00, -88.44);
		CreateTheTLDynamicObject(2060, 559.30, -559.61, 62.12,   0.00, 0.00, -88.44);
		CreateTheTLDynamicObject(2060, 559.25, -558.35, 62.12,   0.00, 0.00, -88.44);
		CreateTheTLDynamicObject(2060, 559.28, -559.21, 62.12,   0.00, 0.00, -88.44);
		CreateTheTLDynamicObject(2060, 559.17, -557.64, 62.12,   0.00, 0.00, -88.44);
		CreateTheTLDynamicObject(2060, 559.22, -556.05, 62.12,   0.00, 0.00, -88.44);
		CreateTheTLDynamicObject(2060, 559.25, -555.61, 62.12,   0.00, 0.00, -88.44);
		CreateTheTLDynamicObject(2060, 559.22, -554.69, 62.12,   0.00, 0.00, -85.98);
		CreateTheTLDynamicObject(2060, 559.11, -553.99, 62.12,   0.00, 0.00, -77.76);
		CreateTheTLDynamicObject(2060, 559.30, -559.61, 62.32,   0.00, 0.00, -88.44);
		CreateTheTLDynamicObject(2060, 559.25, -558.35, 62.32,   0.00, 0.00, -88.44);
		CreateTheTLDynamicObject(2060, 559.28, -559.21, 62.32,   0.00, 0.00, -88.44);
		CreateTheTLDynamicObject(2060, 559.17, -557.64, 62.32,   0.00, 0.00, -88.44);
		CreateTheTLDynamicObject(2060, 559.22, -556.05, 62.33,   0.00, 0.00, -88.44);
		CreateTheTLDynamicObject(2060, 559.25, -555.61, 62.33,   0.00, 0.00, -88.44);
		CreateTheTLDynamicObject(2060, 559.22, -554.69, 62.33,   0.00, 0.00, -85.98);
		CreateTheTLDynamicObject(2060, 559.11, -553.99, 62.33,   0.00, 0.00, -77.76);
		CreateTheTLDynamicObject(2060, 559.30, -559.61, 62.52,   0.00, 0.00, -88.44);
		CreateTheTLDynamicObject(2060, 559.25, -558.35, 62.52,   0.00, 0.00, -88.44);
		CreateTheTLDynamicObject(2060, 559.28, -559.21, 62.53,   0.00, 0.00, -88.44);
		CreateTheTLDynamicObject(2060, 559.17, -557.64, 62.53,   0.00, 0.00, -88.44);
		CreateTheTLDynamicObject(2060, 559.22, -556.05, 62.53,   0.00, 0.00, -88.44);
		CreateTheTLDynamicObject(2060, 559.25, -555.61, 62.54,   0.00, 0.00, -88.44);
		CreateTheTLDynamicObject(2060, 559.22, -554.69, 62.54,   0.00, 0.00, -85.98);
		CreateTheTLDynamicObject(2060, 559.11, -553.99, 62.55,   0.00, 0.00, -77.76);
		CreateTheTLDynamicObject(2060, 559.30, -559.61, 62.72,   0.00, 0.00, -88.44);
		CreateTheTLDynamicObject(2060, 559.28, -559.21, 62.73,   0.00, 0.00, -88.44);
		CreateTheTLDynamicObject(2060, 559.17, -557.64, 62.74,   0.00, 0.00, -88.44);
		CreateTheTLDynamicObject(2060, 559.22, -556.05, 62.74,   0.00, 0.00, -88.44);
		CreateTheTLDynamicObject(2060, 559.25, -555.61, 62.75,   0.00, 0.00, -88.44);
		CreateTheTLDynamicObject(2060, 559.11, -553.99, 62.76,   0.00, 0.00, -77.76);
		CreateTheTLDynamicObject(2060, 557.69, -553.04, 63.10,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(2060, 556.14, -553.20, 63.08,   0.00, 0.00, 6.42);
		CreateTheTLDynamicObject(2060, 554.39, -553.72, 63.07,   0.00, 0.00, 6.42);
		CreateTheTLDynamicObject(2060, 552.63, -553.95, 63.05,   0.00, 0.00, 6.42);
		CreateTheTLDynamicObject(2060, 552.40, -554.03, 62.12,   0.00, 0.00, 6.42);
		CreateTheTLDynamicObject(2060, 552.81, -553.96, 62.12,   0.00, 0.00, 6.42);
		CreateTheTLDynamicObject(2060, 553.53, -553.78, 62.12,   0.00, 0.00, 6.42);
		CreateTheTLDynamicObject(2060, 554.39, -553.72, 62.12,   0.00, 0.00, 6.42);
		CreateTheTLDynamicObject(2060, 556.14, -553.20, 62.12,   0.00, 0.00, 6.42);
		CreateTheTLDynamicObject(2060, 556.93, -553.08, 62.12,   0.00, 0.00, 6.42);
		CreateTheTLDynamicObject(2060, 557.69, -553.04, 62.12,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(2060, 552.40, -554.03, 62.32,   0.00, 0.00, 6.42);
		CreateTheTLDynamicObject(2060, 552.81, -553.96, 62.33,   0.00, 0.00, 6.42);
		CreateTheTLDynamicObject(2060, 553.53, -553.78, 62.33,   0.00, 0.00, 6.42);
		CreateTheTLDynamicObject(2060, 554.39, -553.72, 62.33,   0.00, 0.00, 6.42);
		CreateTheTLDynamicObject(2060, 556.14, -553.20, 62.33,   0.00, 0.00, 6.42);
		CreateTheTLDynamicObject(2060, 556.93, -553.08, 62.33,   0.00, 0.00, 6.42);
		CreateTheTLDynamicObject(2060, 557.69, -553.04, 62.34,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(2060, 552.40, -554.03, 62.53,   0.00, 0.00, 6.42);
		CreateTheTLDynamicObject(2060, 552.81, -553.96, 62.53,   0.00, 0.00, 6.42);
		CreateTheTLDynamicObject(2060, 553.53, -553.78, 62.54,   0.00, 0.00, 6.42);
		CreateTheTLDynamicObject(2060, 554.39, -553.72, 62.54,   0.00, 0.00, 6.42);
		CreateTheTLDynamicObject(2060, 556.14, -553.20, 62.55,   0.00, 0.00, 6.42);
		CreateTheTLDynamicObject(2060, 556.93, -553.08, 62.55,   0.00, 0.00, 6.42);
		CreateTheTLDynamicObject(2060, 557.69, -553.04, 62.56,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(2060, 552.40, -554.03, 62.74,   0.00, 0.00, 6.42);
		CreateTheTLDynamicObject(2060, 552.81, -553.96, 62.74,   0.00, 0.00, 6.42);
		CreateTheTLDynamicObject(2060, 553.53, -553.78, 62.75,   0.00, 0.00, 6.42);
		CreateTheTLDynamicObject(2060, 554.39, -553.72, 62.76,   0.00, 0.00, 6.42);
		CreateTheTLDynamicObject(2060, 556.14, -553.20, 62.76,   0.00, 0.00, 6.42);
		CreateTheTLDynamicObject(2060, 556.93, -553.08, 62.77,   0.00, 0.00, 6.42);
		CreateTheTLDynamicObject(2060, 557.69, -553.04, 62.78,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(2060, 552.59, -553.99, 62.95,   0.00, 0.00, 6.42);
		CreateTheTLDynamicObject(2060, 554.39, -553.72, 62.97,   0.00, 0.00, 6.42);
		CreateTheTLDynamicObject(2060, 556.14, -553.20, 62.98,   0.00, 0.00, 6.42);
		CreateTheTLDynamicObject(2060, 557.69, -553.04, 63.00,   0.00, 0.00, 0.00);
		CreateTheTLDynamicObject(2060, 558.55, -560.46, 63.00,   0.00, 0.00, 15.00);
		CreateTheTLDynamicObject(2060, 556.93, -560.69, 62.98,   0.00, 0.00, 6.78);
		CreateTheTLDynamicObject(2060, 554.92, -560.79, 62.97,   0.00, 0.00, 6.78);
		CreateTheTLDynamicObject(2060, 553.39, -560.94, 62.95,   0.00, 0.00, 6.78);
		CreateTheTLDynamicObject(2060, 552.95, -561.00, 62.95,   0.00, 0.00, 6.78);
		CreateTheTLDynamicObject(2060, 552.95, -561.00, 62.12,   0.00, 0.00, 6.78);
		CreateTheTLDynamicObject(2060, 553.39, -560.94, 62.12,   0.00, 0.00, 6.78);
		CreateTheTLDynamicObject(2060, 554.12, -560.85, 62.12,   0.00, 0.00, 6.78);
		CreateTheTLDynamicObject(2060, 554.92, -560.79, 62.12,   0.00, 0.00, 6.78);
		CreateTheTLDynamicObject(2060, 556.93, -560.69, 62.12,   0.00, 0.00, 6.78);
		CreateTheTLDynamicObject(2060, 557.80, -560.53, 62.12,   0.00, 0.00, 5.34);
		CreateTheTLDynamicObject(2060, 558.55, -560.46, 62.12,   0.00, 0.00, 15.00);
		CreateTheTLDynamicObject(2060, 552.95, -561.00, 62.32,   0.00, 0.00, 6.78);
		CreateTheTLDynamicObject(2060, 553.39, -560.94, 62.33,   0.00, 0.00, 6.78);
		CreateTheTLDynamicObject(2060, 554.12, -560.85, 62.33,   0.00, 0.00, 6.78);
		CreateTheTLDynamicObject(2060, 554.92, -560.79, 62.33,   0.00, 0.00, 6.78);
		CreateTheTLDynamicObject(2060, 556.93, -560.69, 62.33,   0.00, 0.00, 6.78);
		CreateTheTLDynamicObject(2060, 557.80, -560.53, 62.34,   0.00, 0.00, 5.34);
		CreateTheTLDynamicObject(2060, 558.55, -560.46, 62.34,   0.00, 0.00, 15.00);
		CreateTheTLDynamicObject(2060, 552.95, -561.00, 62.53,   0.00, 0.00, 6.78);
		CreateTheTLDynamicObject(2060, 553.39, -560.94, 62.54,   0.00, 0.00, 6.78);
		CreateTheTLDynamicObject(2060, 554.12, -560.85, 62.54,   0.00, 0.00, 6.78);
		CreateTheTLDynamicObject(2060, 554.92, -560.79, 62.54,   0.00, 0.00, 6.78);
		CreateTheTLDynamicObject(2060, 556.93, -560.69, 62.55,   0.00, 0.00, 6.78);
		CreateTheTLDynamicObject(2060, 557.80, -560.53, 62.55,   0.00, 0.00, 5.34);
		CreateTheTLDynamicObject(2060, 558.55, -560.46, 62.56,   0.00, 0.00, 15.00);
		CreateTheTLDynamicObject(2060, 552.95, -561.00, 62.74,   0.00, 0.00, 6.78);
		CreateTheTLDynamicObject(2060, 553.39, -560.94, 62.75,   0.00, 0.00, 6.78);
		CreateTheTLDynamicObject(2060, 554.92, -560.79, 62.76,   0.00, 0.00, 6.78);
		CreateTheTLDynamicObject(2060, 556.93, -560.69, 62.76,   0.00, 0.00, 6.78);
		CreateTheTLDynamicObject(2060, 558.55, -560.46, 62.78,   0.00, 0.00, 15.00);
	}
	//printf("DEBUG CFONTROL TLSettings 2");
}


forward LowerTLTimer();
public LowerTLTimer()
{
	if(ModeCount(TL) > 0)
	{
	    if(TLInfo[TimeLeft] == 5000)
		{
			if(TLInfo[Map] == DDAY)TLInfo[TimeLeft]=60*15;
			else if(TLInfo[Map] == AIRBORNE)TLInfo[TimeLeft]=60*20;
			else if(TLInfo[Map] == RAMELLE)TLInfo[TimeLeft]=60*15;
			else if(TLInfo[Map] == PEARLHARBOR)TLInfo[TimeLeft]=60*10;
			else if(TLInfo[Map] == OFBRITAIN)TLInfo[TimeLeft]=60*15;
			else if(TLInfo[Map] == STALINGRAD)TLInfo[TimeLeft]=60*15;
			else if(TLInfo[Map] == TANKBATTLE)TLInfo[TimeLeft]=60*15;
			TextDrawSetString(TLInfo[TimeleftTD], " ");
			return 0;
		}
		
		if(TLInfo[TimeLeft] != 5000)
		{
			TLInfo[TimeLeft]--;
			if(TLInfo[Map] == DDAY || TLInfo[Map] == RAMELLE || TLInfo[Map] == AIRBORNE)
			{
				new st[16];
				format(st, sizeof(st), "Time: %s", TimeConvertTL(TLInfo[TimeLeft]));
				TextDrawSetString(TLInfo[TimeleftTD], st);
			}
			else if(TLInfo[Map] == PEARLHARBOR)
			{
				new st[90];
				format(st, sizeof(st), "~b~Ally ~w~ships: %d~n~~w~Time: %s",TLInfo[AllyShips],TimeConvertTL(TLInfo[TimeLeft]));
				TextDrawSetString(TLInfo[TimeleftTD], st);
			}
			else if(TLInfo[Map] == OFBRITAIN)
			{
				new st[90];
				format(st, sizeof(st), "~b~RAF~w~: %d~n~~r~Luftwaffe~w~: %d~n~Time: %s",TLInfo[AllyShips],TLInfo[AxisShips],TimeConvertTL(TLInfo[TimeLeft]));
				TextDrawSetString(TLInfo[TimeleftTD], st);
			}
			else if(TLInfo[Map] == STALINGRAD)
			{
				new st[90];
				format(st, sizeof(st), "~b~Soviets~w~: %d~n~~r~Nazis~w~: %d~n~Time: %s",TLInfo[AllyShips],TLInfo[AxisShips],TimeConvertTL(TLInfo[TimeLeft]));
				TextDrawSetString(TLInfo[TimeleftTD], st);
			}
			else if(TLInfo[Map] == TANKBATTLE)
			{
				new st[90];
				format(st, sizeof(st), "~b~Brits~w~: %d~n~~r~Nazis~w~: %d~n~Time: %s",TLInfo[AllyShips],TLInfo[AxisShips],TimeConvertTL(TLInfo[TimeLeft]));
				TextDrawSetString(TLInfo[TimeleftTD], st);
			}
		}
		else TextDrawSetString(TLInfo[TimeleftTD], " ");
		
		if(TLInfo[TimeLeft] <= 0)
		{
			//printf("DEBUG CFONTROL LowerTLTimer 1");
		    forLoop(y, MAX_PLAYERS)
			{
				if(!IsPlayerConnected(y) || IsPlayerNPC(y))continue;
         		if(PlayerInfo[y][PlayerMode] == TL && PlayerInfo[y][Spawned] == 1 && GetPlayerVirtualWorld(y)==W_TL)
				{
				    PlayerInfo[y][EnteredZone] = -1;
			 		PlayerInfo[y][ZoneDead] = 1;
			 		TLInfo[BeingBombed]=0;
		 			GameTextForPlayer(y," ",1000,6);
			 		PlayerInfo[y][lCountDown]=-1;
					TogglePlayerControllable(y,false);
					if(TLInfo[Map] == PEARLHARBOR)
					{
						SetPlayerCameraPos(y, 2665.0732, -2610.5781, 91.9509);
						SetPlayerCameraLookAt(y, 2665.6511, -2609.7571, 91.5557);
						if(PlayerInfo[y][pTeam] == ALLIES)
					    {
					        TLPlayerInfo[y][RoundsWon]++;
             				TLPlayerInfo[y][Score] +=10;
					    }
					    if(PlayerInfo[y][pTeam] == AXIS)
						{
							TLPlayerInfo[y][RoundsLost] ++;
						}
					}
					else if(TLInfo[Map] == DDAY)
					{
						SetPlayerCameraPos(y, -2476.6509, -2787.9888, 19.8870);
						SetPlayerCameraLookAt(y, -2475.7485, -2787.5518, 19.5270);
						if(PlayerInfo[y][pTeam] == AXIS)
					    {
					        TLPlayerInfo[y][RoundsWon]++;
            		 		TLPlayerInfo[y][Score] +=10;
					    }
					    if(PlayerInfo[y][pTeam] == ALLIES)
						{
							TLPlayerInfo[y][RoundsLost] ++;
						}
					}
					else if(TLInfo[Map] == AIRBORNE)
					{
					    SetPlayerCameraPos(y, 14.7606, -119.8225, 40.6862);
						SetPlayerCameraLookAt(y, 15.1794, -120.7348, 40.4911);
						if(PlayerInfo[y][pTeam] == AXIS)
					    {
					        TLPlayerInfo[y][RoundsWon]++;
             				TLPlayerInfo[y][Score] +=10;
					    }
					    if(PlayerInfo[y][pTeam] == ALLIES)
						{
							TLPlayerInfo[y][RoundsLost] ++;
						}
					}
					else if(TLInfo[Map] == RAMELLE)
					{
					    SetPlayerCameraPos(y, -260.8311, 337.6934, 68.4573);
						SetPlayerCameraLookAt(y, -260.6225, 336.7124, 68.1222);
						if(PlayerInfo[y][pTeam] == ALLIES)
					    {
					        TLPlayerInfo[y][RoundsWon]++;
             				TLPlayerInfo[y][Score] +=10;
					    }
					    if(PlayerInfo[y][pTeam] == AXIS)
						{
							TLPlayerInfo[y][RoundsLost] ++;
						}
					}
					else if(TLInfo[Map] == OFBRITAIN)
					{
					    SetPlayerCameraPos(y, 85.8375, -89.6113, 6.7383);
						SetPlayerCameraLookAt(y, 86.2714, -90.5168, 7.0083);
						if(TLInfo[AllyShips] > TLInfo[AxisShips])
						{
							if(PlayerInfo[y][pTeam] == ALLIES)
						    {
						        TLPlayerInfo[y][RoundsWon]++;
              					TLPlayerInfo[y][Score] +=10;
						    }
						    if(PlayerInfo[y][pTeam] == AXIS)
							{
								TLPlayerInfo[y][RoundsLost] ++;
							}
						}
						if(TLInfo[AllyShips] < TLInfo[AxisShips])
						{
							if(PlayerInfo[y][pTeam] == AXIS)
						    {
						        TLPlayerInfo[y][RoundsWon]++;
              					TLPlayerInfo[y][Score] +=10;
						    }
						    if(PlayerInfo[y][pTeam] == ALLIES)
							{
								TLPlayerInfo[y][RoundsLost] ++;
							}
						}
						if(TLInfo[AllyShips] == TLInfo[AxisShips])
						{
							TLPlayerInfo[y][RoundsWon]++;
          					TLPlayerInfo[y][Score] +=10;
						}
					}
					else if(TLInfo[Map] == STALINGRAD)
					{
					    SetPlayerCameraPos(y, 786.4450, -576.5499, 68.1884);
						SetPlayerCameraLookAt(y, 785.4516, -576.4557, 68.0883);
						if(TLInfo[AllyShips] > TLInfo[AxisShips])
						{
							if(PlayerInfo[y][pTeam] == ALLIES)
						    {
						        TLPlayerInfo[y][RoundsWon]++;
              					TLPlayerInfo[y][Score] +=10;
						    }
						    if(PlayerInfo[y][pTeam] == AXIS)
							{
								TLPlayerInfo[y][RoundsLost] ++;
							}
						}
						if(TLInfo[AllyShips] < TLInfo[AxisShips])
						{
							if(PlayerInfo[y][pTeam] == AXIS)
						    {
						        TLPlayerInfo[y][RoundsWon]++;
             	 				TLPlayerInfo[y][Score] +=10;
						    }
						    if(PlayerInfo[y][pTeam] == ALLIES)
							{
								TLPlayerInfo[y][RoundsLost] ++;
							}
						}
						if(TLInfo[AllyShips] == TLInfo[AxisShips])
						{
							TLPlayerInfo[y][RoundsWon]++;
          					TLPlayerInfo[y][Score] +=10;
						}
					}
					else if(TLInfo[Map] == TANKBATTLE)
					{
					    SetPlayerCameraPos(y, 56.4196, -215.2516, 138.9924);
						SetPlayerCameraLookAt(y, 57.3050, -214.7919, 138.3072);
						if(TLInfo[AllyShips] > TLInfo[AxisShips])
						{
							if(PlayerInfo[y][pTeam] == ALLIES)
						    {
						        TLPlayerInfo[y][RoundsWon]++;
              					TLPlayerInfo[y][Score] +=10;
						    }
						    if(PlayerInfo[y][pTeam] == AXIS)
							{
								TLPlayerInfo[y][RoundsLost] ++;
							}
						}
						if(TLInfo[AllyShips] < TLInfo[AxisShips])
						{
							if(PlayerInfo[y][pTeam] == AXIS)
						    {
						        TLPlayerInfo[y][RoundsWon]++;
              					TLPlayerInfo[y][Score] +=10;
						    }
						    if(PlayerInfo[y][pTeam] == ALLIES)
							{
								TLPlayerInfo[y][RoundsLost] ++;
							}
						}
						if(TLInfo[AllyShips] == TLInfo[AxisShips])
						{
							TLPlayerInfo[y][RoundsWon]++;
				          	TLPlayerInfo[y][Score] +=10;
						}
					}
					SpawnPlayerTimer(y, 3000);
					TextDrawHideForPlayer(y,TLInfo[TimeleftTD]);

				}
			}
			if(TLInfo[Map] == DDAY)
			{
				DeleteDDayShip(0);
				DeleteDDayShip(1);
			}
			else if(TLInfo[Map] == DDAY)
			{
				SendMessageToMode(TL,white,"{33FF33}WAR NEWS:{FFFFFF} Nazis have been strong, they have held the base!");
				db_SaveChat(-1, TL,"[WAR NEWS] Nazis have been strong, they have held the base!");
			}
			else if(TLInfo[Map] == AIRBORNE)
			{
				SendMessageToMode(TL,white,"{33FF33}WAR NEWS:{FFFFFF} Nazis have been strong, they have held the base!");
				db_SaveChat(-1, TL,"[WAR NEWS] Nazis have been strong, they have held the base!");
			}
			else if(TLInfo[Map] == RAMELLE)
			{
				SendMessageToMode(TL,white,"{33FF33}WAR NEWS:{FFFFFF} Allies have been strong, they have held the base!");
				db_SaveChat(-1, TL,"[WAR NEWS] Allies have been strong, they have held the base!");
			}
			else if(TLInfo[Map] == PEARLHARBOR)
			{
				SendMessageToMode(TL,white,"{33FF33}WAR NEWS:{FFFFFF} Allies have been strong, they have protected the harbor!");
				db_SaveChat(-1, TL,"[WAR NEWS] Allies have been strong, they have protected the harbor!");
			}
			else if(TLInfo[Map] == OFBRITAIN)
			{
			    if(TLInfo[AllyShips] > TLInfo[AxisShips])
				{
					SendMessageToMode(TL,white,"{33FF33}WAR NEWS:{FFFFFF} British RAF pilots have taken down all enemy planes!");
					db_SaveChat(-1, TL,"[WAR NEWS] British RAF pilots have taken down all enemy planes!");
				}
				if(TLInfo[AllyShips] < TLInfo[AxisShips])
				{
					SendMessageToMode(TL,white,"{33FF33}WAR NEWS:{FFFFFF} German Luftwaffe pilots have taken down all enemy planes!");
					db_SaveChat(-1, TL,"[WAR NEWS] German Luftwaffe pilots have taken down all enemy planes!");
				}
				if(TLInfo[AllyShips] == TLInfo[AxisShips])
				{
					SendMessageToMode(TL,white,"{33FF33}WAR NEWS:{FFFFFF} Both nations have had casualties, battle has ended!");
					db_SaveChat(-1, TL,"[WAR NEWS] Both nations have had casualties, battle has ended!");
				}
			}
			else if(TLInfo[Map] == STALINGRAD)
			{
			    if(TLInfo[AllyShips] > TLInfo[AxisShips])
				{
					SendMessageToMode(TL,white,"{33FF33}WAR NEWS:{FFFFFF} The Soviet soldiers have taken down all enemy infrantries!");
					db_SaveChat(-1, TL,"[WAR NEWS] The Soviet soldiers have taken down all enemy infrantries!");
				}
				if(TLInfo[AllyShips] < TLInfo[AxisShips])
				{
					SendMessageToMode(TL,white,"{33FF33}WAR NEWS:{FFFFFF} The Nazis have taken down all enemy infrantries!");
					db_SaveChat(-1, TL,"[WAR NEWS] The Nazis have taken down all enemy infrantries!");
				}
				if(TLInfo[AllyShips] == TLInfo[AxisShips])
				{
					SendMessageToMode(TL,white,"{33FF33}WAR NEWS:{FFFFFF} Both nations have had casualties, battle has ended!");
					db_SaveChat(-1, TL,"[WAR NEWS] Both nations have had casualties, battle has ended!");
				}
			}
			else if(TLInfo[Map] == TANKBATTLE)
			{
			    if(TLInfo[AllyShips] > TLInfo[AxisShips])
				{
					SendMessageToMode(TL,white,"{33FF33}WAR NEWS:{FFFFFF} The British soldiers have taken down all enemy infrantries!");
					db_SaveChat(-1, TL,"[WAR NEWS] The British soldiers have taken down all enemy infrantries!");
				}
				if(TLInfo[AllyShips] < TLInfo[AxisShips])
				{
					SendMessageToMode(TL,white,"{33FF33}WAR NEWS:{FFFFFF} The Nazis have taken down all enemy infrantries!");
					db_SaveChat(-1, TL,"[WAR NEWS] The Nazis have taken down all enemy infrantries!");
				}
				if(TLInfo[AllyShips] == TLInfo[AxisShips])
				{
					SendMessageToMode(TL,white,"{33FF33}WAR NEWS:{FFFFFF} Both nations have had casualties, battle has ended!");
					db_SaveChat(-1, TL,"[WAR NEWS] Both nations have had casualties, battle has ended!");
				}
			}
			ChangeMapTL();
			//printf("DEBUG CFONTROL LowerTLTimer 2");
		    return 0;
		}
	}
	//else TextDrawSetString(TLInfo[TimeleftTD], " ");
	
	//KillTimer(TLInfo[Timer]);
    //TLInfo[Timer] = SetTimer("LowerTLTimer", 1000, 0);
	return 1;
}

forward StartLowerTLTimer();
public StartLowerTLTimer()
{
    KillTimer(TLInfo[Timer]);
    TLInfo[Timer] = SetTimer("LowerTLTimer", 1000, 1);
    return 0;
}

stock aadw_hash(buf[]) {
	new length=strlen(buf);
    new s1 = 1;
    new s2 = 0;
    new n;
    for (n=0; n<length; n++)
    {
       s1 = (s1 + buf[n]) % 65521;
       s2 = (s2 + s1)     % 65521;
    }
    return (s2 << 16) + s1;
}
stock TimeConvertTL(time)
{
	//printf("DEBUG CFONTROL TimeConvertTL 1");
    new minutes;
    new seconds;
    new string[128];
    if(time > 59){
        minutes = floatround(time/60);
        seconds = floatround(time - minutes*60);
        if(seconds>9)format(string,sizeof(string),"%d:%d",minutes,seconds);
        else format(string,sizeof(string),"%d:0%d",minutes,seconds);
    }
    else{
        seconds = floatround(time);
        if(seconds>9)format(string,sizeof(string),"0:%d",seconds);
        else format(string,sizeof(string),"0:0%d",seconds);
    }
	//printf("DEBUG CFONTROL TimeConvertTL 2");
    return string;
}

forward DestroyPlayerDDShip(playerid);
public DestroyPlayerDDShip(playerid)
{
	//printf("DEBUG CFONTROL DestroyPlayerDDShip 1");
	if(DDayPlayerObjects[playerid] != -1)
    	DestroyPlayerObject(playerid,DDayPlayerObjects[playerid]);
    DDayPlayerObjects[playerid] = -1;
	//printf("DEBUG CFONTROL DestroyPlayerDDShip 2");
}
stock CreatePlayerDDayShip(playerid,id)
{
    DestroyPlayerDDShip(playerid);
    if(!DDayBoat[id][dLanded])
    {
	    new Float:x, Float:y, Float:z;
	    GetDynamicObjectPos(DDayBoat[id][dObjects][0],x,y,z);
		DDayPlayerObjects[playerid] = CreatePlayerObject(playerid,3095,x,y,z,0.00, 180.00, -7.62);
	}
}
stock CreateDDShip(id,Float:x,Float:y,Float:z,Float:dx,Float:dy,Float:dz)
{
	//printf("DEBUG CFONTROL CreateDDShip 1");
    DeleteDDayShip(id);
    DDayBoat[id][dObjects][0] = CreateTheDynamicObject(3095,x,y,z,0.00, 180.00, -7.62,W_TL);
    DDayBoat[id][dObjects][1] = CreateTheDynamicObject(3095,x-1,y-8,z,0.00, 180.00, -7.62,W_TL);
    DDayBoat[id][dObjects][2] = CreateTheDynamicObject(3095,x-2,y+1,z-2,80.00, 180.00, 81.84,W_TL);
    DDayBoat[id][dObjects][3] = CreateTheDynamicObject(3095,x+2.1,y,z-2,80.00, 180.00, -98.04,W_TL);
    DDayBoat[id][dObjects][4] = CreateTheDynamicObject(3095,x-1,y-9,z-1.5,90.00, 180.00, -188.34,W_TL);
    DDayBoat[id][dObjects][5] = CreateTheDynamicObject(3095,x-1.5,y-10.5,z+1,0.00, 180.00, -7.62,W_TL);
    DDayBoat[id][dObjects][6] = CreateTheDynamicObject(3095,x-1,y-6,z-2,90.00, 180.00, -187.38,W_TL);
    DDayBoat[id][dObjects][7] = CreateTheDynamicObject(3095,x+1,y+4,z,80.00, 180.00, -8.04,W_TL);//door
	DDayBoat[id][dObjects][8] = CreateTheDynamicObject(3095,x-3.2,y-7.7,z-2,80.00, 180.00, 82.26,W_TL);
    DDayBoat[id][dObjects][9] = CreateTheDynamicObject(3095,x+1,y-8,z-2,80.00, 180.00, -98.04,W_TL);
    DDayBoat[id][desX] = dx;
    DDayBoat[id][desY] = dy;
    DDayBoat[id][desZ] = dz;
	DDayBoat[id][dAngle] = 80;
	DDayBoat[id][dLanded] = 0;
	SetTimerEx("MoveDDayShip", 20000, 0, "i", id);
	//printf("DEBUG CFONTROL CreateDDShip 2");
}

forward MoveDDayShip(id);
public MoveDDayShip(id)
{
	//printf("DEBUG CFONTROL MoveDDayShip 1");
	MoveDynamicObject(DDayBoat[id][dObjects][0], DDayBoat[id][desX],DDayBoat[id][desY],DDayBoat[id][desZ], 3);
    MoveDynamicObject(DDayBoat[id][dObjects][1], DDayBoat[id][desX]-1,DDayBoat[id][desY]-8,DDayBoat[id][desZ], 3);
    MoveDynamicObject(DDayBoat[id][dObjects][2], DDayBoat[id][desX]-2,DDayBoat[id][desY]+1,DDayBoat[id][desZ]-2, 3);
    MoveDynamicObject(DDayBoat[id][dObjects][3], DDayBoat[id][desX]+2.1,DDayBoat[id][desY],DDayBoat[id][desZ]-2, 3);
    MoveDynamicObject(DDayBoat[id][dObjects][4], DDayBoat[id][desX]-1,DDayBoat[id][desY]-9,DDayBoat[id][desZ]-1.5, 3);
    MoveDynamicObject(DDayBoat[id][dObjects][5], DDayBoat[id][desX]-1.5,DDayBoat[id][desY]-10.5,DDayBoat[id][desZ]+1, 3);
    MoveDynamicObject(DDayBoat[id][dObjects][6], DDayBoat[id][desX]-1,DDayBoat[id][desY]-6,DDayBoat[id][desZ]-2, 3);
	MoveDynamicObject(DDayBoat[id][dObjects][7], DDayBoat[id][desX]+1,DDayBoat[id][desY]+4,DDayBoat[id][desZ], 3);
    MoveDynamicObject(DDayBoat[id][dObjects][8], DDayBoat[id][desX]-3.2,DDayBoat[id][desY]-7.7,DDayBoat[id][desZ]-2, 3);
    MoveDynamicObject(DDayBoat[id][dObjects][9], DDayBoat[id][desX]+1,DDayBoat[id][desY]-8,DDayBoat[id][desZ]-2, 3);
	CheckDDayShip(id);
	//printf("DEBUG CFONTROL MoveDDayShip 2");
}

stock DeleteDDayShip(id)
{
	//printf("DEBUG CFONTROL DeleteDDayShip 1");
	forLoop(i, MAX_DDAYBOAT_OBJS)
    {
		if(DDayBoat[id][dObjects][i] != -1)DestroyTheDynamicObject(DDayBoat[id][dObjects][i]);
		DDayBoat[id][dObjects][i] = -1;
	}
	//printf("DEBUG CFONTROL DeleteDDayShip 2");
}

forward OpenDDayShip(id);
public OpenDDayShip(id)
{
	//printf("DEBUG CFONTROL OpenDDayShip 1");
	DDayBoat[id][dAngle] --;
	if(DDayBoat[id][dAngle] <= 11)
	{
	    DDayBoat[id][dLanded] = 1;
		return 0;
	}
	new Float:x, Float:y, Float:z;
	GetDynamicObjectPos(DDayBoat[id][dObjects][7], x, y, z);
	MoveDynamicObject(DDayBoat[id][dObjects][7], x,y,z, 2,DDayBoat[id][dAngle], 180.00, -8.04);
	SetTimerEx("OpenDDayShip", 20, 0, "i", id);
	//printf("DEBUG CFONTROL OpenDDayShip 2");
	return 0;
}
stock SpawnOnShip(playerid,id)
{
	//printf("DEBUG CFONTROL SpawnOnShip 1");
	if(DDayBoat[id][dLanded] == 0)
	{
	    CreatePlayerDDayShip(playerid,id);
		new Float:x, Float:y, Float:z;
		GetDynamicObjectPos(DDayBoat[id][dObjects][0], x, y, z);
		SetPlayerPos(playerid,x+random(2),y+random(3),z+2);
		SetTimerEx("DestroyPlayerDDShip", 2000, 0, "i", playerid);
	}
	else SetPlayerPos(playerid,-2445.6147,-2868.4690,0.1717);
	//printf("DEBUG CFONTROL SpawnOnShip 2");
	return 0;
}
forward CheckDDayShip(id);
public CheckDDayShip(id)
{
	//printf("DEBUG CFONTROL CheckDDayShip 1");
	new Float:x, Float:y, Float:z;
	GetDynamicObjectPos(DDayBoat[id][dObjects][0], x, y, z);
	if(floatround(floatabs(floatsub(x,DDayBoat[id][desX]))) <= 1 && floatround(floatabs(floatsub(y,DDayBoat[id][desY]))) <= 1 && floatround(floatabs(floatsub(z,DDayBoat[id][desZ]))) <= 1)
	{
	    OpenDDayShip(id);
	    return 0;
	}
	SetTimerEx("CheckDDayShip", 20, 0, "i", id);
	//printf("DEBUG CFONTROL CheckDDayShip 2");
	return 0;
}
forward TakeLandTL(i);
public TakeLandTL(i)
{
	if(PlayerInfo[i][PlayerMode] == TL && PlayerInfo[i][ZoneDead] == 0)
	{
	    if(PlayerInfo[i][EnteredZone] == TLInfo[AreaID])
		{
			//printf("DEBUG CFONTROL TakeLandTL 1");
	    	new st[128];
	    	if(TLInfo[Map] == DDAY)
			{
			    format(st,128,"{33FF33}WAR NEWS:{FFFFFF} %s has bombed the base, the Allies took the base!",PlayerInfo[i][Name]);
				SendMessageToMode(TL,white,st);
			  	format(st, sizeof(st), "[WAR NEWS] %s has bombed the base, the Allies took the base!",PlayerInfo[i][Name]);
				db_SaveChat(-1, TL,st);
	            forLoop(y, MAX_PLAYERS)
				{
					if(!IsPlayerConnected(y) || IsPlayerNPC(y))continue;
	 				if(PlayerInfo[y][PlayerMode] == TL && PlayerInfo[y][Spawned] == 1 && GetPlayerVirtualWorld(y)==W_TL)
					{
						TogglePlayerControllable(y,false);
						SetPlayerPos(y, -2618.9778, 1442.3223, 8.4407);
						SetPlayerCameraPos(y, -2609.5032, 1447.3551, 22.3680);
						SetPlayerCameraLookAt(y, -2609.7451, 1448.3304, 22.5931);
						SpawnPlayerTimer(y, 6000);
						TextDrawHideForPlayer(y,TLInfo[TimeleftTD]);
						PlayerInfo[y][ZoneDead] = 1;
					}
				}
				DeleteDDayShip(0);
				DeleteDDayShip(1);
			}
			else if(TLInfo[Map] == AIRBORNE)
			{
			    format(st,128,"{33FF33}WAR NEWS:{FFFFFF} %s has bombed the base, the Allies took the base!",PlayerInfo[i][Name]);
				SendMessageToMode(TL,white,st);
			  	format(st, sizeof(st), "[WAR NEWS] %s has bombed the base, the Allies took the base!",PlayerInfo[i][Name]);
				db_SaveChat(-1, TL,st);
 				forLoop(y, MAX_PLAYERS)
				{
					if(!IsPlayerConnected(y) || IsPlayerNPC(y))continue;
     				if(PlayerInfo[y][PlayerMode] == TL && PlayerInfo[y][Spawned] == 1 && GetPlayerVirtualWorld(y)==W_TL)
					{
						TogglePlayerControllable(y,false);
						SetPlayerPos(y, -2618.9778, 1442.3223, 8.4407);
						SetPlayerCameraPos(y, -2609.5032, 1447.3551, 22.3680);
						SetPlayerCameraLookAt(y, -2609.7451, 1448.3304, 22.5931);
						SpawnPlayerTimer(y, 6000);
						TextDrawHideForPlayer(y,TLInfo[TimeleftTD]);
						PlayerInfo[y][ZoneDead] = 1;
					}
				}
			}
			else if(TLInfo[Map] == RAMELLE)
			{
			    format(st,128,"{33FF33}WAR NEWS:{FFFFFF} %s has bombed the base, the Axis took the city!",PlayerInfo[i][Name]);
				SendMessageToMode(TL,white,st);
			  	format(st, sizeof(st), "[WAR NEWS] %s has bombed the base, the Axis took the city!",PlayerInfo[i][Name]);
				db_SaveChat(-1, TL,st);
                forLoop(y, MAX_PLAYERS)
				{
					if(!IsPlayerConnected(y) || IsPlayerNPC(y))continue;
     				if(PlayerInfo[y][PlayerMode] == TL && PlayerInfo[y][Spawned] == 1 && GetPlayerVirtualWorld(y)==W_TL)
					{
						TogglePlayerControllable(y,false);
						SetPlayerPos(y, -2618.9778, 1442.3223, 8.4407);
						SetPlayerCameraPos(y, -2609.5032, 1447.3551, 22.3680);
						SetPlayerCameraLookAt(y, -2609.7451, 1448.3304, 22.5931);
						SpawnPlayerTimer(y, 6000);
						TextDrawHideForPlayer(y,TLInfo[TimeleftTD]);
						PlayerInfo[y][ZoneDead] = 1;
					}
				}
			}
			PlayerInfo[i][EnteredZone] = -1;
			TLInfo[BeingBombed]=0;
			GameTextForPlayer(i," ",1000,6);
			TLInfo[TimeLeft] = 5000;
			ChangeMapTL();
			FinishedObjective(i);
			//printf("DEBUG CFONTROL TakeLandTL 2");
		}
	}
}
stock FinishedObjective(playerid)
{
	//printf("DEBUG CFONTROL FinishedObjective 1");
	ChangeModeScore(playerid, 15);
	TLPlayerInfo[playerid][Objective] ++;
	forLoop(y, MAX_PLAYERS)
	{
		if(!IsPlayerConnected(y) || IsPlayerNPC(y))continue;
		if(PlayerInfo[y][PlayerMode] == TL && PlayerInfo[y][Spawned] == 1 && GetPlayerVirtualWorld(y)==W_TL)
		{
		    if(PlayerInfo[y][pTeam] == PlayerInfo[playerid][pTeam])
		    {
		        TLPlayerInfo[y][RoundsWon]++;
				ChangeModeScore(y, 10);
		    }
		    else TLPlayerInfo[y][RoundsLost] ++;
		}
	}
	//printf("DEBUG CFONTROL FinishedObjective 2");
}
stock FinishedObjective2(team)
{
	//printf("DEBUG CFONTROL FinishedObjective2 1");
    forLoop(y, MAX_PLAYERS)
	{
		if(!IsPlayerConnected(y) || IsPlayerNPC(y))continue;
		if(PlayerInfo[y][PlayerMode] == TL && PlayerInfo[y][Spawned] == 1 && GetPlayerVirtualWorld(y)==W_TL)
		{
		    if(PlayerInfo[y][pTeam] == team)
		    {
		        TLPlayerInfo[y][RoundsWon]++;
				ChangeModeScore(y, 10);
		    }
		    else TLPlayerInfo[y][RoundsLost] ++;
		}
	}
	//printf("DEBUG CFONTROL FinishedObjective2 2");
}


forward SpawnThePlayers(y);
public SpawnThePlayers(y)
{
	if(!PlayerInfo[y][Jailed])
	{
		A_SpawnPlayer(y);
		DisablePlayerCheckpoint(y);
	}
}
/*forward SpawnPlayerEx(playerid);
public SpawnPlayerEx(playerid)
{
    GameTextForPlayer(playerid, " ", 1000, 3);
    ResetWeapons(playerid);
    forLoop(i, 10)RemovePlayerAttachedObjectEx(playerid, i);
	DisablePlayerCheckpoint(playerid);
	DisablePlayerRaceCheckpoint(playerid);
    OnPlayerSpawn(playerid);
    return 1;
}*/


forward TakeLandTW(i);
public TakeLandTW(i)
{
	if(PlayerInfo[i][PlayerMode] == TW && PlayerInfo[i][ZoneDead] == 0 && TWPlayerInfo[i][Class] != LEADER && TWPlayerInfo[i][Class] != VICE && TWPlayerInfo[i][Class] != BODYGUARD && TWPlayerInfo[i][Class] != SPY)
	{
	    forLoop(id, MAX_TW_ZONES)
		{
		    if(TWZoneInfo[id][Exists])
		    {
				//printf("DEBUG CFONTROL TakeLandTW 1");
				if(PlayerInfo[i][EnteredZone] == TWZoneInfo[id][AreaID])
				{
		        	new st[228];
				    TWZoneInfo[id][Team]=PlayerInfo[i][pTeam];
					TWZoneInfo[id][Conquer]=TWPlayerInfo[i][Country];
					PlayerInfo[i][EnteredZone] = -1;
	 				TWZoneInfo[id][BeingCaptured]=0;
	                Refound(i);
					GameTextForPlayer(i," ",1000,6);
	                GangZoneStopFlashFor(TW,TWZoneInfo[id][gZone]);
					GangZoneHideFor(TW,TWZoneInfo[id][gZone]);
					if(TWZoneInfo[id][OriginalTeam] == TWZoneInfo[id][Team])TWZoneInfo[id][Conquer]=TWZoneInfo[id][cOriginalTeam];
					GangZoneShowFor(TW,TWZoneInfo[id][gZone],CountryColors[TWZoneInfo[id][Conquer]]);
					GiveArmyRanks(i);
					DisablePlayerCheckpoint(i);
					if(TWZoneInfo[id][OriginalTeam] == TWZoneInfo[id][Team])
					{
					  	format(st, sizeof(st), "[WAR NEWS] The %s has been released by %s, %s %s!",TWZoneInfo[id][zName],PlayerInfo[i][Name],caCountryNames[TWPlayerInfo[i][Country]],ClassNames[TWPlayerInfo[i][Class]]);
						db_SaveChat(-1, TW,st);
				    	format(st,sizeof(st),"{33FF33}WAR NEWS:{FFFFFF} The {FF9900}%s{FFFFFF} has been released by {FF9900}%s,{%s} %s %s!",TWZoneInfo[id][zName],PlayerInfo[i][Name],CountryChatColor[TWPlayerInfo[i][Country]],caCountryNames[TWPlayerInfo[i][Country]],ClassNames[TWPlayerInfo[i][Class]]);
					}
					else if(TWZoneInfo[id][OriginalTeam] != TWZoneInfo[id][Team])
					{
					  	format(st, sizeof(st), "[WAR NEWS] The %s has been taken over by %s, %s %s!",TWZoneInfo[id][zName],PlayerInfo[i][Name],caCountryNames[TWPlayerInfo[i][Country]],ClassNames[TWPlayerInfo[i][Class]]);
						db_SaveChat(-1, TW,st);
				    	format(st,sizeof(st),"{33FF33}WAR NEWS:{FFFFFF} The {FF9900}%s{FFFFFF} has been taken over by {FF9900}%s,{%s} %s %s!",TWZoneInfo[id][zName],PlayerInfo[i][Name],CountryChatColor[TWPlayerInfo[i][Country]],caCountryNames[TWPlayerInfo[i][Country]],ClassNames[TWPlayerInfo[i][Class]]);
					}
					SendMessageToMode(TW,white,st);

					PowerTakesOver();
					UpdateZoneText(id);
					LeaderBarState();
				    break;
				}
				//printf("DEBUG CFONTROL TakeLandTW 2");
			}
		}
	}
}
forward countdowntotakeland(playerid);
public countdowntotakeland(playerid)
{
    if(!IsPlayerConnected(playerid) || IsPlayerNPC(playerid) || PlayerInfo[playerid][Spawned] == 0
		|| PlayerInfo[playerid][MainMenu] == 0 || PlayerInfo[playerid][PlayerOptionSelected] == 0 || PlayerInfo[playerid][SkinsCMD][0] != 0 || PlayerInfo[playerid][HasSelectedVeh] == 0)
			return 0;
    if(PlayerInfo[playerid][lCountDown]!=-1)
    {
		PlayerInfo[playerid][lCountDown]--;
		if(PlayerInfo[playerid][lCountDown]<=0)
		{
			PlayerInfo[playerid][lCountDown] = -1;
			GameTextForPlayer(playerid, " ",1000,6);
			if(PlayerInfo[playerid][PlayerMode] == CO)TakeLandCO(playerid);
			if(PlayerInfo[playerid][PlayerMode] == TL)TakeLandTL(playerid);
			if(PlayerInfo[playerid][PlayerMode] == TW)TakeLandTW(playerid);
			return 0;
		}
		else
		{
			new text[40];
			format(text,sizeof(text),"_~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~%d",PlayerInfo[playerid][lCountDown]);
			GameTextForPlayer(playerid, text, 2000, 6);
		}
		if(PlayerInfo[playerid][TakeLandTimer] != 0)KillTimer(PlayerInfo[playerid][TakeLandTimer]);
		PlayerInfo[playerid][TakeLandTimer] = SetTimerEx("countdowntotakeland",900,0, "i", playerid);
		return 0;
	}
	return 0;
}


public OnPlayerLeaveDynamicArea(playerid, areaid)
{
	FFACheckGangZoneCount(playerid, false);

	if(VWExitSpawnArea(playerid, areaid))return 1;
    if(PlayerInfo[playerid][PlayerMode] == TW && PlayerInfo[playerid][ZoneDead] == 0 && TWPlayerInfo[playerid][Class] != LEADER && TWPlayerInfo[playerid][Class] != VICE && TWPlayerInfo[playerid][Class] != BODYGUARD && TWPlayerInfo[playerid][Class] != SPY && PlayerInfo[playerid][Spawned] == 1 && !IsPlayerInAnyVehicle(playerid) && GetPlayerVirtualWorld(playerid)==W_TW)
	{
		forLoop(id, MAX_TW_ZONES)
		{
		    if(TWZoneInfo[id][Exists] == 1)
		    {
		        if(TWZoneInfo[id][AreaID] == areaid && PlayerInfo[playerid][EnteredZone] == areaid)
			    {
			        PlayerInfo[playerid][EnteredZone] = -1;
					TWZoneInfo[id][BeingCaptured] = 0;
					GameTextForPlayer(playerid," ",1000,6);
					GangZoneStopFlashFor(TW,TWZoneInfo[id][gZone]);
					new str[226];
					if(TWZoneInfo[id][OriginalTeam] == PlayerInfo[playerid][pTeam])
					{
				    	format(str,sizeof(str),"{33FF33}WAR NEWS:{FFFFFF} {FF9900}%s,{%s} %s %s {FFFFFF}failed to release the {FF9900}%s!",PlayerInfo[playerid][Name],CountryChatColor[TWPlayerInfo[playerid][Country]],caCountryNames[TWPlayerInfo[playerid][Country]],ClassNames[TWPlayerInfo[playerid][Class]],TWZoneInfo[id][zName]);
				    	SendMessageToMode(TW,white,str);
						format(str, sizeof(str), "[WAR NEWS] %s, %s %s failed to release the %s!",PlayerInfo[playerid][Name],caCountryNames[TWPlayerInfo[playerid][Country]],ClassNames[TWPlayerInfo[playerid][Class]],TWZoneInfo[id][zName]);
						db_SaveChat(-1, TW,str);
					}
					else if(TWZoneInfo[id][OriginalTeam] != PlayerInfo[playerid][pTeam])
					{
						format(str,sizeof(str),"{33FF33}WAR NEWS:{FFFFFF} {FF9900}%s,{%s} %s %s {FFFFFF}failed to take over the {FF9900}%s!",PlayerInfo[playerid][Name],CountryChatColor[TWPlayerInfo[playerid][Country]],caCountryNames[TWPlayerInfo[playerid][Country]],ClassNames[TWPlayerInfo[playerid][Class]],TWZoneInfo[id][zName]);
				    	SendMessageToMode(TW,white,str);
						format(str, sizeof(str), "[WAR NEWS] %s, %s %s failed to take over the %s!",PlayerInfo[playerid][Name],caCountryNames[TWPlayerInfo[playerid][Country]],ClassNames[TWPlayerInfo[playerid][Class]],TWZoneInfo[id][zName]);
						db_SaveChat(-1, TW,str);
					}
					DisablePlayerCheckpoint(playerid);
					PlayerInfo[playerid][lCountDown]=-1;
					return 1;
				}
			}
		}
	}
	if(PlayerInfo[playerid][PlayerMode]==TW && GetPlayerVirtualWorld(playerid)==W_TW)
    {
	    if(TWPlayerInfo[playerid][Class] != LEADER && TWPlayerInfo[playerid][Class] != VICE && TWPlayerInfo[playerid][Class] != BODYGUARD && PlayerInfo[playerid][Spawned] == 1)
		{
		    forLoop(id, MAX_TW_TOWERS)
		    {
	         	if(TWAATower[id][Exists] == 1)
		        {
		            if(PlayerInfo[playerid][pTeam] == TWAATower[id][Team] && TWAATower[id][AreaID] == areaid)
		            {
	                    if(TWPlayerInfo[playerid][OnTower] == 1)
						{
							RemovePlayerWeapon(playerid, WEAPON_MINIGUN);
					 		TWPlayerInfo[playerid][OnTower] = 0;
							return 1;
						}
		            }
		        }
		    }
		}
	}
	
	if(PlayerInfo[playerid][PlayerMode] == CO && PlayerInfo[playerid][ZoneDead] == 0 && COPlayerInfo[playerid][InJail] == 0 && PlayerInfo[playerid][Spawned] == 1 && !IsPlayerInAnyVehicle(playerid) && (GetPlayerVirtualWorld(playerid) == W_PRISON || GetPlayerVirtualWorld(playerid) == W_CO))
	{
	    if(areaid == COInfo[AreaID] && PlayerInfo[playerid][EnteredZone] == areaid)
	    {
	        PlayerInfo[playerid][EnteredZone] = -1;
	 		COInfo[BeingReleased]=0;
 			GameTextForPlayer(playerid," ",1000,6);
	 		new str[126];
        	format(str,126,"{33FF33}NEWS:{FFFFFF} %s failed to release the prisoners!",PlayerInfo[playerid][Name]);
        	SendMessageToMode(CO,white, str);
			format(str, sizeof(str), "[NEWS] %s failed to release the prisoners!",PlayerInfo[playerid][Name]);
			db_SaveChat(-1, CO,str);
			PlayerInfo[playerid][lCountDown]=-1;
			return 1;
	    }
	}
	if(PlayerInfo[playerid][PlayerMode] == TL && PlayerInfo[playerid][ZoneDead] == 0 && PlayerInfo[playerid][Spawned] == 1 && !IsPlayerInAnyVehicle(playerid) && GetPlayerVirtualWorld(playerid)==W_TL)
	{
	    if(areaid == TLInfo[AreaID] && PlayerInfo[playerid][EnteredZone] == areaid)
	    {
	        PlayerInfo[playerid][EnteredZone] = -1;
	 		TLInfo[BeingBombed]=0;
 			GameTextForPlayer(playerid," ",1000,6);
	 		new str[126];
	        format(str,126,"{33FF33}WAR NEWS:{FFFFFF} %s failed to bomb the base!",PlayerInfo[playerid][Name]);
        	SendMessageToMode(TL,white,str);
		  	format(str, sizeof(str), "[WAR NEWS] %s failed to bomb the base!",PlayerInfo[playerid][Name]);
			db_SaveChat(-1, TL,str);
			PlayerInfo[playerid][lCountDown]=-1;
			return 1;
	    }
	}
	if(PlayerInfo[playerid][PlayerMode]== TL && GetPlayerVirtualWorld(playerid)== W_TL)
    {
        forLoop(id, MAX_TL_TOWERS)
	    {
	        if(TLAATower[id][Exists] == 1)
	        {
	            if(PlayerInfo[playerid][pTeam] == TLAATower[id][Team] && TLAATower[id][AreaID] == areaid)
	            {
                    if(TLPlayerInfo[playerid][OnTower] == 1)
					{
						RemovePlayerWeapon(playerid, WEAPON_MINIGUN);
				 		TLPlayerInfo[playerid][OnTower] = 0;
				 		return 1;
					}
	            }
	        }
	    }
	}
	return 1;
}

public OnPlayerEnterDynamicArea(playerid, areaid)
{
    if(PlayerInfo[playerid][PlayerMode] == FFA)
    {
		PlayerInfo[playerid][DynamicArea] = areaid;
		FFACheckGangZoneCount(playerid, true);
	}
	if(CheckCTFFlagStates(playerid, areaid))return 1;
	//if(VWEnterSpawnArea(playerid, areaid))return 1;
    if(PlayerInfo[playerid][PlayerMode] == TW && PlayerInfo[playerid][ZoneDead] == 0 && TWPlayerInfo[playerid][Class] != LEADER && TWPlayerInfo[playerid][Class] != VICE && TWPlayerInfo[playerid][Class] != BODYGUARD && TWPlayerInfo[playerid][Class] != SPY && PlayerInfo[playerid][Spawned] == 1 && !IsPlayerInAnyVehicle(playerid) && GetPlayerVirtualWorld(playerid)==W_TW)
	{
	    forLoop(id, MAX_TW_ZONES)
		{
		    if(TWZoneInfo[id][Exists] == 1)
		    {
		        if(TWZoneInfo[id][AreaID] == areaid)
			    {
	                if(PlayerInfo[playerid][pTeam] == TWZoneInfo[id][Team])
			    	{
		      			GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~r~Guard this area", 2000, 3);
					}
					else if(TWZoneInfo[id][BeingCaptured]==0)
					{
					    new Float:x,Float:y,Float:z;
						GetPlayerPos(playerid,x,y,z);
						new str[286];
					    SetPlayerCheckpoint(playerid, x,y,z, 3.0);
						PlayerInfo[playerid][EnteredZone] = areaid;
						TWZoneInfo[id][BeingCaptured]=1;
						GangZoneFlashFor(TW,TWZoneInfo[id][gZone],0x000000AA);

						if(TWZoneInfo[id][OriginalTeam] == PlayerInfo[playerid][pTeam])
						{
	                    	format(str, sizeof(str), "[WAR NEWS] The %s is being released by %s, %s %s!",TWZoneInfo[id][zName],PlayerInfo[playerid][Name],caCountryNames[TWPlayerInfo[playerid][Country]],ClassNames[TWPlayerInfo[playerid][Class]]);
							db_SaveChat(-1, TW,str);
					    	format(str,sizeof(str),"{33FF33}WAR NEWS:{FFFFFF} The {FF9900}%s{FFFFFF} is being released by {FF9900}%s,{%s} %s %s!",TWZoneInfo[id][zName],PlayerInfo[playerid][Name],CountryChatColor[TWPlayerInfo[playerid][Country]],caCountryNames[TWPlayerInfo[playerid][Country]],ClassNames[TWPlayerInfo[playerid][Class]]);
						}
						else if(TWZoneInfo[id][OriginalTeam] != PlayerInfo[playerid][pTeam])
						{
							format(str, sizeof(str), "[WAR NEWS] The %s is being taken over by %s, %s %s!",TWZoneInfo[id][zName],PlayerInfo[playerid][Name],caCountryNames[TWPlayerInfo[playerid][Country]],ClassNames[TWPlayerInfo[playerid][Class]]);
							db_SaveChat(-1, TW,str);
					    	format(str,sizeof(str),"{33FF33}WAR NEWS:{FFFFFF} The {FF9900}%s{FFFFFF} is being taken over by {FF9900}%s,{%s} %s %s!",TWZoneInfo[id][zName],PlayerInfo[playerid][Name],CountryChatColor[TWPlayerInfo[playerid][Country]],caCountryNames[TWPlayerInfo[playerid][Country]],ClassNames[TWPlayerInfo[playerid][Class]]);
						}
						SendMessageToMode(TW,white,str);
						PlayerInfo[playerid][lCountDown]=26;
						countdowntotakeland(playerid);
					}
					return 1;
			    }
		    }
		}
 	}
 	if(PlayerInfo[playerid][PlayerMode]==TW && GetPlayerVirtualWorld(playerid)==W_TW)
    {
	    if(TWPlayerInfo[playerid][Class] != LEADER && TWPlayerInfo[playerid][Class] != VICE && TWPlayerInfo[playerid][Class] != BODYGUARD && PlayerInfo[playerid][Spawned] == 1)
		{
		    forLoop(id, MAX_TW_TOWERS)
		    {
	         	if(TWAATower[id][Exists] == 1)
		        {
		            if(PlayerInfo[playerid][pTeam] == TWAATower[id][Team] && TWAATower[id][AreaID] == areaid)
		            {
	                    if(TWPlayerInfo[playerid][OnTower] == 0)
						{
							if(TWPlayerInfo[playerid][EnteredTower]==0)
							{
								TWPlayerInfo[playerid][OnTower] = 1;
								TWPlayerInfo[playerid][EnteredTower] = 100;
								GiveWeapon(playerid,WEAPON_MINIGUN,400);
							}
							else GameTextForPlayer(playerid, "~w~~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ Wait less than 2 minutes",999, 3);
							return 1;
						}
		            }
		        }
		    }
		}
	}
 	
	if(PlayerInfo[playerid][PlayerMode] == CO && PlayerInfo[playerid][ZoneDead] == 0 && COPlayerInfo[playerid][InJail] == 0 && PlayerInfo[playerid][Spawned] == 1 && !IsPlayerInAnyVehicle(playerid) && (GetPlayerVirtualWorld(playerid) == W_PRISON || GetPlayerVirtualWorld(playerid) == W_CO))
	{
	    if(areaid == COInfo[AreaID])
	    {
	        if(PlayerInfo[playerid][pTeam] == COP)
	    	{
	    	    if(ServerInfo[COBigPrison] == 1)
      				GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~~w~USE ~g~/pgates ~w~to control gates", 2000, 3);
				else
				    GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~~r~Don't camp here", 2000, 3);
			}
			if(CriminalOutJailCountCO(1) > 0 && PlayerInfo[playerid][pTeam] != COP && COInfo[BeingReleased] == 0 && ((ServerInfo[COBigPrison] == 1 && COInfo[AllGateState] == 0) || ServerInfo[COBigPrison] == 0))
			{
			    new str[126];
				COInfo[BeingReleased] = 1;
				PlayerInfo[playerid][EnteredZone] = areaid;
				format(str,126,"{33FF33}NEWS:{FFFFFF} %s is releasing the prisoners!",PlayerInfo[playerid][Name]);
    			SendMessageToMode(CO,white, str);
				format(str, sizeof(str), "[NEWS] %s is releasing the prisoners!",PlayerInfo[playerid][Name]);
				db_SaveChat(-1, CO,str);
				PlayerInfo[playerid][lCountDown]=11;
				countdowntotakeland(playerid);
			}
			return 1;
	    }
	}
	if(PlayerInfo[playerid][PlayerMode] == TL && PlayerInfo[playerid][ZoneDead] == 0 && PlayerInfo[playerid][Spawned] == 1 && !IsPlayerInAnyVehicle(playerid) && GetPlayerVirtualWorld(playerid)==W_TL)
	{
	    if(areaid == TLInfo[AreaID])
	    {
	        if((PlayerInfo[playerid][pTeam] == AXIS && (TLInfo[Map] == DDAY || TLInfo[Map] == AIRBORNE)) ||
				(PlayerInfo[playerid][pTeam] == ALLIES && TLInfo[Map] == RAMELLE))
	    	{
      			GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~r~Guard this area", 2000, 3);
			}
			else if(TLInfo[BeingBombed] == 0)
			{
			    new str[126];
				PlayerInfo[playerid][EnteredZone] = areaid;
				TLInfo[BeingBombed]=1;
				format(str,126,"{33FF33}WAR NEWS:{FFFFFF} %s is bombing the base!",PlayerInfo[playerid][Name]);
    			SendMessageToMode(TL,white,str);
			  	format(str, sizeof(str), "[WAR NEWS] %s is bombing the base!",PlayerInfo[playerid][Name]);
				db_SaveChat(-1, TL,str);
				PlayerInfo[playerid][lCountDown]=11;
				countdowntotakeland(playerid);
			}
			return 1;
	    }
	}
	if(PlayerInfo[playerid][PlayerMode]== TL && GetPlayerVirtualWorld(playerid)== W_TL)
    {
        forLoop(id, MAX_TL_TOWERS)
	    {
	        if(TLAATower[id][Exists] == 1)
	        {
	            if(PlayerInfo[playerid][pTeam] == TLAATower[id][Team] && TLAATower[id][AreaID] == areaid)
	            {
                    if(TLPlayerInfo[playerid][OnTower] == 0)
					{
						TLPlayerInfo[playerid][OnTower] = 1;
						GiveWeapon(playerid,WEAPON_MINIGUN,400);
						return 1;
					}
	            }
	        }
	    }
	}
	return 1;
}


stock IsPlayerInBombZone(playerid,Float:min_x,Float:min_y,Float:max_x,Float:max_y)
{
	//printf("DEBUG CFONTROL IsPlayerInBombZone");
    new Float:X,Float:Y,Float:Z;
    GetPlayerPos(playerid, X, Y, Z);
    if((X <= max_x && X >= min_x) && (Y <= max_y && Y >= min_y)) return 1;

    return 0;
}
stock CheckpointOnShipForPlayer(i,team)
{
	//printf("DEBUG CFONTROL CheckpointOnShipForPlayer 1");
    new Float:x1, Float:y1, Float:z1;

    forLoop(id, MAX_SHIPS)
	{
	    if(ShipInfo[id][Exists] && ShipInfo[id][Type] == 0 && ShipInfo[id][Team] == team && ShipInfo[id][sHP] > 0 && ShipInfo[id][Mode] == TL)
	    {
	        x1=ShipInfo[id][sX],y1=ShipInfo[id][sY], z1=ShipInfo[id][sZ];
	        break;
	    }

	}
	SetPlayerCheckpoint(i, x1, y1, z1-5, 3.0);
	//printf("DEBUG CFONTROL CheckpointOnShipForPlayer 2");
}
stock CheckpointOnShip(team)
{
	//printf("DEBUG CFONTROL CheckpointOnShip 1");
    new Float:x1, Float:y1, Float:z1;

    forLoop(id, MAX_SHIPS)
	{
	    if(ShipInfo[id][Exists] && ShipInfo[id][Type] == 0 && ShipInfo[id][Team] != team && ShipInfo[id][sHP] > 0 && ShipInfo[id][Mode] == TL)
	    {
	        x1=ShipInfo[id][sX],y1=ShipInfo[id][sY], z1=ShipInfo[id][sZ];
	        break;
	    }

	}
	forLoop(i, MAX_PLAYERS)
	{
		if(!IsPlayerConnected(i) || IsPlayerNPC(i))continue;
		if(PlayerInfo[i][PlayerMode] == TL && PlayerInfo[i][Spawned] == 1 && GetPlayerVirtualWorld(i)==W_TL && PlayerInfo[i][pTeam] == team)
		{
            SetPlayerCheckpoint(i, x1, y1, z1-5, 3.0);
		}
	}
	//printf("DEBUG CFONTROL CheckpointOnShip 2");
}


// -----------------------------------------------------------------------------

//useful stuff

stock Float:floatrandom(Float:max) {
		new Float:trand;
		max = max * 100000;
		trand = floatdiv(float(random(floatround(max))), 100000.0);
		return trand;
}

stock Float:GetPlayerDistanceToPoint(playerid, Float:x, Float:y, Float:z) {
		new Float:px;
		new Float:py;
		new Float:pz;
		GetPlayerPos(playerid, px, py, pz);
		return floatsqroot( floatadd( floatadd( floatpower(floatsub(x, px), 2), floatpower(floatsub(y, py), 2) ), floatpower(floatsub(z, pz), 2) ) );
}
stock GetPointZPos(Float: point_X, Float: point_Y, &Float: point_Z)
{
	MapAndreas_FindZ_For2DCoord(point_X, point_Y, point_Z);
	/*if(!(-3000.0 < point_X < 3000.0 || -3000.0 < point_Y < 3000.0))
		return 0;

	static
		File: z_Map_File
	;
	if(!z_Map_File)
	{
		z_Map_File = fopen("SAfull.hmap", io_read);

		if(!z_Map_File)
			return 0;
	}
	new z_Data[2 char];
	fseek(z_Map_File, (-6000 * (floatround(point_Y, point_Y <= 0.0 ? floatround_ceil : floatround_floor) - 3000) + floatround(point_X, point_X <= 0.0 ? floatround_ceil : floatround_floor) + 3000) * 2);
	fblockread(z_Map_File, z_Data, 2 char);

	point_Z = (z_Data[1 / 2] & 0x0000FFFF) * 0.01;*/
	return 1;
}
forward Float:GetGroundZ(Float:x, Float:y);
public Float:GetGroundZ(Float:x, Float:y) {
		new Float:gz;
		GetPointZPos(x, y, gz);
		return gz;
}

stock GetVehicleStatID(modelid) {
    //printf("DEBUG CFONTROL GetVehicleStatID");
	forLoop(i, sizeof gVehicleBombs)
	{
	    if(gVehicleBombs[i][0] == modelid) {
	        return i;
		}
	}
	return -1;
}

// -----------------------------------------------------------------------------
forward DropBomb(playerid);
public DropBomb(playerid) {
	if(PlayerInfo[playerid][bptype] < 0)return 0;
	if(PlayerInfo[playerid][bombsleft][PlayerInfo[playerid][bptype]] > 0)
	{
		if(PlayerInfo[playerid][bptype] != 0) {
			if(PlayerInfo[playerid][bfree][PlayerInfo[playerid][bptype]] == 0) {
				if(PlayerInfo[playerid][bombcount] < MAX_BOMBS) {
					//printf("DEBUG CFONTROL DropBomb 1");
					PlayerInfo[playerid][bfree][PlayerInfo[playerid][bptype]] = 1;
			        PlayerInfo[playerid][bombcount] ++;
			        PlayerInfo[playerid][bombsleft][PlayerInfo[playerid][bptype]] --;
			        if(PlayerInfo[playerid][PlayerMode] == TW)TWPlayerInfo[playerid][TWBombsLeft][PlayerInfo[playerid][bptype]] --;
			        new str[64];
			        format(str,64,"%s~n~%d",gBombTypes[PlayerInfo[playerid][bptype]],PlayerInfo[playerid][bombsleft][PlayerInfo[playerid][bptype]]);
					PlayerTextDrawHide(playerid,PlayerInfo[playerid][BombTXT]);
					PlayerTextDrawSetString(playerid, PlayerInfo[playerid][BombTXT], str);
					PlayerTextDrawShow(playerid,PlayerInfo[playerid][BombTXT]);

					new Float:x;
					new Float:y;
					new Float:z;
					new sel;
    				forLoop(i, MAX_BOMBS)
					{
					    if(PlayerInfo[playerid][bombid][i] <= 0) {
					        sel = i;
					        PlayerInfo[playerid][bombid][i] = 1;
					        break;
						}
					}
					PlayerInfo[playerid][btype][sel] = PlayerInfo[playerid][bptype];
					GetVehiclePos(GetPlayerVehicleID(playerid), x, y, z);
					new Float:tolerancex = floatsub( floatrandom( floatdiv(z, gBombID[PlayerInfo[playerid][btype][sel]][2]) ), floatdiv(floatdiv(z, gBombID[PlayerInfo[playerid][btype][sel]][2]), 2.0));
					new Float:tolerancey = floatsub( floatrandom( floatdiv(z, gBombID[PlayerInfo[playerid][btype][sel]][2]) ), floatdiv(floatdiv(z, gBombID[PlayerInfo[playerid][btype][sel]][2]), 2.0));
					PlayerInfo[playerid][targetz][sel] = GetGroundZ(x + tolerancex, y + tolerancey);
					PlayerInfo[playerid][bombid][sel] = CreateTheDynamicObject(floatround(gBombID[PlayerInfo[playerid][btype][sel]][3]), x, y, z - 1.5, gBombID[PlayerInfo[playerid][btype][sel]][4], gBombID[PlayerInfo[playerid][btype][sel]][9], 0,GetPlayerVirtualWorld(playerid));
					MoveDynamicObject(PlayerInfo[playerid][bombid][sel], x + tolerancex, y + tolerancey, PlayerInfo[playerid][targetz][sel] - 1, gBombSpeed);
			        PlayerInfo[playerid][bombarmed][sel] = 0;
			        PlayerInfo[playerid][bombtime][sel] = SetTimerEx("BombTimer", 100, 1, "ii", playerid, sel);
					SetTimerEx("ReactivateBomb", floatround(gBombID[PlayerInfo[playerid][bptype]][6]), 0, "ii", playerid, PlayerInfo[playerid][bptype]);
					if(PlayerInfo[playerid][bptype] == 4)
					{
						AtomBombPlace(playerid);
	                    RefoundAtomicBomber(playerid);
					}
					//printf("DEBUG CFONTROL DropBomb 2");
				} else {
				    return GameTextForPlayer(playerid, "~n~ ~n~ ~n~ ~n~ ~n~ ~w~Bomb reloading...", 999, 3);
				}
            } else {
            	return GameTextForPlayer(playerid, "~n~ ~n~ ~n~ ~n~ ~n~ ~w~Bomb reloading...", 999, 3);
			}
        }
	}
 	return 1;
}

stock IsPlayerInArea(playerid,Float:min_x,Float:min_y,Float:max_x,Float:max_y)
{
	//printf("DEBUG CFONTROL IsPlayerInArea");
    new Float:X,Float:Y,Float:Z;
    GetPlayerPos(playerid, X, Y, Z);
    if((X <= max_x && X >= min_x) && (Y <= max_y && Y >= min_y)) return 1;

    return 0;
}

stock AtomBombPlace(playerid)
{
	//printf("DEBUG CFONTROL AtomBombPlace 1");
	new str1[126];
    TWPlayerInfo[playerid][AtomicBought] = 900;
 	format(str1,128,"WAR NEWS: {FFFFFF}Pilot %s has just dropped an atomic bomb.",PlayerInfo[playerid][Name]);
 	SendMessageToMode(TW,red1, str1);
	format(str1, sizeof(str1), "[WAR NEWS] Pilot %s has just dropped an atomic bomb.",PlayerInfo[playerid][Name]);
	db_SaveChat(-1, TW,str1);
	//printf("DEBUG CFONTROL AtomBombPlace 2");
}
forward BombTimer(playerid, num);
public BombTimer(playerid, num)
{
	//printf("DEBUG CFONTROL BombTimer 1");
    new Float:x;
	new Float:y;
	new Float:z;
	GetDynamicObjectPos(PlayerInfo[playerid][bombid][num], x, y, z);
	if(PlayerInfo[playerid][bombarmed][num]) {
	}
	if((floatsub(z, PlayerInfo[playerid][targetz][num] - 1) < 0.5) && !PlayerInfo[playerid][bombarmed][num]) {  //bomb reached ground
		if(gBombID[PlayerInfo[playerid][btype][num]][5] > 0.0)
		{
		    SetTimerEx("DetonateTheBomb", floatround(gBombID[PlayerInfo[playerid][btype][num]][5]), 0, "ii", playerid, num);
			PlayerInfo[playerid][bombarmed][num] = 1;
		} else {
		    DetonateTheBomb(playerid, num);
		}
	}
	//printf("DEBUG CFONTROL BombTimer 2");
}

forward DetonateTheBomb(playerid, num);
public DetonateTheBomb(playerid, num)
{
	//printf("DEBUG CFONTROL DetonateTheBomb 1");
    new Float:x;
	new Float:y;
	new Float:z;
	GetDynamicObjectPos(PlayerInfo[playerid][bombid][num], x, y, z);
	KillTimer(PlayerInfo[playerid][bombtime][num]);
	if(floatround(gBombID[PlayerInfo[playerid][btype][num]][0]) > -1.0) {
		CreateExplosionEx(GetPlayerVirtualWorld(playerid), x,y,z+2, 20, 50, 60, true,playerid);
		//if(GetPlayerMode(playerid) == TW)ExplodeGroundMinesFromPlaneBomb(x,y,z, 5);
	} else {
		CreateSpecialExplosion(num, playerid);
	}
	if(PlayerInfo[playerid][bptype] < 5)
		ShipStatusFromBomb(playerid,num,x,y,z);
	DestroyTheDynamicObject(PlayerInfo[playerid][bombid][num]);
    PlayerInfo[playerid][bombid][num] = -1;
	PlayerInfo[playerid][bombcount] --;
	//printf("DEBUG CFONTROL DetonateTheBomb 2");
}

forward CallForAttack(id);
public CallForAttack(id)
{
	ShipInfo[id][CallForIt] = 1;
}
forward CallForRepair(id);
public CallForRepair(id)
{
	ShipInfo[id][RepairTime] = 1;
}
stock ExplosionOFBombForSub(id,playerid,Float:x,Float:y,Float:z)
{
    //printf("DEBUG CFONTROL ExplosionOFBombForSub 1");
	new world = W_TW;
    if(ShipInfo[id][Mode] == TL)world = W_TL;
	CreateExplosionEx(world, x,y,z, 20, 50, 60, true,playerid);
    //printf("DEBUG CFONTROL ExplosionOFBombForSub 2");
}
stock ExplosionOFBomb(id,playerid,Float:x,Float:y,Float:z)
{
    //printf("DEBUG CFONTROL ExplosionOFBomb 1");
	new world = W_TW;
    if(ShipInfo[id][Mode] == TL)world = W_TL;
	CreateExplosionEx(world, x,y,z+14, 20, 40, 60, true,playerid);
    CreateExplosionEx(world, x,y,z+5, 20, 40, 60, true,playerid);
    CreateExplosionEx(world, x,y,z+9, 20, 40, 60, true,playerid);
    CreateExplosionEx(world, x,y,z+12, 20, 40, 60, true,playerid);
    CreateExplosionEx(world, x,y,z, 20, 40,  60, true,playerid);
    //printf("DEBUG CFONTROL ExplosionOFBomb 2");
}
forward ResetSupplies(playerid, id);
public ResetSupplies(playerid, id)
{
    //printf("DEBUG CFONTROL ResetSupplies 1");
	if(Supplies[id][Exists] == 1)
	{
	    Supplies[id][Exists] = 0;
		DestroyTheDynamicPickup(Supplies[id][gHP]);
		DestroyTheDynamicPickup(Supplies[id][gArmor]);
	    DestroyTheDynamicPickup(Supplies[id][Ak]);
		DestroyTheDynamicPickup(Supplies[id][Sniper]);
		DestroyTheDynamicPickup(Supplies[id][Deagle]);
		DestroyTheDynamicPickup(Supplies[id][Grenade]);
		DestroyTheDynamicPickup(Supplies[id][Shotgun]);
		if(PlayerInfo[playerid][supplyid]>0)PlayerInfo[playerid][supplyid]--;
	}
    //printf("DEBUG CFONTROL ResetSupplies 2");
}
stock CreateSupplies(id, mode, Float:x, Float:y)
{
    //printf("DEBUG CFONTROL CreateSupplies 1");
	new world=W_TW;
	if(mode == TL)world=W_TL;
    Supplies[id][Exists] = 1;
    Supplies[id][gMode] = mode;
	Supplies[id][gArmor]=CreateDynamicPickup(1242, 2, x+random(3),y+random(3),GetGroundZ(Float:x, Float:y)+1, world);
	Supplies[id][gHP]=CreateDynamicPickup(1240, 2, x+random(2),y+random(4),GetGroundZ(Float:x, Float:y)+1, world);
	Supplies[id][Grenade]=CreateDynamicPickup(342, 2, x+random(3),y+random(2),GetGroundZ(Float:x, Float:y)+1, world);
	Supplies[id][Deagle]=CreateDynamicPickup(348, 2, x+random(2),y+random(3),GetGroundZ(Float:x, Float:y)+1, world);
	Supplies[id][Shotgun]=CreateDynamicPickup(349, 2, x+random(3),y+random(4),GetGroundZ(Float:x, Float:y)+1, world);
	Supplies[id][Ak]=CreateDynamicPickup(355, 2, x+random(2),y+random(3),GetGroundZ(Float:x, Float:y)+1, world);
	Supplies[id][Sniper]=CreateDynamicPickup(358, 2, x+random(4),y+random(3),GetGroundZ(Float:x, Float:y)+1, world);
    //printf("DEBUG CFONTROL CreateSupplies 2");
}
stock CreateSpecialExplosion(num, playerid)
{              //Every explosion wit explosion ID -1 is created here
    //printf("DEBUG CFONTROL CreateSpecialExplosion 1");
    new Float:x;                                        //You may add a check for your own bombs like the one already existing
	new Float:y;
	new Float:z;
	GetDynamicObjectPos(PlayerInfo[playerid][bombid][num], x, y, z);
	if(PlayerInfo[playerid][btype][num] == 3)
	{
	    CreateExplosionEx(GetPlayerVirtualWorld(playerid), x,y,z, 20, 50, 60, true,playerid);
		CreateExplosionEx(GetPlayerVirtualWorld(playerid), x,y,z+ 5.0, 20, 50, 60, true,playerid);
		CreateExplosionEx(GetPlayerVirtualWorld(playerid), x,y,z+ 9.0, 20, 50, 60, true,playerid);
		CreateExplosionEx(GetPlayerVirtualWorld(playerid), x,y,z+ 12.0, 20, 50, 60, true,playerid);
		CreateExplosionEx(GetPlayerVirtualWorld(playerid), x+ 4.0,y,z, 20, 50, 60, true,playerid);
		CreateExplosionEx(GetPlayerVirtualWorld(playerid), x- 5.0,y,z, 20, 50, 60, true,playerid);
		CreateExplosionEx(GetPlayerVirtualWorld(playerid), x,y+ 4.0,z, 20, 50, 60, true,playerid);
		CreateExplosionEx(GetPlayerVirtualWorld(playerid), x,y- 5.0,z, 20, 50, 60, true,playerid);
		CreateExplosionEx(GetPlayerVirtualWorld(playerid), x,y- 5.0,z, 20, 50, 60, true,playerid);
		//if(GetPlayerMode(playerid) == TW)ExplodeGroundMinesFromPlaneBomb(x,y,z, 10);
	}
	if(PlayerInfo[playerid][btype][num] == 4)
	{
		NuclearBomb[playerid][ax] = x;
		NuclearBomb[playerid][ay] = y;
		NuclearBomb[playerid][az] = z;
		NuclearBomb[playerid][area] = 0;
		SetTimerEx("Shockwave", 500, 0, "i", playerid);
		//if(GetPlayerMode(playerid) == TW)ExplodeGroundMinesFromPlaneBomb(x,y,z, 200);
	}

	if(PlayerInfo[playerid][btype][num] == 5 && PlayerInfo[playerid][supplyid] < 3)
	{
	    new id = -1;
  		forLoop(i, MAX_SUPPLIES)
  		{
  		    if(Supplies[i][Exists] == 0)
		  	{
		  	    id = i;
			  	break;
			}
  		}
  		if(id != -1)
  		{
	    	PlayerInfo[playerid][supplyid]++;
	  		CreateSupplies(id, PlayerInfo[playerid][PlayerMode], x, y);
	  		SetTimerEx("ResetSupplies", 2*60*1000, 0, "ii", playerid, id);
  		}
  		else
  		{
  		    id=0;
  		    forLoop(i, MAX_SUPPLIES)
	  		{
	  		    if(Supplies[i][Exists] == 1)
			  	{
			  	    id++;
				}
	  		}
  		    printf("ERROR: SUPPLIES: PLAYER: %s has %d Supplies - MAX NUMBER OF SUPPLIES REACHED (%d)",PlayerInfo[playerid][Name], PlayerInfo[playerid][supplyid], id);
  		    SendClientMessage(playerid, red1, "{FF0000}Error:{FFFFFF} Supplies have not been deployed. Report bug on forums(/info).");
  		}
	}
	if(PlayerInfo[playerid][btype][num] == 6)//gas bomb
	{
		GasBomb[playerid][ax] = x;
		GasBomb[playerid][ay] = y;
		GasBomb[playerid][az] = z;
		GasBomb[playerid][area] = 0;
		GasBomb[playerid][Object]=CreateTheDynamicObject(18732, x, y, z - 1.5, 0.0, 0.0, 0.0,W_TW);
		forLoop(sz, MAX_PLAYERS)
		{
		    if(IsPlayerConnected(sz) && GetPlayerVirtualWorld(sz) == W_TW)
		    {
				TWPlayerInfo[sz][GasBombMSG] = 0;
		    }
		}
		SetTimerEx("GasLowerHealth", 1000, 0, "i", playerid);
	}
	//printf("DEBUG CFONTROL CreateSpecialExplosion 2");
}

forward GasLowerHealth(playerid);
public GasLowerHealth(playerid)
{
	GasBomb[playerid][area]+= 1;
	if(GasBomb[playerid][area] < 25)
	{
		forLoop(sz, MAX_PLAYERS)
		{
		    if(IsPlayerConnected(sz) && GetPlayerVirtualWorld(sz) == W_TW && !TWPlayerInfo[sz][GasMaskOn] && IsPlayerInRangeOfPoint(sz, 30,GasBomb[playerid][ax], GasBomb[playerid][ay], GasBomb[playerid][az]))
		    {
		        if(GetThePlayerHealth(sz)>0)
		        {
					SetHealth(sz,GetThePlayerHealth(sz)-2);
			        if(TWPlayerInfo[sz][GasBombMSG] == 0)
					{
				        TWPlayerInfo[sz][GasBombMSG]=1;
				        SetTimerEx("GasBombMSGOff", 26000, 0, "i", sz);
				        
				        SetPVarInt(sz, "ExpDamager", playerid+1);
					    SetPVarInt(sz, "ExpReason", 56);
					    ResetCustomDeathTimer(sz, 26000);
						SendClientMessage(playerid,red1,"Notice: {FFFFFF}You are walking into poisonous gas, run away!");
						//printf("DEBUG CFONTROL GasLowerHealth");
					}
				}
		    }
		}
		SetTimerEx("GasLowerHealth", 1000, 0, "i", playerid);
		return 0;
	}
	else if(GasBomb[playerid][area] >= 25)
	{
		GasBomb[playerid][area] = 0;
		DestroyTheDynamicObject(GasBomb[playerid][Object]);
	}
	return 0;
}

forward Shockwave(playerid);
public Shockwave(playerid)
{
	NuclearBomb[playerid][area]+= 100;
	if(NuclearBomb[playerid][area] < 800)
	{
		forLoop(sz, MAX_PLAYERS)
		{
		    if(IsPlayerConnected(sz) && GetPlayerVirtualWorld(sz) == W_TW && IsPlayerInRangeOfPoint(sz, NuclearBomb[playerid][area],NuclearBomb[playerid][ax], NuclearBomb[playerid][ay], NuclearBomb[playerid][az]))
		    {
		        SetPlayerWeather(sz, 19);
		        if(GetPlayerState(sz) == 2)
				{
					SetVehicleHealth(GetPlayerVehicleID(sz), 249.0);
					SetHealth(sz,10);
				}
				else if(GetPlayerState(sz) == 1)
					SetHealth(sz,3);
		        if(TWPlayerInfo[sz][AtomSoundPlayed] == 0)
				{
		    		ClearAnimations(sz);
    				Sync(sz);
					TWPlayerInfo[sz][AtomSoundPlayed]=1;
					SetPVarInt(sz, "ExpDamager", playerid+1);
				    SetPVarInt(sz, "ExpReason", 58);
				    ResetCustomDeathTimer(sz, 9000);
					SetTimerEx("SetPlayerTheWeather",5000,0,"d",sz);
					SendClientMessage(sz,red1,"Notice: {FFFFFF}You were too close to the atomic bomb. The radiation has damaged you.");
					//printf("DEBUG CFONTROL Shockwave");
				}
				PushPlayerEx(sz, NuclearBomb[playerid][ax],NuclearBomb[playerid][ay],NuclearBomb[playerid][az]);
		    }
		}
		SetTimerEx("Shockwave", 500, 0, "i", playerid);
		return 0;
	}
	else if(NuclearBomb[playerid][area] >= 800)
	    NuclearBomb[playerid][area] = 0;
	return 0;
}


forward ReactivateBomb(playerid, bombnum);
public ReactivateBomb(playerid, bombnum) {
		PlayerInfo[playerid][bfree][bombnum] = 0;
}
forward IsPlayerAllowedToDropBomb(playerid);
public IsPlayerAllowedToDropBomb(playerid) {
	// This is used to restrict the use of bombs for single players
	// For example to make them available for special teams only, ...
	// PlayerInfo[playerid][bptype] is the index of the selected bomb
	if(PlayerInfo[playerid][bptype] == 5 && PlayerInfo[playerid][supplyid] >= 3)
		return 0;
	return 1;
}
stock DeleteExtension(text[])
{
	new pos;
	new string[90];
	format(string,sizeof string, "%s",text);
	forLoopR(i,strlen(string),-1)
	{
	    if (string[i] == '.')
	    {
	        pos=i;
        	break;
	    }
	}
	strdel(string, pos, strlen(string));
	return string;
}

stock CheckIP(string[])
{
    if(strlen(string) < 6) return false;
	new nums, dots;
    for (new i = 0; i < strlen(string); i++)
	{
        if (string[i] == '.')
        {
            dots++;
        }
        if (string[i] <= '9' && string[i] >= '0')
        {
            nums++;
        }
	}
	if(nums >= 6 && dots >= 3)return true;
	return false;
}

stock SendGlobalMSG(playerid,msg[])
{
    if(ServerInfo[GlobalChat] == 0)
	{
	    new string[250];
		forLoop(i, MAX_MODES)
		{
		    if(i != GetPlayerMode(playerid) && i != TRP)
		    {
			    format(string,sizeof(string),"{33AA33}[%s] {FFFFFF}%s{67F6F6}[%d]:{FFFFFF} %s",PlayerModeNamesABV[PlayerInfo[playerid][PlayerMode]],PlayerInfo[playerid][Name],playerid,msg);
				SendMessageToMode(i,lightblue,string);
			}
		}
	}
}

stock TextLenCheck(text[], length)
{
    return (strlen(strreplace(" ","",text))>=length);
}

stock returnTextLen(text[])
{
    return (strlen(strreplace(" ","",text)));
}
stock AdvertCheck(string[])
{
	if(string[0])
	{
	    if(!strfind(string,"www.",false) || !strfind(string,"http://",false) || !strfind(string,".com",false) || !strfind(string,".net",false)
			|| !strfind(string,".de",false) || !strfind(string,".org",false) || !strfind(string,".fr",false) )
		    return true;
	}
	return false;
}

stock IPRange(ip[])
{
	new pos, oldpos, ip2[15];

	pos = strfind(ip, ".", true);
	pos++;

	forLoop(i, pos)
	{
		ip2[i] = ip[pos-pos+i];
	}

	pos--;

	ip[pos] = ' ';

	oldpos = pos;
	oldpos++;

	pos = strfind(ip, ".", true);
	pos++;

	forLoopV(i, oldpos, pos)
	{
		ip2[i] = ip[pos-pos+i];
	}

	format(ip2, sizeof(ip2), "%s", ip2);
	return ip2;
}
stock RangeBan(playerid)
{
	new pos, oldpos, ip[15], ip2[15], tmp[21];

	GetPlayerIp(playerid, ip, sizeof(ip));

	pos = strfind(ip, ".", true);
	pos++;

    forLoop(i, pos)
	{
		ip2[i] = ip[pos-pos+i];
	}

	pos--;

	ip[pos] = ' ';

	oldpos = pos;
	oldpos++;

	pos = strfind(ip, ".", true);
	pos++;

    forLoopV(i, oldpos, pos)
	{
		ip2[i] = ip[pos-pos+i];
	}

	format(ip2, sizeof(ip2), "%s*.*", ip2);
	format(tmp, sizeof(tmp), "banip %s", ip2);

	SendRconCommand(tmp);
	return ip2;
}

stock drename(olddir[], newdir[])
{
    dir_create(newdir);
    new dir:handle=dir_open(olddir), fType, fname[120];
    new oldfile[256],newfile[256];
    new loop_breaker;
	while(dir_list(handle, fname, fType))
	{
	    //printf("loop at stock drename, counter val %d",loop_breaker);
		if(breakLoop(++loop_breaker, "stock drename"))break;
	    if(fType == 2)
		{
		    format(oldfile, sizeof oldfile, "%s/%s", olddir, fname);
		    format(newfile, sizeof newfile, "%s/%s", newdir, fname);
		    file_move(oldfile, newfile);
		}
	}
	dir_close(handle);
	dir_delete(olddir);
}

//==============================================================================

public GlobalUpdate()
{
	forLoop(i, MAX_PLAYERS)
	{
		if(IsPlayerConnected(i) && !IsPlayerNPC(i))
		{
	        if(AC_Warnings[i][TELEPORT_HACK])
	            AC_Warnings[i][TELEPORT_HACK]--;

			if(AC_Warnings[i][MAX_SPEED])
			    AC_Warnings[i][MAX_SPEED]--;

	        if(AC_Warnings[i][AIRBREAK])
			    AC_Warnings[i][AIRBREAK]--;

	        if(AC_Warnings[i][CAR_JACK])
			    AC_Warnings[i][CAR_JACK]--;

			if(AC_Warnings[i][CAR_JACK_HACK])
			    AC_Warnings[i][CAR_JACK_HACK]--;
		}
    }
	return 1;
}

// transforms a vector using a 4x4 matrix (translation and scaling is ignored, only 3x3 part is used, we only need rotation!)
stock MatrixTransformVector(Float:vector[3], Float:m[4][4], &Float:resx, &Float:resy, &Float:resz) {
	resz = vector[2] * m[0][0] + vector[1] * m[0][1] + vector[0] * m[0][2] + m[0][3];
	resy = vector[2] * m[1][0] + vector[1] * m[1][1] + vector[0] * m[1][2] + m[1][3];
	resx = -(vector[2] * m[2][0] + vector[1] * m[2][1] + vector[0] * m[2][2] + m[2][3]); // don't ask why -x was needed, i don't know either.
}

// something for 0.3b
stock RotatePointVehicleRotation(vehid, Float:Invector[3], &Float:resx, &Float:resy, &Float:resz, worldspace=0) {

	new Float:Quaternion[4];
	new Float:transformationmatrix[4][4];

	GetVehicleRotationQuat(vehid, Quaternion[0], Quaternion[1], Quaternion[2], Quaternion[3]);

	// build a transformation matrix out of the quaternion
	new Float:xx = Quaternion[0] * Quaternion[0];
	new Float:xy = Quaternion[0] * Quaternion[1];
	new Float:xz = Quaternion[0] * Quaternion[2];
	new Float:xw = Quaternion[0] * Quaternion[3];
	new Float:yy = Quaternion[1] * Quaternion[1];
	new Float:yz = Quaternion[1] * Quaternion[2];
	new Float:yw = Quaternion[1] * Quaternion[3];
	new Float:zz = Quaternion[2] * Quaternion[2];
	new Float:zw = Quaternion[2] * Quaternion[3];

	transformationmatrix[0][0] = 1 - 2 * ( yy + zz );
	transformationmatrix[0][1] =     2 * ( xy - zw );
	transformationmatrix[0][2] =     2 * ( xz + yw );
	transformationmatrix[0][3] = 0.0;

	transformationmatrix[1][0] =     2 * ( xy + zw );
	transformationmatrix[1][1] = 1 - 2 * ( xx + zz );
	transformationmatrix[1][2] =     2 * ( yz - xw );
	transformationmatrix[1][3] = 0.0;

	transformationmatrix[2][0] =     2 * ( xz - yw );
	transformationmatrix[2][1] =     2 * ( yz + xw );
	transformationmatrix[2][2] = 1 - 2 * ( xx + yy );
	transformationmatrix[2][3] = 0;

	transformationmatrix[3][0] = 0;
	transformationmatrix[3][1] = 0;
	transformationmatrix[3][2] = 0;
	transformationmatrix[3][3] = 1;

	// transform the point thru car's rotation
	MatrixTransformVector(Invector, transformationmatrix, resx, resy, resz);

	// if worldspace is set it'll return the coords in global space - useful to check tire coords against tire spike proximity directly, etc..

	if (worldspace == 1)
	{
		new Float:fX, Float:fY, Float:fZ;
		GetVehiclePos(vehid, fX, fY, fZ);
		resx += fX;
		resy += fY;
		resz += fZ;
	}
}

//this is used for the filterscripts to check if they are being loaded for this game mode
forward SecurityFunctionForFS();
public SecurityFunctionForFS()
{
	return true;
}

stock breakLoop(iteratior, name[])
{
    if(iteratior % 300 == 0 && iteratior > 300) printf("possible infinite loop at %s", name);
    if(iteratior >= 20000)
    {
        printf("breaking infine loop at %s",name);
        return true;
    }
    return false;
}

stock DestroyTheDynamicPickup(id)
{
    if(IsValidDynamicPickup(id))DestroyDynamicPickup(id);
}
stock DestroyTheDynamicObject(id)
{
    if(IsValidDynamicObject(id))DestroyDynamicObject(id);
}
stock DestroyTheDynamicMapIcon(id)
{
    if(IsValidDynamicMapIcon(id))DestroyDynamicMapIcon(id);
}
stock DestroyTheDynamic3DTextLabel(Text3D:id)
{
    if(IsValidDynamic3DTextLabel(id))DestroyDynamic3DTextLabel(id);
}
stock DestroyTheDynamicArea(id)
{
    if(IsValidDynamicArea(id))DestroyDynamicArea(id);
}
stock CreateTheDynamicObject(modelid, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz, world = -1, interior = -1, player = -1)
{
    if(!IsValidObjectModel(modelid)) return printf("ERROR: Mode PANG OBJECTS INVALID OBJECT MODEL %d",modelid);
	new elobject;
    elobject = CreateDynamicObject(modelid, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz, world, interior, player, getVewDistance(modelid), DRAW_DISTANCE);
	return elobject;
}


forward SaveFileStuff();
public SaveFileStuff()
{
    SaveRPSettings();
    SaveConfig();
}
forward CheckDestroyPlayerStuff();
public CheckDestroyPlayerStuff()
{
    forLoop(i, MAX_PLAYERS)
	{
		/*if(IsPlayerConnected(i) && PlayerInfo[i][Registered] == 1)
		{
		    SavePlayer(i, 1);
		}*/
		if(!IsPlayerConnected(i) && PlayerInfo[i][StuffCreated] == 1)
		{
			DestroyPlayerStuff(i);
			PlayerInfo[i][StuffCreated] = 0;
		}
	}
}

forward OneSecondTimer();
public OneSecondTimer()
{
    new start = GetTickCount();
    new hrurs,minute,second;
	gettime(hrurs,minute,second);
	
	new Float:health,var,reason[64];
	new pstate,vehicleid;
	new Float:x,Float:y,Float:z;
	
	/*new d_query[200];
    new ateam, Float:p_hp, Float:p_ar, model, Float:v_hp, event;*/
	forLoop(i, MAX_PLAYERS)
	{
		if(IsPlayerConnected(i) && !IsPlayerNPC(i))
		{
		    if(db_IsIPBanned(getThePlayerIP(i)))
			{
			    db_GetBannedInfoByIP(getThePlayerIP(i), i, false);
		    	BlockIpAddress(IPRange(getThePlayerIP(i)), 5*60 * 1000);
			    KickThePlayer(i);
			    continue;
			}
			/*if(db_IsSerialBanned(getThePlayerSerial(i)))
			{
		        db_GetBannedInfoByName(PlayerInfo[i][Name], i, false);
		    	BlockIpAddress(IPRange(getThePlayerIP(i)), 5*60 * 1000);
			    KickThePlayer(i);
			    continue;
			}*/

			if(db_IsNameBanned(PlayerInfo[i][Name], getThePlayerSerial(i), true))
			{
		        db_GetBannedInfoByName(PlayerInfo[i][Name], i, false);
		    	BlockIpAddress(getThePlayerIP(i), 60 * 1000);
			    KickThePlayer(i);
			    continue;
			}

		    if(PlayerInfo[i][Spawned] == 1)
		    {
		        if(FullyConnected[i])
		        {
	                GetPlayerPos(i,x,y,z);
			        pstate=GetPlayerState(i);
			        vehicleid=GetPlayerVehicleID(i);

					if(AC_Variables[MONEY_HACK])
					    if(GetPlayerMoney(i)>AC_PlayerInfo[i][AC_pMoney])
					        AC_SetPlayerMoney(i,AC_PlayerInfo[i][AC_pMoney]);

		            if(AC_PlayerInfo[i][AC_pSpeedhacking]>=MAX_CHECKS)
					{
					    TogglePlayerControllable(i,true);
					    AC_PlayerInfo[i][AC_pSpeedhacking]=0;
					}

					if(AC_PlayerInfo[i][AC_pAirbreaking]>=MAX_CHECKS)
		                AC_PlayerInfo[i][AC_pAirbreaking]=0;

					if(IsPlayerInValidState(i) && PlayerInfo[i][Level] <= 0)
					{
						if(AC_Variables[GOD_MODE] && pstate==PLAYER_STATE_DRIVER)
						{
						    GetVehicleHealth(vehicleid,health);
						    if(health>1000.0)
						    {
						        SetVehicleHealth(vehicleid, 200);
						    }
						}

					    if(!NoTeleportCheck[i])
					    {
					        if((z<900.0)==(CurrentPos[i][2]<900.0))//Prevent kick when entering buildings.
					        {
								if(!(PlayerInfo[i][PlayerMode]== STUNT || PlayerInfo[i][PlayerMode]== DM) && pstate!=PLAYER_STATE_PASSENGER && GetPlayerSurfingVehicleID(i)==INVALID_VEHICLE_ID && !IsPlayerInRangeOfPoint(i,500.0,CurrentPos[i][0],CurrentPos[i][1],CurrentPos[i][2]) && GetPlayerVirtualWorld(i) != W_STUNT)
								{
								    if(!IsPlayerInRangeOfPoint(i,1.5,AC_PlayerInfo[i][AC_pSetPos][0],AC_PlayerInfo[i][AC_pSetPos][1],AC_PlayerInfo[i][AC_pSetPos][2]))
								    {
										AC_Warnings[i][TELEPORT_HACK]++;
								        if(AC_Variables[TELEPORT_HACK] && (IsCheatPosition(i)))
								        {
								            user_Ban(i,-1,"Teleport cheats", true, true,0);
											continue;
										}
										else
										    ACReport(i,"Teleport cheats","No details");
									}
								}
							}

							if(AC_Variables[AIRBREAK] && (pstate==PLAYER_STATE_ONFOOT || (pstate==PLAYER_STATE_DRIVER && AC_GetPlayerSpeed(i,true)<10)))
							{
							    if(!(PlayerInfo[i][PlayerMode]== STUNT && (SFPlayerInfo[i][Superman]== 1 || SFPlayerInfo[i][Spiderman]== 1)))
								{
									new denominator = (GetTickCount()-AC_PlayerInfo[i][AC_pLastCheck]);
								    if(denominator != 0)var=(floatround(floatsqroot(AC_GetSquareDistance(x,y,z,CurrentPos[i][0],CurrentPos[i][1],CurrentPos[i][2]))*3600)/denominator);
									else var = 0;
									if(var>=500 && var<=1500)
			                        {
			                            AC_PlayerInfo[i][AC_pAirbreaking]++;
									    if(AC_PlayerInfo[i][AC_pAirbreaking]==MAX_CHECKS)
										{
										    AC_Warnings[i][AIRBREAK]++;
										    if(AC_Warnings[i][AIRBREAK]<MAX_CHECKS)
										    {
											    format(reason,sizeof(reason),"height: %.2f, ~%d KM/H, vehicle: %s",z,var,AC_GetVehicleName(vehicleid));
											    ACReport(i,"Airbreak",reason);
										    }
										    else
										    {
										        user_Ban(i,-1,"Airbreak", true, true,0);
										        continue;
										    }
										}
			                        }
									else
									    AC_PlayerInfo[i][AC_pAirbreaking]=0;
								}
							}

							if(pstate==PLAYER_STATE_DRIVER && AC_Variables[MAX_SPEED])
							{
							    var=AC_GetPlayerSpeed(i,AC_Variables[SPEED_3D]);
								if(var>AC_Variables[MAX_SPEED] && !IsPlayerInPlane(i))
								{
									if(!(PlayerInfo[i][PlayerMode]== STUNT || PlayerInfo[i][PlayerMode]== DM))
									{
									    AC_PlayerInfo[i][AC_pSpeedhacking]++;
									    if(AC_PlayerInfo[i][AC_pSpeedhacking]==MAX_CHECKS)
										{
										    AC_Warnings[i][MAX_SPEED]++;
										    TogglePlayerControllable(i,false);
										    if(AC_Warnings[i][MAX_SPEED]<MAX_CHECKS)
										    {
											    format(reason,sizeof(reason),"%d KM/H with %s",var,AC_GetVehicleName(vehicleid));
											    ACReport(i,"Speed Hack",reason);
										    }
										    else
										    {
										        user_Ban(i,-1,"Speed Hack", true, true,0);
										        continue;
										    }
										}
									}
								}
								else
								    AC_PlayerInfo[i][AC_pSpeedhacking]=0;
							}
					    }
		  				else
					  		NoTeleportCheck[i]--;

					}

					CurrentPos[i][0]=x;
					CurrentPos[i][1]=y;
					CurrentPos[i][2]=z;
					AC_PlayerInfo[i][AC_pLastCheck]=GetTickCount();
				}
		        /*if(PlayerInfo[i][ID] > 0)
				{
					if(PlayerInfo[i][PlayerMode] != -1)
					{
						GetPlayerPos(i,x,y,z);
						if(PlayerInfo[i][PlayerMode] == CO || PlayerInfo[i][PlayerMode] == TW || PlayerInfo[i][PlayerMode] == TL
							|| PlayerInfo[i][PlayerMode] == CTF || PlayerInfo[i][PlayerMode] == ZO)
						{
						    ateam = PlayerInfo[i][pTeam];
						}
						else if(PlayerInfo[i][PlayerMode] == PTP)
						{
						    ateam = PTPPlayerInfo[i][Class];
						}
						else if(PlayerInfo[i][PlayerMode] == STUNT)
						{
						    event = SFPlayerInfo[i][Event];
						}

						if(IsPlayerInAnyVehicle(i))
						{
							model = GetVehicleModel(GetPlayerVehicleID(i));
							GetVehicleHealth(GetPlayerVehicleID(i),v_hp);
						}
						GetPlayerHealth(i, p_hp);
						GetPlayerArmour(i, p_ar);

					    format(d_query, sizeof d_query, "UPDATE USER_SETTINGS SET EVENT=%d,MODE=%d,TEAM=%d,VEHICLE=%d,V_HP=%d,P_HP=%d,P_AR=%d,P_X=%d,P_Y=%d,P_Z=%d WHERE ID=%d"
							,event,PlayerInfo[i][PlayerMode],ateam,model,floatround(v_hp)
							,floatround(p_hp),floatround(p_ar),floatround(x),floatround(y),floatround(z),PlayerInfo[i][ID]);
						mysql_tquery(ServerInfo[DataBase], d_query, "", "");
					}
					else
					{
					    format(d_query, sizeof d_query, "UPDATE USER_SETTINGS SET MODE=-1 WHERE ID=%d",PlayerInfo[i][ID]);
						mysql_tquery(ServerInfo[DataBase], d_query, "", "");
					}
				}*/
			    if(PlayerInfo[i][Jailed] > 0)
			    {
			        PlayerInfo[i][Jailed]--;
			        if(PlayerInfo[i][Jailed] <= 1)//one second is removed, for buffering issues
			            JailRelease(i);
			    }
			    if(PlayerInfo[i][Frozen] > 0)
			    {
			        PlayerInfo[i][Frozen]--;
			        if(PlayerInfo[i][Frozen] <= 1)
			            UnFreezeMe(i);
			    }
			    if(PlayerInfo[i][NoCMD] > 0)
			    {
			        PlayerInfo[i][NoCMD]--;
			        if(PlayerInfo[i][NoCMD] <= 1)
			            UnCMDMe(i);
			    }
			    if(PlayerInfo[i][Muted] > 0)
			    {
			        PlayerInfo[i][Muted]--;
			        if(PlayerInfo[i][Muted] <= 1)
			            UnMuteMe(i);
			    }
			    if(TWPlayerInfo[i][AlreadyLeader] > 0)
			    {
			        TWPlayerInfo[i][AlreadyLeader]--;
			        if(TWPlayerInfo[i][AlreadyLeader] <= 1)
			            AlreadyLeaderOff(i, TW);
			    }
			    if(PTPPlayerInfo[i][AlreadyLeader] > 0)
			    {
			        PTPPlayerInfo[i][AlreadyLeader]--;
			        if(PTPPlayerInfo[i][AlreadyLeader] <= 1)
			            AlreadyLeaderOff(i, PTP);
			    }
			    if(PJPlayerInfo[i][Respawning] > 0)
			    {
			        PJPlayerInfo[i][Respawning]--;
			    }
			    if(TWPlayerInfo[i][AtomicBought] > 0)
			    {
			        TWPlayerInfo[i][AtomicBought]--;
			        if(TWPlayerInfo[i][AtomicBought] <= 1)
			            AtomicBoughtOff(i);
			    }
			    if(PlayerInfo[i][sProtected] > 0 && PlayerInfo[i][MainMenu] != 0)
				{
				    PlayerInfo[i][sProtected]--;
				    if(PlayerInfo[i][sProtected] <= 1)
				        EndSpawnProtection(i);
				}
			    if(TWPlayerInfo[i][EnteredTower] > 0)
			    {
				    if(TWPlayerInfo[i][OnTower]==0)
	                {
	                    TWPlayerInfo[i][EnteredTower]--;
						if(TWPlayerInfo[i][EnteredTower] <= 1)
							TowerFix(i);
	                }
				}
				if(PlayerInfo[i][God] == 1)
				{
					SetHealth(i,100000);
				}
				if(PlayerInfo[i][GodCar] == 1 && IsPlayerInAnyVehicle(i))
				{
				    RepairVehicle(GetPlayerVehicleID(i));
				}
				if(PlayerInfo[i][PlayerMode] == PTP)
				{
				    if(PTPPlayerInfo[i][Class] == PRESIDENT)
				    {
				        if(IsPlayerSwimming(i))
				        {
					        new Float:ph;
							GetPlayerHealth(i,ph);
							SetHealth(i, ph-0.1);
							GameTextForPlayer(i, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~w~DO NOT SWIM - HEALTH IS LOWERING", 2000, 3);
						}
						if(IsPlayerInPlane(i))
				        {
					        new Float:ph;
							GetPlayerHealth(i,ph);
							SetHealth(i, ph-0.1);
							GameTextForPlayer(i, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~w~HEALTH IS LOWERING IN AIR VEHICLES", 2000, 3);
						}
						if(TWPlayerInfo[i][Blip] == 0)
						{
							SetPlayerColor(i, PTPClassColors[PTPPlayerInfo[i][Class]]);
							TWPlayerInfo[i][Blip] = 1;
						}
						else
						{
						    SetPlayerColor(i, 0x000000AA);
			                TWPlayerInfo[i][Blip] = 0;
						}
				    }
				}

	     		if(PlayerInfo[i][PlayerMode] == GK)
				{
					if(GKPlayerInfo[i][Holding] == 1)
				    {
						if(TWPlayerInfo[i][Blip] == 0)
						{
							SetPlayerColor(i, 0xFF0000AA);
							TWPlayerInfo[i][Blip] = 1;
						}
						else
						{
						    SetPlayerColor(i, 0x000000AA);
			                TWPlayerInfo[i][Blip] = 0;
						}
				    }
				}
				
                if(GetPlayerState(i) == PLAYER_STATE_PASSENGER)
				{
			        if(GetPlayerWeapon(i) == WEAPON_DEAGLE || GetPlayerWeapon(i) == WEAPON_SHOTGSPA || GetPlayerWeapon(i) == WEAPON_SAWEDOFF)
			        {
			            SetPlayerArmedWeapon(i, 0);
			        }
				}
				/*if(PlayerInfo[i][PlayerMode] == PTP)
				{
				    if(PlayerInfo[i][pTeam] != NOTEAM)SetPlayerTeam(i,PlayerInfo[i][pTeam]);
				    else SetPlayerTeam(i,PlayerInfo[i][pTeam]+i);
				}
				if(PlayerInfo[i][PlayerMode] == TW || PlayerInfo[i][PlayerMode] == TL || PlayerInfo[i][PlayerMode] == CTF
				 || PlayerInfo[i][PlayerMode] == ZO || PlayerInfo[i][PlayerMode] == VW)SetPlayerTeam(i,PlayerInfo[i][pTeam]);*/
				if(PlayerInfo[i][PlayerMode] == CO)
				{
				    if(PlayerInfo[i][pTeam] == CRIMINAL)
				    {
						if(IsPlayerInPlane(i))
				        {
					        new Float:ph;
							GetPlayerHealth(i,ph);
							SetHealth(i, ph-0.1);
							GameTextForPlayer(i, " ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~w~HEALTH IS LOWERING IN AIR VEHICLES", 2000, 3);
						}
					}
				    if(COPlayerInfo[i][InJail] == 1)
				    {
				        if(ServerInfo[COBigPrison] == 0)SetHealth(i,1000.0);
				        SetPlayerTeam(i, COP);
					}
					else
				    	SetPlayerTeam(i,PlayerInfo[i][pTeam]);
				}
				if(IsPlayerInAnyVehicle(i) && DMPlayerInfo[i][Flash] == 2 && DMPlayerInfo[i][Alive] == 1 && PlayerInfo[i][PlayerMode] == DM)
				{
				    ChangeVehicleColor(GetPlayerVehicleID(i), random(333),random(333));
				}

				if(PlayerInfo[i][PlayerMode] == TRP && RPPlayerInfo[i][FirstTime] == 1)
				{
				    RPPlayerInfo[i][AliveFor]++;
					PlayerTextDrawSetString(i, RPPlayerInfo[i][p_AL], RPTimeConverter(RPPlayerInfo[i][AliveFor]));

				    SetPlayerTime(i, ModeTime[TRP], minute);
				    if(GetPlayerInterior(i) == 0)SetPlayerWeather(i,ModeWeather[TRP]);
				    else SetPlayerWeather(i, 2);
				}
				if(ServerInfo[COBigPrison] == 1)
				{
					if(PlayerInfo[i][PlayerMode] == CO && PlayerInfo[i][pTeam] == CRIMINAL)
			        {
					    if(IsPlayerInDynamicArea(i, COInfo[aBottomRight]) || IsPlayerInDynamicArea(i, COInfo[aUpperRight])
							|| IsPlayerInDynamicArea(i, COInfo[aBottomLeft]) || IsPlayerInDynamicArea(i, COInfo[aUpperLeft]))
					    {
					    	COPlayerInfo[i][InJail] = 1;
					    	SetPlayerColor(i,0xFFFF00AA);
				    	}
						else
						{
					    	COPlayerInfo[i][InJail] = 0;
					    	SetPlayerColor(i,0xFF0000AA);
				    	}
			        }
		        }
				LeaderLight(i);
				MapIconOnFlag(i);
				MGVehicleCheck(i);
				CheckAFKPlayers(i);
				if(++PlayerInfo[i][TimeOn] >= 1147483647) PlayerInfo[i][TimeOn] = 1147483640;
			}
			if(PlayerInfo[i][PlayerMode]== STUNT && SFPlayerInfo[i][Event] == 0)
			{
			    if(GetPlayerInterior(i) == 0 && GetPlayerVirtualWorld(i) == W_STUNT)SetHealth(i, 1000);
			    if((PlayerInfo[i][HasSelectedVeh] == 0 || GetPlayerVirtualWorld(i) == W_STUNT) && IsPlayerInAnyVehicle(i))RepairVehicle(GetPlayerVehicleID(i));
			}
			if(PlayerInfo[i][PlayerMode]== FFA && PlayerInfo[i][HasSelectedVeh] == 0 && IsPlayerInAnyVehicle(i))
			{
			    RepairVehicle(GetPlayerVehicleID(i));
			}
			if(PlayerInfo[i][PlayerMode]== VW)
			{
				VWUpdateSpawnTxt(i);
			}
			//PlayerUpdateStuff(i);
		}
	}
	db_UpdateStuff();
    CheckDMMapEnd();
    CheckPJMapEnd();
    RPChangeTime();
    FFACheckGangZoneStates();
    VWCheckObjectiveStates();
    VWReduceTeamScores();
	//DM/DD map end...
	if(DMMAPInfo[dStarted] == 1 && DMMAPInfo[TimeLeft] != 0 && ModeCount(DM) > 0)
	{
		DMMAPInfo[TimeLeft]--;
		if(DMMAPInfo[TimeLeft] == 0)
		{
			SendMessageToMode(DM,COLOR_WHITE, "{33FF33}DD/DM {FFFFFF}Map time has run out, map has been changed!");
            ChangeDMMapMap(DMMAPInfo[pathName]);
		}
	}
	if(PJMAPInfo[dStarted] == 1 && PJMAPInfo[TimeLeft] != 0 && ModeCount(PJ) > 0)
	{
		PJMAPInfo[TimeLeft]--;
		if(PJMAPInfo[TimeLeft] == 0)
		{
			SendMessageToMode(PJ,COLOR_WHITE, "{33FF33}PJ {FFFFFF}Map time has run out, map has been changed!");
            ChangePJMapMap(PJMAPInfo[pathName]);
		}
	}
	/*forLoop(i, MAX_MODES)
	{
	   	if(kSpree_LastCalled[i] > 0)
		{
		    kSpree_LastCalled[i]--;
		}
	}*/
	//CheckRacePositions();
	new end = GetTickCount();
	if(ServerInfo[MaxOSTTick] < end-start)
	{
		printf("onesecondti p %d  s %d e %d = %d - last %d",WConnectedPlayers(),start, end, end-start, ServerInfo[MaxOSTTick]);
	    ServerInfo[MaxOSTTick] = end-start;
	}
	//OneSecondTimer
}

forward LoadFSs();
public LoadFSs()
{
	SendRconCommand("reloadfs pangeaintro");
	SendRconCommand("reloadfs pangeapicture");
	SendRconCommand("reloadfs pangeaobjects");
	SendRconCommand("reloadfs stuntobjects");
	SendRconCommand("reloadfs ffaobjects");
	SendRconCommand("reloadfs rpobjects");
}
//==============================================================================

stock ClearTheChatForPlayer(playerid)
{
	if(PlayerInfo[playerid][Spawned] == 0)
	{
	    forLoop(i,15)
		{
			SendClientMessage(playerid, white, " ");
  		}
	}
}


forward FloodBanOnConnect(playerid);
public FloodBanOnConnect(playerid)
{
	return user_Ban(playerid,-1,"Connect flooding", true, false,0);
}

public OnPlayerFloodControl(playerid, iCount, iTimeSpan)
{
	if(iCount > 2 && iTimeSpan < 8000 && !IsPlayerNPC(playerid))
	{
		FloodBanOnConnect(playerid);
	}
}

public OnGameModeExit()
{
	SaveFileStuff();
	forLoop(i, MAX_PLAYERS)
	{
		if(IsPlayerConnected(i) && PlayerInfo[i][Registered] == 1)
			SavePlayer(i, 1);
	}
	user_FixOnlineState();
	return 1;
}

public OnGameModeInit()
{
	zcmd_g_HasOPCS = funcidx("OnPlayerCommandReceived") != -1;
	zcmd_g_HasOPCE = funcidx("OnPlayerCommandPerformed") != -1;

	SetGameModeText("Pangea");
    SendRconCommand("mapname San Andreas");
    SendRconCommand("rcon 0");
	DisableInteriorEnterExits();
	UsePlayerPedAnims();
 	ShowNameTags(1);
	SetNameTagDrawDistance(35);
	EnableStuntBonusForAll(0);
    MapAndreas_Init(MAP_ANDREAS_MODE_FULL);

    UpdateConfig();

    ServerInfo[DataBase] = mysql_connect(HOST, USER, PASSWORD, DATABASE);
    if(mysql_errno(ServerInfo[DataBase]) > 0)
    {
        printf("DB ERROR: COULDN'T CONNECT TO DB, ERROR %d",mysql_errno(ServerInfo[DataBase]));
        SendRconCommand("exit");
        return 0;
    }
	else printf("DB CONNECT SUCCESSFUL");

	forLoop(i, MAX_REPORTS) Reports[i] = "<none>";
	forLoop(i, MAX_MODES) format(ModePass[i], 20, "a");

    SetTimer("PingKick",5000,1);
	SetTimer("RandomMessagesModes", 60*900*9, true);
	SetTimer("RefoundPowerForLands", 60*900*16, true);
	SetTimer("ChangeWeather", 60*1000*10, true);
	SetTimer("RandomMessages", 60*1000*4, true);
	SetTimer("OneSecondTimer",900,1);
	SetTimer("GlobalUpdate",60*900*3,true);// Every 3 minutes
	SetTimer("SetAtomPrice", 300000, true);
	SetTimer("ReduceSpam",4000,true);
    SetTimer("CheckDMMapZForPlayer", 5000, true);
	SetTimer("CheckDestroyPlayerStuff", 60*900*30, true);//30 min
    SetTimer("TimePassedDMPJ", 10, true);
    //SetTimer("UpdateSpeedoTXT", 100, true);
	SetTimer("CheckRacePositions",500,1);

	//===================[RP]========================
	SetTimer("RPWeatherChanger",1*60*60*900, true);//every 2 hr
	SetTimer("RPRespawnItems",20*60*60*900, true);//every 20 hr 20*60*60*900
	SetTimer("RPLowerPlayerThirstHunger", 30*1000, true);
	//===============================================

	forLoop(i, MAX_MODES)
	{
	    ModeWeather[i]= 0, ModeTime[i]= 12;
	}
	//i don't know what the fuck the reason for this is...
	forLoop(i, MAX_PLAYERS)
		CreateDynamic3DTextLabel(" ", 0xFFFFFF00, 0,0,-20, 1.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 2132123, -1, -1, 100.0);

    AddPlayerClass(33,0.0,0.0,13.5622,266.4503,-1,-1,-1,-1,-1,-1);
    TextDrawCreate(250.000000,428.000000," ");

	db_LoadSettings();

	Settings();
	CreateServerTXTs();
    TWSettings();
    LoadTWSquads();
    COSettings();
    CTFSettings();
    TLSettings();
    ChangeMapZO();
    ChangeMapGK();
    PTPSettings();
    VWSettings();

	LoadFFACars();
    LoadFFAGangs();
	LoadFFAZones();
	LoadFFAProperties();

	LoadSFCars();
	LoadSFCMDS();
	LoadSFEvents();
	user_FixOnlineState();

	LoadRPSettings();
    LPCars();
    ChangeDMMapMap("a");
    ChangePJMapMap("a");

	forLoop(i, MAX_PLAYERS)
	{
	    format(PlayerInfo[i][Name],60,"%s","");
	    OnConnectVarInit(i);
	   	//OnConnectCreateTDs(i);
	   	OnConnectCreate3Ds(i);
	    //OneSecondTimer
    }
    SetTimer("LoadFSs", 5000, false);
	return 1;
}

